
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08009160  08009160  0000a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d8  080095d8  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095d8  080095d8  0000a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e0  080095e0  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095e4  080095e4  0000a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080095e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000068  08009650  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08009650  0000b668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016957  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b20  00000000  00000000  000219ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00025510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001014  00000000  00000000  000269f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028678  00000000  00000000  00027a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef1e  00000000  00000000  00050084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6463  00000000  00000000  0006efa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  00165448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009148 	.word	0x08009148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08009148 	.word	0x08009148

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Generic header/tail validation
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <frame_expect_req>:
// =====================
// Frame validators
// =====================
// Ensure buffer has min length, proper header/tail, and expected type
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <frame_expect_req+0x1e>
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d202      	bcs.n	800060e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	e012      	b.n	8000634 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800060e:	2355      	movs	r3, #85	@ 0x55
 8000610:	22aa      	movs	r2, #170	@ 0xaa
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ffc1 	bl	800059c <has_header_tail>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	429a      	cmp	r2, r3
 800062a:	d002      	beq.n	8000632 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 800062c:	f06f 0301 	mvn.w	r3, #1
 8000630:	e000      	b.n	8000634 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <led_ctrl_req_decoder>:

// New LED_CTRL (RGB) request is 9 bytes total:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask, [4]=R, [5]=G, [6]=B,
// [7]=parity(byte XOR over 1..6), [8]=0x55

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <led_ctrl_req_decoder+0x18>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	e025      	b.n	80006a6 <led_ctrl_req_decoder+0x6a>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, 9);
 800065a:	2309      	movs	r3, #9
 800065c:	2207      	movs	r2, #7
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ffc2 	bl	80005ea <frame_expect_req>
 8000666:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <led_ctrl_req_decoder+0x36>
        return st;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	e019      	b.n	80006a6 <led_ctrl_req_decoder+0x6a>
    out->frameId = raw[2];
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3302      	adds	r3, #2
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3303      	adds	r3, #3
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]
    out->r = raw[4];
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3304      	adds	r3, #4
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	709a      	strb	r2, [r3, #2]
    out->g = raw[5];
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3305      	adds	r3, #5
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	70da      	strb	r2, [r3, #3]
    out->b = raw[6];
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3306      	adds	r3, #6
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	711a      	strb	r2, [r3, #4]
    return PROTO_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 80006bc:	2248      	movs	r2, #72	@ 0x48
 80006be:	2100      	movs	r1, #0
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f007 feb7 	bl	8008434 <memset>
	r->resp = resp_fifo;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d009      	beq.n	80006e6 <router_init+0x36>
		handlers = *h;
 80006d2:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <router_init+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4614      	mov	r4, r2
 80006d8:	461d      	mov	r5, r3
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bdb0      	pop	{r4, r5, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084

080006f4 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	if (n < 4)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d801      	bhi.n	8000708 <is_req_complete+0x14>
		return 0; // mínimo
 8000704:	2300      	movs	r3, #0
 8000706:	e01a      	b.n	800073e <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2baa      	cmp	r3, #170	@ 0xaa
 800070e:	d002      	beq.n	8000716 <is_req_complete+0x22>
		return -1; // inválido
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	e013      	b.n	800073e <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000716:	2303      	movs	r3, #3
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e00b      	b.n	8000734 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b55      	cmp	r3, #85	@ 0x55
 8000726:	d102      	bne.n	800072e <is_req_complete+0x3a>
			return (int) (i + 1);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	e007      	b.n	800073e <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d3ef      	bcc.n	800071c <is_req_complete+0x28>
	}
	return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	if (len < 4)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b03      	cmp	r3, #3
 800075c:	f240 80a4 	bls.w	80008a8 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3301      	adds	r3, #1
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	3b01      	subs	r3, #1
 800076c:	2b1f      	cmp	r3, #31
 800076e:	f200 809d 	bhi.w	80008ac <dispatch+0x160>
 8000772:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <dispatch+0x2c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	080007f9 	.word	0x080007f9
 800077c:	0800080f 	.word	0x0800080f
 8000780:	08000825 	.word	0x08000825
 8000784:	0800083b 	.word	0x0800083b
 8000788:	08000851 	.word	0x08000851
 800078c:	08000867 	.word	0x08000867
 8000790:	0800087d 	.word	0x0800087d
 8000794:	080008ad 	.word	0x080008ad
 8000798:	080008ad 	.word	0x080008ad
 800079c:	080008ad 	.word	0x080008ad
 80007a0:	080008ad 	.word	0x080008ad
 80007a4:	080008ad 	.word	0x080008ad
 80007a8:	080008ad 	.word	0x080008ad
 80007ac:	080008ad 	.word	0x080008ad
 80007b0:	080008ad 	.word	0x080008ad
 80007b4:	080008ad 	.word	0x080008ad
 80007b8:	080008ad 	.word	0x080008ad
 80007bc:	080008ad 	.word	0x080008ad
 80007c0:	080008ad 	.word	0x080008ad
 80007c4:	080008ad 	.word	0x080008ad
 80007c8:	080008ad 	.word	0x080008ad
 80007cc:	080008ad 	.word	0x080008ad
 80007d0:	080008ad 	.word	0x080008ad
 80007d4:	080008ad 	.word	0x080008ad
 80007d8:	080008ad 	.word	0x080008ad
 80007dc:	080008ad 	.word	0x080008ad
 80007e0:	080008ad 	.word	0x080008ad
 80007e4:	080008ad 	.word	0x080008ad
 80007e8:	080008ad 	.word	0x080008ad
 80007ec:	080008ad 	.word	0x080008ad
 80007f0:	080008ad 	.word	0x080008ad
 80007f4:	08000893 	.word	0x08000893
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 80007f8:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <dispatch+0x188>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d057      	beq.n	80008b0 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000800:	4b34      	ldr	r3, [pc, #208]	@ (80008d4 <dispatch+0x188>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	4798      	blx	r3
		break;
 800080c:	e050      	b.n	80008b0 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <dispatch+0x188>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d04e      	beq.n	80008b4 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000816:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <dispatch+0x188>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	4798      	blx	r3
		break;
 8000822:	e047      	b.n	80008b4 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <dispatch+0x188>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d045      	beq.n	80008b8 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <dispatch+0x188>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	4798      	blx	r3
		break;
 8000838:	e03e      	b.n	80008b8 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <dispatch+0x188>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d03c      	beq.n	80008bc <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000842:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <dispatch+0x188>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	4798      	blx	r3
		break;
 800084e:	e035      	b.n	80008bc <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <dispatch+0x188>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d033      	beq.n	80008c0 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <dispatch+0x188>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	4798      	blx	r3
		break;
 8000864:	e02c      	b.n	80008c0 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <dispatch+0x188>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d02a      	beq.n	80008c4 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <dispatch+0x188>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	4798      	blx	r3
		break;
 800087a:	e023      	b.n	80008c4 <dispatch+0x178>
	case REQ_LED_CTRL:
		if (handlers.on_led_ctrl)
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <dispatch+0x188>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d021      	beq.n	80008c8 <dispatch+0x17c>
			handlers.on_led_ctrl(r, f, len);
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <dispatch+0x188>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	4798      	blx	r3
		break;
 8000890:	e01a      	b.n	80008c8 <dispatch+0x17c>
	case REQ_FPGA_STATUS:
		if (handlers.on_fpga_status)
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <dispatch+0x188>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d018      	beq.n	80008cc <dispatch+0x180>
			handlers.on_fpga_status(r, f, len);
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <dispatch+0x188>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	4798      	blx	r3
		break;
 80008a6:	e011      	b.n	80008cc <dispatch+0x180>
		return;
 80008a8:	bf00      	nop
 80008aa:	e010      	b.n	80008ce <dispatch+0x182>
	default:
		break; // desconhecido
 80008ac:	bf00      	nop
 80008ae:	e00e      	b.n	80008ce <dispatch+0x182>
		break;
 80008b0:	bf00      	nop
 80008b2:	e00c      	b.n	80008ce <dispatch+0x182>
		break;
 80008b4:	bf00      	nop
 80008b6:	e00a      	b.n	80008ce <dispatch+0x182>
		break;
 80008b8:	bf00      	nop
 80008ba:	e008      	b.n	80008ce <dispatch+0x182>
		break;
 80008bc:	bf00      	nop
 80008be:	e006      	b.n	80008ce <dispatch+0x182>
		break;
 80008c0:	bf00      	nop
 80008c2:	e004      	b.n	80008ce <dispatch+0x182>
		break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <dispatch+0x182>
		break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <dispatch+0x182>
		break;
 80008cc:	bf00      	nop
	}
}
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000084 	.word	0x20000084

080008d8 <router_feed_bytes>:

void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e038      	b.n	800095c <router_feed_bytes+0x84>
		if (r->idx >= sizeof(r->acc))
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80008f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80008f2:	d903      	bls.n	80008fc <router_feed_bytes+0x24>
			r->idx = 0; // evita overflow simples
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	441a      	add	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000908:	1c59      	adds	r1, r3, #1
 800090a:	b2c8      	uxtb	r0, r1
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000912:	4619      	mov	r1, r3
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	545a      	strb	r2, [r3, r1]
		int comp = is_req_complete(r->acc, r->idx);
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f7ff fee5 	bl	80006f4 <is_req_complete>
 800092a:	6138      	str	r0, [r7, #16]
		if (comp < 0) {
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	da04      	bge.n	800093c <router_feed_bytes+0x64>
			r->idx = 0;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			continue;
 800093a:	e00c      	b.n	8000956 <router_feed_bytes+0x7e>
		} // descarta até header
		if (comp > 0) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd09      	ble.n	8000956 <router_feed_bytes+0x7e>
			dispatch(r, r->acc, (uint32_t) comp);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4619      	mov	r1, r3
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f7ff feff 	bl	800074c <dispatch>
			r->idx = 0;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	for (uint32_t i = 0; i < len; i++) {
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3c2      	bcc.n	80008ea <router_feed_bytes+0x12>
		}
	}
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <resp_fifo_create>:

response_fifo_t* resp_fifo_create(void) {
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
	response_fifo_t *q = (response_fifo_t*) calloc(1, sizeof(*q));
 8000974:	210c      	movs	r1, #12
 8000976:	2001      	movs	r0, #1
 8000978:	f007 f988 	bl	8007c8c <calloc>
 800097c:	4603      	mov	r3, r0
 800097e:	607b      	str	r3, [r7, #4]
	return q;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <resp_fifo_pop>:
		q->head = n;
	q->tail = n;
	q->count++;
	return PROTO_OK;
}
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
	if (!q || !q->head || !out)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <resp_fifo_pop+0x20>
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <resp_fifo_pop+0x20>
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <resp_fifo_pop+0x24>
		return 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e02e      	b.n	8000a0c <resp_fifo_pop+0x82>
	node_t *n = q->head;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	617b      	str	r3, [r7, #20]
	if (n->len > max_len)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d202      	bcs.n	80009c4 <resp_fifo_pop+0x3a>
		return PROTO_ERR_RANGE;
 80009be:	f06f 0303 	mvn.w	r3, #3
 80009c2:	e023      	b.n	8000a0c <resp_fifo_pop+0x82>
	memcpy(out, n->buf, n->len);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	6819      	ldr	r1, [r3, #0]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	461a      	mov	r2, r3
 80009ce:	68b8      	ldr	r0, [r7, #8]
 80009d0:	f007 fdbb 	bl	800854a <memcpy>
	int l = (int) n->len;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
	q->head = n->next;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	601a      	str	r2, [r3, #0]
	if (!q->head)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <resp_fifo_pop+0x66>
		q->tail = NULL;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
	q->count--;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	1e5a      	subs	r2, r3, #1
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	609a      	str	r2, [r3, #8]
	free(n->buf);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 f968 	bl	8007cd4 <free>
	free(n);
 8000a04:	6978      	ldr	r0, [r7, #20]
 8000a06:	f007 f965 	bl	8007cd4 <free>
	return l;
 8000a0a:	693b      	ldr	r3, [r7, #16]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af04      	add	r7, sp, #16
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <home_on_move_home+0x2c>)
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <home_on_move_home+0x30>)
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <home_on_move_home+0x34>)
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <home_on_move_home+0x38>)
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2101      	movs	r1, #1
 8000a32:	2003      	movs	r0, #3
 8000a34:	f000 f932 	bl	8000c9c <log_event_auto>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08009160 	.word	0x08009160
 8000a44:	08009178 	.word	0x08009178
 8000a48:	0800916c 	.word	0x0800916c
 8000a4c:	08009188 	.word	0x08009188

08000a50 <led_service_init>:
#include "Services/Log/log_service.h"
#include <stdio.h>

LOG_SVC_DEFINE(LOG_SVC_LED, "led");

void led_service_init(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gi = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    // Configure RGB pins
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
    gi.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
    gi.Pin = LED_R_GPIO_PIN; HAL_GPIO_Init(LED_R_GPIO_PORT, &gi);
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <led_service_init+0x74>)
 8000a7a:	f001 ff5f 	bl	800293c <HAL_GPIO_Init>
    gi.Pin = LED_G_GPIO_PIN; HAL_GPIO_Init(LED_G_GPIO_PORT, &gi);
 8000a7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	480e      	ldr	r0, [pc, #56]	@ (8000ac4 <led_service_init+0x74>)
 8000a8a:	f001 ff57 	bl	800293c <HAL_GPIO_Init>
    gi.Pin = LED_B_GPIO_PIN; HAL_GPIO_Init(LED_B_GPIO_PORT, &gi);
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <led_service_init+0x74>)
 8000a98:	f001 ff50 	bl	800293c <HAL_GPIO_Init>
    // Default OFF
#if LED_ACTIVE_HIGH
    HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <led_service_init+0x74>)
 8000aa2:	f002 f9d7 	bl	8002e54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <led_service_init+0x74>)
 8000aae:	f002 f9d1 	bl	8002e54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <led_service_init+0x74>)
 8000ab8:	f002 f9cc 	bl	8002e54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
#endif
#endif
}
 8000abc:	bf00      	nop
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <led_apply_rgb>:
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}

#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
static inline void led_apply_rgb(uint8_t r, uint8_t g, uint8_t b, uint8_t mask) {
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	4603      	mov	r3, r0
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	717b      	strb	r3, [r7, #5]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	713b      	strb	r3, [r7, #4]
    // Treat non-zero as ON (binary per channel). For PWM, integrate TIM later.
    if (mask & LED_MASK_R) {
 8000ae6:	793b      	ldrb	r3, [r7, #4]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00a      	beq.n	8000b06 <led_apply_rgb+0x3e>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	2102      	movs	r1, #2
 8000b00:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <led_apply_rgb+0x88>)
 8000b02:	f002 f9a7 	bl	8002e54 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_G) {
 8000b06:	793b      	ldrb	r3, [r7, #4]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00b      	beq.n	8000b28 <led_apply_rgb+0x60>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf14      	ite	ne
 8000b16:	2301      	movne	r3, #1
 8000b18:	2300      	moveq	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <led_apply_rgb+0x88>)
 8000b24:	f002 f996 	bl	8002e54 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_B) {
 8000b28:	793b      	ldrb	r3, [r7, #4]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00a      	beq.n	8000b48 <led_apply_rgb+0x80>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b32:	797b      	ldrb	r3, [r7, #5]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2180      	movs	r1, #128	@ 0x80
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <led_apply_rgb+0x88>)
 8000b44:	f002 f986 	bl	8002e54 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	48000400 	.word	0x48000400

08000b54 <led_on_led_ctrl>:
#endif

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08b      	sub	sp, #44	@ 0x2c
 8000b58:	af06      	add	r7, sp, #24
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
    led_ctrl_req_t req;
    if (!frame)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d023      	beq.n	8000bac <led_on_led_ctrl+0x58>
        return;
    if (led_ctrl_req_decoder(frame, len, &req) != PROTO_OK)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	461a      	mov	r2, r3
 8000b6a:	6839      	ldr	r1, [r7, #0]
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fd65 	bl	800063c <led_ctrl_req_decoder>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11b      	bne.n	8000bb0 <led_on_led_ctrl+0x5c>
        return;
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    led_apply_rgb(req.r, req.g, req.b, req.ledMask);
 8000b78:	7ab8      	ldrb	r0, [r7, #10]
 8000b7a:	7af9      	ldrb	r1, [r7, #11]
 8000b7c:	7b3a      	ldrb	r2, [r7, #12]
 8000b7e:	7a7b      	ldrb	r3, [r7, #9]
 8000b80:	f7ff ffa2 	bl	8000ac8 <led_apply_rgb>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "applied", "mask=0x%02X rgb=%u,%u,%u", (unsigned)req.ledMask, req.r, req.g, req.b);
 8000b84:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb8 <led_on_led_ctrl+0x64>)
 8000b86:	7a7b      	ldrb	r3, [r7, #9]
 8000b88:	7ab9      	ldrb	r1, [r7, #10]
 8000b8a:	7af8      	ldrb	r0, [r7, #11]
 8000b8c:	7b3c      	ldrb	r4, [r7, #12]
 8000b8e:	9405      	str	r4, [sp, #20]
 8000b90:	9004      	str	r0, [sp, #16]
 8000b92:	9103      	str	r1, [sp, #12]
 8000b94:	9302      	str	r3, [sp, #8]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <led_on_led_ctrl+0x68>)
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <led_on_led_ctrl+0x6c>)
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 f879 	bl	8000c9c <log_event_auto>
 8000baa:	e002      	b.n	8000bb2 <led_on_led_ctrl+0x5e>
        return;
 8000bac:	bf00      	nop
 8000bae:	e000      	b.n	8000bb2 <led_on_led_ctrl+0x5e>
        return;
 8000bb0:	bf00      	nop
    // Use green component as ON/OFF for mono LED when RGB not wired
    if (req.ledMask & (LED_MASK_R | LED_MASK_G | LED_MASK_B))
        led_apply_mono((req.r | req.g | req.b) ? 1u : 0u);
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "applied", "%s", ((req.r | req.g | req.b) ? "on" : "off"));
#endif
}
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	08009194 	.word	0x08009194
 8000bbc:	08009198 	.word	0x08009198
 8000bc0:	080091b4 	.word	0x080091b4

08000bc4 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    // Ensure stdout is unbuffered so printf flushes immediately to UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <log_service_init+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6898      	ldr	r0, [r3, #8]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f007 fa66 	bl	80080a4 <setvbuf>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000018 	.word	0x20000018

08000be0 <log_event_ids>:

void log_poll(void){
    // No-op: transmission is synchronous via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	603a      	str	r2, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	460b      	mov	r3, r1
 8000bee:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8000bf0:	79f9      	ldrb	r1, [r7, #7]
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <log_event_ids+0x24>)
 8000bf8:	f007 f9e4 	bl	8007fc4 <iprintf>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	080091bc 	.word	0x080091bc

08000c08 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <log_event_names+0x16>
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <log_event_names+0x40>)
 8000c1c:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <log_event_names+0x20>
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <log_event_names+0x40>)
 8000c26:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <log_event_names+0x2a>
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <log_event_names+0x40>)
 8000c30:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	68f9      	ldr	r1, [r7, #12]
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <log_event_names+0x44>)
 8000c3a:	f007 f9c3 	bl	8007fc4 <iprintf>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	080091dc 	.word	0x080091dc
 8000c4c:	080091e0 	.word	0x080091e0

08000c50 <_write>:

// Keep _write exactly as-is: used by printf to send to USART1.
int _write(int fd, char *ptr, int len) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d002      	beq.n	8000c68 <_write+0x18>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d111      	bne.n	8000c8c <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <_write+0x48>)
 8000c74:	f006 f948 	bl	8006f08 <HAL_UART_Transmit>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <_write+0x36>
        return len;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	e004      	b.n	8000c90 <_write+0x40>
      else
        return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e001      	b.n	8000c90 <_write+0x40>
    }
    return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000490 	.word	0x20000490

08000c9c <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0a8      	sub	sp, #160	@ 0xa0
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	460b      	mov	r3, r1
 8000cac:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8000cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d010      	beq.n	8000cd8 <log_event_auto+0x3c>
 8000cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8000cc0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000cc4:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8000cc6:	f107 0018 	add.w	r0, r7, #24
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000cd0:	2180      	movs	r1, #128	@ 0x80
 8000cd2:	f007 fb0d 	bl	80082f0 <vsniprintf>
    if(fmt && fmt[0]){
 8000cd6:	e003      	b.n	8000ce0 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8000cd8:	233f      	movs	r3, #63	@ 0x3f
 8000cda:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8000cdc:	2300      	movs	r3, #0
 8000cde:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <log_event_auto+0x4e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	e000      	b.n	8000cec <log_event_auto+0x50>
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <log_event_auto+0x84>)
 8000cec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8000cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <log_event_auto+0x62>
 8000cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cfc:	e000      	b.n	8000d00 <log_event_auto+0x64>
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <log_event_auto+0x84>)
 8000d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000d0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8000d10:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <log_event_auto+0x88>)
 8000d12:	f007 f957 	bl	8007fc4 <iprintf>
}
 8000d16:	bf00      	nop
 8000d18:	37a0      	adds	r7, #160	@ 0xa0
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080091dc 	.word	0x080091dc
 8000d24:	080091e0 	.word	0x080091e0

08000d28 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <motion_on_move_queue_add+0x50>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <motion_on_move_queue_add+0x50>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <motion_on_move_queue_add+0x50>)
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <motion_on_move_queue_add+0x50>)
 8000d4e:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <motion_on_move_queue_add+0x54>)
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <motion_on_move_queue_add+0x50>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <motion_on_move_queue_add+0x58>)
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <motion_on_move_queue_add+0x5c>)
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff ff97 	bl	8000c9c <log_event_auto>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000a4 	.word	0x200000a4
 8000d7c:	08009204 	.word	0x08009204
 8000d80:	0800921c 	.word	0x0800921c
 8000d84:	0800922c 	.word	0x0800922c

08000d88 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 8000d92:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <motion_on_move_queue_status+0x3c>)
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <motion_on_move_queue_status+0x40>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <motion_on_move_queue_status+0x40>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	9303      	str	r3, [sp, #12]
 8000da4:	9102      	str	r1, [sp, #8]
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <motion_on_move_queue_status+0x44>)
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <motion_on_move_queue_status+0x48>)
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4613      	mov	r3, r2
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff ff71 	bl	8000c9c <log_event_auto>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08009204 	.word	0x08009204
 8000dc8:	200000a4 	.word	0x200000a4
 8000dcc:	08009238 	.word	0x08009238
 8000dd0:	08009250 	.word	0x08009250

08000dd4 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <motion_on_start_move+0x4c>)
 8000de0:	785b      	ldrb	r3, [r3, #1]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <motion_on_start_move+0x4c>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 8000dee:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <motion_on_start_move+0x50>)
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <motion_on_start_move+0x4c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d101      	bne.n	8000dfe <motion_on_start_move+0x2a>
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <motion_on_start_move+0x54>)
 8000dfc:	e000      	b.n	8000e00 <motion_on_start_move+0x2c>
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <motion_on_start_move+0x58>)
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <motion_on_start_move+0x5c>)
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <motion_on_start_move+0x60>)
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff43 	bl	8000c9c <log_event_auto>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000a4 	.word	0x200000a4
 8000e24:	08009204 	.word	0x08009204
 8000e28:	08009260 	.word	0x08009260
 8000e2c:	08009268 	.word	0x08009268
 8000e30:	08009210 	.word	0x08009210
 8000e34:	08009270 	.word	0x08009270

08000e38 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <motion_on_move_end+0x34>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 8000e48:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <motion_on_move_end+0x38>)
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <motion_on_move_end+0x3c>)
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <motion_on_move_end+0x40>)
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <motion_on_move_end+0x44>)
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	4613      	mov	r3, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f7ff ff1d 	bl	8000c9c <log_event_auto>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000a4 	.word	0x200000a4
 8000e70:	08009204 	.word	0x08009204
 8000e74:	0800927c 	.word	0x0800927c
 8000e78:	08009210 	.word	0x08009210
 8000e7c:	08009288 	.word	0x08009288

08000e80 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <probe_on_move_probe_level+0x2c>)
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <probe_on_move_probe_level+0x30>)
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <probe_on_move_probe_level+0x34>)
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <probe_on_move_probe_level+0x38>)
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f7ff fefc 	bl	8000c9c <log_event_auto>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	08009294 	.word	0x08009294
 8000eb0:	080092ac 	.word	0x080092ac
 8000eb4:	080092a0 	.word	0x080092a0
 8000eb8:	080092bc 	.word	0x080092bc

08000ebc <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"

// Static adapter functions matching router callbacks
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	68b8      	ldr	r0, [r7, #8]
 8000ecc:	f7ff ff2c 	bl	8000d28 <motion_on_move_queue_add>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	68b8      	ldr	r0, [r7, #8]
 8000ee8:	f7ff ff4e 	bl	8000d88 <motion_on_move_queue_status>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	68b8      	ldr	r0, [r7, #8]
 8000f04:	f7ff ff66 	bl	8000dd4 <motion_on_start_move>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	68b8      	ldr	r0, [r7, #8]
 8000f20:	f7ff fd78 	bl	8000a14 <home_on_move_home>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f7ff ffa0 	bl	8000e80 <probe_on_move_probe_level>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ff6e 	bl	8000e38 <motion_on_move_end>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f7ff fdee 	bl	8000b54 <led_on_led_ctrl>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	if (!h)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d018      	beq.n	8000fd8 <services_register_handlers+0x40>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <services_register_handlers+0x4c>)
 8000faa:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <services_register_handlers+0x50>)
 8000fb0:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <services_register_handlers+0x54>)
 8000fb6:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <services_register_handlers+0x58>)
 8000fbc:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <services_register_handlers+0x5c>)
 8000fc2:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <services_register_handlers+0x60>)
 8000fc8:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <services_register_handlers+0x64>)
 8000fce:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <services_register_handlers+0x68>)
 8000fd4:	61da      	str	r2, [r3, #28]
 8000fd6:	e000      	b.n	8000fda <services_register_handlers+0x42>
		return;
 8000fd8:	bf00      	nop
}
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	08000ebd 	.word	0x08000ebd
 8000fe8:	08000ed9 	.word	0x08000ed9
 8000fec:	08000ef5 	.word	0x08000ef5
 8000ff0:	08000f11 	.word	0x08000f11
 8000ff4:	08000f2d 	.word	0x08000f2d
 8000ff8:	08000f49 	.word	0x08000f49
 8000ffc:	08000f65 	.word	0x08000f65
 8001000:	08000f81 	.word	0x08000f81

08001004 <app_init>:
static uint8_t g_spi_rx_buf[APP_SPI_RX_BUF_SZ];
static volatile int g_spi_tx_busy = 0;

LOG_SVC_DEFINE(LOG_SVC_APP, "app");

void app_init(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af04      	add	r7, sp, #16
    // Init services (GPIO for LED etc.)
    led_service_init();
 800100a:	f7ff fd21 	bl	8000a50 <led_service_init>
    log_service_init();
 800100e:	f7ff fdd9 	bl	8000bc4 <log_service_init>
    // Boot log (visible on USART1 VCP terminal)
    LOGT_THIS(LOG_STATE_START, PROTO_OK, "start", "ready");
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <app_init+0x64>)
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <app_init+0x68>)
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <app_init+0x6c>)
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <app_init+0x70>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4613      	mov	r3, r2
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fe38 	bl	8000c9c <log_event_auto>

    // Prepare router and response FIFO
    g_resp_fifo = resp_fifo_create();
 800102c:	f7ff fc9f 	bl	800096e <resp_fifo_create>
 8001030:	4603      	mov	r3, r0
 8001032:	4a11      	ldr	r2, [pc, #68]	@ (8001078 <app_init+0x74>)
 8001034:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 8001036:	2220      	movs	r2, #32
 8001038:	2100      	movs	r1, #0
 800103a:	4810      	ldr	r0, [pc, #64]	@ (800107c <app_init+0x78>)
 800103c:	f007 f9fa 	bl	8008434 <memset>
    services_register_handlers(&g_handlers);
 8001040:	480e      	ldr	r0, [pc, #56]	@ (800107c <app_init+0x78>)
 8001042:	f7ff ffa9 	bl	8000f98 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <app_init+0x74>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <app_init+0x78>)
 800104c:	4619      	mov	r1, r3
 800104e:	480c      	ldr	r0, [pc, #48]	@ (8001080 <app_init+0x7c>)
 8001050:	f7ff fb2e 	bl	80006b0 <router_init>

    // Start SPI RX DMA in circular mode to feed router from callbacks
    (void)HAL_SPI_Receive_DMA(&hspi1, g_spi_rx_buf, (uint16_t)APP_SPI_RX_BUF_SZ);
 8001054:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001058:	490a      	ldr	r1, [pc, #40]	@ (8001084 <app_init+0x80>)
 800105a:	480b      	ldr	r0, [pc, #44]	@ (8001088 <app_init+0x84>)
 800105c:	f004 f968 	bl	8005330 <HAL_SPI_Receive_DMA>
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	080092d0 	.word	0x080092d0
 800106c:	080092d4 	.word	0x080092d4
 8001070:	080092dc 	.word	0x080092dc
 8001074:	080092e0 	.word	0x080092e0
 8001078:	20000114 	.word	0x20000114
 800107c:	200000f4 	.word	0x200000f4
 8001080:	200000ac 	.word	0x200000ac
 8001084:	20000118 	.word	0x20000118
 8001088:	2000021c 	.word	0x2000021c

0800108c <app_poll>:

void app_poll(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	@ 0x48
 8001090:	af00      	add	r7, sp, #0
    // If TX is idle, try to pop one response frame from FIFO and transmit
    if (!g_spi_tx_busy && g_resp_fifo) {
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <app_poll+0x50>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d11b      	bne.n	80010d2 <app_poll+0x46>
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <app_poll+0x54>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d017      	beq.n	80010d2 <app_poll+0x46>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <app_poll+0x54>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1d39      	adds	r1, r7, #4
 80010a8:	2240      	movs	r2, #64	@ 0x40
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fc6d 	bl	800098a <resp_fifo_pop>
 80010b0:	6478      	str	r0, [r7, #68]	@ 0x44
        if (n > 0) {
 80010b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	dd0c      	ble.n	80010d2 <app_poll+0x46>
            // Use interrupt-driven TX to avoid DMA mode constraints
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 80010b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <app_poll+0x58>)
 80010c2:	f004 f89f 	bl	8005204 <HAL_SPI_Transmit_IT>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <app_poll+0x46>
                g_spi_tx_busy = 1;
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <app_poll+0x50>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
        }
    }

    // Lowest priority: drain log output (non-blocking, only if USART idle)
    //log_poll();
}
 80010d2:	bf00      	nop
 80010d4:	3748      	adds	r7, #72	@ 0x48
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000218 	.word	0x20000218
 80010e0:	20000114 	.word	0x20000114
 80010e4:	2000021c 	.word	0x2000021c

080010e8 <HAL_SPI_RxHalfCpltCallback>:

// HAL callbacks (override weak definitions) to feed the router
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *h) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <HAL_SPI_RxHalfCpltCallback+0x22>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_SPI_RxHalfCpltCallback+0x2c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d104      	bne.n	800110a <HAL_SPI_RxHalfCpltCallback+0x22>
        router_feed_bytes(&g_router, g_spi_rx_buf, APP_SPI_RX_BUF_SZ / 2);
 8001100:	2280      	movs	r2, #128	@ 0x80
 8001102:	4905      	ldr	r1, [pc, #20]	@ (8001118 <HAL_SPI_RxHalfCpltCallback+0x30>)
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_SPI_RxHalfCpltCallback+0x34>)
 8001106:	f7ff fbe7 	bl	80008d8 <router_feed_bytes>
    }
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40013000 	.word	0x40013000
 8001118:	20000118 	.word	0x20000118
 800111c:	200000ac 	.word	0x200000ac

08001120 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *h) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <HAL_SPI_RxCpltCallback+0x24>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a06      	ldr	r2, [pc, #24]	@ (800114c <HAL_SPI_RxCpltCallback+0x2c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d105      	bne.n	8001144 <HAL_SPI_RxCpltCallback+0x24>
        router_feed_bytes(&g_router, g_spi_rx_buf + (APP_SPI_RX_BUF_SZ / 2), APP_SPI_RX_BUF_SZ / 2);
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_SPI_RxCpltCallback+0x30>)
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <HAL_SPI_RxCpltCallback+0x34>)
 8001140:	f7ff fbca 	bl	80008d8 <router_feed_bytes>
    }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013000 	.word	0x40013000
 8001150:	20000198 	.word	0x20000198
 8001154:	200000ac 	.word	0x200000ac

08001158 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_SPI_TxCpltCallback+0x1e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <HAL_SPI_TxCpltCallback+0x2c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d102      	bne.n	8001176 <HAL_SPI_TxCpltCallback+0x1e>
        g_spi_tx_busy = 0;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_SPI_TxCpltCallback+0x30>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
    }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40013000 	.word	0x40013000
 8001188:	20000218 	.word	0x20000218

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_DMA_Init+0x48>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001196:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <MX_DMA_Init+0x48>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6493      	str	r3, [r2, #72]	@ 0x48
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_DMA_Init+0x48>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	200c      	movs	r0, #12
 80011b0:	f001 f82e 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011b4:	200c      	movs	r0, #12
 80011b6:	f001 f857 	bl	8002268 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	200d      	movs	r0, #13
 80011c0:	f001 f826 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011c4:	200d      	movs	r0, #13
 80011c6:	f001 f84f 	bl	8002268 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	@ 0x30
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001324 <MX_GPIO_Init+0x14c>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <MX_GPIO_Init+0x14c>)
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001324 <MX_GPIO_Init+0x14c>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a46      	ldr	r2, [pc, #280]	@ (8001324 <MX_GPIO_Init+0x14c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a40      	ldr	r2, [pc, #256]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b3e      	ldr	r3, [pc, #248]	@ (8001324 <MX_GPIO_Init+0x14c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a3a      	ldr	r2, [pc, #232]	@ (8001324 <MX_GPIO_Init+0x14c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b35      	ldr	r3, [pc, #212]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a34      	ldr	r2, [pc, #208]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <MX_GPIO_Init+0x14c>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b2f      	ldr	r3, [pc, #188]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a2e      	ldr	r2, [pc, #184]	@ (8001324 <MX_GPIO_Init+0x14c>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <MX_GPIO_Init+0x14c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800127e:	f641 73e3 	movw	r3, #8163	@ 0x1fe3
 8001282:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4825      	ldr	r0, [pc, #148]	@ (8001328 <MX_GPIO_Init+0x150>)
 8001294:	f001 fb52 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	481f      	ldr	r0, [pc, #124]	@ (800132c <MX_GPIO_Init+0x154>)
 80012ae:	f001 fb45 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	481a      	ldr	r0, [pc, #104]	@ (8001330 <MX_GPIO_Init+0x158>)
 80012c6:	f001 fb39 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80012ca:	f649 730c 	movw	r3, #40716	@ 0x9f0c
 80012ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e2:	f001 fb2b 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80012e6:	f64f 7337 	movw	r3, #65335	@ 0xff37
 80012ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <MX_GPIO_Init+0x15c>)
 80012fc:	f001 fb1e 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001300:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001304:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <MX_GPIO_Init+0x160>)
 8001316:	f001 fb11 	bl	800293c <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3730      	adds	r7, #48	@ 0x30
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	48001000 	.word	0x48001000
 800132c:	48000800 	.word	0x48000800
 8001330:	48001c00 	.word	0x48001c00
 8001334:	48000400 	.word	0x48000400
 8001338:	48000c00 	.word	0x48000c00

0800133c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001340:	f000 fddd 	bl	8001efe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001344:	f000 f822 	bl	800138c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001348:	f7ff ff46 	bl	80011d8 <MX_GPIO_Init>
	MX_DMA_Init();
 800134c:	f7ff ff1e 	bl	800118c <MX_DMA_Init>
	MX_SPI1_Init();
 8001350:	f000 f894 	bl	800147c <MX_SPI1_Init>
	MX_TIM6_Init();
 8001354:	f000 fbae 	bl	8001ab4 <MX_TIM6_Init>
	MX_TIM2_Init();
 8001358:	f000 faac 	bl	80018b4 <MX_TIM2_Init>
	MX_TIM5_Init();
 800135c:	f000 fb54 	bl	8001a08 <MX_TIM5_Init>
	MX_TIM7_Init();
 8001360:	f000 fbde 	bl	8001b20 <MX_TIM7_Init>
	MX_TIM3_Init();
 8001364:	f000 fafa 	bl	800195c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001368:	f000 fd12 	bl	8001d90 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	app_init();
 800136c:	f7ff fe4a 	bl	8001004 <app_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printf("oioioioioioi2\r\n");
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <main+0x4c>)
 8001372:	f006 fe8f 	bl	8008094 <puts>
		HAL_Delay(1000);
 8001376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800137a:	f000 fe35 	bl	8001fe8 <HAL_Delay>
		app_poll();
 800137e:	f7ff fe85 	bl	800108c <app_poll>
		printf("oioioioioioi2\r\n");
 8001382:	bf00      	nop
 8001384:	e7f4      	b.n	8001370 <main+0x34>
 8001386:	bf00      	nop
 8001388:	080092ec 	.word	0x080092ec

0800138c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b096      	sub	sp, #88	@ 0x58
 8001390:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2244      	movs	r2, #68	@ 0x44
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f007 f84a 	bl	8008434 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013b2:	f001 fd89 	bl	8002ec8 <HAL_PWREx_ControlVoltageScaling>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80013bc:	f000 f83a 	bl	8001434 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013c0:	2310      	movs	r3, #16
 80013c2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013cc:	2360      	movs	r3, #96	@ 0x60
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d0:	2302      	movs	r3, #2
 80013d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80013dc:	2328      	movs	r3, #40	@ 0x28
 80013de:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013e0:	2307      	movs	r3, #7
 80013e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fdcb 	bl	8002f8c <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x74>
		Error_Handler();
 80013fc:	f000 f81a 	bl	8001434 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2303      	movs	r3, #3
 8001406:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001410:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001416:	463b      	mov	r3, r7
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fab8 	bl	8003990 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x9e>
		Error_Handler();
 8001426:	f000 f805 	bl	8001434 <Error_Handler>
	}
}
 800142a:	bf00      	nop
 800142c:	3758      	adds	r7, #88	@ 0x58
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	2164      	movs	r1, #100	@ 0x64
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fbce 	bl	8000be0 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <Error_Handler+0x24>)
 8001446:	4905      	ldr	r1, [pc, #20]	@ (800145c <Error_Handler+0x28>)
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <Error_Handler+0x2c>)
 800144a:	f7ff fbdd 	bl	8000c08 <log_event_names>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144e:	b672      	cpsid	i
}
 8001450:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8001452:	bf00      	nop
 8001454:	e7fd      	b.n	8001452 <Error_Handler+0x1e>
 8001456:	bf00      	nop
 8001458:	080092fc 	.word	0x080092fc
 800145c:	0800930c 	.word	0x0800930c
 8001460:	080092e8 	.word	0x080092e8

08001464 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_SPI1_Init+0x68>)
 8001482:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <MX_SPI1_Init+0x6c>)
 8001484:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_SPI1_Init+0x68>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_SPI1_Init+0x68>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_SPI1_Init+0x68>)
 8001494:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001498:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_SPI1_Init+0x68>)
 800149c:	2202      	movs	r2, #2
 800149e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_SPI1_Init+0x68>)
 80014d2:	f003 fca9 	bl	8004e28 <HAL_SPI_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80014dc:	f7ff ffaa 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000021c 	.word	0x2000021c
 80014e8:	40013000 	.word	0x40013000

080014ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a53      	ldr	r2, [pc, #332]	@ (8001658 <HAL_SPI_MspInit+0x16c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 80a0 	bne.w	8001650 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001510:	4b52      	ldr	r3, [pc, #328]	@ (800165c <HAL_SPI_MspInit+0x170>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	4a51      	ldr	r2, [pc, #324]	@ (800165c <HAL_SPI_MspInit+0x170>)
 8001516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800151a:	6613      	str	r3, [r2, #96]	@ 0x60
 800151c:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <HAL_SPI_MspInit+0x170>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <HAL_SPI_MspInit+0x170>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a4b      	ldr	r2, [pc, #300]	@ (800165c <HAL_SPI_MspInit+0x170>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_SPI_MspInit+0x170>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001540:	4b46      	ldr	r3, [pc, #280]	@ (800165c <HAL_SPI_MspInit+0x170>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	4a45      	ldr	r2, [pc, #276]	@ (800165c <HAL_SPI_MspInit+0x170>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154c:	4b43      	ldr	r3, [pc, #268]	@ (800165c <HAL_SPI_MspInit+0x170>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001558:	2310      	movs	r3, #16
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001568:	2305      	movs	r3, #5
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f001 f9e1 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800157a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158c:	2305      	movs	r3, #5
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4832      	ldr	r0, [pc, #200]	@ (8001660 <HAL_SPI_MspInit+0x174>)
 8001598:	f001 f9d0 	bl	800293c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800159c:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 800159e:	4a32      	ldr	r2, [pc, #200]	@ (8001668 <HAL_SPI_MspInit+0x17c>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80015a2:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015b6:	2280      	movs	r2, #128	@ 0x80
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80015c6:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015c8:	2220      	movs	r2, #32
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015d2:	4824      	ldr	r0, [pc, #144]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015d4:	f000 fe6c 	bl	80022b0 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 80015de:	f7ff ff29 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80015e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <HAL_SPI_MspInit+0x178>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <HAL_SPI_MspInit+0x180>)
 80015f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001670 <HAL_SPI_MspInit+0x184>)
 80015f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <HAL_SPI_MspInit+0x180>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <HAL_SPI_MspInit+0x180>)
 80015fc:	2210      	movs	r2, #16
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_SPI_MspInit+0x180>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <HAL_SPI_MspInit+0x180>)
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_SPI_MspInit+0x180>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <HAL_SPI_MspInit+0x180>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_SPI_MspInit+0x180>)
 800161a:	2220      	movs	r2, #32
 800161c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <HAL_SPI_MspInit+0x180>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001624:	4811      	ldr	r0, [pc, #68]	@ (800166c <HAL_SPI_MspInit+0x180>)
 8001626:	f000 fe43 	bl	80022b0 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001630:	f7ff ff00 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_SPI_MspInit+0x180>)
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54
 800163a:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <HAL_SPI_MspInit+0x180>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2023      	movs	r0, #35	@ 0x23
 8001646:	f000 fde3 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800164a:	2023      	movs	r0, #35	@ 0x23
 800164c:	f000 fe0c 	bl	8002268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013000 	.word	0x40013000
 800165c:	40021000 	.word	0x40021000
 8001660:	48001000 	.word	0x48001000
 8001664:	20000280 	.word	0x20000280
 8001668:	4002001c 	.word	0x4002001c
 800166c:	200002c8 	.word	0x200002c8
 8001670:	40020030 	.word	0x40020030

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_MspInit+0x44>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	4a0e      	ldr	r2, [pc, #56]	@ (80016b8 <HAL_MspInit+0x44>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6613      	str	r3, [r2, #96]	@ 0x60
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <HAL_MspInit+0x44>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_MspInit+0x44>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <HAL_MspInit+0x44>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6593      	str	r3, [r2, #88]	@ 0x58
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_MspInit+0x44>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <NMI_Handler+0x4>

080016c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <MemManage_Handler+0x4>

080016d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001712:	f000 fc49 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <DMA1_Channel2_IRQHandler+0x10>)
 8001722:	f001 f82c 	bl	800277e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000280 	.word	0x20000280

08001730 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <DMA1_Channel3_IRQHandler+0x10>)
 8001736:	f001 f822 	bl	800277e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002c8 	.word	0x200002c8

08001744 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <SPI1_IRQHandler+0x10>)
 800174a:	f004 f8c9 	bl	80058e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000021c 	.word	0x2000021c

08001758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <TIM6_DAC_IRQHandler+0x10>)
 800175e:	f004 ffd7 	bl	8006710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200003f8 	.word	0x200003f8

0800176c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM7_IRQHandler+0x10>)
 8001772:	f004 ffcd 	bl	8006710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000444 	.word	0x20000444

08001780 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00a      	b.n	80017a8 <_read+0x28>
		*ptr++ = __io_getchar();
 8001792:	f3af 8000 	nop.w
 8001796:	4601      	mov	r1, r0
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf0      	blt.n	8001792 <_read+0x12>
	}

	return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e2:	605a      	str	r2, [r3, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_isatty>:

int _isatty(int file) {
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
		errno = ENOMEM;
 8001854:	f006 fe4c 	bl	80084f0 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20018000 	.word	0x20018000
 8001884:	00000400 	.word	0x00000400
 8001888:	20000310 	.word	0x20000310
 800188c:	20000668 	.word	0x20000668

08001890 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <SystemInit+0x20>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <SystemInit+0x20>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	@ 0x30
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f006 fdb6 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001912:	2301      	movs	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4619      	mov	r1, r3
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <MX_TIM2_Init+0xa4>)
 8001926:	f004 fd31 	bl	800638c <HAL_TIM_Encoder_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001930:	f7ff fd80 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_TIM2_Init+0xa4>)
 8001942:	f005 f8c5 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800194c:	f7ff fd72 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3730      	adds	r7, #48	@ 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000314 	.word	0x20000314

0800195c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	@ 0x30
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	2224      	movs	r2, #36	@ 0x24
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f006 fd62 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 800197c:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <MX_TIM3_Init+0xa8>)
 800197e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 800198e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a8:	2301      	movs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 80019cc:	f004 fcde 	bl	800638c <HAL_TIM_Encoder_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80019d6:	f7ff fd2d 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 80019e8:	f005 f872 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80019f2:	f7ff fd1f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	@ 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000360 	.word	0x20000360
 8001a04:	40000400 	.word	0x40000400

08001a08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	@ 0x30
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2224      	movs	r2, #36	@ 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 fd0c 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a28:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <MX_TIM5_Init+0xa8>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a78:	f004 fc88 	bl	800638c <HAL_TIM_Encoder_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001a82:	f7ff fcd7 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a94:	f005 f81c 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001a9e:	f7ff fcc9 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	@ 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200003ac 	.word	0x200003ac
 8001ab0:	40000c00 	.word	0x40000c00

08001ab4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	@ (8001b1c <MX_TIM6_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8001aca:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001acc:	224f      	movs	r2, #79	@ 0x4f
 8001ace:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ad8:	2213      	movs	r2, #19
 8001ada:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ae2:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ae4:	f004 fb48 	bl	8006178 <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001aee:	f7ff fca1 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af2:	2320      	movs	r3, #32
 8001af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001b00:	f004 ffe6 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b0a:	f7ff fc93 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200003f8 	.word	0x200003f8
 8001b1c:	40001000 	.word	0x40001000

08001b20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b32:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <MX_TIM7_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b38:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b46:	2209      	movs	r2, #9
 8001b48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b52:	f004 fb11 	bl	8006178 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001b5c:	f7ff fc6a 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b6e:	f004 ffaf 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001b78:	f7ff fc5c 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000444 	.word	0x20000444
 8001b88:	40001400 	.word	0x40001400

08001b8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	@ 0x38
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bac:	d145      	bne.n	8001c3a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bba:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a46      	ldr	r2, [pc, #280]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b44      	ldr	r3, [pc, #272]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c06:	2301      	movs	r3, #1
 8001c08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c14:	f000 fe92 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4833      	ldr	r0, [pc, #204]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0x174>)
 8001c34:	f000 fe82 	bl	800293c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001c38:	e05c      	b.n	8001cf4 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a31      	ldr	r2, [pc, #196]	@ (8001d04 <HAL_TIM_Encoder_MspInit+0x178>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d129      	bne.n	8001c98 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c74:	23c0      	movs	r3, #192	@ 0xc0
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c84:	2302      	movs	r3, #2
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c92:	f000 fe53 	bl	800293c <HAL_GPIO_Init>
}
 8001c96:	e02d      	b.n	8001cf4 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d128      	bne.n	8001cf4 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf0:	f000 fe24 	bl	800293c <HAL_GPIO_Init>
}
 8001cf4:	bf00      	nop
 8001cf6:	3738      	adds	r7, #56	@ 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000400 	.word	0x48000400
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000c00 	.word	0x40000c00

08001d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <HAL_TIM_Base_MspInit+0x78>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2036      	movs	r0, #54	@ 0x36
 8001d3c:	f000 fa68 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d40:	2036      	movs	r0, #54	@ 0x36
 8001d42:	f000 fa91 	bl	8002268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d46:	e018      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_TIM_Base_MspInit+0x80>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d113      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2037      	movs	r0, #55	@ 0x37
 8001d70:	f000 fa4e 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d74:	2037      	movs	r0, #55	@ 0x37
 8001d76:	f000 fa77 	bl	8002268 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40001000 	.word	0x40001000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40001400 	.word	0x40001400

08001d90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <MX_USART1_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_USART1_UART_Init+0x58>)
 8001dd4:	f004 fff0 	bl	8006db8 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f7ff fb29 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000490 	.word	0x20000490
 8001dec:	40013800 	.word	0x40013800

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0ac      	sub	sp, #176	@ 0xb0
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2288      	movs	r2, #136	@ 0x88
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f006 fb0f 	bl	8008434 <memset>
  if(uartHandle->Instance==USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <HAL_UART_MspInit+0xb0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d13a      	bne.n	8001e96 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 f873 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e38:	f7ff fafc 	bl	8001434 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_UART_MspInit+0xb4>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <HAL_UART_MspInit+0xb4>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_UART_MspInit+0xb4>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <HAL_UART_MspInit+0xb4>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <HAL_UART_MspInit+0xb4>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_UART_MspInit+0xb4>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e6c:	23c0      	movs	r3, #192	@ 0xc0
 8001e6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e84:	2307      	movs	r3, #7
 8001e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <HAL_UART_MspInit+0xb8>)
 8001e92:	f000 fd53 	bl	800293c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e96:	bf00      	nop
 8001e98:	37b0      	adds	r7, #176	@ 0xb0
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	48000400 	.word	0x48000400

08001eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb0:	f7ff fcee 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eb6:	490d      	ldr	r1, [pc, #52]	@ (8001eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <LoopForever+0xe>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef8 <LoopForever+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eda:	f006 fb0f 	bl	80084fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ede:	f7ff fa2d 	bl	800133c <main>

08001ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee2:	e7fe      	b.n	8001ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ef0:	080095e8 	.word	0x080095e8
  ldr r2, =_sbss
 8001ef4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ef8:	20000668 	.word	0x20000668

08001efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <ADC1_2_IRQHandler>

08001efe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f961 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f000 f80e 	bl	8001f30 <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	e001      	b.n	8001f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f20:	f7ff fba8 	bl	8001674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_InitTick+0x6c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d023      	beq.n	8001f8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_InitTick+0x70>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_InitTick+0x6c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f99c 	bl	8002298 <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d809      	bhi.n	8001f80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f94c 	bl	8002210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_InitTick+0x74>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e004      	b.n	8001f90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	e001      	b.n	8001f90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_IncTick+0x20>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x24>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <HAL_IncTick+0x24>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	20000518 	.word	0x20000518

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000518 	.word	0x20000518

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d005      	beq.n	800200e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_Delay+0x44>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200e:	bf00      	nop
 8002010:	f7ff ffde 	bl	8001fd0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8f7      	bhi.n	8002010 <HAL_Delay+0x28>
  {
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	@ (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	@ (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	@ (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	@ 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	4313      	orrs	r3, r2
         );
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff8e 	bl	80020d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b07      	cmp	r3, #7
 80021dc:	d00f      	beq.n	80021fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d00c      	beq.n	80021fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d009      	beq.n	80021fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d006      	beq.n	80021fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d003      	beq.n	80021fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021f6:	21a6      	movs	r1, #166	@ 0xa6
 80021f8:	4804      	ldr	r0, [pc, #16]	@ (800220c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80021fa:	f7ff f933 	bl	8001464 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff16 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	08009314 	.word	0x08009314

08002210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d903      	bls.n	8002230 <HAL_NVIC_SetPriority+0x20>
 8002228:	21be      	movs	r1, #190	@ 0xbe
 800222a:	480e      	ldr	r0, [pc, #56]	@ (8002264 <HAL_NVIC_SetPriority+0x54>)
 800222c:	f7ff f91a 	bl	8001464 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	d903      	bls.n	800223e <HAL_NVIC_SetPriority+0x2e>
 8002236:	21bf      	movs	r1, #191	@ 0xbf
 8002238:	480a      	ldr	r0, [pc, #40]	@ (8002264 <HAL_NVIC_SetPriority+0x54>)
 800223a:	f7ff f913 	bl	8001464 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800223e:	f7ff ff1b 	bl	8002078 <__NVIC_GetPriorityGrouping>
 8002242:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7ff ff6b 	bl	8002124 <NVIC_EncodePriority>
 800224e:	4602      	mov	r2, r0
 8002250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff3a 	bl	80020d0 <__NVIC_SetPriority>
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	08009314 	.word	0x08009314

08002268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da03      	bge.n	8002282 <HAL_NVIC_EnableIRQ+0x1a>
 800227a:	21d2      	movs	r1, #210	@ 0xd2
 800227c:	4805      	ldr	r0, [pc, #20]	@ (8002294 <HAL_NVIC_EnableIRQ+0x2c>)
 800227e:	f7ff f8f1 	bl	8001464 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff04 	bl	8002094 <__NVIC_EnableIRQ>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	08009314 	.word	0x08009314

08002298 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff73 	bl	800218c <SysTick_Config>
 80022a6:	4603      	mov	r3, r0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e19d      	b.n	80025fe <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a79      	ldr	r2, [pc, #484]	@ (80024ac <HAL_DMA_Init+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d044      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a77      	ldr	r2, [pc, #476]	@ (80024b0 <HAL_DMA_Init+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d03f      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a76      	ldr	r2, [pc, #472]	@ (80024b4 <HAL_DMA_Init+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03a      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a74      	ldr	r2, [pc, #464]	@ (80024b8 <HAL_DMA_Init+0x208>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d035      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a73      	ldr	r2, [pc, #460]	@ (80024bc <HAL_DMA_Init+0x20c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d030      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a71      	ldr	r2, [pc, #452]	@ (80024c0 <HAL_DMA_Init+0x210>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a70      	ldr	r2, [pc, #448]	@ (80024c4 <HAL_DMA_Init+0x214>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d026      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6e      	ldr	r2, [pc, #440]	@ (80024c8 <HAL_DMA_Init+0x218>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d021      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6d      	ldr	r2, [pc, #436]	@ (80024cc <HAL_DMA_Init+0x21c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01c      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6b      	ldr	r2, [pc, #428]	@ (80024d0 <HAL_DMA_Init+0x220>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d017      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6a      	ldr	r2, [pc, #424]	@ (80024d4 <HAL_DMA_Init+0x224>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d012      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a68      	ldr	r2, [pc, #416]	@ (80024d8 <HAL_DMA_Init+0x228>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a67      	ldr	r2, [pc, #412]	@ (80024dc <HAL_DMA_Init+0x22c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d008      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a65      	ldr	r2, [pc, #404]	@ (80024e0 <HAL_DMA_Init+0x230>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <HAL_DMA_Init+0xa6>
 800234e:	21a5      	movs	r1, #165	@ 0xa5
 8002350:	4864      	ldr	r0, [pc, #400]	@ (80024e4 <HAL_DMA_Init+0x234>)
 8002352:	f7ff f887 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_DMA_Init+0xc8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d008      	beq.n	8002378 <HAL_DMA_Init+0xc8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800236e:	d003      	beq.n	8002378 <HAL_DMA_Init+0xc8>
 8002370:	21a6      	movs	r1, #166	@ 0xa6
 8002372:	485c      	ldr	r0, [pc, #368]	@ (80024e4 <HAL_DMA_Init+0x234>)
 8002374:	f7ff f876 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b40      	cmp	r3, #64	@ 0x40
 800237e:	d007      	beq.n	8002390 <HAL_DMA_Init+0xe0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_DMA_Init+0xe0>
 8002388:	21a7      	movs	r1, #167	@ 0xa7
 800238a:	4856      	ldr	r0, [pc, #344]	@ (80024e4 <HAL_DMA_Init+0x234>)
 800238c:	f7ff f86a 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b80      	cmp	r3, #128	@ 0x80
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Init+0xf8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_Init+0xf8>
 80023a0:	21a8      	movs	r1, #168	@ 0xa8
 80023a2:	4850      	ldr	r0, [pc, #320]	@ (80024e4 <HAL_DMA_Init+0x234>)
 80023a4:	f7ff f85e 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <HAL_DMA_Init+0x11c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023b8:	d008      	beq.n	80023cc <HAL_DMA_Init+0x11c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_Init+0x11c>
 80023c4:	21a9      	movs	r1, #169	@ 0xa9
 80023c6:	4847      	ldr	r0, [pc, #284]	@ (80024e4 <HAL_DMA_Init+0x234>)
 80023c8:	f7ff f84c 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_DMA_Init+0x140>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023dc:	d008      	beq.n	80023f0 <HAL_DMA_Init+0x140>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023e6:	d003      	beq.n	80023f0 <HAL_DMA_Init+0x140>
 80023e8:	21aa      	movs	r1, #170	@ 0xaa
 80023ea:	483e      	ldr	r0, [pc, #248]	@ (80024e4 <HAL_DMA_Init+0x234>)
 80023ec:	f7ff f83a 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_DMA_Init+0x158>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_Init+0x158>
 8002400:	21ab      	movs	r1, #171	@ 0xab
 8002402:	4838      	ldr	r0, [pc, #224]	@ (80024e4 <HAL_DMA_Init+0x234>)
 8002404:	f7ff f82e 	bl	8001464 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_DMA_Init+0x186>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002418:	d00d      	beq.n	8002436 <HAL_DMA_Init+0x186>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Init+0x186>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800242c:	d003      	beq.n	8002436 <HAL_DMA_Init+0x186>
 800242e:	21ac      	movs	r1, #172	@ 0xac
 8002430:	482c      	ldr	r0, [pc, #176]	@ (80024e4 <HAL_DMA_Init+0x234>)
 8002432:	f7ff f817 	bl	8001464 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01f      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d01b      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d017      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d013      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00f      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d00b      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d007      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b07      	cmp	r3, #7
 8002474:	d003      	beq.n	800247e <HAL_DMA_Init+0x1ce>
 8002476:	21ae      	movs	r1, #174	@ 0xae
 8002478:	481a      	ldr	r0, [pc, #104]	@ (80024e4 <HAL_DMA_Init+0x234>)
 800247a:	f7fe fff3 	bl	8001464 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_DMA_Init+0x238>)
 8002486:	429a      	cmp	r2, r3
 8002488:	d836      	bhi.n	80024f8 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_DMA_Init+0x23c>)
 8002492:	4413      	add	r3, r2
 8002494:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <HAL_DMA_Init+0x240>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	009a      	lsls	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <HAL_DMA_Init+0x244>)
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80024a8:	e035      	b.n	8002516 <HAL_DMA_Init+0x266>
 80024aa:	bf00      	nop
 80024ac:	40020008 	.word	0x40020008
 80024b0:	4002001c 	.word	0x4002001c
 80024b4:	40020030 	.word	0x40020030
 80024b8:	40020044 	.word	0x40020044
 80024bc:	40020058 	.word	0x40020058
 80024c0:	4002006c 	.word	0x4002006c
 80024c4:	40020080 	.word	0x40020080
 80024c8:	40020408 	.word	0x40020408
 80024cc:	4002041c 	.word	0x4002041c
 80024d0:	40020430 	.word	0x40020430
 80024d4:	40020444 	.word	0x40020444
 80024d8:	40020458 	.word	0x40020458
 80024dc:	4002046c 	.word	0x4002046c
 80024e0:	40020480 	.word	0x40020480
 80024e4:	08009350 	.word	0x08009350
 80024e8:	40020407 	.word	0x40020407
 80024ec:	bffdfff8 	.word	0xbffdfff8
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b42      	ldr	r3, [pc, #264]	@ (8002608 <HAL_DMA_Init+0x358>)
 8002500:	4413      	add	r3, r2
 8002502:	4a42      	ldr	r2, [pc, #264]	@ (800260c <HAL_DMA_Init+0x35c>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	009a      	lsls	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3f      	ldr	r2, [pc, #252]	@ (8002610 <HAL_DMA_Init+0x360>)
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800252c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002530:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002570:	d039      	beq.n	80025e6 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_DMA_Init+0x364>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d11a      	bne.n	80025b2 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <HAL_DMA_Init+0x368>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002584:	f003 031c 	and.w	r3, r3, #28
 8002588:	210f      	movs	r1, #15
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	4921      	ldr	r1, [pc, #132]	@ (8002618 <HAL_DMA_Init+0x368>)
 8002592:	4013      	ands	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_DMA_Init+0x368>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f003 031c 	and.w	r3, r3, #28
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	491b      	ldr	r1, [pc, #108]	@ (8002618 <HAL_DMA_Init+0x368>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e019      	b.n	80025e6 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_DMA_Init+0x36c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f003 031c 	and.w	r3, r3, #28
 80025be:	210f      	movs	r1, #15
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4915      	ldr	r1, [pc, #84]	@ (800261c <HAL_DMA_Init+0x36c>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025cc:	4b13      	ldr	r3, [pc, #76]	@ (800261c <HAL_DMA_Init+0x36c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d8:	f003 031c 	and.w	r3, r3, #28
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	490e      	ldr	r1, [pc, #56]	@ (800261c <HAL_DMA_Init+0x36c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	bffdfbf8 	.word	0xbffdfbf8
 800260c:	cccccccd 	.word	0xcccccccd
 8002610:	40020400 	.word	0x40020400
 8002614:	40020000 	.word	0x40020000
 8002618:	400200a8 	.word	0x400200a8
 800261c:	400204a8 	.word	0x400204a8

08002620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_DMA_Start_IT+0x20>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263e:	d304      	bcc.n	800264a <HAL_DMA_Start_IT+0x2a>
 8002640:	f240 11df 	movw	r1, #479	@ 0x1df
 8002644:	482c      	ldr	r0, [pc, #176]	@ (80026f8 <HAL_DMA_Start_IT+0xd8>)
 8002646:	f7fe ff0d 	bl	8001464 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Start_IT+0x38>
 8002654:	2302      	movs	r3, #2
 8002656:	e04b      	b.n	80026f0 <HAL_DMA_Start_IT+0xd0>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d13a      	bne.n	80026e2 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f923 	bl	80028dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 020e 	orr.w	r2, r2, #14
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e00f      	b.n	80026d0 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 020a 	orr.w	r2, r2, #10
 80026ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e005      	b.n	80026ee <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	08009350 	.word	0x08009350

080026fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d005      	beq.n	8002720 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e029      	b.n	8002774 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 020e 	bic.w	r2, r2, #14
 800272e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002744:	f003 021c 	and.w	r2, r3, #28
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
    }
  }
  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f003 031c 	and.w	r3, r3, #28
 800279e:	2204      	movs	r2, #4
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d026      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x7a>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d021      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f003 021c 	and.w	r2, r3, #28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	2104      	movs	r1, #4
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d071      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027f6:	e06c      	b.n	80028d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	f003 031c 	and.w	r3, r3, #28
 8002800:	2202      	movs	r2, #2
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02e      	beq.n	800286a <HAL_DMA_IRQHandler+0xec>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d029      	beq.n	800286a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 020a 	bic.w	r2, r2, #10
 8002832:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	f003 021c 	and.w	r2, r3, #28
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2102      	movs	r1, #2
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d038      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002868:	e033      	b.n	80028d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	f003 031c 	and.w	r3, r3, #28
 8002872:	2208      	movs	r2, #8
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d02a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x156>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d025      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 020e 	bic.w	r2, r2, #14
 8002896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289c:	f003 021c 	and.w	r2, r3, #28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
}
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f003 021c 	and.w	r2, r3, #28
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b10      	cmp	r3, #16
 800290c:	d108      	bne.n	8002920 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800291e:	e007      	b.n	8002930 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a3c      	ldr	r2, [pc, #240]	@ (8002a48 <HAL_GPIO_Init+0x10c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01b      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a4c <HAL_GPIO_Init+0x110>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d017      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a3a      	ldr	r2, [pc, #232]	@ (8002a50 <HAL_GPIO_Init+0x114>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a39      	ldr	r2, [pc, #228]	@ (8002a54 <HAL_GPIO_Init+0x118>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00f      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a38      	ldr	r2, [pc, #224]	@ (8002a58 <HAL_GPIO_Init+0x11c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00b      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a37      	ldr	r2, [pc, #220]	@ (8002a5c <HAL_GPIO_Init+0x120>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d007      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a36      	ldr	r2, [pc, #216]	@ (8002a60 <HAL_GPIO_Init+0x124>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x56>
 800298a:	21aa      	movs	r1, #170	@ 0xaa
 800298c:	4835      	ldr	r0, [pc, #212]	@ (8002a64 <HAL_GPIO_Init+0x128>)
 800298e:	f7fe fd69 	bl	8001464 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d004      	beq.n	80029a6 <HAL_GPIO_Init+0x6a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a4:	d303      	bcc.n	80029ae <HAL_GPIO_Init+0x72>
 80029a6:	21ab      	movs	r1, #171	@ 0xab
 80029a8:	482e      	ldr	r0, [pc, #184]	@ (8002a64 <HAL_GPIO_Init+0x128>)
 80029aa:	f7fe fd5b 	bl	8001464 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 823d 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f000 8238 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b11      	cmp	r3, #17
 80029c8:	f000 8233 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f000 822e 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b12      	cmp	r3, #18
 80029dc:	f000 8229 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80029e8:	f000 8223 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80029f4:	f000 821d 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002a00:	f000 8217 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002a0c:	f000 8211 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002a18:	f000 820b 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002a24:	f000 8205 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	f000 8200 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b0b      	cmp	r3, #11
 8002a38:	f000 81fb 	beq.w	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a3c:	21ac      	movs	r1, #172	@ 0xac
 8002a3e:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <HAL_GPIO_Init+0x128>)
 8002a40:	f7fe fd10 	bl	8001464 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	e1f5      	b.n	8002e32 <HAL_GPIO_Init+0x4f6>
 8002a46:	bf00      	nop
 8002a48:	48000400 	.word	0x48000400
 8002a4c:	48000800 	.word	0x48000800
 8002a50:	48000c00 	.word	0x48000c00
 8002a54:	48001000 	.word	0x48001000
 8002a58:	48001400 	.word	0x48001400
 8002a5c:	48001800 	.word	0x48001800
 8002a60:	48001c00 	.word	0x48001c00
 8002a64:	08009388 	.word	0x08009388
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 81d6 	beq.w	8002e2c <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d005      	beq.n	8002a98 <HAL_GPIO_Init+0x15c>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d144      	bne.n	8002b22 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00f      	beq.n	8002ac0 <HAL_GPIO_Init+0x184>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_GPIO_Init+0x184>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0x184>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x184>
 8002ab8:	21bb      	movs	r1, #187	@ 0xbb
 8002aba:	489c      	ldr	r0, [pc, #624]	@ (8002d2c <HAL_GPIO_Init+0x3f0>)
 8002abc:	f7fe fcd2 	bl	8001464 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002af6:	2201      	movs	r2, #1
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 0201 	and.w	r2, r3, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d118      	bne.n	8002b60 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b34:	2201      	movs	r2, #1
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	f003 0201 	and.w	r2, r3, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d027      	beq.n	8002bbc <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_GPIO_Init+0x250>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d007      	beq.n	8002b8c <HAL_GPIO_Init+0x250>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x250>
 8002b84:	21dc      	movs	r1, #220	@ 0xdc
 8002b86:	4869      	ldr	r0, [pc, #420]	@ (8002d2c <HAL_GPIO_Init+0x3f0>)
 8002b88:	f7fe fc6c 	bl	8001464 <assert_failed>

        temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d14f      	bne.n	8002c68 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bce:	d01f      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a57      	ldr	r2, [pc, #348]	@ (8002d30 <HAL_GPIO_Init+0x3f4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01b      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a56      	ldr	r2, [pc, #344]	@ (8002d34 <HAL_GPIO_Init+0x3f8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a55      	ldr	r2, [pc, #340]	@ (8002d38 <HAL_GPIO_Init+0x3fc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a54      	ldr	r2, [pc, #336]	@ (8002d3c <HAL_GPIO_Init+0x400>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00f      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a53      	ldr	r2, [pc, #332]	@ (8002d40 <HAL_GPIO_Init+0x404>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a52      	ldr	r2, [pc, #328]	@ (8002d44 <HAL_GPIO_Init+0x408>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a51      	ldr	r2, [pc, #324]	@ (8002d48 <HAL_GPIO_Init+0x40c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
 8002c08:	21e8      	movs	r1, #232	@ 0xe8
 8002c0a:	4848      	ldr	r0, [pc, #288]	@ (8002d2c <HAL_GPIO_Init+0x3f0>)
 8002c0c:	f7fe fc2a 	bl	8001464 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	d903      	bls.n	8002c20 <HAL_GPIO_Init+0x2e4>
 8002c18:	21e9      	movs	r1, #233	@ 0xe9
 8002c1a:	4844      	ldr	r0, [pc, #272]	@ (8002d2c <HAL_GPIO_Init+0x3f0>)
 8002c1c:	f7fe fc22 	bl	8001464 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	6939      	ldr	r1, [r7, #16]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80c1 	beq.w	8002e2c <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_GPIO_Init+0x410>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_GPIO_Init+0x410>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cb6:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <HAL_GPIO_Init+0x410>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cc2:	4a23      	ldr	r2, [pc, #140]	@ (8002d50 <HAL_GPIO_Init+0x414>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cec:	d03a      	beq.n	8002d64 <HAL_GPIO_Init+0x428>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d30 <HAL_GPIO_Init+0x3f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d034      	beq.n	8002d60 <HAL_GPIO_Init+0x424>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <HAL_GPIO_Init+0x3f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02e      	beq.n	8002d5c <HAL_GPIO_Init+0x420>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <HAL_GPIO_Init+0x3fc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d028      	beq.n	8002d58 <HAL_GPIO_Init+0x41c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a0c      	ldr	r2, [pc, #48]	@ (8002d3c <HAL_GPIO_Init+0x400>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_GPIO_Init+0x418>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <HAL_GPIO_Init+0x404>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <HAL_GPIO_Init+0x3ea>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <HAL_GPIO_Init+0x408>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_GPIO_Init+0x3e6>
 8002d1e:	2306      	movs	r3, #6
 8002d20:	e021      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d22:	2307      	movs	r3, #7
 8002d24:	e01f      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e01d      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d2a:	bf00      	nop
 8002d2c:	08009388 	.word	0x08009388
 8002d30:	48000400 	.word	0x48000400
 8002d34:	48000800 	.word	0x48000800
 8002d38:	48000c00 	.word	0x48000c00
 8002d3c:	48001000 	.word	0x48001000
 8002d40:	48001400 	.word	0x48001400
 8002d44:	48001800 	.word	0x48001800
 8002d48:	48001c00 	.word	0x48001c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	2304      	movs	r3, #4
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x42a>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d76:	4935      	ldr	r1, [pc, #212]	@ (8002e4c <HAL_GPIO_Init+0x510>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d84:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da8:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e02:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <HAL_GPIO_Init+0x514>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f ae13 	bne.w	8002a68 <HAL_GPIO_Init+0x12c>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_GPIO_WritePin+0x20>
 8002e6a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8002e6e:	480e      	ldr	r0, [pc, #56]	@ (8002ea8 <HAL_GPIO_WritePin+0x54>)
 8002e70:	f7fe faf8 	bl	8001464 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_WritePin+0x36>
 8002e7a:	787b      	ldrb	r3, [r7, #1]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d004      	beq.n	8002e8a <HAL_GPIO_WritePin+0x36>
 8002e80:	f240 11af 	movw	r1, #431	@ 0x1af
 8002e84:	4808      	ldr	r0, [pc, #32]	@ (8002ea8 <HAL_GPIO_WritePin+0x54>)
 8002e86:	f7fe faed 	bl	8001464 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002e8a:	787b      	ldrb	r3, [r7, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e90:	887a      	ldrh	r2, [r7, #2]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e96:	e002      	b.n	8002e9e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08009388 	.word	0x08009388

08002eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40007000 	.word	0x40007000

08002ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed6:	d007      	beq.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ede:	d003      	beq.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002ee0:	21a7      	movs	r1, #167	@ 0xa7
 8002ee2:	4826      	ldr	r0, [pc, #152]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ee4:	f7fe fabe 	bl	8001464 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eee:	d130      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef0:	4b23      	ldr	r3, [pc, #140]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efc:	d038      	beq.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efe:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f06:	4a1e      	ldr	r2, [pc, #120]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2232      	movs	r2, #50	@ 0x32
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	3301      	adds	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f24:	e002      	b.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f38:	d102      	bne.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x78>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f2      	bne.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f40:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4c:	d110      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5e:	d007      	beq.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f60:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f68:	4a05      	ldr	r2, [pc, #20]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	080093c4 	.word	0x080093c4
 8002f80:	40007000 	.word	0x40007000
 8002f84:	20000000 	.word	0x20000000
 8002f88:	431bde83 	.word	0x431bde83

08002f8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f000 bcef 	b.w	800397e <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_OscConfig+0x2e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b1f      	cmp	r3, #31
 8002fae:	d904      	bls.n	8002fba <HAL_RCC_OscConfig+0x2e>
 8002fb0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8002fb4:	489a      	ldr	r0, [pc, #616]	@ (8003220 <HAL_RCC_OscConfig+0x294>)
 8002fb6:	f7fe fa55 	bl	8001464 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fba:	4b9a      	ldr	r3, [pc, #616]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc4:	4b97      	ldr	r3, [pc, #604]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 813d 	beq.w	8003256 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x6a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d004      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x6a>
 8002fec:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002ff0:	488b      	ldr	r0, [pc, #556]	@ (8003220 <HAL_RCC_OscConfig+0x294>)
 8002ff2:	f7fe fa37 	bl	8001464 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2bff      	cmp	r3, #255	@ 0xff
 8002ffc:	d904      	bls.n	8003008 <HAL_RCC_OscConfig+0x7c>
 8002ffe:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003002:	4887      	ldr	r0, [pc, #540]	@ (8003220 <HAL_RCC_OscConfig+0x294>)
 8003004:	f7fe fa2e 	bl	8001464 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d030      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d02c      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	2b20      	cmp	r3, #32
 800301e:	d028      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	2b30      	cmp	r3, #48	@ 0x30
 8003026:	d024      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b40      	cmp	r3, #64	@ 0x40
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	2b50      	cmp	r3, #80	@ 0x50
 8003036:	d01c      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	2b60      	cmp	r3, #96	@ 0x60
 800303e:	d018      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	2b70      	cmp	r3, #112	@ 0x70
 8003046:	d014      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	2b80      	cmp	r3, #128	@ 0x80
 800304e:	d010      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	2b90      	cmp	r3, #144	@ 0x90
 8003056:	d00c      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	2ba0      	cmp	r3, #160	@ 0xa0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	2bb0      	cmp	r3, #176	@ 0xb0
 8003066:	d004      	beq.n	8003072 <HAL_RCC_OscConfig+0xe6>
 8003068:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800306c:	486c      	ldr	r0, [pc, #432]	@ (8003220 <HAL_RCC_OscConfig+0x294>)
 800306e:	f7fe f9f9 	bl	8001464 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_RCC_OscConfig+0xfc>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b0c      	cmp	r3, #12
 800307c:	f040 808e 	bne.w	800319c <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b01      	cmp	r3, #1
 8003084:	f040 808a 	bne.w	800319c <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003088:	4b66      	ldr	r3, [pc, #408]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_RCC_OscConfig+0x116>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f000 bc6e 	b.w	800397e <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_RCC_OscConfig+0x130>
 80030b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_OscConfig+0x13c>
 80030bc:	4b59      	ldr	r3, [pc, #356]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d224      	bcs.n	8003116 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fec1 	bl	8003e58 <RCC_SetFlashLatencyFromMSIRange>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f000 bc4e 	b.w	800397e <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b50      	ldr	r3, [pc, #320]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a4f      	ldr	r2, [pc, #316]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	494a      	ldr	r1, [pc, #296]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4b48      	ldr	r3, [pc, #288]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	4945      	ldr	r1, [pc, #276]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
 8003114:	e026      	b.n	8003164 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003116:	4b43      	ldr	r3, [pc, #268]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a42      	ldr	r2, [pc, #264]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	493d      	ldr	r1, [pc, #244]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003134:	4b3b      	ldr	r3, [pc, #236]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	4938      	ldr	r1, [pc, #224]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fe80 	bl	8003e58 <RCC_SetFlashLatencyFromMSIRange>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f000 bc0d 	b.w	800397e <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003164:	f000 fdb4 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b2e      	ldr	r3, [pc, #184]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	492c      	ldr	r1, [pc, #176]	@ (8003228 <HAL_RCC_OscConfig+0x29c>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	4a2a      	ldr	r2, [pc, #168]	@ (800322c <HAL_RCC_OscConfig+0x2a0>)
 8003182:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003184:	4b2a      	ldr	r3, [pc, #168]	@ (8003230 <HAL_RCC_OscConfig+0x2a4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe fed1 	bl	8001f30 <HAL_InitTick>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05d      	beq.n	8003254 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	e3f0      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d032      	beq.n	800320a <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b0:	f7fe ff0e 	bl	8001fd0 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b8:	f7fe ff0a 	bl	8001fd0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e3d9      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ca:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d6:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031dc:	f043 0308 	orr.w	r3, r3, #8
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	490d      	ldr	r1, [pc, #52]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	4908      	ldr	r1, [pc, #32]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
 8003208:	e025      	b.n	8003256 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a05      	ldr	r2, [pc, #20]	@ (8003224 <HAL_RCC_OscConfig+0x298>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003216:	f7fe fedb 	bl	8001fd0 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800321c:	e013      	b.n	8003246 <HAL_RCC_OscConfig+0x2ba>
 800321e:	bf00      	nop
 8003220:	08009400 	.word	0x08009400
 8003224:	40021000 	.word	0x40021000
 8003228:	0800955c 	.word	0x0800955c
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003234:	f7fe fecc 	bl	8001fd0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e39b      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003246:	4b97      	ldr	r3, [pc, #604]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x2a8>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d07e      	beq.n	8003360 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <HAL_RCC_OscConfig+0x2fc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003272:	d009      	beq.n	8003288 <HAL_RCC_OscConfig+0x2fc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800327c:	d004      	beq.n	8003288 <HAL_RCC_OscConfig+0x2fc>
 800327e:	f240 2119 	movw	r1, #537	@ 0x219
 8003282:	4889      	ldr	r0, [pc, #548]	@ (80034a8 <HAL_RCC_OscConfig+0x51c>)
 8003284:	f7fe f8ee 	bl	8001464 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x30e>
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d10e      	bne.n	80032b2 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d10b      	bne.n	80032b2 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	4b82      	ldr	r3, [pc, #520]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d05b      	beq.n	800335e <HAL_RCC_OscConfig+0x3d2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d157      	bne.n	800335e <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e365      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x33e>
 80032bc:	4b79      	ldr	r3, [pc, #484]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a78      	ldr	r2, [pc, #480]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e01d      	b.n	8003306 <HAL_RCC_OscConfig+0x37a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x362>
 80032d4:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a72      	ldr	r2, [pc, #456]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6f      	ldr	r2, [pc, #444]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x37a>
 80032ee:	4b6d      	ldr	r3, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6c      	ldr	r2, [pc, #432]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a69      	ldr	r2, [pc, #420]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003304:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d013      	beq.n	8003336 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fe5f 	bl	8001fd0 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003316:	f7fe fe5b 	bl	8001fd0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	@ 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e32a      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003328:	4b5e      	ldr	r3, [pc, #376]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x38a>
 8003334:	e014      	b.n	8003360 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fe4b 	bl	8001fd0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333e:	f7fe fe47 	bl	8001fd0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	@ 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e316      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003350:	4b54      	ldr	r3, [pc, #336]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x3b2>
 800335c:	e000      	b.n	8003360 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d077      	beq.n	800345c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCC_OscConfig+0x3fc>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800337c:	d004      	beq.n	8003388 <HAL_RCC_OscConfig+0x3fc>
 800337e:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8003382:	4849      	ldr	r0, [pc, #292]	@ (80034a8 <HAL_RCC_OscConfig+0x51c>)
 8003384:	f7fe f86e 	bl	8001464 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b1f      	cmp	r3, #31
 800338e:	d904      	bls.n	800339a <HAL_RCC_OscConfig+0x40e>
 8003390:	f240 214d 	movw	r1, #589	@ 0x24d
 8003394:	4844      	ldr	r0, [pc, #272]	@ (80034a8 <HAL_RCC_OscConfig+0x51c>)
 8003396:	f7fe f865 	bl	8001464 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d005      	beq.n	80033ac <HAL_RCC_OscConfig+0x420>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d119      	bne.n	80033da <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d116      	bne.n	80033da <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ac:	4b3d      	ldr	r3, [pc, #244]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x438>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e2dc      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	4934      	ldr	r1, [pc, #208]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d8:	e040      	b.n	800345c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d023      	beq.n	800342a <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e2:	4b30      	ldr	r3, [pc, #192]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2f      	ldr	r2, [pc, #188]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fe fdef 	bl	8001fd0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f6:	f7fe fdeb 	bl	8001fd0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e2ba      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003408:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4920      	ldr	r1, [pc, #128]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	e018      	b.n	800345c <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342a:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fdcb 	bl	8001fd0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fdc7 	bl	8001fd0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e296      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003450:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d04e      	beq.n	8003506 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_OscConfig+0x4f6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d004      	beq.n	8003482 <HAL_RCC_OscConfig+0x4f6>
 8003478:	f240 218d 	movw	r1, #653	@ 0x28d
 800347c:	480a      	ldr	r0, [pc, #40]	@ (80034a8 <HAL_RCC_OscConfig+0x51c>)
 800347e:	f7fd fff1 	bl	8001464 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d021      	beq.n	80034ce <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003490:	4a04      	ldr	r2, [pc, #16]	@ (80034a4 <HAL_RCC_OscConfig+0x518>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fd99 	bl	8001fd0 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a0:	e00d      	b.n	80034be <HAL_RCC_OscConfig+0x532>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08009400 	.word	0x08009400
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe fd90 	bl	8001fd0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e25f      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034be:	4b66      	ldr	r3, [pc, #408]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80034c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ef      	beq.n	80034ac <HAL_RCC_OscConfig+0x520>
 80034cc:	e01b      	b.n	8003506 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b62      	ldr	r3, [pc, #392]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80034d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d4:	4a60      	ldr	r2, [pc, #384]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fd77 	bl	8001fd0 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fd73 	bl	8001fd0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e242      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f8:	4b57      	ldr	r3, [pc, #348]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ef      	bne.n	80034e6 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80b8 	beq.w	8003684 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <HAL_RCC_OscConfig+0x5ae>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d008      	beq.n	800353a <HAL_RCC_OscConfig+0x5ae>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d004      	beq.n	800353a <HAL_RCC_OscConfig+0x5ae>
 8003530:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8003534:	4849      	ldr	r0, [pc, #292]	@ (800365c <HAL_RCC_OscConfig+0x6d0>)
 8003536:	f7fd ff95 	bl	8001464 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800353a:	4b47      	ldr	r3, [pc, #284]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b44      	ldr	r3, [pc, #272]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4a43      	ldr	r2, [pc, #268]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	@ 0x58
 8003552:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355e:	2301      	movs	r3, #1
 8003560:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003562:	4b3f      	ldr	r3, [pc, #252]	@ (8003660 <HAL_RCC_OscConfig+0x6d4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d118      	bne.n	80035a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800356e:	4b3c      	ldr	r3, [pc, #240]	@ (8003660 <HAL_RCC_OscConfig+0x6d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3b      	ldr	r2, [pc, #236]	@ (8003660 <HAL_RCC_OscConfig+0x6d4>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7fe fd29 	bl	8001fd0 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003582:	f7fe fd25 	bl	8001fd0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e1f4      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4b32      	ldr	r3, [pc, #200]	@ (8003660 <HAL_RCC_OscConfig+0x6d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d108      	bne.n	80035ba <HAL_RCC_OscConfig+0x62e>
 80035a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b8:	e024      	b.n	8003604 <HAL_RCC_OscConfig+0x678>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d110      	bne.n	80035e4 <HAL_RCC_OscConfig+0x658>
 80035c2:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c8:	4a23      	ldr	r2, [pc, #140]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035d2:	4b21      	ldr	r3, [pc, #132]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e2:	e00f      	b.n	8003604 <HAL_RCC_OscConfig+0x678>
 80035e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f4:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fa:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d016      	beq.n	800363a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe fce0 	bl	8001fd0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe fcdc 	bl	8001fd0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1a9      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_RCC_OscConfig+0x6cc>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ed      	beq.n	8003614 <HAL_RCC_OscConfig+0x688>
 8003638:	e01b      	b.n	8003672 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe fcc9 	bl	8001fd0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003640:	e010      	b.n	8003664 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe fcc5 	bl	8001fd0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d907      	bls.n	8003664 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e192      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
 8003658:	40021000 	.word	0x40021000
 800365c:	08009400 	.word	0x08009400
 8003660:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003664:	4b98      	ldr	r3, [pc, #608]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e7      	bne.n	8003642 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003672:	7ffb      	ldrb	r3, [r7, #31]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003678:	4b93      	ldr	r3, [pc, #588]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	4a92      	ldr	r2, [pc, #584]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 800367e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003682:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <HAL_RCC_OscConfig+0x71a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	2b01      	cmp	r3, #1
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_OscConfig+0x71a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	2b02      	cmp	r3, #2
 800369a:	d004      	beq.n	80036a6 <HAL_RCC_OscConfig+0x71a>
 800369c:	f240 316e 	movw	r1, #878	@ 0x36e
 80036a0:	488a      	ldr	r0, [pc, #552]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 80036a2:	f7fd fedf 	bl	8001464 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8166 	beq.w	800397c <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f040 813c 	bne.w	8003932 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_OscConfig+0x758>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x758>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d008      	beq.n	80036e4 <HAL_RCC_OscConfig+0x758>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d004      	beq.n	80036e4 <HAL_RCC_OscConfig+0x758>
 80036da:	f240 3176 	movw	r1, #886	@ 0x376
 80036de:	487b      	ldr	r0, [pc, #492]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 80036e0:	f7fd fec0 	bl	8001464 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_RCC_OscConfig+0x768>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d904      	bls.n	80036fe <HAL_RCC_OscConfig+0x772>
 80036f4:	f240 3177 	movw	r1, #887	@ 0x377
 80036f8:	4874      	ldr	r0, [pc, #464]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 80036fa:	f7fd feb3 	bl	8001464 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003702:	2b07      	cmp	r3, #7
 8003704:	d903      	bls.n	800370e <HAL_RCC_OscConfig+0x782>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370a:	2b56      	cmp	r3, #86	@ 0x56
 800370c:	d904      	bls.n	8003718 <HAL_RCC_OscConfig+0x78c>
 800370e:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8003712:	486e      	ldr	r0, [pc, #440]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 8003714:	f7fd fea6 	bl	8001464 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	2b07      	cmp	r3, #7
 800371e:	d008      	beq.n	8003732 <HAL_RCC_OscConfig+0x7a6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	2b11      	cmp	r3, #17
 8003726:	d004      	beq.n	8003732 <HAL_RCC_OscConfig+0x7a6>
 8003728:	f240 317a 	movw	r1, #890	@ 0x37a
 800372c:	4867      	ldr	r0, [pc, #412]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 800372e:	f7fd fe99 	bl	8001464 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003736:	2b02      	cmp	r3, #2
 8003738:	d010      	beq.n	800375c <HAL_RCC_OscConfig+0x7d0>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x7d0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	2b06      	cmp	r3, #6
 8003748:	d008      	beq.n	800375c <HAL_RCC_OscConfig+0x7d0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374e:	2b08      	cmp	r3, #8
 8003750:	d004      	beq.n	800375c <HAL_RCC_OscConfig+0x7d0>
 8003752:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8003756:	485d      	ldr	r0, [pc, #372]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 8003758:	f7fd fe84 	bl	8001464 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	2b02      	cmp	r3, #2
 8003762:	d010      	beq.n	8003786 <HAL_RCC_OscConfig+0x7fa>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b04      	cmp	r3, #4
 800376a:	d00c      	beq.n	8003786 <HAL_RCC_OscConfig+0x7fa>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b06      	cmp	r3, #6
 8003772:	d008      	beq.n	8003786 <HAL_RCC_OscConfig+0x7fa>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	2b08      	cmp	r3, #8
 800377a:	d004      	beq.n	8003786 <HAL_RCC_OscConfig+0x7fa>
 800377c:	f240 317d 	movw	r1, #893	@ 0x37d
 8003780:	4852      	ldr	r0, [pc, #328]	@ (80038cc <HAL_RCC_OscConfig+0x940>)
 8003782:	f7fd fe6f 	bl	8001464 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003786:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0203 	and.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	429a      	cmp	r2, r3
 8003798:	d130      	bne.n	80037fc <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	3b01      	subs	r3, #1
 80037a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d127      	bne.n	80037fc <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d11f      	bne.n	80037fc <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c6:	2a07      	cmp	r2, #7
 80037c8:	bf14      	ite	ne
 80037ca:	2201      	movne	r2, #1
 80037cc:	2200      	moveq	r2, #0
 80037ce:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d113      	bne.n	80037fc <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d109      	bne.n	80037fc <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d074      	beq.n	80038e6 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d06f      	beq.n	80038e2 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003802:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800380e:	4b2e      	ldr	r3, [pc, #184]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0af      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800381e:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a29      	ldr	r2, [pc, #164]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003824:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003828:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800382a:	f7fe fbd1 	bl	8001fd0 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fe fbcd 	bl	8001fd0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e09c      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003844:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003850:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <HAL_RCC_OscConfig+0x944>)
 8003856:	4013      	ands	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003860:	3a01      	subs	r2, #1
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800386a:	0212      	lsls	r2, r2, #8
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003872:	0852      	lsrs	r2, r2, #1
 8003874:	3a01      	subs	r2, #1
 8003876:	0552      	lsls	r2, r2, #21
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	3a01      	subs	r2, #1
 8003882:	0652      	lsls	r2, r2, #25
 8003884:	4311      	orrs	r1, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800388a:	0912      	lsrs	r2, r2, #4
 800388c:	0452      	lsls	r2, r2, #17
 800388e:	430a      	orrs	r2, r1
 8003890:	490d      	ldr	r1, [pc, #52]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003896:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a0b      	ldr	r2, [pc, #44]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 800389c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a2:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	4a08      	ldr	r2, [pc, #32]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 80038a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ac:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ae:	f7fe fb8f 	bl	8001fd0 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b4:	e00e      	b.n	80038d4 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe fb8b 	bl	8001fd0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d907      	bls.n	80038d4 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e05a      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08009400 	.word	0x08009400
 80038d0:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ea      	beq.n	80038b6 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e0:	e04c      	b.n	800397c <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e04b      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d144      	bne.n	800397c <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f2:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 80038f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fe:	4b22      	ldr	r3, [pc, #136]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	4a21      	ldr	r2, [pc, #132]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 8003904:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003908:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390a:	f7fe fb61 	bl	8001fd0 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003912:	f7fe fb5d 	bl	8001fd0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e02c      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003924:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x986>
 8003930:	e024      	b.n	800397c <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d01f      	beq.n	8003978 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003938:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 800393e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fb44 	bl	8001fd0 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fb40 	bl	8001fd0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395e:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800396a:	4b07      	ldr	r3, [pc, #28]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	4906      	ldr	r1, [pc, #24]	@ (8003988 <HAL_RCC_OscConfig+0x9fc>)
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_OscConfig+0xa00>)
 8003972:	4013      	ands	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
 8003976:	e001      	b.n	800397c <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	feeefffc 	.word	0xfeeefffc

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e186      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x24>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b0f      	cmp	r3, #15
 80039b2:	d904      	bls.n	80039be <HAL_RCC_ClockConfig+0x2e>
 80039b4:	f240 4159 	movw	r1, #1113	@ 0x459
 80039b8:	4882      	ldr	r0, [pc, #520]	@ (8003bc4 <HAL_RCC_ClockConfig+0x234>)
 80039ba:	f7fd fd53 	bl	8001464 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x56>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d00d      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x56>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x56>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d007      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x56>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d004      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x56>
 80039dc:	f240 415a 	movw	r1, #1114	@ 0x45a
 80039e0:	4878      	ldr	r0, [pc, #480]	@ (8003bc4 <HAL_RCC_ClockConfig+0x234>)
 80039e2:	f7fd fd3f 	bl	8001464 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e6:	4b78      	ldr	r3, [pc, #480]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d910      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f4:	4b74      	ldr	r3, [pc, #464]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 0207 	bic.w	r2, r3, #7
 80039fc:	4972      	ldr	r1, [pc, #456]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a04:	4b70      	ldr	r3, [pc, #448]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e14d      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d039      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d024      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b80      	cmp	r3, #128	@ 0x80
 8003a30:	d020      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b90      	cmp	r3, #144	@ 0x90
 8003a38:	d01c      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a40:	d018      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a48:	d014      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a50:	d010      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2bd0      	cmp	r3, #208	@ 0xd0
 8003a58:	d00c      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2be0      	cmp	r3, #224	@ 0xe0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a68:	d004      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xe4>
 8003a6a:	f240 4172 	movw	r1, #1138	@ 0x472
 8003a6e:	4855      	ldr	r0, [pc, #340]	@ (8003bc4 <HAL_RCC_ClockConfig+0x234>)
 8003a70:	f7fd fcf8 	bl	8001464 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b54      	ldr	r3, [pc, #336]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d908      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b51      	ldr	r3, [pc, #324]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	494e      	ldr	r1, [pc, #312]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d061      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d010      	beq.n	8003acc <HAL_RCC_ClockConfig+0x13c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_ClockConfig+0x13c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d008      	beq.n	8003acc <HAL_RCC_ClockConfig+0x13c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d004      	beq.n	8003acc <HAL_RCC_ClockConfig+0x13c>
 8003ac2:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003ac6:	483f      	ldr	r0, [pc, #252]	@ (8003bc4 <HAL_RCC_ClockConfig+0x234>)
 8003ac8:	f7fd fccc 	bl	8001464 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d121      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0e6      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aec:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d115      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0da      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b04:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0ce      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b14:	4b2d      	ldr	r3, [pc, #180]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0c6      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 0203 	bic.w	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4926      	ldr	r1, [pc, #152]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b36:	f7fe fa4b 	bl	8001fd0 <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3e:	f7fe fa47 	bl	8001fd0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e0ae      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 020c 	and.w	r2, r3, #12
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d1eb      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d208      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	490f      	ldr	r1, [pc, #60]	@ (8003bcc <HAL_RCC_ClockConfig+0x23c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d216      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	4907      	ldr	r1, [pc, #28]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <HAL_RCC_ClockConfig+0x238>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d007      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e076      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x322>
 8003bc4:	08009400 	.word	0x08009400
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d025      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d018      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x286>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bec:	d013      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x286>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003bf6:	d00e      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x286>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x286>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c0a:	d004      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x286>
 8003c0c:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8003c10:	482a      	ldr	r0, [pc, #168]	@ (8003cbc <HAL_RCC_ClockConfig+0x32c>)
 8003c12:	f7fd fc27 	bl	8001464 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c16:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <HAL_RCC_ClockConfig+0x330>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4927      	ldr	r1, [pc, #156]	@ (8003cc0 <HAL_RCC_ClockConfig+0x330>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d026      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c44:	d013      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003c4e:	d00e      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c62:	d004      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003c64:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003c68:	4814      	ldr	r0, [pc, #80]	@ (8003cbc <HAL_RCC_ClockConfig+0x32c>)
 8003c6a:	f7fd fbfb 	bl	8001464 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6e:	4b14      	ldr	r3, [pc, #80]	@ (8003cc0 <HAL_RCC_ClockConfig+0x330>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4910      	ldr	r1, [pc, #64]	@ (8003cc0 <HAL_RCC_ClockConfig+0x330>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c82:	f000 f825 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <HAL_RCC_ClockConfig+0x330>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	490c      	ldr	r1, [pc, #48]	@ (8003cc4 <HAL_RCC_ClockConfig+0x334>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <HAL_RCC_ClockConfig+0x338>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <HAL_RCC_ClockConfig+0x33c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f942 	bl	8001f30 <HAL_InitTick>
 8003cac:	4603      	mov	r3, r0
 8003cae:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08009400 	.word	0x08009400
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	0800955c 	.word	0x0800955c
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	@ 0x24
 8003cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cde:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d121      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d11e      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d04:	4b34      	ldr	r3, [pc, #208]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d10:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e005      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d20:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d102      	bne.n	8003d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d48:	4b25      	ldr	r3, [pc, #148]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	e004      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d54:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d134      	bne.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0xac>
 8003d74:	e005      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d76:	4b1a      	ldr	r3, [pc, #104]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d78:	617b      	str	r3, [r7, #20]
      break;
 8003d7a:	e005      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d7e:	617b      	str	r3, [r7, #20]
      break;
 8003d80:	e002      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	617b      	str	r3, [r7, #20]
      break;
 8003d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d88:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	3301      	adds	r3, #1
 8003d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	fb03 f202 	mul.w	r2, r3, r2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	0e5b      	lsrs	r3, r3, #25
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	3301      	adds	r3, #1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc8:	69bb      	ldr	r3, [r7, #24]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3724      	adds	r7, #36	@ 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08009574 	.word	0x08009574
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	@ (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4904      	ldr	r1, [pc, #16]	@ (8003e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800956c 	.word	0x0800956c

08003e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e30:	f7ff ffda 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	0adb      	lsrs	r3, r3, #11
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4904      	ldr	r1, [pc, #16]	@ (8003e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	0800956c 	.word	0x0800956c

08003e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e64:	4b2a      	ldr	r3, [pc, #168]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e70:	f7ff f81c 	bl	8002eac <HAL_PWREx_GetVoltageRange>
 8003e74:	6178      	str	r0, [r7, #20]
 8003e76:	e014      	b.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	4a24      	ldr	r2, [pc, #144]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e84:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e90:	f7ff f80c 	bl	8002eac <HAL_PWREx_GetVoltageRange>
 8003e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e96:	4b1e      	ldr	r3, [pc, #120]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea8:	d10b      	bne.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b80      	cmp	r3, #128	@ 0x80
 8003eae:	d919      	bls.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003eb4:	d902      	bls.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e013      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	e010      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b80      	cmp	r3, #128	@ 0x80
 8003ec6:	d902      	bls.n	8003ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ec8:	2303      	movs	r3, #3
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e00a      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b80      	cmp	r3, #128	@ 0x80
 8003ed2:	d102      	bne.n	8003eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e004      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b70      	cmp	r3, #112	@ 0x70
 8003ede:	d101      	bne.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 0207 	bic.w	r2, r3, #7
 8003eec:	4909      	ldr	r1, [pc, #36]	@ (8003f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ef4:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d001      	beq.n	8003f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40022000 	.word	0x40022000

08003f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f20:	2300      	movs	r3, #0
 8003f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f24:	2300      	movs	r3, #0
 8003f26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f3c:	d303      	bcc.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003f3e:	21c9      	movs	r1, #201	@ 0xc9
 8003f40:	4889      	ldr	r0, [pc, #548]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003f42:	f7fd fa8f 	bl	8001464 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d058      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d012      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f62:	d00d      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f76:	d003      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f78:	21d1      	movs	r1, #209	@ 0xd1
 8003f7a:	487b      	ldr	r0, [pc, #492]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003f7c:	f7fd fa72 	bl	8001464 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f88:	d02a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003f8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f8e:	d824      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003f90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f9a:	d81e      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa4:	d010      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8003fa6:	e018      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa8:	4b70      	ldr	r3, [pc, #448]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a6f      	ldr	r2, [pc, #444]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fc69 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fc6:	e00c      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3320      	adds	r3, #32
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fde0 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd8:	e003      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	74fb      	strb	r3, [r7, #19]
      break;
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8003fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe8:	4b60      	ldr	r3, [pc, #384]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ff6:	495d      	ldr	r1, [pc, #372]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ffe:	e001      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d059      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004020:	d00e      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800402a:	d009      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004030:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004034:	d004      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004036:	f240 110f 	movw	r1, #271	@ 0x10f
 800403a:	484b      	ldr	r0, [pc, #300]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800403c:	f7fd fa12 	bl	8001464 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004044:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004048:	d02a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800404a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800404e:	d824      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004054:	d008      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800405a:	d81e      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004064:	d010      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004066:	e018      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004068:	4b40      	ldr	r3, [pc, #256]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a3f      	ldr	r2, [pc, #252]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004072:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004074:	e015      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc09 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004086:	e00c      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3320      	adds	r3, #32
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fd80 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	74fb      	strb	r3, [r7, #19]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a8:	4b30      	ldr	r3, [pc, #192]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b6:	492d      	ldr	r1, [pc, #180]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040be:	e001      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80c2 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ea:	d010      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004102:	d004      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004104:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004108:	4817      	ldr	r0, [pc, #92]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800410a:	f7fd f9ab 	bl	8001464 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	4a10      	ldr	r2, [pc, #64]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004130:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413c:	2301      	movs	r3, #1
 800413e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800414c:	f7fd ff40 	bl	8001fd0 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004152:	e00f      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004154:	f7fd ff3c 	bl	8001fd0 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d908      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	74fb      	strb	r3, [r7, #19]
        break;
 8004166:	e00b      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004168:	08009438 	.word	0x08009438
 800416c:	40021000 	.word	0x40021000
 8004170:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004174:	4b30      	ldr	r3, [pc, #192]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0e9      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d15c      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004186:	4b2d      	ldr	r3, [pc, #180]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d019      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b0:	4b22      	ldr	r3, [pc, #136]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	4a21      	ldr	r2, [pc, #132]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c6:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d0:	4a1a      	ldr	r2, [pc, #104]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fef5 	bl	8001fd0 <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e8:	e00b      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fd fef1 	bl	8001fd0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d902      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ec      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004216:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004226:	4905      	ldr	r1, [pc, #20]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004236:	bf00      	nop
 8004238:	40007000 	.word	0x40007000
 800423c:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004244:	7c7b      	ldrb	r3, [r7, #17]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424a:	4b8d      	ldr	r3, [pc, #564]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	4a8c      	ldr	r2, [pc, #560]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01f      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	2b01      	cmp	r3, #1
 8004270:	d00c      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004276:	2b03      	cmp	r3, #3
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	2b02      	cmp	r3, #2
 8004280:	d004      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004282:	f240 1199 	movw	r1, #409	@ 0x199
 8004286:	487f      	ldr	r0, [pc, #508]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004288:	f7fd f8ec 	bl	8001464 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428c:	4b7c      	ldr	r3, [pc, #496]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	4979      	ldr	r1, [pc, #484]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01f      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d00c      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d004      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80042ce:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80042d2:	486c      	ldr	r0, [pc, #432]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80042d4:	f7fd f8c6 	bl	8001464 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d8:	4b69      	ldr	r3, [pc, #420]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 020c 	bic.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	4966      	ldr	r1, [pc, #408]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01f      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2b10      	cmp	r3, #16
 8004308:	d00c      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	2b30      	cmp	r3, #48	@ 0x30
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	2b20      	cmp	r3, #32
 8004318:	d004      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800431a:	f240 11af 	movw	r1, #431	@ 0x1af
 800431e:	4859      	ldr	r0, [pc, #356]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004320:	f7fd f8a0 	bl	8001464 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004324:	4b56      	ldr	r3, [pc, #344]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	4953      	ldr	r1, [pc, #332]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01f      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	2b40      	cmp	r3, #64	@ 0x40
 8004354:	d00c      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	2bc0      	cmp	r3, #192	@ 0xc0
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d004      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004366:	f240 11bd 	movw	r1, #445	@ 0x1bd
 800436a:	4846      	ldr	r0, [pc, #280]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800436c:	f7fd f87a 	bl	8001464 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004370:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	4940      	ldr	r1, [pc, #256]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d022      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a2:	d00e      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ac:	d009      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b6:	d004      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80043b8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80043bc:	4831      	ldr	r0, [pc, #196]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80043be:	f7fd f851 	bl	8001464 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d0:	492b      	ldr	r1, [pc, #172]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f4:	d00e      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043fe:	d009      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004408:	d004      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800440a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800440e:	481d      	ldr	r0, [pc, #116]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004410:	f7fd f828 	bl	8001464 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004414:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	4917      	ldr	r1, [pc, #92]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004432:	2b00      	cmp	r3, #0
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d013      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004446:	d00e      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004450:	d009      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800445a:	d004      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800445c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004460:	4808      	ldr	r0, [pc, #32]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004462:	f7fc ffff 	bl	8001464 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004466:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	4902      	ldr	r1, [pc, #8]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	08009438 	.word	0x08009438
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004490:	2b00      	cmp	r3, #0
 8004492:	d022      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a4:	d00e      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044ae:	d009      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044b8:	d004      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80044ba:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80044be:	489e      	ldr	r0, [pc, #632]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80044c0:	f7fc ffd0 	bl	8001464 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044c4:	4b9d      	ldr	r3, [pc, #628]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	499a      	ldr	r1, [pc, #616]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01d      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f6:	d009      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004500:	d004      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004502:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8004506:	488c      	ldr	r0, [pc, #560]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004508:	f7fc ffac 	bl	8001464 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800450c:	4b8b      	ldr	r3, [pc, #556]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451a:	4988      	ldr	r1, [pc, #544]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01d      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800453e:	d009      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004548:	d004      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800454a:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800454e:	487a      	ldr	r0, [pc, #488]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004550:	f7fc ff88 	bl	8001464 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004554:	4b79      	ldr	r3, [pc, #484]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	4976      	ldr	r1, [pc, #472]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01d      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004586:	d009      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004590:	d004      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004592:	f240 2107 	movw	r1, #519	@ 0x207
 8004596:	4868      	ldr	r0, [pc, #416]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004598:	f7fc ff64 	bl	8001464 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800459c:	4b67      	ldr	r3, [pc, #412]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	4964      	ldr	r1, [pc, #400]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d040      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d013      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ce:	d00e      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d8:	d009      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045e2:	d004      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045e4:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80045e8:	4853      	ldr	r0, [pc, #332]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80045ea:	f7fc ff3b 	bl	8001464 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ee:	4b53      	ldr	r3, [pc, #332]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045fc:	494f      	ldr	r1, [pc, #316]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800460c:	d106      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800460e:	4b4b      	ldr	r3, [pc, #300]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4a4a      	ldr	r2, [pc, #296]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004618:	60d3      	str	r3, [r2, #12]
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004624:	d10c      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	2101      	movs	r1, #1
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f931 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004636:	7cfb      	ldrb	r3, [r7, #19]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d040      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	2b00      	cmp	r3, #0
 8004652:	d013      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800465c:	d00e      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x764>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004666:	d009      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004670:	d004      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004672:	f240 2141 	movw	r1, #577	@ 0x241
 8004676:	4830      	ldr	r0, [pc, #192]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004678:	f7fc fef4 	bl	8001464 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800467c:	4b2f      	ldr	r3, [pc, #188]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	492c      	ldr	r1, [pc, #176]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469a:	d106      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b27      	ldr	r3, [pc, #156]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a26      	ldr	r2, [pc, #152]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
 80046a8:	e011      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046b2:	d10c      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f8ea 	bl	8004894 <RCCEx_PLLSAI1_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d044      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d013      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ea:	d00e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046f4:	d009      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046fe:	d004      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004700:	f240 2166 	movw	r1, #614	@ 0x266
 8004704:	480c      	ldr	r0, [pc, #48]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004706:	f7fc fead 	bl	8001464 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004718:	4908      	ldr	r1, [pc, #32]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004728:	d10a      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472a:	4b04      	ldr	r3, [pc, #16]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4a03      	ldr	r2, [pc, #12]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004734:	60d3      	str	r3, [r2, #12]
 8004736:	e015      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004738:	08009438 	.word	0x08009438
 800473c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004748:	d10c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f89f 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d047      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800477c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004780:	d00e      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800478a:	d009      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004790:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004794:	d004      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004796:	f240 2186 	movw	r1, #646	@ 0x286
 800479a:	483c      	ldr	r0, [pc, #240]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800479c:	f7fc fe62 	bl	8001464 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ae:	4938      	ldr	r1, [pc, #224]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047be:	d10d      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	2102      	movs	r1, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f864 	bl	8004894 <RCCEx_PLLSAI1_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d014      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	74bb      	strb	r3, [r7, #18]
 80047da:	e011      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047e4:	d10c      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3320      	adds	r3, #32
 80047ea:	2102      	movs	r1, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f9d1 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f6:	7cfb      	ldrb	r3, [r7, #19]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d018      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d009      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d004      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800481e:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004822:	481a      	ldr	r0, [pc, #104]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004824:	f7fc fe1e 	bl	8001464 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004836:	4916      	ldr	r1, [pc, #88]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01b      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800485e:	d004      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004860:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8004864:	4809      	ldr	r0, [pc, #36]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004866:	f7fc fdfd 	bl	8001464 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800487a:	4905      	ldr	r1, [pc, #20]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004882:	7cbb      	ldrb	r3, [r7, #18]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	08009438 	.word	0x08009438
 8004890:	40021000 	.word	0x40021000

08004894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x38>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d00c      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x38>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d008      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x38>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d004      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x38>
 80048c2:	f640 3162 	movw	r1, #2914	@ 0xb62
 80048c6:	4887      	ldr	r0, [pc, #540]	@ (8004ae4 <RCCEx_PLLSAI1_Config+0x250>)
 80048c8:	f7fc fdcc 	bl	8001464 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <RCCEx_PLLSAI1_Config+0x48>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d904      	bls.n	80048e6 <RCCEx_PLLSAI1_Config+0x52>
 80048dc:	f640 3163 	movw	r1, #2915	@ 0xb63
 80048e0:	4880      	ldr	r0, [pc, #512]	@ (8004ae4 <RCCEx_PLLSAI1_Config+0x250>)
 80048e2:	f7fc fdbf 	bl	8001464 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b07      	cmp	r3, #7
 80048ec:	d903      	bls.n	80048f6 <RCCEx_PLLSAI1_Config+0x62>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b56      	cmp	r3, #86	@ 0x56
 80048f4:	d904      	bls.n	8004900 <RCCEx_PLLSAI1_Config+0x6c>
 80048f6:	f640 3164 	movw	r1, #2916	@ 0xb64
 80048fa:	487a      	ldr	r0, [pc, #488]	@ (8004ae4 <RCCEx_PLLSAI1_Config+0x250>)
 80048fc:	f7fc fdb2 	bl	8001464 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <RCCEx_PLLSAI1_Config+0x90>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <RCCEx_PLLSAI1_Config+0x90>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <RCCEx_PLLSAI1_Config+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800492c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <RCCEx_PLLSAI1_Config+0xaa>
 8004934:	f640 3165 	movw	r1, #2917	@ 0xb65
 8004938:	486a      	ldr	r0, [pc, #424]	@ (8004ae4 <RCCEx_PLLSAI1_Config+0x250>)
 800493a:	f7fc fd93 	bl	8001464 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800494a:	4b67      	ldr	r3, [pc, #412]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
       ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004962:	4b61      	ldr	r3, [pc, #388]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
       ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d047      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e044      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d018      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x122>
 8004984:	2b03      	cmp	r3, #3
 8004986:	d825      	bhi.n	80049d4 <RCCEx_PLLSAI1_Config+0x140>
 8004988:	2b01      	cmp	r3, #1
 800498a:	d002      	beq.n	8004992 <RCCEx_PLLSAI1_Config+0xfe>
 800498c:	2b02      	cmp	r3, #2
 800498e:	d009      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x110>
 8004990:	e020      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004992:	4b55      	ldr	r3, [pc, #340]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11d      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a2:	e01a      	b.n	80049da <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a4:	4b50      	ldr	r3, [pc, #320]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b4:	e013      	b.n	80049de <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049c2:	4b49      	ldr	r3, [pc, #292]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049d2:	e006      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e004      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0x150>
      break;
 80049da:	bf00      	nop
 80049dc:	e002      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0x150>
      break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0x150>
      break;
 80049e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	430b      	orrs	r3, r1
 8004a00:	4939      	ldr	r1, [pc, #228]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 80ba 	bne.w	8004b82 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a35      	ldr	r2, [pc, #212]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004a14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fd fad9 	bl	8001fd0 <HAL_GetTick>
 8004a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a20:	e009      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a22:	f7fd fad5 	bl	8001fd0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d902      	bls.n	8004a36 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	73fb      	strb	r3, [r7, #15]
        break;
 8004a34:	e005      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a36:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ef      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 809c 	bne.w	8004b82 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d11e      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d008      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x1d6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b11      	cmp	r3, #17
 8004a5e:	d004      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x1d6>
 8004a60:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004a64:	481f      	ldr	r0, [pc, #124]	@ (8004ae4 <RCCEx_PLLSAI1_Config+0x250>)
 8004a66:	f7fc fcfd 	bl	8001464 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	0211      	lsls	r1, r2, #8
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68d2      	ldr	r2, [r2, #12]
 8004a80:	0912      	lsrs	r2, r2, #4
 8004a82:	0452      	lsls	r2, r2, #17
 8004a84:	430a      	orrs	r2, r1
 8004a86:	4918      	ldr	r1, [pc, #96]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	610b      	str	r3, [r1, #16]
 8004a8c:	e055      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d12b      	bne.n	8004aec <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d010      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x22a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d00c      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x22a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b06      	cmp	r3, #6
 8004aaa:	d008      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x22a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d004      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x22a>
 8004ab4:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8004ab8:	480a      	ldr	r0, [pc, #40]	@ (8004ae4 <RCCEx_PLLSAI1_Config+0x250>)
 8004aba:	f7fc fcd3 	bl	8001464 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004abe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ac6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	0211      	lsls	r1, r2, #8
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6912      	ldr	r2, [r2, #16]
 8004ad4:	0852      	lsrs	r2, r2, #1
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	0552      	lsls	r2, r2, #21
 8004ada:	430a      	orrs	r2, r1
 8004adc:	4902      	ldr	r1, [pc, #8]	@ (8004ae8 <RCCEx_PLLSAI1_Config+0x254>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
 8004ae2:	e02a      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0x2a6>
 8004ae4:	08009438 	.word	0x08009438
 8004ae8:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d010      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x282>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d00c      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x282>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d008      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x282>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d004      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x282>
 8004b0c:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8004b10:	481e      	ldr	r0, [pc, #120]	@ (8004b8c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004b12:	f7fc fca7 	bl	8001464 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6892      	ldr	r2, [r2, #8]
 8004b26:	0211      	lsls	r1, r2, #8
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6952      	ldr	r2, [r2, #20]
 8004b2c:	0852      	lsrs	r2, r2, #1
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	0652      	lsls	r2, r2, #25
 8004b32:	430a      	orrs	r2, r1
 8004b34:	4916      	ldr	r1, [pc, #88]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b3a:	4b15      	ldr	r3, [pc, #84]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a14      	ldr	r2, [pc, #80]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b46:	f7fd fa43 	bl	8001fd0 <HAL_GetTick>
 8004b4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4c:	e009      	b.n	8004b62 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b4e:	f7fd fa3f 	bl	8001fd0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d902      	bls.n	8004b62 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b60:	e005      	b.n	8004b6e <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b62:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0ef      	beq.n	8004b4e <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4904      	ldr	r1, [pc, #16]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08009438 	.word	0x08009438
 8004b90:	40021000 	.word	0x40021000

08004b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x38>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d00c      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x38>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d008      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x38>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d004      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x38>
 8004bc2:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8004bc6:	4896      	ldr	r0, [pc, #600]	@ (8004e20 <RCCEx_PLLSAI2_Config+0x28c>)
 8004bc8:	f7fc fc4c 	bl	8001464 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <RCCEx_PLLSAI2_Config+0x48>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d904      	bls.n	8004be6 <RCCEx_PLLSAI2_Config+0x52>
 8004bdc:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8004be0:	488f      	ldr	r0, [pc, #572]	@ (8004e20 <RCCEx_PLLSAI2_Config+0x28c>)
 8004be2:	f7fc fc3f 	bl	8001464 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b07      	cmp	r3, #7
 8004bec:	d903      	bls.n	8004bf6 <RCCEx_PLLSAI2_Config+0x62>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b56      	cmp	r3, #86	@ 0x56
 8004bf4:	d904      	bls.n	8004c00 <RCCEx_PLLSAI2_Config+0x6c>
 8004bf6:	f640 4131 	movw	r1, #3121	@ 0xc31
 8004bfa:	4889      	ldr	r0, [pc, #548]	@ (8004e20 <RCCEx_PLLSAI2_Config+0x28c>)
 8004bfc:	f7fc fc32 	bl	8001464 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0x84>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <RCCEx_PLLSAI2_Config+0x94>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <RCCEx_PLLSAI2_Config+0x9e>
 8004c28:	f640 4132 	movw	r1, #3122	@ 0xc32
 8004c2c:	487c      	ldr	r0, [pc, #496]	@ (8004e20 <RCCEx_PLLSAI2_Config+0x28c>)
 8004c2e:	f7fc fc19 	bl	8001464 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c32:	4b7c      	ldr	r3, [pc, #496]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c3e:	4b79      	ldr	r3, [pc, #484]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0203 	and.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d10d      	bne.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
       ||
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c56:	4b73      	ldr	r3, [pc, #460]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
       ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d047      	beq.n	8004cfa <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
 8004c6e:	e044      	b.n	8004cfa <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d018      	beq.n	8004caa <RCCEx_PLLSAI2_Config+0x116>
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d825      	bhi.n	8004cc8 <RCCEx_PLLSAI2_Config+0x134>
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d002      	beq.n	8004c86 <RCCEx_PLLSAI2_Config+0xf2>
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d009      	beq.n	8004c98 <RCCEx_PLLSAI2_Config+0x104>
 8004c84:	e020      	b.n	8004cc8 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c86:	4b67      	ldr	r3, [pc, #412]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11d      	bne.n	8004cce <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c96:	e01a      	b.n	8004cce <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c98:	4b62      	ldr	r3, [pc, #392]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d116      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca8:	e013      	b.n	8004cd2 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004caa:	4b5e      	ldr	r3, [pc, #376]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10f      	bne.n	8004cd6 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cc6:	e006      	b.n	8004cd6 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e004      	b.n	8004cd8 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e002      	b.n	8004cd8 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004cd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10d      	bne.n	8004cfa <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cde:	4b51      	ldr	r3, [pc, #324]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	494b      	ldr	r1, [pc, #300]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 808a 	bne.w	8004e16 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d02:	4b48      	ldr	r3, [pc, #288]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a47      	ldr	r2, [pc, #284]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fd f95f 	bl	8001fd0 <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d14:	e009      	b.n	8004d2a <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d16:	f7fd f95b 	bl	8001fd0 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d902      	bls.n	8004d2a <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	73fb      	strb	r3, [r7, #15]
        break;
 8004d28:	e005      	b.n	8004d36 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ef      	bne.n	8004d16 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d16c      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11e      	bne.n	8004d80 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b07      	cmp	r3, #7
 8004d48:	d008      	beq.n	8004d5c <RCCEx_PLLSAI2_Config+0x1c8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b11      	cmp	r3, #17
 8004d50:	d004      	beq.n	8004d5c <RCCEx_PLLSAI2_Config+0x1c8>
 8004d52:	f640 4185 	movw	r1, #3205	@ 0xc85
 8004d56:	4832      	ldr	r0, [pc, #200]	@ (8004e20 <RCCEx_PLLSAI2_Config+0x28c>)
 8004d58:	f7fc fb84 	bl	8001464 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d5c:	4b31      	ldr	r3, [pc, #196]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6892      	ldr	r2, [r2, #8]
 8004d6c:	0211      	lsls	r1, r2, #8
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68d2      	ldr	r2, [r2, #12]
 8004d72:	0912      	lsrs	r2, r2, #4
 8004d74:	0452      	lsls	r2, r2, #17
 8004d76:	430a      	orrs	r2, r1
 8004d78:	492a      	ldr	r1, [pc, #168]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	614b      	str	r3, [r1, #20]
 8004d7e:	e026      	b.n	8004dce <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d010      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x216>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d00c      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x216>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b06      	cmp	r3, #6
 8004d96:	d008      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x216>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d004      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x216>
 8004da0:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8004da4:	481e      	ldr	r0, [pc, #120]	@ (8004e20 <RCCEx_PLLSAI2_Config+0x28c>)
 8004da6:	f7fc fb5d 	bl	8001464 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004daa:	4b1e      	ldr	r3, [pc, #120]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004db2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6892      	ldr	r2, [r2, #8]
 8004dba:	0211      	lsls	r1, r2, #8
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6912      	ldr	r2, [r2, #16]
 8004dc0:	0852      	lsrs	r2, r2, #1
 8004dc2:	3a01      	subs	r2, #1
 8004dc4:	0652      	lsls	r2, r2, #25
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	4916      	ldr	r1, [pc, #88]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fd f8f9 	bl	8001fd0 <HAL_GetTick>
 8004dde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004de0:	e009      	b.n	8004df6 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de2:	f7fd f8f5 	bl	8001fd0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d902      	bls.n	8004df6 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	73fb      	strb	r3, [r7, #15]
          break;
 8004df4:	e005      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004df6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ef      	beq.n	8004de2 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e08:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	4904      	ldr	r1, [pc, #16]	@ (8004e24 <RCCEx_PLLSAI2_Config+0x290>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	08009438 	.word	0x08009438
 8004e24:	40021000 	.word	0x40021000

08004e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e1dd      	b.n	80051f6 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7b      	ldr	r2, [pc, #492]	@ (800502c <HAL_SPI_Init+0x204>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00e      	beq.n	8004e62 <HAL_SPI_Init+0x3a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a79      	ldr	r2, [pc, #484]	@ (8005030 <HAL_SPI_Init+0x208>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_SPI_Init+0x3a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a78      	ldr	r2, [pc, #480]	@ (8005034 <HAL_SPI_Init+0x20c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_SPI_Init+0x3a>
 8004e58:	f240 1147 	movw	r1, #327	@ 0x147
 8004e5c:	4876      	ldr	r0, [pc, #472]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004e5e:	f7fc fb01 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_SPI_Init+0x56>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e72:	d004      	beq.n	8004e7e <HAL_SPI_Init+0x56>
 8004e74:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004e78:	486f      	ldr	r0, [pc, #444]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004e7a:	f7fc faf3 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <HAL_SPI_Init+0x7c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8e:	d009      	beq.n	8004ea4 <HAL_SPI_Init+0x7c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e98:	d004      	beq.n	8004ea4 <HAL_SPI_Init+0x7c>
 8004e9a:	f240 1149 	movw	r1, #329	@ 0x149
 8004e9e:	4866      	ldr	r0, [pc, #408]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004ea0:	f7fc fae0 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004eac:	d040      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004eb6:	d03b      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004ec0:	d036      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eca:	d031      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004ed4:	d02c      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ede:	d027      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004ee8:	d022      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef2:	d01d      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004efc:	d018      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f06:	d013      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004f10:	d00e      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1a:	d009      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f24:	d004      	beq.n	8004f30 <HAL_SPI_Init+0x108>
 8004f26:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004f2a:	4843      	ldr	r0, [pc, #268]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004f2c:	f7fc fa9a 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f38:	d00d      	beq.n	8004f56 <HAL_SPI_Init+0x12e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_SPI_Init+0x12e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f4a:	d004      	beq.n	8004f56 <HAL_SPI_Init+0x12e>
 8004f4c:	f240 114b 	movw	r1, #331	@ 0x14b
 8004f50:	4839      	ldr	r0, [pc, #228]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004f52:	f7fc fa87 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d008      	beq.n	8004f70 <HAL_SPI_Init+0x148>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <HAL_SPI_Init+0x148>
 8004f66:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004f6a:	4833      	ldr	r0, [pc, #204]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004f6c:	f7fc fa7a 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d01c      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d018      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b18      	cmp	r3, #24
 8004f8e:	d014      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d010      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	2b28      	cmp	r3, #40	@ 0x28
 8004f9e:	d00c      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	2b30      	cmp	r3, #48	@ 0x30
 8004fa6:	d008      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b38      	cmp	r3, #56	@ 0x38
 8004fae:	d004      	beq.n	8004fba <HAL_SPI_Init+0x192>
 8004fb0:	f240 114d 	movw	r1, #333	@ 0x14d
 8004fb4:	4820      	ldr	r0, [pc, #128]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004fb6:	f7fc fa55 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <HAL_SPI_Init+0x1ac>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	2b80      	cmp	r3, #128	@ 0x80
 8004fc8:	d004      	beq.n	8004fd4 <HAL_SPI_Init+0x1ac>
 8004fca:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8004fce:	481a      	ldr	r0, [pc, #104]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004fd0:	f7fc fa48 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_SPI_Init+0x1c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d004      	beq.n	8004fee <HAL_SPI_Init+0x1c6>
 8004fe4:	f240 114f 	movw	r1, #335	@ 0x14f
 8004fe8:	4813      	ldr	r0, [pc, #76]	@ (8005038 <HAL_SPI_Init+0x210>)
 8004fea:	f7fc fa3b 	bl	8001464 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d151      	bne.n	800509a <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_SPI_Init+0x1e8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d004      	beq.n	8005010 <HAL_SPI_Init+0x1e8>
 8005006:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800500a:	480b      	ldr	r0, [pc, #44]	@ (8005038 <HAL_SPI_Init+0x210>)
 800500c:	f7fc fa2a 	bl	8001464 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d011      	beq.n	800503c <HAL_SPI_Init+0x214>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d00d      	beq.n	800503c <HAL_SPI_Init+0x214>
 8005020:	f240 1153 	movw	r1, #339	@ 0x153
 8005024:	4804      	ldr	r0, [pc, #16]	@ (8005038 <HAL_SPI_Init+0x210>)
 8005026:	f7fc fa1d 	bl	8001464 <assert_failed>
 800502a:	e007      	b.n	800503c <HAL_SPI_Init+0x214>
 800502c:	40013000 	.word	0x40013000
 8005030:	40003800 	.word	0x40003800
 8005034:	40003c00 	.word	0x40003c00
 8005038:	08009474 	.word	0x08009474

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005044:	d125      	bne.n	8005092 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d050      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	2b08      	cmp	r3, #8
 8005054:	d04c      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b10      	cmp	r3, #16
 800505c:	d048      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b18      	cmp	r3, #24
 8005064:	d044      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	2b20      	cmp	r3, #32
 800506c:	d040      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	2b28      	cmp	r3, #40	@ 0x28
 8005074:	d03c      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b30      	cmp	r3, #48	@ 0x30
 800507c:	d038      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b38      	cmp	r3, #56	@ 0x38
 8005084:	d034      	beq.n	80050f0 <HAL_SPI_Init+0x2c8>
 8005086:	f240 1157 	movw	r1, #343	@ 0x157
 800508a:	485d      	ldr	r0, [pc, #372]	@ (8005200 <HAL_SPI_Init+0x3d8>)
 800508c:	f7fc f9ea 	bl	8001464 <assert_failed>
 8005090:	e02e      	b.n	80050f0 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	61da      	str	r2, [r3, #28]
 8005098:	e02a      	b.n	80050f0 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d020      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d01c      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d018      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b18      	cmp	r3, #24
 80050b8:	d014      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d010      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	2b28      	cmp	r3, #40	@ 0x28
 80050c8:	d00c      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b30      	cmp	r3, #48	@ 0x30
 80050d0:	d008      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	2b38      	cmp	r3, #56	@ 0x38
 80050d8:	d004      	beq.n	80050e4 <HAL_SPI_Init+0x2bc>
 80050da:	f240 1161 	movw	r1, #353	@ 0x161
 80050de:	4848      	ldr	r0, [pc, #288]	@ (8005200 <HAL_SPI_Init+0x3d8>)
 80050e0:	f7fc f9c0 	bl	8001464 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc f9ee 	bl	80014ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005126:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005130:	d902      	bls.n	8005138 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e002      	b.n	800513e <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800513c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005146:	d007      	beq.n	8005158 <HAL_SPI_Init+0x330>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	ea42 0103 	orr.w	r1, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	f003 0204 	and.w	r2, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051d4:	ea42 0103 	orr.w	r1, r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	08009474 	.word	0x08009474

08005204 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_SPI_Transmit_IT+0x2a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005222:	d004      	beq.n	800522e <HAL_SPI_Transmit_IT+0x2a>
 8005224:	f240 6144 	movw	r1, #1604	@ 0x644
 8005228:	483e      	ldr	r0, [pc, #248]	@ (8005324 <HAL_SPI_Transmit_IT+0x120>)
 800522a:	f7fc f91b 	bl	8001464 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_Transmit_IT+0x36>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e06d      	b.n	800531a <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d001      	beq.n	800524e <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	e065      	b.n	800531a <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_SPI_Transmit_IT+0x58>
 8005258:	2302      	movs	r3, #2
 800525a:	e05e      	b.n	800531a <HAL_SPI_Transmit_IT+0x116>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2203      	movs	r2, #3
 8005268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052a8:	d903      	bls.n	80052b2 <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005328 <HAL_SPI_Transmit_IT+0x124>)
 80052ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80052b0:	e002      	b.n	80052b8 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	@ (800532c <HAL_SPI_Transmit_IT+0x128>)
 80052b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c0:	d10f      	bne.n	80052e2 <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b40      	cmp	r3, #64	@ 0x40
 80052ee:	d007      	beq.n	8005300 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052fe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8005316:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	08009474 	.word	0x08009474
 8005328:	08005d3d 	.word	0x08005d3d
 800532c:	08005cf7 	.word	0x08005cf7

08005330 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <HAL_SPI_Receive_DMA+0x20>
 8005346:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 800534a:	488f      	ldr	r0, [pc, #572]	@ (8005588 <HAL_SPI_Receive_DMA+0x258>)
 800534c:	f7fc f88a 	bl	8001464 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d001      	beq.n	8005360 <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_BUSY;
 800535c:	2302      	movs	r3, #2
 800535e:	e10e      	b.n	800557e <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d119      	bne.n	800539c <HAL_SPI_Receive_DMA+0x6c>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005370:	d114      	bne.n	800539c <HAL_SPI_Receive_DMA+0x6c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2204      	movs	r2, #4
 8005376:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_SPI_Receive_DMA+0x5c>
 8005382:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 8005386:	4880      	ldr	r0, [pc, #512]	@ (8005588 <HAL_SPI_Receive_DMA+0x258>)
 8005388:	f7fc f86c 	bl	8001464 <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f900 	bl	8005598 <HAL_SPI_TransmitReceive_DMA>
 8005398:	4603      	mov	r3, r0
 800539a:	e0f0      	b.n	800557e <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_SPI_Receive_DMA+0x78>
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_SPI_Receive_DMA+0x7c>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0e8      	b.n	800557e <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_Receive_DMA+0x8a>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0e1      	b.n	800557e <HAL_SPI_Receive_DMA+0x24e>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2204      	movs	r2, #4
 80053c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005406:	d10f      	bne.n	8005428 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005416:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005426:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005436:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005440:	d908      	bls.n	8005454 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	e042      	b.n	80054da <HAL_SPI_Receive_DMA+0x1aa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005462:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546e:	d134      	bne.n	80054da <HAL_SPI_Receive_DMA+0x1aa>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800547e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005486:	b29b      	uxth	r3, r3
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d111      	bne.n	80054b4 <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800549e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80054b2:	e012      	b.n	80054da <HAL_SPI_Receive_DMA+0x1aa>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3301      	adds	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054de:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <HAL_SPI_Receive_DMA+0x25c>)
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005590 <HAL_SPI_Receive_DMA+0x260>)
 80054e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ee:	4a29      	ldr	r2, [pc, #164]	@ (8005594 <HAL_SPI_Receive_DMA+0x264>)
 80054f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f6:	2200      	movs	r2, #0
 80054f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	4619      	mov	r1, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005512:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005514:	f7fd f884 	bl	8002620 <HAL_DMA_Start_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e023      	b.n	800557e <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b40      	cmp	r3, #64	@ 0x40
 8005542:	d007      	beq.n	8005554 <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005552:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0220 	orr.w	r2, r2, #32
 800556a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	08009474 	.word	0x08009474
 800558c:	08005c55 	.word	0x08005c55
 8005590:	08005b1d 	.word	0x08005b1d
 8005594:	08005c8d 	.word	0x08005c8d

08005598 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80055ae:	f640 0172 	movw	r1, #2162	@ 0x872
 80055b2:	487f      	ldr	r0, [pc, #508]	@ (80057b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80055b4:	f7fb ff56 	bl	8001464 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <HAL_SPI_TransmitReceive_DMA+0x32>
 80055c0:	f640 0173 	movw	r1, #2163	@ 0x873
 80055c4:	487a      	ldr	r0, [pc, #488]	@ (80057b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80055c6:	f7fb ff4d 	bl	8001464 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <HAL_SPI_TransmitReceive_DMA+0x44>
 80055d2:	f640 0176 	movw	r1, #2166	@ 0x876
 80055d6:	4876      	ldr	r0, [pc, #472]	@ (80057b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80055d8:	f7fb ff44 	bl	8001464 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055e2:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d00c      	beq.n	800560a <HAL_SPI_TransmitReceive_DMA+0x72>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f6:	d106      	bne.n	8005606 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_TransmitReceive_DMA+0x6e>
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b04      	cmp	r3, #4
 8005604:	d001      	beq.n	800560a <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
 8005608:	e15f      	b.n	80058ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_SPI_TransmitReceive_DMA+0x84>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_SPI_TransmitReceive_DMA+0x84>
 8005616:	887b      	ldrh	r3, [r7, #2]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e154      	b.n	80058ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_SPI_TransmitReceive_DMA+0x96>
 800562a:	2302      	movs	r3, #2
 800562c:	e14d      	b.n	80058ca <HAL_SPI_TransmitReceive_DMA+0x332>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b04      	cmp	r3, #4
 8005640:	d003      	beq.n	800564a <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2205      	movs	r2, #5
 8005646:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	887a      	ldrh	r2, [r7, #2]
 800565a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	887a      	ldrh	r2, [r7, #2]
 8005660:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	887a      	ldrh	r2, [r7, #2]
 8005674:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8005692:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800569c:	d908      	bls.n	80056b0 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e06f      	b.n	8005790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056be:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ca:	d126      	bne.n	800571a <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10f      	bne.n	80056f8 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056e6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056f6:	e010      	b.n	800571a <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005706:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800570c:	b29b      	uxth	r3, r3
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	3301      	adds	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005724:	d134      	bne.n	8005790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005734:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800573c:	b29b      	uxth	r3, r3
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d111      	bne.n	800576a <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005754:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800575c:	b29b      	uxth	r3, r3
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005768:	e012      	b.n	8005790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005778:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005780:	b29b      	uxth	r3, r3
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	b29b      	uxth	r3, r3
 8005786:	3301      	adds	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b04      	cmp	r3, #4
 800579a:	d10f      	bne.n	80057bc <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a0:	4a04      	ldr	r2, [pc, #16]	@ (80057b4 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a8:	4a03      	ldr	r2, [pc, #12]	@ (80057b8 <HAL_SPI_TransmitReceive_DMA+0x220>)
 80057aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057ac:	e00e      	b.n	80057cc <HAL_SPI_TransmitReceive_DMA+0x234>
 80057ae:	bf00      	nop
 80057b0:	08009474 	.word	0x08009474
 80057b4:	08005c55 	.word	0x08005c55
 80057b8:	08005b1d 	.word	0x08005b1d
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c0:	4a44      	ldr	r2, [pc, #272]	@ (80058d4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c8:	4a43      	ldr	r2, [pc, #268]	@ (80058d8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80057ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	4a42      	ldr	r2, [pc, #264]	@ (80058dc <HAL_SPI_TransmitReceive_DMA+0x344>)
 80057d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d8:	2200      	movs	r2, #0
 80057da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	4619      	mov	r1, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80057f6:	f7fc ff13 	bl	8002620 <HAL_DMA_Start_IT>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005804:	f043 0210 	orr.w	r2, r3, #16
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e058      	b.n	80058ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005834:	2200      	movs	r2, #0
 8005836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583c:	2200      	movs	r2, #0
 800583e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005844:	2200      	movs	r2, #0
 8005846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	4619      	mov	r1, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800585e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005860:	f7fc fede 	bl	8002620 <HAL_DMA_Start_IT>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e023      	b.n	80058ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588c:	2b40      	cmp	r3, #64	@ 0x40
 800588e:	d007      	beq.n	80058a0 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800589e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0220 	orr.w	r2, r2, #32
 80058b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0202 	orr.w	r2, r2, #2
 80058c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	08005c71 	.word	0x08005c71
 80058d8:	08005bc5 	.word	0x08005bc5
 80058dc:	08005c8d 	.word	0x08005c8d

080058e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
    return;
 8005922:	e0d7      	b.n	8005ad4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_SPI_IRQHandler+0x66>
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
    return;
 8005944:	e0c6      	b.n	8005ad4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_SPI_IRQHandler+0x8c>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	099b      	lsrs	r3, r3, #6
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80b4 	beq.w	8005ad4 <HAL_SPI_IRQHandler+0x1f4>
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80ad 	beq.w	8005ad4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	099b      	lsrs	r3, r3, #6
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d023      	beq.n	80059ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b03      	cmp	r3, #3
 8005990:	d011      	beq.n	80059b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	e00b      	b.n	80059ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]
        return;
 80059cc:	e082      	b.n	8005ad4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d014      	beq.n	8005a04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a14:	f043 0208 	orr.w	r2, r3, #8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d04f      	beq.n	8005ad2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <HAL_SPI_IRQHandler+0x17e>
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d034      	beq.n	8005ac8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0203 	bic.w	r2, r2, #3
 8005a6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d011      	beq.n	8005a9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7a:	4a18      	ldr	r2, [pc, #96]	@ (8005adc <HAL_SPI_IRQHandler+0x1fc>)
 8005a7c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fc fe3a 	bl	80026fc <HAL_DMA_Abort_IT>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8005adc <HAL_SPI_IRQHandler+0x1fc>)
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fc fe24 	bl	80026fc <HAL_DMA_Abort_IT>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005abe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005ac6:	e003      	b.n	8005ad0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f81d 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ace:	e000      	b.n	8005ad2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005ad0:	bf00      	nop
    return;
 8005ad2:	bf00      	nop
  }
}
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	08005ccd 	.word	0x08005ccd

08005ae0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b2a:	f7fc fa51 	bl	8001fd0 <HAL_GetTick>
 8005b2e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d03c      	beq.n	8005bb8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0220 	bic.w	r2, r2, #32
 8005b4c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10d      	bne.n	8005b72 <SPI_DMAReceiveCplt+0x56>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b5e:	d108      	bne.n	8005b72 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0203 	bic.w	r2, r2, #3
 8005b6e:	605a      	str	r2, [r3, #4]
 8005b70:	e007      	b.n	8005b82 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	2164      	movs	r1, #100	@ 0x64
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fa18 	bl	8005fbc <SPI_EndRxTransaction>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ffa9 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005bb6:	e002      	b.n	8005bbe <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7fb fab1 	bl	8001120 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd2:	f7fc f9fd 	bl	8001fd0 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d030      	beq.n	8005c48 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0220 	bic.w	r2, r2, #32
 8005bf4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	2164      	movs	r1, #100	@ 0x64
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fa36 	bl	800606c <SPI_EndRxTxTransaction>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0203 	bic.w	r2, r2, #3
 8005c20:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff ff61 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c46:	e002      	b.n	8005c4e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff ff49 	bl	8005ae0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7fb fa40 	bl	80010e8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff ff38 	bl	8005af4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0203 	bic.w	r2, r2, #3
 8005ca8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cae:	f043 0210 	orr.w	r2, r3, #16
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff22 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff ff0d 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b082      	sub	sp, #8
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9e2 	bl	80060f8 <SPI_CloseTx_ISR>
  }
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9c0 	bl	80060f8 <SPI_CloseTx_ISR>
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d90:	f7fc f91e 	bl	8001fd0 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da0:	f7fc f916 	bl	8001fd0 <HAL_GetTick>
 8005da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005da6:	4b39      	ldr	r3, [pc, #228]	@ (8005e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	015b      	lsls	r3, r3, #5
 8005dac:	0d1b      	lsrs	r3, r3, #20
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005db6:	e054      	b.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d050      	beq.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc0:	f7fc f906 	bl	8001fd0 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d902      	bls.n	8005dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d13d      	bne.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dee:	d111      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df8:	d004      	beq.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e02:	d107      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1c:	d10f      	bne.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e017      	b.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d19b      	bne.n	8005db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000000 	.word	0x20000000

08005e90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ea2:	f7fc f895 	bl	8001fd0 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005eb2:	f7fc f88d 	bl	8001fd0 <HAL_GetTick>
 8005eb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8005fb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00da      	lsls	r2, r3, #3
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	0d1b      	lsrs	r3, r3, #20
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ed8:	e060      	b.n	8005f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ee0:	d107      	bne.n	8005ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d050      	beq.n	8005f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005efa:	f7fc f869 	bl	8001fd0 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d902      	bls.n	8005f10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d13d      	bne.n	8005f8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f28:	d111      	bne.n	8005f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f32:	d004      	beq.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d107      	bne.n	8005f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f56:	d10f      	bne.n	8005f78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e010      	b.n	8005fae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d196      	bne.n	8005eda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3728      	adds	r7, #40	@ 0x28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000000 	.word	0x20000000

08005fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fd0:	d111      	bne.n	8005ff6 <SPI_EndRxTransaction+0x3a>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fda:	d004      	beq.n	8005fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe4:	d107      	bne.n	8005ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2180      	movs	r1, #128	@ 0x80
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff febd 	bl	8005d80 <SPI_WaitFlagStateUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006010:	f043 0220 	orr.w	r2, r3, #32
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e023      	b.n	8006064 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006024:	d11d      	bne.n	8006062 <SPI_EndRxTransaction+0xa6>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800602e:	d004      	beq.n	800603a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006038:	d113      	bne.n	8006062 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff22 	bl	8005e90 <SPI_WaitFifoStateUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e000      	b.n	8006064 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff03 	bl	8005e90 <SPI_WaitFifoStateUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e027      	b.n	80060f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	@ 0x80
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff fe68 	bl	8005d80 <SPI_WaitFlagStateUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e014      	b.n	80060f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff fedc 	bl	8005e90 <SPI_WaitFifoStateUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e000      	b.n	80060f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006100:	f7fb ff66 	bl	8001fd0 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006114:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	2164      	movs	r1, #100	@ 0x64
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ffa6 	bl	800606c <SPI_EndRxTxTransaction>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fcd1 	bl	8005b08 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006166:	e002      	b.n	800616e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fa fff5 	bl	8001158 <HAL_SPI_TxCpltCallback>
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e0e6      	b.n	8006358 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a74      	ldr	r2, [pc, #464]	@ (8006360 <HAL_TIM_Base_Init+0x1e8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d036      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d031      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a70      	ldr	r2, [pc, #448]	@ (8006364 <HAL_TIM_Base_Init+0x1ec>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d02c      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006368 <HAL_TIM_Base_Init+0x1f0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d027      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a6d      	ldr	r2, [pc, #436]	@ (800636c <HAL_TIM_Base_Init+0x1f4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d022      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006370 <HAL_TIM_Base_Init+0x1f8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01d      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006374 <HAL_TIM_Base_Init+0x1fc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a68      	ldr	r2, [pc, #416]	@ (8006378 <HAL_TIM_Base_Init+0x200>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a67      	ldr	r2, [pc, #412]	@ (800637c <HAL_TIM_Base_Init+0x204>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a65      	ldr	r2, [pc, #404]	@ (8006380 <HAL_TIM_Base_Init+0x208>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a64      	ldr	r2, [pc, #400]	@ (8006384 <HAL_TIM_Base_Init+0x20c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_TIM_Base_Init+0x8a>
 80061f8:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80061fc:	4862      	ldr	r0, [pc, #392]	@ (8006388 <HAL_TIM_Base_Init+0x210>)
 80061fe:	f7fb f931 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <HAL_TIM_Base_Init+0xbc>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b10      	cmp	r3, #16
 8006210:	d010      	beq.n	8006234 <HAL_TIM_Base_Init+0xbc>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b20      	cmp	r3, #32
 8006218:	d00c      	beq.n	8006234 <HAL_TIM_Base_Init+0xbc>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b40      	cmp	r3, #64	@ 0x40
 8006220:	d008      	beq.n	8006234 <HAL_TIM_Base_Init+0xbc>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b60      	cmp	r3, #96	@ 0x60
 8006228:	d004      	beq.n	8006234 <HAL_TIM_Base_Init+0xbc>
 800622a:	f240 1117 	movw	r1, #279	@ 0x117
 800622e:	4856      	ldr	r0, [pc, #344]	@ (8006388 <HAL_TIM_Base_Init+0x210>)
 8006230:	f7fb f918 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <HAL_TIM_Base_Init+0xe2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006244:	d009      	beq.n	800625a <HAL_TIM_Base_Init+0xe2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800624e:	d004      	beq.n	800625a <HAL_TIM_Base_Init+0xe2>
 8006250:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006254:	484c      	ldr	r0, [pc, #304]	@ (8006388 <HAL_TIM_Base_Init+0x210>)
 8006256:	f7fb f905 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006262:	d004      	beq.n	800626e <HAL_TIM_Base_Init+0xf6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a40      	ldr	r2, [pc, #256]	@ (800636c <HAL_TIM_Base_Init+0x1f4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d107      	bne.n	800627e <HAL_TIM_Base_Init+0x106>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	e00e      	b.n	800629c <HAL_TIM_Base_Init+0x124>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <HAL_TIM_Base_Init+0x11c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628e:	d201      	bcs.n	8006294 <HAL_TIM_Base_Init+0x11c>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <HAL_TIM_Base_Init+0x11e>
 8006294:	2300      	movs	r3, #0
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_TIM_Base_Init+0x132>
 80062a0:	f240 1119 	movw	r1, #281	@ 0x119
 80062a4:	4838      	ldr	r0, [pc, #224]	@ (8006388 <HAL_TIM_Base_Init+0x210>)
 80062a6:	f7fb f8dd 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_TIM_Base_Init+0x14c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b80      	cmp	r3, #128	@ 0x80
 80062b8:	d004      	beq.n	80062c4 <HAL_TIM_Base_Init+0x14c>
 80062ba:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80062be:	4832      	ldr	r0, [pc, #200]	@ (8006388 <HAL_TIM_Base_Init+0x210>)
 80062c0:	f7fb f8d0 	bl	8001464 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fb fd17 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fb47 	bl	8006984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40001000 	.word	0x40001000
 8006374:	40001400 	.word	0x40001400
 8006378:	40013400 	.word	0x40013400
 800637c:	40014000 	.word	0x40014000
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800
 8006388:	080094ac 	.word	0x080094ac

0800638c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e1b0      	b.n	8006702 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a7f      	ldr	r2, [pc, #508]	@ (80065a4 <HAL_TIM_Encoder_Init+0x218>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x5a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b2:	d018      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x5a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a7b      	ldr	r2, [pc, #492]	@ (80065a8 <HAL_TIM_Encoder_Init+0x21c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x5a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a7a      	ldr	r2, [pc, #488]	@ (80065ac <HAL_TIM_Encoder_Init+0x220>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x5a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a78      	ldr	r2, [pc, #480]	@ (80065b0 <HAL_TIM_Encoder_Init+0x224>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x5a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a77      	ldr	r2, [pc, #476]	@ (80065b4 <HAL_TIM_Encoder_Init+0x228>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x5a>
 80063dc:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80063e0:	4875      	ldr	r0, [pc, #468]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 80063e2:	f7fb f83f 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d014      	beq.n	8006418 <HAL_TIM_Encoder_Init+0x8c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d010      	beq.n	8006418 <HAL_TIM_Encoder_Init+0x8c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d00c      	beq.n	8006418 <HAL_TIM_Encoder_Init+0x8c>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b40      	cmp	r3, #64	@ 0x40
 8006404:	d008      	beq.n	8006418 <HAL_TIM_Encoder_Init+0x8c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b60      	cmp	r3, #96	@ 0x60
 800640c:	d004      	beq.n	8006418 <HAL_TIM_Encoder_Init+0x8c>
 800640e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8006412:	4869      	ldr	r0, [pc, #420]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006414:	f7fb f826 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00e      	beq.n	800643e <HAL_TIM_Encoder_Init+0xb2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006428:	d009      	beq.n	800643e <HAL_TIM_Encoder_Init+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006432:	d004      	beq.n	800643e <HAL_TIM_Encoder_Init+0xb2>
 8006434:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8006438:	485f      	ldr	r0, [pc, #380]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 800643a:	f7fb f813 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_TIM_Encoder_Init+0xcc>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	2b80      	cmp	r3, #128	@ 0x80
 800644c:	d004      	beq.n	8006458 <HAL_TIM_Encoder_Init+0xcc>
 800644e:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8006452:	4859      	ldr	r0, [pc, #356]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006454:	f7fb f806 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d00c      	beq.n	800647a <HAL_TIM_Encoder_Init+0xee>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d008      	beq.n	800647a <HAL_TIM_Encoder_Init+0xee>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d004      	beq.n	800647a <HAL_TIM_Encoder_Init+0xee>
 8006470:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8006474:	4850      	ldr	r0, [pc, #320]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006476:	f7fa fff5 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d00c      	beq.n	800649c <HAL_TIM_Encoder_Init+0x110>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d008      	beq.n	800649c <HAL_TIM_Encoder_Init+0x110>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b03      	cmp	r3, #3
 8006490:	d004      	beq.n	800649c <HAL_TIM_Encoder_Init+0x110>
 8006492:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8006496:	4848      	ldr	r0, [pc, #288]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006498:	f7fa ffe4 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d00c      	beq.n	80064be <HAL_TIM_Encoder_Init+0x132>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d008      	beq.n	80064be <HAL_TIM_Encoder_Init+0x132>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d004      	beq.n	80064be <HAL_TIM_Encoder_Init+0x132>
 80064b4:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 80064b8:	483f      	ldr	r0, [pc, #252]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 80064ba:	f7fa ffd3 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_TIM_Encoder_Init+0x14c>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIM_Encoder_Init+0x14c>
 80064ce:	f640 31ea 	movw	r1, #3050	@ 0xbea
 80064d2:	4839      	ldr	r0, [pc, #228]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 80064d4:	f7fa ffc6 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_TIM_Encoder_Init+0x166>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_Encoder_Init+0x166>
 80064e8:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 80064ec:	4832      	ldr	r0, [pc, #200]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 80064ee:	f7fa ffb9 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d010      	beq.n	800651c <HAL_TIM_Encoder_Init+0x190>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d00c      	beq.n	800651c <HAL_TIM_Encoder_Init+0x190>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	2b08      	cmp	r3, #8
 8006508:	d008      	beq.n	800651c <HAL_TIM_Encoder_Init+0x190>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b0c      	cmp	r3, #12
 8006510:	d004      	beq.n	800651c <HAL_TIM_Encoder_Init+0x190>
 8006512:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8006516:	4828      	ldr	r0, [pc, #160]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006518:	f7fa ffa4 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d010      	beq.n	8006546 <HAL_TIM_Encoder_Init+0x1ba>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d00c      	beq.n	8006546 <HAL_TIM_Encoder_Init+0x1ba>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d008      	beq.n	8006546 <HAL_TIM_Encoder_Init+0x1ba>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b0c      	cmp	r3, #12
 800653a:	d004      	beq.n	8006546 <HAL_TIM_Encoder_Init+0x1ba>
 800653c:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8006540:	481d      	ldr	r0, [pc, #116]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006542:	f7fa ff8f 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b0f      	cmp	r3, #15
 800654c:	d904      	bls.n	8006558 <HAL_TIM_Encoder_Init+0x1cc>
 800654e:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8006552:	4819      	ldr	r0, [pc, #100]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006554:	f7fa ff86 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	2b0f      	cmp	r3, #15
 800655e:	d904      	bls.n	800656a <HAL_TIM_Encoder_Init+0x1de>
 8006560:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8006564:	4814      	ldr	r0, [pc, #80]	@ (80065b8 <HAL_TIM_Encoder_Init+0x22c>)
 8006566:	f7fa ff7d 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006572:	d004      	beq.n	800657e <HAL_TIM_Encoder_Init+0x1f2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0d      	ldr	r2, [pc, #52]	@ (80065b0 <HAL_TIM_Encoder_Init+0x224>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d107      	bne.n	800658e <HAL_TIM_Encoder_Init+0x202>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e01a      	b.n	80065c4 <HAL_TIM_Encoder_Init+0x238>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <HAL_TIM_Encoder_Init+0x230>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800659e:	d20d      	bcs.n	80065bc <HAL_TIM_Encoder_Init+0x230>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e00c      	b.n	80065be <HAL_TIM_Encoder_Init+0x232>
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	080094ac 	.word	0x080094ac
 80065bc:	2300      	movs	r3, #0
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_Encoder_Init+0x246>
 80065c8:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 80065cc:	484f      	ldr	r0, [pc, #316]	@ (800670c <HAL_TIM_Encoder_Init+0x380>)
 80065ce:	f7fa ff49 	bl	8001464 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fb fad0 	bl	8001b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006602:	f023 0307 	bic.w	r3, r3, #7
 8006606:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f000 f9b6 	bl	8006984 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006640:	f023 0303 	bic.w	r3, r3, #3
 8006644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	4313      	orrs	r3, r2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800665e:	f023 030c 	bic.w	r3, r3, #12
 8006662:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800666a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	4313      	orrs	r3, r2
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	011a      	lsls	r2, r3, #4
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	4313      	orrs	r3, r2
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800669c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80066a4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	4313      	orrs	r3, r2
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	080094ac 	.word	0x080094ac

08006710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d020      	beq.n	8006774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01b      	beq.n	8006774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0202 	mvn.w	r2, #2
 8006744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8f3 	bl	8006946 <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8e5 	bl	8006932 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8f6 	bl	800695a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01b      	beq.n	80067c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0204 	mvn.w	r2, #4
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8cd 	bl	8006946 <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8bf 	bl	8006932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8d0 	bl	800695a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d020      	beq.n	800680c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01b      	beq.n	800680c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0208 	mvn.w	r2, #8
 80067dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2204      	movs	r2, #4
 80067e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8a7 	bl	8006946 <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f899 	bl	8006932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f8aa 	bl	800695a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b00      	cmp	r3, #0
 8006814:	d020      	beq.n	8006858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0210 	mvn.w	r2, #16
 8006828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2208      	movs	r2, #8
 800682e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f881 	bl	8006946 <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f873 	bl	8006932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f884 	bl	800695a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00c      	beq.n	800687c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0201 	mvn.w	r2, #1
 8006874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f851 	bl	800691e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00c      	beq.n	80068aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80068a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fa73 	bl	8006d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00c      	beq.n	80068ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa6b 	bl	8006da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00c      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f83e 	bl	800696e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00c      	beq.n	8006916 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0220 	mvn.w	r2, #32
 800690e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa33 	bl	8006d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a46      	ldr	r2, [pc, #280]	@ (8006ab0 <TIM_Base_SetConfig+0x12c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a2:	d00f      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a43      	ldr	r2, [pc, #268]	@ (8006ab4 <TIM_Base_SetConfig+0x130>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a42      	ldr	r2, [pc, #264]	@ (8006ab8 <TIM_Base_SetConfig+0x134>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a41      	ldr	r2, [pc, #260]	@ (8006abc <TIM_Base_SetConfig+0x138>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a40      	ldr	r2, [pc, #256]	@ (8006ac0 <TIM_Base_SetConfig+0x13c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d108      	bne.n	80069d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a35      	ldr	r2, [pc, #212]	@ (8006ab0 <TIM_Base_SetConfig+0x12c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01f      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e4:	d01b      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a32      	ldr	r2, [pc, #200]	@ (8006ab4 <TIM_Base_SetConfig+0x130>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d017      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a31      	ldr	r2, [pc, #196]	@ (8006ab8 <TIM_Base_SetConfig+0x134>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a30      	ldr	r2, [pc, #192]	@ (8006abc <TIM_Base_SetConfig+0x138>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac0 <TIM_Base_SetConfig+0x13c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac4 <TIM_Base_SetConfig+0x140>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ac8 <TIM_Base_SetConfig+0x144>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_Base_SetConfig+0x9a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2c      	ldr	r2, [pc, #176]	@ (8006acc <TIM_Base_SetConfig+0x148>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a16      	ldr	r2, [pc, #88]	@ (8006ab0 <TIM_Base_SetConfig+0x12c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00f      	beq.n	8006a7c <TIM_Base_SetConfig+0xf8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a18      	ldr	r2, [pc, #96]	@ (8006ac0 <TIM_Base_SetConfig+0x13c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00b      	beq.n	8006a7c <TIM_Base_SetConfig+0xf8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a17      	ldr	r2, [pc, #92]	@ (8006ac4 <TIM_Base_SetConfig+0x140>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d007      	beq.n	8006a7c <TIM_Base_SetConfig+0xf8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a16      	ldr	r2, [pc, #88]	@ (8006ac8 <TIM_Base_SetConfig+0x144>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_Base_SetConfig+0xf8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a15      	ldr	r2, [pc, #84]	@ (8006acc <TIM_Base_SetConfig+0x148>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d103      	bne.n	8006a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d105      	bne.n	8006aa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	611a      	str	r2, [r3, #16]
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40012c00 	.word	0x40012c00
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40013400 	.word	0x40013400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a34      	ldr	r2, [pc, #208]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d02c      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aec:	d027      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a30      	ldr	r2, [pc, #192]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d022      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2e      	ldr	r2, [pc, #184]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01d      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2d      	ldr	r2, [pc, #180]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d018      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d013      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00e      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a28      	ldr	r2, [pc, #160]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a27      	ldr	r2, [pc, #156]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b34:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8006b38:	4825      	ldr	r0, [pc, #148]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b3a:	f7fa fc93 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d020      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d01c      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d018      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b30      	cmp	r3, #48	@ 0x30
 8006b5c:	d014      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d010      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b50      	cmp	r3, #80	@ 0x50
 8006b6c:	d00c      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b60      	cmp	r3, #96	@ 0x60
 8006b74:	d008      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b70      	cmp	r3, #112	@ 0x70
 8006b7c:	d004      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b7e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8006b82:	4813      	ldr	r0, [pc, #76]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b84:	f7fa fc6e 	bl	8001464 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2b80      	cmp	r3, #128	@ 0x80
 8006b8e:	d008      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006b98:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8006b9c:	480c      	ldr	r0, [pc, #48]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b9e:	f7fa fc61 	bl	8001464 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d113      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e0d3      	b.n	8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40000400 	.word	0x40000400
 8006bb8:	40000800 	.word	0x40000800
 8006bbc:	40000c00 	.word	0x40000c00
 8006bc0:	40001000 	.word	0x40001000
 8006bc4:	40001400 	.word	0x40001400
 8006bc8:	40013400 	.word	0x40013400
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	080094e4 	.word	0x080094e4
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a59      	ldr	r2, [pc, #356]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a58      	ldr	r2, [pc, #352]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d161      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d054      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c18:	d04f      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c22:	d04a      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c2c:	d045      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c36:	d040      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006c40:	d03b      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c4a:	d036      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c54:	d031      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8006c5e:	d02c      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c68:	d027      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8006c72:	d022      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006c7c:	d01d      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8006c86:	d018      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c90:	d013      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8006c9a:	d00e      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8006ca4:	d009      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8006cae:	d004      	beq.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cb0:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8006cb4:	482c      	ldr	r0, [pc, #176]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8006cb6:	f7fa fbd5 	bl	8001464 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d01d      	beq.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf8:	d018      	beq.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00e      	beq.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a18      	ldr	r2, [pc, #96]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d009      	beq.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a11      	ldr	r2, [pc, #68]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a14      	ldr	r2, [pc, #80]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d10c      	bne.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	080094e4 	.word	0x080094e4
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	40014000 	.word	0x40014000

08006d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e08b      	b.n	8006ee2 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d023      	beq.n	8006e1a <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a45      	ldr	r2, [pc, #276]	@ (8006eec <HAL_UART_Init+0x134>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d041      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a43      	ldr	r2, [pc, #268]	@ (8006ef0 <HAL_UART_Init+0x138>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d03c      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a42      	ldr	r2, [pc, #264]	@ (8006ef4 <HAL_UART_Init+0x13c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d037      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a40      	ldr	r2, [pc, #256]	@ (8006ef8 <HAL_UART_Init+0x140>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d032      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8006efc <HAL_UART_Init+0x144>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d02d      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3d      	ldr	r2, [pc, #244]	@ (8006f00 <HAL_UART_Init+0x148>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d028      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e0e:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8006e12:	483c      	ldr	r0, [pc, #240]	@ (8006f04 <HAL_UART_Init+0x14c>)
 8006e14:	f7fa fb26 	bl	8001464 <assert_failed>
 8006e18:	e022      	b.n	8006e60 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a33      	ldr	r2, [pc, #204]	@ (8006eec <HAL_UART_Init+0x134>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d01d      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a31      	ldr	r2, [pc, #196]	@ (8006ef0 <HAL_UART_Init+0x138>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a30      	ldr	r2, [pc, #192]	@ (8006ef4 <HAL_UART_Init+0x13c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef8 <HAL_UART_Init+0x140>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2d      	ldr	r2, [pc, #180]	@ (8006efc <HAL_UART_Init+0x144>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2b      	ldr	r2, [pc, #172]	@ (8006f00 <HAL_UART_Init+0x148>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_UART_Init+0xa8>
 8006e56:	f240 1157 	movw	r1, #343	@ 0x157
 8006e5a:	482a      	ldr	r0, [pc, #168]	@ (8006f04 <HAL_UART_Init+0x14c>)
 8006e5c:	f7fa fb02 	bl	8001464 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa ffbd 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2224      	movs	r2, #36	@ 0x24
 8006e7a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc1f 	bl	80076d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8be 	bl	800701c <UART_SetConfig>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e01b      	b.n	8006ee2 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ec8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fd5c 	bl	8007998 <UART_CheckIdleState>
 8006ee0:	4603      	mov	r3, r0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40013800 	.word	0x40013800
 8006ef0:	40004400 	.word	0x40004400
 8006ef4:	40004800 	.word	0x40004800
 8006ef8:	40004c00 	.word	0x40004c00
 8006efc:	40005000 	.word	0x40005000
 8006f00:	40008000 	.word	0x40008000
 8006f04:	08009520 	.word	0x08009520

08006f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	@ 0x28
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d177      	bne.n	8007010 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_UART_Transmit+0x24>
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e070      	b.n	8007012 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2221      	movs	r2, #33	@ 0x21
 8006f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3e:	f7fb f847 	bl	8001fd0 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5c:	d108      	bne.n	8006f70 <HAL_UART_Transmit+0x68>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	e003      	b.n	8006f78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f78:	e02f      	b.n	8006fda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2180      	movs	r1, #128	@ 0x80
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fdaf 	bl	8007ae8 <UART_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e03b      	b.n	8007012 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fac:	b292      	uxth	r2, r2
 8006fae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e007      	b.n	8006fc8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1c9      	bne.n	8006f7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2140      	movs	r1, #64	@ 0x40
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fd79 	bl	8007ae8 <UART_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e005      	b.n	8007012 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	e000      	b.n	8007012 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800701c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007020:	b08a      	sub	sp, #40	@ 0x28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4a9e      	ldr	r2, [pc, #632]	@ (80072ac <UART_SetConfig+0x290>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d904      	bls.n	8007040 <UART_SetConfig+0x24>
 8007036:	f640 4158 	movw	r1, #3160	@ 0xc58
 800703a:	489d      	ldr	r0, [pc, #628]	@ (80072b0 <UART_SetConfig+0x294>)
 800703c:	f7fa fa12 	bl	8001464 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007048:	d00d      	beq.n	8007066 <UART_SetConfig+0x4a>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <UART_SetConfig+0x4a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800705a:	d004      	beq.n	8007066 <UART_SetConfig+0x4a>
 800705c:	f640 4159 	movw	r1, #3161	@ 0xc59
 8007060:	4893      	ldr	r0, [pc, #588]	@ (80072b0 <UART_SetConfig+0x294>)
 8007062:	f7fa f9ff 	bl	8001464 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a92      	ldr	r2, [pc, #584]	@ (80072b4 <UART_SetConfig+0x298>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10e      	bne.n	800708e <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d030      	beq.n	80070da <UART_SetConfig+0xbe>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007080:	d02b      	beq.n	80070da <UART_SetConfig+0xbe>
 8007082:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8007086:	488a      	ldr	r0, [pc, #552]	@ (80072b0 <UART_SetConfig+0x294>)
 8007088:	f7fa f9ec 	bl	8001464 <assert_failed>
 800708c:	e025      	b.n	80070da <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d012      	beq.n	80070be <UART_SetConfig+0xa2>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00e      	beq.n	80070be <UART_SetConfig+0xa2>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070a8:	d009      	beq.n	80070be <UART_SetConfig+0xa2>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b2:	d004      	beq.n	80070be <UART_SetConfig+0xa2>
 80070b4:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 80070b8:	487d      	ldr	r0, [pc, #500]	@ (80072b0 <UART_SetConfig+0x294>)
 80070ba:	f7fa f9d3 	bl	8001464 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <UART_SetConfig+0xbe>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ce:	d004      	beq.n	80070da <UART_SetConfig+0xbe>
 80070d0:	f640 4161 	movw	r1, #3169	@ 0xc61
 80070d4:	4876      	ldr	r0, [pc, #472]	@ (80072b0 <UART_SetConfig+0x294>)
 80070d6:	f7fa f9c5 	bl	8001464 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <UART_SetConfig+0xe4>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ea:	d009      	beq.n	8007100 <UART_SetConfig+0xe4>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070f4:	d004      	beq.n	8007100 <UART_SetConfig+0xe4>
 80070f6:	f640 4164 	movw	r1, #3172	@ 0xc64
 80070fa:	486d      	ldr	r0, [pc, #436]	@ (80072b0 <UART_SetConfig+0x294>)
 80070fc:	f7fa f9b2 	bl	8001464 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f023 030c 	bic.w	r3, r3, #12
 8007108:	2b00      	cmp	r3, #0
 800710a:	d103      	bne.n	8007114 <UART_SetConfig+0xf8>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <UART_SetConfig+0x102>
 8007114:	f640 4165 	movw	r1, #3173	@ 0xc65
 8007118:	4865      	ldr	r0, [pc, #404]	@ (80072b0 <UART_SetConfig+0x294>)
 800711a:	f7fa f9a3 	bl	8001464 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d013      	beq.n	800714e <UART_SetConfig+0x132>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800712e:	d00e      	beq.n	800714e <UART_SetConfig+0x132>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007138:	d009      	beq.n	800714e <UART_SetConfig+0x132>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007142:	d004      	beq.n	800714e <UART_SetConfig+0x132>
 8007144:	f640 4166 	movw	r1, #3174	@ 0xc66
 8007148:	4859      	ldr	r0, [pc, #356]	@ (80072b0 <UART_SetConfig+0x294>)
 800714a:	f7fa f98b 	bl	8001464 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <UART_SetConfig+0x14e>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800715e:	d004      	beq.n	800716a <UART_SetConfig+0x14e>
 8007160:	f640 4167 	movw	r1, #3175	@ 0xc67
 8007164:	4852      	ldr	r0, [pc, #328]	@ (80072b0 <UART_SetConfig+0x294>)
 8007166:	f7fa f97d 	bl	8001464 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	431a      	orrs	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	431a      	orrs	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	4313      	orrs	r3, r2
 8007180:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b4b      	ldr	r3, [pc, #300]	@ (80072b8 <UART_SetConfig+0x29c>)
 800718a:	4013      	ands	r3, r2
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007192:	430b      	orrs	r3, r1
 8007194:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a3f      	ldr	r2, [pc, #252]	@ (80072b4 <UART_SetConfig+0x298>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c2:	4313      	orrs	r3, r2
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d6:	430a      	orrs	r2, r1
 80071d8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a37      	ldr	r2, [pc, #220]	@ (80072bc <UART_SetConfig+0x2a0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d125      	bne.n	8007230 <UART_SetConfig+0x214>
 80071e4:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <UART_SetConfig+0x2a4>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d81a      	bhi.n	8007228 <UART_SetConfig+0x20c>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <UART_SetConfig+0x1dc>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007209 	.word	0x08007209
 80071fc:	08007219 	.word	0x08007219
 8007200:	08007211 	.word	0x08007211
 8007204:	08007221 	.word	0x08007221
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720e:	e114      	b.n	800743a <UART_SetConfig+0x41e>
 8007210:	2302      	movs	r3, #2
 8007212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007216:	e110      	b.n	800743a <UART_SetConfig+0x41e>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800721e:	e10c      	b.n	800743a <UART_SetConfig+0x41e>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007226:	e108      	b.n	800743a <UART_SetConfig+0x41e>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800722e:	e104      	b.n	800743a <UART_SetConfig+0x41e>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a23      	ldr	r2, [pc, #140]	@ (80072c4 <UART_SetConfig+0x2a8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d146      	bne.n	80072c8 <UART_SetConfig+0x2ac>
 800723a:	4b21      	ldr	r3, [pc, #132]	@ (80072c0 <UART_SetConfig+0x2a4>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007240:	f003 030c 	and.w	r3, r3, #12
 8007244:	2b0c      	cmp	r3, #12
 8007246:	d82d      	bhi.n	80072a4 <UART_SetConfig+0x288>
 8007248:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <UART_SetConfig+0x234>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007285 	.word	0x08007285
 8007254:	080072a5 	.word	0x080072a5
 8007258:	080072a5 	.word	0x080072a5
 800725c:	080072a5 	.word	0x080072a5
 8007260:	08007295 	.word	0x08007295
 8007264:	080072a5 	.word	0x080072a5
 8007268:	080072a5 	.word	0x080072a5
 800726c:	080072a5 	.word	0x080072a5
 8007270:	0800728d 	.word	0x0800728d
 8007274:	080072a5 	.word	0x080072a5
 8007278:	080072a5 	.word	0x080072a5
 800727c:	080072a5 	.word	0x080072a5
 8007280:	0800729d 	.word	0x0800729d
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e0d6      	b.n	800743a <UART_SetConfig+0x41e>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007292:	e0d2      	b.n	800743a <UART_SetConfig+0x41e>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729a:	e0ce      	b.n	800743a <UART_SetConfig+0x41e>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a2:	e0ca      	b.n	800743a <UART_SetConfig+0x41e>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e0c6      	b.n	800743a <UART_SetConfig+0x41e>
 80072ac:	00989680 	.word	0x00989680
 80072b0:	08009520 	.word	0x08009520
 80072b4:	40008000 	.word	0x40008000
 80072b8:	efff69f3 	.word	0xefff69f3
 80072bc:	40013800 	.word	0x40013800
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40004400 	.word	0x40004400
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4aae      	ldr	r2, [pc, #696]	@ (8007588 <UART_SetConfig+0x56c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d125      	bne.n	800731e <UART_SetConfig+0x302>
 80072d2:	4bae      	ldr	r3, [pc, #696]	@ (800758c <UART_SetConfig+0x570>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072dc:	2b30      	cmp	r3, #48	@ 0x30
 80072de:	d016      	beq.n	800730e <UART_SetConfig+0x2f2>
 80072e0:	2b30      	cmp	r3, #48	@ 0x30
 80072e2:	d818      	bhi.n	8007316 <UART_SetConfig+0x2fa>
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d00a      	beq.n	80072fe <UART_SetConfig+0x2e2>
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d814      	bhi.n	8007316 <UART_SetConfig+0x2fa>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <UART_SetConfig+0x2da>
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	d008      	beq.n	8007306 <UART_SetConfig+0x2ea>
 80072f4:	e00f      	b.n	8007316 <UART_SetConfig+0x2fa>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fc:	e09d      	b.n	800743a <UART_SetConfig+0x41e>
 80072fe:	2302      	movs	r3, #2
 8007300:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007304:	e099      	b.n	800743a <UART_SetConfig+0x41e>
 8007306:	2304      	movs	r3, #4
 8007308:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800730c:	e095      	b.n	800743a <UART_SetConfig+0x41e>
 800730e:	2308      	movs	r3, #8
 8007310:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007314:	e091      	b.n	800743a <UART_SetConfig+0x41e>
 8007316:	2310      	movs	r3, #16
 8007318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800731c:	e08d      	b.n	800743a <UART_SetConfig+0x41e>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a9b      	ldr	r2, [pc, #620]	@ (8007590 <UART_SetConfig+0x574>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d125      	bne.n	8007374 <UART_SetConfig+0x358>
 8007328:	4b98      	ldr	r3, [pc, #608]	@ (800758c <UART_SetConfig+0x570>)
 800732a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007332:	2bc0      	cmp	r3, #192	@ 0xc0
 8007334:	d016      	beq.n	8007364 <UART_SetConfig+0x348>
 8007336:	2bc0      	cmp	r3, #192	@ 0xc0
 8007338:	d818      	bhi.n	800736c <UART_SetConfig+0x350>
 800733a:	2b80      	cmp	r3, #128	@ 0x80
 800733c:	d00a      	beq.n	8007354 <UART_SetConfig+0x338>
 800733e:	2b80      	cmp	r3, #128	@ 0x80
 8007340:	d814      	bhi.n	800736c <UART_SetConfig+0x350>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <UART_SetConfig+0x330>
 8007346:	2b40      	cmp	r3, #64	@ 0x40
 8007348:	d008      	beq.n	800735c <UART_SetConfig+0x340>
 800734a:	e00f      	b.n	800736c <UART_SetConfig+0x350>
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007352:	e072      	b.n	800743a <UART_SetConfig+0x41e>
 8007354:	2302      	movs	r3, #2
 8007356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735a:	e06e      	b.n	800743a <UART_SetConfig+0x41e>
 800735c:	2304      	movs	r3, #4
 800735e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007362:	e06a      	b.n	800743a <UART_SetConfig+0x41e>
 8007364:	2308      	movs	r3, #8
 8007366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800736a:	e066      	b.n	800743a <UART_SetConfig+0x41e>
 800736c:	2310      	movs	r3, #16
 800736e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007372:	e062      	b.n	800743a <UART_SetConfig+0x41e>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a86      	ldr	r2, [pc, #536]	@ (8007594 <UART_SetConfig+0x578>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d12a      	bne.n	80073d4 <UART_SetConfig+0x3b8>
 800737e:	4b83      	ldr	r3, [pc, #524]	@ (800758c <UART_SetConfig+0x570>)
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007384:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800738c:	d01a      	beq.n	80073c4 <UART_SetConfig+0x3a8>
 800738e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007392:	d81b      	bhi.n	80073cc <UART_SetConfig+0x3b0>
 8007394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007398:	d00c      	beq.n	80073b4 <UART_SetConfig+0x398>
 800739a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800739e:	d815      	bhi.n	80073cc <UART_SetConfig+0x3b0>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <UART_SetConfig+0x390>
 80073a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073a8:	d008      	beq.n	80073bc <UART_SetConfig+0x3a0>
 80073aa:	e00f      	b.n	80073cc <UART_SetConfig+0x3b0>
 80073ac:	2300      	movs	r3, #0
 80073ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b2:	e042      	b.n	800743a <UART_SetConfig+0x41e>
 80073b4:	2302      	movs	r3, #2
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ba:	e03e      	b.n	800743a <UART_SetConfig+0x41e>
 80073bc:	2304      	movs	r3, #4
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c2:	e03a      	b.n	800743a <UART_SetConfig+0x41e>
 80073c4:	2308      	movs	r3, #8
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ca:	e036      	b.n	800743a <UART_SetConfig+0x41e>
 80073cc:	2310      	movs	r3, #16
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073d2:	e032      	b.n	800743a <UART_SetConfig+0x41e>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a6f      	ldr	r2, [pc, #444]	@ (8007598 <UART_SetConfig+0x57c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d12a      	bne.n	8007434 <UART_SetConfig+0x418>
 80073de:	4b6b      	ldr	r3, [pc, #428]	@ (800758c <UART_SetConfig+0x570>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073ec:	d01a      	beq.n	8007424 <UART_SetConfig+0x408>
 80073ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073f2:	d81b      	bhi.n	800742c <UART_SetConfig+0x410>
 80073f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073f8:	d00c      	beq.n	8007414 <UART_SetConfig+0x3f8>
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073fe:	d815      	bhi.n	800742c <UART_SetConfig+0x410>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <UART_SetConfig+0x3f0>
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007408:	d008      	beq.n	800741c <UART_SetConfig+0x400>
 800740a:	e00f      	b.n	800742c <UART_SetConfig+0x410>
 800740c:	2300      	movs	r3, #0
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007412:	e012      	b.n	800743a <UART_SetConfig+0x41e>
 8007414:	2302      	movs	r3, #2
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741a:	e00e      	b.n	800743a <UART_SetConfig+0x41e>
 800741c:	2304      	movs	r3, #4
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007422:	e00a      	b.n	800743a <UART_SetConfig+0x41e>
 8007424:	2308      	movs	r3, #8
 8007426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742a:	e006      	b.n	800743a <UART_SetConfig+0x41e>
 800742c:	2310      	movs	r3, #16
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007432:	e002      	b.n	800743a <UART_SetConfig+0x41e>
 8007434:	2310      	movs	r3, #16
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a56      	ldr	r2, [pc, #344]	@ (8007598 <UART_SetConfig+0x57c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d17a      	bne.n	800753a <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007444:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007448:	2b08      	cmp	r3, #8
 800744a:	d824      	bhi.n	8007496 <UART_SetConfig+0x47a>
 800744c:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <UART_SetConfig+0x438>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	08007479 	.word	0x08007479
 8007458:	08007497 	.word	0x08007497
 800745c:	08007481 	.word	0x08007481
 8007460:	08007497 	.word	0x08007497
 8007464:	08007487 	.word	0x08007487
 8007468:	08007497 	.word	0x08007497
 800746c:	08007497 	.word	0x08007497
 8007470:	08007497 	.word	0x08007497
 8007474:	0800748f 	.word	0x0800748f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fc fcc2 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 800747c:	61f8      	str	r0, [r7, #28]
        break;
 800747e:	e010      	b.n	80074a2 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b46      	ldr	r3, [pc, #280]	@ (800759c <UART_SetConfig+0x580>)
 8007482:	61fb      	str	r3, [r7, #28]
        break;
 8007484:	e00d      	b.n	80074a2 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fc fc23 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 800748a:	61f8      	str	r0, [r7, #28]
        break;
 800748c:	e009      	b.n	80074a2 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007492:	61fb      	str	r3, [r7, #28]
        break;
 8007494:	e005      	b.n	80074a2 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8107 	beq.w	80076b8 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d305      	bcc.n	80074c6 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d903      	bls.n	80074ce <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074cc:	e0f4      	b.n	80076b8 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2200      	movs	r2, #0
 80074d2:	461c      	mov	r4, r3
 80074d4:	4615      	mov	r5, r2
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	022b      	lsls	r3, r5, #8
 80074e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80074e4:	0222      	lsls	r2, r4, #8
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	6849      	ldr	r1, [r1, #4]
 80074ea:	0849      	lsrs	r1, r1, #1
 80074ec:	2000      	movs	r0, #0
 80074ee:	4688      	mov	r8, r1
 80074f0:	4681      	mov	r9, r0
 80074f2:	eb12 0a08 	adds.w	sl, r2, r8
 80074f6:	eb43 0b09 	adc.w	fp, r3, r9
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	603b      	str	r3, [r7, #0]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007508:	4650      	mov	r0, sl
 800750a:	4659      	mov	r1, fp
 800750c:	f7f8 feb0 	bl	8000270 <__aeabi_uldivmod>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4613      	mov	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800751e:	d308      	bcc.n	8007532 <UART_SetConfig+0x516>
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007526:	d204      	bcs.n	8007532 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	60da      	str	r2, [r3, #12]
 8007530:	e0c2      	b.n	80076b8 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007538:	e0be      	b.n	80076b8 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007542:	d16a      	bne.n	800761a <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8007544:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007548:	2b08      	cmp	r3, #8
 800754a:	d834      	bhi.n	80075b6 <UART_SetConfig+0x59a>
 800754c:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <UART_SetConfig+0x538>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	080075a1 	.word	0x080075a1
 8007560:	080075b7 	.word	0x080075b7
 8007564:	080075a7 	.word	0x080075a7
 8007568:	080075b7 	.word	0x080075b7
 800756c:	080075b7 	.word	0x080075b7
 8007570:	080075b7 	.word	0x080075b7
 8007574:	080075af 	.word	0x080075af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fc fc42 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 800757c:	61f8      	str	r0, [r7, #28]
        break;
 800757e:	e020      	b.n	80075c2 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fc fc54 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8007584:	61f8      	str	r0, [r7, #28]
        break;
 8007586:	e01c      	b.n	80075c2 <UART_SetConfig+0x5a6>
 8007588:	40004800 	.word	0x40004800
 800758c:	40021000 	.word	0x40021000
 8007590:	40004c00 	.word	0x40004c00
 8007594:	40005000 	.word	0x40005000
 8007598:	40008000 	.word	0x40008000
 800759c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a0:	4b4c      	ldr	r3, [pc, #304]	@ (80076d4 <UART_SetConfig+0x6b8>)
 80075a2:	61fb      	str	r3, [r7, #28]
        break;
 80075a4:	e00d      	b.n	80075c2 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fc fb93 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 80075aa:	61f8      	str	r0, [r7, #28]
        break;
 80075ac:	e009      	b.n	80075c2 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b2:	61fb      	str	r3, [r7, #28]
        break;
 80075b4:	e005      	b.n	80075c2 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80075c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d077      	beq.n	80076b8 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	005a      	lsls	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	085b      	lsrs	r3, r3, #1
 80075d2:	441a      	add	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b0f      	cmp	r3, #15
 80075e2:	d916      	bls.n	8007612 <UART_SetConfig+0x5f6>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ea:	d212      	bcs.n	8007612 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f023 030f 	bic.w	r3, r3, #15
 80075f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	b29a      	uxth	r2, r3
 8007602:	8afb      	ldrh	r3, [r7, #22]
 8007604:	4313      	orrs	r3, r2
 8007606:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	8afa      	ldrh	r2, [r7, #22]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e052      	b.n	80076b8 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007618:	e04e      	b.n	80076b8 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800761a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800761e:	2b08      	cmp	r3, #8
 8007620:	d827      	bhi.n	8007672 <UART_SetConfig+0x656>
 8007622:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <UART_SetConfig+0x60c>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	0800764d 	.word	0x0800764d
 800762c:	08007655 	.word	0x08007655
 8007630:	0800765d 	.word	0x0800765d
 8007634:	08007673 	.word	0x08007673
 8007638:	08007663 	.word	0x08007663
 800763c:	08007673 	.word	0x08007673
 8007640:	08007673 	.word	0x08007673
 8007644:	08007673 	.word	0x08007673
 8007648:	0800766b 	.word	0x0800766b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fc fbd8 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8007650:	61f8      	str	r0, [r7, #28]
        break;
 8007652:	e014      	b.n	800767e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007654:	f7fc fbea 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8007658:	61f8      	str	r0, [r7, #28]
        break;
 800765a:	e010      	b.n	800767e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800765c:	4b1d      	ldr	r3, [pc, #116]	@ (80076d4 <UART_SetConfig+0x6b8>)
 800765e:	61fb      	str	r3, [r7, #28]
        break;
 8007660:	e00d      	b.n	800767e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007662:	f7fc fb35 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8007666:	61f8      	str	r0, [r7, #28]
        break;
 8007668:	e009      	b.n	800767e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800766e:	61fb      	str	r3, [r7, #28]
        break;
 8007670:	e005      	b.n	800767e <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800767c:	bf00      	nop
    }

    if (pclk != 0U)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	085a      	lsrs	r2, r3, #1
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	441a      	add	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	fbb2 f3f3 	udiv	r3, r2, r3
 8007696:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b0f      	cmp	r3, #15
 800769c:	d909      	bls.n	80076b2 <UART_SetConfig+0x696>
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a4:	d205      	bcs.n	80076b2 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e002      	b.n	80076b8 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80076c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	@ 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076d2:	bf00      	nop
 80076d4:	00f42400 	.word	0x00f42400

080076d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	2bff      	cmp	r3, #255	@ 0xff
 80076e6:	d904      	bls.n	80076f2 <UART_AdvFeatureConfig+0x1a>
 80076e8:	f640 514d 	movw	r1, #3405	@ 0xd4d
 80076ec:	4891      	ldr	r0, [pc, #580]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 80076ee:	f7f9 feb9 	bl	8001464 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d018      	beq.n	8007730 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <UART_AdvFeatureConfig+0x42>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800770e:	d004      	beq.n	800771a <UART_AdvFeatureConfig+0x42>
 8007710:	f640 5152 	movw	r1, #3410	@ 0xd52
 8007714:	4887      	ldr	r0, [pc, #540]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 8007716:	f7f9 fea5 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d018      	beq.n	800776e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <UART_AdvFeatureConfig+0x80>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800774c:	d004      	beq.n	8007758 <UART_AdvFeatureConfig+0x80>
 800774e:	f640 5159 	movw	r1, #3417	@ 0xd59
 8007752:	4878      	ldr	r0, [pc, #480]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 8007754:	f7f9 fe86 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d018      	beq.n	80077ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <UART_AdvFeatureConfig+0xbe>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778a:	d004      	beq.n	8007796 <UART_AdvFeatureConfig+0xbe>
 800778c:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8007790:	4868      	ldr	r0, [pc, #416]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 8007792:	f7f9 fe67 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d018      	beq.n	80077ea <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <UART_AdvFeatureConfig+0xfc>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077c8:	d004      	beq.n	80077d4 <UART_AdvFeatureConfig+0xfc>
 80077ca:	f640 5167 	movw	r1, #3431	@ 0xd67
 80077ce:	4859      	ldr	r0, [pc, #356]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 80077d0:	f7f9 fe48 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <UART_AdvFeatureConfig+0x13a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007806:	d004      	beq.n	8007812 <UART_AdvFeatureConfig+0x13a>
 8007808:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800780c:	4849      	ldr	r0, [pc, #292]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 800780e:	f7f9 fe29 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782c:	f003 0320 	and.w	r3, r3, #32
 8007830:	2b00      	cmp	r3, #0
 8007832:	d018      	beq.n	8007866 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d009      	beq.n	8007850 <UART_AdvFeatureConfig+0x178>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007844:	d004      	beq.n	8007850 <UART_AdvFeatureConfig+0x178>
 8007846:	f640 5175 	movw	r1, #3445	@ 0xd75
 800784a:	483a      	ldr	r0, [pc, #232]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 800784c:	f7f9 fe0a 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d06c      	beq.n	800794c <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a30      	ldr	r2, [pc, #192]	@ (8007938 <UART_AdvFeatureConfig+0x260>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d018      	beq.n	80078ae <UART_AdvFeatureConfig+0x1d6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a2e      	ldr	r2, [pc, #184]	@ (800793c <UART_AdvFeatureConfig+0x264>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <UART_AdvFeatureConfig+0x1d6>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a2d      	ldr	r2, [pc, #180]	@ (8007940 <UART_AdvFeatureConfig+0x268>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <UART_AdvFeatureConfig+0x1d6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a2b      	ldr	r2, [pc, #172]	@ (8007944 <UART_AdvFeatureConfig+0x26c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <UART_AdvFeatureConfig+0x1d6>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a2a      	ldr	r2, [pc, #168]	@ (8007948 <UART_AdvFeatureConfig+0x270>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <UART_AdvFeatureConfig+0x1d6>
 80078a4:	f640 517c 	movw	r1, #3452	@ 0xd7c
 80078a8:	4822      	ldr	r0, [pc, #136]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 80078aa:	f7f9 fddb 	bl	8001464 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <UART_AdvFeatureConfig+0x1f2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078be:	d004      	beq.n	80078ca <UART_AdvFeatureConfig+0x1f2>
 80078c0:	f640 517d 	movw	r1, #3453	@ 0xd7d
 80078c4:	481b      	ldr	r0, [pc, #108]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 80078c6:	f7f9 fdcd 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e8:	d130      	bne.n	800794c <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d013      	beq.n	800791a <UART_AdvFeatureConfig+0x242>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078fa:	d00e      	beq.n	800791a <UART_AdvFeatureConfig+0x242>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007904:	d009      	beq.n	800791a <UART_AdvFeatureConfig+0x242>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800790e:	d004      	beq.n	800791a <UART_AdvFeatureConfig+0x242>
 8007910:	f640 5182 	movw	r1, #3458	@ 0xd82
 8007914:	4807      	ldr	r0, [pc, #28]	@ (8007934 <UART_AdvFeatureConfig+0x25c>)
 8007916:	f7f9 fda5 	bl	8001464 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	e00c      	b.n	800794c <UART_AdvFeatureConfig+0x274>
 8007932:	bf00      	nop
 8007934:	08009520 	.word	0x08009520
 8007938:	40013800 	.word	0x40013800
 800793c:	40004400 	.word	0x40004400
 8007940:	40004800 	.word	0x40004800
 8007944:	40004c00 	.word	0x40004c00
 8007948:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d018      	beq.n	800798a <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <UART_AdvFeatureConfig+0x29c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007964:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007968:	d004      	beq.n	8007974 <UART_AdvFeatureConfig+0x29c>
 800796a:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800796e:	4809      	ldr	r0, [pc, #36]	@ (8007994 <UART_AdvFeatureConfig+0x2bc>)
 8007970:	f7f9 fd78 	bl	8001464 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
  }
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	08009520 	.word	0x08009520

08007998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b098      	sub	sp, #96	@ 0x60
 800799c:	af02      	add	r7, sp, #8
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a8:	f7fa fb12 	bl	8001fd0 <HAL_GetTick>
 80079ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d12e      	bne.n	8007a1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c4:	2200      	movs	r2, #0
 80079c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f88c 	bl	8007ae8 <UART_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d021      	beq.n	8007a1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e062      	b.n	8007ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d149      	bne.n	8007abc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f856 	bl	8007ae8 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d03c      	beq.n	8007abc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0301 	bic.w	r3, r3, #1
 8007a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a94:	61fa      	str	r2, [r7, #28]
 8007a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	69b9      	ldr	r1, [r7, #24]
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e5      	bne.n	8007a74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e011      	b.n	8007ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3758      	adds	r7, #88	@ 0x58
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af8:	e04f      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d04b      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b02:	f7fa fa65 	bl	8001fd0 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d302      	bcc.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e04e      	b.n	8007bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d037      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b80      	cmp	r3, #128	@ 0x80
 8007b2e:	d034      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b40      	cmp	r3, #64	@ 0x40
 8007b34:	d031      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d110      	bne.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2208      	movs	r2, #8
 8007b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f838 	bl	8007bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2208      	movs	r2, #8
 8007b56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e029      	b.n	8007bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b74:	d111      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f81e 	bl	8007bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e00f      	b.n	8007bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d0a0      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b095      	sub	sp, #84	@ 0x54
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e6      	bne.n	8007bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3308      	adds	r3, #8
 8007c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e5      	bne.n	8007bfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d118      	bne.n	8007c6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f023 0310 	bic.w	r3, r3, #16
 8007c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c56:	61bb      	str	r3, [r7, #24]
 8007c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6979      	ldr	r1, [r7, #20]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	613b      	str	r3, [r7, #16]
   return(result);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e6      	bne.n	8007c38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c7e:	bf00      	nop
 8007c80:	3754      	adds	r7, #84	@ 0x54
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <calloc>:
 8007c8c:	4b02      	ldr	r3, [pc, #8]	@ (8007c98 <calloc+0xc>)
 8007c8e:	460a      	mov	r2, r1
 8007c90:	4601      	mov	r1, r0
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	f000 b802 	b.w	8007c9c <_calloc_r>
 8007c98:	20000018 	.word	0x20000018

08007c9c <_calloc_r>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8007ca2:	b934      	cbnz	r4, 8007cb2 <_calloc_r+0x16>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f000 f83f 	bl	8007d28 <_malloc_r>
 8007caa:	4606      	mov	r6, r0
 8007cac:	b928      	cbnz	r0, 8007cba <_calloc_r+0x1e>
 8007cae:	4630      	mov	r0, r6
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	220c      	movs	r2, #12
 8007cb4:	6002      	str	r2, [r0, #0]
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	e7f9      	b.n	8007cae <_calloc_r+0x12>
 8007cba:	462a      	mov	r2, r5
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	f000 fbb9 	bl	8008434 <memset>
 8007cc2:	e7f4      	b.n	8007cae <_calloc_r+0x12>

08007cc4 <malloc>:
 8007cc4:	4b02      	ldr	r3, [pc, #8]	@ (8007cd0 <malloc+0xc>)
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f000 b82d 	b.w	8007d28 <_malloc_r>
 8007cce:	bf00      	nop
 8007cd0:	20000018 	.word	0x20000018

08007cd4 <free>:
 8007cd4:	4b02      	ldr	r3, [pc, #8]	@ (8007ce0 <free+0xc>)
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	f000 bc45 	b.w	8008568 <_free_r>
 8007cde:	bf00      	nop
 8007ce0:	20000018 	.word	0x20000018

08007ce4 <sbrk_aligned>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8007d24 <sbrk_aligned+0x40>)
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6831      	ldr	r1, [r6, #0]
 8007cec:	4605      	mov	r5, r0
 8007cee:	b911      	cbnz	r1, 8007cf6 <sbrk_aligned+0x12>
 8007cf0:	f000 fbdc 	bl	80084ac <_sbrk_r>
 8007cf4:	6030      	str	r0, [r6, #0]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 fbd7 	bl	80084ac <_sbrk_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d103      	bne.n	8007d0a <sbrk_aligned+0x26>
 8007d02:	f04f 34ff 	mov.w	r4, #4294967295
 8007d06:	4620      	mov	r0, r4
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
 8007d0a:	1cc4      	adds	r4, r0, #3
 8007d0c:	f024 0403 	bic.w	r4, r4, #3
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d0f8      	beq.n	8007d06 <sbrk_aligned+0x22>
 8007d14:	1a21      	subs	r1, r4, r0
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 fbc8 	bl	80084ac <_sbrk_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d1f2      	bne.n	8007d06 <sbrk_aligned+0x22>
 8007d20:	e7ef      	b.n	8007d02 <sbrk_aligned+0x1e>
 8007d22:	bf00      	nop
 8007d24:	2000051c 	.word	0x2000051c

08007d28 <_malloc_r>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	1ccd      	adds	r5, r1, #3
 8007d2e:	f025 0503 	bic.w	r5, r5, #3
 8007d32:	3508      	adds	r5, #8
 8007d34:	2d0c      	cmp	r5, #12
 8007d36:	bf38      	it	cc
 8007d38:	250c      	movcc	r5, #12
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	db01      	blt.n	8007d44 <_malloc_r+0x1c>
 8007d40:	42a9      	cmp	r1, r5
 8007d42:	d904      	bls.n	8007d4e <_malloc_r+0x26>
 8007d44:	230c      	movs	r3, #12
 8007d46:	6033      	str	r3, [r6, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e24 <_malloc_r+0xfc>
 8007d52:	f000 f869 	bl	8007e28 <__malloc_lock>
 8007d56:	f8d8 3000 	ldr.w	r3, [r8]
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	bb44      	cbnz	r4, 8007db0 <_malloc_r+0x88>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ffbf 	bl	8007ce4 <sbrk_aligned>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	4604      	mov	r4, r0
 8007d6a:	d158      	bne.n	8007e1e <_malloc_r+0xf6>
 8007d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d70:	4627      	mov	r7, r4
 8007d72:	2f00      	cmp	r7, #0
 8007d74:	d143      	bne.n	8007dfe <_malloc_r+0xd6>
 8007d76:	2c00      	cmp	r4, #0
 8007d78:	d04b      	beq.n	8007e12 <_malloc_r+0xea>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4630      	mov	r0, r6
 8007d80:	eb04 0903 	add.w	r9, r4, r3
 8007d84:	f000 fb92 	bl	80084ac <_sbrk_r>
 8007d88:	4581      	cmp	r9, r0
 8007d8a:	d142      	bne.n	8007e12 <_malloc_r+0xea>
 8007d8c:	6821      	ldr	r1, [r4, #0]
 8007d8e:	1a6d      	subs	r5, r5, r1
 8007d90:	4629      	mov	r1, r5
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7ff ffa6 	bl	8007ce4 <sbrk_aligned>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d03a      	beq.n	8007e12 <_malloc_r+0xea>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	442b      	add	r3, r5
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	f8d8 3000 	ldr.w	r3, [r8]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	bb62      	cbnz	r2, 8007e04 <_malloc_r+0xdc>
 8007daa:	f8c8 7000 	str.w	r7, [r8]
 8007dae:	e00f      	b.n	8007dd0 <_malloc_r+0xa8>
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	1b52      	subs	r2, r2, r5
 8007db4:	d420      	bmi.n	8007df8 <_malloc_r+0xd0>
 8007db6:	2a0b      	cmp	r2, #11
 8007db8:	d917      	bls.n	8007dea <_malloc_r+0xc2>
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	6025      	str	r5, [r4, #0]
 8007dc0:	bf18      	it	ne
 8007dc2:	6059      	strne	r1, [r3, #4]
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	bf08      	it	eq
 8007dc8:	f8c8 1000 	streq.w	r1, [r8]
 8007dcc:	5162      	str	r2, [r4, r5]
 8007dce:	604b      	str	r3, [r1, #4]
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f82f 	bl	8007e34 <__malloc_unlock>
 8007dd6:	f104 000b 	add.w	r0, r4, #11
 8007dda:	1d23      	adds	r3, r4, #4
 8007ddc:	f020 0007 	bic.w	r0, r0, #7
 8007de0:	1ac2      	subs	r2, r0, r3
 8007de2:	bf1c      	itt	ne
 8007de4:	1a1b      	subne	r3, r3, r0
 8007de6:	50a3      	strne	r3, [r4, r2]
 8007de8:	e7af      	b.n	8007d4a <_malloc_r+0x22>
 8007dea:	6862      	ldr	r2, [r4, #4]
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	bf0c      	ite	eq
 8007df0:	f8c8 2000 	streq.w	r2, [r8]
 8007df4:	605a      	strne	r2, [r3, #4]
 8007df6:	e7eb      	b.n	8007dd0 <_malloc_r+0xa8>
 8007df8:	4623      	mov	r3, r4
 8007dfa:	6864      	ldr	r4, [r4, #4]
 8007dfc:	e7ae      	b.n	8007d5c <_malloc_r+0x34>
 8007dfe:	463c      	mov	r4, r7
 8007e00:	687f      	ldr	r7, [r7, #4]
 8007e02:	e7b6      	b.n	8007d72 <_malloc_r+0x4a>
 8007e04:	461a      	mov	r2, r3
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d1fb      	bne.n	8007e04 <_malloc_r+0xdc>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6053      	str	r3, [r2, #4]
 8007e10:	e7de      	b.n	8007dd0 <_malloc_r+0xa8>
 8007e12:	230c      	movs	r3, #12
 8007e14:	6033      	str	r3, [r6, #0]
 8007e16:	4630      	mov	r0, r6
 8007e18:	f000 f80c 	bl	8007e34 <__malloc_unlock>
 8007e1c:	e794      	b.n	8007d48 <_malloc_r+0x20>
 8007e1e:	6005      	str	r5, [r0, #0]
 8007e20:	e7d6      	b.n	8007dd0 <_malloc_r+0xa8>
 8007e22:	bf00      	nop
 8007e24:	20000520 	.word	0x20000520

08007e28 <__malloc_lock>:
 8007e28:	4801      	ldr	r0, [pc, #4]	@ (8007e30 <__malloc_lock+0x8>)
 8007e2a:	f000 bb8c 	b.w	8008546 <__retarget_lock_acquire_recursive>
 8007e2e:	bf00      	nop
 8007e30:	20000664 	.word	0x20000664

08007e34 <__malloc_unlock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	@ (8007e3c <__malloc_unlock+0x8>)
 8007e36:	f000 bb87 	b.w	8008548 <__retarget_lock_release_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	20000664 	.word	0x20000664

08007e40 <std>:
 8007e40:	2300      	movs	r3, #0
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	e9c0 3300 	strd	r3, r3, [r0]
 8007e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e4e:	6083      	str	r3, [r0, #8]
 8007e50:	8181      	strh	r1, [r0, #12]
 8007e52:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e54:	81c2      	strh	r2, [r0, #14]
 8007e56:	6183      	str	r3, [r0, #24]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	305c      	adds	r0, #92	@ 0x5c
 8007e5e:	f000 fae9 	bl	8008434 <memset>
 8007e62:	4b0d      	ldr	r3, [pc, #52]	@ (8007e98 <std+0x58>)
 8007e64:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <std+0x5c>)
 8007e68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea0 <std+0x60>)
 8007e6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <std+0x64>)
 8007e70:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <std+0x68>)
 8007e74:	6224      	str	r4, [r4, #32]
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d006      	beq.n	8007e88 <std+0x48>
 8007e7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e7e:	4294      	cmp	r4, r2
 8007e80:	d002      	beq.n	8007e88 <std+0x48>
 8007e82:	33d0      	adds	r3, #208	@ 0xd0
 8007e84:	429c      	cmp	r4, r3
 8007e86:	d105      	bne.n	8007e94 <std+0x54>
 8007e88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e90:	f000 bb58 	b.w	8008544 <__retarget_lock_init_recursive>
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	bf00      	nop
 8007e98:	0800820d 	.word	0x0800820d
 8007e9c:	0800822f 	.word	0x0800822f
 8007ea0:	08008267 	.word	0x08008267
 8007ea4:	0800828b 	.word	0x0800828b
 8007ea8:	20000524 	.word	0x20000524

08007eac <stdio_exit_handler>:
 8007eac:	4a02      	ldr	r2, [pc, #8]	@ (8007eb8 <stdio_exit_handler+0xc>)
 8007eae:	4903      	ldr	r1, [pc, #12]	@ (8007ebc <stdio_exit_handler+0x10>)
 8007eb0:	4803      	ldr	r0, [pc, #12]	@ (8007ec0 <stdio_exit_handler+0x14>)
 8007eb2:	f000 b869 	b.w	8007f88 <_fwalk_sglue>
 8007eb6:	bf00      	nop
 8007eb8:	2000000c 	.word	0x2000000c
 8007ebc:	08008f51 	.word	0x08008f51
 8007ec0:	2000001c 	.word	0x2000001c

08007ec4 <cleanup_stdio>:
 8007ec4:	6841      	ldr	r1, [r0, #4]
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <cleanup_stdio+0x34>)
 8007ec8:	4299      	cmp	r1, r3
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	4604      	mov	r4, r0
 8007ece:	d001      	beq.n	8007ed4 <cleanup_stdio+0x10>
 8007ed0:	f001 f83e 	bl	8008f50 <_fflush_r>
 8007ed4:	68a1      	ldr	r1, [r4, #8]
 8007ed6:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <cleanup_stdio+0x38>)
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	d002      	beq.n	8007ee2 <cleanup_stdio+0x1e>
 8007edc:	4620      	mov	r0, r4
 8007ede:	f001 f837 	bl	8008f50 <_fflush_r>
 8007ee2:	68e1      	ldr	r1, [r4, #12]
 8007ee4:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <cleanup_stdio+0x3c>)
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	d004      	beq.n	8007ef4 <cleanup_stdio+0x30>
 8007eea:	4620      	mov	r0, r4
 8007eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef0:	f001 b82e 	b.w	8008f50 <_fflush_r>
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000524 	.word	0x20000524
 8007efc:	2000058c 	.word	0x2000058c
 8007f00:	200005f4 	.word	0x200005f4

08007f04 <global_stdio_init.part.0>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	4b0b      	ldr	r3, [pc, #44]	@ (8007f34 <global_stdio_init.part.0+0x30>)
 8007f08:	4c0b      	ldr	r4, [pc, #44]	@ (8007f38 <global_stdio_init.part.0+0x34>)
 8007f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f3c <global_stdio_init.part.0+0x38>)
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	2200      	movs	r2, #0
 8007f12:	2104      	movs	r1, #4
 8007f14:	f7ff ff94 	bl	8007e40 <std>
 8007f18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	2109      	movs	r1, #9
 8007f20:	f7ff ff8e 	bl	8007e40 <std>
 8007f24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f28:	2202      	movs	r2, #2
 8007f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2e:	2112      	movs	r1, #18
 8007f30:	f7ff bf86 	b.w	8007e40 <std>
 8007f34:	2000065c 	.word	0x2000065c
 8007f38:	20000524 	.word	0x20000524
 8007f3c:	08007ead 	.word	0x08007ead

08007f40 <__sfp_lock_acquire>:
 8007f40:	4801      	ldr	r0, [pc, #4]	@ (8007f48 <__sfp_lock_acquire+0x8>)
 8007f42:	f000 bb00 	b.w	8008546 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000665 	.word	0x20000665

08007f4c <__sfp_lock_release>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	@ (8007f54 <__sfp_lock_release+0x8>)
 8007f4e:	f000 bafb 	b.w	8008548 <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000665 	.word	0x20000665

08007f58 <__sinit>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	f7ff fff0 	bl	8007f40 <__sfp_lock_acquire>
 8007f60:	6a23      	ldr	r3, [r4, #32]
 8007f62:	b11b      	cbz	r3, 8007f6c <__sinit+0x14>
 8007f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f68:	f7ff bff0 	b.w	8007f4c <__sfp_lock_release>
 8007f6c:	4b04      	ldr	r3, [pc, #16]	@ (8007f80 <__sinit+0x28>)
 8007f6e:	6223      	str	r3, [r4, #32]
 8007f70:	4b04      	ldr	r3, [pc, #16]	@ (8007f84 <__sinit+0x2c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f5      	bne.n	8007f64 <__sinit+0xc>
 8007f78:	f7ff ffc4 	bl	8007f04 <global_stdio_init.part.0>
 8007f7c:	e7f2      	b.n	8007f64 <__sinit+0xc>
 8007f7e:	bf00      	nop
 8007f80:	08007ec5 	.word	0x08007ec5
 8007f84:	2000065c 	.word	0x2000065c

08007f88 <_fwalk_sglue>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	4688      	mov	r8, r1
 8007f90:	4614      	mov	r4, r2
 8007f92:	2600      	movs	r6, #0
 8007f94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f98:	f1b9 0901 	subs.w	r9, r9, #1
 8007f9c:	d505      	bpl.n	8007faa <_fwalk_sglue+0x22>
 8007f9e:	6824      	ldr	r4, [r4, #0]
 8007fa0:	2c00      	cmp	r4, #0
 8007fa2:	d1f7      	bne.n	8007f94 <_fwalk_sglue+0xc>
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d907      	bls.n	8007fc0 <_fwalk_sglue+0x38>
 8007fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	d003      	beq.n	8007fc0 <_fwalk_sglue+0x38>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	47c0      	blx	r8
 8007fbe:	4306      	orrs	r6, r0
 8007fc0:	3568      	adds	r5, #104	@ 0x68
 8007fc2:	e7e9      	b.n	8007f98 <_fwalk_sglue+0x10>

08007fc4 <iprintf>:
 8007fc4:	b40f      	push	{r0, r1, r2, r3}
 8007fc6:	b507      	push	{r0, r1, r2, lr}
 8007fc8:	4906      	ldr	r1, [pc, #24]	@ (8007fe4 <iprintf+0x20>)
 8007fca:	ab04      	add	r3, sp, #16
 8007fcc:	6808      	ldr	r0, [r1, #0]
 8007fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd2:	6881      	ldr	r1, [r0, #8]
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	f000 fc93 	bl	8008900 <_vfiprintf_r>
 8007fda:	b003      	add	sp, #12
 8007fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe0:	b004      	add	sp, #16
 8007fe2:	4770      	bx	lr
 8007fe4:	20000018 	.word	0x20000018

08007fe8 <_puts_r>:
 8007fe8:	6a03      	ldr	r3, [r0, #32]
 8007fea:	b570      	push	{r4, r5, r6, lr}
 8007fec:	6884      	ldr	r4, [r0, #8]
 8007fee:	4605      	mov	r5, r0
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <_puts_r+0x10>
 8007ff4:	f7ff ffb0 	bl	8007f58 <__sinit>
 8007ff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ffa:	07db      	lsls	r3, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_puts_r+0x22>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	0598      	lsls	r0, r3, #22
 8008002:	d402      	bmi.n	800800a <_puts_r+0x22>
 8008004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008006:	f000 fa9e 	bl	8008546 <__retarget_lock_acquire_recursive>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	0719      	lsls	r1, r3, #28
 800800e:	d502      	bpl.n	8008016 <_puts_r+0x2e>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d135      	bne.n	8008082 <_puts_r+0x9a>
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f000 f9b5 	bl	8008388 <__swsetup_r>
 800801e:	b380      	cbz	r0, 8008082 <_puts_r+0x9a>
 8008020:	f04f 35ff 	mov.w	r5, #4294967295
 8008024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008026:	07da      	lsls	r2, r3, #31
 8008028:	d405      	bmi.n	8008036 <_puts_r+0x4e>
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	059b      	lsls	r3, r3, #22
 800802e:	d402      	bmi.n	8008036 <_puts_r+0x4e>
 8008030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008032:	f000 fa89 	bl	8008548 <__retarget_lock_release_recursive>
 8008036:	4628      	mov	r0, r5
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	2b00      	cmp	r3, #0
 800803c:	da04      	bge.n	8008048 <_puts_r+0x60>
 800803e:	69a2      	ldr	r2, [r4, #24]
 8008040:	429a      	cmp	r2, r3
 8008042:	dc17      	bgt.n	8008074 <_puts_r+0x8c>
 8008044:	290a      	cmp	r1, #10
 8008046:	d015      	beq.n	8008074 <_puts_r+0x8c>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	6022      	str	r2, [r4, #0]
 800804e:	7019      	strb	r1, [r3, #0]
 8008050:	68a3      	ldr	r3, [r4, #8]
 8008052:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008056:	3b01      	subs	r3, #1
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	2900      	cmp	r1, #0
 800805c:	d1ed      	bne.n	800803a <_puts_r+0x52>
 800805e:	2b00      	cmp	r3, #0
 8008060:	da11      	bge.n	8008086 <_puts_r+0x9e>
 8008062:	4622      	mov	r2, r4
 8008064:	210a      	movs	r1, #10
 8008066:	4628      	mov	r0, r5
 8008068:	f000 f950 	bl	800830c <__swbuf_r>
 800806c:	3001      	adds	r0, #1
 800806e:	d0d7      	beq.n	8008020 <_puts_r+0x38>
 8008070:	250a      	movs	r5, #10
 8008072:	e7d7      	b.n	8008024 <_puts_r+0x3c>
 8008074:	4622      	mov	r2, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f948 	bl	800830c <__swbuf_r>
 800807c:	3001      	adds	r0, #1
 800807e:	d1e7      	bne.n	8008050 <_puts_r+0x68>
 8008080:	e7ce      	b.n	8008020 <_puts_r+0x38>
 8008082:	3e01      	subs	r6, #1
 8008084:	e7e4      	b.n	8008050 <_puts_r+0x68>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	6022      	str	r2, [r4, #0]
 800808c:	220a      	movs	r2, #10
 800808e:	701a      	strb	r2, [r3, #0]
 8008090:	e7ee      	b.n	8008070 <_puts_r+0x88>
	...

08008094 <puts>:
 8008094:	4b02      	ldr	r3, [pc, #8]	@ (80080a0 <puts+0xc>)
 8008096:	4601      	mov	r1, r0
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f7ff bfa5 	b.w	8007fe8 <_puts_r>
 800809e:	bf00      	nop
 80080a0:	20000018 	.word	0x20000018

080080a4 <setvbuf>:
 80080a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	461d      	mov	r5, r3
 80080aa:	4b57      	ldr	r3, [pc, #348]	@ (8008208 <setvbuf+0x164>)
 80080ac:	681f      	ldr	r7, [r3, #0]
 80080ae:	4604      	mov	r4, r0
 80080b0:	460e      	mov	r6, r1
 80080b2:	4690      	mov	r8, r2
 80080b4:	b127      	cbz	r7, 80080c0 <setvbuf+0x1c>
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	b913      	cbnz	r3, 80080c0 <setvbuf+0x1c>
 80080ba:	4638      	mov	r0, r7
 80080bc:	f7ff ff4c 	bl	8007f58 <__sinit>
 80080c0:	f1b8 0f02 	cmp.w	r8, #2
 80080c4:	d006      	beq.n	80080d4 <setvbuf+0x30>
 80080c6:	f1b8 0f01 	cmp.w	r8, #1
 80080ca:	f200 809a 	bhi.w	8008202 <setvbuf+0x15e>
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	f2c0 8097 	blt.w	8008202 <setvbuf+0x15e>
 80080d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080d6:	07d9      	lsls	r1, r3, #31
 80080d8:	d405      	bmi.n	80080e6 <setvbuf+0x42>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	059a      	lsls	r2, r3, #22
 80080de:	d402      	bmi.n	80080e6 <setvbuf+0x42>
 80080e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080e2:	f000 fa30 	bl	8008546 <__retarget_lock_acquire_recursive>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4638      	mov	r0, r7
 80080ea:	f000 ff31 	bl	8008f50 <_fflush_r>
 80080ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080f0:	b141      	cbz	r1, 8008104 <setvbuf+0x60>
 80080f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080f6:	4299      	cmp	r1, r3
 80080f8:	d002      	beq.n	8008100 <setvbuf+0x5c>
 80080fa:	4638      	mov	r0, r7
 80080fc:	f000 fa34 	bl	8008568 <_free_r>
 8008100:	2300      	movs	r3, #0
 8008102:	6363      	str	r3, [r4, #52]	@ 0x34
 8008104:	2300      	movs	r3, #0
 8008106:	61a3      	str	r3, [r4, #24]
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	061b      	lsls	r3, r3, #24
 800810e:	d503      	bpl.n	8008118 <setvbuf+0x74>
 8008110:	6921      	ldr	r1, [r4, #16]
 8008112:	4638      	mov	r0, r7
 8008114:	f000 fa28 	bl	8008568 <_free_r>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	f1b8 0f02 	cmp.w	r8, #2
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	d061      	beq.n	80081ee <setvbuf+0x14a>
 800812a:	ab01      	add	r3, sp, #4
 800812c:	466a      	mov	r2, sp
 800812e:	4621      	mov	r1, r4
 8008130:	4638      	mov	r0, r7
 8008132:	f000 ff35 	bl	8008fa0 <__swhatbuf_r>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	4318      	orrs	r0, r3
 800813a:	81a0      	strh	r0, [r4, #12]
 800813c:	bb2d      	cbnz	r5, 800818a <setvbuf+0xe6>
 800813e:	9d00      	ldr	r5, [sp, #0]
 8008140:	4628      	mov	r0, r5
 8008142:	f7ff fdbf 	bl	8007cc4 <malloc>
 8008146:	4606      	mov	r6, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	d152      	bne.n	80081f2 <setvbuf+0x14e>
 800814c:	f8dd 9000 	ldr.w	r9, [sp]
 8008150:	45a9      	cmp	r9, r5
 8008152:	d140      	bne.n	80081d6 <setvbuf+0x132>
 8008154:	f04f 35ff 	mov.w	r5, #4294967295
 8008158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815c:	f043 0202 	orr.w	r2, r3, #2
 8008160:	81a2      	strh	r2, [r4, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	60a2      	str	r2, [r4, #8]
 8008166:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800816a:	6022      	str	r2, [r4, #0]
 800816c:	6122      	str	r2, [r4, #16]
 800816e:	2201      	movs	r2, #1
 8008170:	6162      	str	r2, [r4, #20]
 8008172:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008174:	07d6      	lsls	r6, r2, #31
 8008176:	d404      	bmi.n	8008182 <setvbuf+0xde>
 8008178:	0598      	lsls	r0, r3, #22
 800817a:	d402      	bmi.n	8008182 <setvbuf+0xde>
 800817c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817e:	f000 f9e3 	bl	8008548 <__retarget_lock_release_recursive>
 8008182:	4628      	mov	r0, r5
 8008184:	b003      	add	sp, #12
 8008186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818a:	2e00      	cmp	r6, #0
 800818c:	d0d8      	beq.n	8008140 <setvbuf+0x9c>
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	b913      	cbnz	r3, 8008198 <setvbuf+0xf4>
 8008192:	4638      	mov	r0, r7
 8008194:	f7ff fee0 	bl	8007f58 <__sinit>
 8008198:	f1b8 0f01 	cmp.w	r8, #1
 800819c:	bf08      	it	eq
 800819e:	89a3      	ldrheq	r3, [r4, #12]
 80081a0:	6026      	str	r6, [r4, #0]
 80081a2:	bf04      	itt	eq
 80081a4:	f043 0301 	orreq.w	r3, r3, #1
 80081a8:	81a3      	strheq	r3, [r4, #12]
 80081aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ae:	f013 0208 	ands.w	r2, r3, #8
 80081b2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80081b6:	d01e      	beq.n	80081f6 <setvbuf+0x152>
 80081b8:	07d9      	lsls	r1, r3, #31
 80081ba:	bf41      	itttt	mi
 80081bc:	2200      	movmi	r2, #0
 80081be:	426d      	negmi	r5, r5
 80081c0:	60a2      	strmi	r2, [r4, #8]
 80081c2:	61a5      	strmi	r5, [r4, #24]
 80081c4:	bf58      	it	pl
 80081c6:	60a5      	strpl	r5, [r4, #8]
 80081c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081ca:	07d2      	lsls	r2, r2, #31
 80081cc:	d401      	bmi.n	80081d2 <setvbuf+0x12e>
 80081ce:	059b      	lsls	r3, r3, #22
 80081d0:	d513      	bpl.n	80081fa <setvbuf+0x156>
 80081d2:	2500      	movs	r5, #0
 80081d4:	e7d5      	b.n	8008182 <setvbuf+0xde>
 80081d6:	4648      	mov	r0, r9
 80081d8:	f7ff fd74 	bl	8007cc4 <malloc>
 80081dc:	4606      	mov	r6, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d0b8      	beq.n	8008154 <setvbuf+0xb0>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	464d      	mov	r5, r9
 80081ec:	e7cf      	b.n	800818e <setvbuf+0xea>
 80081ee:	2500      	movs	r5, #0
 80081f0:	e7b2      	b.n	8008158 <setvbuf+0xb4>
 80081f2:	46a9      	mov	r9, r5
 80081f4:	e7f5      	b.n	80081e2 <setvbuf+0x13e>
 80081f6:	60a2      	str	r2, [r4, #8]
 80081f8:	e7e6      	b.n	80081c8 <setvbuf+0x124>
 80081fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081fc:	f000 f9a4 	bl	8008548 <__retarget_lock_release_recursive>
 8008200:	e7e7      	b.n	80081d2 <setvbuf+0x12e>
 8008202:	f04f 35ff 	mov.w	r5, #4294967295
 8008206:	e7bc      	b.n	8008182 <setvbuf+0xde>
 8008208:	20000018 	.word	0x20000018

0800820c <__sread>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	f000 f938 	bl	8008488 <_read_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	bfab      	itete	ge
 800821c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800821e:	89a3      	ldrhlt	r3, [r4, #12]
 8008220:	181b      	addge	r3, r3, r0
 8008222:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008226:	bfac      	ite	ge
 8008228:	6563      	strge	r3, [r4, #84]	@ 0x54
 800822a:	81a3      	strhlt	r3, [r4, #12]
 800822c:	bd10      	pop	{r4, pc}

0800822e <__swrite>:
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	461f      	mov	r7, r3
 8008234:	898b      	ldrh	r3, [r1, #12]
 8008236:	05db      	lsls	r3, r3, #23
 8008238:	4605      	mov	r5, r0
 800823a:	460c      	mov	r4, r1
 800823c:	4616      	mov	r6, r2
 800823e:	d505      	bpl.n	800824c <__swrite+0x1e>
 8008240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008244:	2302      	movs	r3, #2
 8008246:	2200      	movs	r2, #0
 8008248:	f000 f90c 	bl	8008464 <_lseek_r>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	4632      	mov	r2, r6
 800825a:	463b      	mov	r3, r7
 800825c:	4628      	mov	r0, r5
 800825e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	f000 b933 	b.w	80084cc <_write_r>

08008266 <__sseek>:
 8008266:	b510      	push	{r4, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826e:	f000 f8f9 	bl	8008464 <_lseek_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	bf15      	itete	ne
 8008278:	6560      	strne	r0, [r4, #84]	@ 0x54
 800827a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800827e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008282:	81a3      	strheq	r3, [r4, #12]
 8008284:	bf18      	it	ne
 8008286:	81a3      	strhne	r3, [r4, #12]
 8008288:	bd10      	pop	{r4, pc}

0800828a <__sclose>:
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 b8d9 	b.w	8008444 <_close_r>

08008292 <_vsniprintf_r>:
 8008292:	b530      	push	{r4, r5, lr}
 8008294:	4614      	mov	r4, r2
 8008296:	2c00      	cmp	r4, #0
 8008298:	b09b      	sub	sp, #108	@ 0x6c
 800829a:	4605      	mov	r5, r0
 800829c:	461a      	mov	r2, r3
 800829e:	da05      	bge.n	80082ac <_vsniprintf_r+0x1a>
 80082a0:	238b      	movs	r3, #139	@ 0x8b
 80082a2:	6003      	str	r3, [r0, #0]
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	b01b      	add	sp, #108	@ 0x6c
 80082aa:	bd30      	pop	{r4, r5, pc}
 80082ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80082ba:	bf14      	ite	ne
 80082bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082c0:	4623      	moveq	r3, r4
 80082c2:	9302      	str	r3, [sp, #8]
 80082c4:	9305      	str	r3, [sp, #20]
 80082c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082ca:	9100      	str	r1, [sp, #0]
 80082cc:	9104      	str	r1, [sp, #16]
 80082ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80082d2:	4669      	mov	r1, sp
 80082d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80082d6:	f000 f9ed 	bl	80086b4 <_svfiprintf_r>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	bfbc      	itt	lt
 80082de:	238b      	movlt	r3, #139	@ 0x8b
 80082e0:	602b      	strlt	r3, [r5, #0]
 80082e2:	2c00      	cmp	r4, #0
 80082e4:	d0e0      	beq.n	80082a8 <_vsniprintf_r+0x16>
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	e7dc      	b.n	80082a8 <_vsniprintf_r+0x16>
	...

080082f0 <vsniprintf>:
 80082f0:	b507      	push	{r0, r1, r2, lr}
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	460a      	mov	r2, r1
 80082f8:	4601      	mov	r1, r0
 80082fa:	4803      	ldr	r0, [pc, #12]	@ (8008308 <vsniprintf+0x18>)
 80082fc:	6800      	ldr	r0, [r0, #0]
 80082fe:	f7ff ffc8 	bl	8008292 <_vsniprintf_r>
 8008302:	b003      	add	sp, #12
 8008304:	f85d fb04 	ldr.w	pc, [sp], #4
 8008308:	20000018 	.word	0x20000018

0800830c <__swbuf_r>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	460e      	mov	r6, r1
 8008310:	4614      	mov	r4, r2
 8008312:	4605      	mov	r5, r0
 8008314:	b118      	cbz	r0, 800831e <__swbuf_r+0x12>
 8008316:	6a03      	ldr	r3, [r0, #32]
 8008318:	b90b      	cbnz	r3, 800831e <__swbuf_r+0x12>
 800831a:	f7ff fe1d 	bl	8007f58 <__sinit>
 800831e:	69a3      	ldr	r3, [r4, #24]
 8008320:	60a3      	str	r3, [r4, #8]
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	071a      	lsls	r2, r3, #28
 8008326:	d501      	bpl.n	800832c <__swbuf_r+0x20>
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	b943      	cbnz	r3, 800833e <__swbuf_r+0x32>
 800832c:	4621      	mov	r1, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f82a 	bl	8008388 <__swsetup_r>
 8008334:	b118      	cbz	r0, 800833e <__swbuf_r+0x32>
 8008336:	f04f 37ff 	mov.w	r7, #4294967295
 800833a:	4638      	mov	r0, r7
 800833c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	1a98      	subs	r0, r3, r2
 8008344:	6963      	ldr	r3, [r4, #20]
 8008346:	b2f6      	uxtb	r6, r6
 8008348:	4283      	cmp	r3, r0
 800834a:	4637      	mov	r7, r6
 800834c:	dc05      	bgt.n	800835a <__swbuf_r+0x4e>
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 fdfd 	bl	8008f50 <_fflush_r>
 8008356:	2800      	cmp	r0, #0
 8008358:	d1ed      	bne.n	8008336 <__swbuf_r+0x2a>
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	3b01      	subs	r3, #1
 800835e:	60a3      	str	r3, [r4, #8]
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	701e      	strb	r6, [r3, #0]
 8008368:	6962      	ldr	r2, [r4, #20]
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	429a      	cmp	r2, r3
 800836e:	d004      	beq.n	800837a <__swbuf_r+0x6e>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d5e1      	bpl.n	800833a <__swbuf_r+0x2e>
 8008376:	2e0a      	cmp	r6, #10
 8008378:	d1df      	bne.n	800833a <__swbuf_r+0x2e>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f000 fde7 	bl	8008f50 <_fflush_r>
 8008382:	2800      	cmp	r0, #0
 8008384:	d0d9      	beq.n	800833a <__swbuf_r+0x2e>
 8008386:	e7d6      	b.n	8008336 <__swbuf_r+0x2a>

08008388 <__swsetup_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4b29      	ldr	r3, [pc, #164]	@ (8008430 <__swsetup_r+0xa8>)
 800838c:	4605      	mov	r5, r0
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	460c      	mov	r4, r1
 8008392:	b118      	cbz	r0, 800839c <__swsetup_r+0x14>
 8008394:	6a03      	ldr	r3, [r0, #32]
 8008396:	b90b      	cbnz	r3, 800839c <__swsetup_r+0x14>
 8008398:	f7ff fdde 	bl	8007f58 <__sinit>
 800839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a0:	0719      	lsls	r1, r3, #28
 80083a2:	d422      	bmi.n	80083ea <__swsetup_r+0x62>
 80083a4:	06da      	lsls	r2, r3, #27
 80083a6:	d407      	bmi.n	80083b8 <__swsetup_r+0x30>
 80083a8:	2209      	movs	r2, #9
 80083aa:	602a      	str	r2, [r5, #0]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	e033      	b.n	8008420 <__swsetup_r+0x98>
 80083b8:	0758      	lsls	r0, r3, #29
 80083ba:	d512      	bpl.n	80083e2 <__swsetup_r+0x5a>
 80083bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083be:	b141      	cbz	r1, 80083d2 <__swsetup_r+0x4a>
 80083c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c4:	4299      	cmp	r1, r3
 80083c6:	d002      	beq.n	80083ce <__swsetup_r+0x46>
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f8cd 	bl	8008568 <_free_r>
 80083ce:	2300      	movs	r3, #0
 80083d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	2300      	movs	r3, #0
 80083dc:	6063      	str	r3, [r4, #4]
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f043 0308 	orr.w	r3, r3, #8
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	b94b      	cbnz	r3, 8008402 <__swsetup_r+0x7a>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f8:	d003      	beq.n	8008402 <__swsetup_r+0x7a>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 fdf5 	bl	8008fec <__smakebuf_r>
 8008402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008406:	f013 0201 	ands.w	r2, r3, #1
 800840a:	d00a      	beq.n	8008422 <__swsetup_r+0x9a>
 800840c:	2200      	movs	r2, #0
 800840e:	60a2      	str	r2, [r4, #8]
 8008410:	6962      	ldr	r2, [r4, #20]
 8008412:	4252      	negs	r2, r2
 8008414:	61a2      	str	r2, [r4, #24]
 8008416:	6922      	ldr	r2, [r4, #16]
 8008418:	b942      	cbnz	r2, 800842c <__swsetup_r+0xa4>
 800841a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800841e:	d1c5      	bne.n	80083ac <__swsetup_r+0x24>
 8008420:	bd38      	pop	{r3, r4, r5, pc}
 8008422:	0799      	lsls	r1, r3, #30
 8008424:	bf58      	it	pl
 8008426:	6962      	ldrpl	r2, [r4, #20]
 8008428:	60a2      	str	r2, [r4, #8]
 800842a:	e7f4      	b.n	8008416 <__swsetup_r+0x8e>
 800842c:	2000      	movs	r0, #0
 800842e:	e7f7      	b.n	8008420 <__swsetup_r+0x98>
 8008430:	20000018 	.word	0x20000018

08008434 <memset>:
 8008434:	4402      	add	r2, r0
 8008436:	4603      	mov	r3, r0
 8008438:	4293      	cmp	r3, r2
 800843a:	d100      	bne.n	800843e <memset+0xa>
 800843c:	4770      	bx	lr
 800843e:	f803 1b01 	strb.w	r1, [r3], #1
 8008442:	e7f9      	b.n	8008438 <memset+0x4>

08008444 <_close_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d06      	ldr	r5, [pc, #24]	@ (8008460 <_close_r+0x1c>)
 8008448:	2300      	movs	r3, #0
 800844a:	4604      	mov	r4, r0
 800844c:	4608      	mov	r0, r1
 800844e:	602b      	str	r3, [r5, #0]
 8008450:	f7f9 f9b3 	bl	80017ba <_close>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_close_r+0x1a>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_close_r+0x1a>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20000660 	.word	0x20000660

08008464 <_lseek_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	@ (8008484 <_lseek_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 f9c8 	bl	8001808 <_lseek>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_lseek_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_lseek_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000660 	.word	0x20000660

08008488 <_read_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	@ (80084a8 <_read_r+0x20>)
 800848c:	4604      	mov	r4, r0
 800848e:	4608      	mov	r0, r1
 8008490:	4611      	mov	r1, r2
 8008492:	2200      	movs	r2, #0
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7f9 f972 	bl	8001780 <_read>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_read_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_read_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000660 	.word	0x20000660

080084ac <_sbrk_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d06      	ldr	r5, [pc, #24]	@ (80084c8 <_sbrk_r+0x1c>)
 80084b0:	2300      	movs	r3, #0
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7f9 f9b4 	bl	8001824 <_sbrk>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_sbrk_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_sbrk_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	20000660 	.word	0x20000660

080084cc <_write_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d07      	ldr	r5, [pc, #28]	@ (80084ec <_write_r+0x20>)
 80084d0:	4604      	mov	r4, r0
 80084d2:	4608      	mov	r0, r1
 80084d4:	4611      	mov	r1, r2
 80084d6:	2200      	movs	r2, #0
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	f7f8 fbb8 	bl	8000c50 <_write>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_write_r+0x1e>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_write_r+0x1e>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	20000660 	.word	0x20000660

080084f0 <__errno>:
 80084f0:	4b01      	ldr	r3, [pc, #4]	@ (80084f8 <__errno+0x8>)
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000018 	.word	0x20000018

080084fc <__libc_init_array>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008534 <__libc_init_array+0x38>)
 8008500:	4c0d      	ldr	r4, [pc, #52]	@ (8008538 <__libc_init_array+0x3c>)
 8008502:	1b64      	subs	r4, r4, r5
 8008504:	10a4      	asrs	r4, r4, #2
 8008506:	2600      	movs	r6, #0
 8008508:	42a6      	cmp	r6, r4
 800850a:	d109      	bne.n	8008520 <__libc_init_array+0x24>
 800850c:	4d0b      	ldr	r5, [pc, #44]	@ (800853c <__libc_init_array+0x40>)
 800850e:	4c0c      	ldr	r4, [pc, #48]	@ (8008540 <__libc_init_array+0x44>)
 8008510:	f000 fe1a 	bl	8009148 <_init>
 8008514:	1b64      	subs	r4, r4, r5
 8008516:	10a4      	asrs	r4, r4, #2
 8008518:	2600      	movs	r6, #0
 800851a:	42a6      	cmp	r6, r4
 800851c:	d105      	bne.n	800852a <__libc_init_array+0x2e>
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	f855 3b04 	ldr.w	r3, [r5], #4
 8008524:	4798      	blx	r3
 8008526:	3601      	adds	r6, #1
 8008528:	e7ee      	b.n	8008508 <__libc_init_array+0xc>
 800852a:	f855 3b04 	ldr.w	r3, [r5], #4
 800852e:	4798      	blx	r3
 8008530:	3601      	adds	r6, #1
 8008532:	e7f2      	b.n	800851a <__libc_init_array+0x1e>
 8008534:	080095e0 	.word	0x080095e0
 8008538:	080095e0 	.word	0x080095e0
 800853c:	080095e0 	.word	0x080095e0
 8008540:	080095e4 	.word	0x080095e4

08008544 <__retarget_lock_init_recursive>:
 8008544:	4770      	bx	lr

08008546 <__retarget_lock_acquire_recursive>:
 8008546:	4770      	bx	lr

08008548 <__retarget_lock_release_recursive>:
 8008548:	4770      	bx	lr

0800854a <memcpy>:
 800854a:	440a      	add	r2, r1
 800854c:	4291      	cmp	r1, r2
 800854e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008552:	d100      	bne.n	8008556 <memcpy+0xc>
 8008554:	4770      	bx	lr
 8008556:	b510      	push	{r4, lr}
 8008558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008560:	4291      	cmp	r1, r2
 8008562:	d1f9      	bne.n	8008558 <memcpy+0xe>
 8008564:	bd10      	pop	{r4, pc}
	...

08008568 <_free_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4605      	mov	r5, r0
 800856c:	2900      	cmp	r1, #0
 800856e:	d041      	beq.n	80085f4 <_free_r+0x8c>
 8008570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008574:	1f0c      	subs	r4, r1, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	bfb8      	it	lt
 800857a:	18e4      	addlt	r4, r4, r3
 800857c:	f7ff fc54 	bl	8007e28 <__malloc_lock>
 8008580:	4a1d      	ldr	r2, [pc, #116]	@ (80085f8 <_free_r+0x90>)
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	b933      	cbnz	r3, 8008594 <_free_r+0x2c>
 8008586:	6063      	str	r3, [r4, #4]
 8008588:	6014      	str	r4, [r2, #0]
 800858a:	4628      	mov	r0, r5
 800858c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008590:	f7ff bc50 	b.w	8007e34 <__malloc_unlock>
 8008594:	42a3      	cmp	r3, r4
 8008596:	d908      	bls.n	80085aa <_free_r+0x42>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	1821      	adds	r1, r4, r0
 800859c:	428b      	cmp	r3, r1
 800859e:	bf01      	itttt	eq
 80085a0:	6819      	ldreq	r1, [r3, #0]
 80085a2:	685b      	ldreq	r3, [r3, #4]
 80085a4:	1809      	addeq	r1, r1, r0
 80085a6:	6021      	streq	r1, [r4, #0]
 80085a8:	e7ed      	b.n	8008586 <_free_r+0x1e>
 80085aa:	461a      	mov	r2, r3
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b10b      	cbz	r3, 80085b4 <_free_r+0x4c>
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d9fa      	bls.n	80085aa <_free_r+0x42>
 80085b4:	6811      	ldr	r1, [r2, #0]
 80085b6:	1850      	adds	r0, r2, r1
 80085b8:	42a0      	cmp	r0, r4
 80085ba:	d10b      	bne.n	80085d4 <_free_r+0x6c>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	4401      	add	r1, r0
 80085c0:	1850      	adds	r0, r2, r1
 80085c2:	4283      	cmp	r3, r0
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	d1e0      	bne.n	800858a <_free_r+0x22>
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	6053      	str	r3, [r2, #4]
 80085ce:	4408      	add	r0, r1
 80085d0:	6010      	str	r0, [r2, #0]
 80085d2:	e7da      	b.n	800858a <_free_r+0x22>
 80085d4:	d902      	bls.n	80085dc <_free_r+0x74>
 80085d6:	230c      	movs	r3, #12
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	e7d6      	b.n	800858a <_free_r+0x22>
 80085dc:	6820      	ldr	r0, [r4, #0]
 80085de:	1821      	adds	r1, r4, r0
 80085e0:	428b      	cmp	r3, r1
 80085e2:	bf04      	itt	eq
 80085e4:	6819      	ldreq	r1, [r3, #0]
 80085e6:	685b      	ldreq	r3, [r3, #4]
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	bf04      	itt	eq
 80085ec:	1809      	addeq	r1, r1, r0
 80085ee:	6021      	streq	r1, [r4, #0]
 80085f0:	6054      	str	r4, [r2, #4]
 80085f2:	e7ca      	b.n	800858a <_free_r+0x22>
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	20000520 	.word	0x20000520

080085fc <__ssputs_r>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	688e      	ldr	r6, [r1, #8]
 8008602:	461f      	mov	r7, r3
 8008604:	42be      	cmp	r6, r7
 8008606:	680b      	ldr	r3, [r1, #0]
 8008608:	4682      	mov	sl, r0
 800860a:	460c      	mov	r4, r1
 800860c:	4690      	mov	r8, r2
 800860e:	d82d      	bhi.n	800866c <__ssputs_r+0x70>
 8008610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008618:	d026      	beq.n	8008668 <__ssputs_r+0x6c>
 800861a:	6965      	ldr	r5, [r4, #20]
 800861c:	6909      	ldr	r1, [r1, #16]
 800861e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008622:	eba3 0901 	sub.w	r9, r3, r1
 8008626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800862a:	1c7b      	adds	r3, r7, #1
 800862c:	444b      	add	r3, r9
 800862e:	106d      	asrs	r5, r5, #1
 8008630:	429d      	cmp	r5, r3
 8008632:	bf38      	it	cc
 8008634:	461d      	movcc	r5, r3
 8008636:	0553      	lsls	r3, r2, #21
 8008638:	d527      	bpl.n	800868a <__ssputs_r+0x8e>
 800863a:	4629      	mov	r1, r5
 800863c:	f7ff fb74 	bl	8007d28 <_malloc_r>
 8008640:	4606      	mov	r6, r0
 8008642:	b360      	cbz	r0, 800869e <__ssputs_r+0xa2>
 8008644:	6921      	ldr	r1, [r4, #16]
 8008646:	464a      	mov	r2, r9
 8008648:	f7ff ff7f 	bl	800854a <memcpy>
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	6126      	str	r6, [r4, #16]
 800865a:	6165      	str	r5, [r4, #20]
 800865c:	444e      	add	r6, r9
 800865e:	eba5 0509 	sub.w	r5, r5, r9
 8008662:	6026      	str	r6, [r4, #0]
 8008664:	60a5      	str	r5, [r4, #8]
 8008666:	463e      	mov	r6, r7
 8008668:	42be      	cmp	r6, r7
 800866a:	d900      	bls.n	800866e <__ssputs_r+0x72>
 800866c:	463e      	mov	r6, r7
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	4632      	mov	r2, r6
 8008672:	4641      	mov	r1, r8
 8008674:	f000 fcf6 	bl	8009064 <memmove>
 8008678:	68a3      	ldr	r3, [r4, #8]
 800867a:	1b9b      	subs	r3, r3, r6
 800867c:	60a3      	str	r3, [r4, #8]
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	4433      	add	r3, r6
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	2000      	movs	r0, #0
 8008686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868a:	462a      	mov	r2, r5
 800868c:	f000 fd26 	bl	80090dc <_realloc_r>
 8008690:	4606      	mov	r6, r0
 8008692:	2800      	cmp	r0, #0
 8008694:	d1e0      	bne.n	8008658 <__ssputs_r+0x5c>
 8008696:	6921      	ldr	r1, [r4, #16]
 8008698:	4650      	mov	r0, sl
 800869a:	f7ff ff65 	bl	8008568 <_free_r>
 800869e:	230c      	movs	r3, #12
 80086a0:	f8ca 3000 	str.w	r3, [sl]
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	e7e9      	b.n	8008686 <__ssputs_r+0x8a>
	...

080086b4 <_svfiprintf_r>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	4698      	mov	r8, r3
 80086ba:	898b      	ldrh	r3, [r1, #12]
 80086bc:	061b      	lsls	r3, r3, #24
 80086be:	b09d      	sub	sp, #116	@ 0x74
 80086c0:	4607      	mov	r7, r0
 80086c2:	460d      	mov	r5, r1
 80086c4:	4614      	mov	r4, r2
 80086c6:	d510      	bpl.n	80086ea <_svfiprintf_r+0x36>
 80086c8:	690b      	ldr	r3, [r1, #16]
 80086ca:	b973      	cbnz	r3, 80086ea <_svfiprintf_r+0x36>
 80086cc:	2140      	movs	r1, #64	@ 0x40
 80086ce:	f7ff fb2b 	bl	8007d28 <_malloc_r>
 80086d2:	6028      	str	r0, [r5, #0]
 80086d4:	6128      	str	r0, [r5, #16]
 80086d6:	b930      	cbnz	r0, 80086e6 <_svfiprintf_r+0x32>
 80086d8:	230c      	movs	r3, #12
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	b01d      	add	sp, #116	@ 0x74
 80086e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	2340      	movs	r3, #64	@ 0x40
 80086e8:	616b      	str	r3, [r5, #20]
 80086ea:	2300      	movs	r3, #0
 80086ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ee:	2320      	movs	r3, #32
 80086f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f8:	2330      	movs	r3, #48	@ 0x30
 80086fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008898 <_svfiprintf_r+0x1e4>
 80086fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008702:	f04f 0901 	mov.w	r9, #1
 8008706:	4623      	mov	r3, r4
 8008708:	469a      	mov	sl, r3
 800870a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800870e:	b10a      	cbz	r2, 8008714 <_svfiprintf_r+0x60>
 8008710:	2a25      	cmp	r2, #37	@ 0x25
 8008712:	d1f9      	bne.n	8008708 <_svfiprintf_r+0x54>
 8008714:	ebba 0b04 	subs.w	fp, sl, r4
 8008718:	d00b      	beq.n	8008732 <_svfiprintf_r+0x7e>
 800871a:	465b      	mov	r3, fp
 800871c:	4622      	mov	r2, r4
 800871e:	4629      	mov	r1, r5
 8008720:	4638      	mov	r0, r7
 8008722:	f7ff ff6b 	bl	80085fc <__ssputs_r>
 8008726:	3001      	adds	r0, #1
 8008728:	f000 80a7 	beq.w	800887a <_svfiprintf_r+0x1c6>
 800872c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800872e:	445a      	add	r2, fp
 8008730:	9209      	str	r2, [sp, #36]	@ 0x24
 8008732:	f89a 3000 	ldrb.w	r3, [sl]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 809f 	beq.w	800887a <_svfiprintf_r+0x1c6>
 800873c:	2300      	movs	r3, #0
 800873e:	f04f 32ff 	mov.w	r2, #4294967295
 8008742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008746:	f10a 0a01 	add.w	sl, sl, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	9307      	str	r3, [sp, #28]
 800874e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008752:	931a      	str	r3, [sp, #104]	@ 0x68
 8008754:	4654      	mov	r4, sl
 8008756:	2205      	movs	r2, #5
 8008758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875c:	484e      	ldr	r0, [pc, #312]	@ (8008898 <_svfiprintf_r+0x1e4>)
 800875e:	f7f7 fd37 	bl	80001d0 <memchr>
 8008762:	9a04      	ldr	r2, [sp, #16]
 8008764:	b9d8      	cbnz	r0, 800879e <_svfiprintf_r+0xea>
 8008766:	06d0      	lsls	r0, r2, #27
 8008768:	bf44      	itt	mi
 800876a:	2320      	movmi	r3, #32
 800876c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008770:	0711      	lsls	r1, r2, #28
 8008772:	bf44      	itt	mi
 8008774:	232b      	movmi	r3, #43	@ 0x2b
 8008776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800877a:	f89a 3000 	ldrb.w	r3, [sl]
 800877e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008780:	d015      	beq.n	80087ae <_svfiprintf_r+0xfa>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	4654      	mov	r4, sl
 8008786:	2000      	movs	r0, #0
 8008788:	f04f 0c0a 	mov.w	ip, #10
 800878c:	4621      	mov	r1, r4
 800878e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008792:	3b30      	subs	r3, #48	@ 0x30
 8008794:	2b09      	cmp	r3, #9
 8008796:	d94b      	bls.n	8008830 <_svfiprintf_r+0x17c>
 8008798:	b1b0      	cbz	r0, 80087c8 <_svfiprintf_r+0x114>
 800879a:	9207      	str	r2, [sp, #28]
 800879c:	e014      	b.n	80087c8 <_svfiprintf_r+0x114>
 800879e:	eba0 0308 	sub.w	r3, r0, r8
 80087a2:	fa09 f303 	lsl.w	r3, r9, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	46a2      	mov	sl, r4
 80087ac:	e7d2      	b.n	8008754 <_svfiprintf_r+0xa0>
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	1d19      	adds	r1, r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	9103      	str	r1, [sp, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfbb      	ittet	lt
 80087ba:	425b      	neglt	r3, r3
 80087bc:	f042 0202 	orrlt.w	r2, r2, #2
 80087c0:	9307      	strge	r3, [sp, #28]
 80087c2:	9307      	strlt	r3, [sp, #28]
 80087c4:	bfb8      	it	lt
 80087c6:	9204      	strlt	r2, [sp, #16]
 80087c8:	7823      	ldrb	r3, [r4, #0]
 80087ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80087cc:	d10a      	bne.n	80087e4 <_svfiprintf_r+0x130>
 80087ce:	7863      	ldrb	r3, [r4, #1]
 80087d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087d2:	d132      	bne.n	800883a <_svfiprintf_r+0x186>
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	9203      	str	r2, [sp, #12]
 80087dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087e0:	3402      	adds	r4, #2
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088a8 <_svfiprintf_r+0x1f4>
 80087e8:	7821      	ldrb	r1, [r4, #0]
 80087ea:	2203      	movs	r2, #3
 80087ec:	4650      	mov	r0, sl
 80087ee:	f7f7 fcef 	bl	80001d0 <memchr>
 80087f2:	b138      	cbz	r0, 8008804 <_svfiprintf_r+0x150>
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	eba0 000a 	sub.w	r0, r0, sl
 80087fa:	2240      	movs	r2, #64	@ 0x40
 80087fc:	4082      	lsls	r2, r0
 80087fe:	4313      	orrs	r3, r2
 8008800:	3401      	adds	r4, #1
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008808:	4824      	ldr	r0, [pc, #144]	@ (800889c <_svfiprintf_r+0x1e8>)
 800880a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800880e:	2206      	movs	r2, #6
 8008810:	f7f7 fcde 	bl	80001d0 <memchr>
 8008814:	2800      	cmp	r0, #0
 8008816:	d036      	beq.n	8008886 <_svfiprintf_r+0x1d2>
 8008818:	4b21      	ldr	r3, [pc, #132]	@ (80088a0 <_svfiprintf_r+0x1ec>)
 800881a:	bb1b      	cbnz	r3, 8008864 <_svfiprintf_r+0x1b0>
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	3307      	adds	r3, #7
 8008820:	f023 0307 	bic.w	r3, r3, #7
 8008824:	3308      	adds	r3, #8
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882a:	4433      	add	r3, r6
 800882c:	9309      	str	r3, [sp, #36]	@ 0x24
 800882e:	e76a      	b.n	8008706 <_svfiprintf_r+0x52>
 8008830:	fb0c 3202 	mla	r2, ip, r2, r3
 8008834:	460c      	mov	r4, r1
 8008836:	2001      	movs	r0, #1
 8008838:	e7a8      	b.n	800878c <_svfiprintf_r+0xd8>
 800883a:	2300      	movs	r3, #0
 800883c:	3401      	adds	r4, #1
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	4619      	mov	r1, r3
 8008842:	f04f 0c0a 	mov.w	ip, #10
 8008846:	4620      	mov	r0, r4
 8008848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800884c:	3a30      	subs	r2, #48	@ 0x30
 800884e:	2a09      	cmp	r2, #9
 8008850:	d903      	bls.n	800885a <_svfiprintf_r+0x1a6>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0c6      	beq.n	80087e4 <_svfiprintf_r+0x130>
 8008856:	9105      	str	r1, [sp, #20]
 8008858:	e7c4      	b.n	80087e4 <_svfiprintf_r+0x130>
 800885a:	fb0c 2101 	mla	r1, ip, r1, r2
 800885e:	4604      	mov	r4, r0
 8008860:	2301      	movs	r3, #1
 8008862:	e7f0      	b.n	8008846 <_svfiprintf_r+0x192>
 8008864:	ab03      	add	r3, sp, #12
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	462a      	mov	r2, r5
 800886a:	4b0e      	ldr	r3, [pc, #56]	@ (80088a4 <_svfiprintf_r+0x1f0>)
 800886c:	a904      	add	r1, sp, #16
 800886e:	4638      	mov	r0, r7
 8008870:	f3af 8000 	nop.w
 8008874:	1c42      	adds	r2, r0, #1
 8008876:	4606      	mov	r6, r0
 8008878:	d1d6      	bne.n	8008828 <_svfiprintf_r+0x174>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	065b      	lsls	r3, r3, #25
 800887e:	f53f af2d 	bmi.w	80086dc <_svfiprintf_r+0x28>
 8008882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008884:	e72c      	b.n	80086e0 <_svfiprintf_r+0x2c>
 8008886:	ab03      	add	r3, sp, #12
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	462a      	mov	r2, r5
 800888c:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <_svfiprintf_r+0x1f0>)
 800888e:	a904      	add	r1, sp, #16
 8008890:	4638      	mov	r0, r7
 8008892:	f000 f9bb 	bl	8008c0c <_printf_i>
 8008896:	e7ed      	b.n	8008874 <_svfiprintf_r+0x1c0>
 8008898:	080095a4 	.word	0x080095a4
 800889c:	080095ae 	.word	0x080095ae
 80088a0:	00000000 	.word	0x00000000
 80088a4:	080085fd 	.word	0x080085fd
 80088a8:	080095aa 	.word	0x080095aa

080088ac <__sfputc_r>:
 80088ac:	6893      	ldr	r3, [r2, #8]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	b410      	push	{r4}
 80088b4:	6093      	str	r3, [r2, #8]
 80088b6:	da08      	bge.n	80088ca <__sfputc_r+0x1e>
 80088b8:	6994      	ldr	r4, [r2, #24]
 80088ba:	42a3      	cmp	r3, r4
 80088bc:	db01      	blt.n	80088c2 <__sfputc_r+0x16>
 80088be:	290a      	cmp	r1, #10
 80088c0:	d103      	bne.n	80088ca <__sfputc_r+0x1e>
 80088c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c6:	f7ff bd21 	b.w	800830c <__swbuf_r>
 80088ca:	6813      	ldr	r3, [r2, #0]
 80088cc:	1c58      	adds	r0, r3, #1
 80088ce:	6010      	str	r0, [r2, #0]
 80088d0:	7019      	strb	r1, [r3, #0]
 80088d2:	4608      	mov	r0, r1
 80088d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088d8:	4770      	bx	lr

080088da <__sfputs_r>:
 80088da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088dc:	4606      	mov	r6, r0
 80088de:	460f      	mov	r7, r1
 80088e0:	4614      	mov	r4, r2
 80088e2:	18d5      	adds	r5, r2, r3
 80088e4:	42ac      	cmp	r4, r5
 80088e6:	d101      	bne.n	80088ec <__sfputs_r+0x12>
 80088e8:	2000      	movs	r0, #0
 80088ea:	e007      	b.n	80088fc <__sfputs_r+0x22>
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	463a      	mov	r2, r7
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff ffda 	bl	80088ac <__sfputc_r>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d1f3      	bne.n	80088e4 <__sfputs_r+0xa>
 80088fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008900 <_vfiprintf_r>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	460d      	mov	r5, r1
 8008906:	b09d      	sub	sp, #116	@ 0x74
 8008908:	4614      	mov	r4, r2
 800890a:	4698      	mov	r8, r3
 800890c:	4606      	mov	r6, r0
 800890e:	b118      	cbz	r0, 8008918 <_vfiprintf_r+0x18>
 8008910:	6a03      	ldr	r3, [r0, #32]
 8008912:	b90b      	cbnz	r3, 8008918 <_vfiprintf_r+0x18>
 8008914:	f7ff fb20 	bl	8007f58 <__sinit>
 8008918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800891a:	07d9      	lsls	r1, r3, #31
 800891c:	d405      	bmi.n	800892a <_vfiprintf_r+0x2a>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	059a      	lsls	r2, r3, #22
 8008922:	d402      	bmi.n	800892a <_vfiprintf_r+0x2a>
 8008924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008926:	f7ff fe0e 	bl	8008546 <__retarget_lock_acquire_recursive>
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	071b      	lsls	r3, r3, #28
 800892e:	d501      	bpl.n	8008934 <_vfiprintf_r+0x34>
 8008930:	692b      	ldr	r3, [r5, #16]
 8008932:	b99b      	cbnz	r3, 800895c <_vfiprintf_r+0x5c>
 8008934:	4629      	mov	r1, r5
 8008936:	4630      	mov	r0, r6
 8008938:	f7ff fd26 	bl	8008388 <__swsetup_r>
 800893c:	b170      	cbz	r0, 800895c <_vfiprintf_r+0x5c>
 800893e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008940:	07dc      	lsls	r4, r3, #31
 8008942:	d504      	bpl.n	800894e <_vfiprintf_r+0x4e>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	b01d      	add	sp, #116	@ 0x74
 800894a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	0598      	lsls	r0, r3, #22
 8008952:	d4f7      	bmi.n	8008944 <_vfiprintf_r+0x44>
 8008954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008956:	f7ff fdf7 	bl	8008548 <__retarget_lock_release_recursive>
 800895a:	e7f3      	b.n	8008944 <_vfiprintf_r+0x44>
 800895c:	2300      	movs	r3, #0
 800895e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008960:	2320      	movs	r3, #32
 8008962:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008966:	f8cd 800c 	str.w	r8, [sp, #12]
 800896a:	2330      	movs	r3, #48	@ 0x30
 800896c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b1c <_vfiprintf_r+0x21c>
 8008970:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008974:	f04f 0901 	mov.w	r9, #1
 8008978:	4623      	mov	r3, r4
 800897a:	469a      	mov	sl, r3
 800897c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008980:	b10a      	cbz	r2, 8008986 <_vfiprintf_r+0x86>
 8008982:	2a25      	cmp	r2, #37	@ 0x25
 8008984:	d1f9      	bne.n	800897a <_vfiprintf_r+0x7a>
 8008986:	ebba 0b04 	subs.w	fp, sl, r4
 800898a:	d00b      	beq.n	80089a4 <_vfiprintf_r+0xa4>
 800898c:	465b      	mov	r3, fp
 800898e:	4622      	mov	r2, r4
 8008990:	4629      	mov	r1, r5
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ffa1 	bl	80088da <__sfputs_r>
 8008998:	3001      	adds	r0, #1
 800899a:	f000 80a7 	beq.w	8008aec <_vfiprintf_r+0x1ec>
 800899e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089a0:	445a      	add	r2, fp
 80089a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80089a4:	f89a 3000 	ldrb.w	r3, [sl]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 809f 	beq.w	8008aec <_vfiprintf_r+0x1ec>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295
 80089b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b8:	f10a 0a01 	add.w	sl, sl, #1
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	9307      	str	r3, [sp, #28]
 80089c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80089c6:	4654      	mov	r4, sl
 80089c8:	2205      	movs	r2, #5
 80089ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ce:	4853      	ldr	r0, [pc, #332]	@ (8008b1c <_vfiprintf_r+0x21c>)
 80089d0:	f7f7 fbfe 	bl	80001d0 <memchr>
 80089d4:	9a04      	ldr	r2, [sp, #16]
 80089d6:	b9d8      	cbnz	r0, 8008a10 <_vfiprintf_r+0x110>
 80089d8:	06d1      	lsls	r1, r2, #27
 80089da:	bf44      	itt	mi
 80089dc:	2320      	movmi	r3, #32
 80089de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e2:	0713      	lsls	r3, r2, #28
 80089e4:	bf44      	itt	mi
 80089e6:	232b      	movmi	r3, #43	@ 0x2b
 80089e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ec:	f89a 3000 	ldrb.w	r3, [sl]
 80089f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089f2:	d015      	beq.n	8008a20 <_vfiprintf_r+0x120>
 80089f4:	9a07      	ldr	r2, [sp, #28]
 80089f6:	4654      	mov	r4, sl
 80089f8:	2000      	movs	r0, #0
 80089fa:	f04f 0c0a 	mov.w	ip, #10
 80089fe:	4621      	mov	r1, r4
 8008a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a04:	3b30      	subs	r3, #48	@ 0x30
 8008a06:	2b09      	cmp	r3, #9
 8008a08:	d94b      	bls.n	8008aa2 <_vfiprintf_r+0x1a2>
 8008a0a:	b1b0      	cbz	r0, 8008a3a <_vfiprintf_r+0x13a>
 8008a0c:	9207      	str	r2, [sp, #28]
 8008a0e:	e014      	b.n	8008a3a <_vfiprintf_r+0x13a>
 8008a10:	eba0 0308 	sub.w	r3, r0, r8
 8008a14:	fa09 f303 	lsl.w	r3, r9, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	46a2      	mov	sl, r4
 8008a1e:	e7d2      	b.n	80089c6 <_vfiprintf_r+0xc6>
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	1d19      	adds	r1, r3, #4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	9103      	str	r1, [sp, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	bfbb      	ittet	lt
 8008a2c:	425b      	neglt	r3, r3
 8008a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a32:	9307      	strge	r3, [sp, #28]
 8008a34:	9307      	strlt	r3, [sp, #28]
 8008a36:	bfb8      	it	lt
 8008a38:	9204      	strlt	r2, [sp, #16]
 8008a3a:	7823      	ldrb	r3, [r4, #0]
 8008a3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a3e:	d10a      	bne.n	8008a56 <_vfiprintf_r+0x156>
 8008a40:	7863      	ldrb	r3, [r4, #1]
 8008a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a44:	d132      	bne.n	8008aac <_vfiprintf_r+0x1ac>
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	1d1a      	adds	r2, r3, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	9203      	str	r2, [sp, #12]
 8008a4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a52:	3402      	adds	r4, #2
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b2c <_vfiprintf_r+0x22c>
 8008a5a:	7821      	ldrb	r1, [r4, #0]
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	4650      	mov	r0, sl
 8008a60:	f7f7 fbb6 	bl	80001d0 <memchr>
 8008a64:	b138      	cbz	r0, 8008a76 <_vfiprintf_r+0x176>
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	eba0 000a 	sub.w	r0, r0, sl
 8008a6c:	2240      	movs	r2, #64	@ 0x40
 8008a6e:	4082      	lsls	r2, r0
 8008a70:	4313      	orrs	r3, r2
 8008a72:	3401      	adds	r4, #1
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7a:	4829      	ldr	r0, [pc, #164]	@ (8008b20 <_vfiprintf_r+0x220>)
 8008a7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a80:	2206      	movs	r2, #6
 8008a82:	f7f7 fba5 	bl	80001d0 <memchr>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d03f      	beq.n	8008b0a <_vfiprintf_r+0x20a>
 8008a8a:	4b26      	ldr	r3, [pc, #152]	@ (8008b24 <_vfiprintf_r+0x224>)
 8008a8c:	bb1b      	cbnz	r3, 8008ad6 <_vfiprintf_r+0x1d6>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	3307      	adds	r3, #7
 8008a92:	f023 0307 	bic.w	r3, r3, #7
 8008a96:	3308      	adds	r3, #8
 8008a98:	9303      	str	r3, [sp, #12]
 8008a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9c:	443b      	add	r3, r7
 8008a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa0:	e76a      	b.n	8008978 <_vfiprintf_r+0x78>
 8008aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	e7a8      	b.n	80089fe <_vfiprintf_r+0xfe>
 8008aac:	2300      	movs	r3, #0
 8008aae:	3401      	adds	r4, #1
 8008ab0:	9305      	str	r3, [sp, #20]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	f04f 0c0a 	mov.w	ip, #10
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008abe:	3a30      	subs	r2, #48	@ 0x30
 8008ac0:	2a09      	cmp	r2, #9
 8008ac2:	d903      	bls.n	8008acc <_vfiprintf_r+0x1cc>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0c6      	beq.n	8008a56 <_vfiprintf_r+0x156>
 8008ac8:	9105      	str	r1, [sp, #20]
 8008aca:	e7c4      	b.n	8008a56 <_vfiprintf_r+0x156>
 8008acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e7f0      	b.n	8008ab8 <_vfiprintf_r+0x1b8>
 8008ad6:	ab03      	add	r3, sp, #12
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	462a      	mov	r2, r5
 8008adc:	4b12      	ldr	r3, [pc, #72]	@ (8008b28 <_vfiprintf_r+0x228>)
 8008ade:	a904      	add	r1, sp, #16
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f3af 8000 	nop.w
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	1c78      	adds	r0, r7, #1
 8008aea:	d1d6      	bne.n	8008a9a <_vfiprintf_r+0x19a>
 8008aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aee:	07d9      	lsls	r1, r3, #31
 8008af0:	d405      	bmi.n	8008afe <_vfiprintf_r+0x1fe>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	059a      	lsls	r2, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_vfiprintf_r+0x1fe>
 8008af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008afa:	f7ff fd25 	bl	8008548 <__retarget_lock_release_recursive>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	065b      	lsls	r3, r3, #25
 8008b02:	f53f af1f 	bmi.w	8008944 <_vfiprintf_r+0x44>
 8008b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b08:	e71e      	b.n	8008948 <_vfiprintf_r+0x48>
 8008b0a:	ab03      	add	r3, sp, #12
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	462a      	mov	r2, r5
 8008b10:	4b05      	ldr	r3, [pc, #20]	@ (8008b28 <_vfiprintf_r+0x228>)
 8008b12:	a904      	add	r1, sp, #16
 8008b14:	4630      	mov	r0, r6
 8008b16:	f000 f879 	bl	8008c0c <_printf_i>
 8008b1a:	e7e4      	b.n	8008ae6 <_vfiprintf_r+0x1e6>
 8008b1c:	080095a4 	.word	0x080095a4
 8008b20:	080095ae 	.word	0x080095ae
 8008b24:	00000000 	.word	0x00000000
 8008b28:	080088db 	.word	0x080088db
 8008b2c:	080095aa 	.word	0x080095aa

08008b30 <_printf_common>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	4616      	mov	r6, r2
 8008b36:	4698      	mov	r8, r3
 8008b38:	688a      	ldr	r2, [r1, #8]
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bfb8      	it	lt
 8008b44:	4613      	movlt	r3, r2
 8008b46:	6033      	str	r3, [r6, #0]
 8008b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	b10a      	cbz	r2, 8008b56 <_printf_common+0x26>
 8008b52:	3301      	adds	r3, #1
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	0699      	lsls	r1, r3, #26
 8008b5a:	bf42      	ittt	mi
 8008b5c:	6833      	ldrmi	r3, [r6, #0]
 8008b5e:	3302      	addmi	r3, #2
 8008b60:	6033      	strmi	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	f015 0506 	ands.w	r5, r5, #6
 8008b68:	d106      	bne.n	8008b78 <_printf_common+0x48>
 8008b6a:	f104 0a19 	add.w	sl, r4, #25
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	6832      	ldr	r2, [r6, #0]
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dc26      	bgt.n	8008bc6 <_printf_common+0x96>
 8008b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b7c:	6822      	ldr	r2, [r4, #0]
 8008b7e:	3b00      	subs	r3, #0
 8008b80:	bf18      	it	ne
 8008b82:	2301      	movne	r3, #1
 8008b84:	0692      	lsls	r2, r2, #26
 8008b86:	d42b      	bmi.n	8008be0 <_printf_common+0xb0>
 8008b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	4638      	mov	r0, r7
 8008b90:	47c8      	blx	r9
 8008b92:	3001      	adds	r0, #1
 8008b94:	d01e      	beq.n	8008bd4 <_printf_common+0xa4>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	f003 0306 	and.w	r3, r3, #6
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	bf02      	ittt	eq
 8008ba2:	68e5      	ldreq	r5, [r4, #12]
 8008ba4:	6833      	ldreq	r3, [r6, #0]
 8008ba6:	1aed      	subeq	r5, r5, r3
 8008ba8:	68a3      	ldr	r3, [r4, #8]
 8008baa:	bf0c      	ite	eq
 8008bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb0:	2500      	movne	r5, #0
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	bfc4      	itt	gt
 8008bb6:	1a9b      	subgt	r3, r3, r2
 8008bb8:	18ed      	addgt	r5, r5, r3
 8008bba:	2600      	movs	r6, #0
 8008bbc:	341a      	adds	r4, #26
 8008bbe:	42b5      	cmp	r5, r6
 8008bc0:	d11a      	bne.n	8008bf8 <_printf_common+0xc8>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e008      	b.n	8008bd8 <_printf_common+0xa8>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4652      	mov	r2, sl
 8008bca:	4641      	mov	r1, r8
 8008bcc:	4638      	mov	r0, r7
 8008bce:	47c8      	blx	r9
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d103      	bne.n	8008bdc <_printf_common+0xac>
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bdc:	3501      	adds	r5, #1
 8008bde:	e7c6      	b.n	8008b6e <_printf_common+0x3e>
 8008be0:	18e1      	adds	r1, r4, r3
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	2030      	movs	r0, #48	@ 0x30
 8008be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bea:	4422      	add	r2, r4
 8008bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	e7c7      	b.n	8008b88 <_printf_common+0x58>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c8      	blx	r9
 8008c02:	3001      	adds	r0, #1
 8008c04:	d0e6      	beq.n	8008bd4 <_printf_common+0xa4>
 8008c06:	3601      	adds	r6, #1
 8008c08:	e7d9      	b.n	8008bbe <_printf_common+0x8e>
	...

08008c0c <_printf_i>:
 8008c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	7e0f      	ldrb	r7, [r1, #24]
 8008c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c14:	2f78      	cmp	r7, #120	@ 0x78
 8008c16:	4691      	mov	r9, r2
 8008c18:	4680      	mov	r8, r0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	469a      	mov	sl, r3
 8008c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c22:	d807      	bhi.n	8008c34 <_printf_i+0x28>
 8008c24:	2f62      	cmp	r7, #98	@ 0x62
 8008c26:	d80a      	bhi.n	8008c3e <_printf_i+0x32>
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	f000 80d1 	beq.w	8008dd0 <_printf_i+0x1c4>
 8008c2e:	2f58      	cmp	r7, #88	@ 0x58
 8008c30:	f000 80b8 	beq.w	8008da4 <_printf_i+0x198>
 8008c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c3c:	e03a      	b.n	8008cb4 <_printf_i+0xa8>
 8008c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c42:	2b15      	cmp	r3, #21
 8008c44:	d8f6      	bhi.n	8008c34 <_printf_i+0x28>
 8008c46:	a101      	add	r1, pc, #4	@ (adr r1, 8008c4c <_printf_i+0x40>)
 8008c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c4c:	08008ca5 	.word	0x08008ca5
 8008c50:	08008cb9 	.word	0x08008cb9
 8008c54:	08008c35 	.word	0x08008c35
 8008c58:	08008c35 	.word	0x08008c35
 8008c5c:	08008c35 	.word	0x08008c35
 8008c60:	08008c35 	.word	0x08008c35
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008c35 	.word	0x08008c35
 8008c6c:	08008c35 	.word	0x08008c35
 8008c70:	08008c35 	.word	0x08008c35
 8008c74:	08008c35 	.word	0x08008c35
 8008c78:	08008db7 	.word	0x08008db7
 8008c7c:	08008ce3 	.word	0x08008ce3
 8008c80:	08008d71 	.word	0x08008d71
 8008c84:	08008c35 	.word	0x08008c35
 8008c88:	08008c35 	.word	0x08008c35
 8008c8c:	08008dd9 	.word	0x08008dd9
 8008c90:	08008c35 	.word	0x08008c35
 8008c94:	08008ce3 	.word	0x08008ce3
 8008c98:	08008c35 	.word	0x08008c35
 8008c9c:	08008c35 	.word	0x08008c35
 8008ca0:	08008d79 	.word	0x08008d79
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	1d1a      	adds	r2, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6032      	str	r2, [r6, #0]
 8008cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e09c      	b.n	8008df2 <_printf_i+0x1e6>
 8008cb8:	6833      	ldr	r3, [r6, #0]
 8008cba:	6820      	ldr	r0, [r4, #0]
 8008cbc:	1d19      	adds	r1, r3, #4
 8008cbe:	6031      	str	r1, [r6, #0]
 8008cc0:	0606      	lsls	r6, r0, #24
 8008cc2:	d501      	bpl.n	8008cc8 <_printf_i+0xbc>
 8008cc4:	681d      	ldr	r5, [r3, #0]
 8008cc6:	e003      	b.n	8008cd0 <_printf_i+0xc4>
 8008cc8:	0645      	lsls	r5, r0, #25
 8008cca:	d5fb      	bpl.n	8008cc4 <_printf_i+0xb8>
 8008ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	da03      	bge.n	8008cdc <_printf_i+0xd0>
 8008cd4:	232d      	movs	r3, #45	@ 0x2d
 8008cd6:	426d      	negs	r5, r5
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cdc:	4858      	ldr	r0, [pc, #352]	@ (8008e40 <_printf_i+0x234>)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e011      	b.n	8008d06 <_printf_i+0xfa>
 8008ce2:	6821      	ldr	r1, [r4, #0]
 8008ce4:	6833      	ldr	r3, [r6, #0]
 8008ce6:	0608      	lsls	r0, r1, #24
 8008ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cec:	d402      	bmi.n	8008cf4 <_printf_i+0xe8>
 8008cee:	0649      	lsls	r1, r1, #25
 8008cf0:	bf48      	it	mi
 8008cf2:	b2ad      	uxthmi	r5, r5
 8008cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cf6:	4852      	ldr	r0, [pc, #328]	@ (8008e40 <_printf_i+0x234>)
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	bf14      	ite	ne
 8008cfc:	230a      	movne	r3, #10
 8008cfe:	2308      	moveq	r3, #8
 8008d00:	2100      	movs	r1, #0
 8008d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d06:	6866      	ldr	r6, [r4, #4]
 8008d08:	60a6      	str	r6, [r4, #8]
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	db05      	blt.n	8008d1a <_printf_i+0x10e>
 8008d0e:	6821      	ldr	r1, [r4, #0]
 8008d10:	432e      	orrs	r6, r5
 8008d12:	f021 0104 	bic.w	r1, r1, #4
 8008d16:	6021      	str	r1, [r4, #0]
 8008d18:	d04b      	beq.n	8008db2 <_printf_i+0x1a6>
 8008d1a:	4616      	mov	r6, r2
 8008d1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d20:	fb03 5711 	mls	r7, r3, r1, r5
 8008d24:	5dc7      	ldrb	r7, [r0, r7]
 8008d26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d2a:	462f      	mov	r7, r5
 8008d2c:	42bb      	cmp	r3, r7
 8008d2e:	460d      	mov	r5, r1
 8008d30:	d9f4      	bls.n	8008d1c <_printf_i+0x110>
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d10b      	bne.n	8008d4e <_printf_i+0x142>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	07df      	lsls	r7, r3, #31
 8008d3a:	d508      	bpl.n	8008d4e <_printf_i+0x142>
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	6861      	ldr	r1, [r4, #4]
 8008d40:	4299      	cmp	r1, r3
 8008d42:	bfde      	ittt	le
 8008d44:	2330      	movle	r3, #48	@ 0x30
 8008d46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d4e:	1b92      	subs	r2, r2, r6
 8008d50:	6122      	str	r2, [r4, #16]
 8008d52:	f8cd a000 	str.w	sl, [sp]
 8008d56:	464b      	mov	r3, r9
 8008d58:	aa03      	add	r2, sp, #12
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	f7ff fee7 	bl	8008b30 <_printf_common>
 8008d62:	3001      	adds	r0, #1
 8008d64:	d14a      	bne.n	8008dfc <_printf_i+0x1f0>
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	b004      	add	sp, #16
 8008d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	f043 0320 	orr.w	r3, r3, #32
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	4832      	ldr	r0, [pc, #200]	@ (8008e44 <_printf_i+0x238>)
 8008d7a:	2778      	movs	r7, #120	@ 0x78
 8008d7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	6831      	ldr	r1, [r6, #0]
 8008d84:	061f      	lsls	r7, r3, #24
 8008d86:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d8a:	d402      	bmi.n	8008d92 <_printf_i+0x186>
 8008d8c:	065f      	lsls	r7, r3, #25
 8008d8e:	bf48      	it	mi
 8008d90:	b2ad      	uxthmi	r5, r5
 8008d92:	6031      	str	r1, [r6, #0]
 8008d94:	07d9      	lsls	r1, r3, #31
 8008d96:	bf44      	itt	mi
 8008d98:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9c:	6023      	strmi	r3, [r4, #0]
 8008d9e:	b11d      	cbz	r5, 8008da8 <_printf_i+0x19c>
 8008da0:	2310      	movs	r3, #16
 8008da2:	e7ad      	b.n	8008d00 <_printf_i+0xf4>
 8008da4:	4826      	ldr	r0, [pc, #152]	@ (8008e40 <_printf_i+0x234>)
 8008da6:	e7e9      	b.n	8008d7c <_printf_i+0x170>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	f023 0320 	bic.w	r3, r3, #32
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	e7f6      	b.n	8008da0 <_printf_i+0x194>
 8008db2:	4616      	mov	r6, r2
 8008db4:	e7bd      	b.n	8008d32 <_printf_i+0x126>
 8008db6:	6833      	ldr	r3, [r6, #0]
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	6961      	ldr	r1, [r4, #20]
 8008dbc:	1d18      	adds	r0, r3, #4
 8008dbe:	6030      	str	r0, [r6, #0]
 8008dc0:	062e      	lsls	r6, r5, #24
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	d501      	bpl.n	8008dca <_printf_i+0x1be>
 8008dc6:	6019      	str	r1, [r3, #0]
 8008dc8:	e002      	b.n	8008dd0 <_printf_i+0x1c4>
 8008dca:	0668      	lsls	r0, r5, #25
 8008dcc:	d5fb      	bpl.n	8008dc6 <_printf_i+0x1ba>
 8008dce:	8019      	strh	r1, [r3, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	6123      	str	r3, [r4, #16]
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	e7bc      	b.n	8008d52 <_printf_i+0x146>
 8008dd8:	6833      	ldr	r3, [r6, #0]
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	6032      	str	r2, [r6, #0]
 8008dde:	681e      	ldr	r6, [r3, #0]
 8008de0:	6862      	ldr	r2, [r4, #4]
 8008de2:	2100      	movs	r1, #0
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7f7 f9f3 	bl	80001d0 <memchr>
 8008dea:	b108      	cbz	r0, 8008df0 <_printf_i+0x1e4>
 8008dec:	1b80      	subs	r0, r0, r6
 8008dee:	6060      	str	r0, [r4, #4]
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	2300      	movs	r3, #0
 8008df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dfa:	e7aa      	b.n	8008d52 <_printf_i+0x146>
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	4632      	mov	r2, r6
 8008e00:	4649      	mov	r1, r9
 8008e02:	4640      	mov	r0, r8
 8008e04:	47d0      	blx	sl
 8008e06:	3001      	adds	r0, #1
 8008e08:	d0ad      	beq.n	8008d66 <_printf_i+0x15a>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	079b      	lsls	r3, r3, #30
 8008e0e:	d413      	bmi.n	8008e38 <_printf_i+0x22c>
 8008e10:	68e0      	ldr	r0, [r4, #12]
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	4298      	cmp	r0, r3
 8008e16:	bfb8      	it	lt
 8008e18:	4618      	movlt	r0, r3
 8008e1a:	e7a6      	b.n	8008d6a <_printf_i+0x15e>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4632      	mov	r2, r6
 8008e20:	4649      	mov	r1, r9
 8008e22:	4640      	mov	r0, r8
 8008e24:	47d0      	blx	sl
 8008e26:	3001      	adds	r0, #1
 8008e28:	d09d      	beq.n	8008d66 <_printf_i+0x15a>
 8008e2a:	3501      	adds	r5, #1
 8008e2c:	68e3      	ldr	r3, [r4, #12]
 8008e2e:	9903      	ldr	r1, [sp, #12]
 8008e30:	1a5b      	subs	r3, r3, r1
 8008e32:	42ab      	cmp	r3, r5
 8008e34:	dcf2      	bgt.n	8008e1c <_printf_i+0x210>
 8008e36:	e7eb      	b.n	8008e10 <_printf_i+0x204>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	f104 0619 	add.w	r6, r4, #25
 8008e3e:	e7f5      	b.n	8008e2c <_printf_i+0x220>
 8008e40:	080095b5 	.word	0x080095b5
 8008e44:	080095c6 	.word	0x080095c6

08008e48 <__sflush_r>:
 8008e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	0716      	lsls	r6, r2, #28
 8008e52:	4605      	mov	r5, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	d454      	bmi.n	8008f02 <__sflush_r+0xba>
 8008e58:	684b      	ldr	r3, [r1, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dc02      	bgt.n	8008e64 <__sflush_r+0x1c>
 8008e5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dd48      	ble.n	8008ef6 <__sflush_r+0xae>
 8008e64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d045      	beq.n	8008ef6 <__sflush_r+0xae>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e70:	682f      	ldr	r7, [r5, #0]
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	d030      	beq.n	8008eda <__sflush_r+0x92>
 8008e78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	0759      	lsls	r1, r3, #29
 8008e7e:	d505      	bpl.n	8008e8c <__sflush_r+0x44>
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	1ad2      	subs	r2, r2, r3
 8008e84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e86:	b10b      	cbz	r3, 8008e8c <__sflush_r+0x44>
 8008e88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e90:	6a21      	ldr	r1, [r4, #32]
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b0      	blx	r6
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	d106      	bne.n	8008eaa <__sflush_r+0x62>
 8008e9c:	6829      	ldr	r1, [r5, #0]
 8008e9e:	291d      	cmp	r1, #29
 8008ea0:	d82b      	bhi.n	8008efa <__sflush_r+0xb2>
 8008ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f4c <__sflush_r+0x104>)
 8008ea4:	40ca      	lsrs	r2, r1
 8008ea6:	07d6      	lsls	r6, r2, #31
 8008ea8:	d527      	bpl.n	8008efa <__sflush_r+0xb2>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	6062      	str	r2, [r4, #4]
 8008eae:	04d9      	lsls	r1, r3, #19
 8008eb0:	6922      	ldr	r2, [r4, #16]
 8008eb2:	6022      	str	r2, [r4, #0]
 8008eb4:	d504      	bpl.n	8008ec0 <__sflush_r+0x78>
 8008eb6:	1c42      	adds	r2, r0, #1
 8008eb8:	d101      	bne.n	8008ebe <__sflush_r+0x76>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	b903      	cbnz	r3, 8008ec0 <__sflush_r+0x78>
 8008ebe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ec2:	602f      	str	r7, [r5, #0]
 8008ec4:	b1b9      	cbz	r1, 8008ef6 <__sflush_r+0xae>
 8008ec6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008eca:	4299      	cmp	r1, r3
 8008ecc:	d002      	beq.n	8008ed4 <__sflush_r+0x8c>
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f7ff fb4a 	bl	8008568 <_free_r>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ed8:	e00d      	b.n	8008ef6 <__sflush_r+0xae>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b0      	blx	r6
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	1c50      	adds	r0, r2, #1
 8008ee4:	d1c9      	bne.n	8008e7a <__sflush_r+0x32>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0c6      	beq.n	8008e7a <__sflush_r+0x32>
 8008eec:	2b1d      	cmp	r3, #29
 8008eee:	d001      	beq.n	8008ef4 <__sflush_r+0xac>
 8008ef0:	2b16      	cmp	r3, #22
 8008ef2:	d11e      	bne.n	8008f32 <__sflush_r+0xea>
 8008ef4:	602f      	str	r7, [r5, #0]
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e022      	b.n	8008f40 <__sflush_r+0xf8>
 8008efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008efe:	b21b      	sxth	r3, r3
 8008f00:	e01b      	b.n	8008f3a <__sflush_r+0xf2>
 8008f02:	690f      	ldr	r7, [r1, #16]
 8008f04:	2f00      	cmp	r7, #0
 8008f06:	d0f6      	beq.n	8008ef6 <__sflush_r+0xae>
 8008f08:	0793      	lsls	r3, r2, #30
 8008f0a:	680e      	ldr	r6, [r1, #0]
 8008f0c:	bf08      	it	eq
 8008f0e:	694b      	ldreq	r3, [r1, #20]
 8008f10:	600f      	str	r7, [r1, #0]
 8008f12:	bf18      	it	ne
 8008f14:	2300      	movne	r3, #0
 8008f16:	eba6 0807 	sub.w	r8, r6, r7
 8008f1a:	608b      	str	r3, [r1, #8]
 8008f1c:	f1b8 0f00 	cmp.w	r8, #0
 8008f20:	dde9      	ble.n	8008ef6 <__sflush_r+0xae>
 8008f22:	6a21      	ldr	r1, [r4, #32]
 8008f24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f26:	4643      	mov	r3, r8
 8008f28:	463a      	mov	r2, r7
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b0      	blx	r6
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	dc08      	bgt.n	8008f44 <__sflush_r+0xfc>
 8008f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f44:	4407      	add	r7, r0
 8008f46:	eba8 0800 	sub.w	r8, r8, r0
 8008f4a:	e7e7      	b.n	8008f1c <__sflush_r+0xd4>
 8008f4c:	20400001 	.word	0x20400001

08008f50 <_fflush_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	690b      	ldr	r3, [r1, #16]
 8008f54:	4605      	mov	r5, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	b913      	cbnz	r3, 8008f60 <_fflush_r+0x10>
 8008f5a:	2500      	movs	r5, #0
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	b118      	cbz	r0, 8008f6a <_fflush_r+0x1a>
 8008f62:	6a03      	ldr	r3, [r0, #32]
 8008f64:	b90b      	cbnz	r3, 8008f6a <_fflush_r+0x1a>
 8008f66:	f7fe fff7 	bl	8007f58 <__sinit>
 8008f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f3      	beq.n	8008f5a <_fflush_r+0xa>
 8008f72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f74:	07d0      	lsls	r0, r2, #31
 8008f76:	d404      	bmi.n	8008f82 <_fflush_r+0x32>
 8008f78:	0599      	lsls	r1, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_fflush_r+0x32>
 8008f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f7e:	f7ff fae2 	bl	8008546 <__retarget_lock_acquire_recursive>
 8008f82:	4628      	mov	r0, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f7ff ff5f 	bl	8008e48 <__sflush_r>
 8008f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f8c:	07da      	lsls	r2, r3, #31
 8008f8e:	4605      	mov	r5, r0
 8008f90:	d4e4      	bmi.n	8008f5c <_fflush_r+0xc>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	059b      	lsls	r3, r3, #22
 8008f96:	d4e1      	bmi.n	8008f5c <_fflush_r+0xc>
 8008f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f9a:	f7ff fad5 	bl	8008548 <__retarget_lock_release_recursive>
 8008f9e:	e7dd      	b.n	8008f5c <_fflush_r+0xc>

08008fa0 <__swhatbuf_r>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	b096      	sub	sp, #88	@ 0x58
 8008fac:	4615      	mov	r5, r2
 8008fae:	461e      	mov	r6, r3
 8008fb0:	da0d      	bge.n	8008fce <__swhatbuf_r+0x2e>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fb8:	f04f 0100 	mov.w	r1, #0
 8008fbc:	bf14      	ite	ne
 8008fbe:	2340      	movne	r3, #64	@ 0x40
 8008fc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	6031      	str	r1, [r6, #0]
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	b016      	add	sp, #88	@ 0x58
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	466a      	mov	r2, sp
 8008fd0:	f000 f862 	bl	8009098 <_fstat_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	dbec      	blt.n	8008fb2 <__swhatbuf_r+0x12>
 8008fd8:	9901      	ldr	r1, [sp, #4]
 8008fda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fe2:	4259      	negs	r1, r3
 8008fe4:	4159      	adcs	r1, r3
 8008fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fea:	e7eb      	b.n	8008fc4 <__swhatbuf_r+0x24>

08008fec <__smakebuf_r>:
 8008fec:	898b      	ldrh	r3, [r1, #12]
 8008fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ff0:	079d      	lsls	r5, r3, #30
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	d507      	bpl.n	8009008 <__smakebuf_r+0x1c>
 8008ff8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	6123      	str	r3, [r4, #16]
 8009000:	2301      	movs	r3, #1
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	b003      	add	sp, #12
 8009006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009008:	ab01      	add	r3, sp, #4
 800900a:	466a      	mov	r2, sp
 800900c:	f7ff ffc8 	bl	8008fa0 <__swhatbuf_r>
 8009010:	9f00      	ldr	r7, [sp, #0]
 8009012:	4605      	mov	r5, r0
 8009014:	4639      	mov	r1, r7
 8009016:	4630      	mov	r0, r6
 8009018:	f7fe fe86 	bl	8007d28 <_malloc_r>
 800901c:	b948      	cbnz	r0, 8009032 <__smakebuf_r+0x46>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	059a      	lsls	r2, r3, #22
 8009024:	d4ee      	bmi.n	8009004 <__smakebuf_r+0x18>
 8009026:	f023 0303 	bic.w	r3, r3, #3
 800902a:	f043 0302 	orr.w	r3, r3, #2
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	e7e2      	b.n	8008ff8 <__smakebuf_r+0xc>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	6020      	str	r0, [r4, #0]
 8009036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	9b01      	ldr	r3, [sp, #4]
 800903e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009042:	b15b      	cbz	r3, 800905c <__smakebuf_r+0x70>
 8009044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009048:	4630      	mov	r0, r6
 800904a:	f000 f837 	bl	80090bc <_isatty_r>
 800904e:	b128      	cbz	r0, 800905c <__smakebuf_r+0x70>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f023 0303 	bic.w	r3, r3, #3
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	431d      	orrs	r5, r3
 8009060:	81a5      	strh	r5, [r4, #12]
 8009062:	e7cf      	b.n	8009004 <__smakebuf_r+0x18>

08009064 <memmove>:
 8009064:	4288      	cmp	r0, r1
 8009066:	b510      	push	{r4, lr}
 8009068:	eb01 0402 	add.w	r4, r1, r2
 800906c:	d902      	bls.n	8009074 <memmove+0x10>
 800906e:	4284      	cmp	r4, r0
 8009070:	4623      	mov	r3, r4
 8009072:	d807      	bhi.n	8009084 <memmove+0x20>
 8009074:	1e43      	subs	r3, r0, #1
 8009076:	42a1      	cmp	r1, r4
 8009078:	d008      	beq.n	800908c <memmove+0x28>
 800907a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800907e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009082:	e7f8      	b.n	8009076 <memmove+0x12>
 8009084:	4402      	add	r2, r0
 8009086:	4601      	mov	r1, r0
 8009088:	428a      	cmp	r2, r1
 800908a:	d100      	bne.n	800908e <memmove+0x2a>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009096:	e7f7      	b.n	8009088 <memmove+0x24>

08009098 <_fstat_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	@ (80090b8 <_fstat_r+0x20>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f7f8 fb94 	bl	80017d2 <_fstat>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d102      	bne.n	80090b4 <_fstat_r+0x1c>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	b103      	cbz	r3, 80090b4 <_fstat_r+0x1c>
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	20000660 	.word	0x20000660

080090bc <_isatty_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	@ (80090d8 <_isatty_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f8 fb93 	bl	80017f2 <_isatty>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_isatty_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_isatty_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000660 	.word	0x20000660

080090dc <_realloc_r>:
 80090dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e0:	4607      	mov	r7, r0
 80090e2:	4614      	mov	r4, r2
 80090e4:	460d      	mov	r5, r1
 80090e6:	b921      	cbnz	r1, 80090f2 <_realloc_r+0x16>
 80090e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ec:	4611      	mov	r1, r2
 80090ee:	f7fe be1b 	b.w	8007d28 <_malloc_r>
 80090f2:	b92a      	cbnz	r2, 8009100 <_realloc_r+0x24>
 80090f4:	f7ff fa38 	bl	8008568 <_free_r>
 80090f8:	4625      	mov	r5, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009100:	f000 f81a 	bl	8009138 <_malloc_usable_size_r>
 8009104:	4284      	cmp	r4, r0
 8009106:	4606      	mov	r6, r0
 8009108:	d802      	bhi.n	8009110 <_realloc_r+0x34>
 800910a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800910e:	d8f4      	bhi.n	80090fa <_realloc_r+0x1e>
 8009110:	4621      	mov	r1, r4
 8009112:	4638      	mov	r0, r7
 8009114:	f7fe fe08 	bl	8007d28 <_malloc_r>
 8009118:	4680      	mov	r8, r0
 800911a:	b908      	cbnz	r0, 8009120 <_realloc_r+0x44>
 800911c:	4645      	mov	r5, r8
 800911e:	e7ec      	b.n	80090fa <_realloc_r+0x1e>
 8009120:	42b4      	cmp	r4, r6
 8009122:	4622      	mov	r2, r4
 8009124:	4629      	mov	r1, r5
 8009126:	bf28      	it	cs
 8009128:	4632      	movcs	r2, r6
 800912a:	f7ff fa0e 	bl	800854a <memcpy>
 800912e:	4629      	mov	r1, r5
 8009130:	4638      	mov	r0, r7
 8009132:	f7ff fa19 	bl	8008568 <_free_r>
 8009136:	e7f1      	b.n	800911c <_realloc_r+0x40>

08009138 <_malloc_usable_size_r>:
 8009138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913c:	1f18      	subs	r0, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbc      	itt	lt
 8009142:	580b      	ldrlt	r3, [r1, r0]
 8009144:	18c0      	addlt	r0, r0, r3
 8009146:	4770      	bx	lr

08009148 <_init>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr

08009154 <_fini>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr
