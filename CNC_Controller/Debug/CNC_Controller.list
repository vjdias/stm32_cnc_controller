
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009364  08009364  0000a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097e4  080097e4  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080097e4  080097e4  0000a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097ec  080097ec  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097ec  080097ec  0000a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097f0  080097f0  0000a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080097f4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  2000006c  08009860  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  08009860  0000badc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c5e  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba5  00000000  00000000  00021cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  000258a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001041  00000000  00000000  00026dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028690  00000000  00000000  00027e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f15c  00000000  00000000  00050491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f62c2  00000000  00000000  0006f5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001658af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  001658f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800934c 	.word	0x0800934c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800934c 	.word	0x0800934c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <has_header_tail>:
	return 0;
}

// Generic header/tail validation
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d011      	beq.n	80005ec <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d90e      	bls.n	80005ec <has_header_tail+0x40>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d109      	bne.n	80005ec <has_header_tail+0x40>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3b01      	subs	r3, #1
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d101      	bne.n	80005ec <has_header_tail+0x40>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <has_header_tail+0x42>
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <frame_expect_req>:
// =====================
// Frame validators
// =====================
// Ensure buffer has min length, proper header/tail, and expected type
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4613      	mov	r3, r2
 8000608:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <frame_expect_req+0x1e>
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d202      	bcs.n	800061e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	e012      	b.n	8000644 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800061e:	2355      	movs	r3, #85	@ 0x55
 8000620:	22aa      	movs	r2, #170	@ 0xaa
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ffc1 	bl	80005ac <has_header_tail>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3301      	adds	r3, #1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	429a      	cmp	r2, r3
 800063a:	d002      	beq.n	8000642 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 800063c:	f06f 0301 	mvn.w	r3, #1
 8000640:	e000      	b.n	8000644 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <led_ctrl_req_decoder>:

// New LED_CTRL (RGB) request is 9 bytes total:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask, [4]=R, [5]=G, [6]=B,
// [7]=parity(byte XOR over 1..6), [8]=0x55

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <led_ctrl_req_decoder+0x18>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	e025      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, 9);
 800066a:	2309      	movs	r3, #9
 800066c:	2207      	movs	r2, #7
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffc2 	bl	80005fa <frame_expect_req>
 8000676:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <led_ctrl_req_decoder+0x36>
        return st;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	e019      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    out->frameId = raw[2];
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3302      	adds	r3, #2
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3303      	adds	r3, #3
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	705a      	strb	r2, [r3, #1]
    out->r = raw[4];
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3304      	adds	r3, #4
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	709a      	strb	r2, [r3, #2]
    out->g = raw[5];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	70da      	strb	r2, [r3, #3]
    out->b = raw[6];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3306      	adds	r3, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	711a      	strb	r2, [r3, #4]
    return PROTO_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 80006cc:	2248      	movs	r2, #72	@ 0x48
 80006ce:	2100      	movs	r1, #0
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f008 f8f3 	bl	80088bc <memset>
	r->resp = resp_fifo;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <router_init+0x36>
		handlers = *h;
 80006e2:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <router_init+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4614      	mov	r4, r2
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000088 	.word	0x20000088

08000704 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	if (n < 4)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d801      	bhi.n	8000718 <is_req_complete+0x14>
		return 0; // mínimo
 8000714:	2300      	movs	r3, #0
 8000716:	e01a      	b.n	800074e <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2baa      	cmp	r3, #170	@ 0xaa
 800071e:	d002      	beq.n	8000726 <is_req_complete+0x22>
		return -1; // inválido
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	e013      	b.n	800074e <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000726:	2303      	movs	r3, #3
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e00b      	b.n	8000744 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b55      	cmp	r3, #85	@ 0x55
 8000736:	d102      	bne.n	800073e <is_req_complete+0x3a>
			return (int) (i + 1);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	e007      	b.n	800074e <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ef      	bcc.n	800072c <is_req_complete+0x28>
	}
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	if (len < 4)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	f240 80a4 	bls.w	80008b8 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	3b01      	subs	r3, #1
 800077c:	2b1f      	cmp	r3, #31
 800077e:	f200 809d 	bhi.w	80008bc <dispatch+0x160>
 8000782:	a201      	add	r2, pc, #4	@ (adr r2, 8000788 <dispatch+0x2c>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000809 	.word	0x08000809
 800078c:	0800081f 	.word	0x0800081f
 8000790:	08000835 	.word	0x08000835
 8000794:	0800084b 	.word	0x0800084b
 8000798:	08000861 	.word	0x08000861
 800079c:	08000877 	.word	0x08000877
 80007a0:	0800088d 	.word	0x0800088d
 80007a4:	080008bd 	.word	0x080008bd
 80007a8:	080008bd 	.word	0x080008bd
 80007ac:	080008bd 	.word	0x080008bd
 80007b0:	080008bd 	.word	0x080008bd
 80007b4:	080008bd 	.word	0x080008bd
 80007b8:	080008bd 	.word	0x080008bd
 80007bc:	080008bd 	.word	0x080008bd
 80007c0:	080008bd 	.word	0x080008bd
 80007c4:	080008bd 	.word	0x080008bd
 80007c8:	080008bd 	.word	0x080008bd
 80007cc:	080008bd 	.word	0x080008bd
 80007d0:	080008bd 	.word	0x080008bd
 80007d4:	080008bd 	.word	0x080008bd
 80007d8:	080008bd 	.word	0x080008bd
 80007dc:	080008bd 	.word	0x080008bd
 80007e0:	080008bd 	.word	0x080008bd
 80007e4:	080008bd 	.word	0x080008bd
 80007e8:	080008bd 	.word	0x080008bd
 80007ec:	080008bd 	.word	0x080008bd
 80007f0:	080008bd 	.word	0x080008bd
 80007f4:	080008bd 	.word	0x080008bd
 80007f8:	080008bd 	.word	0x080008bd
 80007fc:	080008bd 	.word	0x080008bd
 8000800:	080008bd 	.word	0x080008bd
 8000804:	080008a3 	.word	0x080008a3
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <dispatch+0x188>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d057      	beq.n	80008c0 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <dispatch+0x188>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	4798      	blx	r3
		break;
 800081c:	e050      	b.n	80008c0 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <dispatch+0x188>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <dispatch+0x188>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	4798      	blx	r3
		break;
 8000832:	e047      	b.n	80008c4 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <dispatch+0x188>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d045      	beq.n	80008c8 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <dispatch+0x188>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	4798      	blx	r3
		break;
 8000848:	e03e      	b.n	80008c8 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <dispatch+0x188>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d03c      	beq.n	80008cc <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <dispatch+0x188>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	4798      	blx	r3
		break;
 800085e:	e035      	b.n	80008cc <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <dispatch+0x188>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d033      	beq.n	80008d0 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <dispatch+0x188>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	4798      	blx	r3
		break;
 8000874:	e02c      	b.n	80008d0 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <dispatch+0x188>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d02a      	beq.n	80008d4 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <dispatch+0x188>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	4798      	blx	r3
		break;
 800088a:	e023      	b.n	80008d4 <dispatch+0x178>
	case REQ_LED_CTRL:
		if (handlers.on_led_ctrl)
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <dispatch+0x188>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d021      	beq.n	80008d8 <dispatch+0x17c>
			handlers.on_led_ctrl(r, f, len);
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <dispatch+0x188>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	4798      	blx	r3
		break;
 80008a0:	e01a      	b.n	80008d8 <dispatch+0x17c>
	case REQ_FPGA_STATUS:
		if (handlers.on_fpga_status)
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <dispatch+0x188>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d018      	beq.n	80008dc <dispatch+0x180>
			handlers.on_fpga_status(r, f, len);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <dispatch+0x188>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	4798      	blx	r3
		break;
 80008b6:	e011      	b.n	80008dc <dispatch+0x180>
		return;
 80008b8:	bf00      	nop
 80008ba:	e010      	b.n	80008de <dispatch+0x182>
	default:
		break; // desconhecido
 80008bc:	bf00      	nop
 80008be:	e00e      	b.n	80008de <dispatch+0x182>
		break;
 80008c0:	bf00      	nop
 80008c2:	e00c      	b.n	80008de <dispatch+0x182>
		break;
 80008c4:	bf00      	nop
 80008c6:	e00a      	b.n	80008de <dispatch+0x182>
		break;
 80008c8:	bf00      	nop
 80008ca:	e008      	b.n	80008de <dispatch+0x182>
		break;
 80008cc:	bf00      	nop
 80008ce:	e006      	b.n	80008de <dispatch+0x182>
		break;
 80008d0:	bf00      	nop
 80008d2:	e004      	b.n	80008de <dispatch+0x182>
		break;
 80008d4:	bf00      	nop
 80008d6:	e002      	b.n	80008de <dispatch+0x182>
		break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <dispatch+0x182>
		break;
 80008dc:	bf00      	nop
	}
}
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000088 	.word	0x20000088

080008e8 <router_feed_bytes>:

void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e038      	b.n	800096c <router_feed_bytes+0x84>
		if (r->idx >= sizeof(r->acc))
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000900:	2b3f      	cmp	r3, #63	@ 0x3f
 8000902:	d903      	bls.n	800090c <router_feed_bytes+0x24>
			r->idx = 0; // evita overflow simples
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	441a      	add	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000918:	1c59      	adds	r1, r3, #1
 800091a:	b2c8      	uxtb	r0, r1
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000922:	4619      	mov	r1, r3
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	545a      	strb	r2, [r3, r1]
		int comp = is_req_complete(r->acc, r->idx);
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f7ff fee5 	bl	8000704 <is_req_complete>
 800093a:	6138      	str	r0, [r7, #16]
		if (comp < 0) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da04      	bge.n	800094c <router_feed_bytes+0x64>
			r->idx = 0;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			continue;
 800094a:	e00c      	b.n	8000966 <router_feed_bytes+0x7e>
		} // descarta até header
		if (comp > 0) {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b00      	cmp	r3, #0
 8000950:	dd09      	ble.n	8000966 <router_feed_bytes+0x7e>
			dispatch(r, r->acc, (uint32_t) comp);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4619      	mov	r1, r3
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff feff 	bl	800075c <dispatch>
			r->idx = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	for (uint32_t i = 0; i < len; i++) {
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3c2      	bcc.n	80008fa <router_feed_bytes+0x12>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <resp_fifo_create>:

response_fifo_t* resp_fifo_create(void) {
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
	response_fifo_t *q = (response_fifo_t*) calloc(1, sizeof(*q));
 8000984:	210c      	movs	r1, #12
 8000986:	2001      	movs	r0, #1
 8000988:	f007 fc5c 	bl	8008244 <calloc>
 800098c:	4603      	mov	r3, r0
 800098e:	607b      	str	r3, [r7, #4]
	return q;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <resp_fifo_pop>:
		q->head = n;
	q->tail = n;
	q->count++;
	return PROTO_OK;
}
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	if (!q || !q->head || !out)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <resp_fifo_pop+0x24>
		return 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e02e      	b.n	8000a1c <resp_fifo_pop+0x82>
	node_t *n = q->head;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	617b      	str	r3, [r7, #20]
	if (n->len > max_len)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <resp_fifo_pop+0x3a>
		return PROTO_ERR_RANGE;
 80009ce:	f06f 0303 	mvn.w	r3, #3
 80009d2:	e023      	b.n	8000a1c <resp_fifo_pop+0x82>
	memcpy(out, n->buf, n->len);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	461a      	mov	r2, r3
 80009de:	68b8      	ldr	r0, [r7, #8]
 80009e0:	f007 fff7 	bl	80089d2 <memcpy>
	int l = (int) n->len;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
	q->head = n->next;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	601a      	str	r2, [r3, #0]
	if (!q->head)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <resp_fifo_pop+0x66>
		q->tail = NULL;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
	q->count--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	609a      	str	r2, [r3, #8]
	free(n->buf);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 fc34 	bl	800827c <free>
	free(n);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f007 fc31 	bl	800827c <free>
	return l;
 8000a1a:	693b      	ldr	r3, [r7, #16]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <home_on_move_home+0x2c>)
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <home_on_move_home+0x30>)
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <home_on_move_home+0x34>)
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <home_on_move_home+0x38>)
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	2003      	movs	r0, #3
 8000a44:	f000 fa68 	bl	8000f18 <log_event_auto>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08009364 	.word	0x08009364
 8000a54:	0800937c 	.word	0x0800937c
 8000a58:	08009370 	.word	0x08009370
 8000a5c:	0800938c 	.word	0x0800938c

08000a60 <led_service_init>:
#include "Services/Log/log_service.h"
#include <stdio.h>

LOG_SVC_DEFINE(LOG_SVC_LED, "led");

void led_service_init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gi = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    // Configure RGB pins
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
    gi.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
    gi.Pin = LED_R_GPIO_PIN; HAL_GPIO_Init(LED_R_GPIO_PORT, &gi);
 8000a80:	2302      	movs	r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <led_service_init+0x74>)
 8000a8a:	f002 f91b 	bl	8002cc4 <HAL_GPIO_Init>
    gi.Pin = LED_G_GPIO_PIN; HAL_GPIO_Init(LED_G_GPIO_PORT, &gi);
 8000a8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <led_service_init+0x74>)
 8000a9a:	f002 f913 	bl	8002cc4 <HAL_GPIO_Init>
    gi.Pin = LED_B_GPIO_PIN; HAL_GPIO_Init(LED_B_GPIO_PORT, &gi);
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <led_service_init+0x74>)
 8000aa8:	f002 f90c 	bl	8002cc4 <HAL_GPIO_Init>
    // Default OFF
#if LED_ACTIVE_HIGH
    HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <led_service_init+0x74>)
 8000ab2:	f002 fb93 	bl	80031dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <led_service_init+0x74>)
 8000abe:	f002 fb8d 	bl	80031dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <led_service_init+0x74>)
 8000ac8:	f002 fb88 	bl	80031dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
#endif
#endif
}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <led_apply_rgb>:
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}

#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
static inline void led_apply_rgb(uint8_t r, uint8_t g, uint8_t b, uint8_t mask) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	4603      	mov	r3, r0
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	717b      	strb	r3, [r7, #5]
 8000af2:	4613      	mov	r3, r2
 8000af4:	713b      	strb	r3, [r7, #4]
    // Treat non-zero as ON (binary per channel). For PWM, integrate TIM later.
    if (mask & LED_MASK_R) {
 8000af6:	793b      	ldrb	r3, [r7, #4]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00a      	beq.n	8000b16 <led_apply_rgb+0x3e>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf14      	ite	ne
 8000b06:	2301      	movne	r3, #1
 8000b08:	2300      	moveq	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <led_apply_rgb+0x88>)
 8000b12:	f002 fb63 	bl	80031dc <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_G) {
 8000b16:	793b      	ldrb	r3, [r7, #4]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00b      	beq.n	8000b38 <led_apply_rgb+0x60>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b32:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <led_apply_rgb+0x88>)
 8000b34:	f002 fb52 	bl	80031dc <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_B) {
 8000b38:	793b      	ldrb	r3, [r7, #4]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00a      	beq.n	8000b58 <led_apply_rgb+0x80>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <led_apply_rgb+0x88>)
 8000b54:	f002 fb42 	bl	80031dc <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	48000400 	.word	0x48000400

08000b64 <led_on_led_ctrl>:
#endif

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b08b      	sub	sp, #44	@ 0x2c
 8000b68:	af06      	add	r7, sp, #24
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
    led_ctrl_req_t req;
    if (!frame)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d023      	beq.n	8000bbc <led_on_led_ctrl+0x58>
        return;
    if (led_ctrl_req_decoder(frame, len, &req) != PROTO_OK)
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	461a      	mov	r2, r3
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fd65 	bl	800064c <led_ctrl_req_decoder>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11b      	bne.n	8000bc0 <led_on_led_ctrl+0x5c>
        return;
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    led_apply_rgb(req.r, req.g, req.b, req.ledMask);
 8000b88:	7ab8      	ldrb	r0, [r7, #10]
 8000b8a:	7af9      	ldrb	r1, [r7, #11]
 8000b8c:	7b3a      	ldrb	r2, [r7, #12]
 8000b8e:	7a7b      	ldrb	r3, [r7, #9]
 8000b90:	f7ff ffa2 	bl	8000ad8 <led_apply_rgb>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "applied", "mask=0x%02X rgb=%u,%u,%u", (unsigned)req.ledMask, req.r, req.g, req.b);
 8000b94:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <led_on_led_ctrl+0x64>)
 8000b96:	7a7b      	ldrb	r3, [r7, #9]
 8000b98:	7ab9      	ldrb	r1, [r7, #10]
 8000b9a:	7af8      	ldrb	r0, [r7, #11]
 8000b9c:	7b3c      	ldrb	r4, [r7, #12]
 8000b9e:	9405      	str	r4, [sp, #20]
 8000ba0:	9004      	str	r0, [sp, #16]
 8000ba2:	9103      	str	r1, [sp, #12]
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <led_on_led_ctrl+0x68>)
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <led_on_led_ctrl+0x6c>)
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f000 f9af 	bl	8000f18 <log_event_auto>
 8000bba:	e002      	b.n	8000bc2 <led_on_led_ctrl+0x5e>
        return;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <led_on_led_ctrl+0x5e>
        return;
 8000bc0:	bf00      	nop
    // Use green component as ON/OFF for mono LED when RGB not wired
    if (req.ledMask & (LED_MASK_R | LED_MASK_G | LED_MASK_B))
        led_apply_mono((req.r | req.g | req.b) ? 1u : 0u);
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "applied", "%s", ((req.r | req.g | req.b) ? "on" : "off"));
#endif
}
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	08009398 	.word	0x08009398
 8000bcc:	0800939c 	.word	0x0800939c
 8000bd0:	080093b8 	.word	0x080093b8

08000bd4 <rb_count>:
static volatile uint16_t s_tail = 0; // read index
static volatile uint8_t s_tx_busy = 0;
static uint8_t s_tx_buf[LOG_CHUNK_MAX];
static uint16_t s_tx_len = 0;

static inline uint16_t rb_count(void){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
    uint16_t h = s_head, t = s_tail;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <rb_count+0x3c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <rb_count+0x40>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	80bb      	strh	r3, [r7, #4]
    return (uint16_t)((h >= t) ? (h - t) : (LOG_BUF_SZ - t + h));
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d304      	bcc.n	8000bf8 <rb_count+0x24>
 8000bee:	88fa      	ldrh	r2, [r7, #6]
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	e005      	b.n	8000c04 <rb_count+0x30>
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000c02:	b29b      	uxth	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	200004ac 	.word	0x200004ac
 8000c14:	200004ae 	.word	0x200004ae

08000c18 <rb_space>:
static inline uint16_t rb_space(void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
    return (uint16_t)(LOG_BUF_SZ - 1 - rb_count());
 8000c1c:	f7ff ffda 	bl	8000bd4 <rb_count>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000c26:	3303      	adds	r3, #3
 8000c28:	b29b      	uxth	r3, r3
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <rb_push_bytes>:
static void rb_push_bytes(const uint8_t* data, uint16_t len){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
    if(!data || !len || !s_enabled) return;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d02e      	beq.n	8000ca0 <rb_push_bytes+0x70>
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02b      	beq.n	8000ca0 <rb_push_bytes+0x70>
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <rb_push_bytes+0x78>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d027      	beq.n	8000ca0 <rb_push_bytes+0x70>
    uint16_t space = rb_space();
 8000c50:	f7ff ffe2 	bl	8000c18 <rb_space>
 8000c54:	4603      	mov	r3, r0
 8000c56:	81bb      	strh	r3, [r7, #12]
    if(len > space) len = space; // drop excess (lowest priority)
 8000c58:	887a      	ldrh	r2, [r7, #2]
 8000c5a:	89bb      	ldrh	r3, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d901      	bls.n	8000c64 <rb_push_bytes+0x34>
 8000c60:	89bb      	ldrh	r3, [r7, #12]
 8000c62:	807b      	strh	r3, [r7, #2]
    for(uint16_t i=0;i<len;i++){
 8000c64:	2300      	movs	r3, #0
 8000c66:	81fb      	strh	r3, [r7, #14]
 8000c68:	e015      	b.n	8000c96 <rb_push_bytes+0x66>
        s_buf[s_head] = data[i];
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <rb_push_bytes+0x7c>)
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	b292      	uxth	r2, r2
 8000c76:	7819      	ldrb	r1, [r3, #0]
 8000c78:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <rb_push_bytes+0x80>)
 8000c7a:	5499      	strb	r1, [r3, r2]
        s_head = (uint16_t)((s_head + 1) % LOG_BUF_SZ);
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <rb_push_bytes+0x7c>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <rb_push_bytes+0x7c>)
 8000c8e:	801a      	strh	r2, [r3, #0]
    for(uint16_t i=0;i<len;i++){
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	3301      	adds	r3, #1
 8000c94:	81fb      	strh	r3, [r7, #14]
 8000c96:	89fa      	ldrh	r2, [r7, #14]
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3e5      	bcc.n	8000c6a <rb_push_bytes+0x3a>
 8000c9e:	e000      	b.n	8000ca2 <rb_push_bytes+0x72>
    if(!data || !len || !s_enabled) return;
 8000ca0:	bf00      	nop
    }
}
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200004ac 	.word	0x200004ac
 8000cb0:	200000ac 	.word	0x200000ac

08000cb4 <push_line>:

static void push_line(const char* line){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    if(!line) return;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00f      	beq.n	8000ce2 <push_line+0x2e>
    size_t n = strlen(line);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fa84 	bl	80001d0 <strlen>
 8000cc8:	60f8      	str	r0, [r7, #12]
    if(n > 240) n = 240; // trim
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cce:	d901      	bls.n	8000cd4 <push_line+0x20>
 8000cd0:	23f0      	movs	r3, #240	@ 0xf0
 8000cd2:	60fb      	str	r3, [r7, #12]
    rb_push_bytes((const uint8_t*)line, (uint16_t)n);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa8 	bl	8000c30 <rb_push_bytes>
 8000ce0:	e000      	b.n	8000ce4 <push_line+0x30>
    if(!line) return;
 8000ce2:	bf00      	nop
}
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <log_service_init>:

void log_service_init(void){
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
    s_enabled = LOG_DEFAULT_ENABLED;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <log_service_init+0x30>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
    s_mode = LOG_DEFAULT_MODE;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <log_service_init+0x34>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
    s_head = s_tail = 0;
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <log_service_init+0x38>)
 8000d00:	460a      	mov	r2, r1
 8000d02:	801a      	strh	r2, [r3, #0]
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <log_service_init+0x3c>)
 8000d06:	460a      	mov	r2, r1
 8000d08:	801a      	strh	r2, [r3, #0]
    s_tx_busy = 0;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <log_service_init+0x40>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	200000a8 	.word	0x200000a8
 8000d24:	200004ae 	.word	0x200004ae
 8000d28:	200004ac 	.word	0x200004ac
 8000d2c:	200004b0 	.word	0x200004b0

08000d30 <log_event_ids>:

void log_set_enabled(int enabled){ s_enabled = (enabled != 0); }
void log_set_mode(log_mode_t mode){ s_mode = mode; }

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b096      	sub	sp, #88	@ 0x58
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	4603      	mov	r3, r0
 8000d38:	603a      	str	r2, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	71bb      	strb	r3, [r7, #6]
    if(!s_enabled) return;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <log_event_ids+0x5c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01a      	beq.n	8000d7e <log_event_ids+0x4e>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <log_event_ids+0x60>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d117      	bne.n	8000d82 <log_event_ids+0x52>
    char line[64];
    // Format: L,svc=<id>,state=<id>,status=<num>\r\n
    int nn = snprintf(line, sizeof line, "L:svc=%u,state=%u,status=%ld\r\n",
 8000d52:	79f9      	ldrb	r1, [r7, #7]
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	f107 000c 	add.w	r0, r7, #12
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	9201      	str	r2, [sp, #4]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	460b      	mov	r3, r1
 8000d62:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <log_event_ids+0x64>)
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f007 fc5f 	bl	8008628 <sniprintf>
 8000d6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                      (unsigned)service_id, (unsigned)state_id, (long)status);
    if(nn > 0) push_line(line);
 8000d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dd08      	ble.n	8000d84 <log_event_ids+0x54>
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff9c 	bl	8000cb4 <push_line>
 8000d7c:	e002      	b.n	8000d84 <log_event_ids+0x54>
    if(!s_enabled) return;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <log_event_ids+0x54>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d82:	bf00      	nop
}
 8000d84:	3750      	adds	r7, #80	@ 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	200000a8 	.word	0x200000a8
 8000d94:	080093c0 	.word	0x080093c0

08000d98 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b0      	sub	sp, #192	@ 0xc0
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
    if(!s_enabled) return;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <log_event_names+0x78>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d02a      	beq.n	8000e02 <log_event_names+0x6a>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <log_event_names+0x7c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d127      	bne.n	8000e06 <log_event_names+0x6e>
    if(!service_name) service_name = "?";
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <log_event_names+0x28>
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <log_event_names+0x80>)
 8000dbe:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <log_event_names+0x32>
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <log_event_names+0x80>)
 8000dc8:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <log_event_names+0x3c>
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <log_event_names+0x80>)
 8000dd2:	607b      	str	r3, [r7, #4]
    char line[160];
    // Format: LOG,service=<name>,state=<name>,status=<text>\r\n
    int nn = snprintf(line, sizeof line, "LOG:service=%s,state=%s,status=%s\r\n",
 8000dd4:	f107 0014 	add.w	r0, r7, #20
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <log_event_names+0x84>)
 8000de4:	21a0      	movs	r1, #160	@ 0xa0
 8000de6:	f007 fc1f 	bl	8008628 <sniprintf>
 8000dea:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                      service_name, state_name, status_text);
    if(nn > 0) push_line(line);
 8000dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dd08      	ble.n	8000e08 <log_event_names+0x70>
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff5a 	bl	8000cb4 <push_line>
 8000e00:	e002      	b.n	8000e08 <log_event_names+0x70>
    if(!s_enabled) return;
 8000e02:	bf00      	nop
 8000e04:	e000      	b.n	8000e08 <log_event_names+0x70>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000e06:	bf00      	nop
}
 8000e08:	37b8      	adds	r7, #184	@ 0xb8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000
 8000e14:	200000a8 	.word	0x200000a8
 8000e18:	080093e0 	.word	0x080093e0
 8000e1c:	080093e4 	.word	0x080093e4

08000e20 <log_poll>:

void log_poll(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
    if(!s_enabled) return;
 8000e26:	4b34      	ldr	r3, [pc, #208]	@ (8000ef8 <log_poll+0xd8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d05b      	beq.n	8000ee6 <log_poll+0xc6>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000e2e:	4b33      	ldr	r3, [pc, #204]	@ (8000efc <log_poll+0xdc>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d158      	bne.n	8000eea <log_poll+0xca>
    uint16_t cnt = rb_count();
 8000e38:	f7ff fecc 	bl	8000bd4 <rb_count>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	80bb      	strh	r3, [r7, #4]
    if(!cnt) return;
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d053      	beq.n	8000eee <log_poll+0xce>
    uint16_t n = (cnt > LOG_CHUNK_MAX) ? LOG_CHUNK_MAX : cnt;
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	2b60      	cmp	r3, #96	@ 0x60
 8000e4a:	bf28      	it	cs
 8000e4c:	2360      	movcs	r3, #96	@ 0x60
 8000e4e:	807b      	strh	r3, [r7, #2]
    uint16_t first = (uint16_t)((s_head >= s_tail) ? (n) : (uint16_t)(LOG_BUF_SZ - s_tail));
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <log_poll+0xe0>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <log_poll+0xe4>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d206      	bcs.n	8000e6e <log_poll+0x4e>
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <log_poll+0xe4>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	e000      	b.n	8000e70 <log_poll+0x50>
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	80fb      	strh	r3, [r7, #6]
    if(first > n) first = n;
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d901      	bls.n	8000e7e <log_poll+0x5e>
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	80fb      	strh	r3, [r7, #6]
    memcpy(s_tx_buf, &s_buf[s_tail], first);
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <log_poll+0xe4>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <log_poll+0xe8>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481f      	ldr	r0, [pc, #124]	@ (8000f0c <log_poll+0xec>)
 8000e90:	f007 fd9f 	bl	80089d2 <memcpy>
    if(first < n){
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d209      	bcs.n	8000eb0 <log_poll+0x90>
        memcpy(s_tx_buf + first, &s_buf[0], n - first);
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <log_poll+0xec>)
 8000ea0:	1898      	adds	r0, r3, r2
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4917      	ldr	r1, [pc, #92]	@ (8000f08 <log_poll+0xe8>)
 8000eac:	f007 fd91 	bl	80089d2 <memcpy>
    }
    if(HAL_UART_Transmit_IT(&huart1, s_tx_buf, (uint16_t)n) == HAL_OK){
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4915      	ldr	r1, [pc, #84]	@ (8000f0c <log_poll+0xec>)
 8000eb6:	4816      	ldr	r0, [pc, #88]	@ (8000f10 <log_poll+0xf0>)
 8000eb8:	f006 fa74 	bl	80073a4 <HAL_UART_Transmit_IT>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d116      	bne.n	8000ef0 <log_poll+0xd0>
        s_tail = (uint16_t)((s_tail + n) % LOG_BUF_SZ);
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <log_poll+0xe4>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <log_poll+0xe4>)
 8000ed6:	801a      	strh	r2, [r3, #0]
        s_tx_len = n;
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <log_poll+0xf4>)
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	8013      	strh	r3, [r2, #0]
        s_tx_busy = 1;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <log_poll+0xdc>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e004      	b.n	8000ef0 <log_poll+0xd0>
    if(!s_enabled) return;
 8000ee6:	bf00      	nop
 8000ee8:	e002      	b.n	8000ef0 <log_poll+0xd0>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <log_poll+0xd0>
    if(!cnt) return;
 8000eee:	bf00      	nop
    }
}
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	200004b0 	.word	0x200004b0
 8000f00:	200004ac 	.word	0x200004ac
 8000f04:	200004ae 	.word	0x200004ae
 8000f08:	200000ac 	.word	0x200000ac
 8000f0c:	200004b4 	.word	0x200004b4
 8000f10:	20000904 	.word	0x20000904
 8000f14:	20000514 	.word	0x20000514

08000f18 <log_event_auto>:
    }
}

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b0ed      	sub	sp, #436	@ 0x1b4
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	4604      	mov	r4, r0
 8000f20:	4608      	mov	r0, r1
 8000f22:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8000f26:	f5a1 71d0 	sub.w	r1, r1, #416	@ 0x1a0
 8000f2a:	600a      	str	r2, [r1, #0]
 8000f2c:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8000f30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000f3a:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8000f3e:	4622      	mov	r2, r4
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000f46:	f5a3 73cd 	sub.w	r3, r3, #410	@ 0x19a
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	701a      	strb	r2, [r3, #0]
    if(!s_enabled) return;
 8000f4e:	4b48      	ldr	r3, [pc, #288]	@ (8001070 <log_event_auto+0x158>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8086 	beq.w	8001064 <log_event_auto+0x14c>
    if(s_mode == LOG_MODE_CONCISE){
 8000f58:	4b46      	ldr	r3, [pc, #280]	@ (8001074 <log_event_auto+0x15c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d123      	bne.n	8000faa <log_event_auto+0x92>
        char line[64];
        int nn = snprintf(line, sizeof line, "L:svc=%u,state=%u,status=%ld\r\n",
 8000f62:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000f66:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8000f6a:	7819      	ldrb	r1, [r3, #0]
 8000f6c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000f70:	f5a3 73cd 	sub.w	r3, r3, #410	@ 0x19a
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	f107 0010 	add.w	r0, r7, #16
 8000f7a:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8000f7e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	9201      	str	r2, [sp, #4]
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <log_event_auto+0x160>)
 8000f8c:	2140      	movs	r1, #64	@ 0x40
 8000f8e:	f007 fb4b 	bl	8008628 <sniprintf>
 8000f92:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
                          (unsigned)service_id, (unsigned)state_id, (long)status);
        if(nn > 0) push_line(line);
 8000f96:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	dd63      	ble.n	8001066 <log_event_auto+0x14e>
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe86 	bl	8000cb4 <push_line>
 8000fa8:	e05d      	b.n	8001066 <log_event_auto+0x14e>
        return;
    }
    // Verbose: format status text lazily
    char text[128];
    text[0] = '\0';
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
    if(fmt && fmt[0]){
 8000fb0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d017      	beq.n	8000fe8 <log_event_auto+0xd0>
 8000fb8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d012      	beq.n	8000fe8 <log_event_auto+0xd0>
        va_list ap;
        va_start(ap, fmt);
 8000fc2:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8000fc6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000fca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000fce:	601a      	str	r2, [r3, #0]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8000fd0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000fd4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000fd8:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	f007 fbc8 	bl	8008778 <vsniprintf>
        va_end(ap);
    }
    const char* svc = service_name ? service_name : "?";
 8000fe8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000fec:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <log_event_auto+0xea>
 8000ff6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000ffa:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	e000      	b.n	8001004 <log_event_auto+0xec>
 8001002:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <log_event_auto+0x164>)
 8001004:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    const char* stn = state_name ? state_name : "?";
 8001008:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <log_event_auto+0xfe>
 8001010:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001014:	e000      	b.n	8001018 <log_event_auto+0x100>
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <log_event_auto+0x164>)
 8001018:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    const char* tx = text[0] ? text : "?";
 800101c:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <log_event_auto+0x112>
 8001024:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001028:	e000      	b.n	800102c <log_event_auto+0x114>
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <log_event_auto+0x164>)
 800102c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    char line[192];
    int nn = snprintf(line, sizeof line, "LOG:service=%s,state=%s,status=%s\r\n", svc, stn, tx);
 8001030:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001034:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <log_event_auto+0x168>)
 8001046:	21c0      	movs	r1, #192	@ 0xc0
 8001048:	f007 faee 	bl	8008628 <sniprintf>
 800104c:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
    if(nn > 0) push_line(line);
 8001050:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001054:	2b00      	cmp	r3, #0
 8001056:	dd06      	ble.n	8001066 <log_event_auto+0x14e>
 8001058:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe29 	bl	8000cb4 <push_line>
 8001062:	e000      	b.n	8001066 <log_event_auto+0x14e>
    if(!s_enabled) return;
 8001064:	bf00      	nop
}
 8001066:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	bf00      	nop
 8001070:	20000000 	.word	0x20000000
 8001074:	200000a8 	.word	0x200000a8
 8001078:	080093c0 	.word	0x080093c0
 800107c:	080093e0 	.word	0x080093e0
 8001080:	080093e4 	.word	0x080093e4

08001084 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af04      	add	r7, sp, #16
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <motion_on_move_queue_add+0x50>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <motion_on_move_queue_add+0x50>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <motion_on_move_queue_add+0x50>)
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <motion_on_move_queue_add+0x50>)
 80010aa:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <motion_on_move_queue_add+0x54>)
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <motion_on_move_queue_add+0x50>)
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <motion_on_move_queue_add+0x58>)
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <motion_on_move_queue_add+0x5c>)
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	4613      	mov	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ff27 	bl	8000f18 <log_event_auto>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000518 	.word	0x20000518
 80010d8:	08009408 	.word	0x08009408
 80010dc:	08009420 	.word	0x08009420
 80010e0:	08009430 	.word	0x08009430

080010e4 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 80010ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <motion_on_move_queue_status+0x3c>)
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <motion_on_move_queue_status+0x40>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <motion_on_move_queue_status+0x40>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	9303      	str	r3, [sp, #12]
 8001100:	9102      	str	r1, [sp, #8]
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <motion_on_move_queue_status+0x44>)
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <motion_on_move_queue_status+0x48>)
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4613      	mov	r3, r2
 800110c:	2200      	movs	r2, #0
 800110e:	2101      	movs	r1, #1
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff ff01 	bl	8000f18 <log_event_auto>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	08009408 	.word	0x08009408
 8001124:	20000518 	.word	0x20000518
 8001128:	0800943c 	.word	0x0800943c
 800112c:	08009454 	.word	0x08009454

08001130 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <motion_on_start_move+0x4c>)
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001144:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <motion_on_start_move+0x4c>)
 8001146:	2202      	movs	r2, #2
 8001148:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800114a:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <motion_on_start_move+0x50>)
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <motion_on_start_move+0x4c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d101      	bne.n	800115a <motion_on_start_move+0x2a>
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <motion_on_start_move+0x54>)
 8001158:	e000      	b.n	800115c <motion_on_start_move+0x2c>
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <motion_on_start_move+0x58>)
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <motion_on_start_move+0x5c>)
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <motion_on_start_move+0x60>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4613      	mov	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	2102      	movs	r1, #2
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fed3 	bl	8000f18 <log_event_auto>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000518 	.word	0x20000518
 8001180:	08009408 	.word	0x08009408
 8001184:	08009464 	.word	0x08009464
 8001188:	0800946c 	.word	0x0800946c
 800118c:	08009414 	.word	0x08009414
 8001190:	08009474 	.word	0x08009474

08001194 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af04      	add	r7, sp, #16
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <motion_on_move_end+0x34>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 80011a4:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <motion_on_move_end+0x38>)
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <motion_on_move_end+0x3c>)
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <motion_on_move_end+0x40>)
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <motion_on_move_end+0x44>)
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4613      	mov	r3, r2
 80011b4:	2200      	movs	r2, #0
 80011b6:	2102      	movs	r1, #2
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff fead 	bl	8000f18 <log_event_auto>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000518 	.word	0x20000518
 80011cc:	08009408 	.word	0x08009408
 80011d0:	08009480 	.word	0x08009480
 80011d4:	08009414 	.word	0x08009414
 80011d8:	0800948c 	.word	0x0800948c

080011dc <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af04      	add	r7, sp, #16
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 80011e6:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <probe_on_move_probe_level+0x2c>)
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <probe_on_move_probe_level+0x30>)
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <probe_on_move_probe_level+0x34>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <probe_on_move_probe_level+0x38>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4613      	mov	r3, r2
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	2004      	movs	r0, #4
 80011fc:	f7ff fe8c 	bl	8000f18 <log_event_auto>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08009498 	.word	0x08009498
 800120c:	080094b0 	.word	0x080094b0
 8001210:	080094a4 	.word	0x080094a4
 8001214:	080094c0 	.word	0x080094c0

08001218 <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"

// Static adapter functions matching router callbacks
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	68b8      	ldr	r0, [r7, #8]
 8001228:	f7ff ff2c 	bl	8001084 <motion_on_move_queue_add>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f7ff ff4e 	bl	80010e4 <motion_on_move_queue_status>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f7ff ff66 	bl	8001130 <motion_on_start_move>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f7ff fbd2 	bl	8000a24 <home_on_move_home>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff ffa0 	bl	80011dc <probe_on_move_probe_level>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	68b8      	ldr	r0, [r7, #8]
 80012b4:	f7ff ff6e 	bl	8001194 <motion_on_move_end>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f7ff fc48 	bl	8000b64 <led_on_led_ctrl>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	if (!h)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d018      	beq.n	8001334 <services_register_handlers+0x40>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <services_register_handlers+0x4c>)
 8001306:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <services_register_handlers+0x50>)
 800130c:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <services_register_handlers+0x54>)
 8001312:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <services_register_handlers+0x58>)
 8001318:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <services_register_handlers+0x5c>)
 800131e:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a0c      	ldr	r2, [pc, #48]	@ (8001354 <services_register_handlers+0x60>)
 8001324:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <services_register_handlers+0x64>)
 800132a:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <services_register_handlers+0x68>)
 8001330:	61da      	str	r2, [r3, #28]
 8001332:	e000      	b.n	8001336 <services_register_handlers+0x42>
		return;
 8001334:	bf00      	nop
}
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	08001219 	.word	0x08001219
 8001344:	08001235 	.word	0x08001235
 8001348:	08001251 	.word	0x08001251
 800134c:	0800126d 	.word	0x0800126d
 8001350:	08001289 	.word	0x08001289
 8001354:	080012a5 	.word	0x080012a5
 8001358:	080012c1 	.word	0x080012c1
 800135c:	080012dd 	.word	0x080012dd

08001360 <app_init>:
static uint8_t g_spi_rx_buf[APP_SPI_RX_BUF_SZ];
static volatile int g_spi_tx_busy = 0;

LOG_SVC_DEFINE(LOG_SVC_APP, "app");

void app_init(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af04      	add	r7, sp, #16
    // Init services (GPIO for LED etc.)
    led_service_init();
 8001366:	f7ff fb7b 	bl	8000a60 <led_service_init>
    log_service_init();
 800136a:	f7ff fcbf 	bl	8000cec <log_service_init>
    // Boot log (visible on USART1 VCP terminal)
    LOGT_THIS(LOG_STATE_START, PROTO_OK, "start", "ready");
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <app_init+0x64>)
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <app_init+0x68>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <app_init+0x6c>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <app_init+0x70>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fdc8 	bl	8000f18 <log_event_auto>

    // Prepare router and response FIFO
    g_resp_fifo = resp_fifo_create();
 8001388:	f7ff faf9 	bl	800097e <resp_fifo_create>
 800138c:	4603      	mov	r3, r0
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <app_init+0x74>)
 8001390:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 8001392:	2220      	movs	r2, #32
 8001394:	2100      	movs	r1, #0
 8001396:	4810      	ldr	r0, [pc, #64]	@ (80013d8 <app_init+0x78>)
 8001398:	f007 fa90 	bl	80088bc <memset>
    services_register_handlers(&g_handlers);
 800139c:	480e      	ldr	r0, [pc, #56]	@ (80013d8 <app_init+0x78>)
 800139e:	f7ff ffa9 	bl	80012f4 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <app_init+0x74>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <app_init+0x78>)
 80013a8:	4619      	mov	r1, r3
 80013aa:	480c      	ldr	r0, [pc, #48]	@ (80013dc <app_init+0x7c>)
 80013ac:	f7ff f988 	bl	80006c0 <router_init>

    // Start SPI RX DMA in circular mode to feed router from callbacks
    (void)HAL_SPI_Receive_DMA(&hspi1, g_spi_rx_buf, (uint16_t)APP_SPI_RX_BUF_SZ);
 80013b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b4:	490a      	ldr	r1, [pc, #40]	@ (80013e0 <app_init+0x80>)
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <app_init+0x84>)
 80013b8:	f004 f97e 	bl	80056b8 <HAL_SPI_Receive_DMA>
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	080094d4 	.word	0x080094d4
 80013c8:	080094d8 	.word	0x080094d8
 80013cc:	080094e0 	.word	0x080094e0
 80013d0:	080094e4 	.word	0x080094e4
 80013d4:	20000588 	.word	0x20000588
 80013d8:	20000568 	.word	0x20000568
 80013dc:	20000520 	.word	0x20000520
 80013e0:	2000058c 	.word	0x2000058c
 80013e4:	20000690 	.word	0x20000690

080013e8 <app_poll>:

void app_poll(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b092      	sub	sp, #72	@ 0x48
 80013ec:	af00      	add	r7, sp, #0
    // If TX is idle, try to pop one response frame from FIFO and transmit
    if (!g_spi_tx_busy && g_resp_fifo) {
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <app_poll+0x54>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11b      	bne.n	800142e <app_poll+0x46>
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <app_poll+0x58>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d017      	beq.n	800142e <app_poll+0x46>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <app_poll+0x58>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1d39      	adds	r1, r7, #4
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fac7 	bl	800099a <resp_fifo_pop>
 800140c:	6478      	str	r0, [r7, #68]	@ 0x44
        if (n > 0) {
 800140e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001410:	2b00      	cmp	r3, #0
 8001412:	dd0c      	ble.n	800142e <app_poll+0x46>
            // Use interrupt-driven TX to avoid DMA mode constraints
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 8001414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001416:	b29a      	uxth	r2, r3
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <app_poll+0x5c>)
 800141e:	f004 f8b5 	bl	800558c <HAL_SPI_Transmit_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <app_poll+0x46>
                g_spi_tx_busy = 1;
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <app_poll+0x54>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Lowest priority: drain log output (non-blocking, only if USART idle)
    log_poll();
 800142e:	f7ff fcf7 	bl	8000e20 <log_poll>
}
 8001432:	bf00      	nop
 8001434:	3748      	adds	r7, #72	@ 0x48
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000068c 	.word	0x2000068c
 8001440:	20000588 	.word	0x20000588
 8001444:	20000690 	.word	0x20000690

08001448 <HAL_SPI_RxHalfCpltCallback>:

// HAL callbacks (override weak definitions) to feed the router
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *h) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_SPI_RxHalfCpltCallback+0x22>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <HAL_SPI_RxHalfCpltCallback+0x2c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d104      	bne.n	800146a <HAL_SPI_RxHalfCpltCallback+0x22>
        router_feed_bytes(&g_router, g_spi_rx_buf, APP_SPI_RX_BUF_SZ / 2);
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	4905      	ldr	r1, [pc, #20]	@ (8001478 <HAL_SPI_RxHalfCpltCallback+0x30>)
 8001464:	4805      	ldr	r0, [pc, #20]	@ (800147c <HAL_SPI_RxHalfCpltCallback+0x34>)
 8001466:	f7ff fa3f 	bl	80008e8 <router_feed_bytes>
    }
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40013000 	.word	0x40013000
 8001478:	2000058c 	.word	0x2000058c
 800147c:	20000520 	.word	0x20000520

08001480 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *h) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_SPI_RxCpltCallback+0x24>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_SPI_RxCpltCallback+0x2c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d105      	bne.n	80014a4 <HAL_SPI_RxCpltCallback+0x24>
        router_feed_bytes(&g_router, g_spi_rx_buf + (APP_SPI_RX_BUF_SZ / 2), APP_SPI_RX_BUF_SZ / 2);
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_SPI_RxCpltCallback+0x30>)
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <HAL_SPI_RxCpltCallback+0x34>)
 80014a0:	f7ff fa22 	bl	80008e8 <router_feed_bytes>
    }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40013000 	.word	0x40013000
 80014b0:	2000060c 	.word	0x2000060c
 80014b4:	20000520 	.word	0x20000520

080014b8 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h) {
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_SPI_TxCpltCallback+0x1e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_SPI_TxCpltCallback+0x2c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d102      	bne.n	80014d6 <HAL_SPI_TxCpltCallback+0x1e>
        g_spi_tx_busy = 0;
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_SPI_TxCpltCallback+0x30>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40013000 	.word	0x40013000
 80014e8:	2000068c 	.word	0x2000068c

080014ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <MX_DMA_Init+0x48>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <MX_DMA_Init+0x48>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <MX_DMA_Init+0x48>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200c      	movs	r0, #12
 8001510:	f001 f842 	bl	8002598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001514:	200c      	movs	r0, #12
 8001516:	f001 f86b 	bl	80025f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	200d      	movs	r0, #13
 8001520:	f001 f83a 	bl	8002598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001524:	200d      	movs	r0, #13
 8001526:	f001 f863 	bl	80025f0 <HAL_NVIC_EnableIRQ>

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	@ 0x30
 800153c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	4b4d      	ldr	r3, [pc, #308]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	4a4c      	ldr	r2, [pc, #304]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155a:	4b4a      	ldr	r3, [pc, #296]	@ (8001684 <MX_GPIO_Init+0x14c>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	4a46      	ldr	r2, [pc, #280]	@ (8001684 <MX_GPIO_Init+0x14c>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001572:	4b44      	ldr	r3, [pc, #272]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	4a40      	ldr	r2, [pc, #256]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158a:	4b3e      	ldr	r3, [pc, #248]	@ (8001684 <MX_GPIO_Init+0x14c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <MX_GPIO_Init+0x14c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a3a      	ldr	r2, [pc, #232]	@ (8001684 <MX_GPIO_Init+0x14c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b38      	ldr	r3, [pc, #224]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a34      	ldr	r2, [pc, #208]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <MX_GPIO_Init+0x14c>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80015de:	f641 73e3 	movw	r3, #8163	@ 0x1fe3
 80015e2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4825      	ldr	r0, [pc, #148]	@ (8001688 <MX_GPIO_Init+0x150>)
 80015f4:	f001 fb66 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80015f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015fc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	481f      	ldr	r0, [pc, #124]	@ (800168c <MX_GPIO_Init+0x154>)
 800160e:	f001 fb59 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001612:	2303      	movs	r3, #3
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	481a      	ldr	r0, [pc, #104]	@ (8001690 <MX_GPIO_Init+0x158>)
 8001626:	f001 fb4d 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 800162a:	f649 730c 	movw	r3, #40716	@ 0x9f0c
 800162e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001630:	2303      	movs	r3, #3
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f001 fb3f 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001646:	f64f 7337 	movw	r3, #65335	@ 0xff37
 800164a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <MX_GPIO_Init+0x15c>)
 800165c:	f001 fb32 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001660:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001664:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4808      	ldr	r0, [pc, #32]	@ (8001698 <MX_GPIO_Init+0x160>)
 8001676:	f001 fb25 	bl	8002cc4 <HAL_GPIO_Init>

}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	@ 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	48001000 	.word	0x48001000
 800168c:	48000800 	.word	0x48000800
 8001690:	48001c00 	.word	0x48001c00
 8001694:	48000400 	.word	0x48000400
 8001698:	48000c00 	.word	0x48000c00

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 fe14 	bl	80022ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f833 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f7ff ff45 	bl	8001538 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ae:	f7ff ff1d 	bl	80014ec <MX_DMA_Init>
  MX_SPI1_Init();
 80016b2:	f000 f8cb 	bl	800184c <MX_SPI1_Init>
  MX_TIM6_Init();
 80016b6:	f000 fbe5 	bl	8001e84 <MX_TIM6_Init>
  MX_TIM2_Init();
 80016ba:	f000 fae3 	bl	8001c84 <MX_TIM2_Init>
  MX_TIM5_Init();
 80016be:	f000 fb8b 	bl	8001dd8 <MX_TIM5_Init>
  MX_TIM7_Init();
 80016c2:	f000 fc15 	bl	8001ef0 <MX_TIM7_Init>
  MX_TIM3_Init();
 80016c6:	f000 fb31 	bl	8001d2c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80016ca:	f000 fd49 	bl	8002160 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	app_init();
 80016ce:	f7ff fe47 	bl	8001360 <app_init>
	// Startup log from main (after UART + log_service init)
	LOGT_THIS(LOG_STATE_START, PROTO_OK, "main", "entered");
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <main+0x60>)
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <main+0x64>)
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <main+0x68>)
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <main+0x6c>)
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fc16 	bl	8000f18 <log_event_auto>
  /* USER CODE BEGIN WHILE */
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf(".\n");
 80016ec:	4807      	ldr	r0, [pc, #28]	@ (800170c <main+0x70>)
 80016ee:	f006 ff93 	bl	8008618 <puts>
        app_poll();
 80016f2:	f7ff fe79 	bl	80013e8 <app_poll>
		printf(".\n");
 80016f6:	bf00      	nop
 80016f8:	e7f8      	b.n	80016ec <main+0x50>
 80016fa:	bf00      	nop
 80016fc:	080094ec 	.word	0x080094ec
 8001700:	080094f0 	.word	0x080094f0
 8001704:	080094f8 	.word	0x080094f8
 8001708:	080094fc 	.word	0x080094fc
 800170c:	08009504 	.word	0x08009504

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b096      	sub	sp, #88	@ 0x58
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2244      	movs	r2, #68	@ 0x44
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f007 f8cc 	bl	80088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001736:	f001 fd8b 	bl	8003250 <HAL_PWREx_ControlVoltageScaling>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001740:	f000 f860 	bl	8001804 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001744:	2310      	movs	r3, #16
 8001746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001748:	2301      	movs	r3, #1
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001750:	2360      	movs	r3, #96	@ 0x60
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001754:	2302      	movs	r3, #2
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001758:	2301      	movs	r3, #1
 800175a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001760:	2328      	movs	r3, #40	@ 0x28
 8001762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001764:	2307      	movs	r3, #7
 8001766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800176c:	2302      	movs	r3, #2
 800176e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fdcd 	bl	8003314 <HAL_RCC_OscConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001780:	f000 f840 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001784:	230f      	movs	r3, #15
 8001786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	2303      	movs	r3, #3
 800178a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	2104      	movs	r1, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 faba 	bl	8003d18 <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017aa:	f000 f82b 	bl	8001804 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3758      	adds	r7, #88	@ 0x58
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int fd, char *ptr, int len) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;
    if (fd == 1 || fd == 2) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d002      	beq.n	80017d0 <_write+0x18>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d111      	bne.n	80017f4 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	4809      	ldr	r0, [pc, #36]	@ (8001800 <_write+0x48>)
 80017dc:	f005 fd58 	bl	8007290 <HAL_UART_Transmit>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <_write+0x36>
        return len;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	e004      	b.n	80017f8 <_write+0x40>
      else
        return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e001      	b.n	80017f8 <_write+0x40>
    }
    return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000904 	.word	0x20000904

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	2164      	movs	r1, #100	@ 0x64
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fa8e 	bl	8000d30 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <Error_Handler+0x24>)
 8001816:	4905      	ldr	r1, [pc, #20]	@ (800182c <Error_Handler+0x28>)
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <Error_Handler+0x2c>)
 800181a:	f7ff fabd 	bl	8000d98 <log_event_names>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181e:	b672      	cpsid	i
}
 8001820:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <Error_Handler+0x1e>
 8001826:	bf00      	nop
 8001828:	08009508 	.word	0x08009508
 800182c:	08009518 	.word	0x08009518
 8001830:	080094ec 	.word	0x080094ec

08001834 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001852:	4a19      	ldr	r2, [pc, #100]	@ (80018b8 <MX_SPI1_Init+0x6c>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <MX_SPI1_Init+0x68>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001864:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <MX_SPI1_Init+0x68>)
 800186c:	2202      	movs	r2, #2
 800186e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001870:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001872:	2201      	movs	r2, #1
 8001874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187c:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <MX_SPI1_Init+0x68>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <MX_SPI1_Init+0x68>)
 800188a:	2200      	movs	r2, #0
 800188c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001890:	2207      	movs	r2, #7
 8001892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <MX_SPI1_Init+0x68>)
 8001896:	2200      	movs	r2, #0
 8001898:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_SPI1_Init+0x68>)
 800189c:	2200      	movs	r2, #0
 800189e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <MX_SPI1_Init+0x68>)
 80018a2:	f003 fc85 	bl	80051b0 <HAL_SPI_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80018ac:	f7ff ffaa 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000690 	.word	0x20000690
 80018b8:	40013000 	.word	0x40013000

080018bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a53      	ldr	r2, [pc, #332]	@ (8001a28 <HAL_SPI_MspInit+0x16c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	f040 80a0 	bne.w	8001a20 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e0:	4b52      	ldr	r3, [pc, #328]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e4:	4a51      	ldr	r2, [pc, #324]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 80018e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 80018ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001904:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001910:	4b46      	ldr	r3, [pc, #280]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	4a45      	ldr	r2, [pc, #276]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 8001916:	f043 0310 	orr.w	r3, r3, #16
 800191a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191c:	4b43      	ldr	r3, [pc, #268]	@ (8001a2c <HAL_SPI_MspInit+0x170>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001928:	2310      	movs	r3, #16
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001938:	2305      	movs	r3, #5
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f001 f9bd 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800194a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800195c:	2305      	movs	r3, #5
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4832      	ldr	r0, [pc, #200]	@ (8001a30 <HAL_SPI_MspInit+0x174>)
 8001968:	f001 f9ac 	bl	8002cc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800196c:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 800196e:	4a32      	ldr	r2, [pc, #200]	@ (8001a38 <HAL_SPI_MspInit+0x17c>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001972:	4b30      	ldr	r3, [pc, #192]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 8001974:	2201      	movs	r2, #1
 8001976:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001978:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001990:	4b28      	ldr	r3, [pc, #160]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001996:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 8001998:	2220      	movs	r2, #32
 800199a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019a2:	4824      	ldr	r0, [pc, #144]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 80019a4:	f000 fe48 	bl	8002638 <HAL_DMA_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 80019ae:	f7ff ff29 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 80019b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80019b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <HAL_SPI_MspInit+0x178>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a40 <HAL_SPI_MspInit+0x184>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019cc:	2210      	movs	r2, #16
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019d8:	2280      	movs	r2, #128	@ 0x80
 80019da:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019ea:	2220      	movs	r2, #32
 80019ec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019f4:	4811      	ldr	r0, [pc, #68]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 80019f6:	f000 fe1f 	bl	8002638 <HAL_DMA_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001a00:	f7ff ff00 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <HAL_SPI_MspInit+0x180>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2023      	movs	r0, #35	@ 0x23
 8001a16:	f000 fdbf 	bl	8002598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a1a:	2023      	movs	r0, #35	@ 0x23
 8001a1c:	f000 fde8 	bl	80025f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	@ 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40013000 	.word	0x40013000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48001000 	.word	0x48001000
 8001a34:	200006f4 	.word	0x200006f4
 8001a38:	4002001c 	.word	0x4002001c
 8001a3c:	2000073c 	.word	0x2000073c
 8001a40:	40020030 	.word	0x40020030

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 fc49 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA1_Channel2_IRQHandler+0x10>)
 8001af2:	f001 f808 	bl	8002b06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200006f4 	.word	0x200006f4

08001b00 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA1_Channel3_IRQHandler+0x10>)
 8001b06:	f000 fffe 	bl	8002b06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000073c 	.word	0x2000073c

08001b14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <SPI1_IRQHandler+0x10>)
 8001b1a:	f004 f8a5 	bl	8005c68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000690 	.word	0x20000690

08001b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <TIM6_DAC_IRQHandler+0x10>)
 8001b2e:	f004 ffb3 	bl	8006a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000086c 	.word	0x2000086c

08001b3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM7_IRQHandler+0x10>)
 8001b42:	f004 ffa9 	bl	8006a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200008b8 	.word	0x200008b8

08001b50 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
		*ptr++ = __io_getchar();
 8001b62:	f3af 8000 	nop.w
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
	}

	return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_isatty>:

int _isatty(int file) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
		errno = ENOMEM;
 8001c24:	f006 fea8 	bl	8008978 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20018000 	.word	0x20018000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	20000784 	.word	0x20000784
 8001c5c:	20000ae0 	.word	0x20000ae0

08001c60 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	2224      	movs	r2, #36	@ 0x24
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f006 fe12 	bl	80088bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001ca4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001cf6:	f004 fd0d 	bl	8006714 <HAL_TIM_Encoder_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d00:	f7ff fd80 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_TIM2_Init+0xa4>)
 8001d12:	f005 f8a1 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d1c:	f7ff fd72 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3730      	adds	r7, #48	@ 0x30
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000788 	.word	0x20000788

08001d2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	@ 0x30
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2224      	movs	r2, #36	@ 0x24
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f006 fdbe 	bl	80088bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	463b      	mov	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d4c:	4a21      	ldr	r2, [pc, #132]	@ (8001dd4 <MX_TIM3_Init+0xa8>)
 8001d4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d9c:	f004 fcba 	bl	8006714 <HAL_TIM_Encoder_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001da6:	f7ff fd2d 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	@ (8001dd0 <MX_TIM3_Init+0xa4>)
 8001db8:	f005 f84e 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001dc2:	f7ff fd1f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3730      	adds	r7, #48	@ 0x30
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200007d4 	.word	0x200007d4
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	@ 0x30
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f006 fd68 	bl	80088bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	463b      	mov	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <MX_TIM5_Init+0xa8>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e24:	2301      	movs	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001e48:	f004 fc64 	bl	8006714 <HAL_TIM_Encoder_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001e52:	f7ff fcd7 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4619      	mov	r1, r3
 8001e62:	4806      	ldr	r0, [pc, #24]	@ (8001e7c <MX_TIM5_Init+0xa4>)
 8001e64:	f004 fff8 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001e6e:	f7ff fcc9 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	3730      	adds	r7, #48	@ 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000820 	.word	0x20000820
 8001e80:	40000c00 	.word	0x40000c00

08001e84 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001e9c:	224f      	movs	r2, #79	@ 0x4f
 8001e9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001ea8:	2213      	movs	r2, #19
 8001eaa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001eae:	2280      	movs	r2, #128	@ 0x80
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eb2:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001eb4:	f004 fb24 	bl	8006500 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001ebe:	f7ff fca1 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	@ (8001ee8 <MX_TIM6_Init+0x64>)
 8001ed0:	f004 ffc2 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001eda:	f7ff fc93 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000086c 	.word	0x2000086c
 8001eec:	40001000 	.word	0x40001000

08001ef0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f02:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <MX_TIM7_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001f06:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f08:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f16:	2209      	movs	r2, #9
 8001f18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f22:	f004 faed 	bl	8006500 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f2c:	f7ff fc6a 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_TIM7_Init+0x64>)
 8001f3e:	f004 ff8b 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f48:	f7ff fc5c 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200008b8 	.word	0x200008b8
 8001f58:	40001400 	.word	0x40001400

08001f5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	@ 0x38
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d145      	bne.n	800200a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	4a52      	ldr	r2, [pc, #328]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8a:	4b50      	ldr	r3, [pc, #320]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b4d      	ldr	r3, [pc, #308]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a4c      	ldr	r2, [pc, #304]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a46      	ldr	r2, [pc, #280]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b44      	ldr	r3, [pc, #272]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe4:	f000 fe6e 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002000:	4619      	mov	r1, r3
 8002002:	4833      	ldr	r0, [pc, #204]	@ (80020d0 <HAL_TIM_Encoder_MspInit+0x174>)
 8002004:	f000 fe5e 	bl	8002cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002008:	e05c      	b.n	80020c4 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a31      	ldr	r2, [pc, #196]	@ (80020d4 <HAL_TIM_Encoder_MspInit+0x178>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d129      	bne.n	8002068 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	4a2c      	ldr	r2, [pc, #176]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002030:	4a26      	ldr	r2, [pc, #152]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002038:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002044:	23c0      	movs	r3, #192	@ 0xc0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002054:	2302      	movs	r3, #2
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002062:	f000 fe2f 	bl	8002cc4 <HAL_GPIO_Init>
}
 8002066:	e02d      	b.n	80020c4 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1a      	ldr	r2, [pc, #104]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x17c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d128      	bne.n	80020c4 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	4a15      	ldr	r2, [pc, #84]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6593      	str	r3, [r2, #88]	@ 0x58
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x170>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020a2:	2303      	movs	r3, #3
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020b2:	2302      	movs	r3, #2
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c0:	f000 fe00 	bl	8002cc4 <HAL_GPIO_Init>
}
 80020c4:	bf00      	nop
 80020c6:	3738      	adds	r7, #56	@ 0x38
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000c00 	.word	0x40000c00

080020dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002154 <HAL_TIM_Base_MspInit+0x78>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d114      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_TIM_Base_MspInit+0x7c>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_TIM_Base_MspInit+0x7c>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_TIM_Base_MspInit+0x7c>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	2036      	movs	r0, #54	@ 0x36
 800210c:	f000 fa44 	bl	8002598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002110:	2036      	movs	r0, #54	@ 0x36
 8002112:	f000 fa6d 	bl	80025f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002116:	e018      	b.n	800214a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0f      	ldr	r2, [pc, #60]	@ (800215c <HAL_TIM_Base_MspInit+0x80>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d113      	bne.n	800214a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_TIM_Base_MspInit+0x7c>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_TIM_Base_MspInit+0x7c>)
 8002128:	f043 0320 	orr.w	r3, r3, #32
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_TIM_Base_MspInit+0x7c>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2037      	movs	r0, #55	@ 0x37
 8002140:	f000 fa2a 	bl	8002598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002144:	2037      	movs	r0, #55	@ 0x37
 8002146:	f000 fa53 	bl	80025f0 <HAL_NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40001000 	.word	0x40001000
 8002158:	40021000 	.word	0x40021000
 800215c:	40001400 	.word	0x40001400

08002160 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 8002166:	4a15      	ldr	r2, [pc, #84]	@ (80021bc <MX_USART1_UART_Init+0x5c>)
 8002168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800216a:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <MX_USART1_UART_Init+0x58>)
 80021a4:	f004 ffcc 	bl	8007140 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021ae:	f7ff fb29 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000904 	.word	0x20000904
 80021bc:	40013800 	.word	0x40013800

080021c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ac      	sub	sp, #176	@ 0xb0
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2288      	movs	r2, #136	@ 0x88
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f006 fb6b 	bl	80088bc <memset>
  if(uartHandle->Instance==USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	@ (8002270 <HAL_UART_MspInit+0xb0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d13a      	bne.n	8002266 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021f4:	2300      	movs	r3, #0
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 f84f 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002208:	f7ff fafc 	bl	8001804 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_UART_MspInit+0xb4>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002210:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <HAL_UART_MspInit+0xb4>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002216:	6613      	str	r3, [r2, #96]	@ 0x60
 8002218:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <HAL_UART_MspInit+0xb4>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_UART_MspInit+0xb4>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002228:	4a12      	ldr	r2, [pc, #72]	@ (8002274 <HAL_UART_MspInit+0xb4>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_UART_MspInit+0xb4>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800223c:	23c0      	movs	r3, #192	@ 0xc0
 800223e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <HAL_UART_MspInit+0xb8>)
 8002262:	f000 fd2f 	bl	8002cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	37b0      	adds	r7, #176	@ 0xb0
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40013800 	.word	0x40013800
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400

0800227c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002280:	f7ff fcee 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	@ (80022bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <LoopForever+0xe>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	@ (80022c8 <LoopForever+0x16>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f006 fb6b 	bl	8008984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ae:	f7ff f9f5 	bl	800169c <main>

080022b2 <LoopForever>:

LoopForever:
    b LoopForever
 80022b2:	e7fe      	b.n	80022b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80022c0:	080097f4 	.word	0x080097f4
  ldr r2, =_sbss
 80022c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80022c8:	20000adc 	.word	0x20000adc

080022cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC1_2_IRQHandler>

080022ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f93d 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f80e 	bl	8002300 <HAL_InitTick>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	e001      	b.n	80022f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022f0:	f7ff fba8 	bl	8001a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800230c:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_InitTick+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d023      	beq.n	800235c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_InitTick+0x70>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <HAL_InitTick+0x6c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f978 	bl	8002620 <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d809      	bhi.n	8002350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f928 	bl	8002598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_InitTick+0x74>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e007      	b.n	8002360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e004      	b.n	8002360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e001      	b.n	8002360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000000c 	.word	0x2000000c
 8002370:	20000004 	.word	0x20000004
 8002374:	20000008 	.word	0x20000008

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	2000000c 	.word	0x2000000c
 800239c:	2000098c 	.word	0x2000098c

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000098c 	.word	0x2000098c

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	@ (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b07      	cmp	r3, #7
 8002564:	d00f      	beq.n	8002586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b06      	cmp	r3, #6
 800256a:	d00c      	beq.n	8002586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d009      	beq.n	8002586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d006      	beq.n	8002586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d003      	beq.n	8002586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800257e:	21a6      	movs	r1, #166	@ 0xa6
 8002580:	4804      	ldr	r0, [pc, #16]	@ (8002594 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002582:	f7ff f957 	bl	8001834 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff16 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	08009520 	.word	0x08009520

08002598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d903      	bls.n	80025b8 <HAL_NVIC_SetPriority+0x20>
 80025b0:	21be      	movs	r1, #190	@ 0xbe
 80025b2:	480e      	ldr	r0, [pc, #56]	@ (80025ec <HAL_NVIC_SetPriority+0x54>)
 80025b4:	f7ff f93e 	bl	8001834 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	d903      	bls.n	80025c6 <HAL_NVIC_SetPriority+0x2e>
 80025be:	21bf      	movs	r1, #191	@ 0xbf
 80025c0:	480a      	ldr	r0, [pc, #40]	@ (80025ec <HAL_NVIC_SetPriority+0x54>)
 80025c2:	f7ff f937 	bl	8001834 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80025c6:	f7ff ff1b 	bl	8002400 <__NVIC_GetPriorityGrouping>
 80025ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	6978      	ldr	r0, [r7, #20]
 80025d2:	f7ff ff6b 	bl	80024ac <NVIC_EncodePriority>
 80025d6:	4602      	mov	r2, r0
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff3a 	bl	8002458 <__NVIC_SetPriority>
}
 80025e4:	bf00      	nop
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08009520 	.word	0x08009520

080025f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da03      	bge.n	800260a <HAL_NVIC_EnableIRQ+0x1a>
 8002602:	21d2      	movs	r1, #210	@ 0xd2
 8002604:	4805      	ldr	r0, [pc, #20]	@ (800261c <HAL_NVIC_EnableIRQ+0x2c>)
 8002606:	f7ff f915 	bl	8001834 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff04 	bl	800241c <__NVIC_EnableIRQ>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	08009520 	.word	0x08009520

08002620 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff73 	bl	8002514 <SysTick_Config>
 800262e:	4603      	mov	r3, r0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e19d      	b.n	8002986 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a79      	ldr	r2, [pc, #484]	@ (8002834 <HAL_DMA_Init+0x1fc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d044      	beq.n	80026de <HAL_DMA_Init+0xa6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <HAL_DMA_Init+0x200>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d03f      	beq.n	80026de <HAL_DMA_Init+0xa6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a76      	ldr	r2, [pc, #472]	@ (800283c <HAL_DMA_Init+0x204>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d03a      	beq.n	80026de <HAL_DMA_Init+0xa6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a74      	ldr	r2, [pc, #464]	@ (8002840 <HAL_DMA_Init+0x208>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d035      	beq.n	80026de <HAL_DMA_Init+0xa6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	@ (8002844 <HAL_DMA_Init+0x20c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d030      	beq.n	80026de <HAL_DMA_Init+0xa6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a71      	ldr	r2, [pc, #452]	@ (8002848 <HAL_DMA_Init+0x210>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_DMA_Init+0xa6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a70      	ldr	r2, [pc, #448]	@ (800284c <HAL_DMA_Init+0x214>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d026      	beq.n	80026de <HAL_DMA_Init+0xa6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	@ (8002850 <HAL_DMA_Init+0x218>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d021      	beq.n	80026de <HAL_DMA_Init+0xa6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	@ (8002854 <HAL_DMA_Init+0x21c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d01c      	beq.n	80026de <HAL_DMA_Init+0xa6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_DMA_Init+0x220>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d017      	beq.n	80026de <HAL_DMA_Init+0xa6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6a      	ldr	r2, [pc, #424]	@ (800285c <HAL_DMA_Init+0x224>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d012      	beq.n	80026de <HAL_DMA_Init+0xa6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	@ (8002860 <HAL_DMA_Init+0x228>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00d      	beq.n	80026de <HAL_DMA_Init+0xa6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a67      	ldr	r2, [pc, #412]	@ (8002864 <HAL_DMA_Init+0x22c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Init+0xa6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	@ (8002868 <HAL_DMA_Init+0x230>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <HAL_DMA_Init+0xa6>
 80026d6:	21a5      	movs	r1, #165	@ 0xa5
 80026d8:	4864      	ldr	r0, [pc, #400]	@ (800286c <HAL_DMA_Init+0x234>)
 80026da:	f7ff f8ab 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_DMA_Init+0xc8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d008      	beq.n	8002700 <HAL_DMA_Init+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026f6:	d003      	beq.n	8002700 <HAL_DMA_Init+0xc8>
 80026f8:	21a6      	movs	r1, #166	@ 0xa6
 80026fa:	485c      	ldr	r0, [pc, #368]	@ (800286c <HAL_DMA_Init+0x234>)
 80026fc:	f7ff f89a 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b40      	cmp	r3, #64	@ 0x40
 8002706:	d007      	beq.n	8002718 <HAL_DMA_Init+0xe0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_Init+0xe0>
 8002710:	21a7      	movs	r1, #167	@ 0xa7
 8002712:	4856      	ldr	r0, [pc, #344]	@ (800286c <HAL_DMA_Init+0x234>)
 8002714:	f7ff f88e 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b80      	cmp	r3, #128	@ 0x80
 800271e:	d007      	beq.n	8002730 <HAL_DMA_Init+0xf8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_Init+0xf8>
 8002728:	21a8      	movs	r1, #168	@ 0xa8
 800272a:	4850      	ldr	r0, [pc, #320]	@ (800286c <HAL_DMA_Init+0x234>)
 800272c:	f7ff f882 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <HAL_DMA_Init+0x11c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002740:	d008      	beq.n	8002754 <HAL_DMA_Init+0x11c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274a:	d003      	beq.n	8002754 <HAL_DMA_Init+0x11c>
 800274c:	21a9      	movs	r1, #169	@ 0xa9
 800274e:	4847      	ldr	r0, [pc, #284]	@ (800286c <HAL_DMA_Init+0x234>)
 8002750:	f7ff f870 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <HAL_DMA_Init+0x140>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002764:	d008      	beq.n	8002778 <HAL_DMA_Init+0x140>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800276e:	d003      	beq.n	8002778 <HAL_DMA_Init+0x140>
 8002770:	21aa      	movs	r1, #170	@ 0xaa
 8002772:	483e      	ldr	r0, [pc, #248]	@ (800286c <HAL_DMA_Init+0x234>)
 8002774:	f7ff f85e 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_DMA_Init+0x158>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b20      	cmp	r3, #32
 8002786:	d003      	beq.n	8002790 <HAL_DMA_Init+0x158>
 8002788:	21ab      	movs	r1, #171	@ 0xab
 800278a:	4838      	ldr	r0, [pc, #224]	@ (800286c <HAL_DMA_Init+0x234>)
 800278c:	f7ff f852 	bl	8001834 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_DMA_Init+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a0:	d00d      	beq.n	80027be <HAL_DMA_Init+0x186>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Init+0x186>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027b4:	d003      	beq.n	80027be <HAL_DMA_Init+0x186>
 80027b6:	21ac      	movs	r1, #172	@ 0xac
 80027b8:	482c      	ldr	r0, [pc, #176]	@ (800286c <HAL_DMA_Init+0x234>)
 80027ba:	f7ff f83b 	bl	8001834 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01f      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d01b      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d017      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d013      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00f      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d00b      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d003      	beq.n	8002806 <HAL_DMA_Init+0x1ce>
 80027fe:	21ae      	movs	r1, #174	@ 0xae
 8002800:	481a      	ldr	r0, [pc, #104]	@ (800286c <HAL_DMA_Init+0x234>)
 8002802:	f7ff f817 	bl	8001834 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <HAL_DMA_Init+0x238>)
 800280e:	429a      	cmp	r2, r3
 8002810:	d836      	bhi.n	8002880 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_DMA_Init+0x23c>)
 800281a:	4413      	add	r3, r2
 800281c:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_DMA_Init+0x240>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	009a      	lsls	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a13      	ldr	r2, [pc, #76]	@ (800287c <HAL_DMA_Init+0x244>)
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002830:	e035      	b.n	800289e <HAL_DMA_Init+0x266>
 8002832:	bf00      	nop
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020080 	.word	0x40020080
 8002850:	40020408 	.word	0x40020408
 8002854:	4002041c 	.word	0x4002041c
 8002858:	40020430 	.word	0x40020430
 800285c:	40020444 	.word	0x40020444
 8002860:	40020458 	.word	0x40020458
 8002864:	4002046c 	.word	0x4002046c
 8002868:	40020480 	.word	0x40020480
 800286c:	0800955c 	.word	0x0800955c
 8002870:	40020407 	.word	0x40020407
 8002874:	bffdfff8 	.word	0xbffdfff8
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <HAL_DMA_Init+0x358>)
 8002888:	4413      	add	r3, r2
 800288a:	4a42      	ldr	r2, [pc, #264]	@ (8002994 <HAL_DMA_Init+0x35c>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a3f      	ldr	r2, [pc, #252]	@ (8002998 <HAL_DMA_Init+0x360>)
 800289c:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80028b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028f8:	d039      	beq.n	800296e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	4a27      	ldr	r2, [pc, #156]	@ (800299c <HAL_DMA_Init+0x364>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d11a      	bne.n	800293a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002904:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <HAL_DMA_Init+0x368>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290c:	f003 031c 	and.w	r3, r3, #28
 8002910:	210f      	movs	r1, #15
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	4921      	ldr	r1, [pc, #132]	@ (80029a0 <HAL_DMA_Init+0x368>)
 800291a:	4013      	ands	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <HAL_DMA_Init+0x368>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 031c 	and.w	r3, r3, #28
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	491b      	ldr	r1, [pc, #108]	@ (80029a0 <HAL_DMA_Init+0x368>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e019      	b.n	800296e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800293a:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_DMA_Init+0x36c>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f003 031c 	and.w	r3, r3, #28
 8002946:	210f      	movs	r1, #15
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4915      	ldr	r1, [pc, #84]	@ (80029a4 <HAL_DMA_Init+0x36c>)
 8002950:	4013      	ands	r3, r2
 8002952:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_DMA_Init+0x36c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	f003 031c 	and.w	r3, r3, #28
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	490e      	ldr	r1, [pc, #56]	@ (80029a4 <HAL_DMA_Init+0x36c>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	bffdfbf8 	.word	0xbffdfbf8
 8002994:	cccccccd 	.word	0xcccccccd
 8002998:	40020400 	.word	0x40020400
 800299c:	40020000 	.word	0x40020000
 80029a0:	400200a8 	.word	0x400200a8
 80029a4:	400204a8 	.word	0x400204a8

080029a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_Start_IT+0x20>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c6:	d304      	bcc.n	80029d2 <HAL_DMA_Start_IT+0x2a>
 80029c8:	f240 11df 	movw	r1, #479	@ 0x1df
 80029cc:	482c      	ldr	r0, [pc, #176]	@ (8002a80 <HAL_DMA_Start_IT+0xd8>)
 80029ce:	f7fe ff31 	bl	8001834 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Start_IT+0x38>
 80029dc:	2302      	movs	r3, #2
 80029de:	e04b      	b.n	8002a78 <HAL_DMA_Start_IT+0xd0>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d13a      	bne.n	8002a6a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f923 	bl	8002c64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 020e 	orr.w	r2, r2, #14
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e00f      	b.n	8002a58 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0204 	bic.w	r2, r2, #4
 8002a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 020a 	orr.w	r2, r2, #10
 8002a56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e005      	b.n	8002a76 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
 8002a74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	0800955c 	.word	0x0800955c

08002a84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d005      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e029      	b.n	8002afc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 020e 	bic.w	r2, r2, #14
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002acc:	f003 021c 	and.w	r2, r3, #28
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
    }
  }
  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f003 031c 	and.w	r3, r3, #28
 8002b26:	2204      	movs	r2, #4
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d026      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x7a>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d021      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0204 	bic.w	r2, r2, #4
 8002b58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f003 021c 	and.w	r2, r3, #28
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	2104      	movs	r1, #4
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d071      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b7e:	e06c      	b.n	8002c5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	f003 031c 	and.w	r3, r3, #28
 8002b88:	2202      	movs	r2, #2
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02e      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xec>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d029      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020a 	bic.w	r2, r2, #10
 8002bba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc8:	f003 021c 	and.w	r2, r3, #28
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d038      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002bf0:	e033      	b.n	8002c5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f003 031c 	and.w	r3, r3, #28
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x156>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d025      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 020e 	bic.w	r2, r2, #14
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	f003 021c 	and.w	r2, r3, #28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
}
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f003 021c 	and.w	r2, r3, #28
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d108      	bne.n	8002ca8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ca6:	e007      	b.n	8002cb8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cd8:	d01f      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd0 <HAL_GPIO_Init+0x10c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01b      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd4 <HAL_GPIO_Init+0x110>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d017      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd8 <HAL_GPIO_Init+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a39      	ldr	r2, [pc, #228]	@ (8002ddc <HAL_GPIO_Init+0x118>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a38      	ldr	r2, [pc, #224]	@ (8002de0 <HAL_GPIO_Init+0x11c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a37      	ldr	r2, [pc, #220]	@ (8002de4 <HAL_GPIO_Init+0x120>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a36      	ldr	r2, [pc, #216]	@ (8002de8 <HAL_GPIO_Init+0x124>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x56>
 8002d12:	21aa      	movs	r1, #170	@ 0xaa
 8002d14:	4835      	ldr	r0, [pc, #212]	@ (8002dec <HAL_GPIO_Init+0x128>)
 8002d16:	f7fe fd8d 	bl	8001834 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_GPIO_Init+0x6a>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2c:	d303      	bcc.n	8002d36 <HAL_GPIO_Init+0x72>
 8002d2e:	21ab      	movs	r1, #171	@ 0xab
 8002d30:	482e      	ldr	r0, [pc, #184]	@ (8002dec <HAL_GPIO_Init+0x128>)
 8002d32:	f7fe fd7f 	bl	8001834 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 823d 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	f000 8238 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b11      	cmp	r3, #17
 8002d50:	f000 8233 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	f000 822e 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	f000 8229 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002d70:	f000 8223 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002d7c:	f000 821d 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002d88:	f000 8217 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002d94:	f000 8211 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002da0:	f000 820b 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002dac:	f000 8205 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	f000 8200 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b0b      	cmp	r3, #11
 8002dc0:	f000 81fb 	beq.w	80031ba <HAL_GPIO_Init+0x4f6>
 8002dc4:	21ac      	movs	r1, #172	@ 0xac
 8002dc6:	4809      	ldr	r0, [pc, #36]	@ (8002dec <HAL_GPIO_Init+0x128>)
 8002dc8:	f7fe fd34 	bl	8001834 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dcc:	e1f5      	b.n	80031ba <HAL_GPIO_Init+0x4f6>
 8002dce:	bf00      	nop
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	48001400 	.word	0x48001400
 8002de4:	48001800 	.word	0x48001800
 8002de8:	48001c00 	.word	0x48001c00
 8002dec:	08009594 	.word	0x08009594
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 81d6 	beq.w	80031b4 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d005      	beq.n	8002e20 <HAL_GPIO_Init+0x15c>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d144      	bne.n	8002eaa <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00f      	beq.n	8002e48 <HAL_GPIO_Init+0x184>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d00b      	beq.n	8002e48 <HAL_GPIO_Init+0x184>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x184>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x184>
 8002e40:	21bb      	movs	r1, #187	@ 0xbb
 8002e42:	489c      	ldr	r0, [pc, #624]	@ (80030b4 <HAL_GPIO_Init+0x3f0>)
 8002e44:	f7fe fcf6 	bl	8001834 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d118      	bne.n	8002ee8 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d027      	beq.n	8002f44 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_GPIO_Init+0x250>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d007      	beq.n	8002f14 <HAL_GPIO_Init+0x250>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x250>
 8002f0c:	21dc      	movs	r1, #220	@ 0xdc
 8002f0e:	4869      	ldr	r0, [pc, #420]	@ (80030b4 <HAL_GPIO_Init+0x3f0>)
 8002f10:	f7fe fc90 	bl	8001834 <assert_failed>

        temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d14f      	bne.n	8002ff0 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f56:	d01f      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a57      	ldr	r2, [pc, #348]	@ (80030b8 <HAL_GPIO_Init+0x3f4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01b      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a56      	ldr	r2, [pc, #344]	@ (80030bc <HAL_GPIO_Init+0x3f8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d017      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a55      	ldr	r2, [pc, #340]	@ (80030c0 <HAL_GPIO_Init+0x3fc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a54      	ldr	r2, [pc, #336]	@ (80030c4 <HAL_GPIO_Init+0x400>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00f      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a53      	ldr	r2, [pc, #332]	@ (80030c8 <HAL_GPIO_Init+0x404>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_GPIO_Init+0x408>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a51      	ldr	r2, [pc, #324]	@ (80030d0 <HAL_GPIO_Init+0x40c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
 8002f90:	21e8      	movs	r1, #232	@ 0xe8
 8002f92:	4848      	ldr	r0, [pc, #288]	@ (80030b4 <HAL_GPIO_Init+0x3f0>)
 8002f94:	f7fe fc4e 	bl	8001834 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d903      	bls.n	8002fa8 <HAL_GPIO_Init+0x2e4>
 8002fa0:	21e9      	movs	r1, #233	@ 0xe9
 8002fa2:	4844      	ldr	r0, [pc, #272]	@ (80030b4 <HAL_GPIO_Init+0x3f0>)
 8002fa4:	f7fe fc46 	bl	8001834 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	08da      	lsrs	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3208      	adds	r2, #8
 8002fea:	6939      	ldr	r1, [r7, #16]
 8002fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80c1 	beq.w	80031b4 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b28      	ldr	r3, [pc, #160]	@ (80030d4 <HAL_GPIO_Init+0x410>)
 8003034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003036:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_GPIO_Init+0x410>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6613      	str	r3, [r2, #96]	@ 0x60
 800303e:	4b25      	ldr	r3, [pc, #148]	@ (80030d4 <HAL_GPIO_Init+0x410>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800304a:	4a23      	ldr	r2, [pc, #140]	@ (80030d8 <HAL_GPIO_Init+0x414>)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003074:	d03a      	beq.n	80030ec <HAL_GPIO_Init+0x428>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <HAL_GPIO_Init+0x3f4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d034      	beq.n	80030e8 <HAL_GPIO_Init+0x424>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a0e      	ldr	r2, [pc, #56]	@ (80030bc <HAL_GPIO_Init+0x3f8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02e      	beq.n	80030e4 <HAL_GPIO_Init+0x420>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a0d      	ldr	r2, [pc, #52]	@ (80030c0 <HAL_GPIO_Init+0x3fc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d028      	beq.n	80030e0 <HAL_GPIO_Init+0x41c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <HAL_GPIO_Init+0x400>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d022      	beq.n	80030dc <HAL_GPIO_Init+0x418>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0b      	ldr	r2, [pc, #44]	@ (80030c8 <HAL_GPIO_Init+0x404>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x3ea>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <HAL_GPIO_Init+0x408>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_GPIO_Init+0x3e6>
 80030a6:	2306      	movs	r3, #6
 80030a8:	e021      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e01f      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e01d      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030b2:	bf00      	nop
 80030b4:	08009594 	.word	0x08009594
 80030b8:	48000400 	.word	0x48000400
 80030bc:	48000800 	.word	0x48000800
 80030c0:	48000c00 	.word	0x48000c00
 80030c4:	48001000 	.word	0x48001000
 80030c8:	48001400 	.word	0x48001400
 80030cc:	48001800 	.word	0x48001800
 80030d0:	48001c00 	.word	0x48001c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010000 	.word	0x40010000
 80030dc:	2304      	movs	r3, #4
 80030de:	e006      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030e0:	2303      	movs	r3, #3
 80030e2:	e004      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e002      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_GPIO_Init+0x42a>
 80030ec:	2300      	movs	r3, #0
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	f002 0203 	and.w	r2, r2, #3
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	4093      	lsls	r3, r2
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030fe:	4935      	ldr	r1, [pc, #212]	@ (80031d4 <HAL_GPIO_Init+0x510>)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800310c:	4b32      	ldr	r3, [pc, #200]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003130:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003136:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800315a:	4a1f      	ldr	r2, [pc, #124]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003160:	4b1d      	ldr	r3, [pc, #116]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003184:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ae:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <HAL_GPIO_Init+0x514>)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f ae13 	bne.w	8002df0 <HAL_GPIO_Init+0x12c>
  }
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <HAL_GPIO_WritePin+0x20>
 80031f2:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80031f6:	480e      	ldr	r0, [pc, #56]	@ (8003230 <HAL_GPIO_WritePin+0x54>)
 80031f8:	f7fe fb1c 	bl	8001834 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_WritePin+0x36>
 8003202:	787b      	ldrb	r3, [r7, #1]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d004      	beq.n	8003212 <HAL_GPIO_WritePin+0x36>
 8003208:	f240 11af 	movw	r1, #431	@ 0x1af
 800320c:	4808      	ldr	r0, [pc, #32]	@ (8003230 <HAL_GPIO_WritePin+0x54>)
 800320e:	f7fe fb11 	bl	8001834 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003212:	787b      	ldrb	r3, [r7, #1]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003218:	887a      	ldrh	r2, [r7, #2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800321e:	e002      	b.n	8003226 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08009594 	.word	0x08009594

08003234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_PWREx_GetVoltageRange+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40007000 	.word	0x40007000

08003250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325e:	d007      	beq.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003266:	d003      	beq.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003268:	21a7      	movs	r1, #167	@ 0xa7
 800326a:	4826      	ldr	r0, [pc, #152]	@ (8003304 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800326c:	f7fe fae2 	bl	8001834 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003276:	d130      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003284:	d038      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2232      	movs	r2, #50	@ 0x32
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ac:	e002      	b.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c0:	d102      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x78>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f2      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d110      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d007      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032e8:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032f0:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	080095d0 	.word	0x080095d0
 8003308:	40007000 	.word	0x40007000
 800330c:	20000004 	.word	0x20000004
 8003310:	431bde83 	.word	0x431bde83

08003314 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f000 bcef 	b.w	8003d06 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_OscConfig+0x2e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b1f      	cmp	r3, #31
 8003336:	d904      	bls.n	8003342 <HAL_RCC_OscConfig+0x2e>
 8003338:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800333c:	489a      	ldr	r0, [pc, #616]	@ (80035a8 <HAL_RCC_OscConfig+0x294>)
 800333e:	f7fe fa79 	bl	8001834 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b9a      	ldr	r3, [pc, #616]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	4b97      	ldr	r3, [pc, #604]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 813d 	beq.w	80035de <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_OscConfig+0x6a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d004      	beq.n	800337e <HAL_RCC_OscConfig+0x6a>
 8003374:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8003378:	488b      	ldr	r0, [pc, #556]	@ (80035a8 <HAL_RCC_OscConfig+0x294>)
 800337a:	f7fe fa5b 	bl	8001834 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2bff      	cmp	r3, #255	@ 0xff
 8003384:	d904      	bls.n	8003390 <HAL_RCC_OscConfig+0x7c>
 8003386:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800338a:	4887      	ldr	r0, [pc, #540]	@ (80035a8 <HAL_RCC_OscConfig+0x294>)
 800338c:	f7fe fa52 	bl	8001834 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d030      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	2b10      	cmp	r3, #16
 800339e:	d02c      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d028      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	2b30      	cmp	r3, #48	@ 0x30
 80033ae:	d024      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	2b40      	cmp	r3, #64	@ 0x40
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	2b50      	cmp	r3, #80	@ 0x50
 80033be:	d01c      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	2b60      	cmp	r3, #96	@ 0x60
 80033c6:	d018      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2b70      	cmp	r3, #112	@ 0x70
 80033ce:	d014      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	2b80      	cmp	r3, #128	@ 0x80
 80033d6:	d010      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	2b90      	cmp	r3, #144	@ 0x90
 80033de:	d00c      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	2ba0      	cmp	r3, #160	@ 0xa0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	2bb0      	cmp	r3, #176	@ 0xb0
 80033ee:	d004      	beq.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033f0:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80033f4:	486c      	ldr	r0, [pc, #432]	@ (80035a8 <HAL_RCC_OscConfig+0x294>)
 80033f6:	f7fe fa1d 	bl	8001834 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_RCC_OscConfig+0xfc>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	f040 808e 	bne.w	8003524 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b01      	cmp	r3, #1
 800340c:	f040 808a 	bne.w	8003524 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003410:	4b66      	ldr	r3, [pc, #408]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d006      	beq.n	800342a <HAL_RCC_OscConfig+0x116>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f000 bc6e 	b.w	8003d06 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <HAL_RCC_OscConfig+0x130>
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003442:	e005      	b.n	8003450 <HAL_RCC_OscConfig+0x13c>
 8003444:	4b59      	ldr	r3, [pc, #356]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003450:	4293      	cmp	r3, r2
 8003452:	d224      	bcs.n	800349e <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fec1 	bl	80041e0 <RCC_SetFlashLatencyFromMSIRange>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f000 bc4e 	b.w	8003d06 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346a:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4f      	ldr	r2, [pc, #316]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b4d      	ldr	r3, [pc, #308]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	494a      	ldr	r1, [pc, #296]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	4b48      	ldr	r3, [pc, #288]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	4945      	ldr	r1, [pc, #276]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e026      	b.n	80034ec <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800349e:	4b43      	ldr	r3, [pc, #268]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a42      	ldr	r2, [pc, #264]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	493d      	ldr	r1, [pc, #244]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034bc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	4938      	ldr	r1, [pc, #224]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fe80 	bl	80041e0 <RCC_SetFlashLatencyFromMSIRange>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f000 bc0d 	b.w	8003d06 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ec:	f000 fdb4 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	492c      	ldr	r1, [pc, #176]	@ (80035b0 <HAL_RCC_OscConfig+0x29c>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	4a2a      	ldr	r2, [pc, #168]	@ (80035b4 <HAL_RCC_OscConfig+0x2a0>)
 800350a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800350c:	4b2a      	ldr	r3, [pc, #168]	@ (80035b8 <HAL_RCC_OscConfig+0x2a4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fef5 	bl	8002300 <HAL_InitTick>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05d      	beq.n	80035dc <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	e3f0      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d032      	beq.n	8003592 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800352c:	4b1f      	ldr	r3, [pc, #124]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003538:	f7fe ff32 	bl	80023a0 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003540:	f7fe ff2e 	bl	80023a0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e3d9      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003552:	4b16      	ldr	r3, [pc, #88]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355e:	4b13      	ldr	r3, [pc, #76]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a12      	ldr	r2, [pc, #72]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	490d      	ldr	r1, [pc, #52]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	4908      	ldr	r1, [pc, #32]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
 8003590:	e025      	b.n	80035de <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <HAL_RCC_OscConfig+0x298>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800359e:	f7fe feff 	bl	80023a0 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a4:	e013      	b.n	80035ce <HAL_RCC_OscConfig+0x2ba>
 80035a6:	bf00      	nop
 80035a8:	0800960c 	.word	0x0800960c
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08009768 	.word	0x08009768
 80035b4:	20000004 	.word	0x20000004
 80035b8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035bc:	f7fe fef0 	bl	80023a0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e39b      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035ce:	4b97      	ldr	r3, [pc, #604]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x2a8>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d07e      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <HAL_RCC_OscConfig+0x2fc>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fa:	d009      	beq.n	8003610 <HAL_RCC_OscConfig+0x2fc>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003604:	d004      	beq.n	8003610 <HAL_RCC_OscConfig+0x2fc>
 8003606:	f240 2119 	movw	r1, #537	@ 0x219
 800360a:	4889      	ldr	r0, [pc, #548]	@ (8003830 <HAL_RCC_OscConfig+0x51c>)
 800360c:	f7fe f912 	bl	8001834 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x30e>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d10e      	bne.n	800363a <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d10b      	bne.n	800363a <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003622:	4b82      	ldr	r3, [pc, #520]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d05b      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3d2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d157      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e365      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
 8003644:	4b79      	ldr	r3, [pc, #484]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a78      	ldr	r2, [pc, #480]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800364a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e01d      	b.n	800368e <HAL_RCC_OscConfig+0x37a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0x362>
 800365c:	4b73      	ldr	r3, [pc, #460]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a72      	ldr	r2, [pc, #456]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b70      	ldr	r3, [pc, #448]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6f      	ldr	r2, [pc, #444]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0x37a>
 8003676:	4b6d      	ldr	r3, [pc, #436]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6c      	ldr	r2, [pc, #432]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6a      	ldr	r3, [pc, #424]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a69      	ldr	r2, [pc, #420]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003688:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800368c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe fe83 	bl	80023a0 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369e:	f7fe fe7f 	bl	80023a0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	@ 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e32a      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b0:	4b5e      	ldr	r3, [pc, #376]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x38a>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe fe6f 	bl	80023a0 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c6:	f7fe fe6b 	bl	80023a0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	@ 0x64
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e316      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036d8:	4b54      	ldr	r3, [pc, #336]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3b2>
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d077      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <HAL_RCC_OscConfig+0x3fc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003704:	d004      	beq.n	8003710 <HAL_RCC_OscConfig+0x3fc>
 8003706:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800370a:	4849      	ldr	r0, [pc, #292]	@ (8003830 <HAL_RCC_OscConfig+0x51c>)
 800370c:	f7fe f892 	bl	8001834 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b1f      	cmp	r3, #31
 8003716:	d904      	bls.n	8003722 <HAL_RCC_OscConfig+0x40e>
 8003718:	f240 214d 	movw	r1, #589	@ 0x24d
 800371c:	4844      	ldr	r0, [pc, #272]	@ (8003830 <HAL_RCC_OscConfig+0x51c>)
 800371e:	f7fe f889 	bl	8001834 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b04      	cmp	r3, #4
 8003726:	d005      	beq.n	8003734 <HAL_RCC_OscConfig+0x420>
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d119      	bne.n	8003762 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d116      	bne.n	8003762 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003734:	4b3d      	ldr	r3, [pc, #244]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x438>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e2dc      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	4b37      	ldr	r3, [pc, #220]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	4934      	ldr	r1, [pc, #208]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003760:	e040      	b.n	80037e4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d023      	beq.n	80037b2 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376a:	4b30      	ldr	r3, [pc, #192]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2f      	ldr	r2, [pc, #188]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe fe13 	bl	80023a0 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377e:	f7fe fe0f 	bl	80023a0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e2ba      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003790:	4b26      	ldr	r3, [pc, #152]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b23      	ldr	r3, [pc, #140]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	4920      	ldr	r1, [pc, #128]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
 80037b0:	e018      	b.n	80037e4 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80037b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe fdef 	bl	80023a0 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c6:	f7fe fdeb 	bl	80023a0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e296      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d04e      	beq.n	800388e <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_OscConfig+0x4f6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d004      	beq.n	800380a <HAL_RCC_OscConfig+0x4f6>
 8003800:	f240 218d 	movw	r1, #653	@ 0x28d
 8003804:	480a      	ldr	r0, [pc, #40]	@ (8003830 <HAL_RCC_OscConfig+0x51c>)
 8003806:	f7fe f815 	bl	8001834 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d021      	beq.n	8003856 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003818:	4a04      	ldr	r2, [pc, #16]	@ (800382c <HAL_RCC_OscConfig+0x518>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fe fdbd 	bl	80023a0 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	e00d      	b.n	8003846 <HAL_RCC_OscConfig+0x532>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	0800960c 	.word	0x0800960c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003834:	f7fe fdb4 	bl	80023a0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e25f      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003846:	4b66      	ldr	r3, [pc, #408]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ef      	beq.n	8003834 <HAL_RCC_OscConfig+0x520>
 8003854:	e01b      	b.n	800388e <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003856:	4b62      	ldr	r3, [pc, #392]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385c:	4a60      	ldr	r2, [pc, #384]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe fd9b 	bl	80023a0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386e:	f7fe fd97 	bl	80023a0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e242      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003880:	4b57      	ldr	r3, [pc, #348]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ef      	bne.n	800386e <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80b8 	beq.w	8003a0c <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x5ae>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_OscConfig+0x5ae>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d004      	beq.n	80038c2 <HAL_RCC_OscConfig+0x5ae>
 80038b8:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80038bc:	4849      	ldr	r0, [pc, #292]	@ (80039e4 <HAL_RCC_OscConfig+0x6d0>)
 80038be:	f7fd ffb9 	bl	8001834 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b44      	ldr	r3, [pc, #272]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	4a43      	ldr	r2, [pc, #268]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	4b3f      	ldr	r3, [pc, #252]	@ (80039e8 <HAL_RCC_OscConfig+0x6d4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f6:	4b3c      	ldr	r3, [pc, #240]	@ (80039e8 <HAL_RCC_OscConfig+0x6d4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a3b      	ldr	r2, [pc, #236]	@ (80039e8 <HAL_RCC_OscConfig+0x6d4>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fe fd4d 	bl	80023a0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7fe fd49 	bl	80023a0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1f4      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391c:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <HAL_RCC_OscConfig+0x6d4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d108      	bne.n	8003942 <HAL_RCC_OscConfig+0x62e>
 8003930:	4b2b      	ldr	r3, [pc, #172]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	4a2a      	ldr	r2, [pc, #168]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003940:	e024      	b.n	800398c <HAL_RCC_OscConfig+0x678>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d110      	bne.n	800396c <HAL_RCC_OscConfig+0x658>
 800394a:	4b25      	ldr	r3, [pc, #148]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003950:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800395a:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003960:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800396a:	e00f      	b.n	800398c <HAL_RCC_OscConfig+0x678>
 800396c:	4b1c      	ldr	r3, [pc, #112]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d016      	beq.n	80039c2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fe fd04 	bl	80023a0 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7fe fd00 	bl	80023a0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1a9      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_OscConfig+0x6cc>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ed      	beq.n	800399c <HAL_RCC_OscConfig+0x688>
 80039c0:	e01b      	b.n	80039fa <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7fe fced 	bl	80023a0 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c8:	e010      	b.n	80039ec <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7fe fce9 	bl	80023a0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d907      	bls.n	80039ec <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e192      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800960c 	.word	0x0800960c
 80039e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ec:	4b98      	ldr	r3, [pc, #608]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e7      	bne.n	80039ca <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a00:	4b93      	ldr	r3, [pc, #588]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4a92      	ldr	r2, [pc, #584]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x71a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_OscConfig+0x71a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d004      	beq.n	8003a2e <HAL_RCC_OscConfig+0x71a>
 8003a24:	f240 316e 	movw	r1, #878	@ 0x36e
 8003a28:	488a      	ldr	r0, [pc, #552]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003a2a:	f7fd ff03 	bl	8001834 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8166 	beq.w	8003d04 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	f040 813c 	bne.w	8003cba <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_RCC_OscConfig+0x758>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d00c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x758>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d008      	beq.n	8003a6c <HAL_RCC_OscConfig+0x758>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d004      	beq.n	8003a6c <HAL_RCC_OscConfig+0x758>
 8003a62:	f240 3176 	movw	r1, #886	@ 0x376
 8003a66:	487b      	ldr	r0, [pc, #492]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003a68:	f7fd fee4 	bl	8001834 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_RCC_OscConfig+0x768>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d904      	bls.n	8003a86 <HAL_RCC_OscConfig+0x772>
 8003a7c:	f240 3177 	movw	r1, #887	@ 0x377
 8003a80:	4874      	ldr	r0, [pc, #464]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003a82:	f7fd fed7 	bl	8001834 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d903      	bls.n	8003a96 <HAL_RCC_OscConfig+0x782>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a92:	2b56      	cmp	r3, #86	@ 0x56
 8003a94:	d904      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x78c>
 8003a96:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8003a9a:	486e      	ldr	r0, [pc, #440]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003a9c:	f7fd feca 	bl	8001834 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	2b07      	cmp	r3, #7
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_OscConfig+0x7a6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	2b11      	cmp	r3, #17
 8003aae:	d004      	beq.n	8003aba <HAL_RCC_OscConfig+0x7a6>
 8003ab0:	f240 317a 	movw	r1, #890	@ 0x37a
 8003ab4:	4867      	ldr	r0, [pc, #412]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003ab6:	f7fd febd 	bl	8001834 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7d0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d00c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7d0>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7d0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d004      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7d0>
 8003ada:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8003ade:	485d      	ldr	r0, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003ae0:	f7fd fea8 	bl	8001834 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_OscConfig+0x7fa>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d00c      	beq.n	8003b0e <HAL_RCC_OscConfig+0x7fa>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_OscConfig+0x7fa>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d004      	beq.n	8003b0e <HAL_RCC_OscConfig+0x7fa>
 8003b04:	f240 317d 	movw	r1, #893	@ 0x37d
 8003b08:	4852      	ldr	r0, [pc, #328]	@ (8003c54 <HAL_RCC_OscConfig+0x940>)
 8003b0a:	f7fd fe93 	bl	8001834 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b0e:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0203 	and.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d130      	bne.n	8003b84 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d127      	bne.n	8003b84 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d11f      	bne.n	8003b84 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b4e:	2a07      	cmp	r2, #7
 8003b50:	bf14      	ite	ne
 8003b52:	2201      	movne	r2, #1
 8003b54:	2200      	moveq	r2, #0
 8003b56:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d113      	bne.n	8003b84 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d109      	bne.n	8003b84 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d074      	beq.n	8003c6e <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b0c      	cmp	r3, #12
 8003b88:	d06f      	beq.n	8003c6a <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b8a:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b96:	4b2e      	ldr	r3, [pc, #184]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0af      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a29      	ldr	r2, [pc, #164]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb2:	f7fe fbf5 	bl	80023a0 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fe fbf1 	bl	80023a0 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e09c      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_RCC_OscConfig+0x944>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	4311      	orrs	r1, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bf2:	0212      	lsls	r2, r2, #8
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bfa:	0852      	lsrs	r2, r2, #1
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0552      	lsls	r2, r2, #21
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c06:	0852      	lsrs	r2, r2, #1
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	0652      	lsls	r2, r2, #25
 8003c0c:	4311      	orrs	r1, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c12:	0912      	lsrs	r2, r2, #4
 8003c14:	0452      	lsls	r2, r2, #17
 8003c16:	430a      	orrs	r2, r1
 8003c18:	490d      	ldr	r1, [pc, #52]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a0b      	ldr	r2, [pc, #44]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003c24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c28:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	@ (8003c50 <HAL_RCC_OscConfig+0x93c>)
 8003c30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c34:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c36:	f7fe fbb3 	bl	80023a0 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fe fbaf 	bl	80023a0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e05a      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
 8003c50:	40021000 	.word	0x40021000
 8003c54:	0800960c 	.word	0x0800960c
 8003c58:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ea      	beq.n	8003c3e <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c68:	e04c      	b.n	8003d04 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e04b      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6e:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d144      	bne.n	8003d04 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c7a:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003c80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c84:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c86:	4b22      	ldr	r3, [pc, #136]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003c8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c90:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c92:	f7fe fb85 	bl	80023a0 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fb81 	bl	80023a0 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e02c      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cac:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x986>
 8003cb8:	e024      	b.n	8003d04 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d01f      	beq.n	8003d00 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fb68 	bl	80023a0 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe fb64 	bl	80023a0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf2:	4b07      	ldr	r3, [pc, #28]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	4906      	ldr	r1, [pc, #24]	@ (8003d10 <HAL_RCC_OscConfig+0x9fc>)
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_RCC_OscConfig+0xa00>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	60cb      	str	r3, [r1, #12]
 8003cfe:	e001      	b.n	8003d04 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	feeefffc 	.word	0xfeeefffc

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e186      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x24>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d904      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x2e>
 8003d3c:	f240 4159 	movw	r1, #1113	@ 0x459
 8003d40:	4882      	ldr	r0, [pc, #520]	@ (8003f4c <HAL_RCC_ClockConfig+0x234>)
 8003d42:	f7fd fd77 	bl	8001834 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x56>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d00d      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x56>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x56>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d007      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x56>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d004      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x56>
 8003d64:	f240 415a 	movw	r1, #1114	@ 0x45a
 8003d68:	4878      	ldr	r0, [pc, #480]	@ (8003f4c <HAL_RCC_ClockConfig+0x234>)
 8003d6a:	f7fd fd63 	bl	8001834 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6e:	4b78      	ldr	r3, [pc, #480]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d910      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7c:	4b74      	ldr	r3, [pc, #464]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 0207 	bic.w	r2, r3, #7
 8003d84:	4972      	ldr	r1, [pc, #456]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8c:	4b70      	ldr	r3, [pc, #448]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e14d      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d039      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d024      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d020      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b90      	cmp	r3, #144	@ 0x90
 8003dc0:	d01c      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dc8:	d018      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2bb0      	cmp	r3, #176	@ 0xb0
 8003dd0:	d014      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd8:	d010      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2bd0      	cmp	r3, #208	@ 0xd0
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2be0      	cmp	r3, #224	@ 0xe0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2bf0      	cmp	r3, #240	@ 0xf0
 8003df0:	d004      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xe4>
 8003df2:	f240 4172 	movw	r1, #1138	@ 0x472
 8003df6:	4855      	ldr	r0, [pc, #340]	@ (8003f4c <HAL_RCC_ClockConfig+0x234>)
 8003df8:	f7fd fd1c 	bl	8001834 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b54      	ldr	r3, [pc, #336]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d908      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b51      	ldr	r3, [pc, #324]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494e      	ldr	r1, [pc, #312]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d061      	beq.n	8003eee <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d010      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x13c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d00c      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x13c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d008      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x13c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d004      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x13c>
 8003e4a:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003e4e:	483f      	ldr	r0, [pc, #252]	@ (8003f4c <HAL_RCC_ClockConfig+0x234>)
 8003e50:	f7fd fcf0 	bl	8001834 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d121      	bne.n	8003eac <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0e6      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d115      	bne.n	8003eac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0da      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e8c:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0ce      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0c6      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eac:	4b29      	ldr	r3, [pc, #164]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 0203 	bic.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4926      	ldr	r1, [pc, #152]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fe fa6f 	bl	80023a0 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec6:	f7fe fa6b 	bl	80023a0 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0ae      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003edc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 020c 	and.w	r2, r3, #12
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d1eb      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d208      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	490f      	ldr	r1, [pc, #60]	@ (8003f54 <HAL_RCC_ClockConfig+0x23c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d216      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	4907      	ldr	r1, [pc, #28]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HAL_RCC_ClockConfig+0x238>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d007      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e076      	b.n	800403a <HAL_RCC_ClockConfig+0x322>
 8003f4c:	0800960c 	.word	0x0800960c
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d025      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d018      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x286>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f74:	d013      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x286>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f7e:	d00e      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x286>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x286>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f92:	d004      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x286>
 8003f94:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8003f98:	482a      	ldr	r0, [pc, #168]	@ (8004044 <HAL_RCC_ClockConfig+0x32c>)
 8003f9a:	f7fd fc4b 	bl	8001834 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004048 <HAL_RCC_ClockConfig+0x330>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4927      	ldr	r1, [pc, #156]	@ (8004048 <HAL_RCC_ClockConfig+0x330>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d026      	beq.n	800400a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d018      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fcc:	d013      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fea:	d004      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003fec:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003ff0:	4814      	ldr	r0, [pc, #80]	@ (8004044 <HAL_RCC_ClockConfig+0x32c>)
 8003ff2:	f7fd fc1f 	bl	8001834 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b14      	ldr	r3, [pc, #80]	@ (8004048 <HAL_RCC_ClockConfig+0x330>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4910      	ldr	r1, [pc, #64]	@ (8004048 <HAL_RCC_ClockConfig+0x330>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400a:	f000 f825 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HAL_RCC_ClockConfig+0x330>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490c      	ldr	r1, [pc, #48]	@ (800404c <HAL_RCC_ClockConfig+0x334>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <HAL_RCC_ClockConfig+0x338>)
 8004028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800402a:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <HAL_RCC_ClockConfig+0x33c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe f966 	bl	8002300 <HAL_InitTick>
 8004034:	4603      	mov	r3, r0
 8004036:	72fb      	strb	r3, [r7, #11]

  return status;
 8004038:	7afb      	ldrb	r3, [r7, #11]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	0800960c 	.word	0x0800960c
 8004048:	40021000 	.word	0x40021000
 800404c:	08009768 	.word	0x08009768
 8004050:	20000004 	.word	0x20000004
 8004054:	20000008 	.word	0x20000008

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004070:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d121      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d11e      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800408c:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004098:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 800409a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e005      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040d0:	4b25      	ldr	r3, [pc, #148]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e004      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040dc:	4b23      	ldr	r3, [pc, #140]	@ (800416c <HAL_RCC_GetSysClockFreq+0x114>)
 80040de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d134      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0xa6>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d003      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0xac>
 80040fc:	e005      	b.n	800410a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x110>)
 8004100:	617b      	str	r3, [r7, #20]
      break;
 8004102:	e005      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004104:	4b19      	ldr	r3, [pc, #100]	@ (800416c <HAL_RCC_GetSysClockFreq+0x114>)
 8004106:	617b      	str	r3, [r7, #20]
      break;
 8004108:	e002      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	617b      	str	r3, [r7, #20]
      break;
 800410e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004110:	4b13      	ldr	r3, [pc, #76]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	3301      	adds	r3, #1
 800411c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	fb03 f202 	mul.w	r2, r3, r2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004136:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	0e5b      	lsrs	r3, r3, #25
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	3301      	adds	r3, #1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004150:	69bb      	ldr	r3, [r7, #24]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	@ 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	08009780 	.word	0x08009780
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000004 	.word	0x20000004

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4904      	ldr	r1, [pc, #16]	@ (80041b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	08009778 	.word	0x08009778

080041b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041b8:	f7ff ffda 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	0adb      	lsrs	r3, r3, #11
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	4904      	ldr	r1, [pc, #16]	@ (80041dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000
 80041dc:	08009778 	.word	0x08009778

080041e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041f8:	f7ff f81c 	bl	8003234 <HAL_PWREx_GetVoltageRange>
 80041fc:	6178      	str	r0, [r7, #20]
 80041fe:	e014      	b.n	800422a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	4b25      	ldr	r3, [pc, #148]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	@ 0x58
 800420c:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004218:	f7ff f80c 	bl	8003234 <HAL_PWREx_GetVoltageRange>
 800421c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	4a1d      	ldr	r2, [pc, #116]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004228:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004230:	d10b      	bne.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b80      	cmp	r3, #128	@ 0x80
 8004236:	d919      	bls.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2ba0      	cmp	r3, #160	@ 0xa0
 800423c:	d902      	bls.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800423e:	2302      	movs	r3, #2
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e013      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004244:	2301      	movs	r3, #1
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e010      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b80      	cmp	r3, #128	@ 0x80
 800424e:	d902      	bls.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004250:	2303      	movs	r3, #3
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e00a      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b80      	cmp	r3, #128	@ 0x80
 800425a:	d102      	bne.n	8004262 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800425c:	2302      	movs	r3, #2
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e004      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b70      	cmp	r3, #112	@ 0x70
 8004266:	d101      	bne.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004268:	2301      	movs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 0207 	bic.w	r2, r3, #7
 8004274:	4909      	ldr	r1, [pc, #36]	@ (800429c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	d001      	beq.n	800428e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	40022000 	.word	0x40022000

080042a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042a8:	2300      	movs	r3, #0
 80042aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ac:	2300      	movs	r3, #0
 80042ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c4:	d303      	bcc.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2e>
 80042c6:	21c9      	movs	r1, #201	@ 0xc9
 80042c8:	4889      	ldr	r0, [pc, #548]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80042ca:	f7fd fab3 	bl	8001834 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d058      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042fe:	d003      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004300:	21d1      	movs	r1, #209	@ 0xd1
 8004302:	487b      	ldr	r0, [pc, #492]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004304:	f7fd fa96 	bl	8001834 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800430c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004310:	d02a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004312:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004316:	d824      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800431e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004322:	d81e      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432c:	d010      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800432e:	e018      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004330:	4b70      	ldr	r3, [pc, #448]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a6f      	ldr	r2, [pc, #444]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800433c:	e015      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fc69 	bl	8004c1c <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3320      	adds	r3, #32
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fde0 	bl	8004f1c <RCCEx_PLLSAI2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	74fb      	strb	r3, [r7, #19]
      break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8004368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004370:	4b60      	ldr	r3, [pc, #384]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437e:	495d      	ldr	r1, [pc, #372]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d059      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043a8:	d00e      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043b2:	d009      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043bc:	d004      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80043be:	f240 110f 	movw	r1, #271	@ 0x10f
 80043c2:	484b      	ldr	r0, [pc, #300]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80043c4:	f7fd fa36 	bl	8001834 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043d0:	d02a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80043d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043d6:	d824      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80043d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043dc:	d008      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80043de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043e2:	d81e      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80043e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ec:	d010      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80043ee:	e018      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f0:	4b40      	ldr	r3, [pc, #256]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a3f      	ldr	r2, [pc, #252]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fc:	e015      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fc09 	bl	8004c1c <RCCEx_PLLSAI1_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440e:	e00c      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3320      	adds	r3, #32
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fd80 	bl	8004f1c <RCCEx_PLLSAI2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	74fb      	strb	r3, [r7, #19]
      break;
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004430:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004436:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443e:	492d      	ldr	r1, [pc, #180]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004446:	e001      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80c2 	beq.w	80045de <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445a:	2300      	movs	r3, #0
 800445c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	d010      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800448a:	d004      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800448c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004490:	4817      	ldr	r0, [pc, #92]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004492:	f7fd f9cf 	bl	8001834 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004496:	4b17      	ldr	r3, [pc, #92]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ac:	4b11      	ldr	r3, [pc, #68]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	4a10      	ldr	r2, [pc, #64]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b8:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c4:	2301      	movs	r3, #1
 80044c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d4:	f7fd ff64 	bl	80023a0 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044da:	e00f      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fd ff60 	bl	80023a0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d908      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	74fb      	strb	r3, [r7, #19]
        break;
 80044ee:	e00b      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80044f0:	08009644 	.word	0x08009644
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044fc:	4b30      	ldr	r3, [pc, #192]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0e9      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d15c      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800450e:	4b2d      	ldr	r3, [pc, #180]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01f      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d019      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800452c:	4b25      	ldr	r3, [pc, #148]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004548:	4b1e      	ldr	r3, [pc, #120]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	4a1d      	ldr	r2, [pc, #116]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004558:	4a1a      	ldr	r2, [pc, #104]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd ff19 	bl	80023a0 <HAL_GetTick>
 800456e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004570:	e00b      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd ff15 	bl	80023a0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d902      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	74fb      	strb	r3, [r7, #19]
            break;
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ec      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459e:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ae:	4905      	ldr	r1, [pc, #20]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045b6:	e009      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	74bb      	strb	r3, [r7, #18]
 80045bc:	e006      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80045be:	bf00      	nop
 80045c0:	40007000 	.word	0x40007000
 80045c4:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	7cfb      	ldrb	r3, [r7, #19]
 80045ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045cc:	7c7b      	ldrb	r3, [r7, #17]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	4a8c      	ldr	r2, [pc, #560]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80045d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01f      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d00c      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d008      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	2b02      	cmp	r3, #2
 8004608:	d004      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800460a:	f240 1199 	movw	r1, #409	@ 0x199
 800460e:	487f      	ldr	r0, [pc, #508]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004610:	f7fd f910 	bl	8001834 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004614:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	4979      	ldr	r1, [pc, #484]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01f      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00c      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d008      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	2b08      	cmp	r3, #8
 8004654:	d004      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004656:	f240 11a3 	movw	r1, #419	@ 0x1a3
 800465a:	486c      	ldr	r0, [pc, #432]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800465c:	f7fd f8ea 	bl	8001834 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004660:	4b69      	ldr	r3, [pc, #420]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004666:	f023 020c 	bic.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466e:	4966      	ldr	r1, [pc, #408]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01f      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d010      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b10      	cmp	r3, #16
 8004690:	d00c      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	2b30      	cmp	r3, #48	@ 0x30
 8004698:	d008      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d004      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80046a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80046a6:	4859      	ldr	r0, [pc, #356]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80046a8:	f7fd f8c4 	bl	8001834 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ac:	4b56      	ldr	r3, [pc, #344]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	4953      	ldr	r1, [pc, #332]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01f      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d010      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d00c      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046e4:	d008      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	2b80      	cmp	r3, #128	@ 0x80
 80046ec:	d004      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80046ee:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80046f2:	4846      	ldr	r0, [pc, #280]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80046f4:	f7fd f89e 	bl	8001834 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046f8:	4b43      	ldr	r3, [pc, #268]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	4940      	ldr	r1, [pc, #256]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b00      	cmp	r3, #0
 8004718:	d022      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472a:	d00e      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004734:	d009      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800473e:	d004      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004740:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004744:	4831      	ldr	r0, [pc, #196]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004746:	f7fd f875 	bl	8001834 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474a:	4b2f      	ldr	r3, [pc, #188]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	492b      	ldr	r1, [pc, #172]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d022      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d013      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477c:	d00e      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004786:	d009      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004790:	d004      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004792:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8004796:	481d      	ldr	r0, [pc, #116]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004798:	f7fd f84c 	bl	8001834 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800479c:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	4917      	ldr	r1, [pc, #92]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d028      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d013      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047ce:	d00e      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047d8:	d009      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e2:	d004      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80047e4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80047e8:	4808      	ldr	r0, [pc, #32]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80047ea:	f7fd f823 	bl	8001834 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	4902      	ldr	r1, [pc, #8]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	08009644 	.word	0x08009644
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d022      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004820:	2b00      	cmp	r3, #0
 8004822:	d013      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004828:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800482c:	d00e      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004836:	d009      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004840:	d004      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004842:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8004846:	489e      	ldr	r0, [pc, #632]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004848:	f7fc fff4 	bl	8001834 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800484c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485a:	499a      	ldr	r1, [pc, #616]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00e      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487e:	d009      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004888:	d004      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800488a:	f240 11ef 	movw	r1, #495	@ 0x1ef
 800488e:	488c      	ldr	r0, [pc, #560]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004890:	f7fc ffd0 	bl	8001834 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004894:	4b8b      	ldr	r3, [pc, #556]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a2:	4988      	ldr	r1, [pc, #544]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01d      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00e      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048c6:	d009      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d0:	d004      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80048d2:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80048d6:	487a      	ldr	r0, [pc, #488]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80048d8:	f7fc ffac 	bl	8001834 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ea:	4976      	ldr	r1, [pc, #472]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01d      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490e:	d009      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004918:	d004      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800491a:	f240 2107 	movw	r1, #519	@ 0x207
 800491e:	4868      	ldr	r0, [pc, #416]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004920:	f7fc ff88 	bl	8001834 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004924:	4b67      	ldr	r3, [pc, #412]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	4964      	ldr	r1, [pc, #400]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d040      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004952:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004956:	d00e      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800495c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004960:	d009      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004966:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800496a:	d004      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800496c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8004970:	4853      	ldr	r0, [pc, #332]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004972:	f7fc ff5f 	bl	8001834 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004976:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004984:	494f      	ldr	r1, [pc, #316]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004994:	d106      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004996:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800499c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a0:	60d3      	str	r3, [r2, #12]
 80049a2:	e011      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f931 	bl	8004c1c <RCCEx_PLLSAI1_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d040      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e4:	d00e      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ee:	d009      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049f8:	d004      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80049fa:	f240 2141 	movw	r1, #577	@ 0x241
 80049fe:	4830      	ldr	r0, [pc, #192]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004a00:	f7fc ff18 	bl	8001834 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a04:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	492c      	ldr	r1, [pc, #176]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a26      	ldr	r2, [pc, #152]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	e011      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f8ea 	bl	8004c1c <RCCEx_PLLSAI1_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d044      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d013      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a72:	d00e      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a86:	d004      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004a88:	f240 2166 	movw	r1, #614	@ 0x266
 8004a8c:	480c      	ldr	r0, [pc, #48]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004a8e:	f7fc fed1 	bl	8001834 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa0:	4908      	ldr	r1, [pc, #32]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ab0:	d10a      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab2:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4a03      	ldr	r2, [pc, #12]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004ab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004abc:	60d3      	str	r3, [r2, #12]
 8004abe:	e015      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004ac0:	08009644 	.word	0x08009644
 8004ac4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f89f 	bl	8004c1c <RCCEx_PLLSAI1_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d047      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b08:	d00e      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b12:	d009      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004b1e:	f240 2186 	movw	r1, #646	@ 0x286
 8004b22:	483c      	ldr	r0, [pc, #240]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004b24:	f7fc fe86 	bl	8001834 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b28:	4b3b      	ldr	r3, [pc, #236]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b36:	4938      	ldr	r1, [pc, #224]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b46:	d10d      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f864 	bl	8004c1c <RCCEx_PLLSAI1_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	74bb      	strb	r3, [r7, #18]
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3320      	adds	r3, #32
 8004b72:	2102      	movs	r1, #2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 f9d1 	bl	8004f1c <RCCEx_PLLSAI2_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d018      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba4:	d004      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8004ba6:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004baa:	481a      	ldr	r0, [pc, #104]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004bac:	f7fc fe42 	bl	8001834 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbe:	4916      	ldr	r1, [pc, #88]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004be6:	d004      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004be8:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8004bec:	4809      	ldr	r0, [pc, #36]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004bee:	f7fc fe21 	bl	8001834 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf2:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c02:	4905      	ldr	r1, [pc, #20]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	08009644 	.word	0x08009644
 8004c18:	40021000 	.word	0x40021000

08004c1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x38>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d00c      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x38>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d008      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x38>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d004      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x38>
 8004c4a:	f640 3162 	movw	r1, #2914	@ 0xb62
 8004c4e:	4887      	ldr	r0, [pc, #540]	@ (8004e6c <RCCEx_PLLSAI1_Config+0x250>)
 8004c50:	f7fc fdf0 	bl	8001834 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <RCCEx_PLLSAI1_Config+0x48>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d904      	bls.n	8004c6e <RCCEx_PLLSAI1_Config+0x52>
 8004c64:	f640 3163 	movw	r1, #2915	@ 0xb63
 8004c68:	4880      	ldr	r0, [pc, #512]	@ (8004e6c <RCCEx_PLLSAI1_Config+0x250>)
 8004c6a:	f7fc fde3 	bl	8001834 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b07      	cmp	r3, #7
 8004c74:	d903      	bls.n	8004c7e <RCCEx_PLLSAI1_Config+0x62>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b56      	cmp	r3, #86	@ 0x56
 8004c7c:	d904      	bls.n	8004c88 <RCCEx_PLLSAI1_Config+0x6c>
 8004c7e:	f640 3164 	movw	r1, #2916	@ 0xb64
 8004c82:	487a      	ldr	r0, [pc, #488]	@ (8004e6c <RCCEx_PLLSAI1_Config+0x250>)
 8004c84:	f7fc fdd6 	bl	8001834 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x90>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x90>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <RCCEx_PLLSAI1_Config+0xa0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <RCCEx_PLLSAI1_Config+0xaa>
 8004cbc:	f640 3165 	movw	r1, #2917	@ 0xb65
 8004cc0:	486a      	ldr	r0, [pc, #424]	@ (8004e6c <RCCEx_PLLSAI1_Config+0x250>)
 8004cc2:	f7fc fdb7 	bl	8001834 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cd2:	4b67      	ldr	r3, [pc, #412]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10d      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cea:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d047      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e044      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d018      	beq.n	8004d3e <RCCEx_PLLSAI1_Config+0x122>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d825      	bhi.n	8004d5c <RCCEx_PLLSAI1_Config+0x140>
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d002      	beq.n	8004d1a <RCCEx_PLLSAI1_Config+0xfe>
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d009      	beq.n	8004d2c <RCCEx_PLLSAI1_Config+0x110>
 8004d18:	e020      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d1a:	4b55      	ldr	r3, [pc, #340]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11d      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e01a      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d2c:	4b50      	ldr	r3, [pc, #320]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e013      	b.n	8004d66 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d4a:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d5a:	e006      	b.n	8004d6a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e004      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d72:	4b3f      	ldr	r3, [pc, #252]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	430b      	orrs	r3, r1
 8004d88:	4939      	ldr	r1, [pc, #228]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 80ba 	bne.w	8004f0a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d96:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a35      	ldr	r2, [pc, #212]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da2:	f7fd fafd 	bl	80023a0 <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da8:	e009      	b.n	8004dbe <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004daa:	f7fd faf9 	bl	80023a0 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d902      	bls.n	8004dbe <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	73fb      	strb	r3, [r7, #15]
        break;
 8004dbc:	e005      	b.n	8004dca <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ef      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 809c 	bne.w	8004f0a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d11e      	bne.n	8004e16 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	d008      	beq.n	8004df2 <RCCEx_PLLSAI1_Config+0x1d6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b11      	cmp	r3, #17
 8004de6:	d004      	beq.n	8004df2 <RCCEx_PLLSAI1_Config+0x1d6>
 8004de8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004dec:	481f      	ldr	r0, [pc, #124]	@ (8004e6c <RCCEx_PLLSAI1_Config+0x250>)
 8004dee:	f7fc fd21 	bl	8001834 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6892      	ldr	r2, [r2, #8]
 8004e02:	0211      	lsls	r1, r2, #8
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68d2      	ldr	r2, [r2, #12]
 8004e08:	0912      	lsrs	r2, r2, #4
 8004e0a:	0452      	lsls	r2, r2, #17
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	4918      	ldr	r1, [pc, #96]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	610b      	str	r3, [r1, #16]
 8004e14:	e055      	b.n	8004ec2 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d12b      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d010      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x22a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d00c      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x22a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d008      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x22a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d004      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x22a>
 8004e3c:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8004e40:	480a      	ldr	r0, [pc, #40]	@ (8004e6c <RCCEx_PLLSAI1_Config+0x250>)
 8004e42:	f7fc fcf7 	bl	8001834 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	0211      	lsls	r1, r2, #8
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6912      	ldr	r2, [r2, #16]
 8004e5c:	0852      	lsrs	r2, r2, #1
 8004e5e:	3a01      	subs	r2, #1
 8004e60:	0552      	lsls	r2, r2, #21
 8004e62:	430a      	orrs	r2, r1
 8004e64:	4902      	ldr	r1, [pc, #8]	@ (8004e70 <RCCEx_PLLSAI1_Config+0x254>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
 8004e6a:	e02a      	b.n	8004ec2 <RCCEx_PLLSAI1_Config+0x2a6>
 8004e6c:	08009644 	.word	0x08009644
 8004e70:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d010      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0x282>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d00c      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0x282>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d008      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0x282>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d004      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0x282>
 8004e94:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8004e98:	481e      	ldr	r0, [pc, #120]	@ (8004f14 <RCCEx_PLLSAI1_Config+0x2f8>)
 8004e9a:	f7fc fccb 	bl	8001834 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ea6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	0211      	lsls	r1, r2, #8
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6952      	ldr	r2, [r2, #20]
 8004eb4:	0852      	lsrs	r2, r2, #1
 8004eb6:	3a01      	subs	r2, #1
 8004eb8:	0652      	lsls	r2, r2, #25
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	4916      	ldr	r1, [pc, #88]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ec2:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004ec8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fd fa67 	bl	80023a0 <HAL_GetTick>
 8004ed2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ed4:	e009      	b.n	8004eea <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ed6:	f7fd fa63 	bl	80023a0 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee8:	e005      	b.n	8004ef6 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ef      	beq.n	8004ed6 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	4904      	ldr	r1, [pc, #16]	@ (8004f18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	08009644 	.word	0x08009644
 8004f18:	40021000 	.word	0x40021000

08004f1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d010      	beq.n	8004f54 <RCCEx_PLLSAI2_Config+0x38>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d00c      	beq.n	8004f54 <RCCEx_PLLSAI2_Config+0x38>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d008      	beq.n	8004f54 <RCCEx_PLLSAI2_Config+0x38>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d004      	beq.n	8004f54 <RCCEx_PLLSAI2_Config+0x38>
 8004f4a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8004f4e:	4896      	ldr	r0, [pc, #600]	@ (80051a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004f50:	f7fc fc70 	bl	8001834 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <RCCEx_PLLSAI2_Config+0x48>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d904      	bls.n	8004f6e <RCCEx_PLLSAI2_Config+0x52>
 8004f64:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8004f68:	488f      	ldr	r0, [pc, #572]	@ (80051a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004f6a:	f7fc fc63 	bl	8001834 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	d903      	bls.n	8004f7e <RCCEx_PLLSAI2_Config+0x62>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b56      	cmp	r3, #86	@ 0x56
 8004f7c:	d904      	bls.n	8004f88 <RCCEx_PLLSAI2_Config+0x6c>
 8004f7e:	f640 4131 	movw	r1, #3121	@ 0xc31
 8004f82:	4889      	ldr	r0, [pc, #548]	@ (80051a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004f84:	f7fc fc56 	bl	8001834 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <RCCEx_PLLSAI2_Config+0x84>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <RCCEx_PLLSAI2_Config+0x94>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <RCCEx_PLLSAI2_Config+0x9e>
 8004fb0:	f640 4132 	movw	r1, #3122	@ 0xc32
 8004fb4:	487c      	ldr	r0, [pc, #496]	@ (80051a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004fb6:	f7fc fc3d 	bl	8001834 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fba:	4b7c      	ldr	r3, [pc, #496]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d018      	beq.n	8004ff8 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fc6:	4b79      	ldr	r3, [pc, #484]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0203 	and.w	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d10d      	bne.n	8004ff2 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fde:	4b73      	ldr	r3, [pc, #460]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
       ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d047      	beq.n	8005082 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	e044      	b.n	8005082 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d018      	beq.n	8005032 <RCCEx_PLLSAI2_Config+0x116>
 8005000:	2b03      	cmp	r3, #3
 8005002:	d825      	bhi.n	8005050 <RCCEx_PLLSAI2_Config+0x134>
 8005004:	2b01      	cmp	r3, #1
 8005006:	d002      	beq.n	800500e <RCCEx_PLLSAI2_Config+0xf2>
 8005008:	2b02      	cmp	r3, #2
 800500a:	d009      	beq.n	8005020 <RCCEx_PLLSAI2_Config+0x104>
 800500c:	e020      	b.n	8005050 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800500e:	4b67      	ldr	r3, [pc, #412]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11d      	bne.n	8005056 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501e:	e01a      	b.n	8005056 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005020:	4b62      	ldr	r3, [pc, #392]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005028:	2b00      	cmp	r3, #0
 800502a:	d116      	bne.n	800505a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005030:	e013      	b.n	800505a <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005032:	4b5e      	ldr	r3, [pc, #376]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800503e:	4b5b      	ldr	r3, [pc, #364]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800504e:	e006      	b.n	800505e <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
      break;
 8005054:	e004      	b.n	8005060 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800505e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005066:	4b51      	ldr	r3, [pc, #324]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	3b01      	subs	r3, #1
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	430b      	orrs	r3, r1
 800507c:	494b      	ldr	r1, [pc, #300]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 800507e:	4313      	orrs	r3, r2
 8005080:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 808a 	bne.w	800519e <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800508a:	4b48      	ldr	r3, [pc, #288]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a47      	ldr	r2, [pc, #284]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fd f983 	bl	80023a0 <HAL_GetTick>
 800509a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800509c:	e009      	b.n	80050b2 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800509e:	f7fd f97f 	bl	80023a0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d902      	bls.n	80050b2 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	73fb      	strb	r3, [r7, #15]
        break;
 80050b0:	e005      	b.n	80050be <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050b2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ef      	bne.n	800509e <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d16c      	bne.n	800519e <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11e      	bne.n	8005108 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d008      	beq.n	80050e4 <RCCEx_PLLSAI2_Config+0x1c8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b11      	cmp	r3, #17
 80050d8:	d004      	beq.n	80050e4 <RCCEx_PLLSAI2_Config+0x1c8>
 80050da:	f640 4185 	movw	r1, #3205	@ 0xc85
 80050de:	4832      	ldr	r0, [pc, #200]	@ (80051a8 <RCCEx_PLLSAI2_Config+0x28c>)
 80050e0:	f7fc fba8 	bl	8001834 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e4:	4b31      	ldr	r3, [pc, #196]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	0211      	lsls	r1, r2, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	0912      	lsrs	r2, r2, #4
 80050fc:	0452      	lsls	r2, r2, #17
 80050fe:	430a      	orrs	r2, r1
 8005100:	492a      	ldr	r1, [pc, #168]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005102:	4313      	orrs	r3, r2
 8005104:	614b      	str	r3, [r1, #20]
 8005106:	e026      	b.n	8005156 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d010      	beq.n	8005132 <RCCEx_PLLSAI2_Config+0x216>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d00c      	beq.n	8005132 <RCCEx_PLLSAI2_Config+0x216>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d008      	beq.n	8005132 <RCCEx_PLLSAI2_Config+0x216>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d004      	beq.n	8005132 <RCCEx_PLLSAI2_Config+0x216>
 8005128:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800512c:	481e      	ldr	r0, [pc, #120]	@ (80051a8 <RCCEx_PLLSAI2_Config+0x28c>)
 800512e:	f7fc fb81 	bl	8001834 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005132:	4b1e      	ldr	r3, [pc, #120]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800513a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	0211      	lsls	r1, r2, #8
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6912      	ldr	r2, [r2, #16]
 8005148:	0852      	lsrs	r2, r2, #1
 800514a:	3a01      	subs	r2, #1
 800514c:	0652      	lsls	r2, r2, #25
 800514e:	430a      	orrs	r2, r1
 8005150:	4916      	ldr	r1, [pc, #88]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005152:	4313      	orrs	r3, r2
 8005154:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a14      	ldr	r2, [pc, #80]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fd f91d 	bl	80023a0 <HAL_GetTick>
 8005166:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005168:	e009      	b.n	800517e <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800516a:	f7fd f919 	bl	80023a0 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d902      	bls.n	800517e <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	73fb      	strb	r3, [r7, #15]
          break;
 800517c:	e005      	b.n	800518a <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005190:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	4904      	ldr	r1, [pc, #16]	@ (80051ac <RCCEx_PLLSAI2_Config+0x290>)
 800519a:	4313      	orrs	r3, r2
 800519c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	08009644 	.word	0x08009644
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e1dd      	b.n	800557e <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a7b      	ldr	r2, [pc, #492]	@ (80053b4 <HAL_SPI_Init+0x204>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_SPI_Init+0x3a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a79      	ldr	r2, [pc, #484]	@ (80053b8 <HAL_SPI_Init+0x208>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_SPI_Init+0x3a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a78      	ldr	r2, [pc, #480]	@ (80053bc <HAL_SPI_Init+0x20c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_SPI_Init+0x3a>
 80051e0:	f240 1147 	movw	r1, #327	@ 0x147
 80051e4:	4876      	ldr	r0, [pc, #472]	@ (80053c0 <HAL_SPI_Init+0x210>)
 80051e6:	f7fc fb25 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_SPI_Init+0x56>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051fa:	d004      	beq.n	8005206 <HAL_SPI_Init+0x56>
 80051fc:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8005200:	486f      	ldr	r0, [pc, #444]	@ (80053c0 <HAL_SPI_Init+0x210>)
 8005202:	f7fc fb17 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00e      	beq.n	800522c <HAL_SPI_Init+0x7c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005216:	d009      	beq.n	800522c <HAL_SPI_Init+0x7c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005220:	d004      	beq.n	800522c <HAL_SPI_Init+0x7c>
 8005222:	f240 1149 	movw	r1, #329	@ 0x149
 8005226:	4866      	ldr	r0, [pc, #408]	@ (80053c0 <HAL_SPI_Init+0x210>)
 8005228:	f7fc fb04 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005234:	d040      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800523e:	d03b      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8005248:	d036      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005252:	d031      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800525c:	d02c      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005266:	d027      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8005270:	d022      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527a:	d01d      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005284:	d018      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800528e:	d013      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005298:	d00e      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a2:	d009      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ac:	d004      	beq.n	80052b8 <HAL_SPI_Init+0x108>
 80052ae:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80052b2:	4843      	ldr	r0, [pc, #268]	@ (80053c0 <HAL_SPI_Init+0x210>)
 80052b4:	f7fc fabe 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c0:	d00d      	beq.n	80052de <HAL_SPI_Init+0x12e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <HAL_SPI_Init+0x12e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052d2:	d004      	beq.n	80052de <HAL_SPI_Init+0x12e>
 80052d4:	f240 114b 	movw	r1, #331	@ 0x14b
 80052d8:	4839      	ldr	r0, [pc, #228]	@ (80053c0 <HAL_SPI_Init+0x210>)
 80052da:	f7fc faab 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d008      	beq.n	80052f8 <HAL_SPI_Init+0x148>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_SPI_Init+0x148>
 80052ee:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80052f2:	4833      	ldr	r0, [pc, #204]	@ (80053c0 <HAL_SPI_Init+0x210>)
 80052f4:	f7fc fa9e 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d01c      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2b10      	cmp	r3, #16
 800530e:	d018      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b18      	cmp	r3, #24
 8005316:	d014      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	2b20      	cmp	r3, #32
 800531e:	d010      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	2b28      	cmp	r3, #40	@ 0x28
 8005326:	d00c      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d008      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b38      	cmp	r3, #56	@ 0x38
 8005336:	d004      	beq.n	8005342 <HAL_SPI_Init+0x192>
 8005338:	f240 114d 	movw	r1, #333	@ 0x14d
 800533c:	4820      	ldr	r0, [pc, #128]	@ (80053c0 <HAL_SPI_Init+0x210>)
 800533e:	f7fc fa79 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_SPI_Init+0x1ac>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	2b80      	cmp	r3, #128	@ 0x80
 8005350:	d004      	beq.n	800535c <HAL_SPI_Init+0x1ac>
 8005352:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8005356:	481a      	ldr	r0, [pc, #104]	@ (80053c0 <HAL_SPI_Init+0x210>)
 8005358:	f7fc fa6c 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_SPI_Init+0x1c6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	2b10      	cmp	r3, #16
 800536a:	d004      	beq.n	8005376 <HAL_SPI_Init+0x1c6>
 800536c:	f240 114f 	movw	r1, #335	@ 0x14f
 8005370:	4813      	ldr	r0, [pc, #76]	@ (80053c0 <HAL_SPI_Init+0x210>)
 8005372:	f7fc fa5f 	bl	8001834 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d151      	bne.n	8005422 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_SPI_Init+0x1e8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d004      	beq.n	8005398 <HAL_SPI_Init+0x1e8>
 800538e:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8005392:	480b      	ldr	r0, [pc, #44]	@ (80053c0 <HAL_SPI_Init+0x210>)
 8005394:	f7fc fa4e 	bl	8001834 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d011      	beq.n	80053c4 <HAL_SPI_Init+0x214>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d00d      	beq.n	80053c4 <HAL_SPI_Init+0x214>
 80053a8:	f240 1153 	movw	r1, #339	@ 0x153
 80053ac:	4804      	ldr	r0, [pc, #16]	@ (80053c0 <HAL_SPI_Init+0x210>)
 80053ae:	f7fc fa41 	bl	8001834 <assert_failed>
 80053b2:	e007      	b.n	80053c4 <HAL_SPI_Init+0x214>
 80053b4:	40013000 	.word	0x40013000
 80053b8:	40003800 	.word	0x40003800
 80053bc:	40003c00 	.word	0x40003c00
 80053c0:	08009680 	.word	0x08009680

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053cc:	d125      	bne.n	800541a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d050      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d04c      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d048      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	2b18      	cmp	r3, #24
 80053ec:	d044      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d040      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	2b28      	cmp	r3, #40	@ 0x28
 80053fc:	d03c      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	2b30      	cmp	r3, #48	@ 0x30
 8005404:	d038      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	2b38      	cmp	r3, #56	@ 0x38
 800540c:	d034      	beq.n	8005478 <HAL_SPI_Init+0x2c8>
 800540e:	f240 1157 	movw	r1, #343	@ 0x157
 8005412:	485d      	ldr	r0, [pc, #372]	@ (8005588 <HAL_SPI_Init+0x3d8>)
 8005414:	f7fc fa0e 	bl	8001834 <assert_failed>
 8005418:	e02e      	b.n	8005478 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	61da      	str	r2, [r3, #28]
 8005420:	e02a      	b.n	8005478 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b08      	cmp	r3, #8
 8005430:	d01c      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b10      	cmp	r3, #16
 8005438:	d018      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	2b18      	cmp	r3, #24
 8005440:	d014      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d010      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	2b28      	cmp	r3, #40	@ 0x28
 8005450:	d00c      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	2b30      	cmp	r3, #48	@ 0x30
 8005458:	d008      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b38      	cmp	r3, #56	@ 0x38
 8005460:	d004      	beq.n	800546c <HAL_SPI_Init+0x2bc>
 8005462:	f240 1161 	movw	r1, #353	@ 0x161
 8005466:	4848      	ldr	r0, [pc, #288]	@ (8005588 <HAL_SPI_Init+0x3d8>)
 8005468:	f7fc f9e4 	bl	8001834 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fc fa12 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054b8:	d902      	bls.n	80054c0 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e002      	b.n	80054c6 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054ce:	d007      	beq.n	80054e0 <HAL_SPI_Init+0x330>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054d8:	d002      	beq.n	80054e0 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005522:	ea42 0103 	orr.w	r1, r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	f003 0204 	and.w	r2, r3, #4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800555c:	ea42 0103 	orr.w	r1, r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	08009680 	.word	0x08009680

0800558c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_SPI_Transmit_IT+0x2a>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055aa:	d004      	beq.n	80055b6 <HAL_SPI_Transmit_IT+0x2a>
 80055ac:	f240 6144 	movw	r1, #1604	@ 0x644
 80055b0:	483e      	ldr	r0, [pc, #248]	@ (80056ac <HAL_SPI_Transmit_IT+0x120>)
 80055b2:	f7fc f93f 	bl	8001834 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_SPI_Transmit_IT+0x36>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e06d      	b.n	80056a2 <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
 80055d4:	e065      	b.n	80056a2 <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_SPI_Transmit_IT+0x58>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e05e      	b.n	80056a2 <HAL_SPI_Transmit_IT+0x116>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2203      	movs	r2, #3
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005630:	d903      	bls.n	800563a <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <HAL_SPI_Transmit_IT+0x124>)
 8005636:	651a      	str	r2, [r3, #80]	@ 0x50
 8005638:	e002      	b.n	8005640 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4a1d      	ldr	r2, [pc, #116]	@ (80056b4 <HAL_SPI_Transmit_IT+0x128>)
 800563e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005648:	d10f      	bne.n	800566a <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b40      	cmp	r3, #64	@ 0x40
 8005676:	d007      	beq.n	8005688 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005686:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800569e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	08009680 	.word	0x08009680
 80056b0:	080060c5 	.word	0x080060c5
 80056b4:	0800607f 	.word	0x0800607f

080056b8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <HAL_SPI_Receive_DMA+0x20>
 80056ce:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 80056d2:	488f      	ldr	r0, [pc, #572]	@ (8005910 <HAL_SPI_Receive_DMA+0x258>)
 80056d4:	f7fc f8ae 	bl	8001834 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d001      	beq.n	80056e8 <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
 80056e6:	e10e      	b.n	8005906 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d119      	bne.n	8005724 <HAL_SPI_Receive_DMA+0x6c>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f8:	d114      	bne.n	8005724 <HAL_SPI_Receive_DMA+0x6c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2204      	movs	r2, #4
 80056fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <HAL_SPI_Receive_DMA+0x5c>
 800570a:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 800570e:	4880      	ldr	r0, [pc, #512]	@ (8005910 <HAL_SPI_Receive_DMA+0x258>)
 8005710:	f7fc f890 	bl	8001834 <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f900 	bl	8005920 <HAL_SPI_TransmitReceive_DMA>
 8005720:	4603      	mov	r3, r0
 8005722:	e0f0      	b.n	8005906 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_SPI_Receive_DMA+0x78>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_SPI_Receive_DMA+0x7c>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0e8      	b.n	8005906 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_SPI_Receive_DMA+0x8a>
 800573e:	2302      	movs	r3, #2
 8005740:	e0e1      	b.n	8005906 <HAL_SPI_Receive_DMA+0x24e>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2204      	movs	r2, #4
 800574e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	88fa      	ldrh	r2, [r7, #6]
 8005762:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800578e:	d10f      	bne.n	80057b0 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800579e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057be:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057c8:	d908      	bls.n	80057dc <HAL_SPI_Receive_DMA+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	e042      	b.n	8005862 <HAL_SPI_Receive_DMA+0x1aa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f6:	d134      	bne.n	8005862 <HAL_SPI_Receive_DMA+0x1aa>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005806:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800580e:	b29b      	uxth	r3, r3
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d111      	bne.n	800583c <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005826:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800582e:	b29b      	uxth	r3, r3
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800583a:	e012      	b.n	8005862 <HAL_SPI_Receive_DMA+0x1aa>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800584a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005852:	b29b      	uxth	r3, r3
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	b29b      	uxth	r3, r3
 8005858:	3301      	adds	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005866:	4a2b      	ldr	r2, [pc, #172]	@ (8005914 <HAL_SPI_Receive_DMA+0x25c>)
 8005868:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586e:	4a2a      	ldr	r2, [pc, #168]	@ (8005918 <HAL_SPI_Receive_DMA+0x260>)
 8005870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005876:	4a29      	ldr	r2, [pc, #164]	@ (800591c <HAL_SPI_Receive_DMA+0x264>)
 8005878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587e:	2200      	movs	r2, #0
 8005880:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	4619      	mov	r1, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800589a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800589c:	f7fd f884 	bl	80029a8 <HAL_DMA_Start_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058aa:	f043 0210 	orr.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e023      	b.n	8005906 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b40      	cmp	r3, #64	@ 0x40
 80058ca:	d007      	beq.n	80058dc <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0220 	orr.w	r2, r2, #32
 80058f2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	08009680 	.word	0x08009680
 8005914:	08005fdd 	.word	0x08005fdd
 8005918:	08005ea5 	.word	0x08005ea5
 800591c:	08006015 	.word	0x08006015

08005920 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005936:	f640 0172 	movw	r1, #2162	@ 0x872
 800593a:	487f      	ldr	r0, [pc, #508]	@ (8005b38 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800593c:	f7fb ff7a 	bl	8001834 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <HAL_SPI_TransmitReceive_DMA+0x32>
 8005948:	f640 0173 	movw	r1, #2163	@ 0x873
 800594c:	487a      	ldr	r0, [pc, #488]	@ (8005b38 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800594e:	f7fb ff71 	bl	8001834 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <HAL_SPI_TransmitReceive_DMA+0x44>
 800595a:	f640 0176 	movw	r1, #2166	@ 0x876
 800595e:	4876      	ldr	r0, [pc, #472]	@ (8005b38 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005960:	f7fb ff68 	bl	8001834 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800596a:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d00c      	beq.n	8005992 <HAL_SPI_TransmitReceive_DMA+0x72>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597e:	d106      	bne.n	800598e <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <HAL_SPI_TransmitReceive_DMA+0x6e>
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d001      	beq.n	8005992 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
 8005990:	e15f      	b.n	8005c52 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_SPI_TransmitReceive_DMA+0x84>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_SPI_TransmitReceive_DMA+0x84>
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e154      	b.n	8005c52 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_SPI_TransmitReceive_DMA+0x96>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e14d      	b.n	8005c52 <HAL_SPI_TransmitReceive_DMA+0x332>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d003      	beq.n	80059d2 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2205      	movs	r2, #5
 80059ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	887a      	ldrh	r2, [r7, #2]
 80059e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	887a      	ldrh	r2, [r7, #2]
 80059f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8005a1a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a24:	d908      	bls.n	8005a38 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	e06f      	b.n	8005b18 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a46:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a52:	d126      	bne.n	8005aa2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a6e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a7e:	e010      	b.n	8005aa2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a8e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aac:	d134      	bne.n	8005b18 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005abc:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d111      	bne.n	8005af2 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005adc:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005af0:	e012      	b.n	8005b18 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b00:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d10f      	bne.n	8005b44 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b28:	4a04      	ldr	r2, [pc, #16]	@ (8005b3c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	4a03      	ldr	r2, [pc, #12]	@ (8005b40 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8005b32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b34:	e00e      	b.n	8005b54 <HAL_SPI_TransmitReceive_DMA+0x234>
 8005b36:	bf00      	nop
 8005b38:	08009680 	.word	0x08009680
 8005b3c:	08005fdd 	.word	0x08005fdd
 8005b40:	08005ea5 	.word	0x08005ea5
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b48:	4a44      	ldr	r2, [pc, #272]	@ (8005c5c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b50:	4a43      	ldr	r2, [pc, #268]	@ (8005c60 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8005b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	4a42      	ldr	r2, [pc, #264]	@ (8005c64 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8005b5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b60:	2200      	movs	r2, #0
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b7e:	f7fc ff13 	bl	80029a8 <HAL_DMA_Start_IT>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e058      	b.n	8005c52 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bcc:	2200      	movs	r2, #0
 8005bce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	4619      	mov	r1, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005be8:	f7fc fede 	bl	80029a8 <HAL_DMA_Start_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf6:	f043 0210 	orr.w	r2, r3, #16
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e023      	b.n	8005c52 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d007      	beq.n	8005c28 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c26:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0220 	orr.w	r2, r2, #32
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0202 	orr.w	r2, r2, #2
 8005c4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08005ff9 	.word	0x08005ff9
 8005c60:	08005f4d 	.word	0x08005f4d
 8005c64:	08006015 	.word	0x08006015

08005c68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	099b      	lsrs	r3, r3, #6
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10f      	bne.n	8005cac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	099b      	lsrs	r3, r3, #6
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
    return;
 8005caa:	e0d7      	b.n	8005e5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_SPI_IRQHandler+0x66>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	09db      	lsrs	r3, r3, #7
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
    return;
 8005ccc:	e0c6      	b.n	8005e5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_SPI_IRQHandler+0x8c>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	099b      	lsrs	r3, r3, #6
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80b4 	beq.w	8005e5c <HAL_SPI_IRQHandler+0x1f4>
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80ad 	beq.w	8005e5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	099b      	lsrs	r3, r3, #6
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d023      	beq.n	8005d56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d011      	beq.n	8005d3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1e:	f043 0204 	orr.w	r2, r3, #4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	e00b      	b.n	8005d56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	693b      	ldr	r3, [r7, #16]
        return;
 8005d54:	e082      	b.n	8005e5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d014      	beq.n	8005d8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9c:	f043 0208 	orr.w	r2, r3, #8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d04f      	beq.n	8005e5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005dc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_SPI_IRQHandler+0x17e>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d034      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0203 	bic.w	r2, r2, #3
 8005df4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d011      	beq.n	8005e22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_SPI_IRQHandler+0x1fc>)
 8005e04:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fc fe3a 	bl	8002a84 <HAL_DMA_Abort_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e64 <HAL_SPI_IRQHandler+0x1fc>)
 8005e30:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fc fe24 	bl	8002a84 <HAL_DMA_Abort_IT>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005e4e:	e003      	b.n	8005e58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f81d 	bl	8005e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e56:	e000      	b.n	8005e5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e58:	bf00      	nop
    return;
 8005e5a:	bf00      	nop
  }
}
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	08006055 	.word	0x08006055

08005e68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb2:	f7fc fa75 	bl	80023a0 <HAL_GetTick>
 8005eb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d03c      	beq.n	8005f40 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0220 	bic.w	r2, r2, #32
 8005ed4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <SPI_DMAReceiveCplt+0x56>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ee6:	d108      	bne.n	8005efa <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0203 	bic.w	r2, r2, #3
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	e007      	b.n	8005f0a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	2164      	movs	r1, #100	@ 0x64
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fa18 	bl	8006344 <SPI_EndRxTransaction>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff ffa9 	bl	8005e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f3e:	e002      	b.n	8005f46 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fb fa9d 	bl	8001480 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5a:	f7fc fa21 	bl	80023a0 <HAL_GetTick>
 8005f5e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d030      	beq.n	8005fd0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0220 	bic.w	r2, r2, #32
 8005f7c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	2164      	movs	r1, #100	@ 0x64
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fa36 	bl	80063f4 <SPI_EndRxTxTransaction>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0203 	bic.w	r2, r2, #3
 8005fa8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ff61 	bl	8005e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fce:	e002      	b.n	8005fd6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ff49 	bl	8005e68 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7fb fa2c 	bl	8001448 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff ff38 	bl	8005e7c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006020:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0203 	bic.w	r2, r2, #3
 8006030:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006036:	f043 0210 	orr.w	r2, r3, #16
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff22 	bl	8005e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff ff0d 	bl	8005e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9e2 	bl	8006480 <SPI_CloseTx_ISR>
  }
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d0:	881a      	ldrh	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	1c9a      	adds	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f9c0 	bl	8006480 <SPI_CloseTx_ISR>
  }
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006118:	f7fc f942 	bl	80023a0 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	4413      	add	r3, r2
 8006126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006128:	f7fc f93a 	bl	80023a0 <HAL_GetTick>
 800612c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800612e:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	015b      	lsls	r3, r3, #5
 8006134:	0d1b      	lsrs	r3, r3, #20
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800613e:	e054      	b.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d050      	beq.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006148:	f7fc f92a 	bl	80023a0 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	429a      	cmp	r2, r3
 8006156:	d902      	bls.n	800615e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d13d      	bne.n	80061da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800616c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006176:	d111      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006180:	d004      	beq.n	800618c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618a:	d107      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800619a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061a4:	d10f      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e017      	b.n	800620a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d19b      	bne.n	8006140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000004 	.word	0x20000004

08006218 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	@ 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800622a:	f7fc f8b9 	bl	80023a0 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	4413      	add	r3, r2
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800623a:	f7fc f8b1 	bl	80023a0 <HAL_GetTick>
 800623e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006248:	4b3d      	ldr	r3, [pc, #244]	@ (8006340 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	00da      	lsls	r2, r3, #3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	0d1b      	lsrs	r3, r3, #20
 8006258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006260:	e060      	b.n	8006324 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006268:	d107      	bne.n	800627a <SPI_WaitFifoStateUntilTimeout+0x62>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006278:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d050      	beq.n	8006324 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006282:	f7fc f88d 	bl	80023a0 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800628e:	429a      	cmp	r2, r3
 8006290:	d902      	bls.n	8006298 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d13d      	bne.n	8006314 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b0:	d111      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ba:	d004      	beq.n	80062c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c4:	d107      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062de:	d10f      	bne.n	8006300 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e010      	b.n	8006336 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	3b01      	subs	r3, #1
 8006322:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d196      	bne.n	8006262 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3728      	adds	r7, #40	@ 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000004 	.word	0x20000004

08006344 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006358:	d111      	bne.n	800637e <SPI_EndRxTransaction+0x3a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006362:	d004      	beq.n	800636e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800636c:	d107      	bne.n	800637e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800637c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	@ 0x80
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff febd 	bl	8006108 <SPI_WaitFlagStateUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006398:	f043 0220 	orr.w	r2, r3, #32
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e023      	b.n	80063ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ac:	d11d      	bne.n	80063ea <SPI_EndRxTransaction+0xa6>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b6:	d004      	beq.n	80063c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c0:	d113      	bne.n	80063ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff ff22 	bl	8006218 <SPI_WaitFifoStateUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e000      	b.n	80063ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff ff03 	bl	8006218 <SPI_WaitFifoStateUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e027      	b.n	8006478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	@ 0x80
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff fe68 	bl	8006108 <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e014      	b.n	8006478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fedc 	bl	8006218 <SPI_WaitFifoStateUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e000      	b.n	8006478 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006488:	f7fb ff8a 	bl	80023a0 <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800649c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	2164      	movs	r1, #100	@ 0x64
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ffa6 	bl	80063f4 <SPI_EndRxTxTransaction>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fcd1 	bl	8005e90 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80064ee:	e002      	b.n	80064f6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fa ffe1 	bl	80014b8 <HAL_SPI_TxCpltCallback>
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0e6      	b.n	80066e0 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a74      	ldr	r2, [pc, #464]	@ (80066e8 <HAL_TIM_Base_Init+0x1e8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d036      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006524:	d031      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a70      	ldr	r2, [pc, #448]	@ (80066ec <HAL_TIM_Base_Init+0x1ec>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d02c      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a6e      	ldr	r2, [pc, #440]	@ (80066f0 <HAL_TIM_Base_Init+0x1f0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d027      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a6d      	ldr	r2, [pc, #436]	@ (80066f4 <HAL_TIM_Base_Init+0x1f4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a6b      	ldr	r2, [pc, #428]	@ (80066f8 <HAL_TIM_Base_Init+0x1f8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a6a      	ldr	r2, [pc, #424]	@ (80066fc <HAL_TIM_Base_Init+0x1fc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a68      	ldr	r2, [pc, #416]	@ (8006700 <HAL_TIM_Base_Init+0x200>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a67      	ldr	r2, [pc, #412]	@ (8006704 <HAL_TIM_Base_Init+0x204>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a65      	ldr	r2, [pc, #404]	@ (8006708 <HAL_TIM_Base_Init+0x208>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a64      	ldr	r2, [pc, #400]	@ (800670c <HAL_TIM_Base_Init+0x20c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_TIM_Base_Init+0x8a>
 8006580:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006584:	4862      	ldr	r0, [pc, #392]	@ (8006710 <HAL_TIM_Base_Init+0x210>)
 8006586:	f7fb f955 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d014      	beq.n	80065bc <HAL_TIM_Base_Init+0xbc>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b10      	cmp	r3, #16
 8006598:	d010      	beq.n	80065bc <HAL_TIM_Base_Init+0xbc>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d00c      	beq.n	80065bc <HAL_TIM_Base_Init+0xbc>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d008      	beq.n	80065bc <HAL_TIM_Base_Init+0xbc>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b60      	cmp	r3, #96	@ 0x60
 80065b0:	d004      	beq.n	80065bc <HAL_TIM_Base_Init+0xbc>
 80065b2:	f240 1117 	movw	r1, #279	@ 0x117
 80065b6:	4856      	ldr	r0, [pc, #344]	@ (8006710 <HAL_TIM_Base_Init+0x210>)
 80065b8:	f7fb f93c 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIM_Base_Init+0xe2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065cc:	d009      	beq.n	80065e2 <HAL_TIM_Base_Init+0xe2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d6:	d004      	beq.n	80065e2 <HAL_TIM_Base_Init+0xe2>
 80065d8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80065dc:	484c      	ldr	r0, [pc, #304]	@ (8006710 <HAL_TIM_Base_Init+0x210>)
 80065de:	f7fb f929 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d004      	beq.n	80065f6 <HAL_TIM_Base_Init+0xf6>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a40      	ldr	r2, [pc, #256]	@ (80066f4 <HAL_TIM_Base_Init+0x1f4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d107      	bne.n	8006606 <HAL_TIM_Base_Init+0x106>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e00e      	b.n	8006624 <HAL_TIM_Base_Init+0x124>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <HAL_TIM_Base_Init+0x11c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006616:	d201      	bcs.n	800661c <HAL_TIM_Base_Init+0x11c>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <HAL_TIM_Base_Init+0x11e>
 800661c:	2300      	movs	r3, #0
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_TIM_Base_Init+0x132>
 8006628:	f240 1119 	movw	r1, #281	@ 0x119
 800662c:	4838      	ldr	r0, [pc, #224]	@ (8006710 <HAL_TIM_Base_Init+0x210>)
 800662e:	f7fb f901 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_TIM_Base_Init+0x14c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b80      	cmp	r3, #128	@ 0x80
 8006640:	d004      	beq.n	800664c <HAL_TIM_Base_Init+0x14c>
 8006642:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006646:	4832      	ldr	r0, [pc, #200]	@ (8006710 <HAL_TIM_Base_Init+0x210>)
 8006648:	f7fb f8f4 	bl	8001834 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fb fd3b 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 fb47 	bl	8006d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40012c00 	.word	0x40012c00
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40001000 	.word	0x40001000
 80066fc:	40001400 	.word	0x40001400
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	080096b8 	.word	0x080096b8

08006714 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e1b0      	b.n	8006a8a <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a7f      	ldr	r2, [pc, #508]	@ (800692c <HAL_TIM_Encoder_Init+0x218>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_TIM_Encoder_Init+0x5a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673a:	d018      	beq.n	800676e <HAL_TIM_Encoder_Init+0x5a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a7b      	ldr	r2, [pc, #492]	@ (8006930 <HAL_TIM_Encoder_Init+0x21c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_TIM_Encoder_Init+0x5a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7a      	ldr	r2, [pc, #488]	@ (8006934 <HAL_TIM_Encoder_Init+0x220>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_TIM_Encoder_Init+0x5a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a78      	ldr	r2, [pc, #480]	@ (8006938 <HAL_TIM_Encoder_Init+0x224>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_TIM_Encoder_Init+0x5a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a77      	ldr	r2, [pc, #476]	@ (800693c <HAL_TIM_Encoder_Init+0x228>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIM_Encoder_Init+0x5a>
 8006764:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8006768:	4875      	ldr	r0, [pc, #468]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 800676a:	f7fb f863 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d014      	beq.n	80067a0 <HAL_TIM_Encoder_Init+0x8c>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b10      	cmp	r3, #16
 800677c:	d010      	beq.n	80067a0 <HAL_TIM_Encoder_Init+0x8c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b20      	cmp	r3, #32
 8006784:	d00c      	beq.n	80067a0 <HAL_TIM_Encoder_Init+0x8c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b40      	cmp	r3, #64	@ 0x40
 800678c:	d008      	beq.n	80067a0 <HAL_TIM_Encoder_Init+0x8c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b60      	cmp	r3, #96	@ 0x60
 8006794:	d004      	beq.n	80067a0 <HAL_TIM_Encoder_Init+0x8c>
 8006796:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800679a:	4869      	ldr	r0, [pc, #420]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 800679c:	f7fb f84a 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00e      	beq.n	80067c6 <HAL_TIM_Encoder_Init+0xb2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b0:	d009      	beq.n	80067c6 <HAL_TIM_Encoder_Init+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ba:	d004      	beq.n	80067c6 <HAL_TIM_Encoder_Init+0xb2>
 80067bc:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80067c0:	485f      	ldr	r0, [pc, #380]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80067c2:	f7fb f837 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_TIM_Encoder_Init+0xcc>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b80      	cmp	r3, #128	@ 0x80
 80067d4:	d004      	beq.n	80067e0 <HAL_TIM_Encoder_Init+0xcc>
 80067d6:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 80067da:	4859      	ldr	r0, [pc, #356]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80067dc:	f7fb f82a 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d00c      	beq.n	8006802 <HAL_TIM_Encoder_Init+0xee>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d008      	beq.n	8006802 <HAL_TIM_Encoder_Init+0xee>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_Encoder_Init+0xee>
 80067f8:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80067fc:	4850      	ldr	r0, [pc, #320]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80067fe:	f7fb f819 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d00c      	beq.n	8006824 <HAL_TIM_Encoder_Init+0x110>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d008      	beq.n	8006824 <HAL_TIM_Encoder_Init+0x110>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b03      	cmp	r3, #3
 8006818:	d004      	beq.n	8006824 <HAL_TIM_Encoder_Init+0x110>
 800681a:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800681e:	4848      	ldr	r0, [pc, #288]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 8006820:	f7fb f808 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d00c      	beq.n	8006846 <HAL_TIM_Encoder_Init+0x132>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d008      	beq.n	8006846 <HAL_TIM_Encoder_Init+0x132>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d004      	beq.n	8006846 <HAL_TIM_Encoder_Init+0x132>
 800683c:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8006840:	483f      	ldr	r0, [pc, #252]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 8006842:	f7fa fff7 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <HAL_TIM_Encoder_Init+0x14c>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b02      	cmp	r3, #2
 8006854:	d004      	beq.n	8006860 <HAL_TIM_Encoder_Init+0x14c>
 8006856:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800685a:	4839      	ldr	r0, [pc, #228]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 800685c:	f7fa ffea 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_TIM_Encoder_Init+0x166>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d004      	beq.n	800687a <HAL_TIM_Encoder_Init+0x166>
 8006870:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8006874:	4832      	ldr	r0, [pc, #200]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 8006876:	f7fa ffdd 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d010      	beq.n	80068a4 <HAL_TIM_Encoder_Init+0x190>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d00c      	beq.n	80068a4 <HAL_TIM_Encoder_Init+0x190>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d008      	beq.n	80068a4 <HAL_TIM_Encoder_Init+0x190>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b0c      	cmp	r3, #12
 8006898:	d004      	beq.n	80068a4 <HAL_TIM_Encoder_Init+0x190>
 800689a:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800689e:	4828      	ldr	r0, [pc, #160]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80068a0:	f7fa ffc8 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d010      	beq.n	80068ce <HAL_TIM_Encoder_Init+0x1ba>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d00c      	beq.n	80068ce <HAL_TIM_Encoder_Init+0x1ba>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d008      	beq.n	80068ce <HAL_TIM_Encoder_Init+0x1ba>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	2b0c      	cmp	r3, #12
 80068c2:	d004      	beq.n	80068ce <HAL_TIM_Encoder_Init+0x1ba>
 80068c4:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80068c8:	481d      	ldr	r0, [pc, #116]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80068ca:	f7fa ffb3 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b0f      	cmp	r3, #15
 80068d4:	d904      	bls.n	80068e0 <HAL_TIM_Encoder_Init+0x1cc>
 80068d6:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80068da:	4819      	ldr	r0, [pc, #100]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80068dc:	f7fa ffaa 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	d904      	bls.n	80068f2 <HAL_TIM_Encoder_Init+0x1de>
 80068e8:	f640 31ef 	movw	r1, #3055	@ 0xbef
 80068ec:	4814      	ldr	r0, [pc, #80]	@ (8006940 <HAL_TIM_Encoder_Init+0x22c>)
 80068ee:	f7fa ffa1 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	d004      	beq.n	8006906 <HAL_TIM_Encoder_Init+0x1f2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0d      	ldr	r2, [pc, #52]	@ (8006938 <HAL_TIM_Encoder_Init+0x224>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d107      	bne.n	8006916 <HAL_TIM_Encoder_Init+0x202>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e01a      	b.n	800694c <HAL_TIM_Encoder_Init+0x238>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d012      	beq.n	8006944 <HAL_TIM_Encoder_Init+0x230>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006926:	d20d      	bcs.n	8006944 <HAL_TIM_Encoder_Init+0x230>
 8006928:	2301      	movs	r3, #1
 800692a:	e00c      	b.n	8006946 <HAL_TIM_Encoder_Init+0x232>
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40013400 	.word	0x40013400
 8006940:	080096b8 	.word	0x080096b8
 8006944:	2300      	movs	r3, #0
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_TIM_Encoder_Init+0x246>
 8006950:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8006954:	484f      	ldr	r0, [pc, #316]	@ (8006a94 <HAL_TIM_Encoder_Init+0x380>)
 8006956:	f7fa ff6d 	bl	8001834 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fb faf4 	bl	8001f5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f000 f9b6 	bl	8006d0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c8:	f023 0303 	bic.w	r3, r3, #3
 80069cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	4313      	orrs	r3, r2
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069e6:	f023 030c 	bic.w	r3, r3, #12
 80069ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	4313      	orrs	r3, r2
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	031b      	lsls	r3, r3, #12
 8006a16:	4313      	orrs	r3, r2
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a24:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a2c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	080096b8 	.word	0x080096b8

08006a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d020      	beq.n	8006afc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01b      	beq.n	8006afc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0202 	mvn.w	r2, #2
 8006acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8f3 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 8006ae8:	e005      	b.n	8006af6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f8e5 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f8f6 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d020      	beq.n	8006b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01b      	beq.n	8006b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0204 	mvn.w	r2, #4
 8006b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f8cd 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f8bf 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f8d0 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d020      	beq.n	8006b94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0208 	mvn.w	r2, #8
 8006b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8a7 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f899 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f8aa 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d020      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0210 	mvn.w	r2, #16
 8006bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f881 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 8006bcc:	e005      	b.n	8006bda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f873 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f884 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0201 	mvn.w	r2, #1
 8006bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f851 	bl	8006ca6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fa73 	bl	8007118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00c      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fa6b 	bl	800712c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00c      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d007      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f83e 	bl	8006cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0220 	mvn.w	r2, #32
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa33 	bl	8007104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a46      	ldr	r2, [pc, #280]	@ (8006e38 <TIM_Base_SetConfig+0x12c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2a:	d00f      	beq.n	8006d4c <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a43      	ldr	r2, [pc, #268]	@ (8006e3c <TIM_Base_SetConfig+0x130>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a42      	ldr	r2, [pc, #264]	@ (8006e40 <TIM_Base_SetConfig+0x134>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a41      	ldr	r2, [pc, #260]	@ (8006e44 <TIM_Base_SetConfig+0x138>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_Base_SetConfig+0x40>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a40      	ldr	r2, [pc, #256]	@ (8006e48 <TIM_Base_SetConfig+0x13c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d108      	bne.n	8006d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a35      	ldr	r2, [pc, #212]	@ (8006e38 <TIM_Base_SetConfig+0x12c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01f      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d6c:	d01b      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a32      	ldr	r2, [pc, #200]	@ (8006e3c <TIM_Base_SetConfig+0x130>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d017      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a31      	ldr	r2, [pc, #196]	@ (8006e40 <TIM_Base_SetConfig+0x134>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a30      	ldr	r2, [pc, #192]	@ (8006e44 <TIM_Base_SetConfig+0x138>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00f      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2f      	ldr	r2, [pc, #188]	@ (8006e48 <TIM_Base_SetConfig+0x13c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00b      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2e      	ldr	r2, [pc, #184]	@ (8006e4c <TIM_Base_SetConfig+0x140>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d007      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2d      	ldr	r2, [pc, #180]	@ (8006e50 <TIM_Base_SetConfig+0x144>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_Base_SetConfig+0x9a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e54 <TIM_Base_SetConfig+0x148>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d108      	bne.n	8006db8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a16      	ldr	r2, [pc, #88]	@ (8006e38 <TIM_Base_SetConfig+0x12c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <TIM_Base_SetConfig+0xf8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <TIM_Base_SetConfig+0x13c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a17      	ldr	r2, [pc, #92]	@ (8006e4c <TIM_Base_SetConfig+0x140>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a16      	ldr	r2, [pc, #88]	@ (8006e50 <TIM_Base_SetConfig+0x144>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_Base_SetConfig+0xf8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	@ (8006e54 <TIM_Base_SetConfig+0x148>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d103      	bne.n	8006e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d105      	bne.n	8006e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f023 0201 	bic.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	611a      	str	r2, [r3, #16]
  }
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40000800 	.word	0x40000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	40013400 	.word	0x40013400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800

08006e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a34      	ldr	r2, [pc, #208]	@ (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d02c      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e74:	d027      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a30      	ldr	r2, [pc, #192]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d022      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2e      	ldr	r2, [pc, #184]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01d      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d018      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a2b      	ldr	r2, [pc, #172]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00e      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a28      	ldr	r2, [pc, #160]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d009      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a27      	ldr	r2, [pc, #156]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ebc:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8006ec0:	4825      	ldr	r0, [pc, #148]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ec2:	f7fa fcb7 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d01c      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d018      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b30      	cmp	r3, #48	@ 0x30
 8006ee4:	d014      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d010      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b50      	cmp	r3, #80	@ 0x50
 8006ef4:	d00c      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b60      	cmp	r3, #96	@ 0x60
 8006efc:	d008      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b70      	cmp	r3, #112	@ 0x70
 8006f04:	d004      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f06:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8006f0a:	4813      	ldr	r0, [pc, #76]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f0c:	f7fa fc92 	bl	8001834 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b80      	cmp	r3, #128	@ 0x80
 8006f16:	d008      	beq.n	8006f2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006f20:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8006f24:	480c      	ldr	r0, [pc, #48]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f26:	f7fa fc85 	bl	8001834 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d113      	bne.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e0d3      	b.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800
 8006f44:	40000c00 	.word	0x40000c00
 8006f48:	40001000 	.word	0x40001000
 8006f4c:	40001400 	.word	0x40001400
 8006f50:	40013400 	.word	0x40013400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	080096f0 	.word	0x080096f0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a59      	ldr	r2, [pc, #356]	@ (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a58      	ldr	r2, [pc, #352]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d161      	bne.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d054      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa0:	d04f      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006faa:	d04a      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fb4:	d045      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fbe:	d040      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006fc8:	d03b      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006fd2:	d036      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006fdc:	d031      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8006fe6:	d02c      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ff0:	d027      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8006ffa:	d022      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007004:	d01d      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800700e:	d018      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007018:	d013      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8007022:	d00e      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800702c:	d009      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8007036:	d004      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8007038:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800703c:	482c      	ldr	r0, [pc, #176]	@ (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800703e:	f7fa fbf9 	bl	8001834 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007048:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01d      	beq.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007080:	d018      	beq.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1b      	ldr	r2, [pc, #108]	@ (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a19      	ldr	r2, [pc, #100]	@ (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a18      	ldr	r2, [pc, #96]	@ (80070fc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a11      	ldr	r2, [pc, #68]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a14      	ldr	r2, [pc, #80]	@ (8007100 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d10c      	bne.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	080096f0 	.word	0x080096f0
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40000c00 	.word	0x40000c00
 8007100:	40014000 	.word	0x40014000

08007104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e08b      	b.n	800726a <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d023      	beq.n	80071a2 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a45      	ldr	r2, [pc, #276]	@ (8007274 <HAL_UART_Init+0x134>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d041      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a43      	ldr	r2, [pc, #268]	@ (8007278 <HAL_UART_Init+0x138>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d03c      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a42      	ldr	r2, [pc, #264]	@ (800727c <HAL_UART_Init+0x13c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d037      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a40      	ldr	r2, [pc, #256]	@ (8007280 <HAL_UART_Init+0x140>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d032      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a3f      	ldr	r2, [pc, #252]	@ (8007284 <HAL_UART_Init+0x144>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d02d      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a3d      	ldr	r2, [pc, #244]	@ (8007288 <HAL_UART_Init+0x148>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d028      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 8007196:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800719a:	483c      	ldr	r0, [pc, #240]	@ (800728c <HAL_UART_Init+0x14c>)
 800719c:	f7fa fb4a 	bl	8001834 <assert_failed>
 80071a0:	e022      	b.n	80071e8 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a33      	ldr	r2, [pc, #204]	@ (8007274 <HAL_UART_Init+0x134>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d01d      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a31      	ldr	r2, [pc, #196]	@ (8007278 <HAL_UART_Init+0x138>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d018      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a30      	ldr	r2, [pc, #192]	@ (800727c <HAL_UART_Init+0x13c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007280 <HAL_UART_Init+0x140>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007284 <HAL_UART_Init+0x144>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d009      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007288 <HAL_UART_Init+0x148>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_UART_Init+0xa8>
 80071de:	f240 1157 	movw	r1, #343	@ 0x157
 80071e2:	482a      	ldr	r0, [pc, #168]	@ (800728c <HAL_UART_Init+0x14c>)
 80071e4:	f7fa fb26 	bl	8001834 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fa ffe1 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2224      	movs	r2, #36	@ 0x24
 8007202:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc7d 	bl	8007b1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f91c 	bl	8007460 <UART_SetConfig>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e01b      	b.n	800726a <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0201 	orr.w	r2, r2, #1
 8007260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fdba 	bl	8007ddc <UART_CheckIdleState>
 8007268:	4603      	mov	r3, r0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40013800 	.word	0x40013800
 8007278:	40004400 	.word	0x40004400
 800727c:	40004800 	.word	0x40004800
 8007280:	40004c00 	.word	0x40004c00
 8007284:	40005000 	.word	0x40005000
 8007288:	40008000 	.word	0x40008000
 800728c:	0800972c 	.word	0x0800972c

08007290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08a      	sub	sp, #40	@ 0x28
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d177      	bne.n	8007398 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <HAL_UART_Transmit+0x24>
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e070      	b.n	800739a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2221      	movs	r2, #33	@ 0x21
 80072c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072c6:	f7fb f86b 	bl	80023a0 <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	88fa      	ldrh	r2, [r7, #6]
 80072d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	88fa      	ldrh	r2, [r7, #6]
 80072d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e4:	d108      	bne.n	80072f8 <HAL_UART_Transmit+0x68>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e003      	b.n	8007300 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007300:	e02f      	b.n	8007362 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	2180      	movs	r1, #128	@ 0x80
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fe0d 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e03b      	b.n	800739a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	881a      	ldrh	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007334:	b292      	uxth	r2, r2
 8007336:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	3302      	adds	r3, #2
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	e007      	b.n	8007350 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	3301      	adds	r3, #1
 800734e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1c9      	bne.n	8007302 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2200      	movs	r2, #0
 8007376:	2140      	movs	r1, #64	@ 0x40
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fdd7 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e005      	b.n	800739a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b08b      	sub	sp, #44	@ 0x2c
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d147      	bne.n	800744a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_UART_Transmit_IT+0x22>
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e040      	b.n	800744c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2221      	movs	r2, #33	@ 0x21
 80073f2:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fc:	d107      	bne.n	800740e <HAL_UART_Transmit_IT+0x6a>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a13      	ldr	r2, [pc, #76]	@ (8007458 <HAL_UART_Transmit_IT+0xb4>)
 800740a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800740c:	e002      	b.n	8007414 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4a12      	ldr	r2, [pc, #72]	@ (800745c <HAL_UART_Transmit_IT+0xb8>)
 8007412:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	613b      	str	r3, [r7, #16]
   return(result);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	623b      	str	r3, [r7, #32]
 8007434:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	69f9      	ldr	r1, [r7, #28]
 8007438:	6a3a      	ldr	r2, [r7, #32]
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e6      	bne.n	8007414 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800744a:	2302      	movs	r3, #2
  }
}
 800744c:	4618      	mov	r0, r3
 800744e:	372c      	adds	r7, #44	@ 0x2c
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	08008185 	.word	0x08008185
 800745c:	080080cf 	.word	0x080080cf

08007460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007464:	b08a      	sub	sp, #40	@ 0x28
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	4a9e      	ldr	r2, [pc, #632]	@ (80076f0 <UART_SetConfig+0x290>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d904      	bls.n	8007484 <UART_SetConfig+0x24>
 800747a:	f640 4158 	movw	r1, #3160	@ 0xc58
 800747e:	489d      	ldr	r0, [pc, #628]	@ (80076f4 <UART_SetConfig+0x294>)
 8007480:	f7fa f9d8 	bl	8001834 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800748c:	d00d      	beq.n	80074aa <UART_SetConfig+0x4a>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <UART_SetConfig+0x4a>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	d004      	beq.n	80074aa <UART_SetConfig+0x4a>
 80074a0:	f640 4159 	movw	r1, #3161	@ 0xc59
 80074a4:	4893      	ldr	r0, [pc, #588]	@ (80076f4 <UART_SetConfig+0x294>)
 80074a6:	f7fa f9c5 	bl	8001834 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a92      	ldr	r2, [pc, #584]	@ (80076f8 <UART_SetConfig+0x298>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d10e      	bne.n	80074d2 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d030      	beq.n	800751e <UART_SetConfig+0xbe>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c4:	d02b      	beq.n	800751e <UART_SetConfig+0xbe>
 80074c6:	f640 415c 	movw	r1, #3164	@ 0xc5c
 80074ca:	488a      	ldr	r0, [pc, #552]	@ (80076f4 <UART_SetConfig+0x294>)
 80074cc:	f7fa f9b2 	bl	8001834 <assert_failed>
 80074d0:	e025      	b.n	800751e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074da:	d012      	beq.n	8007502 <UART_SetConfig+0xa2>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <UART_SetConfig+0xa2>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ec:	d009      	beq.n	8007502 <UART_SetConfig+0xa2>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f6:	d004      	beq.n	8007502 <UART_SetConfig+0xa2>
 80074f8:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 80074fc:	487d      	ldr	r0, [pc, #500]	@ (80076f4 <UART_SetConfig+0x294>)
 80074fe:	f7fa f999 	bl	8001834 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <UART_SetConfig+0xbe>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007512:	d004      	beq.n	800751e <UART_SetConfig+0xbe>
 8007514:	f640 4161 	movw	r1, #3169	@ 0xc61
 8007518:	4876      	ldr	r0, [pc, #472]	@ (80076f4 <UART_SetConfig+0x294>)
 800751a:	f7fa f98b 	bl	8001834 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <UART_SetConfig+0xe4>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800752e:	d009      	beq.n	8007544 <UART_SetConfig+0xe4>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007538:	d004      	beq.n	8007544 <UART_SetConfig+0xe4>
 800753a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800753e:	486d      	ldr	r0, [pc, #436]	@ (80076f4 <UART_SetConfig+0x294>)
 8007540:	f7fa f978 	bl	8001834 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	f023 030c 	bic.w	r3, r3, #12
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <UART_SetConfig+0xf8>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <UART_SetConfig+0x102>
 8007558:	f640 4165 	movw	r1, #3173	@ 0xc65
 800755c:	4865      	ldr	r0, [pc, #404]	@ (80076f4 <UART_SetConfig+0x294>)
 800755e:	f7fa f969 	bl	8001834 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d013      	beq.n	8007592 <UART_SetConfig+0x132>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007572:	d00e      	beq.n	8007592 <UART_SetConfig+0x132>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0x132>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007586:	d004      	beq.n	8007592 <UART_SetConfig+0x132>
 8007588:	f640 4166 	movw	r1, #3174	@ 0xc66
 800758c:	4859      	ldr	r0, [pc, #356]	@ (80076f4 <UART_SetConfig+0x294>)
 800758e:	f7fa f951 	bl	8001834 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <UART_SetConfig+0x14e>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a2:	d004      	beq.n	80075ae <UART_SetConfig+0x14e>
 80075a4:	f640 4167 	movw	r1, #3175	@ 0xc67
 80075a8:	4852      	ldr	r0, [pc, #328]	@ (80076f4 <UART_SetConfig+0x294>)
 80075aa:	f7fa f943 	bl	8001834 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	431a      	orrs	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4b4b      	ldr	r3, [pc, #300]	@ (80076fc <UART_SetConfig+0x29c>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a3f      	ldr	r2, [pc, #252]	@ (80076f8 <UART_SetConfig+0x298>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007606:	4313      	orrs	r3, r2
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761a:	430a      	orrs	r2, r1
 800761c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a37      	ldr	r2, [pc, #220]	@ (8007700 <UART_SetConfig+0x2a0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d125      	bne.n	8007674 <UART_SetConfig+0x214>
 8007628:	4b36      	ldr	r3, [pc, #216]	@ (8007704 <UART_SetConfig+0x2a4>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d81a      	bhi.n	800766c <UART_SetConfig+0x20c>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0x1dc>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	08007655 	.word	0x08007655
 8007648:	08007665 	.word	0x08007665
 800764c:	2301      	movs	r3, #1
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007652:	e114      	b.n	800787e <UART_SetConfig+0x41e>
 8007654:	2302      	movs	r3, #2
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765a:	e110      	b.n	800787e <UART_SetConfig+0x41e>
 800765c:	2304      	movs	r3, #4
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007662:	e10c      	b.n	800787e <UART_SetConfig+0x41e>
 8007664:	2308      	movs	r3, #8
 8007666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766a:	e108      	b.n	800787e <UART_SetConfig+0x41e>
 800766c:	2310      	movs	r3, #16
 800766e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007672:	e104      	b.n	800787e <UART_SetConfig+0x41e>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a23      	ldr	r2, [pc, #140]	@ (8007708 <UART_SetConfig+0x2a8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d146      	bne.n	800770c <UART_SetConfig+0x2ac>
 800767e:	4b21      	ldr	r3, [pc, #132]	@ (8007704 <UART_SetConfig+0x2a4>)
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007684:	f003 030c 	and.w	r3, r3, #12
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d82d      	bhi.n	80076e8 <UART_SetConfig+0x288>
 800768c:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <UART_SetConfig+0x234>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076e9 	.word	0x080076e9
 800769c:	080076e9 	.word	0x080076e9
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	080076d9 	.word	0x080076d9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ce:	e0d6      	b.n	800787e <UART_SetConfig+0x41e>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d6:	e0d2      	b.n	800787e <UART_SetConfig+0x41e>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076de:	e0ce      	b.n	800787e <UART_SetConfig+0x41e>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e6:	e0ca      	b.n	800787e <UART_SetConfig+0x41e>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ee:	e0c6      	b.n	800787e <UART_SetConfig+0x41e>
 80076f0:	00989680 	.word	0x00989680
 80076f4:	0800972c 	.word	0x0800972c
 80076f8:	40008000 	.word	0x40008000
 80076fc:	efff69f3 	.word	0xefff69f3
 8007700:	40013800 	.word	0x40013800
 8007704:	40021000 	.word	0x40021000
 8007708:	40004400 	.word	0x40004400
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4aae      	ldr	r2, [pc, #696]	@ (80079cc <UART_SetConfig+0x56c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d125      	bne.n	8007762 <UART_SetConfig+0x302>
 8007716:	4bae      	ldr	r3, [pc, #696]	@ (80079d0 <UART_SetConfig+0x570>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d016      	beq.n	8007752 <UART_SetConfig+0x2f2>
 8007724:	2b30      	cmp	r3, #48	@ 0x30
 8007726:	d818      	bhi.n	800775a <UART_SetConfig+0x2fa>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d00a      	beq.n	8007742 <UART_SetConfig+0x2e2>
 800772c:	2b20      	cmp	r3, #32
 800772e:	d814      	bhi.n	800775a <UART_SetConfig+0x2fa>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <UART_SetConfig+0x2da>
 8007734:	2b10      	cmp	r3, #16
 8007736:	d008      	beq.n	800774a <UART_SetConfig+0x2ea>
 8007738:	e00f      	b.n	800775a <UART_SetConfig+0x2fa>
 800773a:	2300      	movs	r3, #0
 800773c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007740:	e09d      	b.n	800787e <UART_SetConfig+0x41e>
 8007742:	2302      	movs	r3, #2
 8007744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007748:	e099      	b.n	800787e <UART_SetConfig+0x41e>
 800774a:	2304      	movs	r3, #4
 800774c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007750:	e095      	b.n	800787e <UART_SetConfig+0x41e>
 8007752:	2308      	movs	r3, #8
 8007754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007758:	e091      	b.n	800787e <UART_SetConfig+0x41e>
 800775a:	2310      	movs	r3, #16
 800775c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007760:	e08d      	b.n	800787e <UART_SetConfig+0x41e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a9b      	ldr	r2, [pc, #620]	@ (80079d4 <UART_SetConfig+0x574>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d125      	bne.n	80077b8 <UART_SetConfig+0x358>
 800776c:	4b98      	ldr	r3, [pc, #608]	@ (80079d0 <UART_SetConfig+0x570>)
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007772:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007776:	2bc0      	cmp	r3, #192	@ 0xc0
 8007778:	d016      	beq.n	80077a8 <UART_SetConfig+0x348>
 800777a:	2bc0      	cmp	r3, #192	@ 0xc0
 800777c:	d818      	bhi.n	80077b0 <UART_SetConfig+0x350>
 800777e:	2b80      	cmp	r3, #128	@ 0x80
 8007780:	d00a      	beq.n	8007798 <UART_SetConfig+0x338>
 8007782:	2b80      	cmp	r3, #128	@ 0x80
 8007784:	d814      	bhi.n	80077b0 <UART_SetConfig+0x350>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <UART_SetConfig+0x330>
 800778a:	2b40      	cmp	r3, #64	@ 0x40
 800778c:	d008      	beq.n	80077a0 <UART_SetConfig+0x340>
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x350>
 8007790:	2300      	movs	r3, #0
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007796:	e072      	b.n	800787e <UART_SetConfig+0x41e>
 8007798:	2302      	movs	r3, #2
 800779a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779e:	e06e      	b.n	800787e <UART_SetConfig+0x41e>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a6:	e06a      	b.n	800787e <UART_SetConfig+0x41e>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ae:	e066      	b.n	800787e <UART_SetConfig+0x41e>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b6:	e062      	b.n	800787e <UART_SetConfig+0x41e>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a86      	ldr	r2, [pc, #536]	@ (80079d8 <UART_SetConfig+0x578>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d12a      	bne.n	8007818 <UART_SetConfig+0x3b8>
 80077c2:	4b83      	ldr	r3, [pc, #524]	@ (80079d0 <UART_SetConfig+0x570>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d0:	d01a      	beq.n	8007808 <UART_SetConfig+0x3a8>
 80077d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d6:	d81b      	bhi.n	8007810 <UART_SetConfig+0x3b0>
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077dc:	d00c      	beq.n	80077f8 <UART_SetConfig+0x398>
 80077de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e2:	d815      	bhi.n	8007810 <UART_SetConfig+0x3b0>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <UART_SetConfig+0x390>
 80077e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ec:	d008      	beq.n	8007800 <UART_SetConfig+0x3a0>
 80077ee:	e00f      	b.n	8007810 <UART_SetConfig+0x3b0>
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f6:	e042      	b.n	800787e <UART_SetConfig+0x41e>
 80077f8:	2302      	movs	r3, #2
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fe:	e03e      	b.n	800787e <UART_SetConfig+0x41e>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007806:	e03a      	b.n	800787e <UART_SetConfig+0x41e>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780e:	e036      	b.n	800787e <UART_SetConfig+0x41e>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007816:	e032      	b.n	800787e <UART_SetConfig+0x41e>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a6f      	ldr	r2, [pc, #444]	@ (80079dc <UART_SetConfig+0x57c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d12a      	bne.n	8007878 <UART_SetConfig+0x418>
 8007822:	4b6b      	ldr	r3, [pc, #428]	@ (80079d0 <UART_SetConfig+0x570>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007828:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800782c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007830:	d01a      	beq.n	8007868 <UART_SetConfig+0x408>
 8007832:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007836:	d81b      	bhi.n	8007870 <UART_SetConfig+0x410>
 8007838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800783c:	d00c      	beq.n	8007858 <UART_SetConfig+0x3f8>
 800783e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007842:	d815      	bhi.n	8007870 <UART_SetConfig+0x410>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <UART_SetConfig+0x3f0>
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800784c:	d008      	beq.n	8007860 <UART_SetConfig+0x400>
 800784e:	e00f      	b.n	8007870 <UART_SetConfig+0x410>
 8007850:	2300      	movs	r3, #0
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007856:	e012      	b.n	800787e <UART_SetConfig+0x41e>
 8007858:	2302      	movs	r3, #2
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785e:	e00e      	b.n	800787e <UART_SetConfig+0x41e>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007866:	e00a      	b.n	800787e <UART_SetConfig+0x41e>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786e:	e006      	b.n	800787e <UART_SetConfig+0x41e>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007876:	e002      	b.n	800787e <UART_SetConfig+0x41e>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a56      	ldr	r2, [pc, #344]	@ (80079dc <UART_SetConfig+0x57c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d17a      	bne.n	800797e <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007888:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800788c:	2b08      	cmp	r3, #8
 800788e:	d824      	bhi.n	80078da <UART_SetConfig+0x47a>
 8007890:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <UART_SetConfig+0x438>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078db 	.word	0x080078db
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078cb 	.word	0x080078cb
 80078ac:	080078db 	.word	0x080078db
 80078b0:	080078db 	.word	0x080078db
 80078b4:	080078db 	.word	0x080078db
 80078b8:	080078d3 	.word	0x080078d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078bc:	f7fc fc64 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 80078c0:	61f8      	str	r0, [r7, #28]
        break;
 80078c2:	e010      	b.n	80078e6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c4:	4b46      	ldr	r3, [pc, #280]	@ (80079e0 <UART_SetConfig+0x580>)
 80078c6:	61fb      	str	r3, [r7, #28]
        break;
 80078c8:	e00d      	b.n	80078e6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ca:	f7fc fbc5 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 80078ce:	61f8      	str	r0, [r7, #28]
        break;
 80078d0:	e009      	b.n	80078e6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d6:	61fb      	str	r3, [r7, #28]
        break;
 80078d8:	e005      	b.n	80078e6 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8107 	beq.w	8007afc <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d305      	bcc.n	800790a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	429a      	cmp	r2, r3
 8007908:	d903      	bls.n	8007912 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007910:	e0f4      	b.n	8007afc <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2200      	movs	r2, #0
 8007916:	461c      	mov	r4, r3
 8007918:	4615      	mov	r5, r2
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	022b      	lsls	r3, r5, #8
 8007924:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007928:	0222      	lsls	r2, r4, #8
 800792a:	68f9      	ldr	r1, [r7, #12]
 800792c:	6849      	ldr	r1, [r1, #4]
 800792e:	0849      	lsrs	r1, r1, #1
 8007930:	2000      	movs	r0, #0
 8007932:	4688      	mov	r8, r1
 8007934:	4681      	mov	r9, r0
 8007936:	eb12 0a08 	adds.w	sl, r2, r8
 800793a:	eb43 0b09 	adc.w	fp, r3, r9
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	4650      	mov	r0, sl
 800794e:	4659      	mov	r1, fp
 8007950:	f7f8 fc96 	bl	8000280 <__aeabi_uldivmod>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4613      	mov	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007962:	d308      	bcc.n	8007976 <UART_SetConfig+0x516>
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800796a:	d204      	bcs.n	8007976 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	e0c2      	b.n	8007afc <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800797c:	e0be      	b.n	8007afc <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007986:	d16a      	bne.n	8007a5e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8007988:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800798c:	2b08      	cmp	r3, #8
 800798e:	d834      	bhi.n	80079fa <UART_SetConfig+0x59a>
 8007990:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <UART_SetConfig+0x538>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079e5 	.word	0x080079e5
 80079a4:	080079fb 	.word	0x080079fb
 80079a8:	080079eb 	.word	0x080079eb
 80079ac:	080079fb 	.word	0x080079fb
 80079b0:	080079fb 	.word	0x080079fb
 80079b4:	080079fb 	.word	0x080079fb
 80079b8:	080079f3 	.word	0x080079f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079bc:	f7fc fbe4 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 80079c0:	61f8      	str	r0, [r7, #28]
        break;
 80079c2:	e020      	b.n	8007a06 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079c4:	f7fc fbf6 	bl	80041b4 <HAL_RCC_GetPCLK2Freq>
 80079c8:	61f8      	str	r0, [r7, #28]
        break;
 80079ca:	e01c      	b.n	8007a06 <UART_SetConfig+0x5a6>
 80079cc:	40004800 	.word	0x40004800
 80079d0:	40021000 	.word	0x40021000
 80079d4:	40004c00 	.word	0x40004c00
 80079d8:	40005000 	.word	0x40005000
 80079dc:	40008000 	.word	0x40008000
 80079e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e4:	4b4c      	ldr	r3, [pc, #304]	@ (8007b18 <UART_SetConfig+0x6b8>)
 80079e6:	61fb      	str	r3, [r7, #28]
        break;
 80079e8:	e00d      	b.n	8007a06 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fc fb35 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 80079ee:	61f8      	str	r0, [r7, #28]
        break;
 80079f0:	e009      	b.n	8007a06 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f6:	61fb      	str	r3, [r7, #28]
        break;
 80079f8:	e005      	b.n	8007a06 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d077      	beq.n	8007afc <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	005a      	lsls	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	441a      	add	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d916      	bls.n	8007a56 <UART_SetConfig+0x5f6>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2e:	d212      	bcs.n	8007a56 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f023 030f 	bic.w	r3, r3, #15
 8007a38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	8afb      	ldrh	r3, [r7, #22]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	8afa      	ldrh	r2, [r7, #22]
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e052      	b.n	8007afc <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a5c:	e04e      	b.n	8007afc <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a62:	2b08      	cmp	r3, #8
 8007a64:	d827      	bhi.n	8007ab6 <UART_SetConfig+0x656>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <UART_SetConfig+0x60c>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a91 	.word	0x08007a91
 8007a70:	08007a99 	.word	0x08007a99
 8007a74:	08007aa1 	.word	0x08007aa1
 8007a78:	08007ab7 	.word	0x08007ab7
 8007a7c:	08007aa7 	.word	0x08007aa7
 8007a80:	08007ab7 	.word	0x08007ab7
 8007a84:	08007ab7 	.word	0x08007ab7
 8007a88:	08007ab7 	.word	0x08007ab7
 8007a8c:	08007aaf 	.word	0x08007aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a90:	f7fc fb7a 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8007a94:	61f8      	str	r0, [r7, #28]
        break;
 8007a96:	e014      	b.n	8007ac2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a98:	f7fc fb8c 	bl	80041b4 <HAL_RCC_GetPCLK2Freq>
 8007a9c:	61f8      	str	r0, [r7, #28]
        break;
 8007a9e:	e010      	b.n	8007ac2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <UART_SetConfig+0x6b8>)
 8007aa2:	61fb      	str	r3, [r7, #28]
        break;
 8007aa4:	e00d      	b.n	8007ac2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aa6:	f7fc fad7 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8007aaa:	61f8      	str	r0, [r7, #28]
        break;
 8007aac:	e009      	b.n	8007ac2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab2:	61fb      	str	r3, [r7, #28]
        break;
 8007ab4:	e005      	b.n	8007ac2 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ac0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d019      	beq.n	8007afc <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	085a      	lsrs	r2, r3, #1
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ada:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b0f      	cmp	r3, #15
 8007ae0:	d909      	bls.n	8007af6 <UART_SetConfig+0x696>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae8:	d205      	bcs.n	8007af6 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60da      	str	r2, [r3, #12]
 8007af4:	e002      	b.n	8007afc <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3728      	adds	r7, #40	@ 0x28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b16:	bf00      	nop
 8007b18:	00f42400 	.word	0x00f42400

08007b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b28:	2bff      	cmp	r3, #255	@ 0xff
 8007b2a:	d904      	bls.n	8007b36 <UART_AdvFeatureConfig+0x1a>
 8007b2c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 8007b30:	4891      	ldr	r0, [pc, #580]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007b32:	f7f9 fe7f 	bl	8001834 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d018      	beq.n	8007b74 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <UART_AdvFeatureConfig+0x42>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b52:	d004      	beq.n	8007b5e <UART_AdvFeatureConfig+0x42>
 8007b54:	f640 5152 	movw	r1, #3410	@ 0xd52
 8007b58:	4887      	ldr	r0, [pc, #540]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007b5a:	f7f9 fe6b 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d018      	beq.n	8007bb2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <UART_AdvFeatureConfig+0x80>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b90:	d004      	beq.n	8007b9c <UART_AdvFeatureConfig+0x80>
 8007b92:	f640 5159 	movw	r1, #3417	@ 0xd59
 8007b96:	4878      	ldr	r0, [pc, #480]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007b98:	f7f9 fe4c 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <UART_AdvFeatureConfig+0xbe>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bce:	d004      	beq.n	8007bda <UART_AdvFeatureConfig+0xbe>
 8007bd0:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8007bd4:	4868      	ldr	r0, [pc, #416]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007bd6:	f7f9 fe2d 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d018      	beq.n	8007c2e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <UART_AdvFeatureConfig+0xfc>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c0c:	d004      	beq.n	8007c18 <UART_AdvFeatureConfig+0xfc>
 8007c0e:	f640 5167 	movw	r1, #3431	@ 0xd67
 8007c12:	4859      	ldr	r0, [pc, #356]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007c14:	f7f9 fe0e 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d018      	beq.n	8007c6c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <UART_AdvFeatureConfig+0x13a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c4a:	d004      	beq.n	8007c56 <UART_AdvFeatureConfig+0x13a>
 8007c4c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 8007c50:	4849      	ldr	r0, [pc, #292]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007c52:	f7f9 fdef 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c70:	f003 0320 	and.w	r3, r3, #32
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d018      	beq.n	8007caa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <UART_AdvFeatureConfig+0x178>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c88:	d004      	beq.n	8007c94 <UART_AdvFeatureConfig+0x178>
 8007c8a:	f640 5175 	movw	r1, #3445	@ 0xd75
 8007c8e:	483a      	ldr	r0, [pc, #232]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007c90:	f7f9 fdd0 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d06c      	beq.n	8007d90 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a30      	ldr	r2, [pc, #192]	@ (8007d7c <UART_AdvFeatureConfig+0x260>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d018      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x1d6>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8007d80 <UART_AdvFeatureConfig+0x264>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d013      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x1d6>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a2d      	ldr	r2, [pc, #180]	@ (8007d84 <UART_AdvFeatureConfig+0x268>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00e      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x1d6>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8007d88 <UART_AdvFeatureConfig+0x26c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x1d6>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d8c <UART_AdvFeatureConfig+0x270>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x1d6>
 8007ce8:	f640 517c 	movw	r1, #3452	@ 0xd7c
 8007cec:	4822      	ldr	r0, [pc, #136]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007cee:	f7f9 fda1 	bl	8001834 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <UART_AdvFeatureConfig+0x1f2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d02:	d004      	beq.n	8007d0e <UART_AdvFeatureConfig+0x1f2>
 8007d04:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8007d08:	481b      	ldr	r0, [pc, #108]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007d0a:	f7f9 fd93 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d2c:	d130      	bne.n	8007d90 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d013      	beq.n	8007d5e <UART_AdvFeatureConfig+0x242>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d3e:	d00e      	beq.n	8007d5e <UART_AdvFeatureConfig+0x242>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d48:	d009      	beq.n	8007d5e <UART_AdvFeatureConfig+0x242>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d52:	d004      	beq.n	8007d5e <UART_AdvFeatureConfig+0x242>
 8007d54:	f640 5182 	movw	r1, #3458	@ 0xd82
 8007d58:	4807      	ldr	r0, [pc, #28]	@ (8007d78 <UART_AdvFeatureConfig+0x25c>)
 8007d5a:	f7f9 fd6b 	bl	8001834 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
 8007d74:	e00c      	b.n	8007d90 <UART_AdvFeatureConfig+0x274>
 8007d76:	bf00      	nop
 8007d78:	0800972c 	.word	0x0800972c
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	40004400 	.word	0x40004400
 8007d84:	40004800 	.word	0x40004800
 8007d88:	40004c00 	.word	0x40004c00
 8007d8c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d018      	beq.n	8007dce <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <UART_AdvFeatureConfig+0x29c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007dac:	d004      	beq.n	8007db8 <UART_AdvFeatureConfig+0x29c>
 8007dae:	f640 518a 	movw	r1, #3466	@ 0xd8a
 8007db2:	4809      	ldr	r0, [pc, #36]	@ (8007dd8 <UART_AdvFeatureConfig+0x2bc>)
 8007db4:	f7f9 fd3e 	bl	8001834 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
  }
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	0800972c 	.word	0x0800972c

08007ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b098      	sub	sp, #96	@ 0x60
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dec:	f7fa fad8 	bl	80023a0 <HAL_GetTick>
 8007df0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d12e      	bne.n	8007e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f88c 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d021      	beq.n	8007e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e062      	b.n	8007f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d149      	bne.n	8007f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e74:	2200      	movs	r2, #0
 8007e76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f856 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d03c      	beq.n	8007f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	623b      	str	r3, [r7, #32]
   return(result);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed8:	61fa      	str	r2, [r7, #28]
 8007eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e011      	b.n	8007f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3758      	adds	r7, #88	@ 0x58
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3c:	e04f      	b.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d04b      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f46:	f7fa fa2b 	bl	80023a0 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e04e      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d037      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b80      	cmp	r3, #128	@ 0x80
 8007f72:	d034      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d031      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d110      	bne.n	8007faa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f838 	bl	8008006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e029      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb8:	d111      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f81e 	bl	8008006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e00f      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d0a0      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008006:	b480      	push	{r7}
 8008008:	b095      	sub	sp, #84	@ 0x54
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800802c:	643b      	str	r3, [r7, #64]	@ 0x40
 800802e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008078:	2b01      	cmp	r3, #1
 800807a:	d118      	bne.n	80080ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60bb      	str	r3, [r7, #8]
   return(result);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f023 0310 	bic.w	r3, r3, #16
 8008090:	647b      	str	r3, [r7, #68]	@ 0x44
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	613b      	str	r3, [r7, #16]
   return(result);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080c2:	bf00      	nop
 80080c4:	3754      	adds	r7, #84	@ 0x54
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b08f      	sub	sp, #60	@ 0x3c
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080da:	2b21      	cmp	r3, #33	@ 0x21
 80080dc:	d14c      	bne.n	8008178 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d132      	bne.n	8008150 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800810a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800810e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e6      	bne.n	80080ea <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	60bb      	str	r3, [r7, #8]
   return(result);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008130:	633b      	str	r3, [r7, #48]	@ 0x30
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	61bb      	str	r3, [r7, #24]
 800813c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6979      	ldr	r1, [r7, #20]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	613b      	str	r3, [r7, #16]
   return(result);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e6      	bne.n	800811c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800814e:	e013      	b.n	8008178 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008154:	781a      	ldrb	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800816c:	b29b      	uxth	r3, r3
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8008178:	bf00      	nop
 800817a:	373c      	adds	r7, #60	@ 0x3c
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b091      	sub	sp, #68	@ 0x44
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008190:	2b21      	cmp	r3, #33	@ 0x21
 8008192:	d151      	bne.n	8008238 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d132      	bne.n	8008206 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	623b      	str	r3, [r7, #32]
   return(result);
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e6      	bne.n	80081a0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	60fb      	str	r3, [r7, #12]
   return(result);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	69b9      	ldr	r1, [r7, #24]
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	617b      	str	r3, [r7, #20]
   return(result);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e6      	bne.n	80081d2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008204:	e018      	b.n	8008238 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800820c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820e:	881a      	ldrh	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008218:	b292      	uxth	r2, r2
 800821a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008220:	1c9a      	adds	r2, r3, #2
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8008238:	bf00      	nop
 800823a:	3744      	adds	r7, #68	@ 0x44
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <calloc>:
 8008244:	4b02      	ldr	r3, [pc, #8]	@ (8008250 <calloc+0xc>)
 8008246:	460a      	mov	r2, r1
 8008248:	4601      	mov	r1, r0
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	f000 b802 	b.w	8008254 <_calloc_r>
 8008250:	2000001c 	.word	0x2000001c

08008254 <_calloc_r>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	fba1 5402 	umull	r5, r4, r1, r2
 800825a:	b934      	cbnz	r4, 800826a <_calloc_r+0x16>
 800825c:	4629      	mov	r1, r5
 800825e:	f000 f837 	bl	80082d0 <_malloc_r>
 8008262:	4606      	mov	r6, r0
 8008264:	b928      	cbnz	r0, 8008272 <_calloc_r+0x1e>
 8008266:	4630      	mov	r0, r6
 8008268:	bd70      	pop	{r4, r5, r6, pc}
 800826a:	220c      	movs	r2, #12
 800826c:	6002      	str	r2, [r0, #0]
 800826e:	2600      	movs	r6, #0
 8008270:	e7f9      	b.n	8008266 <_calloc_r+0x12>
 8008272:	462a      	mov	r2, r5
 8008274:	4621      	mov	r1, r4
 8008276:	f000 fb21 	bl	80088bc <memset>
 800827a:	e7f4      	b.n	8008266 <_calloc_r+0x12>

0800827c <free>:
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <free+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 bbb5 	b.w	80089f0 <_free_r>
 8008286:	bf00      	nop
 8008288:	2000001c 	.word	0x2000001c

0800828c <sbrk_aligned>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4e0f      	ldr	r6, [pc, #60]	@ (80082cc <sbrk_aligned+0x40>)
 8008290:	460c      	mov	r4, r1
 8008292:	6831      	ldr	r1, [r6, #0]
 8008294:	4605      	mov	r5, r0
 8008296:	b911      	cbnz	r1, 800829e <sbrk_aligned+0x12>
 8008298:	f000 fb4c 	bl	8008934 <_sbrk_r>
 800829c:	6030      	str	r0, [r6, #0]
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 fb47 	bl	8008934 <_sbrk_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	d103      	bne.n	80082b2 <sbrk_aligned+0x26>
 80082aa:	f04f 34ff 	mov.w	r4, #4294967295
 80082ae:	4620      	mov	r0, r4
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d0f8      	beq.n	80082ae <sbrk_aligned+0x22>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 fb38 	bl	8008934 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d1f2      	bne.n	80082ae <sbrk_aligned+0x22>
 80082c8:	e7ef      	b.n	80082aa <sbrk_aligned+0x1e>
 80082ca:	bf00      	nop
 80082cc:	20000990 	.word	0x20000990

080082d0 <_malloc_r>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	1ccd      	adds	r5, r1, #3
 80082d6:	f025 0503 	bic.w	r5, r5, #3
 80082da:	3508      	adds	r5, #8
 80082dc:	2d0c      	cmp	r5, #12
 80082de:	bf38      	it	cc
 80082e0:	250c      	movcc	r5, #12
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	db01      	blt.n	80082ec <_malloc_r+0x1c>
 80082e8:	42a9      	cmp	r1, r5
 80082ea:	d904      	bls.n	80082f6 <_malloc_r+0x26>
 80082ec:	230c      	movs	r3, #12
 80082ee:	6033      	str	r3, [r6, #0]
 80082f0:	2000      	movs	r0, #0
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083cc <_malloc_r+0xfc>
 80082fa:	f000 f869 	bl	80083d0 <__malloc_lock>
 80082fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008302:	461c      	mov	r4, r3
 8008304:	bb44      	cbnz	r4, 8008358 <_malloc_r+0x88>
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ffbf 	bl	800828c <sbrk_aligned>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	4604      	mov	r4, r0
 8008312:	d158      	bne.n	80083c6 <_malloc_r+0xf6>
 8008314:	f8d8 4000 	ldr.w	r4, [r8]
 8008318:	4627      	mov	r7, r4
 800831a:	2f00      	cmp	r7, #0
 800831c:	d143      	bne.n	80083a6 <_malloc_r+0xd6>
 800831e:	2c00      	cmp	r4, #0
 8008320:	d04b      	beq.n	80083ba <_malloc_r+0xea>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	eb04 0903 	add.w	r9, r4, r3
 800832c:	f000 fb02 	bl	8008934 <_sbrk_r>
 8008330:	4581      	cmp	r9, r0
 8008332:	d142      	bne.n	80083ba <_malloc_r+0xea>
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	1a6d      	subs	r5, r5, r1
 8008338:	4629      	mov	r1, r5
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ffa6 	bl	800828c <sbrk_aligned>
 8008340:	3001      	adds	r0, #1
 8008342:	d03a      	beq.n	80083ba <_malloc_r+0xea>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	442b      	add	r3, r5
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	f8d8 3000 	ldr.w	r3, [r8]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	bb62      	cbnz	r2, 80083ac <_malloc_r+0xdc>
 8008352:	f8c8 7000 	str.w	r7, [r8]
 8008356:	e00f      	b.n	8008378 <_malloc_r+0xa8>
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	1b52      	subs	r2, r2, r5
 800835c:	d420      	bmi.n	80083a0 <_malloc_r+0xd0>
 800835e:	2a0b      	cmp	r2, #11
 8008360:	d917      	bls.n	8008392 <_malloc_r+0xc2>
 8008362:	1961      	adds	r1, r4, r5
 8008364:	42a3      	cmp	r3, r4
 8008366:	6025      	str	r5, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	6059      	strne	r1, [r3, #4]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	bf08      	it	eq
 8008370:	f8c8 1000 	streq.w	r1, [r8]
 8008374:	5162      	str	r2, [r4, r5]
 8008376:	604b      	str	r3, [r1, #4]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f82f 	bl	80083dc <__malloc_unlock>
 800837e:	f104 000b 	add.w	r0, r4, #11
 8008382:	1d23      	adds	r3, r4, #4
 8008384:	f020 0007 	bic.w	r0, r0, #7
 8008388:	1ac2      	subs	r2, r0, r3
 800838a:	bf1c      	itt	ne
 800838c:	1a1b      	subne	r3, r3, r0
 800838e:	50a3      	strne	r3, [r4, r2]
 8008390:	e7af      	b.n	80082f2 <_malloc_r+0x22>
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	42a3      	cmp	r3, r4
 8008396:	bf0c      	ite	eq
 8008398:	f8c8 2000 	streq.w	r2, [r8]
 800839c:	605a      	strne	r2, [r3, #4]
 800839e:	e7eb      	b.n	8008378 <_malloc_r+0xa8>
 80083a0:	4623      	mov	r3, r4
 80083a2:	6864      	ldr	r4, [r4, #4]
 80083a4:	e7ae      	b.n	8008304 <_malloc_r+0x34>
 80083a6:	463c      	mov	r4, r7
 80083a8:	687f      	ldr	r7, [r7, #4]
 80083aa:	e7b6      	b.n	800831a <_malloc_r+0x4a>
 80083ac:	461a      	mov	r2, r3
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d1fb      	bne.n	80083ac <_malloc_r+0xdc>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6053      	str	r3, [r2, #4]
 80083b8:	e7de      	b.n	8008378 <_malloc_r+0xa8>
 80083ba:	230c      	movs	r3, #12
 80083bc:	6033      	str	r3, [r6, #0]
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f80c 	bl	80083dc <__malloc_unlock>
 80083c4:	e794      	b.n	80082f0 <_malloc_r+0x20>
 80083c6:	6005      	str	r5, [r0, #0]
 80083c8:	e7d6      	b.n	8008378 <_malloc_r+0xa8>
 80083ca:	bf00      	nop
 80083cc:	20000994 	.word	0x20000994

080083d0 <__malloc_lock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__malloc_lock+0x8>)
 80083d2:	f000 bafc 	b.w	80089ce <__retarget_lock_acquire_recursive>
 80083d6:	bf00      	nop
 80083d8:	20000ad8 	.word	0x20000ad8

080083dc <__malloc_unlock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_unlock+0x8>)
 80083de:	f000 baf7 	b.w	80089d0 <__retarget_lock_release_recursive>
 80083e2:	bf00      	nop
 80083e4:	20000ad8 	.word	0x20000ad8

080083e8 <std>:
 80083e8:	2300      	movs	r3, #0
 80083ea:	b510      	push	{r4, lr}
 80083ec:	4604      	mov	r4, r0
 80083ee:	e9c0 3300 	strd	r3, r3, [r0]
 80083f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083f6:	6083      	str	r3, [r0, #8]
 80083f8:	8181      	strh	r1, [r0, #12]
 80083fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80083fc:	81c2      	strh	r2, [r0, #14]
 80083fe:	6183      	str	r3, [r0, #24]
 8008400:	4619      	mov	r1, r3
 8008402:	2208      	movs	r2, #8
 8008404:	305c      	adds	r0, #92	@ 0x5c
 8008406:	f000 fa59 	bl	80088bc <memset>
 800840a:	4b0d      	ldr	r3, [pc, #52]	@ (8008440 <std+0x58>)
 800840c:	6263      	str	r3, [r4, #36]	@ 0x24
 800840e:	4b0d      	ldr	r3, [pc, #52]	@ (8008444 <std+0x5c>)
 8008410:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008412:	4b0d      	ldr	r3, [pc, #52]	@ (8008448 <std+0x60>)
 8008414:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008416:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <std+0x64>)
 8008418:	6323      	str	r3, [r4, #48]	@ 0x30
 800841a:	4b0d      	ldr	r3, [pc, #52]	@ (8008450 <std+0x68>)
 800841c:	6224      	str	r4, [r4, #32]
 800841e:	429c      	cmp	r4, r3
 8008420:	d006      	beq.n	8008430 <std+0x48>
 8008422:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008426:	4294      	cmp	r4, r2
 8008428:	d002      	beq.n	8008430 <std+0x48>
 800842a:	33d0      	adds	r3, #208	@ 0xd0
 800842c:	429c      	cmp	r4, r3
 800842e:	d105      	bne.n	800843c <std+0x54>
 8008430:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f000 bac8 	b.w	80089cc <__retarget_lock_init_recursive>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	08008695 	.word	0x08008695
 8008444:	080086b7 	.word	0x080086b7
 8008448:	080086ef 	.word	0x080086ef
 800844c:	08008713 	.word	0x08008713
 8008450:	20000998 	.word	0x20000998

08008454 <stdio_exit_handler>:
 8008454:	4a02      	ldr	r2, [pc, #8]	@ (8008460 <stdio_exit_handler+0xc>)
 8008456:	4903      	ldr	r1, [pc, #12]	@ (8008464 <stdio_exit_handler+0x10>)
 8008458:	4803      	ldr	r0, [pc, #12]	@ (8008468 <stdio_exit_handler+0x14>)
 800845a:	f000 b869 	b.w	8008530 <_fwalk_sglue>
 800845e:	bf00      	nop
 8008460:	20000010 	.word	0x20000010
 8008464:	08009155 	.word	0x08009155
 8008468:	20000020 	.word	0x20000020

0800846c <cleanup_stdio>:
 800846c:	6841      	ldr	r1, [r0, #4]
 800846e:	4b0c      	ldr	r3, [pc, #48]	@ (80084a0 <cleanup_stdio+0x34>)
 8008470:	4299      	cmp	r1, r3
 8008472:	b510      	push	{r4, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	d001      	beq.n	800847c <cleanup_stdio+0x10>
 8008478:	f000 fe6c 	bl	8009154 <_fflush_r>
 800847c:	68a1      	ldr	r1, [r4, #8]
 800847e:	4b09      	ldr	r3, [pc, #36]	@ (80084a4 <cleanup_stdio+0x38>)
 8008480:	4299      	cmp	r1, r3
 8008482:	d002      	beq.n	800848a <cleanup_stdio+0x1e>
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fe65 	bl	8009154 <_fflush_r>
 800848a:	68e1      	ldr	r1, [r4, #12]
 800848c:	4b06      	ldr	r3, [pc, #24]	@ (80084a8 <cleanup_stdio+0x3c>)
 800848e:	4299      	cmp	r1, r3
 8008490:	d004      	beq.n	800849c <cleanup_stdio+0x30>
 8008492:	4620      	mov	r0, r4
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	f000 be5c 	b.w	8009154 <_fflush_r>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	bf00      	nop
 80084a0:	20000998 	.word	0x20000998
 80084a4:	20000a00 	.word	0x20000a00
 80084a8:	20000a68 	.word	0x20000a68

080084ac <global_stdio_init.part.0>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <global_stdio_init.part.0+0x30>)
 80084b0:	4c0b      	ldr	r4, [pc, #44]	@ (80084e0 <global_stdio_init.part.0+0x34>)
 80084b2:	4a0c      	ldr	r2, [pc, #48]	@ (80084e4 <global_stdio_init.part.0+0x38>)
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	4620      	mov	r0, r4
 80084b8:	2200      	movs	r2, #0
 80084ba:	2104      	movs	r1, #4
 80084bc:	f7ff ff94 	bl	80083e8 <std>
 80084c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084c4:	2201      	movs	r2, #1
 80084c6:	2109      	movs	r1, #9
 80084c8:	f7ff ff8e 	bl	80083e8 <std>
 80084cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084d0:	2202      	movs	r2, #2
 80084d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d6:	2112      	movs	r1, #18
 80084d8:	f7ff bf86 	b.w	80083e8 <std>
 80084dc:	20000ad0 	.word	0x20000ad0
 80084e0:	20000998 	.word	0x20000998
 80084e4:	08008455 	.word	0x08008455

080084e8 <__sfp_lock_acquire>:
 80084e8:	4801      	ldr	r0, [pc, #4]	@ (80084f0 <__sfp_lock_acquire+0x8>)
 80084ea:	f000 ba70 	b.w	80089ce <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	20000ad9 	.word	0x20000ad9

080084f4 <__sfp_lock_release>:
 80084f4:	4801      	ldr	r0, [pc, #4]	@ (80084fc <__sfp_lock_release+0x8>)
 80084f6:	f000 ba6b 	b.w	80089d0 <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	20000ad9 	.word	0x20000ad9

08008500 <__sinit>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	f7ff fff0 	bl	80084e8 <__sfp_lock_acquire>
 8008508:	6a23      	ldr	r3, [r4, #32]
 800850a:	b11b      	cbz	r3, 8008514 <__sinit+0x14>
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008510:	f7ff bff0 	b.w	80084f4 <__sfp_lock_release>
 8008514:	4b04      	ldr	r3, [pc, #16]	@ (8008528 <__sinit+0x28>)
 8008516:	6223      	str	r3, [r4, #32]
 8008518:	4b04      	ldr	r3, [pc, #16]	@ (800852c <__sinit+0x2c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f5      	bne.n	800850c <__sinit+0xc>
 8008520:	f7ff ffc4 	bl	80084ac <global_stdio_init.part.0>
 8008524:	e7f2      	b.n	800850c <__sinit+0xc>
 8008526:	bf00      	nop
 8008528:	0800846d 	.word	0x0800846d
 800852c:	20000ad0 	.word	0x20000ad0

08008530 <_fwalk_sglue>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4607      	mov	r7, r0
 8008536:	4688      	mov	r8, r1
 8008538:	4614      	mov	r4, r2
 800853a:	2600      	movs	r6, #0
 800853c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008540:	f1b9 0901 	subs.w	r9, r9, #1
 8008544:	d505      	bpl.n	8008552 <_fwalk_sglue+0x22>
 8008546:	6824      	ldr	r4, [r4, #0]
 8008548:	2c00      	cmp	r4, #0
 800854a:	d1f7      	bne.n	800853c <_fwalk_sglue+0xc>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d907      	bls.n	8008568 <_fwalk_sglue+0x38>
 8008558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800855c:	3301      	adds	r3, #1
 800855e:	d003      	beq.n	8008568 <_fwalk_sglue+0x38>
 8008560:	4629      	mov	r1, r5
 8008562:	4638      	mov	r0, r7
 8008564:	47c0      	blx	r8
 8008566:	4306      	orrs	r6, r0
 8008568:	3568      	adds	r5, #104	@ 0x68
 800856a:	e7e9      	b.n	8008540 <_fwalk_sglue+0x10>

0800856c <_puts_r>:
 800856c:	6a03      	ldr	r3, [r0, #32]
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	6884      	ldr	r4, [r0, #8]
 8008572:	4605      	mov	r5, r0
 8008574:	460e      	mov	r6, r1
 8008576:	b90b      	cbnz	r3, 800857c <_puts_r+0x10>
 8008578:	f7ff ffc2 	bl	8008500 <__sinit>
 800857c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800857e:	07db      	lsls	r3, r3, #31
 8008580:	d405      	bmi.n	800858e <_puts_r+0x22>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	0598      	lsls	r0, r3, #22
 8008586:	d402      	bmi.n	800858e <_puts_r+0x22>
 8008588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858a:	f000 fa20 	bl	80089ce <__retarget_lock_acquire_recursive>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	0719      	lsls	r1, r3, #28
 8008592:	d502      	bpl.n	800859a <_puts_r+0x2e>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d135      	bne.n	8008606 <_puts_r+0x9a>
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f000 f937 	bl	8008810 <__swsetup_r>
 80085a2:	b380      	cbz	r0, 8008606 <_puts_r+0x9a>
 80085a4:	f04f 35ff 	mov.w	r5, #4294967295
 80085a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085aa:	07da      	lsls	r2, r3, #31
 80085ac:	d405      	bmi.n	80085ba <_puts_r+0x4e>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	059b      	lsls	r3, r3, #22
 80085b2:	d402      	bmi.n	80085ba <_puts_r+0x4e>
 80085b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085b6:	f000 fa0b 	bl	80089d0 <__retarget_lock_release_recursive>
 80085ba:	4628      	mov	r0, r5
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da04      	bge.n	80085cc <_puts_r+0x60>
 80085c2:	69a2      	ldr	r2, [r4, #24]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	dc17      	bgt.n	80085f8 <_puts_r+0x8c>
 80085c8:	290a      	cmp	r1, #10
 80085ca:	d015      	beq.n	80085f8 <_puts_r+0x8c>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	7019      	strb	r1, [r3, #0]
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085da:	3b01      	subs	r3, #1
 80085dc:	60a3      	str	r3, [r4, #8]
 80085de:	2900      	cmp	r1, #0
 80085e0:	d1ed      	bne.n	80085be <_puts_r+0x52>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da11      	bge.n	800860a <_puts_r+0x9e>
 80085e6:	4622      	mov	r2, r4
 80085e8:	210a      	movs	r1, #10
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 f8d2 	bl	8008794 <__swbuf_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d0d7      	beq.n	80085a4 <_puts_r+0x38>
 80085f4:	250a      	movs	r5, #10
 80085f6:	e7d7      	b.n	80085a8 <_puts_r+0x3c>
 80085f8:	4622      	mov	r2, r4
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 f8ca 	bl	8008794 <__swbuf_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d1e7      	bne.n	80085d4 <_puts_r+0x68>
 8008604:	e7ce      	b.n	80085a4 <_puts_r+0x38>
 8008606:	3e01      	subs	r6, #1
 8008608:	e7e4      	b.n	80085d4 <_puts_r+0x68>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	6022      	str	r2, [r4, #0]
 8008610:	220a      	movs	r2, #10
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	e7ee      	b.n	80085f4 <_puts_r+0x88>
	...

08008618 <puts>:
 8008618:	4b02      	ldr	r3, [pc, #8]	@ (8008624 <puts+0xc>)
 800861a:	4601      	mov	r1, r0
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f7ff bfa5 	b.w	800856c <_puts_r>
 8008622:	bf00      	nop
 8008624:	2000001c 	.word	0x2000001c

08008628 <sniprintf>:
 8008628:	b40c      	push	{r2, r3}
 800862a:	b530      	push	{r4, r5, lr}
 800862c:	4b18      	ldr	r3, [pc, #96]	@ (8008690 <sniprintf+0x68>)
 800862e:	1e0c      	subs	r4, r1, #0
 8008630:	681d      	ldr	r5, [r3, #0]
 8008632:	b09d      	sub	sp, #116	@ 0x74
 8008634:	da08      	bge.n	8008648 <sniprintf+0x20>
 8008636:	238b      	movs	r3, #139	@ 0x8b
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	b01d      	add	sp, #116	@ 0x74
 8008640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008644:	b002      	add	sp, #8
 8008646:	4770      	bx	lr
 8008648:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800864c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008656:	bf14      	ite	ne
 8008658:	f104 33ff 	addne.w	r3, r4, #4294967295
 800865c:	4623      	moveq	r3, r4
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008666:	9002      	str	r0, [sp, #8]
 8008668:	9006      	str	r0, [sp, #24]
 800866a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800866e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008670:	ab21      	add	r3, sp, #132	@ 0x84
 8008672:	a902      	add	r1, sp, #8
 8008674:	4628      	mov	r0, r5
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	f000 fa60 	bl	8008b3c <_svfiprintf_r>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	bfbc      	itt	lt
 8008680:	238b      	movlt	r3, #139	@ 0x8b
 8008682:	602b      	strlt	r3, [r5, #0]
 8008684:	2c00      	cmp	r4, #0
 8008686:	d0da      	beq.n	800863e <sniprintf+0x16>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e7d6      	b.n	800863e <sniprintf+0x16>
 8008690:	2000001c 	.word	0x2000001c

08008694 <__sread>:
 8008694:	b510      	push	{r4, lr}
 8008696:	460c      	mov	r4, r1
 8008698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869c:	f000 f938 	bl	8008910 <_read_r>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	bfab      	itete	ge
 80086a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086a6:	89a3      	ldrhlt	r3, [r4, #12]
 80086a8:	181b      	addge	r3, r3, r0
 80086aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086ae:	bfac      	ite	ge
 80086b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086b2:	81a3      	strhlt	r3, [r4, #12]
 80086b4:	bd10      	pop	{r4, pc}

080086b6 <__swrite>:
 80086b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	461f      	mov	r7, r3
 80086bc:	898b      	ldrh	r3, [r1, #12]
 80086be:	05db      	lsls	r3, r3, #23
 80086c0:	4605      	mov	r5, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	4616      	mov	r6, r2
 80086c6:	d505      	bpl.n	80086d4 <__swrite+0x1e>
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	2302      	movs	r3, #2
 80086ce:	2200      	movs	r2, #0
 80086d0:	f000 f90c 	bl	80088ec <_lseek_r>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	4628      	mov	r0, r5
 80086e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ea:	f000 b933 	b.w	8008954 <_write_r>

080086ee <__sseek>:
 80086ee:	b510      	push	{r4, lr}
 80086f0:	460c      	mov	r4, r1
 80086f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f6:	f000 f8f9 	bl	80088ec <_lseek_r>
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	bf15      	itete	ne
 8008700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800870a:	81a3      	strheq	r3, [r4, #12]
 800870c:	bf18      	it	ne
 800870e:	81a3      	strhne	r3, [r4, #12]
 8008710:	bd10      	pop	{r4, pc}

08008712 <__sclose>:
 8008712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008716:	f000 b8d9 	b.w	80088cc <_close_r>

0800871a <_vsniprintf_r>:
 800871a:	b530      	push	{r4, r5, lr}
 800871c:	4614      	mov	r4, r2
 800871e:	2c00      	cmp	r4, #0
 8008720:	b09b      	sub	sp, #108	@ 0x6c
 8008722:	4605      	mov	r5, r0
 8008724:	461a      	mov	r2, r3
 8008726:	da05      	bge.n	8008734 <_vsniprintf_r+0x1a>
 8008728:	238b      	movs	r3, #139	@ 0x8b
 800872a:	6003      	str	r3, [r0, #0]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b01b      	add	sp, #108	@ 0x6c
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008738:	f8ad 300c 	strh.w	r3, [sp, #12]
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	9319      	str	r3, [sp, #100]	@ 0x64
 8008742:	bf14      	ite	ne
 8008744:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008748:	4623      	moveq	r3, r4
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008752:	9100      	str	r1, [sp, #0]
 8008754:	9104      	str	r1, [sp, #16]
 8008756:	f8ad 300e 	strh.w	r3, [sp, #14]
 800875a:	4669      	mov	r1, sp
 800875c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800875e:	f000 f9ed 	bl	8008b3c <_svfiprintf_r>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	bfbc      	itt	lt
 8008766:	238b      	movlt	r3, #139	@ 0x8b
 8008768:	602b      	strlt	r3, [r5, #0]
 800876a:	2c00      	cmp	r4, #0
 800876c:	d0e0      	beq.n	8008730 <_vsniprintf_r+0x16>
 800876e:	9b00      	ldr	r3, [sp, #0]
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e7dc      	b.n	8008730 <_vsniprintf_r+0x16>
	...

08008778 <vsniprintf>:
 8008778:	b507      	push	{r0, r1, r2, lr}
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	4613      	mov	r3, r2
 800877e:	460a      	mov	r2, r1
 8008780:	4601      	mov	r1, r0
 8008782:	4803      	ldr	r0, [pc, #12]	@ (8008790 <vsniprintf+0x18>)
 8008784:	6800      	ldr	r0, [r0, #0]
 8008786:	f7ff ffc8 	bl	800871a <_vsniprintf_r>
 800878a:	b003      	add	sp, #12
 800878c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008790:	2000001c 	.word	0x2000001c

08008794 <__swbuf_r>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	460e      	mov	r6, r1
 8008798:	4614      	mov	r4, r2
 800879a:	4605      	mov	r5, r0
 800879c:	b118      	cbz	r0, 80087a6 <__swbuf_r+0x12>
 800879e:	6a03      	ldr	r3, [r0, #32]
 80087a0:	b90b      	cbnz	r3, 80087a6 <__swbuf_r+0x12>
 80087a2:	f7ff fead 	bl	8008500 <__sinit>
 80087a6:	69a3      	ldr	r3, [r4, #24]
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	071a      	lsls	r2, r3, #28
 80087ae:	d501      	bpl.n	80087b4 <__swbuf_r+0x20>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	b943      	cbnz	r3, 80087c6 <__swbuf_r+0x32>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 f82a 	bl	8008810 <__swsetup_r>
 80087bc:	b118      	cbz	r0, 80087c6 <__swbuf_r+0x32>
 80087be:	f04f 37ff 	mov.w	r7, #4294967295
 80087c2:	4638      	mov	r0, r7
 80087c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	1a98      	subs	r0, r3, r2
 80087cc:	6963      	ldr	r3, [r4, #20]
 80087ce:	b2f6      	uxtb	r6, r6
 80087d0:	4283      	cmp	r3, r0
 80087d2:	4637      	mov	r7, r6
 80087d4:	dc05      	bgt.n	80087e2 <__swbuf_r+0x4e>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 fcbb 	bl	8009154 <_fflush_r>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1ed      	bne.n	80087be <__swbuf_r+0x2a>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	701e      	strb	r6, [r3, #0]
 80087f0:	6962      	ldr	r2, [r4, #20]
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d004      	beq.n	8008802 <__swbuf_r+0x6e>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d5e1      	bpl.n	80087c2 <__swbuf_r+0x2e>
 80087fe:	2e0a      	cmp	r6, #10
 8008800:	d1df      	bne.n	80087c2 <__swbuf_r+0x2e>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f000 fca5 	bl	8009154 <_fflush_r>
 800880a:	2800      	cmp	r0, #0
 800880c:	d0d9      	beq.n	80087c2 <__swbuf_r+0x2e>
 800880e:	e7d6      	b.n	80087be <__swbuf_r+0x2a>

08008810 <__swsetup_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <__swsetup_r+0xa8>)
 8008814:	4605      	mov	r5, r0
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	460c      	mov	r4, r1
 800881a:	b118      	cbz	r0, 8008824 <__swsetup_r+0x14>
 800881c:	6a03      	ldr	r3, [r0, #32]
 800881e:	b90b      	cbnz	r3, 8008824 <__swsetup_r+0x14>
 8008820:	f7ff fe6e 	bl	8008500 <__sinit>
 8008824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008828:	0719      	lsls	r1, r3, #28
 800882a:	d422      	bmi.n	8008872 <__swsetup_r+0x62>
 800882c:	06da      	lsls	r2, r3, #27
 800882e:	d407      	bmi.n	8008840 <__swsetup_r+0x30>
 8008830:	2209      	movs	r2, #9
 8008832:	602a      	str	r2, [r5, #0]
 8008834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	e033      	b.n	80088a8 <__swsetup_r+0x98>
 8008840:	0758      	lsls	r0, r3, #29
 8008842:	d512      	bpl.n	800886a <__swsetup_r+0x5a>
 8008844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008846:	b141      	cbz	r1, 800885a <__swsetup_r+0x4a>
 8008848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800884c:	4299      	cmp	r1, r3
 800884e:	d002      	beq.n	8008856 <__swsetup_r+0x46>
 8008850:	4628      	mov	r0, r5
 8008852:	f000 f8cd 	bl	80089f0 <_free_r>
 8008856:	2300      	movs	r3, #0
 8008858:	6363      	str	r3, [r4, #52]	@ 0x34
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	2300      	movs	r3, #0
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	b94b      	cbnz	r3, 800888a <__swsetup_r+0x7a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008880:	d003      	beq.n	800888a <__swsetup_r+0x7a>
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 fcb3 	bl	80091f0 <__smakebuf_r>
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	f013 0201 	ands.w	r2, r3, #1
 8008892:	d00a      	beq.n	80088aa <__swsetup_r+0x9a>
 8008894:	2200      	movs	r2, #0
 8008896:	60a2      	str	r2, [r4, #8]
 8008898:	6962      	ldr	r2, [r4, #20]
 800889a:	4252      	negs	r2, r2
 800889c:	61a2      	str	r2, [r4, #24]
 800889e:	6922      	ldr	r2, [r4, #16]
 80088a0:	b942      	cbnz	r2, 80088b4 <__swsetup_r+0xa4>
 80088a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a6:	d1c5      	bne.n	8008834 <__swsetup_r+0x24>
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	0799      	lsls	r1, r3, #30
 80088ac:	bf58      	it	pl
 80088ae:	6962      	ldrpl	r2, [r4, #20]
 80088b0:	60a2      	str	r2, [r4, #8]
 80088b2:	e7f4      	b.n	800889e <__swsetup_r+0x8e>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7f7      	b.n	80088a8 <__swsetup_r+0x98>
 80088b8:	2000001c 	.word	0x2000001c

080088bc <memset>:
 80088bc:	4402      	add	r2, r0
 80088be:	4603      	mov	r3, r0
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d100      	bne.n	80088c6 <memset+0xa>
 80088c4:	4770      	bx	lr
 80088c6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ca:	e7f9      	b.n	80088c0 <memset+0x4>

080088cc <_close_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4d06      	ldr	r5, [pc, #24]	@ (80088e8 <_close_r+0x1c>)
 80088d0:	2300      	movs	r3, #0
 80088d2:	4604      	mov	r4, r0
 80088d4:	4608      	mov	r0, r1
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	f7f9 f957 	bl	8001b8a <_close>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_close_r+0x1a>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_close_r+0x1a>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	20000ad4 	.word	0x20000ad4

080088ec <_lseek_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d07      	ldr	r5, [pc, #28]	@ (800890c <_lseek_r+0x20>)
 80088f0:	4604      	mov	r4, r0
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7f9 f96c 	bl	8001bd8 <_lseek>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_lseek_r+0x1e>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_lseek_r+0x1e>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20000ad4 	.word	0x20000ad4

08008910 <_read_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	@ (8008930 <_read_r+0x20>)
 8008914:	4604      	mov	r4, r0
 8008916:	4608      	mov	r0, r1
 8008918:	4611      	mov	r1, r2
 800891a:	2200      	movs	r2, #0
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f9 f916 	bl	8001b50 <_read>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_read_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_read_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	20000ad4 	.word	0x20000ad4

08008934 <_sbrk_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	@ (8008950 <_sbrk_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f9 f958 	bl	8001bf4 <_sbrk>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_sbrk_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_sbrk_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20000ad4 	.word	0x20000ad4

08008954 <_write_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	@ (8008974 <_write_r+0x20>)
 8008958:	4604      	mov	r4, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	602a      	str	r2, [r5, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7f8 ff28 	bl	80017b8 <_write>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_write_r+0x1e>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_write_r+0x1e>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20000ad4 	.word	0x20000ad4

08008978 <__errno>:
 8008978:	4b01      	ldr	r3, [pc, #4]	@ (8008980 <__errno+0x8>)
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	2000001c 	.word	0x2000001c

08008984 <__libc_init_array>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4d0d      	ldr	r5, [pc, #52]	@ (80089bc <__libc_init_array+0x38>)
 8008988:	4c0d      	ldr	r4, [pc, #52]	@ (80089c0 <__libc_init_array+0x3c>)
 800898a:	1b64      	subs	r4, r4, r5
 800898c:	10a4      	asrs	r4, r4, #2
 800898e:	2600      	movs	r6, #0
 8008990:	42a6      	cmp	r6, r4
 8008992:	d109      	bne.n	80089a8 <__libc_init_array+0x24>
 8008994:	4d0b      	ldr	r5, [pc, #44]	@ (80089c4 <__libc_init_array+0x40>)
 8008996:	4c0c      	ldr	r4, [pc, #48]	@ (80089c8 <__libc_init_array+0x44>)
 8008998:	f000 fcd8 	bl	800934c <_init>
 800899c:	1b64      	subs	r4, r4, r5
 800899e:	10a4      	asrs	r4, r4, #2
 80089a0:	2600      	movs	r6, #0
 80089a2:	42a6      	cmp	r6, r4
 80089a4:	d105      	bne.n	80089b2 <__libc_init_array+0x2e>
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ac:	4798      	blx	r3
 80089ae:	3601      	adds	r6, #1
 80089b0:	e7ee      	b.n	8008990 <__libc_init_array+0xc>
 80089b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b6:	4798      	blx	r3
 80089b8:	3601      	adds	r6, #1
 80089ba:	e7f2      	b.n	80089a2 <__libc_init_array+0x1e>
 80089bc:	080097ec 	.word	0x080097ec
 80089c0:	080097ec 	.word	0x080097ec
 80089c4:	080097ec 	.word	0x080097ec
 80089c8:	080097f0 	.word	0x080097f0

080089cc <__retarget_lock_init_recursive>:
 80089cc:	4770      	bx	lr

080089ce <__retarget_lock_acquire_recursive>:
 80089ce:	4770      	bx	lr

080089d0 <__retarget_lock_release_recursive>:
 80089d0:	4770      	bx	lr

080089d2 <memcpy>:
 80089d2:	440a      	add	r2, r1
 80089d4:	4291      	cmp	r1, r2
 80089d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80089da:	d100      	bne.n	80089de <memcpy+0xc>
 80089dc:	4770      	bx	lr
 80089de:	b510      	push	{r4, lr}
 80089e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e8:	4291      	cmp	r1, r2
 80089ea:	d1f9      	bne.n	80089e0 <memcpy+0xe>
 80089ec:	bd10      	pop	{r4, pc}
	...

080089f0 <_free_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4605      	mov	r5, r0
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d041      	beq.n	8008a7c <_free_r+0x8c>
 80089f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089fc:	1f0c      	subs	r4, r1, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfb8      	it	lt
 8008a02:	18e4      	addlt	r4, r4, r3
 8008a04:	f7ff fce4 	bl	80083d0 <__malloc_lock>
 8008a08:	4a1d      	ldr	r2, [pc, #116]	@ (8008a80 <_free_r+0x90>)
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	b933      	cbnz	r3, 8008a1c <_free_r+0x2c>
 8008a0e:	6063      	str	r3, [r4, #4]
 8008a10:	6014      	str	r4, [r2, #0]
 8008a12:	4628      	mov	r0, r5
 8008a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a18:	f7ff bce0 	b.w	80083dc <__malloc_unlock>
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	d908      	bls.n	8008a32 <_free_r+0x42>
 8008a20:	6820      	ldr	r0, [r4, #0]
 8008a22:	1821      	adds	r1, r4, r0
 8008a24:	428b      	cmp	r3, r1
 8008a26:	bf01      	itttt	eq
 8008a28:	6819      	ldreq	r1, [r3, #0]
 8008a2a:	685b      	ldreq	r3, [r3, #4]
 8008a2c:	1809      	addeq	r1, r1, r0
 8008a2e:	6021      	streq	r1, [r4, #0]
 8008a30:	e7ed      	b.n	8008a0e <_free_r+0x1e>
 8008a32:	461a      	mov	r2, r3
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	b10b      	cbz	r3, 8008a3c <_free_r+0x4c>
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	d9fa      	bls.n	8008a32 <_free_r+0x42>
 8008a3c:	6811      	ldr	r1, [r2, #0]
 8008a3e:	1850      	adds	r0, r2, r1
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d10b      	bne.n	8008a5c <_free_r+0x6c>
 8008a44:	6820      	ldr	r0, [r4, #0]
 8008a46:	4401      	add	r1, r0
 8008a48:	1850      	adds	r0, r2, r1
 8008a4a:	4283      	cmp	r3, r0
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	d1e0      	bne.n	8008a12 <_free_r+0x22>
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	6053      	str	r3, [r2, #4]
 8008a56:	4408      	add	r0, r1
 8008a58:	6010      	str	r0, [r2, #0]
 8008a5a:	e7da      	b.n	8008a12 <_free_r+0x22>
 8008a5c:	d902      	bls.n	8008a64 <_free_r+0x74>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	602b      	str	r3, [r5, #0]
 8008a62:	e7d6      	b.n	8008a12 <_free_r+0x22>
 8008a64:	6820      	ldr	r0, [r4, #0]
 8008a66:	1821      	adds	r1, r4, r0
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf04      	itt	eq
 8008a6c:	6819      	ldreq	r1, [r3, #0]
 8008a6e:	685b      	ldreq	r3, [r3, #4]
 8008a70:	6063      	str	r3, [r4, #4]
 8008a72:	bf04      	itt	eq
 8008a74:	1809      	addeq	r1, r1, r0
 8008a76:	6021      	streq	r1, [r4, #0]
 8008a78:	6054      	str	r4, [r2, #4]
 8008a7a:	e7ca      	b.n	8008a12 <_free_r+0x22>
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000994 	.word	0x20000994

08008a84 <__ssputs_r>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	688e      	ldr	r6, [r1, #8]
 8008a8a:	461f      	mov	r7, r3
 8008a8c:	42be      	cmp	r6, r7
 8008a8e:	680b      	ldr	r3, [r1, #0]
 8008a90:	4682      	mov	sl, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	4690      	mov	r8, r2
 8008a96:	d82d      	bhi.n	8008af4 <__ssputs_r+0x70>
 8008a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008aa0:	d026      	beq.n	8008af0 <__ssputs_r+0x6c>
 8008aa2:	6965      	ldr	r5, [r4, #20]
 8008aa4:	6909      	ldr	r1, [r1, #16]
 8008aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008aaa:	eba3 0901 	sub.w	r9, r3, r1
 8008aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ab2:	1c7b      	adds	r3, r7, #1
 8008ab4:	444b      	add	r3, r9
 8008ab6:	106d      	asrs	r5, r5, #1
 8008ab8:	429d      	cmp	r5, r3
 8008aba:	bf38      	it	cc
 8008abc:	461d      	movcc	r5, r3
 8008abe:	0553      	lsls	r3, r2, #21
 8008ac0:	d527      	bpl.n	8008b12 <__ssputs_r+0x8e>
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	f7ff fc04 	bl	80082d0 <_malloc_r>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	b360      	cbz	r0, 8008b26 <__ssputs_r+0xa2>
 8008acc:	6921      	ldr	r1, [r4, #16]
 8008ace:	464a      	mov	r2, r9
 8008ad0:	f7ff ff7f 	bl	80089d2 <memcpy>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	6126      	str	r6, [r4, #16]
 8008ae2:	6165      	str	r5, [r4, #20]
 8008ae4:	444e      	add	r6, r9
 8008ae6:	eba5 0509 	sub.w	r5, r5, r9
 8008aea:	6026      	str	r6, [r4, #0]
 8008aec:	60a5      	str	r5, [r4, #8]
 8008aee:	463e      	mov	r6, r7
 8008af0:	42be      	cmp	r6, r7
 8008af2:	d900      	bls.n	8008af6 <__ssputs_r+0x72>
 8008af4:	463e      	mov	r6, r7
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	4632      	mov	r2, r6
 8008afa:	4641      	mov	r1, r8
 8008afc:	f000 fbb4 	bl	8009268 <memmove>
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	1b9b      	subs	r3, r3, r6
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	4433      	add	r3, r6
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b12:	462a      	mov	r2, r5
 8008b14:	f000 fbe4 	bl	80092e0 <_realloc_r>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d1e0      	bne.n	8008ae0 <__ssputs_r+0x5c>
 8008b1e:	6921      	ldr	r1, [r4, #16]
 8008b20:	4650      	mov	r0, sl
 8008b22:	f7ff ff65 	bl	80089f0 <_free_r>
 8008b26:	230c      	movs	r3, #12
 8008b28:	f8ca 3000 	str.w	r3, [sl]
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e7e9      	b.n	8008b0e <__ssputs_r+0x8a>
	...

08008b3c <_svfiprintf_r>:
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	4698      	mov	r8, r3
 8008b42:	898b      	ldrh	r3, [r1, #12]
 8008b44:	061b      	lsls	r3, r3, #24
 8008b46:	b09d      	sub	sp, #116	@ 0x74
 8008b48:	4607      	mov	r7, r0
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	d510      	bpl.n	8008b72 <_svfiprintf_r+0x36>
 8008b50:	690b      	ldr	r3, [r1, #16]
 8008b52:	b973      	cbnz	r3, 8008b72 <_svfiprintf_r+0x36>
 8008b54:	2140      	movs	r1, #64	@ 0x40
 8008b56:	f7ff fbbb 	bl	80082d0 <_malloc_r>
 8008b5a:	6028      	str	r0, [r5, #0]
 8008b5c:	6128      	str	r0, [r5, #16]
 8008b5e:	b930      	cbnz	r0, 8008b6e <_svfiprintf_r+0x32>
 8008b60:	230c      	movs	r3, #12
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	b01d      	add	sp, #116	@ 0x74
 8008b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6e:	2340      	movs	r3, #64	@ 0x40
 8008b70:	616b      	str	r3, [r5, #20]
 8008b72:	2300      	movs	r3, #0
 8008b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b76:	2320      	movs	r3, #32
 8008b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b80:	2330      	movs	r3, #48	@ 0x30
 8008b82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d20 <_svfiprintf_r+0x1e4>
 8008b86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b8a:	f04f 0901 	mov.w	r9, #1
 8008b8e:	4623      	mov	r3, r4
 8008b90:	469a      	mov	sl, r3
 8008b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b96:	b10a      	cbz	r2, 8008b9c <_svfiprintf_r+0x60>
 8008b98:	2a25      	cmp	r2, #37	@ 0x25
 8008b9a:	d1f9      	bne.n	8008b90 <_svfiprintf_r+0x54>
 8008b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba0:	d00b      	beq.n	8008bba <_svfiprintf_r+0x7e>
 8008ba2:	465b      	mov	r3, fp
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff ff6b 	bl	8008a84 <__ssputs_r>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f000 80a7 	beq.w	8008d02 <_svfiprintf_r+0x1c6>
 8008bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bb6:	445a      	add	r2, fp
 8008bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bba:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f000 809f 	beq.w	8008d02 <_svfiprintf_r+0x1c6>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bce:	f10a 0a01 	add.w	sl, sl, #1
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9307      	str	r3, [sp, #28]
 8008bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bdc:	4654      	mov	r4, sl
 8008bde:	2205      	movs	r2, #5
 8008be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be4:	484e      	ldr	r0, [pc, #312]	@ (8008d20 <_svfiprintf_r+0x1e4>)
 8008be6:	f7f7 fafb 	bl	80001e0 <memchr>
 8008bea:	9a04      	ldr	r2, [sp, #16]
 8008bec:	b9d8      	cbnz	r0, 8008c26 <_svfiprintf_r+0xea>
 8008bee:	06d0      	lsls	r0, r2, #27
 8008bf0:	bf44      	itt	mi
 8008bf2:	2320      	movmi	r3, #32
 8008bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bf8:	0711      	lsls	r1, r2, #28
 8008bfa:	bf44      	itt	mi
 8008bfc:	232b      	movmi	r3, #43	@ 0x2b
 8008bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c02:	f89a 3000 	ldrb.w	r3, [sl]
 8008c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c08:	d015      	beq.n	8008c36 <_svfiprintf_r+0xfa>
 8008c0a:	9a07      	ldr	r2, [sp, #28]
 8008c0c:	4654      	mov	r4, sl
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f04f 0c0a 	mov.w	ip, #10
 8008c14:	4621      	mov	r1, r4
 8008c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c1a:	3b30      	subs	r3, #48	@ 0x30
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d94b      	bls.n	8008cb8 <_svfiprintf_r+0x17c>
 8008c20:	b1b0      	cbz	r0, 8008c50 <_svfiprintf_r+0x114>
 8008c22:	9207      	str	r2, [sp, #28]
 8008c24:	e014      	b.n	8008c50 <_svfiprintf_r+0x114>
 8008c26:	eba0 0308 	sub.w	r3, r0, r8
 8008c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	46a2      	mov	sl, r4
 8008c34:	e7d2      	b.n	8008bdc <_svfiprintf_r+0xa0>
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	1d19      	adds	r1, r3, #4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	9103      	str	r1, [sp, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bfbb      	ittet	lt
 8008c42:	425b      	neglt	r3, r3
 8008c44:	f042 0202 	orrlt.w	r2, r2, #2
 8008c48:	9307      	strge	r3, [sp, #28]
 8008c4a:	9307      	strlt	r3, [sp, #28]
 8008c4c:	bfb8      	it	lt
 8008c4e:	9204      	strlt	r2, [sp, #16]
 8008c50:	7823      	ldrb	r3, [r4, #0]
 8008c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c54:	d10a      	bne.n	8008c6c <_svfiprintf_r+0x130>
 8008c56:	7863      	ldrb	r3, [r4, #1]
 8008c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c5a:	d132      	bne.n	8008cc2 <_svfiprintf_r+0x186>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	1d1a      	adds	r2, r3, #4
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	9203      	str	r2, [sp, #12]
 8008c64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c68:	3402      	adds	r4, #2
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d30 <_svfiprintf_r+0x1f4>
 8008c70:	7821      	ldrb	r1, [r4, #0]
 8008c72:	2203      	movs	r2, #3
 8008c74:	4650      	mov	r0, sl
 8008c76:	f7f7 fab3 	bl	80001e0 <memchr>
 8008c7a:	b138      	cbz	r0, 8008c8c <_svfiprintf_r+0x150>
 8008c7c:	9b04      	ldr	r3, [sp, #16]
 8008c7e:	eba0 000a 	sub.w	r0, r0, sl
 8008c82:	2240      	movs	r2, #64	@ 0x40
 8008c84:	4082      	lsls	r2, r0
 8008c86:	4313      	orrs	r3, r2
 8008c88:	3401      	adds	r4, #1
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	4824      	ldr	r0, [pc, #144]	@ (8008d24 <_svfiprintf_r+0x1e8>)
 8008c92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c96:	2206      	movs	r2, #6
 8008c98:	f7f7 faa2 	bl	80001e0 <memchr>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d036      	beq.n	8008d0e <_svfiprintf_r+0x1d2>
 8008ca0:	4b21      	ldr	r3, [pc, #132]	@ (8008d28 <_svfiprintf_r+0x1ec>)
 8008ca2:	bb1b      	cbnz	r3, 8008cec <_svfiprintf_r+0x1b0>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	3307      	adds	r3, #7
 8008ca8:	f023 0307 	bic.w	r3, r3, #7
 8008cac:	3308      	adds	r3, #8
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb2:	4433      	add	r3, r6
 8008cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb6:	e76a      	b.n	8008b8e <_svfiprintf_r+0x52>
 8008cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	e7a8      	b.n	8008c14 <_svfiprintf_r+0xd8>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f04f 0c0a 	mov.w	ip, #10
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd4:	3a30      	subs	r2, #48	@ 0x30
 8008cd6:	2a09      	cmp	r2, #9
 8008cd8:	d903      	bls.n	8008ce2 <_svfiprintf_r+0x1a6>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c6      	beq.n	8008c6c <_svfiprintf_r+0x130>
 8008cde:	9105      	str	r1, [sp, #20]
 8008ce0:	e7c4      	b.n	8008c6c <_svfiprintf_r+0x130>
 8008ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7f0      	b.n	8008cce <_svfiprintf_r+0x192>
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <_svfiprintf_r+0x1f0>)
 8008cf4:	a904      	add	r1, sp, #16
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f3af 8000 	nop.w
 8008cfc:	1c42      	adds	r2, r0, #1
 8008cfe:	4606      	mov	r6, r0
 8008d00:	d1d6      	bne.n	8008cb0 <_svfiprintf_r+0x174>
 8008d02:	89ab      	ldrh	r3, [r5, #12]
 8008d04:	065b      	lsls	r3, r3, #25
 8008d06:	f53f af2d 	bmi.w	8008b64 <_svfiprintf_r+0x28>
 8008d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d0c:	e72c      	b.n	8008b68 <_svfiprintf_r+0x2c>
 8008d0e:	ab03      	add	r3, sp, #12
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	462a      	mov	r2, r5
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <_svfiprintf_r+0x1f0>)
 8008d16:	a904      	add	r1, sp, #16
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f000 f879 	bl	8008e10 <_printf_i>
 8008d1e:	e7ed      	b.n	8008cfc <_svfiprintf_r+0x1c0>
 8008d20:	080097b0 	.word	0x080097b0
 8008d24:	080097ba 	.word	0x080097ba
 8008d28:	00000000 	.word	0x00000000
 8008d2c:	08008a85 	.word	0x08008a85
 8008d30:	080097b6 	.word	0x080097b6

08008d34 <_printf_common>:
 8008d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	4616      	mov	r6, r2
 8008d3a:	4698      	mov	r8, r3
 8008d3c:	688a      	ldr	r2, [r1, #8]
 8008d3e:	690b      	ldr	r3, [r1, #16]
 8008d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	bfb8      	it	lt
 8008d48:	4613      	movlt	r3, r2
 8008d4a:	6033      	str	r3, [r6, #0]
 8008d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d50:	4607      	mov	r7, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b10a      	cbz	r2, 8008d5a <_printf_common+0x26>
 8008d56:	3301      	adds	r3, #1
 8008d58:	6033      	str	r3, [r6, #0]
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	0699      	lsls	r1, r3, #26
 8008d5e:	bf42      	ittt	mi
 8008d60:	6833      	ldrmi	r3, [r6, #0]
 8008d62:	3302      	addmi	r3, #2
 8008d64:	6033      	strmi	r3, [r6, #0]
 8008d66:	6825      	ldr	r5, [r4, #0]
 8008d68:	f015 0506 	ands.w	r5, r5, #6
 8008d6c:	d106      	bne.n	8008d7c <_printf_common+0x48>
 8008d6e:	f104 0a19 	add.w	sl, r4, #25
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	6832      	ldr	r2, [r6, #0]
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dc26      	bgt.n	8008dca <_printf_common+0x96>
 8008d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	3b00      	subs	r3, #0
 8008d84:	bf18      	it	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	0692      	lsls	r2, r2, #26
 8008d8a:	d42b      	bmi.n	8008de4 <_printf_common+0xb0>
 8008d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d90:	4641      	mov	r1, r8
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c8      	blx	r9
 8008d96:	3001      	adds	r0, #1
 8008d98:	d01e      	beq.n	8008dd8 <_printf_common+0xa4>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	f003 0306 	and.w	r3, r3, #6
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	bf02      	ittt	eq
 8008da6:	68e5      	ldreq	r5, [r4, #12]
 8008da8:	6833      	ldreq	r3, [r6, #0]
 8008daa:	1aed      	subeq	r5, r5, r3
 8008dac:	68a3      	ldr	r3, [r4, #8]
 8008dae:	bf0c      	ite	eq
 8008db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db4:	2500      	movne	r5, #0
 8008db6:	4293      	cmp	r3, r2
 8008db8:	bfc4      	itt	gt
 8008dba:	1a9b      	subgt	r3, r3, r2
 8008dbc:	18ed      	addgt	r5, r5, r3
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	341a      	adds	r4, #26
 8008dc2:	42b5      	cmp	r5, r6
 8008dc4:	d11a      	bne.n	8008dfc <_printf_common+0xc8>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e008      	b.n	8008ddc <_printf_common+0xa8>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4652      	mov	r2, sl
 8008dce:	4641      	mov	r1, r8
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	47c8      	blx	r9
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d103      	bne.n	8008de0 <_printf_common+0xac>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de0:	3501      	adds	r5, #1
 8008de2:	e7c6      	b.n	8008d72 <_printf_common+0x3e>
 8008de4:	18e1      	adds	r1, r4, r3
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	2030      	movs	r0, #48	@ 0x30
 8008dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dee:	4422      	add	r2, r4
 8008df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008df8:	3302      	adds	r3, #2
 8008dfa:	e7c7      	b.n	8008d8c <_printf_common+0x58>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4622      	mov	r2, r4
 8008e00:	4641      	mov	r1, r8
 8008e02:	4638      	mov	r0, r7
 8008e04:	47c8      	blx	r9
 8008e06:	3001      	adds	r0, #1
 8008e08:	d0e6      	beq.n	8008dd8 <_printf_common+0xa4>
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	e7d9      	b.n	8008dc2 <_printf_common+0x8e>
	...

08008e10 <_printf_i>:
 8008e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	7e0f      	ldrb	r7, [r1, #24]
 8008e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e18:	2f78      	cmp	r7, #120	@ 0x78
 8008e1a:	4691      	mov	r9, r2
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	469a      	mov	sl, r3
 8008e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e26:	d807      	bhi.n	8008e38 <_printf_i+0x28>
 8008e28:	2f62      	cmp	r7, #98	@ 0x62
 8008e2a:	d80a      	bhi.n	8008e42 <_printf_i+0x32>
 8008e2c:	2f00      	cmp	r7, #0
 8008e2e:	f000 80d1 	beq.w	8008fd4 <_printf_i+0x1c4>
 8008e32:	2f58      	cmp	r7, #88	@ 0x58
 8008e34:	f000 80b8 	beq.w	8008fa8 <_printf_i+0x198>
 8008e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e40:	e03a      	b.n	8008eb8 <_printf_i+0xa8>
 8008e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e46:	2b15      	cmp	r3, #21
 8008e48:	d8f6      	bhi.n	8008e38 <_printf_i+0x28>
 8008e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e50 <_printf_i+0x40>)
 8008e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008ebd 	.word	0x08008ebd
 8008e58:	08008e39 	.word	0x08008e39
 8008e5c:	08008e39 	.word	0x08008e39
 8008e60:	08008e39 	.word	0x08008e39
 8008e64:	08008e39 	.word	0x08008e39
 8008e68:	08008ebd 	.word	0x08008ebd
 8008e6c:	08008e39 	.word	0x08008e39
 8008e70:	08008e39 	.word	0x08008e39
 8008e74:	08008e39 	.word	0x08008e39
 8008e78:	08008e39 	.word	0x08008e39
 8008e7c:	08008fbb 	.word	0x08008fbb
 8008e80:	08008ee7 	.word	0x08008ee7
 8008e84:	08008f75 	.word	0x08008f75
 8008e88:	08008e39 	.word	0x08008e39
 8008e8c:	08008e39 	.word	0x08008e39
 8008e90:	08008fdd 	.word	0x08008fdd
 8008e94:	08008e39 	.word	0x08008e39
 8008e98:	08008ee7 	.word	0x08008ee7
 8008e9c:	08008e39 	.word	0x08008e39
 8008ea0:	08008e39 	.word	0x08008e39
 8008ea4:	08008f7d 	.word	0x08008f7d
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	1d1a      	adds	r2, r3, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6032      	str	r2, [r6, #0]
 8008eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e09c      	b.n	8008ff6 <_printf_i+0x1e6>
 8008ebc:	6833      	ldr	r3, [r6, #0]
 8008ebe:	6820      	ldr	r0, [r4, #0]
 8008ec0:	1d19      	adds	r1, r3, #4
 8008ec2:	6031      	str	r1, [r6, #0]
 8008ec4:	0606      	lsls	r6, r0, #24
 8008ec6:	d501      	bpl.n	8008ecc <_printf_i+0xbc>
 8008ec8:	681d      	ldr	r5, [r3, #0]
 8008eca:	e003      	b.n	8008ed4 <_printf_i+0xc4>
 8008ecc:	0645      	lsls	r5, r0, #25
 8008ece:	d5fb      	bpl.n	8008ec8 <_printf_i+0xb8>
 8008ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	da03      	bge.n	8008ee0 <_printf_i+0xd0>
 8008ed8:	232d      	movs	r3, #45	@ 0x2d
 8008eda:	426d      	negs	r5, r5
 8008edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee0:	4858      	ldr	r0, [pc, #352]	@ (8009044 <_printf_i+0x234>)
 8008ee2:	230a      	movs	r3, #10
 8008ee4:	e011      	b.n	8008f0a <_printf_i+0xfa>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	6833      	ldr	r3, [r6, #0]
 8008eea:	0608      	lsls	r0, r1, #24
 8008eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ef0:	d402      	bmi.n	8008ef8 <_printf_i+0xe8>
 8008ef2:	0649      	lsls	r1, r1, #25
 8008ef4:	bf48      	it	mi
 8008ef6:	b2ad      	uxthmi	r5, r5
 8008ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008efa:	4852      	ldr	r0, [pc, #328]	@ (8009044 <_printf_i+0x234>)
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	bf14      	ite	ne
 8008f00:	230a      	movne	r3, #10
 8008f02:	2308      	moveq	r3, #8
 8008f04:	2100      	movs	r1, #0
 8008f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f0a:	6866      	ldr	r6, [r4, #4]
 8008f0c:	60a6      	str	r6, [r4, #8]
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	db05      	blt.n	8008f1e <_printf_i+0x10e>
 8008f12:	6821      	ldr	r1, [r4, #0]
 8008f14:	432e      	orrs	r6, r5
 8008f16:	f021 0104 	bic.w	r1, r1, #4
 8008f1a:	6021      	str	r1, [r4, #0]
 8008f1c:	d04b      	beq.n	8008fb6 <_printf_i+0x1a6>
 8008f1e:	4616      	mov	r6, r2
 8008f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f24:	fb03 5711 	mls	r7, r3, r1, r5
 8008f28:	5dc7      	ldrb	r7, [r0, r7]
 8008f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f2e:	462f      	mov	r7, r5
 8008f30:	42bb      	cmp	r3, r7
 8008f32:	460d      	mov	r5, r1
 8008f34:	d9f4      	bls.n	8008f20 <_printf_i+0x110>
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d10b      	bne.n	8008f52 <_printf_i+0x142>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	07df      	lsls	r7, r3, #31
 8008f3e:	d508      	bpl.n	8008f52 <_printf_i+0x142>
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	6861      	ldr	r1, [r4, #4]
 8008f44:	4299      	cmp	r1, r3
 8008f46:	bfde      	ittt	le
 8008f48:	2330      	movle	r3, #48	@ 0x30
 8008f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f52:	1b92      	subs	r2, r2, r6
 8008f54:	6122      	str	r2, [r4, #16]
 8008f56:	f8cd a000 	str.w	sl, [sp]
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	aa03      	add	r2, sp, #12
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4640      	mov	r0, r8
 8008f62:	f7ff fee7 	bl	8008d34 <_printf_common>
 8008f66:	3001      	adds	r0, #1
 8008f68:	d14a      	bne.n	8009000 <_printf_i+0x1f0>
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	b004      	add	sp, #16
 8008f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	f043 0320 	orr.w	r3, r3, #32
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	4832      	ldr	r0, [pc, #200]	@ (8009048 <_printf_i+0x238>)
 8008f7e:	2778      	movs	r7, #120	@ 0x78
 8008f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	6831      	ldr	r1, [r6, #0]
 8008f88:	061f      	lsls	r7, r3, #24
 8008f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f8e:	d402      	bmi.n	8008f96 <_printf_i+0x186>
 8008f90:	065f      	lsls	r7, r3, #25
 8008f92:	bf48      	it	mi
 8008f94:	b2ad      	uxthmi	r5, r5
 8008f96:	6031      	str	r1, [r6, #0]
 8008f98:	07d9      	lsls	r1, r3, #31
 8008f9a:	bf44      	itt	mi
 8008f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8008fa0:	6023      	strmi	r3, [r4, #0]
 8008fa2:	b11d      	cbz	r5, 8008fac <_printf_i+0x19c>
 8008fa4:	2310      	movs	r3, #16
 8008fa6:	e7ad      	b.n	8008f04 <_printf_i+0xf4>
 8008fa8:	4826      	ldr	r0, [pc, #152]	@ (8009044 <_printf_i+0x234>)
 8008faa:	e7e9      	b.n	8008f80 <_printf_i+0x170>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	f023 0320 	bic.w	r3, r3, #32
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	e7f6      	b.n	8008fa4 <_printf_i+0x194>
 8008fb6:	4616      	mov	r6, r2
 8008fb8:	e7bd      	b.n	8008f36 <_printf_i+0x126>
 8008fba:	6833      	ldr	r3, [r6, #0]
 8008fbc:	6825      	ldr	r5, [r4, #0]
 8008fbe:	6961      	ldr	r1, [r4, #20]
 8008fc0:	1d18      	adds	r0, r3, #4
 8008fc2:	6030      	str	r0, [r6, #0]
 8008fc4:	062e      	lsls	r6, r5, #24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	d501      	bpl.n	8008fce <_printf_i+0x1be>
 8008fca:	6019      	str	r1, [r3, #0]
 8008fcc:	e002      	b.n	8008fd4 <_printf_i+0x1c4>
 8008fce:	0668      	lsls	r0, r5, #25
 8008fd0:	d5fb      	bpl.n	8008fca <_printf_i+0x1ba>
 8008fd2:	8019      	strh	r1, [r3, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6123      	str	r3, [r4, #16]
 8008fd8:	4616      	mov	r6, r2
 8008fda:	e7bc      	b.n	8008f56 <_printf_i+0x146>
 8008fdc:	6833      	ldr	r3, [r6, #0]
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	6032      	str	r2, [r6, #0]
 8008fe2:	681e      	ldr	r6, [r3, #0]
 8008fe4:	6862      	ldr	r2, [r4, #4]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7f7 f8f9 	bl	80001e0 <memchr>
 8008fee:	b108      	cbz	r0, 8008ff4 <_printf_i+0x1e4>
 8008ff0:	1b80      	subs	r0, r0, r6
 8008ff2:	6060      	str	r0, [r4, #4]
 8008ff4:	6863      	ldr	r3, [r4, #4]
 8008ff6:	6123      	str	r3, [r4, #16]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ffe:	e7aa      	b.n	8008f56 <_printf_i+0x146>
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	4632      	mov	r2, r6
 8009004:	4649      	mov	r1, r9
 8009006:	4640      	mov	r0, r8
 8009008:	47d0      	blx	sl
 800900a:	3001      	adds	r0, #1
 800900c:	d0ad      	beq.n	8008f6a <_printf_i+0x15a>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	079b      	lsls	r3, r3, #30
 8009012:	d413      	bmi.n	800903c <_printf_i+0x22c>
 8009014:	68e0      	ldr	r0, [r4, #12]
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	4298      	cmp	r0, r3
 800901a:	bfb8      	it	lt
 800901c:	4618      	movlt	r0, r3
 800901e:	e7a6      	b.n	8008f6e <_printf_i+0x15e>
 8009020:	2301      	movs	r3, #1
 8009022:	4632      	mov	r2, r6
 8009024:	4649      	mov	r1, r9
 8009026:	4640      	mov	r0, r8
 8009028:	47d0      	blx	sl
 800902a:	3001      	adds	r0, #1
 800902c:	d09d      	beq.n	8008f6a <_printf_i+0x15a>
 800902e:	3501      	adds	r5, #1
 8009030:	68e3      	ldr	r3, [r4, #12]
 8009032:	9903      	ldr	r1, [sp, #12]
 8009034:	1a5b      	subs	r3, r3, r1
 8009036:	42ab      	cmp	r3, r5
 8009038:	dcf2      	bgt.n	8009020 <_printf_i+0x210>
 800903a:	e7eb      	b.n	8009014 <_printf_i+0x204>
 800903c:	2500      	movs	r5, #0
 800903e:	f104 0619 	add.w	r6, r4, #25
 8009042:	e7f5      	b.n	8009030 <_printf_i+0x220>
 8009044:	080097c1 	.word	0x080097c1
 8009048:	080097d2 	.word	0x080097d2

0800904c <__sflush_r>:
 800904c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	0716      	lsls	r6, r2, #28
 8009056:	4605      	mov	r5, r0
 8009058:	460c      	mov	r4, r1
 800905a:	d454      	bmi.n	8009106 <__sflush_r+0xba>
 800905c:	684b      	ldr	r3, [r1, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	dc02      	bgt.n	8009068 <__sflush_r+0x1c>
 8009062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd48      	ble.n	80090fa <__sflush_r+0xae>
 8009068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800906a:	2e00      	cmp	r6, #0
 800906c:	d045      	beq.n	80090fa <__sflush_r+0xae>
 800906e:	2300      	movs	r3, #0
 8009070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009074:	682f      	ldr	r7, [r5, #0]
 8009076:	6a21      	ldr	r1, [r4, #32]
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	d030      	beq.n	80090de <__sflush_r+0x92>
 800907c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	0759      	lsls	r1, r3, #29
 8009082:	d505      	bpl.n	8009090 <__sflush_r+0x44>
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	1ad2      	subs	r2, r2, r3
 8009088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800908a:	b10b      	cbz	r3, 8009090 <__sflush_r+0x44>
 800908c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009094:	6a21      	ldr	r1, [r4, #32]
 8009096:	4628      	mov	r0, r5
 8009098:	47b0      	blx	r6
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	d106      	bne.n	80090ae <__sflush_r+0x62>
 80090a0:	6829      	ldr	r1, [r5, #0]
 80090a2:	291d      	cmp	r1, #29
 80090a4:	d82b      	bhi.n	80090fe <__sflush_r+0xb2>
 80090a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009150 <__sflush_r+0x104>)
 80090a8:	40ca      	lsrs	r2, r1
 80090aa:	07d6      	lsls	r6, r2, #31
 80090ac:	d527      	bpl.n	80090fe <__sflush_r+0xb2>
 80090ae:	2200      	movs	r2, #0
 80090b0:	6062      	str	r2, [r4, #4]
 80090b2:	04d9      	lsls	r1, r3, #19
 80090b4:	6922      	ldr	r2, [r4, #16]
 80090b6:	6022      	str	r2, [r4, #0]
 80090b8:	d504      	bpl.n	80090c4 <__sflush_r+0x78>
 80090ba:	1c42      	adds	r2, r0, #1
 80090bc:	d101      	bne.n	80090c2 <__sflush_r+0x76>
 80090be:	682b      	ldr	r3, [r5, #0]
 80090c0:	b903      	cbnz	r3, 80090c4 <__sflush_r+0x78>
 80090c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80090c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090c6:	602f      	str	r7, [r5, #0]
 80090c8:	b1b9      	cbz	r1, 80090fa <__sflush_r+0xae>
 80090ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090ce:	4299      	cmp	r1, r3
 80090d0:	d002      	beq.n	80090d8 <__sflush_r+0x8c>
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7ff fc8c 	bl	80089f0 <_free_r>
 80090d8:	2300      	movs	r3, #0
 80090da:	6363      	str	r3, [r4, #52]	@ 0x34
 80090dc:	e00d      	b.n	80090fa <__sflush_r+0xae>
 80090de:	2301      	movs	r3, #1
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b0      	blx	r6
 80090e4:	4602      	mov	r2, r0
 80090e6:	1c50      	adds	r0, r2, #1
 80090e8:	d1c9      	bne.n	800907e <__sflush_r+0x32>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0c6      	beq.n	800907e <__sflush_r+0x32>
 80090f0:	2b1d      	cmp	r3, #29
 80090f2:	d001      	beq.n	80090f8 <__sflush_r+0xac>
 80090f4:	2b16      	cmp	r3, #22
 80090f6:	d11e      	bne.n	8009136 <__sflush_r+0xea>
 80090f8:	602f      	str	r7, [r5, #0]
 80090fa:	2000      	movs	r0, #0
 80090fc:	e022      	b.n	8009144 <__sflush_r+0xf8>
 80090fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009102:	b21b      	sxth	r3, r3
 8009104:	e01b      	b.n	800913e <__sflush_r+0xf2>
 8009106:	690f      	ldr	r7, [r1, #16]
 8009108:	2f00      	cmp	r7, #0
 800910a:	d0f6      	beq.n	80090fa <__sflush_r+0xae>
 800910c:	0793      	lsls	r3, r2, #30
 800910e:	680e      	ldr	r6, [r1, #0]
 8009110:	bf08      	it	eq
 8009112:	694b      	ldreq	r3, [r1, #20]
 8009114:	600f      	str	r7, [r1, #0]
 8009116:	bf18      	it	ne
 8009118:	2300      	movne	r3, #0
 800911a:	eba6 0807 	sub.w	r8, r6, r7
 800911e:	608b      	str	r3, [r1, #8]
 8009120:	f1b8 0f00 	cmp.w	r8, #0
 8009124:	dde9      	ble.n	80090fa <__sflush_r+0xae>
 8009126:	6a21      	ldr	r1, [r4, #32]
 8009128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800912a:	4643      	mov	r3, r8
 800912c:	463a      	mov	r2, r7
 800912e:	4628      	mov	r0, r5
 8009130:	47b0      	blx	r6
 8009132:	2800      	cmp	r0, #0
 8009134:	dc08      	bgt.n	8009148 <__sflush_r+0xfc>
 8009136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009148:	4407      	add	r7, r0
 800914a:	eba8 0800 	sub.w	r8, r8, r0
 800914e:	e7e7      	b.n	8009120 <__sflush_r+0xd4>
 8009150:	20400001 	.word	0x20400001

08009154 <_fflush_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	690b      	ldr	r3, [r1, #16]
 8009158:	4605      	mov	r5, r0
 800915a:	460c      	mov	r4, r1
 800915c:	b913      	cbnz	r3, 8009164 <_fflush_r+0x10>
 800915e:	2500      	movs	r5, #0
 8009160:	4628      	mov	r0, r5
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	b118      	cbz	r0, 800916e <_fflush_r+0x1a>
 8009166:	6a03      	ldr	r3, [r0, #32]
 8009168:	b90b      	cbnz	r3, 800916e <_fflush_r+0x1a>
 800916a:	f7ff f9c9 	bl	8008500 <__sinit>
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f3      	beq.n	800915e <_fflush_r+0xa>
 8009176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009178:	07d0      	lsls	r0, r2, #31
 800917a:	d404      	bmi.n	8009186 <_fflush_r+0x32>
 800917c:	0599      	lsls	r1, r3, #22
 800917e:	d402      	bmi.n	8009186 <_fflush_r+0x32>
 8009180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009182:	f7ff fc24 	bl	80089ce <__retarget_lock_acquire_recursive>
 8009186:	4628      	mov	r0, r5
 8009188:	4621      	mov	r1, r4
 800918a:	f7ff ff5f 	bl	800904c <__sflush_r>
 800918e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009190:	07da      	lsls	r2, r3, #31
 8009192:	4605      	mov	r5, r0
 8009194:	d4e4      	bmi.n	8009160 <_fflush_r+0xc>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	059b      	lsls	r3, r3, #22
 800919a:	d4e1      	bmi.n	8009160 <_fflush_r+0xc>
 800919c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800919e:	f7ff fc17 	bl	80089d0 <__retarget_lock_release_recursive>
 80091a2:	e7dd      	b.n	8009160 <_fflush_r+0xc>

080091a4 <__swhatbuf_r>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	2900      	cmp	r1, #0
 80091ae:	b096      	sub	sp, #88	@ 0x58
 80091b0:	4615      	mov	r5, r2
 80091b2:	461e      	mov	r6, r3
 80091b4:	da0d      	bge.n	80091d2 <__swhatbuf_r+0x2e>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091bc:	f04f 0100 	mov.w	r1, #0
 80091c0:	bf14      	ite	ne
 80091c2:	2340      	movne	r3, #64	@ 0x40
 80091c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091c8:	2000      	movs	r0, #0
 80091ca:	6031      	str	r1, [r6, #0]
 80091cc:	602b      	str	r3, [r5, #0]
 80091ce:	b016      	add	sp, #88	@ 0x58
 80091d0:	bd70      	pop	{r4, r5, r6, pc}
 80091d2:	466a      	mov	r2, sp
 80091d4:	f000 f862 	bl	800929c <_fstat_r>
 80091d8:	2800      	cmp	r0, #0
 80091da:	dbec      	blt.n	80091b6 <__swhatbuf_r+0x12>
 80091dc:	9901      	ldr	r1, [sp, #4]
 80091de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091e6:	4259      	negs	r1, r3
 80091e8:	4159      	adcs	r1, r3
 80091ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091ee:	e7eb      	b.n	80091c8 <__swhatbuf_r+0x24>

080091f0 <__smakebuf_r>:
 80091f0:	898b      	ldrh	r3, [r1, #12]
 80091f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f4:	079d      	lsls	r5, r3, #30
 80091f6:	4606      	mov	r6, r0
 80091f8:	460c      	mov	r4, r1
 80091fa:	d507      	bpl.n	800920c <__smakebuf_r+0x1c>
 80091fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	2301      	movs	r3, #1
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	b003      	add	sp, #12
 800920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920c:	ab01      	add	r3, sp, #4
 800920e:	466a      	mov	r2, sp
 8009210:	f7ff ffc8 	bl	80091a4 <__swhatbuf_r>
 8009214:	9f00      	ldr	r7, [sp, #0]
 8009216:	4605      	mov	r5, r0
 8009218:	4639      	mov	r1, r7
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff f858 	bl	80082d0 <_malloc_r>
 8009220:	b948      	cbnz	r0, 8009236 <__smakebuf_r+0x46>
 8009222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009226:	059a      	lsls	r2, r3, #22
 8009228:	d4ee      	bmi.n	8009208 <__smakebuf_r+0x18>
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	f043 0302 	orr.w	r3, r3, #2
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	e7e2      	b.n	80091fc <__smakebuf_r+0xc>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	6020      	str	r0, [r4, #0]
 800923a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009246:	b15b      	cbz	r3, 8009260 <__smakebuf_r+0x70>
 8009248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800924c:	4630      	mov	r0, r6
 800924e:	f000 f837 	bl	80092c0 <_isatty_r>
 8009252:	b128      	cbz	r0, 8009260 <__smakebuf_r+0x70>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f023 0303 	bic.w	r3, r3, #3
 800925a:	f043 0301 	orr.w	r3, r3, #1
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	431d      	orrs	r5, r3
 8009264:	81a5      	strh	r5, [r4, #12]
 8009266:	e7cf      	b.n	8009208 <__smakebuf_r+0x18>

08009268 <memmove>:
 8009268:	4288      	cmp	r0, r1
 800926a:	b510      	push	{r4, lr}
 800926c:	eb01 0402 	add.w	r4, r1, r2
 8009270:	d902      	bls.n	8009278 <memmove+0x10>
 8009272:	4284      	cmp	r4, r0
 8009274:	4623      	mov	r3, r4
 8009276:	d807      	bhi.n	8009288 <memmove+0x20>
 8009278:	1e43      	subs	r3, r0, #1
 800927a:	42a1      	cmp	r1, r4
 800927c:	d008      	beq.n	8009290 <memmove+0x28>
 800927e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009286:	e7f8      	b.n	800927a <memmove+0x12>
 8009288:	4402      	add	r2, r0
 800928a:	4601      	mov	r1, r0
 800928c:	428a      	cmp	r2, r1
 800928e:	d100      	bne.n	8009292 <memmove+0x2a>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800929a:	e7f7      	b.n	800928c <memmove+0x24>

0800929c <_fstat_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	@ (80092bc <_fstat_r+0x20>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	4611      	mov	r1, r2
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	f7f8 fc7a 	bl	8001ba2 <_fstat>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	d102      	bne.n	80092b8 <_fstat_r+0x1c>
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	b103      	cbz	r3, 80092b8 <_fstat_r+0x1c>
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	bd38      	pop	{r3, r4, r5, pc}
 80092ba:	bf00      	nop
 80092bc:	20000ad4 	.word	0x20000ad4

080092c0 <_isatty_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	@ (80092dc <_isatty_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f8 fc79 	bl	8001bc2 <_isatty>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_isatty_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_isatty_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000ad4 	.word	0x20000ad4

080092e0 <_realloc_r>:
 80092e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e4:	4607      	mov	r7, r0
 80092e6:	4614      	mov	r4, r2
 80092e8:	460d      	mov	r5, r1
 80092ea:	b921      	cbnz	r1, 80092f6 <_realloc_r+0x16>
 80092ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f0:	4611      	mov	r1, r2
 80092f2:	f7fe bfed 	b.w	80082d0 <_malloc_r>
 80092f6:	b92a      	cbnz	r2, 8009304 <_realloc_r+0x24>
 80092f8:	f7ff fb7a 	bl	80089f0 <_free_r>
 80092fc:	4625      	mov	r5, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	f000 f81a 	bl	800933c <_malloc_usable_size_r>
 8009308:	4284      	cmp	r4, r0
 800930a:	4606      	mov	r6, r0
 800930c:	d802      	bhi.n	8009314 <_realloc_r+0x34>
 800930e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009312:	d8f4      	bhi.n	80092fe <_realloc_r+0x1e>
 8009314:	4621      	mov	r1, r4
 8009316:	4638      	mov	r0, r7
 8009318:	f7fe ffda 	bl	80082d0 <_malloc_r>
 800931c:	4680      	mov	r8, r0
 800931e:	b908      	cbnz	r0, 8009324 <_realloc_r+0x44>
 8009320:	4645      	mov	r5, r8
 8009322:	e7ec      	b.n	80092fe <_realloc_r+0x1e>
 8009324:	42b4      	cmp	r4, r6
 8009326:	4622      	mov	r2, r4
 8009328:	4629      	mov	r1, r5
 800932a:	bf28      	it	cs
 800932c:	4632      	movcs	r2, r6
 800932e:	f7ff fb50 	bl	80089d2 <memcpy>
 8009332:	4629      	mov	r1, r5
 8009334:	4638      	mov	r0, r7
 8009336:	f7ff fb5b 	bl	80089f0 <_free_r>
 800933a:	e7f1      	b.n	8009320 <_realloc_r+0x40>

0800933c <_malloc_usable_size_r>:
 800933c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009340:	1f18      	subs	r0, r3, #4
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfbc      	itt	lt
 8009346:	580b      	ldrlt	r3, [r1, r0]
 8009348:	18c0      	addlt	r0, r0, r3
 800934a:	4770      	bx	lr

0800934c <_init>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr

08009358 <_fini>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr
