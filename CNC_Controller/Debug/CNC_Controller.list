
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800a65c  0800a65c  0000b65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab18  0800ab18  0000c090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab20  0800ab20  0000c090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab24  0800ab24  0000bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800ab28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000090  0800abb8  0000c090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800abb8  0000c6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c6b  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f7a  00000000  00000000  00024d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00028ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c0  00000000  00000000  0002a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028917  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002003f  00000000  00000000  00053c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6788  00000000  00000000  00073c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f4  00000000  00000000  0016a45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00170550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a644 	.word	0x0800a644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a644 	.word	0x0800a644

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Generic header/tail validation
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <frame_expect_req>:
// =====================
// Frame validators
// =====================
// Ensure buffer has min length, proper header/tail, and expected type
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <frame_expect_req+0x1e>
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d202      	bcs.n	800060e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	e012      	b.n	8000634 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800060e:	2355      	movs	r3, #85	@ 0x55
 8000610:	22aa      	movs	r2, #170	@ 0xaa
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ffc1 	bl	800059c <has_header_tail>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	429a      	cmp	r2, r3
 800062a:	d002      	beq.n	8000632 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 800062c:	f06f 0301 	mvn.w	r3, #1
 8000630:	e000      	b.n	8000634 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <led_ctrl_req_decoder>:

// A requisição LED_CTRL (dois LEDs) possui 12 bytes no total:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask,
// [4]=LED1.mode, [5..6]=LED1.frequencyHz (BE16, frequência em Hz),
// [7]=LED2.mode, [8..9]=LED2.frequencyHz (BE16, frequência em Hz),
// [10]=paridade (XOR dos bytes 1..9), [11]=0x55
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]

 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <led_ctrl_req_decoder+0x18>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <led_ctrl_req_decoder+0x1e>
#define LED_CTRL_REQ_TOTAL_LEN 12u
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	e025      	b.n	80006a6 <led_ctrl_req_decoder+0x6a>
#define LED_CTRL_PARITY_LAST_INDEX 9u
 800065a:	2309      	movs	r3, #9
 800065c:	2207      	movs	r2, #7
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ffc2 	bl	80005ea <frame_expect_req>
 8000666:	6178      	str	r0, [r7, #20]
#define LED_CTRL_PARITY_INDEX 10u
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <led_ctrl_req_decoder+0x36>

 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	e019      	b.n	80006a6 <led_ctrl_req_decoder+0x6a>
int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3302      	adds	r3, #2
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	701a      	strb	r2, [r3, #0]
    if (!raw || !out)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3303      	adds	r3, #3
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]
        return PROTO_ERR_ARG;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3304      	adds	r3, #4
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	709a      	strb	r2, [r3, #2]
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3305      	adds	r3, #5
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	70da      	strb	r2, [r3, #3]
    if (st != PROTO_OK)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3306      	adds	r3, #6
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	711a      	strb	r2, [r3, #4]
        return st;
 80006a4:	2300      	movs	r3, #0
    out->frameId = raw[2];
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 80006bc:	2248      	movs	r2, #72	@ 0x48
 80006be:	2100      	movs	r1, #0
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f009 f8a1 	bl	8009808 <memset>
	r->resp = resp_fifo;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d009      	beq.n	80006e6 <router_init+0x36>
		handlers = *h;
 80006d2:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <router_init+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4614      	mov	r4, r2
 80006d8:	461d      	mov	r5, r3
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bdb0      	pop	{r4, r5, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000ac 	.word	0x200000ac

080006f4 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	if (n < 4)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d801      	bhi.n	8000708 <is_req_complete+0x14>
		return 0; // mínimo
 8000704:	2300      	movs	r3, #0
 8000706:	e01a      	b.n	800073e <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2baa      	cmp	r3, #170	@ 0xaa
 800070e:	d002      	beq.n	8000716 <is_req_complete+0x22>
		return -1; // inválido
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	e013      	b.n	800073e <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000716:	2303      	movs	r3, #3
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e00b      	b.n	8000734 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b55      	cmp	r3, #85	@ 0x55
 8000726:	d102      	bne.n	800072e <is_req_complete+0x3a>
			return (int) (i + 1);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	e007      	b.n	800073e <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d3ef      	bcc.n	800071c <is_req_complete+0x28>
	}
	return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	if (len < 4)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b03      	cmp	r3, #3
 800075c:	f240 80a4 	bls.w	80008a8 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3301      	adds	r3, #1
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	3b01      	subs	r3, #1
 800076c:	2b1f      	cmp	r3, #31
 800076e:	f200 809d 	bhi.w	80008ac <dispatch+0x160>
 8000772:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <dispatch+0x2c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	080007f9 	.word	0x080007f9
 800077c:	0800080f 	.word	0x0800080f
 8000780:	08000825 	.word	0x08000825
 8000784:	0800083b 	.word	0x0800083b
 8000788:	08000851 	.word	0x08000851
 800078c:	08000867 	.word	0x08000867
 8000790:	0800087d 	.word	0x0800087d
 8000794:	080008ad 	.word	0x080008ad
 8000798:	080008ad 	.word	0x080008ad
 800079c:	080008ad 	.word	0x080008ad
 80007a0:	080008ad 	.word	0x080008ad
 80007a4:	080008ad 	.word	0x080008ad
 80007a8:	080008ad 	.word	0x080008ad
 80007ac:	080008ad 	.word	0x080008ad
 80007b0:	080008ad 	.word	0x080008ad
 80007b4:	080008ad 	.word	0x080008ad
 80007b8:	080008ad 	.word	0x080008ad
 80007bc:	080008ad 	.word	0x080008ad
 80007c0:	080008ad 	.word	0x080008ad
 80007c4:	080008ad 	.word	0x080008ad
 80007c8:	080008ad 	.word	0x080008ad
 80007cc:	080008ad 	.word	0x080008ad
 80007d0:	080008ad 	.word	0x080008ad
 80007d4:	080008ad 	.word	0x080008ad
 80007d8:	080008ad 	.word	0x080008ad
 80007dc:	080008ad 	.word	0x080008ad
 80007e0:	080008ad 	.word	0x080008ad
 80007e4:	080008ad 	.word	0x080008ad
 80007e8:	080008ad 	.word	0x080008ad
 80007ec:	080008ad 	.word	0x080008ad
 80007f0:	080008ad 	.word	0x080008ad
 80007f4:	08000893 	.word	0x08000893
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 80007f8:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <dispatch+0x188>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d057      	beq.n	80008b0 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000800:	4b34      	ldr	r3, [pc, #208]	@ (80008d4 <dispatch+0x188>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	4798      	blx	r3
		break;
 800080c:	e050      	b.n	80008b0 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <dispatch+0x188>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d04e      	beq.n	80008b4 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000816:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <dispatch+0x188>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	4798      	blx	r3
		break;
 8000822:	e047      	b.n	80008b4 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <dispatch+0x188>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d045      	beq.n	80008b8 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <dispatch+0x188>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	4798      	blx	r3
		break;
 8000838:	e03e      	b.n	80008b8 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <dispatch+0x188>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d03c      	beq.n	80008bc <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000842:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <dispatch+0x188>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	4798      	blx	r3
		break;
 800084e:	e035      	b.n	80008bc <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <dispatch+0x188>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d033      	beq.n	80008c0 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <dispatch+0x188>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	4798      	blx	r3
		break;
 8000864:	e02c      	b.n	80008c0 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <dispatch+0x188>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d02a      	beq.n	80008c4 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <dispatch+0x188>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	4798      	blx	r3
		break;
 800087a:	e023      	b.n	80008c4 <dispatch+0x178>
	case REQ_LED_CTRL:
		if (handlers.on_led_ctrl)
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <dispatch+0x188>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d021      	beq.n	80008c8 <dispatch+0x17c>
			handlers.on_led_ctrl(r, f, len);
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <dispatch+0x188>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	4798      	blx	r3
		break;
 8000890:	e01a      	b.n	80008c8 <dispatch+0x17c>
	case REQ_FPGA_STATUS:
		if (handlers.on_fpga_status)
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <dispatch+0x188>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d018      	beq.n	80008cc <dispatch+0x180>
			handlers.on_fpga_status(r, f, len);
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <dispatch+0x188>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	4798      	blx	r3
		break;
 80008a6:	e011      	b.n	80008cc <dispatch+0x180>
		return;
 80008a8:	bf00      	nop
 80008aa:	e010      	b.n	80008ce <dispatch+0x182>
	default:
		break; // desconhecido
 80008ac:	bf00      	nop
 80008ae:	e00e      	b.n	80008ce <dispatch+0x182>
		break;
 80008b0:	bf00      	nop
 80008b2:	e00c      	b.n	80008ce <dispatch+0x182>
		break;
 80008b4:	bf00      	nop
 80008b6:	e00a      	b.n	80008ce <dispatch+0x182>
		break;
 80008b8:	bf00      	nop
 80008ba:	e008      	b.n	80008ce <dispatch+0x182>
		break;
 80008bc:	bf00      	nop
 80008be:	e006      	b.n	80008ce <dispatch+0x182>
		break;
 80008c0:	bf00      	nop
 80008c2:	e004      	b.n	80008ce <dispatch+0x182>
		break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <dispatch+0x182>
		break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <dispatch+0x182>
		break;
 80008cc:	bf00      	nop
	}
}
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000ac 	.word	0x200000ac

080008d8 <router_feed_bytes>:

void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e038      	b.n	800095c <router_feed_bytes+0x84>
		if (r->idx >= sizeof(r->acc))
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80008f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80008f2:	d903      	bls.n	80008fc <router_feed_bytes+0x24>
			r->idx = 0; // evita overflow simples
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	441a      	add	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000908:	1c59      	adds	r1, r3, #1
 800090a:	b2c8      	uxtb	r0, r1
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000912:	4619      	mov	r1, r3
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	545a      	strb	r2, [r3, r1]
		int comp = is_req_complete(r->acc, r->idx);
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f7ff fee5 	bl	80006f4 <is_req_complete>
 800092a:	6138      	str	r0, [r7, #16]
		if (comp < 0) {
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	da04      	bge.n	800093c <router_feed_bytes+0x64>
			r->idx = 0;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			continue;
 800093a:	e00c      	b.n	8000956 <router_feed_bytes+0x7e>
		} // descarta até header
		if (comp > 0) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd09      	ble.n	8000956 <router_feed_bytes+0x7e>
			dispatch(r, r->acc, (uint32_t) comp);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4619      	mov	r1, r3
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f7ff feff 	bl	800074c <dispatch>
			r->idx = 0;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	for (uint32_t i = 0; i < len; i++) {
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3c2      	bcc.n	80008ea <router_feed_bytes+0x12>
		}
	}
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <resp_fifo_create>:

response_fifo_t* resp_fifo_create(void) {
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
	response_fifo_t *q = (response_fifo_t*) calloc(1, sizeof(*q));
 8000974:	210c      	movs	r1, #12
 8000976:	2001      	movs	r0, #1
 8000978:	f008 fc64 	bl	8009244 <calloc>
 800097c:	4603      	mov	r3, r0
 800097e:	607b      	str	r3, [r7, #4]
	return q;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <resp_fifo_push>:
		free(n->buf);
		free(n);
	}
	free(q);
}
int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
	if (!q || !frame || len == 0)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d005      	beq.n	80009a8 <resp_fifo_push+0x1e>
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <resp_fifo_push+0x1e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <resp_fifo_push+0x24>
		return PROTO_ERR_ARG;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	e03d      	b.n	8000a2a <resp_fifo_push+0xa0>
	node_t *n = (node_t*) malloc(sizeof(*n));
 80009ae:	200c      	movs	r0, #12
 80009b0:	f008 fc64 	bl	800927c <malloc>
 80009b4:	4603      	mov	r3, r0
 80009b6:	617b      	str	r3, [r7, #20]
	if (!n)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d102      	bne.n	80009c4 <resp_fifo_push+0x3a>
		return PROTO_ERR_ALLOC;
 80009be:	f06f 0302 	mvn.w	r3, #2
 80009c2:	e032      	b.n	8000a2a <resp_fifo_push+0xa0>
	n->buf = (uint8_t*) malloc(len);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f008 fc59 	bl	800927c <malloc>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	601a      	str	r2, [r3, #0]
	if (!n->buf) {
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <resp_fifo_push+0x5c>
		free(n);
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f008 fc56 	bl	800928c <free>
		return PROTO_ERR_ALLOC;
 80009e0:	f06f 0302 	mvn.w	r3, #2
 80009e4:	e021      	b.n	8000a2a <resp_fifo_push+0xa0>
	}
	memcpy(n->buf, frame, len);
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 ff95 	bl	800991e <memcpy>
	n->len = len;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	605a      	str	r2, [r3, #4]
	n->next = NULL;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	if (q->tail)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <resp_fifo_push+0x88>
		q->tail->next = n;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	e002      	b.n	8000a18 <resp_fifo_push+0x8e>
	else
		q->head = n;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]
	q->tail = n;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	605a      	str	r2, [r3, #4]
	q->count++;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	609a      	str	r2, [r3, #8]
	return PROTO_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <resp_fifo_pop>:
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
	if (!q || !q->head || !out)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <resp_fifo_pop+0x20>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <resp_fifo_pop+0x20>
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <resp_fifo_pop+0x24>
		return 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e02e      	b.n	8000ab4 <resp_fifo_pop+0x82>
	node_t *n = q->head;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	617b      	str	r3, [r7, #20]
	if (n->len > max_len)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d202      	bcs.n	8000a6c <resp_fifo_pop+0x3a>
		return PROTO_ERR_RANGE;
 8000a66:	f06f 0303 	mvn.w	r3, #3
 8000a6a:	e023      	b.n	8000ab4 <resp_fifo_pop+0x82>
	memcpy(out, n->buf, n->len);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	461a      	mov	r2, r3
 8000a76:	68b8      	ldr	r0, [r7, #8]
 8000a78:	f008 ff51 	bl	800991e <memcpy>
	int l = (int) n->len;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
	q->head = n->next;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	601a      	str	r2, [r3, #0]
	if (!q->head)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <resp_fifo_pop+0x66>
		q->tail = NULL;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
	q->count--;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	609a      	str	r2, [r3, #8]
	free(n->buf);
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 fbf0 	bl	800928c <free>
	free(n);
 8000aac:	6978      	ldr	r0, [r7, #20]
 8000aae:	f008 fbed 	bl	800928c <free>
	return l;
 8000ab2:	693b      	ldr	r3, [r7, #16]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <home_on_move_home+0x2c>)
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <home_on_move_home+0x30>)
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <home_on_move_home+0x34>)
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <home_on_move_home+0x38>)
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 fa84 	bl	8000fe8 <log_event_auto>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	0800a65c 	.word	0x0800a65c
 8000aec:	0800a674 	.word	0x0800a674
 8000af0:	0800a668 	.word	0x0800a668
 8000af4:	0800a684 	.word	0x0800a684

08000af8 <led_drive>:
    { LED2_GPIO_PORT, LED2_GPIO_PIN, LED_MODE_OFF, 0u, 0u, 0u, 0u },
};

static const char *const g_led_names[LED_CTRL_CHANNEL_COUNT] = { "LED1", "LED2" };

static void led_drive(led_channel_state_t *led, uint8_t on) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
    if (!led)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d017      	beq.n	8000b3a <led_drive+0x42>
        return;
    GPIO_PinState level;
#if LED_ACTIVE_HIGH
    level = on ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	73fb      	strb	r3, [r7, #15]
#else
    level = on ? GPIO_PIN_RESET : GPIO_PIN_SET;
#endif
    HAL_GPIO_WritePin(led->port, led->pin, level);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	889b      	ldrh	r3, [r3, #4]
 8000b20:	7bfa      	ldrb	r2, [r7, #15]
 8000b22:	4619      	mov	r1, r3
 8000b24:	f002 ffc0 	bl	8003aa8 <HAL_GPIO_WritePin>
    led->is_on = on ? 1u : 0u;
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <led_drive+0x3a>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	e000      	b.n	8000b34 <led_drive+0x3c>
 8000b32:	2200      	movs	r2, #0
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	71da      	strb	r2, [r3, #7]
 8000b38:	e000      	b.n	8000b3c <led_drive+0x44>
        return;
 8000b3a:	bf00      	nop
}
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <led_compute_half_period_ticks>:

static uint32_t led_compute_half_period_ticks(uint16_t freq_hz) {
 8000b42:	b480      	push	{r7}
 8000b44:	b085      	sub	sp, #20
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	80fb      	strh	r3, [r7, #6]
    if (!freq_hz)
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <led_compute_half_period_ticks+0x14>
        return 0u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e00c      	b.n	8000b70 <led_compute_half_period_ticks+0x2e>
    uint32_t half_period = 500u / (uint32_t)freq_hz;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	60fb      	str	r3, [r7, #12]
    if (half_period == 0u)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <led_compute_half_period_ticks+0x2c>
        half_period = 1u; // limita à resolução de 1 ms do temporizador dedicado
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]

    return half_period;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_hz) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	803b      	strh	r3, [r7, #0]
    if (!led)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d056      	beq.n	8000c40 <led_apply_config+0xc4>
        return;
    if (mode > LED_MODE_BLINK)
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d901      	bls.n	8000b9c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	70fb      	strb	r3, [r7, #3]

    uint32_t half_period = (mode == LED_MODE_BLINK) ? led_compute_half_period_ticks(freq_hz) : 0u;
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d105      	bne.n	8000bae <led_apply_config+0x32>
 8000ba2:	883b      	ldrh	r3, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffcc 	bl	8000b42 <led_compute_half_period_ticks>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e000      	b.n	8000bb0 <led_apply_config+0x34>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8000bb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    uint32_t primask = __get_PRIMASK();
 8000bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d110      	bne.n	8000be8 <led_apply_config+0x6c>
        led->mode = LED_MODE_ON;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	719a      	strb	r2, [r3, #6]
        led->frequency_hz = 0u;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	811a      	strh	r2, [r3, #8]
        led->half_period_ticks = 0u;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
        led->ticks_until_toggle = 0u;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
        led_drive(led, 1u);
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff89 	bl	8000af8 <led_drive>
 8000be6:	e026      	b.n	8000c36 <led_apply_config+0xba>
    } else if (mode == LED_MODE_BLINK && half_period > 0u) {
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d113      	bne.n	8000c16 <led_apply_config+0x9a>
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d010      	beq.n	8000c16 <led_apply_config+0x9a>
        led->mode = LED_MODE_BLINK;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	719a      	strb	r2, [r3, #6]
        led->frequency_hz = freq_hz;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	883a      	ldrh	r2, [r7, #0]
 8000bfe:	811a      	strh	r2, [r3, #8]
        led->half_period_ticks = half_period;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	60da      	str	r2, [r3, #12]
        led->ticks_until_toggle = half_period;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	611a      	str	r2, [r3, #16]
        led_drive(led, 1u);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff72 	bl	8000af8 <led_drive>
 8000c14:	e00f      	b.n	8000c36 <led_apply_config+0xba>
    } else {
        led->mode = LED_MODE_OFF;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	719a      	strb	r2, [r3, #6]
        led->frequency_hz = 0u;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	811a      	strh	r2, [r3, #8]
        led->half_period_ticks = 0u;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
        led->ticks_until_toggle = 0u;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
        led_drive(led, 0u);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff61 	bl	8000af8 <led_drive>
    }

    if (primask == 0u) {
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <led_apply_config+0xc6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c3c:	b662      	cpsie	i
}
 8000c3e:	e000      	b.n	8000c42 <led_apply_config+0xc6>
        return;
 8000c40:	bf00      	nop
        __enable_irq();
    }
}
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <led_service_init>:

void led_service_init(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
    GPIO_InitTypeDef gi = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
    gi.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e04c      	b.n	8000d08 <led_service_init+0xc0>
        gi.Pin = g_leds[i].pin;
 8000c6e:	4936      	ldr	r1, [pc, #216]	@ (8000d48 <led_service_init+0x100>)
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	603b      	str	r3, [r7, #0]
        HAL_GPIO_Init(g_leds[i].port, &gi);
 8000c82:	4931      	ldr	r1, [pc, #196]	@ (8000d48 <led_service_init+0x100>)
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	463a      	mov	r2, r7
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fb50 	bl	800333c <HAL_GPIO_Init>
        g_leds[i].mode = LED_MODE_OFF;
 8000c9c:	492a      	ldr	r1, [pc, #168]	@ (8000d48 <led_service_init+0x100>)
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	3306      	adds	r3, #6
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_hz = 0u;
 8000cb0:	4925      	ldr	r1, [pc, #148]	@ (8000d48 <led_service_init+0x100>)
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3308      	adds	r3, #8
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	801a      	strh	r2, [r3, #0]
        g_leds[i].half_period_ticks = 0u;
 8000cc4:	4920      	ldr	r1, [pc, #128]	@ (8000d48 <led_service_init+0x100>)
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
        g_leds[i].ticks_until_toggle = 0u;
 8000cd8:	491b      	ldr	r1, [pc, #108]	@ (8000d48 <led_service_init+0x100>)
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3310      	adds	r3, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
        led_drive(&g_leds[i], 0u);
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <led_service_init+0x100>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fefb 	bl	8000af8 <led_drive>
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d9af      	bls.n	8000c6e <led_service_init+0x26>
    }

    if (htim15.Instance != TIM15) {
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <led_service_init+0x104>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <led_service_init+0x108>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d001      	beq.n	8000d1c <led_service_init+0xd4>
        MX_TIM15_Init();
 8000d18:	f001 faf2 	bl	8002300 <MX_TIM15_Init>
    }
    if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK) {
 8000d1c:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <led_service_init+0x104>)
 8000d1e:	f006 f983 	bl	8007028 <HAL_TIM_Base_Start_IT>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00b      	beq.n	8000d40 <led_service_init+0xf8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar TIM15");
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <led_service_init+0x10c>)
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <led_service_init+0x110>)
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <led_service_init+0x114>)
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	4613      	mov	r3, r2
 8000d34:	f06f 0203 	mvn.w	r2, #3
 8000d38:	2164      	movs	r1, #100	@ 0x64
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 f954 	bl	8000fe8 <log_event_auto>

    }
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	200004b8 	.word	0x200004b8
 8000d50:	40014000 	.word	0x40014000
 8000d54:	0800a690 	.word	0x0800a690
 8000d58:	0800a6a4 	.word	0x0800a6a4
 8000d5c:	0800a6bc 	.word	0x0800a6bc

08000d60 <led_service_on_tick>:

static void led_service_on_tick(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	e02e      	b.n	8000dca <led_service_on_tick+0x6a>
        led_channel_state_t *led = &g_leds[i];
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4a19      	ldr	r2, [pc, #100]	@ (8000ddc <led_service_on_tick+0x7c>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	603b      	str	r3, [r7, #0]
        if (led->mode == LED_MODE_BLINK && led->half_period_ticks > 0u) {
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	799b      	ldrb	r3, [r3, #6]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d11f      	bne.n	8000dc4 <led_service_on_tick+0x64>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d01b      	beq.n	8000dc4 <led_service_on_tick+0x64>
            if (led->ticks_until_toggle > 0u) {
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d004      	beq.n	8000d9e <led_service_on_tick+0x3e>
                --led->ticks_until_toggle;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	611a      	str	r2, [r3, #16]
            }
            if (led->ticks_until_toggle == 0u) {
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10e      	bne.n	8000dc4 <led_service_on_tick+0x64>
                led->ticks_until_toggle = led->half_period_ticks;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	611a      	str	r2, [r3, #16]
                led_drive(led, led->is_on ? 0u : 1u);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	79db      	ldrb	r3, [r3, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bf0c      	ite	eq
 8000db6:	2301      	moveq	r3, #1
 8000db8:	2300      	movne	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6838      	ldr	r0, [r7, #0]
 8000dc0:	f7ff fe9a 	bl	8000af8 <led_drive>
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d9cd      	bls.n	8000d6c <led_service_on_tick+0xc>
            }
        }
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000

08000de0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    if (!htim)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x1c>
        return;
    if (htim == &htim15) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d103      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x1e>
        led_service_on_tick();
 8000df6:	f7ff ffb3 	bl	8000d60 <led_service_on_tick>
 8000dfa:	e000      	b.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x1e>
        return;
 8000dfc:	bf00      	nop
    }
}
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200004b8 	.word	0x200004b8

08000e08 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b097      	sub	sp, #92	@ 0x5c
 8000e0c:	af0c      	add	r7, sp, #48	@ 0x30
 8000e0e:	6178      	str	r0, [r7, #20]
 8000e10:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d068      	beq.n	8000eea <led_on_led_ctrl+0xe2>
        return;
    if (led_ctrl_req_decoder(frame, len, &req) != PROTO_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	6939      	ldr	r1, [r7, #16]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff fc0b 	bl	800063c <led_ctrl_req_decoder>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d160      	bne.n	8000eee <led_on_led_ctrl+0xe6>
        return;

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e30:	e02b      	b.n	8000e8a <led_on_led_ctrl+0x82>
        uint8_t mask_bit = (i == 0u) ? LED_MASK_LED1 : LED_MASK_LED2;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <led_on_led_ctrl+0x34>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <led_on_led_ctrl+0x36>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (req.ledMask & mask_bit) {
 8000e42:	7e7a      	ldrb	r2, [r7, #25]
 8000e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e48:	4013      	ands	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d019      	beq.n	8000e84 <led_on_led_ctrl+0x7c>
            led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8000e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4a27      	ldr	r2, [pc, #156]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000e5c:	1898      	adds	r0, r3, r2
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	3318      	adds	r3, #24
 8000e64:	f107 0210 	add.w	r2, r7, #16
 8000e68:	4413      	add	r3, r2
 8000e6a:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	3318      	adds	r3, #24
 8000e74:	f107 0210 	add.w	r2, r7, #16
 8000e78:	4413      	add	r3, r2
 8000e7a:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	f7ff fe7c 	bl	8000b7c <led_apply_config>
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	3301      	adds	r3, #1
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d9d0      	bls.n	8000e32 <led_on_led_ctrl+0x2a>
        }
    }

    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "applied",
 8000e90:	481a      	ldr	r0, [pc, #104]	@ (8000efc <led_on_led_ctrl+0xf4>)
 8000e92:	7e7b      	ldrb	r3, [r7, #25]
 8000e94:	461c      	mov	r4, r3
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <led_on_led_ctrl+0xf8>)
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000e9a:	7992      	ldrb	r2, [r2, #6]
 8000e9c:	4615      	mov	r5, r2
 8000e9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000ea0:	8912      	ldrh	r2, [r2, #8]
 8000ea2:	4616      	mov	r6, r2
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000ea6:	79d2      	ldrb	r2, [r2, #7]
 8000ea8:	60fa      	str	r2, [r7, #12]
 8000eaa:	4a16      	ldr	r2, [pc, #88]	@ (8000f04 <led_on_led_ctrl+0xfc>)
 8000eac:	4912      	ldr	r1, [pc, #72]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000eae:	7e89      	ldrb	r1, [r1, #26]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	4911      	ldr	r1, [pc, #68]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000eb4:	8b89      	ldrh	r1, [r1, #28]
 8000eb6:	6079      	str	r1, [r7, #4]
 8000eb8:	490f      	ldr	r1, [pc, #60]	@ (8000ef8 <led_on_led_ctrl+0xf0>)
 8000eba:	7ec9      	ldrb	r1, [r1, #27]
 8000ebc:	910a      	str	r1, [sp, #40]	@ 0x28
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	9109      	str	r1, [sp, #36]	@ 0x24
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	9108      	str	r1, [sp, #32]
 8000ec6:	9207      	str	r2, [sp, #28]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	9206      	str	r2, [sp, #24]
 8000ecc:	9605      	str	r6, [sp, #20]
 8000ece:	9504      	str	r5, [sp, #16]
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	9402      	str	r4, [sp, #8]
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <led_on_led_ctrl+0x100>)
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <led_on_led_ctrl+0x104>)
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 f880 	bl	8000fe8 <log_event_auto>
 8000ee8:	e002      	b.n	8000ef0 <led_on_led_ctrl+0xe8>
        return;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <led_on_led_ctrl+0xe8>
        return;
 8000eee:	bf00      	nop
              "mask=0x%02X %s(mode=%u,f=%uHz,on=%u) %s(mode=%u,f=%uHz,on=%u)",
              (unsigned)req.ledMask,
              g_led_names[0], g_leds[0].mode, g_leds[0].frequency_hz, g_leds[0].is_on,
              g_led_names[1], g_leds[1].mode, g_leds[1].frequency_hz, g_leds[1].is_on);
}
 8000ef0:	372c      	adds	r7, #44	@ 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	0800a690 	.word	0x0800a690
 8000f00:	0800a694 	.word	0x0800a694
 8000f04:	0800a69c 	.word	0x0800a69c
 8000f08:	0800a6c4 	.word	0x0800a6c4
 8000f0c:	0800a704 	.word	0x0800a704

08000f10 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    // Ensure stdout is unbuffered so printf flushes immediately to UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <log_service_init+0x18>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6898      	ldr	r0, [r3, #8]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f008 fb3e 	bl	80095a0 <setvbuf>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000040 	.word	0x20000040

08000f2c <log_event_ids>:

void log_poll(void){
    // No-op: transmission is synchronous via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	603a      	str	r2, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8000f3c:	79f9      	ldrb	r1, [r7, #7]
 8000f3e:	79ba      	ldrb	r2, [r7, #6]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <log_event_ids+0x24>)
 8000f44:	f008 fb1a 	bl	800957c <iprintf>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800a70c 	.word	0x0800a70c

08000f54 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <log_event_names+0x16>
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <log_event_names+0x40>)
 8000f68:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <log_event_names+0x20>
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <log_event_names+0x40>)
 8000f72:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <log_event_names+0x2a>
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <log_event_names+0x40>)
 8000f7c:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <log_event_names+0x44>)
 8000f86:	f008 faf9 	bl	800957c <iprintf>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	0800a72c 	.word	0x0800a72c
 8000f98:	0800a730 	.word	0x0800a730

08000f9c <_write>:

// Keep _write exactly as-is: used by printf to send to USART1.
int _write(int fd, char *ptr, int len) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <_write+0x18>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d111      	bne.n	8000fd8 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <_write+0x48>)
 8000fc0:	f007 fa7e 	bl	80084c0 <HAL_UART_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <_write+0x36>
        return len;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e004      	b.n	8000fdc <_write+0x40>
      else
        return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e001      	b.n	8000fdc <_write+0x40>
    }
    return -1;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000504 	.word	0x20000504

08000fe8 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a8      	sub	sp, #160	@ 0xa0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60ba      	str	r2, [r7, #8]
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8000ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d010      	beq.n	8001024 <log_event_auto+0x3c>
 8001002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 800100c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001010:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001012:	f107 0018 	add.w	r0, r7, #24
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800101c:	2180      	movs	r1, #128	@ 0x80
 800101e:	f008 fbe5 	bl	80097ec <vsniprintf>
    if(fmt && fmt[0]){
 8001022:	e003      	b.n	800102c <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001024:	233f      	movs	r3, #63	@ 0x3f
 8001026:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8001028:	2300      	movs	r3, #0
 800102a:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <log_event_auto+0x4e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	e000      	b.n	8001038 <log_event_auto+0x50>
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <log_event_auto+0x84>)
 8001038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 800103c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <log_event_auto+0x62>
 8001044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001048:	e000      	b.n	800104c <log_event_auto+0x64>
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <log_event_auto+0x84>)
 800104c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001058:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800105c:	4804      	ldr	r0, [pc, #16]	@ (8001070 <log_event_auto+0x88>)
 800105e:	f008 fa8d 	bl	800957c <iprintf>
}
 8001062:	bf00      	nop
 8001064:	37a0      	adds	r7, #160	@ 0xa0
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	0800a72c 	.word	0x0800a72c
 8001070:	0800a730 	.word	0x0800a730

08001074 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af04      	add	r7, sp, #16
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <motion_on_move_queue_add+0x50>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <motion_on_move_queue_add+0x50>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <motion_on_move_queue_add+0x50>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <motion_on_move_queue_add+0x50>)
 800109a:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 800109c:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <motion_on_move_queue_add+0x54>)
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <motion_on_move_queue_add+0x50>)
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <motion_on_move_queue_add+0x58>)
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <motion_on_move_queue_add+0x5c>)
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4613      	mov	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	2002      	movs	r0, #2
 80010b6:	f7ff ff97 	bl	8000fe8 <log_event_auto>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000cc 	.word	0x200000cc
 80010c8:	0800a754 	.word	0x0800a754
 80010cc:	0800a76c 	.word	0x0800a76c
 80010d0:	0800a77c 	.word	0x0800a77c

080010d4 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <motion_on_move_queue_status+0x3c>)
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <motion_on_move_queue_status+0x40>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <motion_on_move_queue_status+0x40>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	9303      	str	r3, [sp, #12]
 80010f0:	9102      	str	r1, [sp, #8]
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <motion_on_move_queue_status+0x44>)
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <motion_on_move_queue_status+0x48>)
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff ff71 	bl	8000fe8 <log_event_auto>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	0800a754 	.word	0x0800a754
 8001114:	200000cc 	.word	0x200000cc
 8001118:	0800a788 	.word	0x0800a788
 800111c:	0800a7a0 	.word	0x0800a7a0

08001120 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <motion_on_start_move+0x4c>)
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <motion_on_start_move+0x4c>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800113a:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <motion_on_start_move+0x50>)
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <motion_on_start_move+0x4c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d101      	bne.n	800114a <motion_on_start_move+0x2a>
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <motion_on_start_move+0x54>)
 8001148:	e000      	b.n	800114c <motion_on_start_move+0x2c>
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <motion_on_start_move+0x58>)
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <motion_on_start_move+0x5c>)
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <motion_on_start_move+0x60>)
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	2200      	movs	r2, #0
 800115a:	2102      	movs	r1, #2
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff ff43 	bl	8000fe8 <log_event_auto>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000cc 	.word	0x200000cc
 8001170:	0800a754 	.word	0x0800a754
 8001174:	0800a7b0 	.word	0x0800a7b0
 8001178:	0800a7b8 	.word	0x0800a7b8
 800117c:	0800a760 	.word	0x0800a760
 8001180:	0800a7c0 	.word	0x0800a7c0

08001184 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af04      	add	r7, sp, #16
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <motion_on_move_end+0x34>)
 8001190:	2204      	movs	r2, #4
 8001192:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 8001194:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <motion_on_move_end+0x38>)
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <motion_on_move_end+0x3c>)
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <motion_on_move_end+0x40>)
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <motion_on_move_end+0x44>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	2102      	movs	r1, #2
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff ff1d 	bl	8000fe8 <log_event_auto>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000cc 	.word	0x200000cc
 80011bc:	0800a754 	.word	0x0800a754
 80011c0:	0800a7cc 	.word	0x0800a7cc
 80011c4:	0800a760 	.word	0x0800a760
 80011c8:	0800a7d8 	.word	0x0800a7d8

080011cc <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <probe_on_move_probe_level+0x2c>)
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <probe_on_move_probe_level+0x30>)
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <probe_on_move_probe_level+0x34>)
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <probe_on_move_probe_level+0x38>)
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	2004      	movs	r0, #4
 80011ec:	f7ff fefc 	bl	8000fe8 <log_event_auto>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800a7e4 	.word	0x0800a7e4
 80011fc:	0800a7fc 	.word	0x0800a7fc
 8001200:	0800a7f0 	.word	0x0800a7f0
 8001204:	0800a80c 	.word	0x0800a80c

08001208 <test_spi_service_init>:
#include "Services/Test/test_spi_service.h"
#include "Protocol/frame_defs.h"
#include "app.h"

void test_spi_service_init(void) {
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
    // Nada a inicializar por ora
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <test_spi_send_hello>:

int test_spi_send_hello(void) {
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
    uint8_t frame[7];
    frame[0] = RESP_HEADER; // 0xAB
 800121c:	23ab      	movs	r3, #171	@ 0xab
 800121e:	703b      	strb	r3, [r7, #0]
    frame[1] = 'h';
 8001220:	2368      	movs	r3, #104	@ 0x68
 8001222:	707b      	strb	r3, [r7, #1]
    frame[2] = 'e';
 8001224:	2365      	movs	r3, #101	@ 0x65
 8001226:	70bb      	strb	r3, [r7, #2]
    frame[3] = 'l';
 8001228:	236c      	movs	r3, #108	@ 0x6c
 800122a:	70fb      	strb	r3, [r7, #3]
    frame[4] = 'l';
 800122c:	236c      	movs	r3, #108	@ 0x6c
 800122e:	713b      	strb	r3, [r7, #4]
    frame[5] = 'o';
 8001230:	236f      	movs	r3, #111	@ 0x6f
 8001232:	717b      	strb	r3, [r7, #5]
    frame[6] = RESP_TAIL;   // 0x54
 8001234:	2354      	movs	r3, #84	@ 0x54
 8001236:	71bb      	strb	r3, [r7, #6]
    return app_resp_push(frame, sizeof frame);
 8001238:	463b      	mov	r3, r7
 800123a:	2107      	movs	r1, #7
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f971 	bl	8001524 <app_resp_push>
 8001242:	4603      	mov	r3, r0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"

// Static adapter functions matching router callbacks
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f7ff ff0a 	bl	8001074 <motion_on_move_queue_add>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f7ff ff2c 	bl	80010d4 <motion_on_move_queue_status>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f7ff ff44 	bl	8001120 <motion_on_start_move>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f7ff fc04 	bl	8000abc <home_on_move_home>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff ff7e 	bl	80011cc <probe_on_move_probe_level>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff ff4c 	bl	8001184 <motion_on_move_end>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f7ff fd80 	bl	8000e08 <led_on_led_ctrl>
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if (!h)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d018      	beq.n	8001368 <services_register_handlers+0x40>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <services_register_handlers+0x4c>)
 800133a:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <services_register_handlers+0x50>)
 8001340:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <services_register_handlers+0x54>)
 8001346:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <services_register_handlers+0x58>)
 800134c:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <services_register_handlers+0x5c>)
 8001352:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a0c      	ldr	r2, [pc, #48]	@ (8001388 <services_register_handlers+0x60>)
 8001358:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <services_register_handlers+0x64>)
 800135e:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <services_register_handlers+0x68>)
 8001364:	61da      	str	r2, [r3, #28]
 8001366:	e000      	b.n	800136a <services_register_handlers+0x42>
		return;
 8001368:	bf00      	nop
}
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	0800124d 	.word	0x0800124d
 8001378:	08001269 	.word	0x08001269
 800137c:	08001285 	.word	0x08001285
 8001380:	080012a1 	.word	0x080012a1
 8001384:	080012bd 	.word	0x080012bd
 8001388:	080012d9 	.word	0x080012d9
 800138c:	080012f5 	.word	0x080012f5
 8001390:	08001311 	.word	0x08001311

08001394 <app_init>:
static uint8_t g_spi_rx_buf[APP_SPI_RX_BUF_SZ];
static volatile int g_spi_tx_busy = 0;

LOG_SVC_DEFINE(LOG_SVC_APP, "app");

void app_init(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af04      	add	r7, sp, #16
    // Init services (GPIO for LED etc.)
    led_service_init();
 800139a:	f7ff fc55 	bl	8000c48 <led_service_init>
    log_service_init();
 800139e:	f7ff fdb7 	bl	8000f10 <log_service_init>
    test_spi_service_init();
 80013a2:	f7ff ff31 	bl	8001208 <test_spi_service_init>
    // Boot log (visible on USART1 VCP terminal)
    LOGT_THIS(LOG_STATE_START, PROTO_OK, "start", "ready");
 80013a6:	4a16      	ldr	r2, [pc, #88]	@ (8001400 <app_init+0x6c>)
 80013a8:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <app_init+0x70>)
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <app_init+0x74>)
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <app_init+0x78>)
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fe14 	bl	8000fe8 <log_event_auto>

    // Prepare router and response FIFO
    g_resp_fifo = resp_fifo_create();
 80013c0:	f7ff fad5 	bl	800096e <resp_fifo_create>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <app_init+0x7c>)
 80013c8:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 80013ca:	2220      	movs	r2, #32
 80013cc:	2100      	movs	r1, #0
 80013ce:	4811      	ldr	r0, [pc, #68]	@ (8001414 <app_init+0x80>)
 80013d0:	f008 fa1a 	bl	8009808 <memset>
    services_register_handlers(&g_handlers);
 80013d4:	480f      	ldr	r0, [pc, #60]	@ (8001414 <app_init+0x80>)
 80013d6:	f7ff ffa7 	bl	8001328 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <app_init+0x7c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <app_init+0x80>)
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	@ (8001418 <app_init+0x84>)
 80013e4:	f7ff f964 	bl	80006b0 <router_init>

    // Start SPI RX DMA in circular mode to feed router from callbacks
    (void)HAL_SPI_Receive_DMA(&hspi1, g_spi_rx_buf, (uint16_t)APP_SPI_RX_BUF_SZ);
 80013e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ec:	490b      	ldr	r1, [pc, #44]	@ (800141c <app_init+0x88>)
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <app_init+0x8c>)
 80013f0:	f004 fdec 	bl	8005fcc <HAL_SPI_Receive_DMA>

    // Enfileira um frame de teste: AB "hello" 54
    (void)test_spi_send_hello();
 80013f4:	f7ff ff0f 	bl	8001216 <test_spi_send_hello>
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800a820 	.word	0x0800a820
 8001404:	0800a824 	.word	0x0800a824
 8001408:	0800a82c 	.word	0x0800a82c
 800140c:	0800a830 	.word	0x0800a830
 8001410:	2000013c 	.word	0x2000013c
 8001414:	2000011c 	.word	0x2000011c
 8001418:	200000d4 	.word	0x200000d4
 800141c:	20000140 	.word	0x20000140
 8001420:	20000244 	.word	0x20000244

08001424 <app_poll>:

void app_poll(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b092      	sub	sp, #72	@ 0x48
 8001428:	af00      	add	r7, sp, #0

    // If TX is idle, try to pop one response frame from FIFO and transmit
    if (!g_spi_tx_busy && g_resp_fifo) {
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <app_poll+0x50>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d11b      	bne.n	800146a <app_poll+0x46>
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <app_poll+0x54>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d017      	beq.n	800146a <app_poll+0x46>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <app_poll+0x54>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1d39      	adds	r1, r7, #4
 8001440:	2240      	movs	r2, #64	@ 0x40
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff faf5 	bl	8000a32 <resp_fifo_pop>
 8001448:	6478      	str	r0, [r7, #68]	@ 0x44
        if (n > 0) {
 800144a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd0c      	ble.n	800146a <app_poll+0x46>
            // Use interrupt-driven TX to avoid DMA mode constraints
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 8001450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001452:	b29a      	uxth	r2, r3
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	@ (800147c <app_poll+0x58>)
 800145a:	f004 fd21 	bl	8005ea0 <HAL_SPI_Transmit_IT>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <app_poll+0x46>
                g_spi_tx_busy = 1;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <app_poll+0x50>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
        }
    }

    // Lowest priority: drain log output (non-blocking, only if USART idle)
    //log_poll();
}
 800146a:	bf00      	nop
 800146c:	3748      	adds	r7, #72	@ 0x48
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000240 	.word	0x20000240
 8001478:	2000013c 	.word	0x2000013c
 800147c:	20000244 	.word	0x20000244

08001480 <app_on_spi_rx_half_complete>:

// Funções auxiliares invocadas por main.c a partir dos callbacks do HAL
void app_on_spi_rx_half_complete(SPI_HandleTypeDef *h) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <app_on_spi_rx_half_complete+0x22>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <app_on_spi_rx_half_complete+0x2c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d104      	bne.n	80014a2 <app_on_spi_rx_half_complete+0x22>
        router_feed_bytes(&g_router, g_spi_rx_buf, APP_SPI_RX_BUF_SZ / 2);
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	4905      	ldr	r1, [pc, #20]	@ (80014b0 <app_on_spi_rx_half_complete+0x30>)
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <app_on_spi_rx_half_complete+0x34>)
 800149e:	f7ff fa1b 	bl	80008d8 <router_feed_bytes>
    }
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013000 	.word	0x40013000
 80014b0:	20000140 	.word	0x20000140
 80014b4:	200000d4 	.word	0x200000d4

080014b8 <app_on_spi_rx_complete>:

void app_on_spi_rx_complete(SPI_HandleTypeDef *h) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00a      	beq.n	80014dc <app_on_spi_rx_complete+0x24>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <app_on_spi_rx_complete+0x2c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d105      	bne.n	80014dc <app_on_spi_rx_complete+0x24>
        router_feed_bytes(&g_router, g_spi_rx_buf + (APP_SPI_RX_BUF_SZ / 2), APP_SPI_RX_BUF_SZ / 2);
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <app_on_spi_rx_complete+0x30>)
 80014d2:	2280      	movs	r2, #128	@ 0x80
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <app_on_spi_rx_complete+0x34>)
 80014d8:	f7ff f9fe 	bl	80008d8 <router_feed_bytes>
    }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013000 	.word	0x40013000
 80014e8:	200001c0 	.word	0x200001c0
 80014ec:	200000d4 	.word	0x200000d4

080014f0 <app_on_spi_tx_complete>:

void app_on_spi_tx_complete(SPI_HandleTypeDef *h) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <app_on_spi_tx_complete+0x1e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a06      	ldr	r2, [pc, #24]	@ (800151c <app_on_spi_tx_complete+0x2c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d102      	bne.n	800150e <app_on_spi_tx_complete+0x1e>
        g_spi_tx_busy = 0;
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <app_on_spi_tx_complete+0x30>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40013000 	.word	0x40013000
 8001520:	20000240 	.word	0x20000240

08001524 <app_resp_push>:

int app_resp_push(const uint8_t *frame, uint32_t len) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0) return -1;
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <app_resp_push+0x3c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <app_resp_push+0x1e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <app_resp_push+0x1e>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <app_resp_push+0x24>
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e007      	b.n	8001558 <app_resp_push+0x34>
    return resp_fifo_push(g_resp_fifo, frame, len);
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <app_resp_push+0x3c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fa1a 	bl	800098a <resp_fifo_push>
 8001556:	4603      	mov	r3, r0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000013c 	.word	0x2000013c

08001564 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2224      	movs	r2, #36	@ 0x24
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f008 f947 	bl	8009808 <memset>
    TIM_MasterConfigTypeDef master = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8001586:	2303      	movs	r3, #3
 8001588:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800158e:	2301      	movs	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800159e:	2301      	movs	r3, #1
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f005 fded 	bl	8007190 <HAL_TIM_Encoder_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 80015bc:	f000 faec 	bl	8001b98 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f006 fd5a 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 80015da:	f000 fadd 	bl	8001b98 <Error_Handler>
    }
}
 80015de:	bf00      	nop
 80015e0:	3738      	adds	r7, #56	@ 0x38
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b08a      	sub	sp, #40	@ 0x28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f001 fe8f 	bl	800333c <HAL_GPIO_Init>
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <board_config_apply_motion_gpio>:

void board_config_apply_motion_gpio(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 800163c:	2203      	movs	r2, #3
 800163e:	2113      	movs	r1, #19
 8001640:	4824      	ldr	r0, [pc, #144]	@ (80016d4 <board_config_apply_motion_gpio+0xac>)
 8001642:	f7ff ffd0 	bl	80015e6 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001646:	2203      	movs	r2, #3
 8001648:	2104      	movs	r1, #4
 800164a:	4822      	ldr	r0, [pc, #136]	@ (80016d4 <board_config_apply_motion_gpio+0xac>)
 800164c:	f7ff ffcb 	bl	80015e6 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001650:	2203      	movs	r2, #3
 8001652:	210c      	movs	r1, #12
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f7ff ffc5 	bl	80015e6 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 800165c:	2200      	movs	r2, #0
 800165e:	2130      	movs	r1, #48	@ 0x30
 8001660:	481d      	ldr	r0, [pc, #116]	@ (80016d8 <board_config_apply_motion_gpio+0xb0>)
 8001662:	f7ff ffc0 	bl	80015e6 <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001670:	f7ff ffb9 	bl	80015e6 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2117      	movs	r1, #23
 8001678:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <board_config_apply_motion_gpio+0xac>)
 800167a:	f002 fa15 	bl	8003aa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	210c      	movs	r1, #12
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f002 fa0f 	bl	8003aa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	2130      	movs	r1, #48	@ 0x30
 800168e:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <board_config_apply_motion_gpio+0xb0>)
 8001690:	f002 fa0a 	bl	8003aa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f002 fa03 	bl	8003aa8 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016a2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016a6:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80016ac:	2307      	movs	r3, #7
 80016ae:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <board_config_apply_motion_gpio+0xb0>)
 80016b6:	f001 fe41 	bl	800333c <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 80016ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <board_config_apply_motion_gpio+0xb0>)
 80016c6:	f001 fe39 	bl	800333c <HAL_GPIO_Init>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000800 	.word	0x48000800

080016dc <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <board_config_force_encoder_quadrature+0x1c>)
 80016e2:	f7ff ff3f 	bl	8001564 <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <board_config_force_encoder_quadrature+0x20>)
 80016e8:	f7ff ff3c 	bl	8001564 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <board_config_force_encoder_quadrature+0x24>)
 80016ee:	f7ff ff39 	bl	8001564 <configure_encoder_timer>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000033c 	.word	0x2000033c
 80016fc:	20000388 	.word	0x20000388
 8001700:	200003d4 	.word	0x200003d4

08001704 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8001718:	2118      	movs	r1, #24
 800171a:	4811      	ldr	r0, [pc, #68]	@ (8001760 <board_config_remap_tim3_encoder_pins+0x5c>)
 800171c:	f002 f89a 	bl	8003854 <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <board_config_remap_tim3_encoder_pins+0x60>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001724:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <board_config_remap_tim3_encoder_pins+0x60>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <board_config_remap_tim3_encoder_pins+0x60>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001738:	23c0      	movs	r3, #192	@ 0xc0
 800173a:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 8001748:	2302      	movs	r3, #2
 800174a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <board_config_remap_tim3_encoder_pins+0x64>)
 8001752:	f001 fdf3 	bl	800333c <HAL_GPIO_Init>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	48001000 	.word	0x48001000
 8001764:	40021000 	.word	0x40021000
 8001768:	48000800 	.word	0x48000800

0800176c <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2006      	movs	r0, #6
 8001776:	f001 f951 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800177a:	2006      	movs	r0, #6
 800177c:	f001 f97a 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	2007      	movs	r0, #7
 8001786:	f001 f949 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800178a:	2007      	movs	r0, #7
 800178c:	f001 f972 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2008      	movs	r0, #8
 8001796:	f001 f941 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800179a:	2008      	movs	r0, #8
 800179c:	f001 f96a 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2028      	movs	r0, #40	@ 0x28
 80017a6:	f001 f939 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017aa:	2028      	movs	r0, #40	@ 0x28
 80017ac:	f001 f962 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2101      	movs	r1, #1
 80017b4:	2036      	movs	r0, #54	@ 0x36
 80017b6:	f001 f931 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ba:	2036      	movs	r0, #54	@ 0x36
 80017bc:	f001 f95a 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2102      	movs	r1, #2
 80017c4:	200c      	movs	r0, #12
 80017c6:	f001 f929 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017ca:	200c      	movs	r0, #12
 80017cc:	f001 f952 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2102      	movs	r1, #2
 80017d4:	200d      	movs	r0, #13
 80017d6:	f001 f921 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017da:	200d      	movs	r0, #13
 80017dc:	f001 f94a 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2103      	movs	r1, #3
 80017e4:	2037      	movs	r0, #55	@ 0x37
 80017e6:	f001 f919 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017ea:	2037      	movs	r0, #55	@ 0x37
 80017ec:	f001 f942 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2104      	movs	r1, #4
 80017f4:	2025      	movs	r0, #37	@ 0x25
 80017f6:	f001 f911 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017fa:	2025      	movs	r0, #37	@ 0x25
 80017fc:	f001 f93a 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2105      	movs	r1, #5
 8001804:	2023      	movs	r0, #35	@ 0x23
 8001806:	f001 f909 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800180a:	2023      	movs	r0, #35	@ 0x23
 800180c:	f001 f932 	bl	8002a74 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2106      	movs	r1, #6
 8001814:	2018      	movs	r0, #24
 8001816:	f001 f901 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800181a:	2018      	movs	r0, #24
 800181c:	f001 f92a 	bl	8002a74 <HAL_NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <board_config_apply_spi_dma_profile>:

void board_config_apply_spi_dma_profile(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    if (HAL_DMA_DeInit(&hdma_spi1_rx) != HAL_OK)
 8001828:	481d      	ldr	r0, [pc, #116]	@ (80018a0 <board_config_apply_spi_dma_profile+0x7c>)
 800182a:	f001 faff 	bl	8002e2c <HAL_DMA_DeInit>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <board_config_apply_spi_dma_profile+0x14>
    {
        Error_Handler();
 8001834:	f000 f9b0 	bl	8001b98 <Error_Handler>
    }
    /* RX circular e prioritário: evita perda de comandos do mestre SPI */
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <board_config_apply_spi_dma_profile+0x7c>)
 800183a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800183e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <board_config_apply_spi_dma_profile+0x7c>)
 8001842:	2220      	movs	r2, #32
 8001844:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001846:	4816      	ldr	r0, [pc, #88]	@ (80018a0 <board_config_apply_spi_dma_profile+0x7c>)
 8001848:	f001 f938 	bl	8002abc <HAL_DMA_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <board_config_apply_spi_dma_profile+0x32>
    {
        Error_Handler();
 8001852:	f000 f9a1 	bl	8001b98 <Error_Handler>
    }
    __HAL_LINKDMA(&hspi1, hdmarx, hdma_spi1_rx);
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <board_config_apply_spi_dma_profile+0x80>)
 8001858:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <board_config_apply_spi_dma_profile+0x7c>)
 800185a:	659a      	str	r2, [r3, #88]	@ 0x58
 800185c:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <board_config_apply_spi_dma_profile+0x7c>)
 800185e:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <board_config_apply_spi_dma_profile+0x80>)
 8001860:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_DMA_DeInit(&hdma_spi1_tx) != HAL_OK)
 8001862:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <board_config_apply_spi_dma_profile+0x84>)
 8001864:	f001 fae2 	bl	8002e2c <HAL_DMA_DeInit>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <board_config_apply_spi_dma_profile+0x4e>
    {
        Error_Handler();
 800186e:	f000 f993 	bl	8001b98 <Error_Handler>
    }
    /* TX em prioridade normal, disparado apenas quando há resposta no FIFO */
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <board_config_apply_spi_dma_profile+0x84>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <board_config_apply_spi_dma_profile+0x84>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800187e:	480a      	ldr	r0, [pc, #40]	@ (80018a8 <board_config_apply_spi_dma_profile+0x84>)
 8001880:	f001 f91c 	bl	8002abc <HAL_DMA_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <board_config_apply_spi_dma_profile+0x6a>
    {
        Error_Handler();
 800188a:	f000 f985 	bl	8001b98 <Error_Handler>
    }
    __HAL_LINKDMA(&hspi1, hdmatx, hdma_spi1_tx);
 800188e:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <board_config_apply_spi_dma_profile+0x80>)
 8001890:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <board_config_apply_spi_dma_profile+0x84>)
 8001892:	655a      	str	r2, [r3, #84]	@ 0x54
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <board_config_apply_spi_dma_profile+0x84>)
 8001896:	4a03      	ldr	r2, [pc, #12]	@ (80018a4 <board_config_apply_spi_dma_profile+0x80>)
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002a8 	.word	0x200002a8
 80018a4:	20000244 	.word	0x20000244
 80018a8:	200002f0 	.word	0x200002f0

080018ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_DMA_Init+0x48>)
 80018b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b6:	4a0f      	ldr	r2, [pc, #60]	@ (80018f4 <MX_DMA_Init+0x48>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80018be:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <MX_DMA_Init+0x48>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200c      	movs	r0, #12
 80018d0:	f001 f8a4 	bl	8002a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018d4:	200c      	movs	r0, #12
 80018d6:	f001 f8cd 	bl	8002a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	200d      	movs	r0, #13
 80018e0:	f001 f89c 	bl	8002a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018e4:	200d      	movs	r0, #13
 80018e6:	f001 f8c5 	bl	8002a74 <HAL_NVIC_EnableIRQ>

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000

080018f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	@ 0x30
 80018fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800190e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a4c      	ldr	r2, [pc, #304]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a46      	ldr	r2, [pc, #280]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	4a40      	ldr	r2, [pc, #256]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	4a34      	ldr	r2, [pc, #208]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197a:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <MX_GPIO_Init+0x14c>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800199e:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 80019a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4825      	ldr	r0, [pc, #148]	@ (8001a48 <MX_GPIO_Init+0x150>)
 80019b4:	f001 fcc2 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80019b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	481f      	ldr	r0, [pc, #124]	@ (8001a4c <MX_GPIO_Init+0x154>)
 80019ce:	f001 fcb5 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019d2:	2303      	movs	r3, #3
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d6:	2303      	movs	r3, #3
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	481a      	ldr	r0, [pc, #104]	@ (8001a50 <MX_GPIO_Init+0x158>)
 80019e6:	f001 fca9 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80019ea:	f641 730c 	movw	r3, #7948	@ 0x1f0c
 80019ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a02:	f001 fc9b 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001a06:	f64f 7337 	movw	r3, #65335	@ 0xff37
 8001a0a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480e      	ldr	r0, [pc, #56]	@ (8001a54 <MX_GPIO_Init+0x15c>)
 8001a1c:	f001 fc8e 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a24:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a26:	2303      	movs	r3, #3
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4808      	ldr	r0, [pc, #32]	@ (8001a58 <MX_GPIO_Init+0x160>)
 8001a36:	f001 fc81 	bl	800333c <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	@ 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48001c00 	.word	0x48001c00
 8001a54:	48000400 	.word	0x48000400
 8001a58:	48000c00 	.word	0x48000c00

08001a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f000 fe77 	bl	8002752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f823 	bl	8001aae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a68:	f7ff ff46 	bl	80018f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a6c:	f7ff ff1e 	bl	80018ac <MX_DMA_Init>
  MX_SPI1_Init();
 8001a70:	f000 f8b6 	bl	8001be0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001a74:	f000 fbd8 	bl	8002228 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001a78:	f000 fad6 	bl	8002028 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001a7c:	f000 fb7e 	bl	800217c <MX_TIM5_Init>
  MX_TIM7_Init();
 8001a80:	f000 fc08 	bl	8002294 <MX_TIM7_Init>
  MX_TIM15_Init();
 8001a84:	f000 fc3c 	bl	8002300 <MX_TIM15_Init>
  MX_TIM3_Init();
 8001a88:	f000 fb22 	bl	80020d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a8c:	f000 fdaa 	bl	80025e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8001a90:	f7ff fdca 	bl	8001628 <board_config_apply_motion_gpio>
    board_config_remap_tim3_encoder_pins();
 8001a94:	f7ff fe36 	bl	8001704 <board_config_remap_tim3_encoder_pins>
    board_config_force_encoder_quadrature();
 8001a98:	f7ff fe20 	bl	80016dc <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8001a9c:	f7ff fe66 	bl	800176c <board_config_apply_interrupt_priorities>
    board_config_apply_spi_dma_profile();
 8001aa0:	f7ff fec0 	bl	8001824 <board_config_apply_spi_dma_profile>
    app_init();
 8001aa4:	f7ff fc76 	bl	8001394 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8001aa8:	f7ff fcbc 	bl	8001424 <app_poll>
 8001aac:	e7fc      	b.n	8001aa8 <main+0x4c>

08001aae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b096      	sub	sp, #88	@ 0x58
 8001ab2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2244      	movs	r2, #68	@ 0x44
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 fea3 	bl	8009808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ad0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ad4:	f002 f846 	bl	8003b64 <HAL_PWREx_ControlVoltageScaling>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ade:	f000 f85b 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001aee:	2360      	movs	r3, #96	@ 0x60
 8001af0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af2:	2302      	movs	r3, #2
 8001af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001af6:	2301      	movs	r3, #1
 8001af8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001afe:	2328      	movs	r3, #40	@ 0x28
 8001b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b02:	2307      	movs	r3, #7
 8001b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 f888 	bl	8003c28 <HAL_RCC_OscConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b1e:	f000 f83b 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b22:	230f      	movs	r3, #15
 8001b24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b26:	2303      	movs	r3, #3
 8001b28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fd75 	bl	800462c <HAL_RCC_ClockConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b48:	f000 f826 	bl	8001b98 <Error_Handler>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3758      	adds	r7, #88	@ 0x58
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_SPI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  app_on_spi_rx_half_complete(hspi);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fc8f 	bl	8001480 <app_on_spi_rx_half_complete>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  app_on_spi_rx_complete(hspi);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fca0 	bl	80014b8 <app_on_spi_rx_complete>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  app_on_spi_tx_complete(hspi);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fcb1 	bl	80014f0 <app_on_spi_tx_complete>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	2164      	movs	r1, #100	@ 0x64
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff f9c2 	bl	8000f2c <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <Error_Handler+0x24>)
 8001baa:	4905      	ldr	r1, [pc, #20]	@ (8001bc0 <Error_Handler+0x28>)
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <Error_Handler+0x2c>)
 8001bae:	f7ff f9d1 	bl	8000f54 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb2:	b672      	cpsid	i
}
 8001bb4:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8001bb6:	bf00      	nop
 8001bb8:	e7fd      	b.n	8001bb6 <Error_Handler+0x1e>
 8001bba:	bf00      	nop
 8001bbc:	0800a838 	.word	0x0800a838
 8001bc0:	0800a848 	.word	0x0800a848
 8001bc4:	0800a850 	.word	0x0800a850

08001bc8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001be4:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001be6:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <MX_SPI1_Init+0x6c>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001bf8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001c36:	f003 ff45 	bl	8005ac4 <HAL_SPI_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001c40:	f7ff ffaa 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000244 	.word	0x20000244
 8001c4c:	40013000 	.word	0x40013000

08001c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a45      	ldr	r2, [pc, #276]	@ (8001d84 <HAL_SPI_MspInit+0x134>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	f040 8083 	bne.w	8001d7a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c74:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <HAL_SPI_MspInit+0x138>)
 8001c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c78:	4a43      	ldr	r2, [pc, #268]	@ (8001d88 <HAL_SPI_MspInit+0x138>)
 8001c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c80:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <HAL_SPI_MspInit+0x138>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d88 <HAL_SPI_MspInit+0x138>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	4a3d      	ldr	r2, [pc, #244]	@ (8001d88 <HAL_SPI_MspInit+0x138>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c98:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <HAL_SPI_MspInit+0x138>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca4:	23f0      	movs	r3, #240	@ 0xf0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb4:	2305      	movs	r3, #5
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc2:	f001 fb3b 	bl	800333c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001cc6:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cc8:	4a31      	ldr	r2, [pc, #196]	@ (8001d90 <HAL_SPI_MspInit+0x140>)
 8001cca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cde:	4b2b      	ldr	r3, [pc, #172]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce4:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cea:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001cf0:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cf6:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cfc:	4823      	ldr	r0, [pc, #140]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001cfe:	f000 fedd 	bl	8002abc <HAL_DMA_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8001d08:	f7ff ff46 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001d10:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d12:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <HAL_SPI_MspInit+0x13c>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d98 <HAL_SPI_MspInit+0x148>)
 8001d1c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d26:	2210      	movs	r2, #16
 8001d28:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001d42:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d4e:	4811      	ldr	r0, [pc, #68]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d50:	f000 feb4 	bl	8002abc <HAL_DMA_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001d5a:	f7ff ff1d 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_SPI_MspInit+0x144>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2023      	movs	r0, #35	@ 0x23
 8001d70:	f000 fe54 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d74:	2023      	movs	r0, #35	@ 0x23
 8001d76:	f000 fe7d 	bl	8002a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40013000 	.word	0x40013000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	200002a8 	.word	0x200002a8
 8001d90:	4002001c 	.word	0x4002001c
 8001d94:	200002f0 	.word	0x200002f0
 8001d98:	40020030 	.word	0x40020030

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_MspInit+0x44>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da6:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <HAL_MspInit+0x44>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_MspInit+0x44>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3a:	f000 fcdf 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <DMA1_Channel2_IRQHandler+0x10>)
 8001e4a:	f001 f998 	bl	800317e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200002a8 	.word	0x200002a8

08001e58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <DMA1_Channel3_IRQHandler+0x10>)
 8001e5e:	f001 f98e 	bl	800317e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200002f0 	.word	0x200002f0

08001e6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <SPI1_IRQHandler+0x10>)
 8001e72:	f004 fb83 	bl	800657c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000244 	.word	0x20000244

08001e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <TIM6_DAC_IRQHandler+0x10>)
 8001e86:	f005 fb45 	bl	8007514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000420 	.word	0x20000420

08001e94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <TIM7_IRQHandler+0x10>)
 8001e9a:	f005 fb3b 	bl	8007514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000046c 	.word	0x2000046c

08001ea8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001eae:	f005 fb31 	bl	8007514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004b8 	.word	0x200004b8

08001ebc <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f001 fe1d 	bl	8003b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f001 fe16 	bl	8003b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001edc:	2004      	movs	r0, #4
 8001ede:	f001 fe0f 	bl	8003b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001eea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001eee:	f001 fe07 	bl	8003b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e00a      	b.n	8001f1e <_read+0x28>
		*ptr++ = __io_getchar();
 8001f08:	f3af 8000 	nop.w
 8001f0c:	4601      	mov	r1, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	60ba      	str	r2, [r7, #8]
 8001f14:	b2ca      	uxtb	r2, r1
 8001f16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	dbf0      	blt.n	8001f08 <_read+0x12>
	}

	return len;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f58:	605a      	str	r2, [r3, #4]
	return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_isatty>:

int _isatty(int file) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001f70:	2301      	movs	r3, #1
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
		errno = ENOMEM;
 8001fc8:	f007 fc7c 	bl	80098c4 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20018000 	.word	0x20018000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000338 	.word	0x20000338
 8002000:	200006e0 	.word	0x200006e0

08002004 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2224      	movs	r2, #36	@ 0x24
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f007 fbe6 	bl	8009808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	463b      	mov	r3, r7
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <MX_TIM2_Init+0xa4>)
 8002048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800204e:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <MX_TIM2_Init+0xa4>)
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <MX_TIM2_Init+0xa4>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <MX_TIM2_Init+0xa4>)
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_TIM2_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <MX_TIM2_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800206e:	2301      	movs	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002076:	2301      	movs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	4619      	mov	r1, r3
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <MX_TIM2_Init+0xa4>)
 800209a:	f005 f879 	bl	8007190 <HAL_TIM_Encoder_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80020a4:	f7ff fd78 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b0:	463b      	mov	r3, r7
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_TIM2_Init+0xa4>)
 80020b6:	f005 ffe7 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80020c0:	f7ff fd6a 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000033c 	.word	0x2000033c

080020d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	@ 0x30
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2224      	movs	r2, #36	@ 0x24
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f007 fb92 	bl	8009808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <MX_TIM3_Init+0xa4>)
 80020f0:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <MX_TIM3_Init+0xa8>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <MX_TIM3_Init+0xa4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <MX_TIM3_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002100:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <MX_TIM3_Init+0xa4>)
 8002102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002106:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_TIM3_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210e:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <MX_TIM3_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002114:	2301      	movs	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800212c:	2301      	movs	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4619      	mov	r1, r3
 800213e:	480d      	ldr	r0, [pc, #52]	@ (8002174 <MX_TIM3_Init+0xa4>)
 8002140:	f005 f826 	bl	8007190 <HAL_TIM_Encoder_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800214a:	f7ff fd25 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002156:	463b      	mov	r3, r7
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	@ (8002174 <MX_TIM3_Init+0xa4>)
 800215c:	f005 ff94 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002166:	f7ff fd17 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	@ 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000388 	.word	0x20000388
 8002178:	40000400 	.word	0x40000400

0800217c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	@ 0x30
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	2224      	movs	r2, #36	@ 0x24
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f007 fb3c 	bl	8009808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	463b      	mov	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800219a:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <MX_TIM5_Init+0xa4>)
 800219c:	4a21      	ldr	r2, [pc, #132]	@ (8002224 <MX_TIM5_Init+0xa8>)
 800219e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <MX_TIM5_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <MX_TIM5_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <MX_TIM5_Init+0xa4>)
 80021ae:	f04f 32ff 	mov.w	r2, #4294967295
 80021b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <MX_TIM5_Init+0xa4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <MX_TIM5_Init+0xa4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021c8:	2301      	movs	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021d8:	2301      	movs	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4619      	mov	r1, r3
 80021ea:	480d      	ldr	r0, [pc, #52]	@ (8002220 <MX_TIM5_Init+0xa4>)
 80021ec:	f004 ffd0 	bl	8007190 <HAL_TIM_Encoder_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80021f6:	f7ff fccf 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002202:	463b      	mov	r3, r7
 8002204:	4619      	mov	r1, r3
 8002206:	4806      	ldr	r0, [pc, #24]	@ (8002220 <MX_TIM5_Init+0xa4>)
 8002208:	f005 ff3e 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002212:	f7ff fcc1 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	3730      	adds	r7, #48	@ 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003d4 	.word	0x200003d4
 8002224:	40000c00 	.word	0x40000c00

08002228 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <MX_TIM6_Init+0x64>)
 800223a:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <MX_TIM6_Init+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800223e:	4b13      	ldr	r3, [pc, #76]	@ (800228c <MX_TIM6_Init+0x64>)
 8002240:	224f      	movs	r2, #79	@ 0x4f
 8002242:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_TIM6_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <MX_TIM6_Init+0x64>)
 800224c:	2213      	movs	r2, #19
 800224e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <MX_TIM6_Init+0x64>)
 8002252:	2280      	movs	r2, #128	@ 0x80
 8002254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <MX_TIM6_Init+0x64>)
 8002258:	f004 fddc 	bl	8006e14 <HAL_TIM_Base_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002262:	f7ff fc99 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002266:	2320      	movs	r3, #32
 8002268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	@ (800228c <MX_TIM6_Init+0x64>)
 8002274:	f005 ff08 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800227e:	f7ff fc8b 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000420 	.word	0x20000420
 8002290:	40001000 	.word	0x40001000

08002294 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022a6:	4a15      	ldr	r2, [pc, #84]	@ (80022fc <MX_TIM7_Init+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022ac:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022ba:	2209      	movs	r2, #9
 80022bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022c0:	2280      	movs	r2, #128	@ 0x80
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022c6:	f004 fda5 	bl	8006e14 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022d0:	f7ff fc62 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022e2:	f005 fed1 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80022ec:	f7ff fc54 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000046c 	.word	0x2000046c
 80022fc:	40001400 	.word	0x40001400

08002300 <MX_TIM15_Init>:

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800231e:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002320:	4a1f      	ldr	r2, [pc, #124]	@ (80023a0 <MX_TIM15_Init+0xa0>)
 8002322:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002326:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800232a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <MX_TIM15_Init+0x9c>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9;
 8002332:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002334:	2209      	movs	r2, #9
 8002336:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b18      	ldr	r3, [pc, #96]	@ (800239c <MX_TIM15_Init+0x9c>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800233e:	4b17      	ldr	r3, [pc, #92]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002346:	2280      	movs	r2, #128	@ 0x80
 8002348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800234a:	4814      	ldr	r0, [pc, #80]	@ (800239c <MX_TIM15_Init+0x9c>)
 800234c:	f004 fd62 	bl	8006e14 <HAL_TIM_Base_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002356:	f7ff fc1f 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800235a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	4619      	mov	r1, r3
 8002366:	480d      	ldr	r0, [pc, #52]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002368:	f005 f9dc 	bl	8007724 <HAL_TIM_ConfigClockSource>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002372:	f7ff fc11 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4806      	ldr	r0, [pc, #24]	@ (800239c <MX_TIM15_Init+0x9c>)
 8002384:	f005 fe80 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800238e:	f7ff fc03 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200004b8 	.word	0x200004b8
 80023a0:	40014000 	.word	0x40014000

080023a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	@ 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c4:	d146      	bne.n	8002454 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c6:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	4a52      	ldr	r2, [pc, #328]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d2:	4b50      	ldr	r3, [pc, #320]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	4a46      	ldr	r2, [pc, #280]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800240e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002420:	2301      	movs	r3, #1
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800242e:	f000 ff85 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002432:	2308      	movs	r3, #8
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002442:	2301      	movs	r3, #1
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800244a:	4619      	mov	r1, r3
 800244c:	4832      	ldr	r0, [pc, #200]	@ (8002518 <HAL_TIM_Encoder_MspInit+0x174>)
 800244e:	f000 ff75 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002452:	e05b      	b.n	800250c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a30      	ldr	r2, [pc, #192]	@ (800251c <HAL_TIM_Encoder_MspInit+0x178>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d128      	bne.n	80024b0 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245e:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a2c      	ldr	r2, [pc, #176]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002476:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 800247c:	f043 0310 	orr.w	r3, r3, #16
 8002480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800248e:	2318      	movs	r3, #24
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800249e:	2302      	movs	r3, #2
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a6:	4619      	mov	r1, r3
 80024a8:	481d      	ldr	r0, [pc, #116]	@ (8002520 <HAL_TIM_Encoder_MspInit+0x17c>)
 80024aa:	f000 ff47 	bl	800333c <HAL_GPIO_Init>
}
 80024ae:	e02d      	b.n	800250c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <HAL_TIM_Encoder_MspInit+0x180>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d128      	bne.n	800250c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024ba:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x170>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ea:	2303      	movs	r3, #3
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024fa:	2302      	movs	r3, #2
 80024fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002502:	4619      	mov	r1, r3
 8002504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002508:	f000 ff18 	bl	800333c <HAL_GPIO_Init>
}
 800250c:	bf00      	nop
 800250e:	3738      	adds	r7, #56	@ 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400
 800251c:	40000400 	.word	0x40000400
 8002520:	48001000 	.word	0x48001000
 8002524:	40000c00 	.word	0x40000c00

08002528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a27      	ldr	r2, [pc, #156]	@ (80025d4 <HAL_TIM_Base_MspInit+0xac>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d114      	bne.n	8002564 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800253a:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	4a26      	ldr	r2, [pc, #152]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	6593      	str	r3, [r2, #88]	@ 0x58
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2036      	movs	r0, #54	@ 0x36
 8002558:	f000 fa60 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800255c:	2036      	movs	r0, #54	@ 0x36
 800255e:	f000 fa89 	bl	8002a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002562:	e032      	b.n	80025ca <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1c      	ldr	r2, [pc, #112]	@ (80025dc <HAL_TIM_Base_MspInit+0xb4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d114      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	4a19      	ldr	r2, [pc, #100]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	6593      	str	r3, [r2, #88]	@ 0x58
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	2037      	movs	r0, #55	@ 0x37
 800258c:	f000 fa46 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002590:	2037      	movs	r0, #55	@ 0x37
 8002592:	f000 fa6f 	bl	8002a74 <HAL_NVIC_EnableIRQ>
}
 8002596:	e018      	b.n	80025ca <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <HAL_TIM_Base_MspInit+0xb8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d113      	bne.n	80025ca <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 80025a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a6:	4a0c      	ldr	r2, [pc, #48]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 80025b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2018      	movs	r0, #24
 80025c0:	f000 fa2c 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80025c4:	2018      	movs	r0, #24
 80025c6:	f000 fa55 	bl	8002a74 <HAL_NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40001000 	.word	0x40001000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40001400 	.word	0x40001400
 80025e0:	40014000 	.word	0x40014000

080025e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025e8:	4b14      	ldr	r3, [pc, #80]	@ (800263c <MX_USART1_UART_Init+0x58>)
 80025ea:	4a15      	ldr	r2, [pc, #84]	@ (8002640 <MX_USART1_UART_Init+0x5c>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <MX_USART1_UART_Init+0x58>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b11      	ldr	r3, [pc, #68]	@ (800263c <MX_USART1_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	@ (800263c <MX_USART1_UART_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <MX_USART1_UART_Init+0x58>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <MX_USART1_UART_Init+0x58>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <MX_USART1_UART_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b09      	ldr	r3, [pc, #36]	@ (800263c <MX_USART1_UART_Init+0x58>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <MX_USART1_UART_Init+0x58>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <MX_USART1_UART_Init+0x58>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <MX_USART1_UART_Init+0x58>)
 8002628:	f005 fea2 	bl	8008370 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002632:	f7ff fab1 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000504 	.word	0x20000504
 8002640:	40013800 	.word	0x40013800

08002644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0ac      	sub	sp, #176	@ 0xb0
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2288      	movs	r2, #136	@ 0x88
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f007 f8cf 	bl	8009808 <memset>
  if(uartHandle->Instance==USART1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a21      	ldr	r2, [pc, #132]	@ (80026f4 <HAL_UART_MspInit+0xb0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d13a      	bne.n	80026ea <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002674:	2301      	movs	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002678:	2300      	movs	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fa97 	bl	8004bb4 <HAL_RCCEx_PeriphCLKConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800268c:	f7ff fa84 	bl	8001b98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_UART_MspInit+0xb4>)
 8002692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002694:	4a18      	ldr	r2, [pc, #96]	@ (80026f8 <HAL_UART_MspInit+0xb4>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269a:	6613      	str	r3, [r2, #96]	@ 0x60
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_UART_MspInit+0xb4>)
 800269e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_UART_MspInit+0xb4>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ac:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <HAL_UART_MspInit+0xb4>)
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_UART_MspInit+0xb4>)
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026c0:	23c0      	movs	r3, #192	@ 0xc0
 80026c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026d8:	2307      	movs	r3, #7
 80026da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	@ (80026fc <HAL_UART_MspInit+0xb8>)
 80026e6:	f000 fe29 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026ea:	bf00      	nop
 80026ec:	37b0      	adds	r7, #176	@ 0xb0
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	48000400 	.word	0x48000400

08002700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002738 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002704:	f7ff fc7e 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <LoopForever+0x6>)
  ldr r1, =_edata
 800270a:	490d      	ldr	r1, [pc, #52]	@ (8002740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <LoopForever+0xe>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002720:	4c0a      	ldr	r4, [pc, #40]	@ (800274c <LoopForever+0x16>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272e:	f007 f8cf 	bl	80098d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002732:	f7ff f993 	bl	8001a5c <main>

08002736 <LoopForever>:

LoopForever:
    b LoopForever
 8002736:	e7fe      	b.n	8002736 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002738:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002744:	0800ab28 	.word	0x0800ab28
  ldr r2, =_sbss
 8002748:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800274c:	200006dc 	.word	0x200006dc

08002750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_2_IRQHandler>

08002752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f93d 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002762:	200f      	movs	r0, #15
 8002764:	f000 f80e 	bl	8002784 <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	e001      	b.n	8002778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002774:	f7ff fb12 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002778:	79fb      	ldrb	r3, [r7, #7]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <HAL_InitTick+0x6c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d023      	beq.n	80027e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002798:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_InitTick+0x70>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_InitTick+0x6c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f978 	bl	8002aa4 <HAL_SYSTICK_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b0f      	cmp	r3, #15
 80027be:	d809      	bhi.n	80027d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c0:	2200      	movs	r2, #0
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f000 f928 	bl	8002a1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027cc:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <HAL_InitTick+0x74>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e007      	b.n	80027e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e004      	b.n	80027e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e001      	b.n	80027e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000030 	.word	0x20000030
 80027f4:	20000028 	.word	0x20000028
 80027f8:	2000002c 	.word	0x2000002c

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002800:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_IncTick+0x20>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_IncTick+0x24>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_IncTick+0x24>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000030 	.word	0x20000030
 8002820:	2000058c 	.word	0x2000058c

08002824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <HAL_GetTick+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2000058c 	.word	0x2000058c

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4907      	ldr	r1, [pc, #28]	@ (80028d8 <__NVIC_EnableIRQ+0x38>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	@ (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff8e 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b07      	cmp	r3, #7
 80029e8:	d00f      	beq.n	8002a0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d00c      	beq.n	8002a0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d009      	beq.n	8002a0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d006      	beq.n	8002a0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d003      	beq.n	8002a0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a02:	21a6      	movs	r1, #166	@ 0xa6
 8002a04:	4804      	ldr	r0, [pc, #16]	@ (8002a18 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002a06:	f7ff f8df 	bl	8001bc8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff16 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	0800a854 	.word	0x0800a854

08002a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d903      	bls.n	8002a3c <HAL_NVIC_SetPriority+0x20>
 8002a34:	21be      	movs	r1, #190	@ 0xbe
 8002a36:	480e      	ldr	r0, [pc, #56]	@ (8002a70 <HAL_NVIC_SetPriority+0x54>)
 8002a38:	f7ff f8c6 	bl	8001bc8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	d903      	bls.n	8002a4a <HAL_NVIC_SetPriority+0x2e>
 8002a42:	21bf      	movs	r1, #191	@ 0xbf
 8002a44:	480a      	ldr	r0, [pc, #40]	@ (8002a70 <HAL_NVIC_SetPriority+0x54>)
 8002a46:	f7ff f8bf 	bl	8001bc8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4a:	f7ff ff1b 	bl	8002884 <__NVIC_GetPriorityGrouping>
 8002a4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	6978      	ldr	r0, [r7, #20]
 8002a56:	f7ff ff6b 	bl	8002930 <NVIC_EncodePriority>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff3a 	bl	80028dc <__NVIC_SetPriority>
}
 8002a68:	bf00      	nop
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	0800a854 	.word	0x0800a854

08002a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da03      	bge.n	8002a8e <HAL_NVIC_EnableIRQ+0x1a>
 8002a86:	21d2      	movs	r1, #210	@ 0xd2
 8002a88:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <HAL_NVIC_EnableIRQ+0x2c>)
 8002a8a:	f7ff f89d 	bl	8001bc8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff04 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	0800a854 	.word	0x0800a854

08002aa4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff73 	bl	8002998 <SysTick_Config>
 8002ab2:	4603      	mov	r3, r0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e19d      	b.n	8002e0a <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a79      	ldr	r2, [pc, #484]	@ (8002cb8 <HAL_DMA_Init+0x1fc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d044      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a77      	ldr	r2, [pc, #476]	@ (8002cbc <HAL_DMA_Init+0x200>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03f      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a76      	ldr	r2, [pc, #472]	@ (8002cc0 <HAL_DMA_Init+0x204>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d03a      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a74      	ldr	r2, [pc, #464]	@ (8002cc4 <HAL_DMA_Init+0x208>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d035      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a73      	ldr	r2, [pc, #460]	@ (8002cc8 <HAL_DMA_Init+0x20c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d030      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a71      	ldr	r2, [pc, #452]	@ (8002ccc <HAL_DMA_Init+0x210>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02b      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a70      	ldr	r2, [pc, #448]	@ (8002cd0 <HAL_DMA_Init+0x214>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d026      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd4 <HAL_DMA_Init+0x218>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d021      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6d      	ldr	r2, [pc, #436]	@ (8002cd8 <HAL_DMA_Init+0x21c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d01c      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002cdc <HAL_DMA_Init+0x220>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d017      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce0 <HAL_DMA_Init+0x224>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d012      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a68      	ldr	r2, [pc, #416]	@ (8002ce4 <HAL_DMA_Init+0x228>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a67      	ldr	r2, [pc, #412]	@ (8002ce8 <HAL_DMA_Init+0x22c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a65      	ldr	r2, [pc, #404]	@ (8002cec <HAL_DMA_Init+0x230>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <HAL_DMA_Init+0xa6>
 8002b5a:	21a5      	movs	r1, #165	@ 0xa5
 8002b5c:	4864      	ldr	r0, [pc, #400]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002b5e:	f7ff f833 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_DMA_Init+0xc8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d008      	beq.n	8002b84 <HAL_DMA_Init+0xc8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA_Init+0xc8>
 8002b7c:	21a6      	movs	r1, #166	@ 0xa6
 8002b7e:	485c      	ldr	r0, [pc, #368]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002b80:	f7ff f822 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d007      	beq.n	8002b9c <HAL_DMA_Init+0xe0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_Init+0xe0>
 8002b94:	21a7      	movs	r1, #167	@ 0xa7
 8002b96:	4856      	ldr	r0, [pc, #344]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002b98:	f7ff f816 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b80      	cmp	r3, #128	@ 0x80
 8002ba2:	d007      	beq.n	8002bb4 <HAL_DMA_Init+0xf8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_DMA_Init+0xf8>
 8002bac:	21a8      	movs	r1, #168	@ 0xa8
 8002bae:	4850      	ldr	r0, [pc, #320]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002bb0:	f7ff f80a 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_DMA_Init+0x11c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc4:	d008      	beq.n	8002bd8 <HAL_DMA_Init+0x11c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMA_Init+0x11c>
 8002bd0:	21a9      	movs	r1, #169	@ 0xa9
 8002bd2:	4847      	ldr	r0, [pc, #284]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002bd4:	f7fe fff8 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_DMA_Init+0x140>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be8:	d008      	beq.n	8002bfc <HAL_DMA_Init+0x140>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_Init+0x140>
 8002bf4:	21aa      	movs	r1, #170	@ 0xaa
 8002bf6:	483e      	ldr	r0, [pc, #248]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002bf8:	f7fe ffe6 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Init+0x158>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_Init+0x158>
 8002c0c:	21ab      	movs	r1, #171	@ 0xab
 8002c0e:	4838      	ldr	r0, [pc, #224]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002c10:	f7fe ffda 	bl	8001bc8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <HAL_DMA_Init+0x186>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c24:	d00d      	beq.n	8002c42 <HAL_DMA_Init+0x186>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2e:	d008      	beq.n	8002c42 <HAL_DMA_Init+0x186>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA_Init+0x186>
 8002c3a:	21ac      	movs	r1, #172	@ 0xac
 8002c3c:	482c      	ldr	r0, [pc, #176]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002c3e:	f7fe ffc3 	bl	8001bc8 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01f      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d01b      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d017      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d013      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d00f      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d00b      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d007      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b07      	cmp	r3, #7
 8002c80:	d003      	beq.n	8002c8a <HAL_DMA_Init+0x1ce>
 8002c82:	21ae      	movs	r1, #174	@ 0xae
 8002c84:	481a      	ldr	r0, [pc, #104]	@ (8002cf0 <HAL_DMA_Init+0x234>)
 8002c86:	f7fe ff9f 	bl	8001bc8 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <HAL_DMA_Init+0x238>)
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d836      	bhi.n	8002d04 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <HAL_DMA_Init+0x23c>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a16      	ldr	r2, [pc, #88]	@ (8002cfc <HAL_DMA_Init+0x240>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	009a      	lsls	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a13      	ldr	r2, [pc, #76]	@ (8002d00 <HAL_DMA_Init+0x244>)
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cb4:	e035      	b.n	8002d22 <HAL_DMA_Init+0x266>
 8002cb6:	bf00      	nop
 8002cb8:	40020008 	.word	0x40020008
 8002cbc:	4002001c 	.word	0x4002001c
 8002cc0:	40020030 	.word	0x40020030
 8002cc4:	40020044 	.word	0x40020044
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	4002006c 	.word	0x4002006c
 8002cd0:	40020080 	.word	0x40020080
 8002cd4:	40020408 	.word	0x40020408
 8002cd8:	4002041c 	.word	0x4002041c
 8002cdc:	40020430 	.word	0x40020430
 8002ce0:	40020444 	.word	0x40020444
 8002ce4:	40020458 	.word	0x40020458
 8002ce8:	4002046c 	.word	0x4002046c
 8002cec:	40020480 	.word	0x40020480
 8002cf0:	0800a890 	.word	0x0800a890
 8002cf4:	40020407 	.word	0x40020407
 8002cf8:	bffdfff8 	.word	0xbffdfff8
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b42      	ldr	r3, [pc, #264]	@ (8002e14 <HAL_DMA_Init+0x358>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a42      	ldr	r2, [pc, #264]	@ (8002e18 <HAL_DMA_Init+0x35c>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	009a      	lsls	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e1c <HAL_DMA_Init+0x360>)
 8002d20:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d7c:	d039      	beq.n	8002df2 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	4a27      	ldr	r2, [pc, #156]	@ (8002e20 <HAL_DMA_Init+0x364>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d11a      	bne.n	8002dbe <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d88:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <HAL_DMA_Init+0x368>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	f003 031c 	and.w	r3, r3, #28
 8002d94:	210f      	movs	r1, #15
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	4921      	ldr	r1, [pc, #132]	@ (8002e24 <HAL_DMA_Init+0x368>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002da2:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_DMA_Init+0x368>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	f003 031c 	and.w	r3, r3, #28
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	491b      	ldr	r1, [pc, #108]	@ (8002e24 <HAL_DMA_Init+0x368>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	e019      	b.n	8002df2 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <HAL_DMA_Init+0x36c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	f003 031c 	and.w	r3, r3, #28
 8002dca:	210f      	movs	r1, #15
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4915      	ldr	r1, [pc, #84]	@ (8002e28 <HAL_DMA_Init+0x36c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <HAL_DMA_Init+0x36c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	f003 031c 	and.w	r3, r3, #28
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	490e      	ldr	r1, [pc, #56]	@ (8002e28 <HAL_DMA_Init+0x36c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	bffdfbf8 	.word	0xbffdfbf8
 8002e18:	cccccccd 	.word	0xcccccccd
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	40020000 	.word	0x40020000
 8002e24:	400200a8 	.word	0x400200a8
 8002e28:	400204a8 	.word	0x400204a8

08002e2c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0bd      	b.n	8002fba <HAL_DMA_DeInit+0x18e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a60      	ldr	r2, [pc, #384]	@ (8002fc4 <HAL_DMA_DeInit+0x198>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d045      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc8 <HAL_DMA_DeInit+0x19c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d040      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a5d      	ldr	r2, [pc, #372]	@ (8002fcc <HAL_DMA_DeInit+0x1a0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d03b      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd0 <HAL_DMA_DeInit+0x1a4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d036      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_DMA_DeInit+0x1a8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a58      	ldr	r2, [pc, #352]	@ (8002fd8 <HAL_DMA_DeInit+0x1ac>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02c      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a57      	ldr	r2, [pc, #348]	@ (8002fdc <HAL_DMA_DeInit+0x1b0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d027      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a55      	ldr	r2, [pc, #340]	@ (8002fe0 <HAL_DMA_DeInit+0x1b4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d022      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a54      	ldr	r2, [pc, #336]	@ (8002fe4 <HAL_DMA_DeInit+0x1b8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01d      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	@ (8002fe8 <HAL_DMA_DeInit+0x1bc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d018      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a51      	ldr	r2, [pc, #324]	@ (8002fec <HAL_DMA_DeInit+0x1c0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff0 <HAL_DMA_DeInit+0x1c4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff4 <HAL_DMA_DeInit+0x1c8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff8 <HAL_DMA_DeInit+0x1cc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_DeInit+0xa8>
 8002eca:	f240 1131 	movw	r1, #305	@ 0x131
 8002ece:	484b      	ldr	r0, [pc, #300]	@ (8002ffc <HAL_DMA_DeInit+0x1d0>)
 8002ed0:	f7fe fe7a 	bl	8001bc8 <assert_failed>

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b45      	ldr	r3, [pc, #276]	@ (8003000 <HAL_DMA_DeInit+0x1d4>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d80f      	bhi.n	8002f10 <HAL_DMA_DeInit+0xe4>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b43      	ldr	r3, [pc, #268]	@ (8003004 <HAL_DMA_DeInit+0x1d8>)
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a43      	ldr	r2, [pc, #268]	@ (8003008 <HAL_DMA_DeInit+0x1dc>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a40      	ldr	r2, [pc, #256]	@ (800300c <HAL_DMA_DeInit+0x1e0>)
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f0e:	e00e      	b.n	8002f2e <HAL_DMA_DeInit+0x102>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b3e      	ldr	r3, [pc, #248]	@ (8003010 <HAL_DMA_DeInit+0x1e4>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003008 <HAL_DMA_DeInit+0x1dc>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8003014 <HAL_DMA_DeInit+0x1e8>)
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f003 021c 	and.w	r2, r3, #28
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <HAL_DMA_DeInit+0x1e0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10d      	bne.n	8002f70 <HAL_DMA_DeInit+0x144>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_DMA_DeInit+0x1ec>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5c:	f003 031c 	and.w	r3, r3, #28
 8002f60:	210f      	movs	r1, #15
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	492b      	ldr	r1, [pc, #172]	@ (8003018 <HAL_DMA_DeInit+0x1ec>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
 8002f6e:	e00c      	b.n	8002f8a <HAL_DMA_DeInit+0x15e>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f70:	4b2a      	ldr	r3, [pc, #168]	@ (800301c <HAL_DMA_DeInit+0x1f0>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f003 031c 	and.w	r3, r3, #28
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4925      	ldr	r1, [pc, #148]	@ (800301c <HAL_DMA_DeInit+0x1f0>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40020008 	.word	0x40020008
 8002fc8:	4002001c 	.word	0x4002001c
 8002fcc:	40020030 	.word	0x40020030
 8002fd0:	40020044 	.word	0x40020044
 8002fd4:	40020058 	.word	0x40020058
 8002fd8:	4002006c 	.word	0x4002006c
 8002fdc:	40020080 	.word	0x40020080
 8002fe0:	40020408 	.word	0x40020408
 8002fe4:	4002041c 	.word	0x4002041c
 8002fe8:	40020430 	.word	0x40020430
 8002fec:	40020444 	.word	0x40020444
 8002ff0:	40020458 	.word	0x40020458
 8002ff4:	4002046c 	.word	0x4002046c
 8002ff8:	40020480 	.word	0x40020480
 8002ffc:	0800a890 	.word	0x0800a890
 8003000:	40020407 	.word	0x40020407
 8003004:	bffdfff8 	.word	0xbffdfff8
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	40020000 	.word	0x40020000
 8003010:	bffdfbf8 	.word	0xbffdfbf8
 8003014:	40020400 	.word	0x40020400
 8003018:	400200a8 	.word	0x400200a8
 800301c:	400204a8 	.word	0x400204a8

08003020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_Start_IT+0x20>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303e:	d304      	bcc.n	800304a <HAL_DMA_Start_IT+0x2a>
 8003040:	f240 11df 	movw	r1, #479	@ 0x1df
 8003044:	482c      	ldr	r0, [pc, #176]	@ (80030f8 <HAL_DMA_Start_IT+0xd8>)
 8003046:	f7fe fdbf 	bl	8001bc8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_DMA_Start_IT+0x38>
 8003054:	2302      	movs	r3, #2
 8003056:	e04b      	b.n	80030f0 <HAL_DMA_Start_IT+0xd0>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d13a      	bne.n	80030e2 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f923 	bl	80032dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 020e 	orr.w	r2, r2, #14
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00f      	b.n	80030d0 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 020a 	orr.w	r2, r2, #10
 80030ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e005      	b.n	80030ee <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
 80030ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	0800a890 	.word	0x0800a890

080030fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d005      	beq.n	8003120 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2204      	movs	r2, #4
 8003118:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e029      	b.n	8003174 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 020e 	bic.w	r2, r2, #14
 800312e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	f003 021c 	and.w	r2, r3, #28
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
    }
  }
  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f003 031c 	and.w	r3, r3, #28
 800319e:	2204      	movs	r2, #4
 80031a0:	409a      	lsls	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d026      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x7a>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d021      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0204 	bic.w	r2, r2, #4
 80031d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f003 021c 	and.w	r2, r3, #28
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	2104      	movs	r1, #4
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d071      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031f6:	e06c      	b.n	80032d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	f003 031c 	and.w	r3, r3, #28
 8003200:	2202      	movs	r2, #2
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02e      	beq.n	800326a <HAL_DMA_IRQHandler+0xec>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d029      	beq.n	800326a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 020a 	bic.w	r2, r2, #10
 8003232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003240:	f003 021c 	and.w	r2, r3, #28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	2102      	movs	r1, #2
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d038      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003268:	e033      	b.n	80032d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f003 031c 	and.w	r3, r3, #28
 8003272:	2208      	movs	r2, #8
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02a      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x156>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d025      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020e 	bic.w	r2, r2, #14
 8003296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	f003 021c 	and.w	r2, r3, #28
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
}
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f003 021c 	and.w	r2, r3, #28
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f202 	lsl.w	r2, r1, r2
 80032fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b10      	cmp	r3, #16
 800330c:	d108      	bne.n	8003320 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800331e:	e007      	b.n	8003330 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003350:	d01f      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a3c      	ldr	r2, [pc, #240]	@ (8003448 <HAL_GPIO_Init+0x10c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a3b      	ldr	r2, [pc, #236]	@ (800344c <HAL_GPIO_Init+0x110>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d017      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a3a      	ldr	r2, [pc, #232]	@ (8003450 <HAL_GPIO_Init+0x114>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a39      	ldr	r2, [pc, #228]	@ (8003454 <HAL_GPIO_Init+0x118>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a38      	ldr	r2, [pc, #224]	@ (8003458 <HAL_GPIO_Init+0x11c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a37      	ldr	r2, [pc, #220]	@ (800345c <HAL_GPIO_Init+0x120>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a36      	ldr	r2, [pc, #216]	@ (8003460 <HAL_GPIO_Init+0x124>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 800338a:	21aa      	movs	r1, #170	@ 0xaa
 800338c:	4835      	ldr	r0, [pc, #212]	@ (8003464 <HAL_GPIO_Init+0x128>)
 800338e:	f7fe fc1b 	bl	8001bc8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_GPIO_Init+0x6a>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a4:	d303      	bcc.n	80033ae <HAL_GPIO_Init+0x72>
 80033a6:	21ab      	movs	r1, #171	@ 0xab
 80033a8:	482e      	ldr	r0, [pc, #184]	@ (8003464 <HAL_GPIO_Init+0x128>)
 80033aa:	f7fe fc0d 	bl	8001bc8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 823d 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f000 8238 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b11      	cmp	r3, #17
 80033c8:	f000 8233 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f000 822e 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b12      	cmp	r3, #18
 80033dc:	f000 8229 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80033e8:	f000 8223 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80033f4:	f000 821d 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003400:	f000 8217 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800340c:	f000 8211 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003418:	f000 820b 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003424:	f000 8205 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b03      	cmp	r3, #3
 800342e:	f000 8200 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b0b      	cmp	r3, #11
 8003438:	f000 81fb 	beq.w	8003832 <HAL_GPIO_Init+0x4f6>
 800343c:	21ac      	movs	r1, #172	@ 0xac
 800343e:	4809      	ldr	r0, [pc, #36]	@ (8003464 <HAL_GPIO_Init+0x128>)
 8003440:	f7fe fbc2 	bl	8001bc8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003444:	e1f5      	b.n	8003832 <HAL_GPIO_Init+0x4f6>
 8003446:	bf00      	nop
 8003448:	48000400 	.word	0x48000400
 800344c:	48000800 	.word	0x48000800
 8003450:	48000c00 	.word	0x48000c00
 8003454:	48001000 	.word	0x48001000
 8003458:	48001400 	.word	0x48001400
 800345c:	48001800 	.word	0x48001800
 8003460:	48001c00 	.word	0x48001c00
 8003464:	0800a8c8 	.word	0x0800a8c8
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 81d6 	beq.w	800382c <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d005      	beq.n	8003498 <HAL_GPIO_Init+0x15c>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d144      	bne.n	8003522 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00f      	beq.n	80034c0 <HAL_GPIO_Init+0x184>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d00b      	beq.n	80034c0 <HAL_GPIO_Init+0x184>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d007      	beq.n	80034c0 <HAL_GPIO_Init+0x184>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x184>
 80034b8:	21bb      	movs	r1, #187	@ 0xbb
 80034ba:	489c      	ldr	r0, [pc, #624]	@ (800372c <HAL_GPIO_Init+0x3f0>)
 80034bc:	f7fe fb84 	bl	8001bc8 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f6:	2201      	movs	r2, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 0201 	and.w	r2, r3, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b03      	cmp	r3, #3
 800352c:	d118      	bne.n	8003560 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003534:	2201      	movs	r2, #1
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0201 	and.w	r2, r3, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b03      	cmp	r3, #3
 800356a:	d027      	beq.n	80035bc <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_GPIO_Init+0x250>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d007      	beq.n	800358c <HAL_GPIO_Init+0x250>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x250>
 8003584:	21dc      	movs	r1, #220	@ 0xdc
 8003586:	4869      	ldr	r0, [pc, #420]	@ (800372c <HAL_GPIO_Init+0x3f0>)
 8003588:	f7fe fb1e 	bl	8001bc8 <assert_failed>

        temp = GPIOx->PUPDR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2203      	movs	r2, #3
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d14f      	bne.n	8003668 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035ce:	d01f      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_GPIO_Init+0x3f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01b      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_GPIO_Init+0x3f8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d017      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a55      	ldr	r2, [pc, #340]	@ (8003738 <HAL_GPIO_Init+0x3fc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a54      	ldr	r2, [pc, #336]	@ (800373c <HAL_GPIO_Init+0x400>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00f      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <HAL_GPIO_Init+0x404>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00b      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_GPIO_Init+0x408>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x40c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
 8003608:	21e8      	movs	r1, #232	@ 0xe8
 800360a:	4848      	ldr	r0, [pc, #288]	@ (800372c <HAL_GPIO_Init+0x3f0>)
 800360c:	f7fe fadc 	bl	8001bc8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d903      	bls.n	8003620 <HAL_GPIO_Init+0x2e4>
 8003618:	21e9      	movs	r1, #233	@ 0xe9
 800361a:	4844      	ldr	r0, [pc, #272]	@ (800372c <HAL_GPIO_Init+0x3f0>)
 800361c:	f7fe fad4 	bl	8001bc8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	08da      	lsrs	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3208      	adds	r2, #8
 8003628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	6939      	ldr	r1, [r7, #16]
 8003664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0203 	and.w	r2, r3, #3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80c1 	beq.w	800382c <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036aa:	4b28      	ldr	r3, [pc, #160]	@ (800374c <HAL_GPIO_Init+0x410>)
 80036ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ae:	4a27      	ldr	r2, [pc, #156]	@ (800374c <HAL_GPIO_Init+0x410>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80036b6:	4b25      	ldr	r3, [pc, #148]	@ (800374c <HAL_GPIO_Init+0x410>)
 80036b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036c2:	4a23      	ldr	r2, [pc, #140]	@ (8003750 <HAL_GPIO_Init+0x414>)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036ec:	d03a      	beq.n	8003764 <HAL_GPIO_Init+0x428>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003730 <HAL_GPIO_Init+0x3f4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d034      	beq.n	8003760 <HAL_GPIO_Init+0x424>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003734 <HAL_GPIO_Init+0x3f8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02e      	beq.n	800375c <HAL_GPIO_Init+0x420>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_GPIO_Init+0x3fc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d028      	beq.n	8003758 <HAL_GPIO_Init+0x41c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <HAL_GPIO_Init+0x400>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d022      	beq.n	8003754 <HAL_GPIO_Init+0x418>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a0b      	ldr	r2, [pc, #44]	@ (8003740 <HAL_GPIO_Init+0x404>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x3ea>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <HAL_GPIO_Init+0x408>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x3e6>
 800371e:	2306      	movs	r3, #6
 8003720:	e021      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 8003722:	2307      	movs	r3, #7
 8003724:	e01f      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 8003726:	2305      	movs	r3, #5
 8003728:	e01d      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 800372a:	bf00      	nop
 800372c:	0800a8c8 	.word	0x0800a8c8
 8003730:	48000400 	.word	0x48000400
 8003734:	48000800 	.word	0x48000800
 8003738:	48000c00 	.word	0x48000c00
 800373c:	48001000 	.word	0x48001000
 8003740:	48001400 	.word	0x48001400
 8003744:	48001800 	.word	0x48001800
 8003748:	48001c00 	.word	0x48001c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40010000 	.word	0x40010000
 8003754:	2304      	movs	r3, #4
 8003756:	e006      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 8003758:	2303      	movs	r3, #3
 800375a:	e004      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 800375c:	2302      	movs	r3, #2
 800375e:	e002      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_GPIO_Init+0x42a>
 8003764:	2300      	movs	r3, #0
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	f002 0203 	and.w	r2, r2, #3
 800376c:	0092      	lsls	r2, r2, #2
 800376e:	4093      	lsls	r3, r2
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003776:	4935      	ldr	r1, [pc, #212]	@ (800384c <HAL_GPIO_Init+0x510>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003784:	4b32      	ldr	r3, [pc, #200]	@ (8003850 <HAL_GPIO_Init+0x514>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a8:	4a29      	ldr	r2, [pc, #164]	@ (8003850 <HAL_GPIO_Init+0x514>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ae:	4b28      	ldr	r3, [pc, #160]	@ (8003850 <HAL_GPIO_Init+0x514>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_GPIO_Init+0x514>)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <HAL_GPIO_Init+0x514>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037fc:	4a14      	ldr	r2, [pc, #80]	@ (8003850 <HAL_GPIO_Init+0x514>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003802:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_GPIO_Init+0x514>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <HAL_GPIO_Init+0x514>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3301      	adds	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f ae13 	bne.w	8003468 <HAL_GPIO_Init+0x12c>
  }
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40010000 	.word	0x40010000
 8003850:	40010400 	.word	0x40010400

08003854 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003868:	d020      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a84      	ldr	r2, [pc, #528]	@ (8003a80 <HAL_GPIO_DeInit+0x22c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01c      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a83      	ldr	r2, [pc, #524]	@ (8003a84 <HAL_GPIO_DeInit+0x230>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a82      	ldr	r2, [pc, #520]	@ (8003a88 <HAL_GPIO_DeInit+0x234>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d014      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a81      	ldr	r2, [pc, #516]	@ (8003a8c <HAL_GPIO_DeInit+0x238>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d010      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a80      	ldr	r2, [pc, #512]	@ (8003a90 <HAL_GPIO_DeInit+0x23c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00c      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a7f      	ldr	r2, [pc, #508]	@ (8003a94 <HAL_GPIO_DeInit+0x240>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d008      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a7e      	ldr	r2, [pc, #504]	@ (8003a98 <HAL_GPIO_DeInit+0x244>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_GPIO_DeInit+0x58>
 80038a2:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 80038a6:	487d      	ldr	r0, [pc, #500]	@ (8003a9c <HAL_GPIO_DeInit+0x248>)
 80038a8:	f7fe f98e 	bl	8001bc8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <HAL_GPIO_DeInit+0x6a>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ba:	f0c0 80d4 	bcc.w	8003a66 <HAL_GPIO_DeInit+0x212>
 80038be:	f240 113b 	movw	r1, #315	@ 0x13b
 80038c2:	4876      	ldr	r0, [pc, #472]	@ (8003a9c <HAL_GPIO_DeInit+0x248>)
 80038c4:	f7fe f980 	bl	8001bc8 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80038c8:	e0cd      	b.n	8003a66 <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038ca:	2201      	movs	r2, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80c0 	beq.w	8003a60 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80038e0:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa0 <HAL_GPIO_DeInit+0x24c>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003908:	d025      	beq.n	8003956 <HAL_GPIO_DeInit+0x102>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a80 <HAL_GPIO_DeInit+0x22c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01f      	beq.n	8003952 <HAL_GPIO_DeInit+0xfe>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a5b      	ldr	r2, [pc, #364]	@ (8003a84 <HAL_GPIO_DeInit+0x230>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d019      	beq.n	800394e <HAL_GPIO_DeInit+0xfa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a88 <HAL_GPIO_DeInit+0x234>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_DeInit+0xf6>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a59      	ldr	r2, [pc, #356]	@ (8003a8c <HAL_GPIO_DeInit+0x238>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_DeInit+0xf2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a58      	ldr	r2, [pc, #352]	@ (8003a90 <HAL_GPIO_DeInit+0x23c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_DeInit+0xee>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a57      	ldr	r2, [pc, #348]	@ (8003a94 <HAL_GPIO_DeInit+0x240>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_DeInit+0xea>
 800393a:	2306      	movs	r3, #6
 800393c:	e00c      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 800393e:	2307      	movs	r3, #7
 8003940:	e00a      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 8003942:	2305      	movs	r3, #5
 8003944:	e008      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 8003946:	2304      	movs	r3, #4
 8003948:	e006      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 800394a:	2303      	movs	r3, #3
 800394c:	e004      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_DeInit+0x104>
 8003956:	2300      	movs	r3, #0
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	f002 0203 	and.w	r2, r2, #3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	429a      	cmp	r2, r3
 8003966:	d132      	bne.n	80039ce <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003968:	4b4e      	ldr	r3, [pc, #312]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	494c      	ldr	r1, [pc, #304]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 8003972:	4013      	ands	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003976:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	4949      	ldr	r1, [pc, #292]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 8003980:	4013      	ands	r3, r2
 8003982:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003984:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	4945      	ldr	r1, [pc, #276]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 800398e:	4013      	ands	r3, r2
 8003990:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003992:	4b44      	ldr	r3, [pc, #272]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	43db      	mvns	r3, r3
 800399a:	4942      	ldr	r1, [pc, #264]	@ (8003aa4 <HAL_GPIO_DeInit+0x250>)
 800399c:	4013      	ands	r3, r2
 800399e:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039b0:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa0 <HAL_GPIO_DeInit+0x24c>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43da      	mvns	r2, r3
 80039c0:	4837      	ldr	r0, [pc, #220]	@ (8003aa0 <HAL_GPIO_DeInit+0x24c>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	400a      	ands	r2, r1
 80039c8:	3302      	adds	r3, #2
 80039ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2103      	movs	r1, #3
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	220f      	movs	r2, #15
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	08d2      	lsrs	r2, r2, #3
 8003a02:	4019      	ands	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3208      	adds	r2, #8
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2103      	movs	r1, #3
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	2101      	movs	r1, #1
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	401a      	ands	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2103      	movs	r1, #3
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a50:	2101      	movs	r1, #1
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f47f af2b 	bne.w	80038ca <HAL_GPIO_DeInit+0x76>
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	48000400 	.word	0x48000400
 8003a84:	48000800 	.word	0x48000800
 8003a88:	48000c00 	.word	0x48000c00
 8003a8c:	48001000 	.word	0x48001000
 8003a90:	48001400 	.word	0x48001400
 8003a94:	48001800 	.word	0x48001800
 8003a98:	48001c00 	.word	0x48001c00
 8003a9c:	0800a8c8 	.word	0x0800a8c8
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <HAL_GPIO_WritePin+0x20>
 8003abe:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8003ac2:	480e      	ldr	r0, [pc, #56]	@ (8003afc <HAL_GPIO_WritePin+0x54>)
 8003ac4:	f7fe f880 	bl	8001bc8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ac8:	787b      	ldrb	r3, [r7, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_WritePin+0x36>
 8003ace:	787b      	ldrb	r3, [r7, #1]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d004      	beq.n	8003ade <HAL_GPIO_WritePin+0x36>
 8003ad4:	f240 11af 	movw	r1, #431	@ 0x1af
 8003ad8:	4808      	ldr	r0, [pc, #32]	@ (8003afc <HAL_GPIO_WritePin+0x54>)
 8003ada:	f7fe f875 	bl	8001bc8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003ade:	787b      	ldrb	r3, [r7, #1]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae4:	887a      	ldrh	r2, [r7, #2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aea:	e002      	b.n	8003af2 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aec:	887a      	ldrh	r2, [r7, #2]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	0800a8c8 	.word	0x0800a8c8

08003b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b16:	4a05      	ldr	r2, [pc, #20]	@ (8003b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f806 	bl	8003b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40007000 	.word	0x40007000

08003b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b72:	d007      	beq.n	8003b84 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d003      	beq.n	8003b84 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003b7c:	21a7      	movs	r1, #167	@ 0xa7
 8003b7e:	4826      	ldr	r0, [pc, #152]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003b80:	f7fe f822 	bl	8001bc8 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b8a:	d130      	bne.n	8003bee <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8c:	4b23      	ldr	r3, [pc, #140]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b98:	d038      	beq.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b9a:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003baa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2232      	movs	r2, #50	@ 0x32
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0c9b      	lsrs	r3, r3, #18
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc0:	e002      	b.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd4:	d102      	bne.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x78>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f2      	bne.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be8:	d110      	bne.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00f      	b.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bee:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfa:	d007      	beq.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bfc:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c04:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	0800a904 	.word	0x0800a904
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	20000028 	.word	0x20000028
 8003c24:	431bde83 	.word	0x431bde83

08003c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f000 bcef 	b.w	800461a <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b1f      	cmp	r3, #31
 8003c4a:	d904      	bls.n	8003c56 <HAL_RCC_OscConfig+0x2e>
 8003c4c:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8003c50:	489a      	ldr	r0, [pc, #616]	@ (8003ebc <HAL_RCC_OscConfig+0x294>)
 8003c52:	f7fd ffb9 	bl	8001bc8 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c56:	4b9a      	ldr	r3, [pc, #616]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c60:	4b97      	ldr	r3, [pc, #604]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 813d 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_OscConfig+0x6a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d004      	beq.n	8003c92 <HAL_RCC_OscConfig+0x6a>
 8003c88:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8003c8c:	488b      	ldr	r0, [pc, #556]	@ (8003ebc <HAL_RCC_OscConfig+0x294>)
 8003c8e:	f7fd ff9b 	bl	8001bc8 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2bff      	cmp	r3, #255	@ 0xff
 8003c98:	d904      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x7c>
 8003c9a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003c9e:	4887      	ldr	r0, [pc, #540]	@ (8003ebc <HAL_RCC_OscConfig+0x294>)
 8003ca0:	f7fd ff92 	bl	8001bc8 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d030      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d02c      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d028      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	2b30      	cmp	r3, #48	@ 0x30
 8003cc2:	d024      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	2b50      	cmp	r3, #80	@ 0x50
 8003cd2:	d01c      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2b60      	cmp	r3, #96	@ 0x60
 8003cda:	d018      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	2b70      	cmp	r3, #112	@ 0x70
 8003ce2:	d014      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	2b80      	cmp	r3, #128	@ 0x80
 8003cea:	d010      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	2b90      	cmp	r3, #144	@ 0x90
 8003cf2:	d00c      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d02:	d004      	beq.n	8003d0e <HAL_RCC_OscConfig+0xe6>
 8003d04:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003d08:	486c      	ldr	r0, [pc, #432]	@ (8003ebc <HAL_RCC_OscConfig+0x294>)
 8003d0a:	f7fd ff5d 	bl	8001bc8 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_RCC_OscConfig+0xfc>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	f040 808e 	bne.w	8003e38 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f040 808a 	bne.w	8003e38 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d24:	4b66      	ldr	r3, [pc, #408]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_RCC_OscConfig+0x116>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f000 bc6e 	b.w	800461a <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_RCC_OscConfig+0x130>
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d56:	e005      	b.n	8003d64 <HAL_RCC_OscConfig+0x13c>
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d224      	bcs.n	8003db2 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fec1 	bl	8004af4 <RCC_SetFlashLatencyFromMSIRange>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f000 bc4e 	b.w	800461a <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7e:	4b50      	ldr	r3, [pc, #320]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a4f      	ldr	r2, [pc, #316]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	494a      	ldr	r1, [pc, #296]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d9c:	4b48      	ldr	r3, [pc, #288]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	4945      	ldr	r1, [pc, #276]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
 8003db0:	e026      	b.n	8003e00 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003db2:	4b43      	ldr	r3, [pc, #268]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a42      	ldr	r2, [pc, #264]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b40      	ldr	r3, [pc, #256]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	493d      	ldr	r1, [pc, #244]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	4938      	ldr	r1, [pc, #224]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fe80 	bl	8004af4 <RCC_SetFlashLatencyFromMSIRange>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f000 bc0d 	b.w	800461a <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e00:	f000 fdb4 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	492c      	ldr	r1, [pc, #176]	@ (8003ec4 <HAL_RCC_OscConfig+0x29c>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec8 <HAL_RCC_OscConfig+0x2a0>)
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ecc <HAL_RCC_OscConfig+0x2a4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe fcad 	bl	8002784 <HAL_InitTick>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05d      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	e3f0      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d032      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e40:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fcea 	bl	8002824 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e54:	f7fe fce6 	bl	8002824 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e3d9      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e72:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e78:	f043 0308 	orr.w	r3, r3, #8
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	490d      	ldr	r1, [pc, #52]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	4908      	ldr	r1, [pc, #32]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
 8003ea4:	e025      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ea6:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fcb7 	bl	8002824 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eb8:	e013      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2ba>
 8003eba:	bf00      	nop
 8003ebc:	0800a940 	.word	0x0800a940
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	0800aa9c 	.word	0x0800aa9c
 8003ec8:	20000028 	.word	0x20000028
 8003ecc:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed0:	f7fe fca8 	bl	8002824 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e39b      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ee2:	4b97      	ldr	r3, [pc, #604]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2a8>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d07e      	beq.n	8003ffc <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2fc>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2fc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f18:	d004      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2fc>
 8003f1a:	f240 2119 	movw	r1, #537	@ 0x219
 8003f1e:	4889      	ldr	r0, [pc, #548]	@ (8004144 <HAL_RCC_OscConfig+0x51c>)
 8003f20:	f7fd fe52 	bl	8001bc8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x30e>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d10e      	bne.n	8003f4e <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d10b      	bne.n	8003f4e <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f36:	4b82      	ldr	r3, [pc, #520]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d05b      	beq.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d157      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e365      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x33e>
 8003f58:	4b79      	ldr	r3, [pc, #484]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a78      	ldr	r2, [pc, #480]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	e01d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x37a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f6e:	d10c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x362>
 8003f70:	4b73      	ldr	r3, [pc, #460]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a72      	ldr	r2, [pc, #456]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b70      	ldr	r3, [pc, #448]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a6f      	ldr	r2, [pc, #444]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e00b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x37a>
 8003f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b6a      	ldr	r3, [pc, #424]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a69      	ldr	r2, [pc, #420]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d013      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fe fc3b 	bl	8002824 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb2:	f7fe fc37 	bl	8002824 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	@ 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e32a      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x38a>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe fc27 	bl	8002824 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fda:	f7fe fc23 	bl	8002824 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	@ 0x64
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e316      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fec:	4b54      	ldr	r3, [pc, #336]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x3b2>
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d077      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <HAL_RCC_OscConfig+0x3fc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004018:	d004      	beq.n	8004024 <HAL_RCC_OscConfig+0x3fc>
 800401a:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800401e:	4849      	ldr	r0, [pc, #292]	@ (8004144 <HAL_RCC_OscConfig+0x51c>)
 8004020:	f7fd fdd2 	bl	8001bc8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2b1f      	cmp	r3, #31
 800402a:	d904      	bls.n	8004036 <HAL_RCC_OscConfig+0x40e>
 800402c:	f240 214d 	movw	r1, #589	@ 0x24d
 8004030:	4844      	ldr	r0, [pc, #272]	@ (8004144 <HAL_RCC_OscConfig+0x51c>)
 8004032:	f7fd fdc9 	bl	8001bc8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x420>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d119      	bne.n	8004076 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d116      	bne.n	8004076 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004048:	4b3d      	ldr	r3, [pc, #244]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x438>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e2dc      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	4934      	ldr	r1, [pc, #208]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004074:	e040      	b.n	80040f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d023      	beq.n	80040c6 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407e:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe fbcb 	bl	8002824 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe fbc7 	bl	8002824 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e2ba      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a4:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	4920      	ldr	r1, [pc, #128]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 80040cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fe fba7 	bl	8002824 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040da:	f7fe fba3 	bl	8002824 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e296      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ec:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d04e      	beq.n	80041a2 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_OscConfig+0x4f6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d004      	beq.n	800411e <HAL_RCC_OscConfig+0x4f6>
 8004114:	f240 218d 	movw	r1, #653	@ 0x28d
 8004118:	480a      	ldr	r0, [pc, #40]	@ (8004144 <HAL_RCC_OscConfig+0x51c>)
 800411a:	f7fd fd55 	bl	8001bc8 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d021      	beq.n	800416a <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412c:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_RCC_OscConfig+0x518>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fe fb75 	bl	8002824 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413c:	e00d      	b.n	800415a <HAL_RCC_OscConfig+0x532>
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	0800a940 	.word	0x0800a940
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004148:	f7fe fb6c 	bl	8002824 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e25f      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415a:	4b66      	ldr	r3, [pc, #408]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 800415c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ef      	beq.n	8004148 <HAL_RCC_OscConfig+0x520>
 8004168:	e01b      	b.n	80041a2 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416a:	4b62      	ldr	r3, [pc, #392]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 800416c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004170:	4a60      	ldr	r2, [pc, #384]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fe fb53 	bl	8002824 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004182:	f7fe fb4f 	bl	8002824 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e242      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004194:	4b57      	ldr	r3, [pc, #348]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ef      	bne.n	8004182 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80b8 	beq.w	8004320 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b0:	2300      	movs	r3, #0
 80041b2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x5ae>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_OscConfig+0x5ae>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d004      	beq.n	80041d6 <HAL_RCC_OscConfig+0x5ae>
 80041cc:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80041d0:	4849      	ldr	r0, [pc, #292]	@ (80042f8 <HAL_RCC_OscConfig+0x6d0>)
 80041d2:	f7fd fcf9 	bl	8001bc8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041d6:	4b47      	ldr	r3, [pc, #284]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	4b44      	ldr	r3, [pc, #272]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	4a43      	ldr	r2, [pc, #268]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ee:	4b41      	ldr	r3, [pc, #260]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fe:	4b3f      	ldr	r3, [pc, #252]	@ (80042fc <HAL_RCC_OscConfig+0x6d4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d118      	bne.n	800423c <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420a:	4b3c      	ldr	r3, [pc, #240]	@ (80042fc <HAL_RCC_OscConfig+0x6d4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3b      	ldr	r2, [pc, #236]	@ (80042fc <HAL_RCC_OscConfig+0x6d4>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fe fb05 	bl	8002824 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fe fb01 	bl	8002824 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1f4      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004230:	4b32      	ldr	r3, [pc, #200]	@ (80042fc <HAL_RCC_OscConfig+0x6d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d108      	bne.n	8004256 <HAL_RCC_OscConfig+0x62e>
 8004244:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004254:	e024      	b.n	80042a0 <HAL_RCC_OscConfig+0x678>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b05      	cmp	r3, #5
 800425c:	d110      	bne.n	8004280 <HAL_RCC_OscConfig+0x658>
 800425e:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004264:	4a23      	ldr	r2, [pc, #140]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800426e:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004274:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_OscConfig+0x678>
 8004280:	4b1c      	ldr	r3, [pc, #112]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004286:	4a1b      	ldr	r2, [pc, #108]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004290:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004296:	4a17      	ldr	r2, [pc, #92]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d016      	beq.n	80042d6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fe fabc 	bl	8002824 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fe fab8 	bl	8002824 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1a9      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_RCC_OscConfig+0x6cc>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ed      	beq.n	80042b0 <HAL_RCC_OscConfig+0x688>
 80042d4:	e01b      	b.n	800430e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe faa5 	bl	8002824 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042dc:	e010      	b.n	8004300 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fe faa1 	bl	8002824 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d907      	bls.n	8004300 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e192      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
 80042f4:	40021000 	.word	0x40021000
 80042f8:	0800a940 	.word	0x0800a940
 80042fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004300:	4b98      	ldr	r3, [pc, #608]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e7      	bne.n	80042de <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430e:	7ffb      	ldrb	r3, [r7, #31]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004314:	4b93      	ldr	r3, [pc, #588]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	4a92      	ldr	r2, [pc, #584]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 800431a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_OscConfig+0x71a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	2b01      	cmp	r3, #1
 800432e:	d008      	beq.n	8004342 <HAL_RCC_OscConfig+0x71a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	2b02      	cmp	r3, #2
 8004336:	d004      	beq.n	8004342 <HAL_RCC_OscConfig+0x71a>
 8004338:	f240 316e 	movw	r1, #878	@ 0x36e
 800433c:	488a      	ldr	r0, [pc, #552]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 800433e:	f7fd fc43 	bl	8001bc8 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8166 	beq.w	8004618 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	2b02      	cmp	r3, #2
 8004352:	f040 813c 	bne.w	80045ce <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_OscConfig+0x758>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d00c      	beq.n	8004380 <HAL_RCC_OscConfig+0x758>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	2b02      	cmp	r3, #2
 800436c:	d008      	beq.n	8004380 <HAL_RCC_OscConfig+0x758>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	2b03      	cmp	r3, #3
 8004374:	d004      	beq.n	8004380 <HAL_RCC_OscConfig+0x758>
 8004376:	f240 3176 	movw	r1, #886	@ 0x376
 800437a:	487b      	ldr	r0, [pc, #492]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 800437c:	f7fd fc24 	bl	8001bc8 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_RCC_OscConfig+0x768>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	2b08      	cmp	r3, #8
 800438e:	d904      	bls.n	800439a <HAL_RCC_OscConfig+0x772>
 8004390:	f240 3177 	movw	r1, #887	@ 0x377
 8004394:	4874      	ldr	r0, [pc, #464]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 8004396:	f7fd fc17 	bl	8001bc8 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439e:	2b07      	cmp	r3, #7
 80043a0:	d903      	bls.n	80043aa <HAL_RCC_OscConfig+0x782>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	2b56      	cmp	r3, #86	@ 0x56
 80043a8:	d904      	bls.n	80043b4 <HAL_RCC_OscConfig+0x78c>
 80043aa:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80043ae:	486e      	ldr	r0, [pc, #440]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 80043b0:	f7fd fc0a 	bl	8001bc8 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_OscConfig+0x7a6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	2b11      	cmp	r3, #17
 80043c2:	d004      	beq.n	80043ce <HAL_RCC_OscConfig+0x7a6>
 80043c4:	f240 317a 	movw	r1, #890	@ 0x37a
 80043c8:	4867      	ldr	r0, [pc, #412]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 80043ca:	f7fd fbfd 	bl	8001bc8 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d010      	beq.n	80043f8 <HAL_RCC_OscConfig+0x7d0>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d00c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x7d0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d008      	beq.n	80043f8 <HAL_RCC_OscConfig+0x7d0>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d004      	beq.n	80043f8 <HAL_RCC_OscConfig+0x7d0>
 80043ee:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 80043f2:	485d      	ldr	r0, [pc, #372]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 80043f4:	f7fd fbe8 	bl	8001bc8 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_OscConfig+0x7fa>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	2b04      	cmp	r3, #4
 8004406:	d00c      	beq.n	8004422 <HAL_RCC_OscConfig+0x7fa>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	2b06      	cmp	r3, #6
 800440e:	d008      	beq.n	8004422 <HAL_RCC_OscConfig+0x7fa>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	2b08      	cmp	r3, #8
 8004416:	d004      	beq.n	8004422 <HAL_RCC_OscConfig+0x7fa>
 8004418:	f240 317d 	movw	r1, #893	@ 0x37d
 800441c:	4852      	ldr	r0, [pc, #328]	@ (8004568 <HAL_RCC_OscConfig+0x940>)
 800441e:	f7fd fbd3 	bl	8001bc8 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004422:	4b50      	ldr	r3, [pc, #320]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0203 	and.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	429a      	cmp	r2, r3
 8004434:	d130      	bne.n	8004498 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	3b01      	subs	r3, #1
 8004442:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d127      	bne.n	8004498 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004452:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d11f      	bne.n	8004498 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004462:	2a07      	cmp	r2, #7
 8004464:	bf14      	ite	ne
 8004466:	2201      	movne	r2, #1
 8004468:	2200      	moveq	r2, #0
 800446a:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446c:	4293      	cmp	r3, r2
 800446e:	d113      	bne.n	8004498 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d109      	bne.n	8004498 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	3b01      	subs	r3, #1
 8004492:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d074      	beq.n	8004582 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d06f      	beq.n	800457e <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800449e:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0af      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a29      	ldr	r2, [pc, #164]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 80044c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044c6:	f7fe f9ad 	bl	8002824 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe f9a9 	bl	8002824 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e09c      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e0:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <HAL_RCC_OscConfig+0x944>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044fc:	3a01      	subs	r2, #1
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	4311      	orrs	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004506:	0212      	lsls	r2, r2, #8
 8004508:	4311      	orrs	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800450e:	0852      	lsrs	r2, r2, #1
 8004510:	3a01      	subs	r2, #1
 8004512:	0552      	lsls	r2, r2, #21
 8004514:	4311      	orrs	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800451a:	0852      	lsrs	r2, r2, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	0652      	lsls	r2, r2, #25
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004526:	0912      	lsrs	r2, r2, #4
 8004528:	0452      	lsls	r2, r2, #17
 800452a:	430a      	orrs	r2, r1
 800452c:	490d      	ldr	r1, [pc, #52]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004532:	4b0c      	ldr	r3, [pc, #48]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a0b      	ldr	r2, [pc, #44]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004538:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800453e:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a08      	ldr	r2, [pc, #32]	@ (8004564 <HAL_RCC_OscConfig+0x93c>)
 8004544:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004548:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800454a:	f7fe f96b 	bl	8002824 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004550:	e00e      	b.n	8004570 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004552:	f7fe f967 	bl	8002824 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d907      	bls.n	8004570 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e05a      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
 8004564:	40021000 	.word	0x40021000
 8004568:	0800a940 	.word	0x0800a940
 800456c:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004570:	4b2c      	ldr	r3, [pc, #176]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ea      	beq.n	8004552 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457c:	e04c      	b.n	8004618 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e04b      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004582:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d144      	bne.n	8004618 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800458e:	4b25      	ldr	r3, [pc, #148]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a24      	ldr	r2, [pc, #144]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 8004594:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004598:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800459a:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	4a21      	ldr	r2, [pc, #132]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 80045a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045a6:	f7fe f93d 	bl	8002824 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fe f939 	bl	8002824 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e02c      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c0:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x986>
 80045cc:	e024      	b.n	8004618 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d01f      	beq.n	8004614 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 80045da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fe f920 	bl	8002824 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e8:	f7fe f91c 	bl	8002824 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00f      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004606:	4b07      	ldr	r3, [pc, #28]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	4906      	ldr	r1, [pc, #24]	@ (8004624 <HAL_RCC_OscConfig+0x9fc>)
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_RCC_OscConfig+0xa00>)
 800460e:	4013      	ands	r3, r2
 8004610:	60cb      	str	r3, [r1, #12]
 8004612:	e001      	b.n	8004618 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	feeefffc 	.word	0xfeeefffc

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e186      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCC_ClockConfig+0x24>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b0f      	cmp	r3, #15
 800464e:	d904      	bls.n	800465a <HAL_RCC_ClockConfig+0x2e>
 8004650:	f240 4159 	movw	r1, #1113	@ 0x459
 8004654:	4882      	ldr	r0, [pc, #520]	@ (8004860 <HAL_RCC_ClockConfig+0x234>)
 8004656:	f7fd fab7 	bl	8001bc8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0x56>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d00d      	beq.n	8004682 <HAL_RCC_ClockConfig+0x56>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d00a      	beq.n	8004682 <HAL_RCC_ClockConfig+0x56>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d007      	beq.n	8004682 <HAL_RCC_ClockConfig+0x56>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d004      	beq.n	8004682 <HAL_RCC_ClockConfig+0x56>
 8004678:	f240 415a 	movw	r1, #1114	@ 0x45a
 800467c:	4878      	ldr	r0, [pc, #480]	@ (8004860 <HAL_RCC_ClockConfig+0x234>)
 800467e:	f7fd faa3 	bl	8001bc8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004682:	4b78      	ldr	r3, [pc, #480]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d910      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004690:	4b74      	ldr	r3, [pc, #464]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f023 0207 	bic.w	r2, r3, #7
 8004698:	4972      	ldr	r1, [pc, #456]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a0:	4b70      	ldr	r3, [pc, #448]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e14d      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d039      	beq.n	8004732 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d024      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b80      	cmp	r3, #128	@ 0x80
 80046cc:	d020      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b90      	cmp	r3, #144	@ 0x90
 80046d4:	d01c      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2ba0      	cmp	r3, #160	@ 0xa0
 80046dc:	d018      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2bb0      	cmp	r3, #176	@ 0xb0
 80046e4:	d014      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ec:	d010      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2bd0      	cmp	r3, #208	@ 0xd0
 80046f4:	d00c      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2be0      	cmp	r3, #224	@ 0xe0
 80046fc:	d008      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2bf0      	cmp	r3, #240	@ 0xf0
 8004704:	d004      	beq.n	8004710 <HAL_RCC_ClockConfig+0xe4>
 8004706:	f240 4172 	movw	r1, #1138	@ 0x472
 800470a:	4855      	ldr	r0, [pc, #340]	@ (8004860 <HAL_RCC_ClockConfig+0x234>)
 800470c:	f7fd fa5c 	bl	8001bc8 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4b54      	ldr	r3, [pc, #336]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800471c:	429a      	cmp	r2, r3
 800471e:	d908      	bls.n	8004732 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b51      	ldr	r3, [pc, #324]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494e      	ldr	r1, [pc, #312]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d061      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_RCC_ClockConfig+0x13c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d00c      	beq.n	8004768 <HAL_RCC_ClockConfig+0x13c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d008      	beq.n	8004768 <HAL_RCC_ClockConfig+0x13c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d004      	beq.n	8004768 <HAL_RCC_ClockConfig+0x13c>
 800475e:	f240 417d 	movw	r1, #1149	@ 0x47d
 8004762:	483f      	ldr	r0, [pc, #252]	@ (8004860 <HAL_RCC_ClockConfig+0x234>)
 8004764:	f7fd fa30 	bl	8001bc8 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004770:	4b3d      	ldr	r3, [pc, #244]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d121      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0e6      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004788:	4b37      	ldr	r3, [pc, #220]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0da      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047a0:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0ce      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0c6      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c0:	4b29      	ldr	r3, [pc, #164]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4926      	ldr	r1, [pc, #152]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d2:	f7fe f827 	bl	8002824 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7fe f823 	bl	8002824 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0ae      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 020c 	and.w	r2, r3, #12
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1eb      	bne.n	80047da <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481a:	429a      	cmp	r2, r3
 800481c:	d208      	bcs.n	8004830 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	490f      	ldr	r1, [pc, #60]	@ (8004868 <HAL_RCC_ClockConfig+0x23c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004830:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d216      	bcs.n	800486c <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 0207 	bic.w	r2, r3, #7
 8004846:	4907      	ldr	r1, [pc, #28]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <HAL_RCC_ClockConfig+0x238>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d007      	beq.n	800486c <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e076      	b.n	800494e <HAL_RCC_ClockConfig+0x322>
 8004860:	0800a940 	.word	0x0800a940
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d025      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d018      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x286>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004888:	d013      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x286>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004892:	d00e      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x286>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800489c:	d009      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x286>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048a6:	d004      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x286>
 80048a8:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 80048ac:	482a      	ldr	r0, [pc, #168]	@ (8004958 <HAL_RCC_ClockConfig+0x32c>)
 80048ae:	f7fd f98b 	bl	8001bc8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b2:	4b2a      	ldr	r3, [pc, #168]	@ (800495c <HAL_RCC_ClockConfig+0x330>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4927      	ldr	r1, [pc, #156]	@ (800495c <HAL_RCC_ClockConfig+0x330>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d026      	beq.n	800491e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <HAL_RCC_ClockConfig+0x2de>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e0:	d013      	beq.n	800490a <HAL_RCC_ClockConfig+0x2de>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80048ea:	d00e      	beq.n	800490a <HAL_RCC_ClockConfig+0x2de>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048f4:	d009      	beq.n	800490a <HAL_RCC_ClockConfig+0x2de>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048fe:	d004      	beq.n	800490a <HAL_RCC_ClockConfig+0x2de>
 8004900:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8004904:	4814      	ldr	r0, [pc, #80]	@ (8004958 <HAL_RCC_ClockConfig+0x32c>)
 8004906:	f7fd f95f 	bl	8001bc8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b14      	ldr	r3, [pc, #80]	@ (800495c <HAL_RCC_ClockConfig+0x330>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4910      	ldr	r1, [pc, #64]	@ (800495c <HAL_RCC_ClockConfig+0x330>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800491e:	f000 f825 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <HAL_RCC_ClockConfig+0x330>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490c      	ldr	r1, [pc, #48]	@ (8004960 <HAL_RCC_ClockConfig+0x334>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	fa22 f303 	lsr.w	r3, r2, r3
 800493a:	4a0a      	ldr	r2, [pc, #40]	@ (8004964 <HAL_RCC_ClockConfig+0x338>)
 800493c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800493e:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <HAL_RCC_ClockConfig+0x33c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd ff1e 	bl	8002784 <HAL_InitTick>
 8004948:	4603      	mov	r3, r0
 800494a:	72fb      	strb	r3, [r7, #11]

  return status;
 800494c:	7afb      	ldrb	r3, [r7, #11]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	0800a940 	.word	0x0800a940
 800495c:	40021000 	.word	0x40021000
 8004960:	0800aa9c 	.word	0x0800aa9c
 8004964:	20000028 	.word	0x20000028
 8004968:	2000002c 	.word	0x2000002c

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	@ 0x24
 8004970:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004984:	4b3b      	ldr	r3, [pc, #236]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d121      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d11e      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a0:	4b34      	ldr	r3, [pc, #208]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049ac:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e005      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10d      	bne.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049dc:	e00a      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d102      	bne.n	80049ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049e4:	4b25      	ldr	r3, [pc, #148]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x110>)
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e004      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f0:	4b23      	ldr	r3, [pc, #140]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x114>)
 80049f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d134      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0xac>
 8004a10:	e005      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a14:	617b      	str	r3, [r7, #20]
      break;
 8004a16:	e005      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a18:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a1a:	617b      	str	r3, [r7, #20]
      break;
 8004a1c:	e002      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	617b      	str	r3, [r7, #20]
      break;
 8004a22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a24:	4b13      	ldr	r3, [pc, #76]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	3301      	adds	r3, #1
 8004a30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	fb03 f202 	mul.w	r2, r3, r2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	0e5b      	lsrs	r3, r3, #25
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	3301      	adds	r3, #1
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a64:	69bb      	ldr	r3, [r7, #24]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3724      	adds	r7, #36	@ 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	0800aab4 	.word	0x0800aab4
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	007a1200 	.word	0x007a1200

08004a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a88:	4b03      	ldr	r3, [pc, #12]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000028 	.word	0x20000028

08004a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa0:	f7ff fff0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4904      	ldr	r1, [pc, #16]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	0800aaac 	.word	0x0800aaac

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004acc:	f7ff ffda 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0adb      	lsrs	r3, r3, #11
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4904      	ldr	r1, [pc, #16]	@ (8004af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	0800aaac 	.word	0x0800aaac

08004af4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b00:	4b2a      	ldr	r3, [pc, #168]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b0c:	f7ff f81c 	bl	8003b48 <HAL_PWREx_GetVoltageRange>
 8004b10:	6178      	str	r0, [r7, #20]
 8004b12:	e014      	b.n	8004b3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b14:	4b25      	ldr	r3, [pc, #148]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b18:	4a24      	ldr	r2, [pc, #144]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b20:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b2c:	f7ff f80c 	bl	8003b48 <HAL_PWREx_GetVoltageRange>
 8004b30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b32:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b36:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b44:	d10b      	bne.n	8004b5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b80      	cmp	r3, #128	@ 0x80
 8004b4a:	d919      	bls.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b50:	d902      	bls.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b52:	2302      	movs	r3, #2
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e013      	b.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b58:	2301      	movs	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	e010      	b.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b80      	cmp	r3, #128	@ 0x80
 8004b62:	d902      	bls.n	8004b6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b64:	2303      	movs	r3, #3
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e00a      	b.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b80      	cmp	r3, #128	@ 0x80
 8004b6e:	d102      	bne.n	8004b76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b70:	2302      	movs	r3, #2
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	e004      	b.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b70      	cmp	r3, #112	@ 0x70
 8004b7a:	d101      	bne.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f023 0207 	bic.w	r2, r3, #7
 8004b88:	4909      	ldr	r1, [pc, #36]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b90:	4b07      	ldr	r3, [pc, #28]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d001      	beq.n	8004ba2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40022000 	.word	0x40022000

08004bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd8:	d303      	bcc.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8004bda:	21c9      	movs	r1, #201	@ 0xc9
 8004bdc:	4889      	ldr	r0, [pc, #548]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004bde:	f7fc fff3 	bl	8001bc8 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d058      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bfe:	d00d      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c08:	d008      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c12:	d003      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004c14:	21d1      	movs	r1, #209	@ 0xd1
 8004c16:	487b      	ldr	r0, [pc, #492]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004c18:	f7fc ffd6 	bl	8001bc8 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c24:	d02a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004c26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c2a:	d824      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c30:	d008      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c36:	d81e      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c40:	d010      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8004c42:	e018      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c44:	4b70      	ldr	r3, [pc, #448]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a6f      	ldr	r2, [pc, #444]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c50:	e015      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fc69 	bl	8005530 <RCCEx_PLLSAI1_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c62:	e00c      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3320      	adds	r3, #32
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fde0 	bl	8005830 <RCCEx_PLLSAI2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c74:	e003      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	74fb      	strb	r3, [r7, #19]
      break;
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8004c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c84:	4b60      	ldr	r3, [pc, #384]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c92:	495d      	ldr	r1, [pc, #372]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c9a:	e001      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d059      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cbc:	d00e      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cc6:	d009      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ccc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cd0:	d004      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004cd2:	f240 110f 	movw	r1, #271	@ 0x10f
 8004cd6:	484b      	ldr	r0, [pc, #300]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004cd8:	f7fc ff76 	bl	8001bc8 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ce4:	d02a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004ce6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cea:	d824      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cf0:	d008      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004cf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cf6:	d81e      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d00:	d010      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004d02:	e018      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d04:	4b40      	ldr	r3, [pc, #256]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a3f      	ldr	r2, [pc, #252]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d10:	e015      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fc09 	bl	8005530 <RCCEx_PLLSAI1_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d22:	e00c      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3320      	adds	r3, #32
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fd80 	bl	8005830 <RCCEx_PLLSAI2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d34:	e003      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	74fb      	strb	r3, [r7, #19]
      break;
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8004d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3e:	7cfb      	ldrb	r3, [r7, #19]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d44:	4b30      	ldr	r3, [pc, #192]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d52:	492d      	ldr	r1, [pc, #180]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d5a:	e001      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5c:	7cfb      	ldrb	r3, [r7, #19]
 8004d5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80c2 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d016      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d86:	d010      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d9e:	d004      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004da0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004da4:	4817      	ldr	r0, [pc, #92]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004da6:	f7fc ff0f 	bl	8001bc8 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004daa:	4b17      	ldr	r3, [pc, #92]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	4a10      	ldr	r2, [pc, #64]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004de8:	f7fd fd1c 	bl	8002824 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dee:	e00f      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7fd fd18 	bl	8002824 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d908      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	74fb      	strb	r3, [r7, #19]
        break;
 8004e02:	e00b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004e04:	0800a978 	.word	0x0800a978
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e10:	4b30      	ldr	r3, [pc, #192]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0e9      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e22:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01f      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d019      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e40:	4b25      	ldr	r3, [pc, #148]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4c:	4b22      	ldr	r3, [pc, #136]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd fcd1 	bl	8002824 <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e84:	e00b      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fd fccd 	bl	8002824 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d902      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004e9c:	e006      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ec      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec2:	4905      	ldr	r1, [pc, #20]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eca:	e009      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004ed2:	bf00      	nop
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	4a8c      	ldr	r2, [pc, #560]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01f      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d00c      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d004      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004f1e:	f240 1199 	movw	r1, #409	@ 0x199
 8004f22:	487f      	ldr	r0, [pc, #508]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004f24:	f7fc fe50 	bl	8001bc8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f28:	4b7c      	ldr	r3, [pc, #496]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2e:	f023 0203 	bic.w	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	4979      	ldr	r1, [pc, #484]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01f      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d00c      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d008      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d004      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004f6a:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8004f6e:	486c      	ldr	r0, [pc, #432]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004f70:	f7fc fe2a 	bl	8001bc8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f74:	4b69      	ldr	r3, [pc, #420]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f023 020c 	bic.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f82:	4966      	ldr	r1, [pc, #408]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01f      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	2b30      	cmp	r3, #48	@ 0x30
 8004fac:	d008      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d004      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004fb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004fba:	4859      	ldr	r0, [pc, #356]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004fbc:	f7fc fe04 	bl	8001bc8 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fc0:	4b56      	ldr	r3, [pc, #344]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	4953      	ldr	r1, [pc, #332]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01f      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d010      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	2b40      	cmp	r3, #64	@ 0x40
 8004ff0:	d00c      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ff8:	d008      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d004      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005002:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005006:	4846      	ldr	r0, [pc, #280]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005008:	f7fc fdde 	bl	8001bc8 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500c:	4b43      	ldr	r3, [pc, #268]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005012:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	4940      	ldr	r1, [pc, #256]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d022      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005032:	2b00      	cmp	r3, #0
 8005034:	d013      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503e:	d00e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005044:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005048:	d009      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005052:	d004      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005054:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8005058:	4831      	ldr	r0, [pc, #196]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800505a:	f7fc fdb5 	bl	8001bc8 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505e:	4b2f      	ldr	r3, [pc, #188]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506c:	492b      	ldr	r1, [pc, #172]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d022      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d013      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005090:	d00e      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800509a:	d009      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a4:	d004      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80050a6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80050aa:	481d      	ldr	r0, [pc, #116]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80050ac:	f7fc fd8c 	bl	8001bc8 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b0:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050be:	4917      	ldr	r1, [pc, #92]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d028      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050e2:	d00e      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050ec:	d009      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050f6:	d004      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80050f8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80050fc:	4808      	ldr	r0, [pc, #32]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80050fe:	f7fc fd63 	bl	8001bc8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	4902      	ldr	r1, [pc, #8]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005118:	e004      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	0800a978 	.word	0x0800a978
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005140:	d00e      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800514a:	d009      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005154:	d004      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005156:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800515a:	489e      	ldr	r0, [pc, #632]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800515c:	f7fc fd34 	bl	8001bc8 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005160:	4b9d      	ldr	r3, [pc, #628]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516e:	499a      	ldr	r1, [pc, #616]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01d      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005192:	d009      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800519c:	d004      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800519e:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80051a2:	488c      	ldr	r0, [pc, #560]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80051a4:	f7fc fd10 	bl	8001bc8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a8:	4b8b      	ldr	r3, [pc, #556]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b6:	4988      	ldr	r1, [pc, #544]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01d      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051da:	d009      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e4:	d004      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80051e6:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80051ea:	487a      	ldr	r0, [pc, #488]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80051ec:	f7fc fcec 	bl	8001bc8 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f0:	4b79      	ldr	r3, [pc, #484]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	4976      	ldr	r1, [pc, #472]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01d      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005222:	d009      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800522c:	d004      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800522e:	f240 2107 	movw	r1, #519	@ 0x207
 8005232:	4868      	ldr	r0, [pc, #416]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005234:	f7fc fcc8 	bl	8001bc8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005238:	4b67      	ldr	r3, [pc, #412]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005246:	4964      	ldr	r1, [pc, #400]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d040      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800526a:	d00e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005274:	d009      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800527a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800527e:	d004      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005280:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005284:	4853      	ldr	r0, [pc, #332]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005286:	f7fc fc9f 	bl	8001bc8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800528a:	4b53      	ldr	r3, [pc, #332]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005298:	494f      	ldr	r1, [pc, #316]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052a8:	d106      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052aa:	4b4b      	ldr	r3, [pc, #300]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4a4a      	ldr	r2, [pc, #296]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80052b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b4:	60d3      	str	r3, [r2, #12]
 80052b6:	e011      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f931 	bl	8005530 <RCCEx_PLLSAI1_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d040      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d013      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052f8:	d00e      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005302:	d009      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800530c:	d004      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800530e:	f240 2141 	movw	r1, #577	@ 0x241
 8005312:	4830      	ldr	r0, [pc, #192]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005314:	f7fc fc58 	bl	8001bc8 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005318:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	492c      	ldr	r1, [pc, #176]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005336:	d106      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005338:	4b27      	ldr	r3, [pc, #156]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a26      	ldr	r2, [pc, #152]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800533e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005342:	60d3      	str	r3, [r2, #12]
 8005344:	e011      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800534e:	d10c      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f8ea 	bl	8005530 <RCCEx_PLLSAI1_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d044      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005382:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005386:	d00e      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005390:	d009      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005396:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800539a:	d004      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800539c:	f240 2166 	movw	r1, #614	@ 0x266
 80053a0:	480c      	ldr	r0, [pc, #48]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80053a2:	f7fc fc11 	bl	8001bc8 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a6:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b4:	4908      	ldr	r1, [pc, #32]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c4:	d10a      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c6:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4a03      	ldr	r2, [pc, #12]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80053cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d0:	60d3      	str	r3, [r2, #12]
 80053d2:	e015      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80053d4:	0800a978 	.word	0x0800a978
 80053d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f89f 	bl	8005530 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d047      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005410:	2b00      	cmp	r3, #0
 8005412:	d013      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800541c:	d00e      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005426:	d009      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800542c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005432:	f240 2186 	movw	r1, #646	@ 0x286
 8005436:	483c      	ldr	r0, [pc, #240]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005438:	f7fc fbc6 	bl	8001bc8 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800543c:	4b3b      	ldr	r3, [pc, #236]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800544a:	4938      	ldr	r1, [pc, #224]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545a:	d10d      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2102      	movs	r1, #2
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f864 	bl	8005530 <RCCEx_PLLSAI1_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d014      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	74bb      	strb	r3, [r7, #18]
 8005476:	e011      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800547c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005480:	d10c      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3320      	adds	r3, #32
 8005486:	2102      	movs	r1, #2
 8005488:	4618      	mov	r0, r3
 800548a:	f000 f9d1 	bl	8005830 <RCCEx_PLLSAI2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d018      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b8:	d004      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80054ba:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80054be:	481a      	ldr	r0, [pc, #104]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80054c0:	f7fc fb82 	bl	8001bc8 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c4:	4b19      	ldr	r3, [pc, #100]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054d2:	4916      	ldr	r1, [pc, #88]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01b      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054fa:	d004      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80054fc:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8005500:	4809      	ldr	r0, [pc, #36]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005502:	f7fc fb61 	bl	8001bc8 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005516:	4905      	ldr	r1, [pc, #20]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800551e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	0800a978 	.word	0x0800a978
 800552c:	40021000 	.word	0x40021000

08005530 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d010      	beq.n	8005568 <RCCEx_PLLSAI1_Config+0x38>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d00c      	beq.n	8005568 <RCCEx_PLLSAI1_Config+0x38>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d008      	beq.n	8005568 <RCCEx_PLLSAI1_Config+0x38>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d004      	beq.n	8005568 <RCCEx_PLLSAI1_Config+0x38>
 800555e:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005562:	4887      	ldr	r0, [pc, #540]	@ (8005780 <RCCEx_PLLSAI1_Config+0x250>)
 8005564:	f7fc fb30 	bl	8001bc8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <RCCEx_PLLSAI1_Config+0x48>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d904      	bls.n	8005582 <RCCEx_PLLSAI1_Config+0x52>
 8005578:	f640 3163 	movw	r1, #2915	@ 0xb63
 800557c:	4880      	ldr	r0, [pc, #512]	@ (8005780 <RCCEx_PLLSAI1_Config+0x250>)
 800557e:	f7fc fb23 	bl	8001bc8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b07      	cmp	r3, #7
 8005588:	d903      	bls.n	8005592 <RCCEx_PLLSAI1_Config+0x62>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b56      	cmp	r3, #86	@ 0x56
 8005590:	d904      	bls.n	800559c <RCCEx_PLLSAI1_Config+0x6c>
 8005592:	f640 3164 	movw	r1, #2916	@ 0xb64
 8005596:	487a      	ldr	r0, [pc, #488]	@ (8005780 <RCCEx_PLLSAI1_Config+0x250>)
 8005598:	f7fc fb16 	bl	8001bc8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <RCCEx_PLLSAI1_Config+0x90>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <RCCEx_PLLSAI1_Config+0x90>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <RCCEx_PLLSAI1_Config+0xa0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <RCCEx_PLLSAI1_Config+0xaa>
 80055d0:	f640 3165 	movw	r1, #2917	@ 0xb65
 80055d4:	486a      	ldr	r0, [pc, #424]	@ (8005780 <RCCEx_PLLSAI1_Config+0x250>)
 80055d6:	f7fc faf7 	bl	8001bc8 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055da:	4b6a      	ldr	r3, [pc, #424]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055e6:	4b67      	ldr	r3, [pc, #412]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0203 	and.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d10d      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
       ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055fe:	4b61      	ldr	r3, [pc, #388]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
       ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d047      	beq.n	80056a2 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	e044      	b.n	80056a2 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d018      	beq.n	8005652 <RCCEx_PLLSAI1_Config+0x122>
 8005620:	2b03      	cmp	r3, #3
 8005622:	d825      	bhi.n	8005670 <RCCEx_PLLSAI1_Config+0x140>
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <RCCEx_PLLSAI1_Config+0xfe>
 8005628:	2b02      	cmp	r3, #2
 800562a:	d009      	beq.n	8005640 <RCCEx_PLLSAI1_Config+0x110>
 800562c:	e020      	b.n	8005670 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800562e:	4b55      	ldr	r3, [pc, #340]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11d      	bne.n	8005676 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563e:	e01a      	b.n	8005676 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005640:	4b50      	ldr	r3, [pc, #320]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005650:	e013      	b.n	800567a <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005652:	4b4c      	ldr	r3, [pc, #304]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800565e:	4b49      	ldr	r3, [pc, #292]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800566e:	e006      	b.n	800567e <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e004      	b.n	8005680 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800567e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10d      	bne.n	80056a2 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005686:	4b3f      	ldr	r3, [pc, #252]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	430b      	orrs	r3, r1
 800569c:	4939      	ldr	r1, [pc, #228]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f040 80ba 	bne.w	800581e <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056aa:	4b36      	ldr	r3, [pc, #216]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a35      	ldr	r2, [pc, #212]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 80056b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fd f8b5 	bl	8002824 <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056bc:	e009      	b.n	80056d2 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056be:	f7fd f8b1 	bl	8002824 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d902      	bls.n	80056d2 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	73fb      	strb	r3, [r7, #15]
        break;
 80056d0:	e005      	b.n	80056de <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ef      	bne.n	80056be <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f040 809c 	bne.w	800581e <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11e      	bne.n	800572a <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b07      	cmp	r3, #7
 80056f2:	d008      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0x1d6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b11      	cmp	r3, #17
 80056fa:	d004      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0x1d6>
 80056fc:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005700:	481f      	ldr	r0, [pc, #124]	@ (8005780 <RCCEx_PLLSAI1_Config+0x250>)
 8005702:	f7fc fa61 	bl	8001bc8 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005706:	4b1f      	ldr	r3, [pc, #124]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800570e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	0211      	lsls	r1, r2, #8
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68d2      	ldr	r2, [r2, #12]
 800571c:	0912      	lsrs	r2, r2, #4
 800571e:	0452      	lsls	r2, r2, #17
 8005720:	430a      	orrs	r2, r1
 8005722:	4918      	ldr	r1, [pc, #96]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 8005724:	4313      	orrs	r3, r2
 8005726:	610b      	str	r3, [r1, #16]
 8005728:	e055      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d12b      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d010      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x22a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d00c      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x22a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b06      	cmp	r3, #6
 8005746:	d008      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x22a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d004      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x22a>
 8005750:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8005754:	480a      	ldr	r0, [pc, #40]	@ (8005780 <RCCEx_PLLSAI1_Config+0x250>)
 8005756:	f7fc fa37 	bl	8001bc8 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800575a:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005762:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6892      	ldr	r2, [r2, #8]
 800576a:	0211      	lsls	r1, r2, #8
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6912      	ldr	r2, [r2, #16]
 8005770:	0852      	lsrs	r2, r2, #1
 8005772:	3a01      	subs	r2, #1
 8005774:	0552      	lsls	r2, r2, #21
 8005776:	430a      	orrs	r2, r1
 8005778:	4902      	ldr	r1, [pc, #8]	@ (8005784 <RCCEx_PLLSAI1_Config+0x254>)
 800577a:	4313      	orrs	r3, r2
 800577c:	610b      	str	r3, [r1, #16]
 800577e:	e02a      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0x2a6>
 8005780:	0800a978 	.word	0x0800a978
 8005784:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d010      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0x282>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d00c      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0x282>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b06      	cmp	r3, #6
 800579e:	d008      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0x282>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d004      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0x282>
 80057a8:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80057ac:	481e      	ldr	r0, [pc, #120]	@ (8005828 <RCCEx_PLLSAI1_Config+0x2f8>)
 80057ae:	f7fc fa0b 	bl	8001bc8 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b2:	4b1e      	ldr	r3, [pc, #120]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	0211      	lsls	r1, r2, #8
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6952      	ldr	r2, [r2, #20]
 80057c8:	0852      	lsrs	r2, r2, #1
 80057ca:	3a01      	subs	r2, #1
 80057cc:	0652      	lsls	r2, r2, #25
 80057ce:	430a      	orrs	r2, r1
 80057d0:	4916      	ldr	r1, [pc, #88]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057d6:	4b15      	ldr	r3, [pc, #84]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a14      	ldr	r2, [pc, #80]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 80057dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fd f81f 	bl	8002824 <HAL_GetTick>
 80057e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e8:	e009      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ea:	f7fd f81b 	bl	8002824 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d902      	bls.n	80057fe <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	73fb      	strb	r3, [r7, #15]
          break;
 80057fc:	e005      	b.n	800580a <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0ef      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005810:	4b06      	ldr	r3, [pc, #24]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4904      	ldr	r1, [pc, #16]	@ (800582c <RCCEx_PLLSAI1_Config+0x2fc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	0800a978 	.word	0x0800a978
 800582c:	40021000 	.word	0x40021000

08005830 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x38>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d00c      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x38>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d008      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x38>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d004      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x38>
 800585e:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8005862:	4896      	ldr	r0, [pc, #600]	@ (8005abc <RCCEx_PLLSAI2_Config+0x28c>)
 8005864:	f7fc f9b0 	bl	8001bc8 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <RCCEx_PLLSAI2_Config+0x48>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d904      	bls.n	8005882 <RCCEx_PLLSAI2_Config+0x52>
 8005878:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 800587c:	488f      	ldr	r0, [pc, #572]	@ (8005abc <RCCEx_PLLSAI2_Config+0x28c>)
 800587e:	f7fc f9a3 	bl	8001bc8 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b07      	cmp	r3, #7
 8005888:	d903      	bls.n	8005892 <RCCEx_PLLSAI2_Config+0x62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b56      	cmp	r3, #86	@ 0x56
 8005890:	d904      	bls.n	800589c <RCCEx_PLLSAI2_Config+0x6c>
 8005892:	f640 4131 	movw	r1, #3121	@ 0xc31
 8005896:	4889      	ldr	r0, [pc, #548]	@ (8005abc <RCCEx_PLLSAI2_Config+0x28c>)
 8005898:	f7fc f996 	bl	8001bc8 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <RCCEx_PLLSAI2_Config+0x84>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <RCCEx_PLLSAI2_Config+0x94>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <RCCEx_PLLSAI2_Config+0x9e>
 80058c4:	f640 4132 	movw	r1, #3122	@ 0xc32
 80058c8:	487c      	ldr	r0, [pc, #496]	@ (8005abc <RCCEx_PLLSAI2_Config+0x28c>)
 80058ca:	f7fc f97d 	bl	8001bc8 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ce:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058da:	4b79      	ldr	r3, [pc, #484]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0203 	and.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d10d      	bne.n	8005906 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
       ||
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058f2:	4b73      	ldr	r3, [pc, #460]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
       ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d047      	beq.n	8005996 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
 800590a:	e044      	b.n	8005996 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d018      	beq.n	8005946 <RCCEx_PLLSAI2_Config+0x116>
 8005914:	2b03      	cmp	r3, #3
 8005916:	d825      	bhi.n	8005964 <RCCEx_PLLSAI2_Config+0x134>
 8005918:	2b01      	cmp	r3, #1
 800591a:	d002      	beq.n	8005922 <RCCEx_PLLSAI2_Config+0xf2>
 800591c:	2b02      	cmp	r3, #2
 800591e:	d009      	beq.n	8005934 <RCCEx_PLLSAI2_Config+0x104>
 8005920:	e020      	b.n	8005964 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005922:	4b67      	ldr	r3, [pc, #412]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d11d      	bne.n	800596a <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005932:	e01a      	b.n	800596a <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005934:	4b62      	ldr	r3, [pc, #392]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d116      	bne.n	800596e <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005944:	e013      	b.n	800596e <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005946:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10f      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005952:	4b5b      	ldr	r3, [pc, #364]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005962:	e006      	b.n	8005972 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e004      	b.n	8005974 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005972:	bf00      	nop
    }

    if(status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800597a:	4b51      	ldr	r3, [pc, #324]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	3b01      	subs	r3, #1
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	430b      	orrs	r3, r1
 8005990:	494b      	ldr	r1, [pc, #300]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005992:	4313      	orrs	r3, r2
 8005994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 808a 	bne.w	8005ab2 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800599e:	4b48      	ldr	r3, [pc, #288]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a47      	ldr	r2, [pc, #284]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80059a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059aa:	f7fc ff3b 	bl	8002824 <HAL_GetTick>
 80059ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059b0:	e009      	b.n	80059c6 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059b2:	f7fc ff37 	bl	8002824 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d902      	bls.n	80059c6 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	73fb      	strb	r3, [r7, #15]
        break;
 80059c4:	e005      	b.n	80059d2 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059c6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ef      	bne.n	80059b2 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d16c      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11e      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	d008      	beq.n	80059f8 <RCCEx_PLLSAI2_Config+0x1c8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b11      	cmp	r3, #17
 80059ec:	d004      	beq.n	80059f8 <RCCEx_PLLSAI2_Config+0x1c8>
 80059ee:	f640 4185 	movw	r1, #3205	@ 0xc85
 80059f2:	4832      	ldr	r0, [pc, #200]	@ (8005abc <RCCEx_PLLSAI2_Config+0x28c>)
 80059f4:	f7fc f8e8 	bl	8001bc8 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059f8:	4b31      	ldr	r3, [pc, #196]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6892      	ldr	r2, [r2, #8]
 8005a08:	0211      	lsls	r1, r2, #8
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68d2      	ldr	r2, [r2, #12]
 8005a0e:	0912      	lsrs	r2, r2, #4
 8005a10:	0452      	lsls	r2, r2, #17
 8005a12:	430a      	orrs	r2, r1
 8005a14:	492a      	ldr	r1, [pc, #168]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	614b      	str	r3, [r1, #20]
 8005a1a:	e026      	b.n	8005a6a <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d010      	beq.n	8005a46 <RCCEx_PLLSAI2_Config+0x216>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d00c      	beq.n	8005a46 <RCCEx_PLLSAI2_Config+0x216>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d008      	beq.n	8005a46 <RCCEx_PLLSAI2_Config+0x216>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d004      	beq.n	8005a46 <RCCEx_PLLSAI2_Config+0x216>
 8005a3c:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8005a40:	481e      	ldr	r0, [pc, #120]	@ (8005abc <RCCEx_PLLSAI2_Config+0x28c>)
 8005a42:	f7fc f8c1 	bl	8001bc8 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a46:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6892      	ldr	r2, [r2, #8]
 8005a56:	0211      	lsls	r1, r2, #8
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6912      	ldr	r2, [r2, #16]
 8005a5c:	0852      	lsrs	r2, r2, #1
 8005a5e:	3a01      	subs	r2, #1
 8005a60:	0652      	lsls	r2, r2, #25
 8005a62:	430a      	orrs	r2, r1
 8005a64:	4916      	ldr	r1, [pc, #88]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a6a:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a14      	ldr	r2, [pc, #80]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a76:	f7fc fed5 	bl	8002824 <HAL_GetTick>
 8005a7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a7c:	e009      	b.n	8005a92 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a7e:	f7fc fed1 	bl	8002824 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d902      	bls.n	8005a92 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a90:	e005      	b.n	8005a9e <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a92:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0ef      	beq.n	8005a7e <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aa4:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	4904      	ldr	r1, [pc, #16]	@ (8005ac0 <RCCEx_PLLSAI2_Config+0x290>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	0800a978 	.word	0x0800a978
 8005ac0:	40021000 	.word	0x40021000

08005ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e1dd      	b.n	8005e92 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a7b      	ldr	r2, [pc, #492]	@ (8005cc8 <HAL_SPI_Init+0x204>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_SPI_Init+0x3a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a79      	ldr	r2, [pc, #484]	@ (8005ccc <HAL_SPI_Init+0x208>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_SPI_Init+0x3a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a78      	ldr	r2, [pc, #480]	@ (8005cd0 <HAL_SPI_Init+0x20c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_SPI_Init+0x3a>
 8005af4:	f240 1147 	movw	r1, #327	@ 0x147
 8005af8:	4876      	ldr	r0, [pc, #472]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005afa:	f7fc f865 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <HAL_SPI_Init+0x56>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b0e:	d004      	beq.n	8005b1a <HAL_SPI_Init+0x56>
 8005b10:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8005b14:	486f      	ldr	r0, [pc, #444]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005b16:	f7fc f857 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <HAL_SPI_Init+0x7c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2a:	d009      	beq.n	8005b40 <HAL_SPI_Init+0x7c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b34:	d004      	beq.n	8005b40 <HAL_SPI_Init+0x7c>
 8005b36:	f240 1149 	movw	r1, #329	@ 0x149
 8005b3a:	4866      	ldr	r0, [pc, #408]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005b3c:	f7fc f844 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b48:	d040      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005b52:	d03b      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8005b5c:	d036      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b66:	d031      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8005b70:	d02c      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005b7a:	d027      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8005b84:	d022      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b8e:	d01d      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b98:	d018      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ba2:	d013      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005bac:	d00e      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb6:	d009      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc0:	d004      	beq.n	8005bcc <HAL_SPI_Init+0x108>
 8005bc2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8005bc6:	4843      	ldr	r0, [pc, #268]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005bc8:	f7fb fffe 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd4:	d00d      	beq.n	8005bf2 <HAL_SPI_Init+0x12e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <HAL_SPI_Init+0x12e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005be6:	d004      	beq.n	8005bf2 <HAL_SPI_Init+0x12e>
 8005be8:	f240 114b 	movw	r1, #331	@ 0x14b
 8005bec:	4839      	ldr	r0, [pc, #228]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005bee:	f7fb ffeb 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d008      	beq.n	8005c0c <HAL_SPI_Init+0x148>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <HAL_SPI_Init+0x148>
 8005c02:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005c06:	4833      	ldr	r0, [pc, #204]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005c08:	f7fb ffde 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d020      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d01c      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d018      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	2b18      	cmp	r3, #24
 8005c2a:	d014      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d010      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	2b28      	cmp	r3, #40	@ 0x28
 8005c3a:	d00c      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	2b30      	cmp	r3, #48	@ 0x30
 8005c42:	d008      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b38      	cmp	r3, #56	@ 0x38
 8005c4a:	d004      	beq.n	8005c56 <HAL_SPI_Init+0x192>
 8005c4c:	f240 114d 	movw	r1, #333	@ 0x14d
 8005c50:	4820      	ldr	r0, [pc, #128]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005c52:	f7fb ffb9 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_SPI_Init+0x1ac>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	2b80      	cmp	r3, #128	@ 0x80
 8005c64:	d004      	beq.n	8005c70 <HAL_SPI_Init+0x1ac>
 8005c66:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8005c6a:	481a      	ldr	r0, [pc, #104]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005c6c:	f7fb ffac 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_SPI_Init+0x1c6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d004      	beq.n	8005c8a <HAL_SPI_Init+0x1c6>
 8005c80:	f240 114f 	movw	r1, #335	@ 0x14f
 8005c84:	4813      	ldr	r0, [pc, #76]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005c86:	f7fb ff9f 	bl	8001bc8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d151      	bne.n	8005d36 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_SPI_Init+0x1e8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d004      	beq.n	8005cac <HAL_SPI_Init+0x1e8>
 8005ca2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8005ca6:	480b      	ldr	r0, [pc, #44]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005ca8:	f7fb ff8e 	bl	8001bc8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d011      	beq.n	8005cd8 <HAL_SPI_Init+0x214>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d00d      	beq.n	8005cd8 <HAL_SPI_Init+0x214>
 8005cbc:	f240 1153 	movw	r1, #339	@ 0x153
 8005cc0:	4804      	ldr	r0, [pc, #16]	@ (8005cd4 <HAL_SPI_Init+0x210>)
 8005cc2:	f7fb ff81 	bl	8001bc8 <assert_failed>
 8005cc6:	e007      	b.n	8005cd8 <HAL_SPI_Init+0x214>
 8005cc8:	40013000 	.word	0x40013000
 8005ccc:	40003800 	.word	0x40003800
 8005cd0:	40003c00 	.word	0x40003c00
 8005cd4:	0800a9b4 	.word	0x0800a9b4

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce0:	d125      	bne.n	8005d2e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d050      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d04c      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d048      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d044      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d040      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b28      	cmp	r3, #40	@ 0x28
 8005d10:	d03c      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	2b30      	cmp	r3, #48	@ 0x30
 8005d18:	d038      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	2b38      	cmp	r3, #56	@ 0x38
 8005d20:	d034      	beq.n	8005d8c <HAL_SPI_Init+0x2c8>
 8005d22:	f240 1157 	movw	r1, #343	@ 0x157
 8005d26:	485d      	ldr	r0, [pc, #372]	@ (8005e9c <HAL_SPI_Init+0x3d8>)
 8005d28:	f7fb ff4e 	bl	8001bc8 <assert_failed>
 8005d2c:	e02e      	b.n	8005d8c <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	61da      	str	r2, [r3, #28]
 8005d34:	e02a      	b.n	8005d8c <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d020      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d01c      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d018      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	2b18      	cmp	r3, #24
 8005d54:	d014      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d010      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2b28      	cmp	r3, #40	@ 0x28
 8005d64:	d00c      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	2b30      	cmp	r3, #48	@ 0x30
 8005d6c:	d008      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	2b38      	cmp	r3, #56	@ 0x38
 8005d74:	d004      	beq.n	8005d80 <HAL_SPI_Init+0x2bc>
 8005d76:	f240 1161 	movw	r1, #353	@ 0x161
 8005d7a:	4848      	ldr	r0, [pc, #288]	@ (8005e9c <HAL_SPI_Init+0x3d8>)
 8005d7c:	f7fb ff24 	bl	8001bc8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fb ff52 	bl	8001c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dcc:	d902      	bls.n	8005dd4 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e002      	b.n	8005dda <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005de2:	d007      	beq.n	8005df4 <HAL_SPI_Init+0x330>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e36:	ea42 0103 	orr.w	r1, r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	f003 0204 	and.w	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e70:	ea42 0103 	orr.w	r1, r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	0800a9b4 	.word	0x0800a9b4

08005ea0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <HAL_SPI_Transmit_IT+0x2a>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebe:	d004      	beq.n	8005eca <HAL_SPI_Transmit_IT+0x2a>
 8005ec0:	f240 6144 	movw	r1, #1604	@ 0x644
 8005ec4:	483e      	ldr	r0, [pc, #248]	@ (8005fc0 <HAL_SPI_Transmit_IT+0x120>)
 8005ec6:	f7fb fe7f 	bl	8001bc8 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Transmit_IT+0x36>
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e06d      	b.n	8005fb6 <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d001      	beq.n	8005eea <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e065      	b.n	8005fb6 <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_SPI_Transmit_IT+0x58>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e05e      	b.n	8005fb6 <HAL_SPI_Transmit_IT+0x116>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2203      	movs	r2, #3
 8005f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f44:	d903      	bls.n	8005f4e <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc4 <HAL_SPI_Transmit_IT+0x124>)
 8005f4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f4c:	e002      	b.n	8005f54 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <HAL_SPI_Transmit_IT+0x128>)
 8005f52:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5c:	d10f      	bne.n	8005f7e <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d007      	beq.n	8005f9c <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8005fb2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	0800a9b4 	.word	0x0800a9b4
 8005fc4:	080069d9 	.word	0x080069d9
 8005fc8:	08006993 	.word	0x08006993

08005fcc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <HAL_SPI_Receive_DMA+0x20>
 8005fe2:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 8005fe6:	488f      	ldr	r0, [pc, #572]	@ (8006224 <HAL_SPI_Receive_DMA+0x258>)
 8005fe8:	f7fb fdee 	bl	8001bc8 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d001      	beq.n	8005ffc <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e10e      	b.n	800621a <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d119      	bne.n	8006038 <HAL_SPI_Receive_DMA+0x6c>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800600c:	d114      	bne.n	8006038 <HAL_SPI_Receive_DMA+0x6c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2204      	movs	r2, #4
 8006012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_SPI_Receive_DMA+0x5c>
 800601e:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 8006022:	4880      	ldr	r0, [pc, #512]	@ (8006224 <HAL_SPI_Receive_DMA+0x258>)
 8006024:	f7fb fdd0 	bl	8001bc8 <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f900 	bl	8006234 <HAL_SPI_TransmitReceive_DMA>
 8006034:	4603      	mov	r3, r0
 8006036:	e0f0      	b.n	800621a <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Receive_DMA+0x78>
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_SPI_Receive_DMA+0x7c>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0e8      	b.n	800621a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_SPI_Receive_DMA+0x8a>
 8006052:	2302      	movs	r3, #2
 8006054:	e0e1      	b.n	800621a <HAL_SPI_Receive_DMA+0x24e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2204      	movs	r2, #4
 8006062:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a2:	d10f      	bne.n	80060c4 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060d2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060dc:	d908      	bls.n	80060f0 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	e042      	b.n	8006176 <HAL_SPI_Receive_DMA+0x1aa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060fe:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610a:	d134      	bne.n	8006176 <HAL_SPI_Receive_DMA+0x1aa>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800611a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006122:	b29b      	uxth	r3, r3
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d111      	bne.n	8006150 <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800613a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006142:	b29b      	uxth	r3, r3
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800614e:	e012      	b.n	8006176 <HAL_SPI_Receive_DMA+0x1aa>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800615e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006166:	b29b      	uxth	r3, r3
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	b29b      	uxth	r3, r3
 800616c:	3301      	adds	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617a:	4a2b      	ldr	r2, [pc, #172]	@ (8006228 <HAL_SPI_Receive_DMA+0x25c>)
 800617c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006182:	4a2a      	ldr	r2, [pc, #168]	@ (800622c <HAL_SPI_Receive_DMA+0x260>)
 8006184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	4a29      	ldr	r2, [pc, #164]	@ (8006230 <HAL_SPI_Receive_DMA+0x264>)
 800618c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006192:	2200      	movs	r2, #0
 8006194:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	4619      	mov	r1, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80061b0:	f7fc ff36 	bl	8003020 <HAL_DMA_Start_IT>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061be:	f043 0210 	orr.w	r2, r3, #16
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e023      	b.n	800621a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061dc:	2b40      	cmp	r3, #64	@ 0x40
 80061de:	d007      	beq.n	80061f0 <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061ee:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0220 	orr.w	r2, r2, #32
 8006206:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	0800a9b4 	.word	0x0800a9b4
 8006228:	080068f1 	.word	0x080068f1
 800622c:	080067b9 	.word	0x080067b9
 8006230:	08006929 	.word	0x08006929

08006234 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_SPI_TransmitReceive_DMA+0x20>
 800624a:	f640 0172 	movw	r1, #2162	@ 0x872
 800624e:	487f      	ldr	r0, [pc, #508]	@ (800644c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006250:	f7fb fcba 	bl	8001bc8 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <HAL_SPI_TransmitReceive_DMA+0x32>
 800625c:	f640 0173 	movw	r1, #2163	@ 0x873
 8006260:	487a      	ldr	r0, [pc, #488]	@ (800644c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006262:	f7fb fcb1 	bl	8001bc8 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <HAL_SPI_TransmitReceive_DMA+0x44>
 800626e:	f640 0176 	movw	r1, #2166	@ 0x876
 8006272:	4876      	ldr	r0, [pc, #472]	@ (800644c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006274:	f7fb fca8 	bl	8001bc8 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800627e:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d00c      	beq.n	80062a6 <HAL_SPI_TransmitReceive_DMA+0x72>
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006292:	d106      	bne.n	80062a2 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <HAL_SPI_TransmitReceive_DMA+0x6e>
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d001      	beq.n	80062a6 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
 80062a4:	e15f      	b.n	8006566 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80062b2:	887b      	ldrh	r3, [r7, #2]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e154      	b.n	8006566 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_SPI_TransmitReceive_DMA+0x96>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e14d      	b.n	8006566 <HAL_SPI_TransmitReceive_DMA+0x332>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d003      	beq.n	80062e6 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2205      	movs	r2, #5
 80062e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	887a      	ldrh	r2, [r7, #2]
 80062f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	887a      	ldrh	r2, [r7, #2]
 80062fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	887a      	ldrh	r2, [r7, #2]
 8006308:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800632e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006338:	d908      	bls.n	800634c <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	e06f      	b.n	800642c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800635a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006366:	d126      	bne.n	80063b6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006382:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006392:	e010      	b.n	80063b6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063a2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3301      	adds	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c0:	d134      	bne.n	800642c <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063d0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d111      	bne.n	8006406 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063f0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006404:	e012      	b.n	800642c <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006414:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800641c:	b29b      	uxth	r3, r3
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	3301      	adds	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b04      	cmp	r3, #4
 8006436:	d10f      	bne.n	8006458 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643c:	4a04      	ldr	r2, [pc, #16]	@ (8006450 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800643e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006444:	4a03      	ldr	r2, [pc, #12]	@ (8006454 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8006446:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006448:	e00e      	b.n	8006468 <HAL_SPI_TransmitReceive_DMA+0x234>
 800644a:	bf00      	nop
 800644c:	0800a9b4 	.word	0x0800a9b4
 8006450:	080068f1 	.word	0x080068f1
 8006454:	080067b9 	.word	0x080067b9
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645c:	4a44      	ldr	r2, [pc, #272]	@ (8006570 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800645e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006464:	4a43      	ldr	r2, [pc, #268]	@ (8006574 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8006466:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646c:	4a42      	ldr	r2, [pc, #264]	@ (8006578 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800646e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006474:	2200      	movs	r2, #0
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	4619      	mov	r1, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006490:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006492:	f7fc fdc5 	bl	8003020 <HAL_DMA_Start_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a0:	f043 0210 	orr.w	r2, r3, #16
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e058      	b.n	8006566 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d0:	2200      	movs	r2, #0
 80064d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d8:	2200      	movs	r2, #0
 80064da:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e0:	2200      	movs	r2, #0
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	4619      	mov	r1, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064fc:	f7fc fd90 	bl	8003020 <HAL_DMA_Start_IT>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800650a:	f043 0210 	orr.w	r2, r3, #16
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e023      	b.n	8006566 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b40      	cmp	r3, #64	@ 0x40
 800652a:	d007      	beq.n	800653c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800653a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0220 	orr.w	r2, r2, #32
 8006552:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0202 	orr.w	r2, r2, #2
 8006562:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	0800690d 	.word	0x0800690d
 8006574:	08006861 	.word	0x08006861
 8006578:	08006929 	.word	0x08006929

0800657c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10f      	bne.n	80065c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	099b      	lsrs	r3, r3, #6
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
    return;
 80065be:	e0d7      	b.n	8006770 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <HAL_SPI_IRQHandler+0x66>
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	09db      	lsrs	r3, r3, #7
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
    return;
 80065e0:	e0c6      	b.n	8006770 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10c      	bne.n	8006608 <HAL_SPI_IRQHandler+0x8c>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	099b      	lsrs	r3, r3, #6
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80b4 	beq.w	8006770 <HAL_SPI_IRQHandler+0x1f4>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80ad 	beq.w	8006770 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	099b      	lsrs	r3, r3, #6
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d023      	beq.n	800666a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d011      	beq.n	8006652 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006632:	f043 0204 	orr.w	r2, r3, #4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	e00b      	b.n	800666a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	693b      	ldr	r3, [r7, #16]
        return;
 8006668:	e082      	b.n	8006770 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d014      	beq.n	80066a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800667a:	f043 0201 	orr.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	0a1b      	lsrs	r3, r3, #8
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00c      	beq.n	80066c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b0:	f043 0208 	orr.w	r2, r3, #8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066b8:	2300      	movs	r3, #0
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04f      	beq.n	800676e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <HAL_SPI_IRQHandler+0x17e>
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d034      	beq.n	8006764 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0203 	bic.w	r2, r2, #3
 8006708:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670e:	2b00      	cmp	r3, #0
 8006710:	d011      	beq.n	8006736 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	4a18      	ldr	r2, [pc, #96]	@ (8006778 <HAL_SPI_IRQHandler+0x1fc>)
 8006718:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671e:	4618      	mov	r0, r3
 8006720:	f7fc fcec 	bl	80030fc <HAL_DMA_Abort_IT>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800672e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	4a0d      	ldr	r2, [pc, #52]	@ (8006778 <HAL_SPI_IRQHandler+0x1fc>)
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	4618      	mov	r0, r3
 800674c:	f7fc fcd6 	bl	80030fc <HAL_DMA_Abort_IT>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800675a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006762:	e003      	b.n	800676c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f81d 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800676a:	e000      	b.n	800676e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800676c:	bf00      	nop
    return;
 800676e:	bf00      	nop
  }
}
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	08006969 	.word	0x08006969

0800677c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c6:	f7fc f82d 	bl	8002824 <HAL_GetTick>
 80067ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d03c      	beq.n	8006854 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0220 	bic.w	r2, r2, #32
 80067e8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <SPI_DMAReceiveCplt+0x56>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067fa:	d108      	bne.n	800680e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0203 	bic.w	r2, r2, #3
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	e007      	b.n	800681e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	2164      	movs	r1, #100	@ 0x64
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fa18 	bl	8006c58 <SPI_EndRxTransaction>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff ffa9 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006852:	e002      	b.n	800685a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7fb f988 	bl	8001b6a <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800686e:	f7fb ffd9 	bl	8002824 <HAL_GetTick>
 8006872:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b20      	cmp	r3, #32
 8006880:	d030      	beq.n	80068e4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0220 	bic.w	r2, r2, #32
 8006890:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	2164      	movs	r1, #100	@ 0x64
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 fa36 	bl	8006d08 <SPI_EndRxTxTransaction>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0203 	bic.w	r2, r2, #3
 80068bc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff ff61 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068e2:	e002      	b.n	80068ea <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff ff49 	bl	800677c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7fb f928 	bl	8001b54 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff ff38 	bl	8006790 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0203 	bic.w	r2, r2, #3
 8006944:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694a:	f043 0210 	orr.w	r2, r3, #16
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff ff22 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff ff0d 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	7812      	ldrb	r2, [r2, #0]
 80069a6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9e2 	bl	8006d94 <SPI_CloseTx_ISR>
  }
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	881a      	ldrh	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f0:	1c9a      	adds	r2, r3, #2
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9c0 	bl	8006d94 <SPI_CloseTx_ISR>
  }
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a2c:	f7fb fefa 	bl	8002824 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	4413      	add	r3, r2
 8006a3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a3c:	f7fb fef2 	bl	8002824 <HAL_GetTick>
 8006a40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a42:	4b39      	ldr	r3, [pc, #228]	@ (8006b28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	015b      	lsls	r3, r3, #5
 8006a48:	0d1b      	lsrs	r3, r3, #20
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	fb02 f303 	mul.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a52:	e054      	b.n	8006afe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d050      	beq.n	8006afe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a5c:	f7fb fee2 	bl	8002824 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d902      	bls.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d13d      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a8a:	d111      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a94:	d004      	beq.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9e:	d107      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab8:	d10f      	bne.n	8006ada <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e017      	b.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2301      	moveq	r3, #1
 8006b10:	2300      	movne	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d19b      	bne.n	8006a54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000028 	.word	0x20000028

08006b2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b3e:	f7fb fe71 	bl	8002824 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006b4e:	f7fb fe69 	bl	8002824 <HAL_GetTick>
 8006b52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006c54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	00da      	lsls	r2, r3, #3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	0d1b      	lsrs	r3, r3, #20
 8006b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b74:	e060      	b.n	8006c38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b7c:	d107      	bne.n	8006b8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d050      	beq.n	8006c38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b96:	f7fb fe45 	bl	8002824 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d902      	bls.n	8006bac <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d13d      	bne.n	8006c28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bc4:	d111      	bne.n	8006bea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bce:	d004      	beq.n	8006bda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd8:	d107      	bne.n	8006bea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf2:	d10f      	bne.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e010      	b.n	8006c4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4013      	ands	r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d196      	bne.n	8006b76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3728      	adds	r7, #40	@ 0x28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000028 	.word	0x20000028

08006c58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c6c:	d111      	bne.n	8006c92 <SPI_EndRxTransaction+0x3a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c76:	d004      	beq.n	8006c82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c80:	d107      	bne.n	8006c92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c90:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2180      	movs	r1, #128	@ 0x80
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7ff febd 	bl	8006a1c <SPI_WaitFlagStateUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cac:	f043 0220 	orr.w	r2, r3, #32
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e023      	b.n	8006d00 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc0:	d11d      	bne.n	8006cfe <SPI_EndRxTransaction+0xa6>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cca:	d004      	beq.n	8006cd6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd4:	d113      	bne.n	8006cfe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff ff22 	bl	8006b2c <SPI_WaitFifoStateUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf2:	f043 0220 	orr.w	r2, r3, #32
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e000      	b.n	8006d00 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff ff03 	bl	8006b2c <SPI_WaitFifoStateUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e027      	b.n	8006d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2180      	movs	r1, #128	@ 0x80
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff fe68 	bl	8006a1c <SPI_WaitFlagStateUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d56:	f043 0220 	orr.w	r2, r3, #32
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e014      	b.n	8006d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff fedc 	bl	8006b2c <SPI_WaitFifoStateUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e000      	b.n	8006d8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d9c:	f7fb fd42 	bl	8002824 <HAL_GetTick>
 8006da0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006db0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	2164      	movs	r1, #100	@ 0x64
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ffa6 	bl	8006d08 <SPI_EndRxTxTransaction>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc6:	f043 0220 	orr.w	r2, r3, #32
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fcd1 	bl	80067a4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006e02:	e002      	b.n	8006e0a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7fa febb 	bl	8001b80 <HAL_SPI_TxCpltCallback>
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0e6      	b.n	8006ff4 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a74      	ldr	r2, [pc, #464]	@ (8006ffc <HAL_TIM_Base_Init+0x1e8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d036      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e38:	d031      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a70      	ldr	r2, [pc, #448]	@ (8007000 <HAL_TIM_Base_Init+0x1ec>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d02c      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a6e      	ldr	r2, [pc, #440]	@ (8007004 <HAL_TIM_Base_Init+0x1f0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d027      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a6d      	ldr	r2, [pc, #436]	@ (8007008 <HAL_TIM_Base_Init+0x1f4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800700c <HAL_TIM_Base_Init+0x1f8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01d      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a6a      	ldr	r2, [pc, #424]	@ (8007010 <HAL_TIM_Base_Init+0x1fc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a68      	ldr	r2, [pc, #416]	@ (8007014 <HAL_TIM_Base_Init+0x200>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a67      	ldr	r2, [pc, #412]	@ (8007018 <HAL_TIM_Base_Init+0x204>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a65      	ldr	r2, [pc, #404]	@ (800701c <HAL_TIM_Base_Init+0x208>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a64      	ldr	r2, [pc, #400]	@ (8007020 <HAL_TIM_Base_Init+0x20c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_TIM_Base_Init+0x8a>
 8006e94:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006e98:	4862      	ldr	r0, [pc, #392]	@ (8007024 <HAL_TIM_Base_Init+0x210>)
 8006e9a:	f7fa fe95 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d014      	beq.n	8006ed0 <HAL_TIM_Base_Init+0xbc>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d010      	beq.n	8006ed0 <HAL_TIM_Base_Init+0xbc>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d00c      	beq.n	8006ed0 <HAL_TIM_Base_Init+0xbc>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b40      	cmp	r3, #64	@ 0x40
 8006ebc:	d008      	beq.n	8006ed0 <HAL_TIM_Base_Init+0xbc>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b60      	cmp	r3, #96	@ 0x60
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIM_Base_Init+0xbc>
 8006ec6:	f240 1117 	movw	r1, #279	@ 0x117
 8006eca:	4856      	ldr	r0, [pc, #344]	@ (8007024 <HAL_TIM_Base_Init+0x210>)
 8006ecc:	f7fa fe7c 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_TIM_Base_Init+0xe2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee0:	d009      	beq.n	8006ef6 <HAL_TIM_Base_Init+0xe2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eea:	d004      	beq.n	8006ef6 <HAL_TIM_Base_Init+0xe2>
 8006eec:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006ef0:	484c      	ldr	r0, [pc, #304]	@ (8007024 <HAL_TIM_Base_Init+0x210>)
 8006ef2:	f7fa fe69 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efe:	d004      	beq.n	8006f0a <HAL_TIM_Base_Init+0xf6>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a40      	ldr	r2, [pc, #256]	@ (8007008 <HAL_TIM_Base_Init+0x1f4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d107      	bne.n	8006f1a <HAL_TIM_Base_Init+0x106>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf14      	ite	ne
 8006f12:	2301      	movne	r3, #1
 8006f14:	2300      	moveq	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	e00e      	b.n	8006f38 <HAL_TIM_Base_Init+0x124>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d006      	beq.n	8006f30 <HAL_TIM_Base_Init+0x11c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2a:	d201      	bcs.n	8006f30 <HAL_TIM_Base_Init+0x11c>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <HAL_TIM_Base_Init+0x11e>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_Base_Init+0x132>
 8006f3c:	f240 1119 	movw	r1, #281	@ 0x119
 8006f40:	4838      	ldr	r0, [pc, #224]	@ (8007024 <HAL_TIM_Base_Init+0x210>)
 8006f42:	f7fa fe41 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_TIM_Base_Init+0x14c>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b80      	cmp	r3, #128	@ 0x80
 8006f54:	d004      	beq.n	8006f60 <HAL_TIM_Base_Init+0x14c>
 8006f56:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006f5a:	4832      	ldr	r0, [pc, #200]	@ (8007024 <HAL_TIM_Base_Init+0x210>)
 8006f5c:	f7fa fe34 	bl	8001bc8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fb fad7 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f000 ff3b 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40000400 	.word	0x40000400
 8007004:	40000800 	.word	0x40000800
 8007008:	40000c00 	.word	0x40000c00
 800700c:	40001000 	.word	0x40001000
 8007010:	40001400 	.word	0x40001400
 8007014:	40013400 	.word	0x40013400
 8007018:	40014000 	.word	0x40014000
 800701c:	40014400 	.word	0x40014400
 8007020:	40014800 	.word	0x40014800
 8007024:	0800a9ec 	.word	0x0800a9ec

08007028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a4a      	ldr	r2, [pc, #296]	@ (8007160 <HAL_TIM_Base_Start_IT+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d036      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007042:	d031      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a46      	ldr	r2, [pc, #280]	@ (8007164 <HAL_TIM_Base_Start_IT+0x13c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02c      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a45      	ldr	r2, [pc, #276]	@ (8007168 <HAL_TIM_Base_Start_IT+0x140>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d027      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a43      	ldr	r2, [pc, #268]	@ (800716c <HAL_TIM_Base_Start_IT+0x144>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d022      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a42      	ldr	r2, [pc, #264]	@ (8007170 <HAL_TIM_Base_Start_IT+0x148>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d01d      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a40      	ldr	r2, [pc, #256]	@ (8007174 <HAL_TIM_Base_Start_IT+0x14c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a3f      	ldr	r2, [pc, #252]	@ (8007178 <HAL_TIM_Base_Start_IT+0x150>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a3d      	ldr	r2, [pc, #244]	@ (800717c <HAL_TIM_Base_Start_IT+0x154>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a3c      	ldr	r2, [pc, #240]	@ (8007180 <HAL_TIM_Base_Start_IT+0x158>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3a      	ldr	r2, [pc, #232]	@ (8007184 <HAL_TIM_Base_Start_IT+0x15c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0x80>
 800709e:	f240 11d3 	movw	r1, #467	@ 0x1d3
 80070a2:	4839      	ldr	r0, [pc, #228]	@ (8007188 <HAL_TIM_Base_Start_IT+0x160>)
 80070a4:	f7fa fd90 	bl	8001bc8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d001      	beq.n	80070b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e04f      	b.n	8007158 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a22      	ldr	r2, [pc, #136]	@ (8007160 <HAL_TIM_Base_Start_IT+0x138>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01d      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0xee>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e2:	d018      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0xee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007164 <HAL_TIM_Base_Start_IT+0x13c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0xee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007168 <HAL_TIM_Base_Start_IT+0x140>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0xee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1b      	ldr	r2, [pc, #108]	@ (800716c <HAL_TIM_Base_Start_IT+0x144>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0xee>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1c      	ldr	r2, [pc, #112]	@ (8007178 <HAL_TIM_Base_Start_IT+0x150>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0xee>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1a      	ldr	r2, [pc, #104]	@ (800717c <HAL_TIM_Base_Start_IT+0x154>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d115      	bne.n	8007142 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	4b1b      	ldr	r3, [pc, #108]	@ (800718c <HAL_TIM_Base_Start_IT+0x164>)
 800711e:	4013      	ands	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b06      	cmp	r3, #6
 8007126:	d015      	beq.n	8007154 <HAL_TIM_Base_Start_IT+0x12c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712e:	d011      	beq.n	8007154 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007140:	e008      	b.n	8007154 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0201 	orr.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e000      	b.n	8007156 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40001000 	.word	0x40001000
 8007174:	40001400 	.word	0x40001400
 8007178:	40013400 	.word	0x40013400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800
 8007188:	0800a9ec 	.word	0x0800a9ec
 800718c:	00010007 	.word	0x00010007

08007190 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e1b0      	b.n	8007506 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a7f      	ldr	r2, [pc, #508]	@ (80073a8 <HAL_TIM_Encoder_Init+0x218>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01d      	beq.n	80071ea <HAL_TIM_Encoder_Init+0x5a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b6:	d018      	beq.n	80071ea <HAL_TIM_Encoder_Init+0x5a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a7b      	ldr	r2, [pc, #492]	@ (80073ac <HAL_TIM_Encoder_Init+0x21c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <HAL_TIM_Encoder_Init+0x5a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a7a      	ldr	r2, [pc, #488]	@ (80073b0 <HAL_TIM_Encoder_Init+0x220>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00e      	beq.n	80071ea <HAL_TIM_Encoder_Init+0x5a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a78      	ldr	r2, [pc, #480]	@ (80073b4 <HAL_TIM_Encoder_Init+0x224>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d009      	beq.n	80071ea <HAL_TIM_Encoder_Init+0x5a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a77      	ldr	r2, [pc, #476]	@ (80073b8 <HAL_TIM_Encoder_Init+0x228>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIM_Encoder_Init+0x5a>
 80071e0:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80071e4:	4875      	ldr	r0, [pc, #468]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 80071e6:	f7fa fcef 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d014      	beq.n	800721c <HAL_TIM_Encoder_Init+0x8c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b10      	cmp	r3, #16
 80071f8:	d010      	beq.n	800721c <HAL_TIM_Encoder_Init+0x8c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d00c      	beq.n	800721c <HAL_TIM_Encoder_Init+0x8c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2b40      	cmp	r3, #64	@ 0x40
 8007208:	d008      	beq.n	800721c <HAL_TIM_Encoder_Init+0x8c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b60      	cmp	r3, #96	@ 0x60
 8007210:	d004      	beq.n	800721c <HAL_TIM_Encoder_Init+0x8c>
 8007212:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007216:	4869      	ldr	r0, [pc, #420]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 8007218:	f7fa fcd6 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00e      	beq.n	8007242 <HAL_TIM_Encoder_Init+0xb2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800722c:	d009      	beq.n	8007242 <HAL_TIM_Encoder_Init+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007236:	d004      	beq.n	8007242 <HAL_TIM_Encoder_Init+0xb2>
 8007238:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800723c:	485f      	ldr	r0, [pc, #380]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 800723e:	f7fa fcc3 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_TIM_Encoder_Init+0xcc>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	2b80      	cmp	r3, #128	@ 0x80
 8007250:	d004      	beq.n	800725c <HAL_TIM_Encoder_Init+0xcc>
 8007252:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8007256:	4859      	ldr	r0, [pc, #356]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 8007258:	f7fa fcb6 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d00c      	beq.n	800727e <HAL_TIM_Encoder_Init+0xee>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d008      	beq.n	800727e <HAL_TIM_Encoder_Init+0xee>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b03      	cmp	r3, #3
 8007272:	d004      	beq.n	800727e <HAL_TIM_Encoder_Init+0xee>
 8007274:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8007278:	4850      	ldr	r0, [pc, #320]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 800727a:	f7fa fca5 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d00c      	beq.n	80072a0 <HAL_TIM_Encoder_Init+0x110>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d008      	beq.n	80072a0 <HAL_TIM_Encoder_Init+0x110>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b03      	cmp	r3, #3
 8007294:	d004      	beq.n	80072a0 <HAL_TIM_Encoder_Init+0x110>
 8007296:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800729a:	4848      	ldr	r0, [pc, #288]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 800729c:	f7fa fc94 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d00c      	beq.n	80072c2 <HAL_TIM_Encoder_Init+0x132>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d008      	beq.n	80072c2 <HAL_TIM_Encoder_Init+0x132>
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d004      	beq.n	80072c2 <HAL_TIM_Encoder_Init+0x132>
 80072b8:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 80072bc:	483f      	ldr	r0, [pc, #252]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 80072be:	f7fa fc83 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <HAL_TIM_Encoder_Init+0x14c>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d004      	beq.n	80072dc <HAL_TIM_Encoder_Init+0x14c>
 80072d2:	f640 31ea 	movw	r1, #3050	@ 0xbea
 80072d6:	4839      	ldr	r0, [pc, #228]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 80072d8:	f7fa fc76 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_TIM_Encoder_Init+0x166>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d004      	beq.n	80072f6 <HAL_TIM_Encoder_Init+0x166>
 80072ec:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 80072f0:	4832      	ldr	r0, [pc, #200]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 80072f2:	f7fa fc69 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d010      	beq.n	8007320 <HAL_TIM_Encoder_Init+0x190>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b04      	cmp	r3, #4
 8007304:	d00c      	beq.n	8007320 <HAL_TIM_Encoder_Init+0x190>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b08      	cmp	r3, #8
 800730c:	d008      	beq.n	8007320 <HAL_TIM_Encoder_Init+0x190>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b0c      	cmp	r3, #12
 8007314:	d004      	beq.n	8007320 <HAL_TIM_Encoder_Init+0x190>
 8007316:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800731a:	4828      	ldr	r0, [pc, #160]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 800731c:	f7fa fc54 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <HAL_TIM_Encoder_Init+0x1ba>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	2b04      	cmp	r3, #4
 800732e:	d00c      	beq.n	800734a <HAL_TIM_Encoder_Init+0x1ba>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b08      	cmp	r3, #8
 8007336:	d008      	beq.n	800734a <HAL_TIM_Encoder_Init+0x1ba>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	d004      	beq.n	800734a <HAL_TIM_Encoder_Init+0x1ba>
 8007340:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007344:	481d      	ldr	r0, [pc, #116]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 8007346:	f7fa fc3f 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d904      	bls.n	800735c <HAL_TIM_Encoder_Init+0x1cc>
 8007352:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8007356:	4819      	ldr	r0, [pc, #100]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 8007358:	f7fa fc36 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d904      	bls.n	800736e <HAL_TIM_Encoder_Init+0x1de>
 8007364:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8007368:	4814      	ldr	r0, [pc, #80]	@ (80073bc <HAL_TIM_Encoder_Init+0x22c>)
 800736a:	f7fa fc2d 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007376:	d004      	beq.n	8007382 <HAL_TIM_Encoder_Init+0x1f2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a0d      	ldr	r2, [pc, #52]	@ (80073b4 <HAL_TIM_Encoder_Init+0x224>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d107      	bne.n	8007392 <HAL_TIM_Encoder_Init+0x202>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e01a      	b.n	80073c8 <HAL_TIM_Encoder_Init+0x238>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d012      	beq.n	80073c0 <HAL_TIM_Encoder_Init+0x230>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a2:	d20d      	bcs.n	80073c0 <HAL_TIM_Encoder_Init+0x230>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e00c      	b.n	80073c2 <HAL_TIM_Encoder_Init+0x232>
 80073a8:	40012c00 	.word	0x40012c00
 80073ac:	40000400 	.word	0x40000400
 80073b0:	40000800 	.word	0x40000800
 80073b4:	40000c00 	.word	0x40000c00
 80073b8:	40013400 	.word	0x40013400
 80073bc:	0800a9ec 	.word	0x0800a9ec
 80073c0:	2300      	movs	r3, #0
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <HAL_TIM_Encoder_Init+0x246>
 80073cc:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 80073d0:	484f      	ldr	r0, [pc, #316]	@ (8007510 <HAL_TIM_Encoder_Init+0x380>)
 80073d2:	f7fa fbf9 	bl	8001bc8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fa ffda 	bl	80023a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f000 fcf6 	bl	8007e08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	4313      	orrs	r3, r2
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007462:	f023 030c 	bic.w	r3, r3, #12
 8007466:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800746e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	4313      	orrs	r3, r2
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	011a      	lsls	r2, r3, #4
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	031b      	lsls	r3, r3, #12
 8007492:	4313      	orrs	r3, r2
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80074a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80074a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4313      	orrs	r3, r2
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	0800a9ec 	.word	0x0800a9ec

08007514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d020      	beq.n	8007578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01b      	beq.n	8007578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0202 	mvn.w	r2, #2
 8007548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fc34 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fc26 	bl	8007db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fc37 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f003 0304 	and.w	r3, r3, #4
 800757e:	2b00      	cmp	r3, #0
 8007580:	d020      	beq.n	80075c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01b      	beq.n	80075c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0204 	mvn.w	r2, #4
 8007594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fc0e 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 80075b0:	e005      	b.n	80075be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc00 	bl	8007db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc11 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d020      	beq.n	8007610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01b      	beq.n	8007610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0208 	mvn.w	r2, #8
 80075e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fbe8 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 80075fc:	e005      	b.n	800760a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fbda 	bl	8007db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fbeb 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b00      	cmp	r3, #0
 8007618:	d020      	beq.n	800765c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01b      	beq.n	800765c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0210 	mvn.w	r2, #16
 800762c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2208      	movs	r2, #8
 8007632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fbc2 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 8007648:	e005      	b.n	8007656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fbb4 	bl	8007db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fbc5 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00c      	beq.n	8007680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0201 	mvn.w	r2, #1
 8007678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7f9 fbb0 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00c      	beq.n	80076ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80076a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fe4d 	bl	8008348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00c      	beq.n	80076d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fe45 	bl	800835c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00c      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fb7f 	bl	8007df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f06f 0220 	mvn.w	r2, #32
 8007712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fe0d 	bl	8008334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIM_ConfigClockSource+0x1c>
 800773c:	2302      	movs	r3, #2
 800773e:	e329      	b.n	8007d94 <HAL_TIM_ConfigClockSource+0x670>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007758:	d029      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b70      	cmp	r3, #112	@ 0x70
 8007760:	d025      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776a:	d020      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b40      	cmp	r3, #64	@ 0x40
 8007772:	d01c      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b50      	cmp	r3, #80	@ 0x50
 800777a:	d018      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b60      	cmp	r3, #96	@ 0x60
 8007782:	d014      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d010      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b10      	cmp	r3, #16
 8007792:	d00c      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b20      	cmp	r3, #32
 800779a:	d008      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b30      	cmp	r3, #48	@ 0x30
 80077a2:	d004      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 80077a4:	f241 5156 	movw	r1, #5462	@ 0x1556
 80077a8:	4888      	ldr	r0, [pc, #544]	@ (80079cc <HAL_TIM_ConfigClockSource+0x2a8>)
 80077aa:	f7fa fa0d 	bl	8001bc8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077bc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077da:	f000 810d 	beq.w	80079f8 <HAL_TIM_ConfigClockSource+0x2d4>
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077e2:	f200 82ca 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ea:	d02d      	beq.n	8007848 <HAL_TIM_ConfigClockSource+0x124>
 80077ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f0:	f200 82c3 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 80077f4:	2b70      	cmp	r3, #112	@ 0x70
 80077f6:	d06f      	beq.n	80078d8 <HAL_TIM_ConfigClockSource+0x1b4>
 80077f8:	2b70      	cmp	r3, #112	@ 0x70
 80077fa:	f200 82be 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 80077fe:	2b60      	cmp	r3, #96	@ 0x60
 8007800:	f000 81d4 	beq.w	8007bac <HAL_TIM_ConfigClockSource+0x488>
 8007804:	2b60      	cmp	r3, #96	@ 0x60
 8007806:	f200 82b8 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 800780a:	2b50      	cmp	r3, #80	@ 0x50
 800780c:	f000 8165 	beq.w	8007ada <HAL_TIM_ConfigClockSource+0x3b6>
 8007810:	2b50      	cmp	r3, #80	@ 0x50
 8007812:	f200 82b2 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 8007816:	2b40      	cmp	r3, #64	@ 0x40
 8007818:	f000 8223 	beq.w	8007c62 <HAL_TIM_ConfigClockSource+0x53e>
 800781c:	2b40      	cmp	r3, #64	@ 0x40
 800781e:	f200 82ac 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 8007822:	2b30      	cmp	r3, #48	@ 0x30
 8007824:	f000 8278 	beq.w	8007d18 <HAL_TIM_ConfigClockSource+0x5f4>
 8007828:	2b30      	cmp	r3, #48	@ 0x30
 800782a:	f200 82a6 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 800782e:	2b20      	cmp	r3, #32
 8007830:	f000 8272 	beq.w	8007d18 <HAL_TIM_ConfigClockSource+0x5f4>
 8007834:	2b20      	cmp	r3, #32
 8007836:	f200 82a0 	bhi.w	8007d7a <HAL_TIM_ConfigClockSource+0x656>
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 826c 	beq.w	8007d18 <HAL_TIM_ConfigClockSource+0x5f4>
 8007840:	2b10      	cmp	r3, #16
 8007842:	f000 8269 	beq.w	8007d18 <HAL_TIM_ConfigClockSource+0x5f4>
 8007846:	e298      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a60      	ldr	r2, [pc, #384]	@ (80079d0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800784e:	4293      	cmp	r3, r2
 8007850:	f000 8296 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785c:	f000 8290 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5b      	ldr	r2, [pc, #364]	@ (80079d4 <HAL_TIM_ConfigClockSource+0x2b0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	f000 828a 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a59      	ldr	r2, [pc, #356]	@ (80079d8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	f000 8284 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a57      	ldr	r2, [pc, #348]	@ (80079dc <HAL_TIM_ConfigClockSource+0x2b8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	f000 827e 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a55      	ldr	r2, [pc, #340]	@ (80079e0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800788a:	4293      	cmp	r3, r2
 800788c:	f000 8278 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a53      	ldr	r2, [pc, #332]	@ (80079e4 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	f000 8272 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a51      	ldr	r2, [pc, #324]	@ (80079e8 <HAL_TIM_ConfigClockSource+0x2c4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	f000 826c 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a4f      	ldr	r2, [pc, #316]	@ (80079ec <HAL_TIM_ConfigClockSource+0x2c8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	f000 8266 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a4d      	ldr	r2, [pc, #308]	@ (80079f0 <HAL_TIM_ConfigClockSource+0x2cc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f000 8260 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a4b      	ldr	r2, [pc, #300]	@ (80079f4 <HAL_TIM_ConfigClockSource+0x2d0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f000 825a 	beq.w	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
 80078cc:	f241 5162 	movw	r1, #5474	@ 0x1562
 80078d0:	483e      	ldr	r0, [pc, #248]	@ (80079cc <HAL_TIM_ConfigClockSource+0x2a8>)
 80078d2:	f7fa f979 	bl	8001bc8 <assert_failed>
      break;
 80078d6:	e253      	b.n	8007d80 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a3c      	ldr	r2, [pc, #240]	@ (80079d0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ea:	d01d      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a38      	ldr	r2, [pc, #224]	@ (80079d4 <HAL_TIM_ConfigClockSource+0x2b0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a37      	ldr	r2, [pc, #220]	@ (80079d8 <HAL_TIM_ConfigClockSource+0x2b4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a35      	ldr	r2, [pc, #212]	@ (80079dc <HAL_TIM_ConfigClockSource+0x2b8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a36      	ldr	r2, [pc, #216]	@ (80079e8 <HAL_TIM_ConfigClockSource+0x2c4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a34      	ldr	r2, [pc, #208]	@ (80079ec <HAL_TIM_ConfigClockSource+0x2c8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x204>
 800791e:	f241 5169 	movw	r1, #5481	@ 0x1569
 8007922:	482a      	ldr	r0, [pc, #168]	@ (80079cc <HAL_TIM_ConfigClockSource+0x2a8>)
 8007924:	f7fa f950 	bl	8001bc8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d013      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x234>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007938:	d00e      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x234>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007942:	d009      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x234>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800794c:	d004      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x234>
 800794e:	f241 516c 	movw	r1, #5484	@ 0x156c
 8007952:	481e      	ldr	r0, [pc, #120]	@ (80079cc <HAL_TIM_ConfigClockSource+0x2a8>)
 8007954:	f7fa f938 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007960:	d014      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x268>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d010      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x268>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x268>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d008      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x268>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b0a      	cmp	r3, #10
 8007980:	d004      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x268>
 8007982:	f241 516d 	movw	r1, #5485	@ 0x156d
 8007986:	4811      	ldr	r0, [pc, #68]	@ (80079cc <HAL_TIM_ConfigClockSource+0x2a8>)
 8007988:	f7fa f91e 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b0f      	cmp	r3, #15
 8007992:	d904      	bls.n	800799e <HAL_TIM_ConfigClockSource+0x27a>
 8007994:	f241 516e 	movw	r1, #5486	@ 0x156e
 8007998:	480c      	ldr	r0, [pc, #48]	@ (80079cc <HAL_TIM_ConfigClockSource+0x2a8>)
 800799a:	f7fa f915 	bl	8001bc8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079ae:	f000 fb4b 	bl	8008048 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	609a      	str	r2, [r3, #8]
      break;
 80079ca:	e1da      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
 80079cc:	0800a9ec 	.word	0x0800a9ec
 80079d0:	40012c00 	.word	0x40012c00
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40001000 	.word	0x40001000
 80079e4:	40001400 	.word	0x40001400
 80079e8:	40013400 	.word	0x40013400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a64      	ldr	r2, [pc, #400]	@ (8007b90 <HAL_TIM_ConfigClockSource+0x46c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d01d      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x31a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0a:	d018      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x31a>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a60      	ldr	r2, [pc, #384]	@ (8007b94 <HAL_TIM_ConfigClockSource+0x470>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x31a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a5f      	ldr	r2, [pc, #380]	@ (8007b98 <HAL_TIM_ConfigClockSource+0x474>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x31a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a5d      	ldr	r2, [pc, #372]	@ (8007b9c <HAL_TIM_ConfigClockSource+0x478>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x31a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a5c      	ldr	r2, [pc, #368]	@ (8007ba0 <HAL_TIM_ConfigClockSource+0x47c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x31a>
 8007a34:	f241 5181 	movw	r1, #5505	@ 0x1581
 8007a38:	485a      	ldr	r0, [pc, #360]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007a3a:	f7fa f8c5 	bl	8001bc8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x34a>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4e:	d00e      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x34a>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a58:	d009      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x34a>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a62:	d004      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x34a>
 8007a64:	f241 5184 	movw	r1, #5508	@ 0x1584
 8007a68:	484e      	ldr	r0, [pc, #312]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007a6a:	f7fa f8ad 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a76:	d014      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x37e>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x37e>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00c      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x37e>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d008      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x37e>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b0a      	cmp	r3, #10
 8007a96:	d004      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x37e>
 8007a98:	f241 5185 	movw	r1, #5509	@ 0x1585
 8007a9c:	4841      	ldr	r0, [pc, #260]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007a9e:	f7fa f893 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d904      	bls.n	8007ab4 <HAL_TIM_ConfigClockSource+0x390>
 8007aaa:	f241 5186 	movw	r1, #5510	@ 0x1586
 8007aae:	483d      	ldr	r0, [pc, #244]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007ab0:	f7fa f88a 	bl	8001bc8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ac4:	f000 fac0 	bl	8008048 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ad6:	609a      	str	r2, [r3, #8]
      break;
 8007ad8:	e153      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a2c      	ldr	r2, [pc, #176]	@ (8007b90 <HAL_TIM_ConfigClockSource+0x46c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aec:	d01d      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a28      	ldr	r2, [pc, #160]	@ (8007b94 <HAL_TIM_ConfigClockSource+0x470>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a26      	ldr	r2, [pc, #152]	@ (8007b98 <HAL_TIM_ConfigClockSource+0x474>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a25      	ldr	r2, [pc, #148]	@ (8007b9c <HAL_TIM_ConfigClockSource+0x478>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a23      	ldr	r2, [pc, #140]	@ (8007ba0 <HAL_TIM_ConfigClockSource+0x47c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a23      	ldr	r2, [pc, #140]	@ (8007ba8 <HAL_TIM_ConfigClockSource+0x484>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x406>
 8007b20:	f241 5195 	movw	r1, #5525	@ 0x1595
 8007b24:	481f      	ldr	r0, [pc, #124]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007b26:	f7fa f84f 	bl	8001bc8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b32:	d014      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x43a>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d010      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x43a>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00c      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x43a>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d008      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x43a>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b0a      	cmp	r3, #10
 8007b52:	d004      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x43a>
 8007b54:	f241 5198 	movw	r1, #5528	@ 0x1598
 8007b58:	4812      	ldr	r0, [pc, #72]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007b5a:	f7fa f835 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	d904      	bls.n	8007b70 <HAL_TIM_ConfigClockSource+0x44c>
 8007b66:	f241 5199 	movw	r1, #5529	@ 0x1599
 8007b6a:	480e      	ldr	r0, [pc, #56]	@ (8007ba4 <HAL_TIM_ConfigClockSource+0x480>)
 8007b6c:	f7fa f82c 	bl	8001bc8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f000 f9e9 	bl	8007f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2150      	movs	r1, #80	@ 0x50
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fa42 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007b8e:	e0f8      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	0800a9ec 	.word	0x0800a9ec
 8007ba8:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a7a      	ldr	r2, [pc, #488]	@ (8007d9c <HAL_TIM_ConfigClockSource+0x678>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bbe:	d01d      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a76      	ldr	r2, [pc, #472]	@ (8007da0 <HAL_TIM_ConfigClockSource+0x67c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a75      	ldr	r2, [pc, #468]	@ (8007da4 <HAL_TIM_ConfigClockSource+0x680>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a73      	ldr	r2, [pc, #460]	@ (8007da8 <HAL_TIM_ConfigClockSource+0x684>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a72      	ldr	r2, [pc, #456]	@ (8007dac <HAL_TIM_ConfigClockSource+0x688>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a70      	ldr	r2, [pc, #448]	@ (8007db0 <HAL_TIM_ConfigClockSource+0x68c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x4d8>
 8007bf2:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8007bf6:	486f      	ldr	r0, [pc, #444]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007bf8:	f7f9 ffe6 	bl	8001bc8 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c04:	d014      	beq.n	8007c30 <HAL_TIM_ConfigClockSource+0x50c>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d010      	beq.n	8007c30 <HAL_TIM_ConfigClockSource+0x50c>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <HAL_TIM_ConfigClockSource+0x50c>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d008      	beq.n	8007c30 <HAL_TIM_ConfigClockSource+0x50c>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b0a      	cmp	r3, #10
 8007c24:	d004      	beq.n	8007c30 <HAL_TIM_ConfigClockSource+0x50c>
 8007c26:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8007c2a:	4862      	ldr	r0, [pc, #392]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007c2c:	f7f9 ffcc 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b0f      	cmp	r3, #15
 8007c36:	d904      	bls.n	8007c42 <HAL_TIM_ConfigClockSource+0x51e>
 8007c38:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 8007c3c:	485d      	ldr	r0, [pc, #372]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007c3e:	f7f9 ffc3 	bl	8001bc8 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f000 f9af 	bl	8007fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2160      	movs	r1, #96	@ 0x60
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f9d9 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007c60:	e08f      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a4d      	ldr	r2, [pc, #308]	@ (8007d9c <HAL_TIM_ConfigClockSource+0x678>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d022      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c74:	d01d      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a49      	ldr	r2, [pc, #292]	@ (8007da0 <HAL_TIM_ConfigClockSource+0x67c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a47      	ldr	r2, [pc, #284]	@ (8007da4 <HAL_TIM_ConfigClockSource+0x680>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a46      	ldr	r2, [pc, #280]	@ (8007da8 <HAL_TIM_ConfigClockSource+0x684>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a44      	ldr	r2, [pc, #272]	@ (8007dac <HAL_TIM_ConfigClockSource+0x688>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a43      	ldr	r2, [pc, #268]	@ (8007db0 <HAL_TIM_ConfigClockSource+0x68c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x58e>
 8007ca8:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8007cac:	4841      	ldr	r0, [pc, #260]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007cae:	f7f9 ff8b 	bl	8001bc8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cba:	d014      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x5c2>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d010      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x5c2>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00c      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x5c2>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d008      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x5c2>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b0a      	cmp	r3, #10
 8007cda:	d004      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x5c2>
 8007cdc:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8007ce0:	4834      	ldr	r0, [pc, #208]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007ce2:	f7f9 ff71 	bl	8001bc8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2b0f      	cmp	r3, #15
 8007cec:	d904      	bls.n	8007cf8 <HAL_TIM_ConfigClockSource+0x5d4>
 8007cee:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8007cf2:	4830      	ldr	r0, [pc, #192]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007cf4:	f7f9 ff68 	bl	8001bc8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d04:	461a      	mov	r2, r3
 8007d06:	f000 f925 	bl	8007f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2140      	movs	r1, #64	@ 0x40
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f97e 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007d16:	e034      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d9c <HAL_TIM_ConfigClockSource+0x678>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d022      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2a:	d01d      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1b      	ldr	r2, [pc, #108]	@ (8007da0 <HAL_TIM_ConfigClockSource+0x67c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d018      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8007da4 <HAL_TIM_ConfigClockSource+0x680>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d013      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_TIM_ConfigClockSource+0x684>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00e      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a17      	ldr	r2, [pc, #92]	@ (8007dac <HAL_TIM_ConfigClockSource+0x688>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d009      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <HAL_TIM_ConfigClockSource+0x68c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d004      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x644>
 8007d5e:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8007d62:	4814      	ldr	r0, [pc, #80]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x690>)
 8007d64:	f7f9 ff30 	bl	8001bc8 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f000 f94d 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007d78:	e003      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7e:	e000      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x65e>
      break;
 8007d80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40000800 	.word	0x40000800
 8007da8:	40000c00 	.word	0x40000c00
 8007dac:	40013400 	.word	0x40013400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	0800a9ec 	.word	0x0800a9ec

08007db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a46      	ldr	r2, [pc, #280]	@ (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d013      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	d00f      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a43      	ldr	r2, [pc, #268]	@ (8007f38 <TIM_Base_SetConfig+0x130>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00b      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a42      	ldr	r2, [pc, #264]	@ (8007f3c <TIM_Base_SetConfig+0x134>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d007      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a41      	ldr	r2, [pc, #260]	@ (8007f40 <TIM_Base_SetConfig+0x138>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a40      	ldr	r2, [pc, #256]	@ (8007f44 <TIM_Base_SetConfig+0x13c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d108      	bne.n	8007e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a35      	ldr	r2, [pc, #212]	@ (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01f      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e68:	d01b      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a32      	ldr	r2, [pc, #200]	@ (8007f38 <TIM_Base_SetConfig+0x130>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d017      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a31      	ldr	r2, [pc, #196]	@ (8007f3c <TIM_Base_SetConfig+0x134>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a30      	ldr	r2, [pc, #192]	@ (8007f40 <TIM_Base_SetConfig+0x138>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00f      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2f      	ldr	r2, [pc, #188]	@ (8007f44 <TIM_Base_SetConfig+0x13c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00b      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f48 <TIM_Base_SetConfig+0x140>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d007      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2d      	ldr	r2, [pc, #180]	@ (8007f4c <TIM_Base_SetConfig+0x144>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d003      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f50 <TIM_Base_SetConfig+0x148>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d108      	bne.n	8007eb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a16      	ldr	r2, [pc, #88]	@ (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00f      	beq.n	8007f00 <TIM_Base_SetConfig+0xf8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a18      	ldr	r2, [pc, #96]	@ (8007f44 <TIM_Base_SetConfig+0x13c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00b      	beq.n	8007f00 <TIM_Base_SetConfig+0xf8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a17      	ldr	r2, [pc, #92]	@ (8007f48 <TIM_Base_SetConfig+0x140>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d007      	beq.n	8007f00 <TIM_Base_SetConfig+0xf8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a16      	ldr	r2, [pc, #88]	@ (8007f4c <TIM_Base_SetConfig+0x144>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d003      	beq.n	8007f00 <TIM_Base_SetConfig+0xf8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a15      	ldr	r2, [pc, #84]	@ (8007f50 <TIM_Base_SetConfig+0x148>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d103      	bne.n	8007f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d105      	bne.n	8007f26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f023 0201 	bic.w	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	611a      	str	r2, [r3, #16]
  }
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800

08007f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 030a 	bic.w	r3, r3, #10
 8007f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	f023 0210 	bic.w	r2, r3, #16
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	031b      	lsls	r3, r3, #12
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007fee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	f043 0307 	orr.w	r3, r3, #7
 8008034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	609a      	str	r2, [r3, #8]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	021a      	lsls	r2, r3, #8
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	431a      	orrs	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4313      	orrs	r3, r2
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	609a      	str	r2, [r3, #8]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a34      	ldr	r2, [pc, #208]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d02c      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a4:	d027      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a30      	ldr	r2, [pc, #192]	@ (800816c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d022      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01d      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a2d      	ldr	r2, [pc, #180]	@ (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d018      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a2a      	ldr	r2, [pc, #168]	@ (800817c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a28      	ldr	r2, [pc, #160]	@ (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a27      	ldr	r2, [pc, #156]	@ (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80080ec:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80080f0:	4825      	ldr	r0, [pc, #148]	@ (8008188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080f2:	f7f9 fd69 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d020      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b10      	cmp	r3, #16
 8008104:	d01c      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b20      	cmp	r3, #32
 800810c:	d018      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b30      	cmp	r3, #48	@ 0x30
 8008114:	d014      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b40      	cmp	r3, #64	@ 0x40
 800811c:	d010      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b50      	cmp	r3, #80	@ 0x50
 8008124:	d00c      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b60      	cmp	r3, #96	@ 0x60
 800812c:	d008      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b70      	cmp	r3, #112	@ 0x70
 8008134:	d004      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008136:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800813a:	4813      	ldr	r0, [pc, #76]	@ (8008188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800813c:	f7f9 fd44 	bl	8001bc8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b80      	cmp	r3, #128	@ 0x80
 8008146:	d008      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008150:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8008154:	480c      	ldr	r0, [pc, #48]	@ (8008188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008156:	f7f9 fd37 	bl	8001bc8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008160:	2b01      	cmp	r3, #1
 8008162:	d113      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8008164:	2302      	movs	r3, #2
 8008166:	e0d3      	b.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8008168:	40012c00 	.word	0x40012c00
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	40000c00 	.word	0x40000c00
 8008178:	40001000 	.word	0x40001000
 800817c:	40001400 	.word	0x40001400
 8008180:	40013400 	.word	0x40013400
 8008184:	40014000 	.word	0x40014000
 8008188:	0800aa24 	.word	0x0800aa24
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a59      	ldr	r2, [pc, #356]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a58      	ldr	r2, [pc, #352]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d161      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d054      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081d0:	d04f      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081da:	d04a      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081e4:	d045      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081ee:	d040      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80081f8:	d03b      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008202:	d036      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800820c:	d031      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8008216:	d02c      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008220:	d027      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800822a:	d022      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008234:	d01d      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800823e:	d018      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008248:	d013      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8008252:	d00e      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800825c:	d009      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8008266:	d004      	beq.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8008268:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800826c:	482c      	ldr	r0, [pc, #176]	@ (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800826e:	f7f9 fcab 	bl	8001bc8 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d01d      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b0:	d018      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008324 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a19      	ldr	r2, [pc, #100]	@ (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a18      	ldr	r2, [pc, #96]	@ (800832c <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a11      	ldr	r2, [pc, #68]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a14      	ldr	r2, [pc, #80]	@ (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d10c      	bne.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40012c00 	.word	0x40012c00
 800831c:	40013400 	.word	0x40013400
 8008320:	0800aa24 	.word	0x0800aa24
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00
 8008330:	40014000 	.word	0x40014000

08008334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e08b      	b.n	800849a <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d023      	beq.n	80083d2 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a45      	ldr	r2, [pc, #276]	@ (80084a4 <HAL_UART_Init+0x134>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d041      	beq.n	8008418 <HAL_UART_Init+0xa8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a43      	ldr	r2, [pc, #268]	@ (80084a8 <HAL_UART_Init+0x138>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d03c      	beq.n	8008418 <HAL_UART_Init+0xa8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a42      	ldr	r2, [pc, #264]	@ (80084ac <HAL_UART_Init+0x13c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d037      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a40      	ldr	r2, [pc, #256]	@ (80084b0 <HAL_UART_Init+0x140>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d032      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a3f      	ldr	r2, [pc, #252]	@ (80084b4 <HAL_UART_Init+0x144>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d02d      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a3d      	ldr	r2, [pc, #244]	@ (80084b8 <HAL_UART_Init+0x148>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d028      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083c6:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80083ca:	483c      	ldr	r0, [pc, #240]	@ (80084bc <HAL_UART_Init+0x14c>)
 80083cc:	f7f9 fbfc 	bl	8001bc8 <assert_failed>
 80083d0:	e022      	b.n	8008418 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a33      	ldr	r2, [pc, #204]	@ (80084a4 <HAL_UART_Init+0x134>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d01d      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a31      	ldr	r2, [pc, #196]	@ (80084a8 <HAL_UART_Init+0x138>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d018      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a30      	ldr	r2, [pc, #192]	@ (80084ac <HAL_UART_Init+0x13c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a2e      	ldr	r2, [pc, #184]	@ (80084b0 <HAL_UART_Init+0x140>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <HAL_UART_Init+0xa8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a2d      	ldr	r2, [pc, #180]	@ (80084b4 <HAL_UART_Init+0x144>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <HAL_UART_Init+0xa8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a2b      	ldr	r2, [pc, #172]	@ (80084b8 <HAL_UART_Init+0x148>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <HAL_UART_Init+0xa8>
 800840e:	f240 1157 	movw	r1, #343	@ 0x157
 8008412:	482a      	ldr	r0, [pc, #168]	@ (80084bc <HAL_UART_Init+0x14c>)
 8008414:	f7f9 fbd8 	bl	8001bc8 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fa f90b 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2224      	movs	r2, #36	@ 0x24
 8008432:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc1f 	bl	8008c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8be 	bl	80085d4 <UART_SetConfig>
 8008458:	4603      	mov	r3, r0
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e01b      	b.n	800849a <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008470:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008480:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0201 	orr.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fd5c 	bl	8008f50 <UART_CheckIdleState>
 8008498:	4603      	mov	r3, r0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40013800 	.word	0x40013800
 80084a8:	40004400 	.word	0x40004400
 80084ac:	40004800 	.word	0x40004800
 80084b0:	40004c00 	.word	0x40004c00
 80084b4:	40005000 	.word	0x40005000
 80084b8:	40008000 	.word	0x40008000
 80084bc:	0800aa60 	.word	0x0800aa60

080084c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	@ 0x28
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d177      	bne.n	80085c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_UART_Transmit+0x24>
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e070      	b.n	80085ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2221      	movs	r2, #33	@ 0x21
 80084f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084f6:	f7fa f995 	bl	8002824 <HAL_GetTick>
 80084fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	88fa      	ldrh	r2, [r7, #6]
 8008500:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008514:	d108      	bne.n	8008528 <HAL_UART_Transmit+0x68>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	61bb      	str	r3, [r7, #24]
 8008526:	e003      	b.n	8008530 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008530:	e02f      	b.n	8008592 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	2180      	movs	r1, #128	@ 0x80
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 fdaf 	bl	80090a0 <UART_WaitOnFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e03b      	b.n	80085ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10b      	bne.n	8008570 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	881a      	ldrh	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008564:	b292      	uxth	r2, r2
 8008566:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	3302      	adds	r3, #2
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e007      	b.n	8008580 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	781a      	ldrb	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	3301      	adds	r3, #1
 800857e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1c9      	bne.n	8008532 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	2140      	movs	r1, #64	@ 0x40
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fd79 	bl	80090a0 <UART_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e005      	b.n	80085ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2220      	movs	r2, #32
 80085c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	e000      	b.n	80085ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80085c8:	2302      	movs	r3, #2
  }
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d8:	b08a      	sub	sp, #40	@ 0x28
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4a9e      	ldr	r2, [pc, #632]	@ (8008864 <UART_SetConfig+0x290>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d904      	bls.n	80085f8 <UART_SetConfig+0x24>
 80085ee:	f640 4158 	movw	r1, #3160	@ 0xc58
 80085f2:	489d      	ldr	r0, [pc, #628]	@ (8008868 <UART_SetConfig+0x294>)
 80085f4:	f7f9 fae8 	bl	8001bc8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008600:	d00d      	beq.n	800861e <UART_SetConfig+0x4a>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d009      	beq.n	800861e <UART_SetConfig+0x4a>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008612:	d004      	beq.n	800861e <UART_SetConfig+0x4a>
 8008614:	f640 4159 	movw	r1, #3161	@ 0xc59
 8008618:	4893      	ldr	r0, [pc, #588]	@ (8008868 <UART_SetConfig+0x294>)
 800861a:	f7f9 fad5 	bl	8001bc8 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a92      	ldr	r2, [pc, #584]	@ (800886c <UART_SetConfig+0x298>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10e      	bne.n	8008646 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d030      	beq.n	8008692 <UART_SetConfig+0xbe>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008638:	d02b      	beq.n	8008692 <UART_SetConfig+0xbe>
 800863a:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800863e:	488a      	ldr	r0, [pc, #552]	@ (8008868 <UART_SetConfig+0x294>)
 8008640:	f7f9 fac2 	bl	8001bc8 <assert_failed>
 8008644:	e025      	b.n	8008692 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864e:	d012      	beq.n	8008676 <UART_SetConfig+0xa2>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00e      	beq.n	8008676 <UART_SetConfig+0xa2>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008660:	d009      	beq.n	8008676 <UART_SetConfig+0xa2>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866a:	d004      	beq.n	8008676 <UART_SetConfig+0xa2>
 800866c:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8008670:	487d      	ldr	r0, [pc, #500]	@ (8008868 <UART_SetConfig+0x294>)
 8008672:	f7f9 faa9 	bl	8001bc8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <UART_SetConfig+0xbe>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008686:	d004      	beq.n	8008692 <UART_SetConfig+0xbe>
 8008688:	f640 4161 	movw	r1, #3169	@ 0xc61
 800868c:	4876      	ldr	r0, [pc, #472]	@ (8008868 <UART_SetConfig+0x294>)
 800868e:	f7f9 fa9b 	bl	8001bc8 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00e      	beq.n	80086b8 <UART_SetConfig+0xe4>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a2:	d009      	beq.n	80086b8 <UART_SetConfig+0xe4>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086ac:	d004      	beq.n	80086b8 <UART_SetConfig+0xe4>
 80086ae:	f640 4164 	movw	r1, #3172	@ 0xc64
 80086b2:	486d      	ldr	r0, [pc, #436]	@ (8008868 <UART_SetConfig+0x294>)
 80086b4:	f7f9 fa88 	bl	8001bc8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	f023 030c 	bic.w	r3, r3, #12
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d103      	bne.n	80086cc <UART_SetConfig+0xf8>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <UART_SetConfig+0x102>
 80086cc:	f640 4165 	movw	r1, #3173	@ 0xc65
 80086d0:	4865      	ldr	r0, [pc, #404]	@ (8008868 <UART_SetConfig+0x294>)
 80086d2:	f7f9 fa79 	bl	8001bc8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d013      	beq.n	8008706 <UART_SetConfig+0x132>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e6:	d00e      	beq.n	8008706 <UART_SetConfig+0x132>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086f0:	d009      	beq.n	8008706 <UART_SetConfig+0x132>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086fa:	d004      	beq.n	8008706 <UART_SetConfig+0x132>
 80086fc:	f640 4166 	movw	r1, #3174	@ 0xc66
 8008700:	4859      	ldr	r0, [pc, #356]	@ (8008868 <UART_SetConfig+0x294>)
 8008702:	f7f9 fa61 	bl	8001bc8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <UART_SetConfig+0x14e>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008716:	d004      	beq.n	8008722 <UART_SetConfig+0x14e>
 8008718:	f640 4167 	movw	r1, #3175	@ 0xc67
 800871c:	4852      	ldr	r0, [pc, #328]	@ (8008868 <UART_SetConfig+0x294>)
 800871e:	f7f9 fa53 	bl	8001bc8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	431a      	orrs	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	431a      	orrs	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	4313      	orrs	r3, r2
 8008738:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	4b4b      	ldr	r3, [pc, #300]	@ (8008870 <UART_SetConfig+0x29c>)
 8008742:	4013      	ands	r3, r2
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	6812      	ldr	r2, [r2, #0]
 8008748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800874a:	430b      	orrs	r3, r1
 800874c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a3f      	ldr	r2, [pc, #252]	@ (800886c <UART_SetConfig+0x298>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d004      	beq.n	800877e <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800877a:	4313      	orrs	r3, r2
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800878e:	430a      	orrs	r2, r1
 8008790:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a37      	ldr	r2, [pc, #220]	@ (8008874 <UART_SetConfig+0x2a0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d125      	bne.n	80087e8 <UART_SetConfig+0x214>
 800879c:	4b36      	ldr	r3, [pc, #216]	@ (8008878 <UART_SetConfig+0x2a4>)
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d81a      	bhi.n	80087e0 <UART_SetConfig+0x20c>
 80087aa:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <UART_SetConfig+0x1dc>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	080087d1 	.word	0x080087d1
 80087b8:	080087c9 	.word	0x080087c9
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087c6:	e114      	b.n	80089f2 <UART_SetConfig+0x41e>
 80087c8:	2302      	movs	r3, #2
 80087ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ce:	e110      	b.n	80089f2 <UART_SetConfig+0x41e>
 80087d0:	2304      	movs	r3, #4
 80087d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087d6:	e10c      	b.n	80089f2 <UART_SetConfig+0x41e>
 80087d8:	2308      	movs	r3, #8
 80087da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087de:	e108      	b.n	80089f2 <UART_SetConfig+0x41e>
 80087e0:	2310      	movs	r3, #16
 80087e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087e6:	e104      	b.n	80089f2 <UART_SetConfig+0x41e>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a23      	ldr	r2, [pc, #140]	@ (800887c <UART_SetConfig+0x2a8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d146      	bne.n	8008880 <UART_SetConfig+0x2ac>
 80087f2:	4b21      	ldr	r3, [pc, #132]	@ (8008878 <UART_SetConfig+0x2a4>)
 80087f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f8:	f003 030c 	and.w	r3, r3, #12
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d82d      	bhi.n	800885c <UART_SetConfig+0x288>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <UART_SetConfig+0x234>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800883d 	.word	0x0800883d
 800880c:	0800885d 	.word	0x0800885d
 8008810:	0800885d 	.word	0x0800885d
 8008814:	0800885d 	.word	0x0800885d
 8008818:	0800884d 	.word	0x0800884d
 800881c:	0800885d 	.word	0x0800885d
 8008820:	0800885d 	.word	0x0800885d
 8008824:	0800885d 	.word	0x0800885d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800885d 	.word	0x0800885d
 8008830:	0800885d 	.word	0x0800885d
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008855 	.word	0x08008855
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008842:	e0d6      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800884a:	e0d2      	b.n	80089f2 <UART_SetConfig+0x41e>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008852:	e0ce      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800885a:	e0ca      	b.n	80089f2 <UART_SetConfig+0x41e>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008862:	e0c6      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008864:	00989680 	.word	0x00989680
 8008868:	0800aa60 	.word	0x0800aa60
 800886c:	40008000 	.word	0x40008000
 8008870:	efff69f3 	.word	0xefff69f3
 8008874:	40013800 	.word	0x40013800
 8008878:	40021000 	.word	0x40021000
 800887c:	40004400 	.word	0x40004400
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4aae      	ldr	r2, [pc, #696]	@ (8008b40 <UART_SetConfig+0x56c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d125      	bne.n	80088d6 <UART_SetConfig+0x302>
 800888a:	4bae      	ldr	r3, [pc, #696]	@ (8008b44 <UART_SetConfig+0x570>)
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008890:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008894:	2b30      	cmp	r3, #48	@ 0x30
 8008896:	d016      	beq.n	80088c6 <UART_SetConfig+0x2f2>
 8008898:	2b30      	cmp	r3, #48	@ 0x30
 800889a:	d818      	bhi.n	80088ce <UART_SetConfig+0x2fa>
 800889c:	2b20      	cmp	r3, #32
 800889e:	d00a      	beq.n	80088b6 <UART_SetConfig+0x2e2>
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d814      	bhi.n	80088ce <UART_SetConfig+0x2fa>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <UART_SetConfig+0x2da>
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d008      	beq.n	80088be <UART_SetConfig+0x2ea>
 80088ac:	e00f      	b.n	80088ce <UART_SetConfig+0x2fa>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088b4:	e09d      	b.n	80089f2 <UART_SetConfig+0x41e>
 80088b6:	2302      	movs	r3, #2
 80088b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088bc:	e099      	b.n	80089f2 <UART_SetConfig+0x41e>
 80088be:	2304      	movs	r3, #4
 80088c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088c4:	e095      	b.n	80089f2 <UART_SetConfig+0x41e>
 80088c6:	2308      	movs	r3, #8
 80088c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088cc:	e091      	b.n	80089f2 <UART_SetConfig+0x41e>
 80088ce:	2310      	movs	r3, #16
 80088d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d4:	e08d      	b.n	80089f2 <UART_SetConfig+0x41e>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a9b      	ldr	r2, [pc, #620]	@ (8008b48 <UART_SetConfig+0x574>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d125      	bne.n	800892c <UART_SetConfig+0x358>
 80088e0:	4b98      	ldr	r3, [pc, #608]	@ (8008b44 <UART_SetConfig+0x570>)
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80088ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80088ec:	d016      	beq.n	800891c <UART_SetConfig+0x348>
 80088ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80088f0:	d818      	bhi.n	8008924 <UART_SetConfig+0x350>
 80088f2:	2b80      	cmp	r3, #128	@ 0x80
 80088f4:	d00a      	beq.n	800890c <UART_SetConfig+0x338>
 80088f6:	2b80      	cmp	r3, #128	@ 0x80
 80088f8:	d814      	bhi.n	8008924 <UART_SetConfig+0x350>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <UART_SetConfig+0x330>
 80088fe:	2b40      	cmp	r3, #64	@ 0x40
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x340>
 8008902:	e00f      	b.n	8008924 <UART_SetConfig+0x350>
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800890a:	e072      	b.n	80089f2 <UART_SetConfig+0x41e>
 800890c:	2302      	movs	r3, #2
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008912:	e06e      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800891a:	e06a      	b.n	80089f2 <UART_SetConfig+0x41e>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008922:	e066      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800892a:	e062      	b.n	80089f2 <UART_SetConfig+0x41e>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a86      	ldr	r2, [pc, #536]	@ (8008b4c <UART_SetConfig+0x578>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d12a      	bne.n	800898c <UART_SetConfig+0x3b8>
 8008936:	4b83      	ldr	r3, [pc, #524]	@ (8008b44 <UART_SetConfig+0x570>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800893c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008944:	d01a      	beq.n	800897c <UART_SetConfig+0x3a8>
 8008946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800894a:	d81b      	bhi.n	8008984 <UART_SetConfig+0x3b0>
 800894c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008950:	d00c      	beq.n	800896c <UART_SetConfig+0x398>
 8008952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008956:	d815      	bhi.n	8008984 <UART_SetConfig+0x3b0>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <UART_SetConfig+0x390>
 800895c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008960:	d008      	beq.n	8008974 <UART_SetConfig+0x3a0>
 8008962:	e00f      	b.n	8008984 <UART_SetConfig+0x3b0>
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800896a:	e042      	b.n	80089f2 <UART_SetConfig+0x41e>
 800896c:	2302      	movs	r3, #2
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008972:	e03e      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800897a:	e03a      	b.n	80089f2 <UART_SetConfig+0x41e>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008982:	e036      	b.n	80089f2 <UART_SetConfig+0x41e>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800898a:	e032      	b.n	80089f2 <UART_SetConfig+0x41e>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a6f      	ldr	r2, [pc, #444]	@ (8008b50 <UART_SetConfig+0x57c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d12a      	bne.n	80089ec <UART_SetConfig+0x418>
 8008996:	4b6b      	ldr	r3, [pc, #428]	@ (8008b44 <UART_SetConfig+0x570>)
 8008998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800899c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80089a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089a4:	d01a      	beq.n	80089dc <UART_SetConfig+0x408>
 80089a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089aa:	d81b      	bhi.n	80089e4 <UART_SetConfig+0x410>
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b0:	d00c      	beq.n	80089cc <UART_SetConfig+0x3f8>
 80089b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b6:	d815      	bhi.n	80089e4 <UART_SetConfig+0x410>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <UART_SetConfig+0x3f0>
 80089bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c0:	d008      	beq.n	80089d4 <UART_SetConfig+0x400>
 80089c2:	e00f      	b.n	80089e4 <UART_SetConfig+0x410>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ca:	e012      	b.n	80089f2 <UART_SetConfig+0x41e>
 80089cc:	2302      	movs	r3, #2
 80089ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089d2:	e00e      	b.n	80089f2 <UART_SetConfig+0x41e>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089da:	e00a      	b.n	80089f2 <UART_SetConfig+0x41e>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089e2:	e006      	b.n	80089f2 <UART_SetConfig+0x41e>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ea:	e002      	b.n	80089f2 <UART_SetConfig+0x41e>
 80089ec:	2310      	movs	r3, #16
 80089ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a56      	ldr	r2, [pc, #344]	@ (8008b50 <UART_SetConfig+0x57c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d17a      	bne.n	8008af2 <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d824      	bhi.n	8008a4e <UART_SetConfig+0x47a>
 8008a04:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <UART_SetConfig+0x438>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a31 	.word	0x08008a31
 8008a10:	08008a4f 	.word	0x08008a4f
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a4f 	.word	0x08008a4f
 8008a1c:	08008a3f 	.word	0x08008a3f
 8008a20:	08008a4f 	.word	0x08008a4f
 8008a24:	08008a4f 	.word	0x08008a4f
 8008a28:	08008a4f 	.word	0x08008a4f
 8008a2c:	08008a47 	.word	0x08008a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a30:	f7fc f834 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 8008a34:	61f8      	str	r0, [r7, #28]
        break;
 8008a36:	e010      	b.n	8008a5a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a38:	4b46      	ldr	r3, [pc, #280]	@ (8008b54 <UART_SetConfig+0x580>)
 8008a3a:	61fb      	str	r3, [r7, #28]
        break;
 8008a3c:	e00d      	b.n	8008a5a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a3e:	f7fb ff95 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8008a42:	61f8      	str	r0, [r7, #28]
        break;
 8008a44:	e009      	b.n	8008a5a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a4a:	61fb      	str	r3, [r7, #28]
        break;
 8008a4c:	e005      	b.n	8008a5a <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8107 	beq.w	8008c70 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	4413      	add	r3, r2
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d305      	bcc.n	8008a7e <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d903      	bls.n	8008a86 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a84:	e0f4      	b.n	8008c70 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	461c      	mov	r4, r3
 8008a8c:	4615      	mov	r5, r2
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	f04f 0300 	mov.w	r3, #0
 8008a96:	022b      	lsls	r3, r5, #8
 8008a98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a9c:	0222      	lsls	r2, r4, #8
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	6849      	ldr	r1, [r1, #4]
 8008aa2:	0849      	lsrs	r1, r1, #1
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	4688      	mov	r8, r1
 8008aa8:	4681      	mov	r9, r0
 8008aaa:	eb12 0a08 	adds.w	sl, r2, r8
 8008aae:	eb43 0b09 	adc.w	fp, r3, r9
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	603b      	str	r3, [r7, #0]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	f7f7 fbd4 	bl	8000270 <__aeabi_uldivmod>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4613      	mov	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ad6:	d308      	bcc.n	8008aea <UART_SetConfig+0x516>
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ade:	d204      	bcs.n	8008aea <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	60da      	str	r2, [r3, #12]
 8008ae8:	e0c2      	b.n	8008c70 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008af0:	e0be      	b.n	8008c70 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008afa:	d16a      	bne.n	8008bd2 <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8008afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d834      	bhi.n	8008b6e <UART_SetConfig+0x59a>
 8008b04:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <UART_SetConfig+0x538>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b31 	.word	0x08008b31
 8008b10:	08008b39 	.word	0x08008b39
 8008b14:	08008b59 	.word	0x08008b59
 8008b18:	08008b6f 	.word	0x08008b6f
 8008b1c:	08008b5f 	.word	0x08008b5f
 8008b20:	08008b6f 	.word	0x08008b6f
 8008b24:	08008b6f 	.word	0x08008b6f
 8008b28:	08008b6f 	.word	0x08008b6f
 8008b2c:	08008b67 	.word	0x08008b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b30:	f7fb ffb4 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 8008b34:	61f8      	str	r0, [r7, #28]
        break;
 8008b36:	e020      	b.n	8008b7a <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b38:	f7fb ffc6 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8008b3c:	61f8      	str	r0, [r7, #28]
        break;
 8008b3e:	e01c      	b.n	8008b7a <UART_SetConfig+0x5a6>
 8008b40:	40004800 	.word	0x40004800
 8008b44:	40021000 	.word	0x40021000
 8008b48:	40004c00 	.word	0x40004c00
 8008b4c:	40005000 	.word	0x40005000
 8008b50:	40008000 	.word	0x40008000
 8008b54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b58:	4b4c      	ldr	r3, [pc, #304]	@ (8008c8c <UART_SetConfig+0x6b8>)
 8008b5a:	61fb      	str	r3, [r7, #28]
        break;
 8008b5c:	e00d      	b.n	8008b7a <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5e:	f7fb ff05 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8008b62:	61f8      	str	r0, [r7, #28]
        break;
 8008b64:	e009      	b.n	8008b7a <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b6a:	61fb      	str	r3, [r7, #28]
        break;
 8008b6c:	e005      	b.n	8008b7a <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d077      	beq.n	8008c70 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	005a      	lsls	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	441a      	add	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b0f      	cmp	r3, #15
 8008b9a:	d916      	bls.n	8008bca <UART_SetConfig+0x5f6>
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ba2:	d212      	bcs.n	8008bca <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f023 030f 	bic.w	r3, r3, #15
 8008bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	085b      	lsrs	r3, r3, #1
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	8afb      	ldrh	r3, [r7, #22]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	8afa      	ldrh	r2, [r7, #22]
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	e052      	b.n	8008c70 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bd0:	e04e      	b.n	8008c70 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d827      	bhi.n	8008c2a <UART_SetConfig+0x656>
 8008bda:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <UART_SetConfig+0x60c>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	08008c2b 	.word	0x08008c2b
 8008bf0:	08008c1b 	.word	0x08008c1b
 8008bf4:	08008c2b 	.word	0x08008c2b
 8008bf8:	08008c2b 	.word	0x08008c2b
 8008bfc:	08008c2b 	.word	0x08008c2b
 8008c00:	08008c23 	.word	0x08008c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c04:	f7fb ff4a 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 8008c08:	61f8      	str	r0, [r7, #28]
        break;
 8008c0a:	e014      	b.n	8008c36 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fb ff5c 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8008c10:	61f8      	str	r0, [r7, #28]
        break;
 8008c12:	e010      	b.n	8008c36 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c14:	4b1d      	ldr	r3, [pc, #116]	@ (8008c8c <UART_SetConfig+0x6b8>)
 8008c16:	61fb      	str	r3, [r7, #28]
        break;
 8008c18:	e00d      	b.n	8008c36 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c1a:	f7fb fea7 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8008c1e:	61f8      	str	r0, [r7, #28]
        break;
 8008c20:	e009      	b.n	8008c36 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c26:	61fb      	str	r3, [r7, #28]
        break;
 8008c28:	e005      	b.n	8008c36 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008c34:	bf00      	nop
    }

    if (pclk != 0U)
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d019      	beq.n	8008c70 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	085a      	lsrs	r2, r3, #1
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	441a      	add	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	2b0f      	cmp	r3, #15
 8008c54:	d909      	bls.n	8008c6a <UART_SetConfig+0x696>
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5c:	d205      	bcs.n	8008c6a <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60da      	str	r2, [r3, #12]
 8008c68:	e002      	b.n	8008c70 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3728      	adds	r7, #40	@ 0x28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c8a:	bf00      	nop
 8008c8c:	00f42400 	.word	0x00f42400

08008c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	2bff      	cmp	r3, #255	@ 0xff
 8008c9e:	d904      	bls.n	8008caa <UART_AdvFeatureConfig+0x1a>
 8008ca0:	f640 514d 	movw	r1, #3405	@ 0xd4d
 8008ca4:	4891      	ldr	r0, [pc, #580]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008ca6:	f7f8 ff8f 	bl	8001bc8 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d018      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <UART_AdvFeatureConfig+0x42>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cc6:	d004      	beq.n	8008cd2 <UART_AdvFeatureConfig+0x42>
 8008cc8:	f640 5152 	movw	r1, #3410	@ 0xd52
 8008ccc:	4887      	ldr	r0, [pc, #540]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008cce:	f7f8 ff7b 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d018      	beq.n	8008d26 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d009      	beq.n	8008d10 <UART_AdvFeatureConfig+0x80>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d04:	d004      	beq.n	8008d10 <UART_AdvFeatureConfig+0x80>
 8008d06:	f640 5159 	movw	r1, #3417	@ 0xd59
 8008d0a:	4878      	ldr	r0, [pc, #480]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008d0c:	f7f8 ff5c 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <UART_AdvFeatureConfig+0xbe>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d42:	d004      	beq.n	8008d4e <UART_AdvFeatureConfig+0xbe>
 8008d44:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8008d48:	4868      	ldr	r0, [pc, #416]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008d4a:	f7f8 ff3d 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d018      	beq.n	8008da2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <UART_AdvFeatureConfig+0xfc>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d80:	d004      	beq.n	8008d8c <UART_AdvFeatureConfig+0xfc>
 8008d82:	f640 5167 	movw	r1, #3431	@ 0xd67
 8008d86:	4859      	ldr	r0, [pc, #356]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008d88:	f7f8 ff1e 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d018      	beq.n	8008de0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <UART_AdvFeatureConfig+0x13a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dbe:	d004      	beq.n	8008dca <UART_AdvFeatureConfig+0x13a>
 8008dc0:	f640 516e 	movw	r1, #3438	@ 0xd6e
 8008dc4:	4849      	ldr	r0, [pc, #292]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008dc6:	f7f8 feff 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d018      	beq.n	8008e1e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d009      	beq.n	8008e08 <UART_AdvFeatureConfig+0x178>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dfc:	d004      	beq.n	8008e08 <UART_AdvFeatureConfig+0x178>
 8008dfe:	f640 5175 	movw	r1, #3445	@ 0xd75
 8008e02:	483a      	ldr	r0, [pc, #232]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008e04:	f7f8 fee0 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d06c      	beq.n	8008f04 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a30      	ldr	r2, [pc, #192]	@ (8008ef0 <UART_AdvFeatureConfig+0x260>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d018      	beq.n	8008e66 <UART_AdvFeatureConfig+0x1d6>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2e      	ldr	r2, [pc, #184]	@ (8008ef4 <UART_AdvFeatureConfig+0x264>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d013      	beq.n	8008e66 <UART_AdvFeatureConfig+0x1d6>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2d      	ldr	r2, [pc, #180]	@ (8008ef8 <UART_AdvFeatureConfig+0x268>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00e      	beq.n	8008e66 <UART_AdvFeatureConfig+0x1d6>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8008efc <UART_AdvFeatureConfig+0x26c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d009      	beq.n	8008e66 <UART_AdvFeatureConfig+0x1d6>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2a      	ldr	r2, [pc, #168]	@ (8008f00 <UART_AdvFeatureConfig+0x270>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d004      	beq.n	8008e66 <UART_AdvFeatureConfig+0x1d6>
 8008e5c:	f640 517c 	movw	r1, #3452	@ 0xd7c
 8008e60:	4822      	ldr	r0, [pc, #136]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008e62:	f7f8 feb1 	bl	8001bc8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <UART_AdvFeatureConfig+0x1f2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e76:	d004      	beq.n	8008e82 <UART_AdvFeatureConfig+0x1f2>
 8008e78:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8008e7c:	481b      	ldr	r0, [pc, #108]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008e7e:	f7f8 fea3 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ea0:	d130      	bne.n	8008f04 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d013      	beq.n	8008ed2 <UART_AdvFeatureConfig+0x242>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eb2:	d00e      	beq.n	8008ed2 <UART_AdvFeatureConfig+0x242>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ebc:	d009      	beq.n	8008ed2 <UART_AdvFeatureConfig+0x242>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ec6:	d004      	beq.n	8008ed2 <UART_AdvFeatureConfig+0x242>
 8008ec8:	f640 5182 	movw	r1, #3458	@ 0xd82
 8008ecc:	4807      	ldr	r0, [pc, #28]	@ (8008eec <UART_AdvFeatureConfig+0x25c>)
 8008ece:	f7f8 fe7b 	bl	8001bc8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	e00c      	b.n	8008f04 <UART_AdvFeatureConfig+0x274>
 8008eea:	bf00      	nop
 8008eec:	0800aa60 	.word	0x0800aa60
 8008ef0:	40013800 	.word	0x40013800
 8008ef4:	40004400 	.word	0x40004400
 8008ef8:	40004800 	.word	0x40004800
 8008efc:	40004c00 	.word	0x40004c00
 8008f00:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d018      	beq.n	8008f42 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d009      	beq.n	8008f2c <UART_AdvFeatureConfig+0x29c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008f20:	d004      	beq.n	8008f2c <UART_AdvFeatureConfig+0x29c>
 8008f22:	f640 518a 	movw	r1, #3466	@ 0xd8a
 8008f26:	4809      	ldr	r0, [pc, #36]	@ (8008f4c <UART_AdvFeatureConfig+0x2bc>)
 8008f28:	f7f8 fe4e 	bl	8001bc8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	605a      	str	r2, [r3, #4]
  }
}
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800aa60 	.word	0x0800aa60

08008f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b098      	sub	sp, #96	@ 0x60
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f60:	f7f9 fc60 	bl	8002824 <HAL_GetTick>
 8008f64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d12e      	bne.n	8008fd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f88c 	bl	80090a0 <UART_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d021      	beq.n	8008fd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e6      	bne.n	8008f8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e062      	b.n	8009098 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d149      	bne.n	8009074 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f856 	bl	80090a0 <UART_WaitOnFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d03c      	beq.n	8009074 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	623b      	str	r3, [r7, #32]
   return(result);
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800900e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009018:	633b      	str	r3, [r7, #48]	@ 0x30
 800901a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	60fb      	str	r3, [r7, #12]
   return(result);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3308      	adds	r3, #8
 800904a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800904c:	61fa      	str	r2, [r7, #28]
 800904e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	69b9      	ldr	r1, [r7, #24]
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	617b      	str	r3, [r7, #20]
   return(result);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e5      	bne.n	800902c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2220      	movs	r2, #32
 8009064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e011      	b.n	8009098 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2220      	movs	r2, #32
 800907e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3758      	adds	r7, #88	@ 0x58
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b0:	e04f      	b.n	8009152 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d04b      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ba:	f7f9 fbb3 	bl	8002824 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d302      	bcc.n	80090d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e04e      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d037      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b80      	cmp	r3, #128	@ 0x80
 80090e6:	d034      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2b40      	cmp	r3, #64	@ 0x40
 80090ec:	d031      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d110      	bne.n	800911e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2208      	movs	r2, #8
 8009102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f838 	bl	800917a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2208      	movs	r2, #8
 800910e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e029      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800912c:	d111      	bne.n	8009152 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 f81e 	bl	800917a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e00f      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4013      	ands	r3, r2
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	429a      	cmp	r2, r3
 8009160:	bf0c      	ite	eq
 8009162:	2301      	moveq	r3, #1
 8009164:	2300      	movne	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	461a      	mov	r2, r3
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	429a      	cmp	r2, r3
 800916e:	d0a0      	beq.n	80090b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800917a:	b480      	push	{r7}
 800917c:	b095      	sub	sp, #84	@ 0x54
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e6      	bne.n	8009182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3308      	adds	r3, #8
 80091ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	e853 3f00 	ldrex	r3, [r3]
 80091c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f023 0301 	bic.w	r3, r3, #1
 80091ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3308      	adds	r3, #8
 80091d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091dc:	e841 2300 	strex	r3, r2, [r1]
 80091e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e5      	bne.n	80091b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d118      	bne.n	8009222 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f023 0310 	bic.w	r3, r3, #16
 8009204:	647b      	str	r3, [r7, #68]	@ 0x44
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800920e:	61bb      	str	r3, [r7, #24]
 8009210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6979      	ldr	r1, [r7, #20]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	613b      	str	r3, [r7, #16]
   return(result);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e6      	bne.n	80091f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009236:	bf00      	nop
 8009238:	3754      	adds	r7, #84	@ 0x54
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <calloc>:
 8009244:	4b02      	ldr	r3, [pc, #8]	@ (8009250 <calloc+0xc>)
 8009246:	460a      	mov	r2, r1
 8009248:	4601      	mov	r1, r0
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	f000 b802 	b.w	8009254 <_calloc_r>
 8009250:	20000040 	.word	0x20000040

08009254 <_calloc_r>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	fba1 5402 	umull	r5, r4, r1, r2
 800925a:	b934      	cbnz	r4, 800926a <_calloc_r+0x16>
 800925c:	4629      	mov	r1, r5
 800925e:	f000 f83f 	bl	80092e0 <_malloc_r>
 8009262:	4606      	mov	r6, r0
 8009264:	b928      	cbnz	r0, 8009272 <_calloc_r+0x1e>
 8009266:	4630      	mov	r0, r6
 8009268:	bd70      	pop	{r4, r5, r6, pc}
 800926a:	220c      	movs	r2, #12
 800926c:	6002      	str	r2, [r0, #0]
 800926e:	2600      	movs	r6, #0
 8009270:	e7f9      	b.n	8009266 <_calloc_r+0x12>
 8009272:	462a      	mov	r2, r5
 8009274:	4621      	mov	r1, r4
 8009276:	f000 fac7 	bl	8009808 <memset>
 800927a:	e7f4      	b.n	8009266 <_calloc_r+0x12>

0800927c <malloc>:
 800927c:	4b02      	ldr	r3, [pc, #8]	@ (8009288 <malloc+0xc>)
 800927e:	4601      	mov	r1, r0
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	f000 b82d 	b.w	80092e0 <_malloc_r>
 8009286:	bf00      	nop
 8009288:	20000040 	.word	0x20000040

0800928c <free>:
 800928c:	4b02      	ldr	r3, [pc, #8]	@ (8009298 <free+0xc>)
 800928e:	4601      	mov	r1, r0
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f000 bb53 	b.w	800993c <_free_r>
 8009296:	bf00      	nop
 8009298:	20000040 	.word	0x20000040

0800929c <sbrk_aligned>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4e0f      	ldr	r6, [pc, #60]	@ (80092dc <sbrk_aligned+0x40>)
 80092a0:	460c      	mov	r4, r1
 80092a2:	6831      	ldr	r1, [r6, #0]
 80092a4:	4605      	mov	r5, r0
 80092a6:	b911      	cbnz	r1, 80092ae <sbrk_aligned+0x12>
 80092a8:	f000 faea 	bl	8009880 <_sbrk_r>
 80092ac:	6030      	str	r0, [r6, #0]
 80092ae:	4621      	mov	r1, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	f000 fae5 	bl	8009880 <_sbrk_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d103      	bne.n	80092c2 <sbrk_aligned+0x26>
 80092ba:	f04f 34ff 	mov.w	r4, #4294967295
 80092be:	4620      	mov	r0, r4
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
 80092c2:	1cc4      	adds	r4, r0, #3
 80092c4:	f024 0403 	bic.w	r4, r4, #3
 80092c8:	42a0      	cmp	r0, r4
 80092ca:	d0f8      	beq.n	80092be <sbrk_aligned+0x22>
 80092cc:	1a21      	subs	r1, r4, r0
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 fad6 	bl	8009880 <_sbrk_r>
 80092d4:	3001      	adds	r0, #1
 80092d6:	d1f2      	bne.n	80092be <sbrk_aligned+0x22>
 80092d8:	e7ef      	b.n	80092ba <sbrk_aligned+0x1e>
 80092da:	bf00      	nop
 80092dc:	20000590 	.word	0x20000590

080092e0 <_malloc_r>:
 80092e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e4:	1ccd      	adds	r5, r1, #3
 80092e6:	f025 0503 	bic.w	r5, r5, #3
 80092ea:	3508      	adds	r5, #8
 80092ec:	2d0c      	cmp	r5, #12
 80092ee:	bf38      	it	cc
 80092f0:	250c      	movcc	r5, #12
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	4606      	mov	r6, r0
 80092f6:	db01      	blt.n	80092fc <_malloc_r+0x1c>
 80092f8:	42a9      	cmp	r1, r5
 80092fa:	d904      	bls.n	8009306 <_malloc_r+0x26>
 80092fc:	230c      	movs	r3, #12
 80092fe:	6033      	str	r3, [r6, #0]
 8009300:	2000      	movs	r0, #0
 8009302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093dc <_malloc_r+0xfc>
 800930a:	f000 f869 	bl	80093e0 <__malloc_lock>
 800930e:	f8d8 3000 	ldr.w	r3, [r8]
 8009312:	461c      	mov	r4, r3
 8009314:	bb44      	cbnz	r4, 8009368 <_malloc_r+0x88>
 8009316:	4629      	mov	r1, r5
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff ffbf 	bl	800929c <sbrk_aligned>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	4604      	mov	r4, r0
 8009322:	d158      	bne.n	80093d6 <_malloc_r+0xf6>
 8009324:	f8d8 4000 	ldr.w	r4, [r8]
 8009328:	4627      	mov	r7, r4
 800932a:	2f00      	cmp	r7, #0
 800932c:	d143      	bne.n	80093b6 <_malloc_r+0xd6>
 800932e:	2c00      	cmp	r4, #0
 8009330:	d04b      	beq.n	80093ca <_malloc_r+0xea>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	4639      	mov	r1, r7
 8009336:	4630      	mov	r0, r6
 8009338:	eb04 0903 	add.w	r9, r4, r3
 800933c:	f000 faa0 	bl	8009880 <_sbrk_r>
 8009340:	4581      	cmp	r9, r0
 8009342:	d142      	bne.n	80093ca <_malloc_r+0xea>
 8009344:	6821      	ldr	r1, [r4, #0]
 8009346:	1a6d      	subs	r5, r5, r1
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ffa6 	bl	800929c <sbrk_aligned>
 8009350:	3001      	adds	r0, #1
 8009352:	d03a      	beq.n	80093ca <_malloc_r+0xea>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	442b      	add	r3, r5
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	f8d8 3000 	ldr.w	r3, [r8]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	bb62      	cbnz	r2, 80093bc <_malloc_r+0xdc>
 8009362:	f8c8 7000 	str.w	r7, [r8]
 8009366:	e00f      	b.n	8009388 <_malloc_r+0xa8>
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	1b52      	subs	r2, r2, r5
 800936c:	d420      	bmi.n	80093b0 <_malloc_r+0xd0>
 800936e:	2a0b      	cmp	r2, #11
 8009370:	d917      	bls.n	80093a2 <_malloc_r+0xc2>
 8009372:	1961      	adds	r1, r4, r5
 8009374:	42a3      	cmp	r3, r4
 8009376:	6025      	str	r5, [r4, #0]
 8009378:	bf18      	it	ne
 800937a:	6059      	strne	r1, [r3, #4]
 800937c:	6863      	ldr	r3, [r4, #4]
 800937e:	bf08      	it	eq
 8009380:	f8c8 1000 	streq.w	r1, [r8]
 8009384:	5162      	str	r2, [r4, r5]
 8009386:	604b      	str	r3, [r1, #4]
 8009388:	4630      	mov	r0, r6
 800938a:	f000 f82f 	bl	80093ec <__malloc_unlock>
 800938e:	f104 000b 	add.w	r0, r4, #11
 8009392:	1d23      	adds	r3, r4, #4
 8009394:	f020 0007 	bic.w	r0, r0, #7
 8009398:	1ac2      	subs	r2, r0, r3
 800939a:	bf1c      	itt	ne
 800939c:	1a1b      	subne	r3, r3, r0
 800939e:	50a3      	strne	r3, [r4, r2]
 80093a0:	e7af      	b.n	8009302 <_malloc_r+0x22>
 80093a2:	6862      	ldr	r2, [r4, #4]
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	bf0c      	ite	eq
 80093a8:	f8c8 2000 	streq.w	r2, [r8]
 80093ac:	605a      	strne	r2, [r3, #4]
 80093ae:	e7eb      	b.n	8009388 <_malloc_r+0xa8>
 80093b0:	4623      	mov	r3, r4
 80093b2:	6864      	ldr	r4, [r4, #4]
 80093b4:	e7ae      	b.n	8009314 <_malloc_r+0x34>
 80093b6:	463c      	mov	r4, r7
 80093b8:	687f      	ldr	r7, [r7, #4]
 80093ba:	e7b6      	b.n	800932a <_malloc_r+0x4a>
 80093bc:	461a      	mov	r2, r3
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	d1fb      	bne.n	80093bc <_malloc_r+0xdc>
 80093c4:	2300      	movs	r3, #0
 80093c6:	6053      	str	r3, [r2, #4]
 80093c8:	e7de      	b.n	8009388 <_malloc_r+0xa8>
 80093ca:	230c      	movs	r3, #12
 80093cc:	6033      	str	r3, [r6, #0]
 80093ce:	4630      	mov	r0, r6
 80093d0:	f000 f80c 	bl	80093ec <__malloc_unlock>
 80093d4:	e794      	b.n	8009300 <_malloc_r+0x20>
 80093d6:	6005      	str	r5, [r0, #0]
 80093d8:	e7d6      	b.n	8009388 <_malloc_r+0xa8>
 80093da:	bf00      	nop
 80093dc:	20000594 	.word	0x20000594

080093e0 <__malloc_lock>:
 80093e0:	4801      	ldr	r0, [pc, #4]	@ (80093e8 <__malloc_lock+0x8>)
 80093e2:	f000 ba9a 	b.w	800991a <__retarget_lock_acquire_recursive>
 80093e6:	bf00      	nop
 80093e8:	200006d8 	.word	0x200006d8

080093ec <__malloc_unlock>:
 80093ec:	4801      	ldr	r0, [pc, #4]	@ (80093f4 <__malloc_unlock+0x8>)
 80093ee:	f000 ba95 	b.w	800991c <__retarget_lock_release_recursive>
 80093f2:	bf00      	nop
 80093f4:	200006d8 	.word	0x200006d8

080093f8 <std>:
 80093f8:	2300      	movs	r3, #0
 80093fa:	b510      	push	{r4, lr}
 80093fc:	4604      	mov	r4, r0
 80093fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009406:	6083      	str	r3, [r0, #8]
 8009408:	8181      	strh	r1, [r0, #12]
 800940a:	6643      	str	r3, [r0, #100]	@ 0x64
 800940c:	81c2      	strh	r2, [r0, #14]
 800940e:	6183      	str	r3, [r0, #24]
 8009410:	4619      	mov	r1, r3
 8009412:	2208      	movs	r2, #8
 8009414:	305c      	adds	r0, #92	@ 0x5c
 8009416:	f000 f9f7 	bl	8009808 <memset>
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <std+0x58>)
 800941c:	6263      	str	r3, [r4, #36]	@ 0x24
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x5c>)
 8009420:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <std+0x60>)
 8009424:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009426:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <std+0x64>)
 8009428:	6323      	str	r3, [r4, #48]	@ 0x30
 800942a:	4b0d      	ldr	r3, [pc, #52]	@ (8009460 <std+0x68>)
 800942c:	6224      	str	r4, [r4, #32]
 800942e:	429c      	cmp	r4, r3
 8009430:	d006      	beq.n	8009440 <std+0x48>
 8009432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009436:	4294      	cmp	r4, r2
 8009438:	d002      	beq.n	8009440 <std+0x48>
 800943a:	33d0      	adds	r3, #208	@ 0xd0
 800943c:	429c      	cmp	r4, r3
 800943e:	d105      	bne.n	800944c <std+0x54>
 8009440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009448:	f000 ba66 	b.w	8009918 <__retarget_lock_init_recursive>
 800944c:	bd10      	pop	{r4, pc}
 800944e:	bf00      	nop
 8009450:	08009709 	.word	0x08009709
 8009454:	0800972b 	.word	0x0800972b
 8009458:	08009763 	.word	0x08009763
 800945c:	08009787 	.word	0x08009787
 8009460:	20000598 	.word	0x20000598

08009464 <stdio_exit_handler>:
 8009464:	4a02      	ldr	r2, [pc, #8]	@ (8009470 <stdio_exit_handler+0xc>)
 8009466:	4903      	ldr	r1, [pc, #12]	@ (8009474 <stdio_exit_handler+0x10>)
 8009468:	4803      	ldr	r0, [pc, #12]	@ (8009478 <stdio_exit_handler+0x14>)
 800946a:	f000 b869 	b.w	8009540 <_fwalk_sglue>
 800946e:	bf00      	nop
 8009470:	20000034 	.word	0x20000034
 8009474:	0800a325 	.word	0x0800a325
 8009478:	20000044 	.word	0x20000044

0800947c <cleanup_stdio>:
 800947c:	6841      	ldr	r1, [r0, #4]
 800947e:	4b0c      	ldr	r3, [pc, #48]	@ (80094b0 <cleanup_stdio+0x34>)
 8009480:	4299      	cmp	r1, r3
 8009482:	b510      	push	{r4, lr}
 8009484:	4604      	mov	r4, r0
 8009486:	d001      	beq.n	800948c <cleanup_stdio+0x10>
 8009488:	f000 ff4c 	bl	800a324 <_fflush_r>
 800948c:	68a1      	ldr	r1, [r4, #8]
 800948e:	4b09      	ldr	r3, [pc, #36]	@ (80094b4 <cleanup_stdio+0x38>)
 8009490:	4299      	cmp	r1, r3
 8009492:	d002      	beq.n	800949a <cleanup_stdio+0x1e>
 8009494:	4620      	mov	r0, r4
 8009496:	f000 ff45 	bl	800a324 <_fflush_r>
 800949a:	68e1      	ldr	r1, [r4, #12]
 800949c:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <cleanup_stdio+0x3c>)
 800949e:	4299      	cmp	r1, r3
 80094a0:	d004      	beq.n	80094ac <cleanup_stdio+0x30>
 80094a2:	4620      	mov	r0, r4
 80094a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a8:	f000 bf3c 	b.w	800a324 <_fflush_r>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	bf00      	nop
 80094b0:	20000598 	.word	0x20000598
 80094b4:	20000600 	.word	0x20000600
 80094b8:	20000668 	.word	0x20000668

080094bc <global_stdio_init.part.0>:
 80094bc:	b510      	push	{r4, lr}
 80094be:	4b0b      	ldr	r3, [pc, #44]	@ (80094ec <global_stdio_init.part.0+0x30>)
 80094c0:	4c0b      	ldr	r4, [pc, #44]	@ (80094f0 <global_stdio_init.part.0+0x34>)
 80094c2:	4a0c      	ldr	r2, [pc, #48]	@ (80094f4 <global_stdio_init.part.0+0x38>)
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	4620      	mov	r0, r4
 80094c8:	2200      	movs	r2, #0
 80094ca:	2104      	movs	r1, #4
 80094cc:	f7ff ff94 	bl	80093f8 <std>
 80094d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094d4:	2201      	movs	r2, #1
 80094d6:	2109      	movs	r1, #9
 80094d8:	f7ff ff8e 	bl	80093f8 <std>
 80094dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094e0:	2202      	movs	r2, #2
 80094e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e6:	2112      	movs	r1, #18
 80094e8:	f7ff bf86 	b.w	80093f8 <std>
 80094ec:	200006d0 	.word	0x200006d0
 80094f0:	20000598 	.word	0x20000598
 80094f4:	08009465 	.word	0x08009465

080094f8 <__sfp_lock_acquire>:
 80094f8:	4801      	ldr	r0, [pc, #4]	@ (8009500 <__sfp_lock_acquire+0x8>)
 80094fa:	f000 ba0e 	b.w	800991a <__retarget_lock_acquire_recursive>
 80094fe:	bf00      	nop
 8009500:	200006d9 	.word	0x200006d9

08009504 <__sfp_lock_release>:
 8009504:	4801      	ldr	r0, [pc, #4]	@ (800950c <__sfp_lock_release+0x8>)
 8009506:	f000 ba09 	b.w	800991c <__retarget_lock_release_recursive>
 800950a:	bf00      	nop
 800950c:	200006d9 	.word	0x200006d9

08009510 <__sinit>:
 8009510:	b510      	push	{r4, lr}
 8009512:	4604      	mov	r4, r0
 8009514:	f7ff fff0 	bl	80094f8 <__sfp_lock_acquire>
 8009518:	6a23      	ldr	r3, [r4, #32]
 800951a:	b11b      	cbz	r3, 8009524 <__sinit+0x14>
 800951c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009520:	f7ff bff0 	b.w	8009504 <__sfp_lock_release>
 8009524:	4b04      	ldr	r3, [pc, #16]	@ (8009538 <__sinit+0x28>)
 8009526:	6223      	str	r3, [r4, #32]
 8009528:	4b04      	ldr	r3, [pc, #16]	@ (800953c <__sinit+0x2c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1f5      	bne.n	800951c <__sinit+0xc>
 8009530:	f7ff ffc4 	bl	80094bc <global_stdio_init.part.0>
 8009534:	e7f2      	b.n	800951c <__sinit+0xc>
 8009536:	bf00      	nop
 8009538:	0800947d 	.word	0x0800947d
 800953c:	200006d0 	.word	0x200006d0

08009540 <_fwalk_sglue>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	4607      	mov	r7, r0
 8009546:	4688      	mov	r8, r1
 8009548:	4614      	mov	r4, r2
 800954a:	2600      	movs	r6, #0
 800954c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009550:	f1b9 0901 	subs.w	r9, r9, #1
 8009554:	d505      	bpl.n	8009562 <_fwalk_sglue+0x22>
 8009556:	6824      	ldr	r4, [r4, #0]
 8009558:	2c00      	cmp	r4, #0
 800955a:	d1f7      	bne.n	800954c <_fwalk_sglue+0xc>
 800955c:	4630      	mov	r0, r6
 800955e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009562:	89ab      	ldrh	r3, [r5, #12]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d907      	bls.n	8009578 <_fwalk_sglue+0x38>
 8009568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800956c:	3301      	adds	r3, #1
 800956e:	d003      	beq.n	8009578 <_fwalk_sglue+0x38>
 8009570:	4629      	mov	r1, r5
 8009572:	4638      	mov	r0, r7
 8009574:	47c0      	blx	r8
 8009576:	4306      	orrs	r6, r0
 8009578:	3568      	adds	r5, #104	@ 0x68
 800957a:	e7e9      	b.n	8009550 <_fwalk_sglue+0x10>

0800957c <iprintf>:
 800957c:	b40f      	push	{r0, r1, r2, r3}
 800957e:	b507      	push	{r0, r1, r2, lr}
 8009580:	4906      	ldr	r1, [pc, #24]	@ (800959c <iprintf+0x20>)
 8009582:	ab04      	add	r3, sp, #16
 8009584:	6808      	ldr	r0, [r1, #0]
 8009586:	f853 2b04 	ldr.w	r2, [r3], #4
 800958a:	6881      	ldr	r1, [r0, #8]
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	f000 fba1 	bl	8009cd4 <_vfiprintf_r>
 8009592:	b003      	add	sp, #12
 8009594:	f85d eb04 	ldr.w	lr, [sp], #4
 8009598:	b004      	add	sp, #16
 800959a:	4770      	bx	lr
 800959c:	20000040 	.word	0x20000040

080095a0 <setvbuf>:
 80095a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	461d      	mov	r5, r3
 80095a6:	4b57      	ldr	r3, [pc, #348]	@ (8009704 <setvbuf+0x164>)
 80095a8:	681f      	ldr	r7, [r3, #0]
 80095aa:	4604      	mov	r4, r0
 80095ac:	460e      	mov	r6, r1
 80095ae:	4690      	mov	r8, r2
 80095b0:	b127      	cbz	r7, 80095bc <setvbuf+0x1c>
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	b913      	cbnz	r3, 80095bc <setvbuf+0x1c>
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ffaa 	bl	8009510 <__sinit>
 80095bc:	f1b8 0f02 	cmp.w	r8, #2
 80095c0:	d006      	beq.n	80095d0 <setvbuf+0x30>
 80095c2:	f1b8 0f01 	cmp.w	r8, #1
 80095c6:	f200 809a 	bhi.w	80096fe <setvbuf+0x15e>
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	f2c0 8097 	blt.w	80096fe <setvbuf+0x15e>
 80095d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	d405      	bmi.n	80095e2 <setvbuf+0x42>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d402      	bmi.n	80095e2 <setvbuf+0x42>
 80095dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095de:	f000 f99c 	bl	800991a <__retarget_lock_acquire_recursive>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4638      	mov	r0, r7
 80095e6:	f000 fe9d 	bl	800a324 <_fflush_r>
 80095ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ec:	b141      	cbz	r1, 8009600 <setvbuf+0x60>
 80095ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d002      	beq.n	80095fc <setvbuf+0x5c>
 80095f6:	4638      	mov	r0, r7
 80095f8:	f000 f9a0 	bl	800993c <_free_r>
 80095fc:	2300      	movs	r3, #0
 80095fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8009600:	2300      	movs	r3, #0
 8009602:	61a3      	str	r3, [r4, #24]
 8009604:	6063      	str	r3, [r4, #4]
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	d503      	bpl.n	8009614 <setvbuf+0x74>
 800960c:	6921      	ldr	r1, [r4, #16]
 800960e:	4638      	mov	r0, r7
 8009610:	f000 f994 	bl	800993c <_free_r>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800961a:	f023 0303 	bic.w	r3, r3, #3
 800961e:	f1b8 0f02 	cmp.w	r8, #2
 8009622:	81a3      	strh	r3, [r4, #12]
 8009624:	d061      	beq.n	80096ea <setvbuf+0x14a>
 8009626:	ab01      	add	r3, sp, #4
 8009628:	466a      	mov	r2, sp
 800962a:	4621      	mov	r1, r4
 800962c:	4638      	mov	r0, r7
 800962e:	f000 fea1 	bl	800a374 <__swhatbuf_r>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	4318      	orrs	r0, r3
 8009636:	81a0      	strh	r0, [r4, #12]
 8009638:	bb2d      	cbnz	r5, 8009686 <setvbuf+0xe6>
 800963a:	9d00      	ldr	r5, [sp, #0]
 800963c:	4628      	mov	r0, r5
 800963e:	f7ff fe1d 	bl	800927c <malloc>
 8009642:	4606      	mov	r6, r0
 8009644:	2800      	cmp	r0, #0
 8009646:	d152      	bne.n	80096ee <setvbuf+0x14e>
 8009648:	f8dd 9000 	ldr.w	r9, [sp]
 800964c:	45a9      	cmp	r9, r5
 800964e:	d140      	bne.n	80096d2 <setvbuf+0x132>
 8009650:	f04f 35ff 	mov.w	r5, #4294967295
 8009654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009658:	f043 0202 	orr.w	r2, r3, #2
 800965c:	81a2      	strh	r2, [r4, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	60a2      	str	r2, [r4, #8]
 8009662:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009666:	6022      	str	r2, [r4, #0]
 8009668:	6122      	str	r2, [r4, #16]
 800966a:	2201      	movs	r2, #1
 800966c:	6162      	str	r2, [r4, #20]
 800966e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009670:	07d6      	lsls	r6, r2, #31
 8009672:	d404      	bmi.n	800967e <setvbuf+0xde>
 8009674:	0598      	lsls	r0, r3, #22
 8009676:	d402      	bmi.n	800967e <setvbuf+0xde>
 8009678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800967a:	f000 f94f 	bl	800991c <__retarget_lock_release_recursive>
 800967e:	4628      	mov	r0, r5
 8009680:	b003      	add	sp, #12
 8009682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009686:	2e00      	cmp	r6, #0
 8009688:	d0d8      	beq.n	800963c <setvbuf+0x9c>
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	b913      	cbnz	r3, 8009694 <setvbuf+0xf4>
 800968e:	4638      	mov	r0, r7
 8009690:	f7ff ff3e 	bl	8009510 <__sinit>
 8009694:	f1b8 0f01 	cmp.w	r8, #1
 8009698:	bf08      	it	eq
 800969a:	89a3      	ldrheq	r3, [r4, #12]
 800969c:	6026      	str	r6, [r4, #0]
 800969e:	bf04      	itt	eq
 80096a0:	f043 0301 	orreq.w	r3, r3, #1
 80096a4:	81a3      	strheq	r3, [r4, #12]
 80096a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096aa:	f013 0208 	ands.w	r2, r3, #8
 80096ae:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80096b2:	d01e      	beq.n	80096f2 <setvbuf+0x152>
 80096b4:	07d9      	lsls	r1, r3, #31
 80096b6:	bf41      	itttt	mi
 80096b8:	2200      	movmi	r2, #0
 80096ba:	426d      	negmi	r5, r5
 80096bc:	60a2      	strmi	r2, [r4, #8]
 80096be:	61a5      	strmi	r5, [r4, #24]
 80096c0:	bf58      	it	pl
 80096c2:	60a5      	strpl	r5, [r4, #8]
 80096c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096c6:	07d2      	lsls	r2, r2, #31
 80096c8:	d401      	bmi.n	80096ce <setvbuf+0x12e>
 80096ca:	059b      	lsls	r3, r3, #22
 80096cc:	d513      	bpl.n	80096f6 <setvbuf+0x156>
 80096ce:	2500      	movs	r5, #0
 80096d0:	e7d5      	b.n	800967e <setvbuf+0xde>
 80096d2:	4648      	mov	r0, r9
 80096d4:	f7ff fdd2 	bl	800927c <malloc>
 80096d8:	4606      	mov	r6, r0
 80096da:	2800      	cmp	r0, #0
 80096dc:	d0b8      	beq.n	8009650 <setvbuf+0xb0>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	464d      	mov	r5, r9
 80096e8:	e7cf      	b.n	800968a <setvbuf+0xea>
 80096ea:	2500      	movs	r5, #0
 80096ec:	e7b2      	b.n	8009654 <setvbuf+0xb4>
 80096ee:	46a9      	mov	r9, r5
 80096f0:	e7f5      	b.n	80096de <setvbuf+0x13e>
 80096f2:	60a2      	str	r2, [r4, #8]
 80096f4:	e7e6      	b.n	80096c4 <setvbuf+0x124>
 80096f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096f8:	f000 f910 	bl	800991c <__retarget_lock_release_recursive>
 80096fc:	e7e7      	b.n	80096ce <setvbuf+0x12e>
 80096fe:	f04f 35ff 	mov.w	r5, #4294967295
 8009702:	e7bc      	b.n	800967e <setvbuf+0xde>
 8009704:	20000040 	.word	0x20000040

08009708 <__sread>:
 8009708:	b510      	push	{r4, lr}
 800970a:	460c      	mov	r4, r1
 800970c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009710:	f000 f8a4 	bl	800985c <_read_r>
 8009714:	2800      	cmp	r0, #0
 8009716:	bfab      	itete	ge
 8009718:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800971a:	89a3      	ldrhlt	r3, [r4, #12]
 800971c:	181b      	addge	r3, r3, r0
 800971e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009722:	bfac      	ite	ge
 8009724:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009726:	81a3      	strhlt	r3, [r4, #12]
 8009728:	bd10      	pop	{r4, pc}

0800972a <__swrite>:
 800972a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972e:	461f      	mov	r7, r3
 8009730:	898b      	ldrh	r3, [r1, #12]
 8009732:	05db      	lsls	r3, r3, #23
 8009734:	4605      	mov	r5, r0
 8009736:	460c      	mov	r4, r1
 8009738:	4616      	mov	r6, r2
 800973a:	d505      	bpl.n	8009748 <__swrite+0x1e>
 800973c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009740:	2302      	movs	r3, #2
 8009742:	2200      	movs	r2, #0
 8009744:	f000 f878 	bl	8009838 <_lseek_r>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800974e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	4632      	mov	r2, r6
 8009756:	463b      	mov	r3, r7
 8009758:	4628      	mov	r0, r5
 800975a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	f000 b89f 	b.w	80098a0 <_write_r>

08009762 <__sseek>:
 8009762:	b510      	push	{r4, lr}
 8009764:	460c      	mov	r4, r1
 8009766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976a:	f000 f865 	bl	8009838 <_lseek_r>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	bf15      	itete	ne
 8009774:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009776:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800977a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800977e:	81a3      	strheq	r3, [r4, #12]
 8009780:	bf18      	it	ne
 8009782:	81a3      	strhne	r3, [r4, #12]
 8009784:	bd10      	pop	{r4, pc}

08009786 <__sclose>:
 8009786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978a:	f000 b845 	b.w	8009818 <_close_r>

0800978e <_vsniprintf_r>:
 800978e:	b530      	push	{r4, r5, lr}
 8009790:	4614      	mov	r4, r2
 8009792:	2c00      	cmp	r4, #0
 8009794:	b09b      	sub	sp, #108	@ 0x6c
 8009796:	4605      	mov	r5, r0
 8009798:	461a      	mov	r2, r3
 800979a:	da05      	bge.n	80097a8 <_vsniprintf_r+0x1a>
 800979c:	238b      	movs	r3, #139	@ 0x8b
 800979e:	6003      	str	r3, [r0, #0]
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	b01b      	add	sp, #108	@ 0x6c
 80097a6:	bd30      	pop	{r4, r5, pc}
 80097a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80097ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80097b0:	f04f 0300 	mov.w	r3, #0
 80097b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80097b6:	bf14      	ite	ne
 80097b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097bc:	4623      	moveq	r3, r4
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097c6:	9100      	str	r1, [sp, #0]
 80097c8:	9104      	str	r1, [sp, #16]
 80097ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80097ce:	4669      	mov	r1, sp
 80097d0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80097d2:	f000 f959 	bl	8009a88 <_svfiprintf_r>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	bfbc      	itt	lt
 80097da:	238b      	movlt	r3, #139	@ 0x8b
 80097dc:	602b      	strlt	r3, [r5, #0]
 80097de:	2c00      	cmp	r4, #0
 80097e0:	d0e0      	beq.n	80097a4 <_vsniprintf_r+0x16>
 80097e2:	9b00      	ldr	r3, [sp, #0]
 80097e4:	2200      	movs	r2, #0
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	e7dc      	b.n	80097a4 <_vsniprintf_r+0x16>
	...

080097ec <vsniprintf>:
 80097ec:	b507      	push	{r0, r1, r2, lr}
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4613      	mov	r3, r2
 80097f2:	460a      	mov	r2, r1
 80097f4:	4601      	mov	r1, r0
 80097f6:	4803      	ldr	r0, [pc, #12]	@ (8009804 <vsniprintf+0x18>)
 80097f8:	6800      	ldr	r0, [r0, #0]
 80097fa:	f7ff ffc8 	bl	800978e <_vsniprintf_r>
 80097fe:	b003      	add	sp, #12
 8009800:	f85d fb04 	ldr.w	pc, [sp], #4
 8009804:	20000040 	.word	0x20000040

08009808 <memset>:
 8009808:	4402      	add	r2, r0
 800980a:	4603      	mov	r3, r0
 800980c:	4293      	cmp	r3, r2
 800980e:	d100      	bne.n	8009812 <memset+0xa>
 8009810:	4770      	bx	lr
 8009812:	f803 1b01 	strb.w	r1, [r3], #1
 8009816:	e7f9      	b.n	800980c <memset+0x4>

08009818 <_close_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	@ (8009834 <_close_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f8 fb84 	bl	8001f30 <_close>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_close_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_close_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	200006d4 	.word	0x200006d4

08009838 <_lseek_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d07      	ldr	r5, [pc, #28]	@ (8009858 <_lseek_r+0x20>)
 800983c:	4604      	mov	r4, r0
 800983e:	4608      	mov	r0, r1
 8009840:	4611      	mov	r1, r2
 8009842:	2200      	movs	r2, #0
 8009844:	602a      	str	r2, [r5, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	f7f8 fb99 	bl	8001f7e <_lseek>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d102      	bne.n	8009856 <_lseek_r+0x1e>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b103      	cbz	r3, 8009856 <_lseek_r+0x1e>
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	200006d4 	.word	0x200006d4

0800985c <_read_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d07      	ldr	r5, [pc, #28]	@ (800987c <_read_r+0x20>)
 8009860:	4604      	mov	r4, r0
 8009862:	4608      	mov	r0, r1
 8009864:	4611      	mov	r1, r2
 8009866:	2200      	movs	r2, #0
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f7f8 fb43 	bl	8001ef6 <_read>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_read_r+0x1e>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_read_r+0x1e>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	200006d4 	.word	0x200006d4

08009880 <_sbrk_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d06      	ldr	r5, [pc, #24]	@ (800989c <_sbrk_r+0x1c>)
 8009884:	2300      	movs	r3, #0
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	f7f8 fb84 	bl	8001f98 <_sbrk>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_sbrk_r+0x1a>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_sbrk_r+0x1a>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	200006d4 	.word	0x200006d4

080098a0 <_write_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d07      	ldr	r5, [pc, #28]	@ (80098c0 <_write_r+0x20>)
 80098a4:	4604      	mov	r4, r0
 80098a6:	4608      	mov	r0, r1
 80098a8:	4611      	mov	r1, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	602a      	str	r2, [r5, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f7f7 fb74 	bl	8000f9c <_write>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_write_r+0x1e>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_write_r+0x1e>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	200006d4 	.word	0x200006d4

080098c4 <__errno>:
 80098c4:	4b01      	ldr	r3, [pc, #4]	@ (80098cc <__errno+0x8>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	20000040 	.word	0x20000040

080098d0 <__libc_init_array>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009908 <__libc_init_array+0x38>)
 80098d4:	4c0d      	ldr	r4, [pc, #52]	@ (800990c <__libc_init_array+0x3c>)
 80098d6:	1b64      	subs	r4, r4, r5
 80098d8:	10a4      	asrs	r4, r4, #2
 80098da:	2600      	movs	r6, #0
 80098dc:	42a6      	cmp	r6, r4
 80098de:	d109      	bne.n	80098f4 <__libc_init_array+0x24>
 80098e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009910 <__libc_init_array+0x40>)
 80098e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009914 <__libc_init_array+0x44>)
 80098e4:	f000 feae 	bl	800a644 <_init>
 80098e8:	1b64      	subs	r4, r4, r5
 80098ea:	10a4      	asrs	r4, r4, #2
 80098ec:	2600      	movs	r6, #0
 80098ee:	42a6      	cmp	r6, r4
 80098f0:	d105      	bne.n	80098fe <__libc_init_array+0x2e>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f8:	4798      	blx	r3
 80098fa:	3601      	adds	r6, #1
 80098fc:	e7ee      	b.n	80098dc <__libc_init_array+0xc>
 80098fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009902:	4798      	blx	r3
 8009904:	3601      	adds	r6, #1
 8009906:	e7f2      	b.n	80098ee <__libc_init_array+0x1e>
 8009908:	0800ab20 	.word	0x0800ab20
 800990c:	0800ab20 	.word	0x0800ab20
 8009910:	0800ab20 	.word	0x0800ab20
 8009914:	0800ab24 	.word	0x0800ab24

08009918 <__retarget_lock_init_recursive>:
 8009918:	4770      	bx	lr

0800991a <__retarget_lock_acquire_recursive>:
 800991a:	4770      	bx	lr

0800991c <__retarget_lock_release_recursive>:
 800991c:	4770      	bx	lr

0800991e <memcpy>:
 800991e:	440a      	add	r2, r1
 8009920:	4291      	cmp	r1, r2
 8009922:	f100 33ff 	add.w	r3, r0, #4294967295
 8009926:	d100      	bne.n	800992a <memcpy+0xc>
 8009928:	4770      	bx	lr
 800992a:	b510      	push	{r4, lr}
 800992c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009934:	4291      	cmp	r1, r2
 8009936:	d1f9      	bne.n	800992c <memcpy+0xe>
 8009938:	bd10      	pop	{r4, pc}
	...

0800993c <_free_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4605      	mov	r5, r0
 8009940:	2900      	cmp	r1, #0
 8009942:	d041      	beq.n	80099c8 <_free_r+0x8c>
 8009944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009948:	1f0c      	subs	r4, r1, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	bfb8      	it	lt
 800994e:	18e4      	addlt	r4, r4, r3
 8009950:	f7ff fd46 	bl	80093e0 <__malloc_lock>
 8009954:	4a1d      	ldr	r2, [pc, #116]	@ (80099cc <_free_r+0x90>)
 8009956:	6813      	ldr	r3, [r2, #0]
 8009958:	b933      	cbnz	r3, 8009968 <_free_r+0x2c>
 800995a:	6063      	str	r3, [r4, #4]
 800995c:	6014      	str	r4, [r2, #0]
 800995e:	4628      	mov	r0, r5
 8009960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009964:	f7ff bd42 	b.w	80093ec <__malloc_unlock>
 8009968:	42a3      	cmp	r3, r4
 800996a:	d908      	bls.n	800997e <_free_r+0x42>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428b      	cmp	r3, r1
 8009972:	bf01      	itttt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	1809      	addeq	r1, r1, r0
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	e7ed      	b.n	800995a <_free_r+0x1e>
 800997e:	461a      	mov	r2, r3
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	b10b      	cbz	r3, 8009988 <_free_r+0x4c>
 8009984:	42a3      	cmp	r3, r4
 8009986:	d9fa      	bls.n	800997e <_free_r+0x42>
 8009988:	6811      	ldr	r1, [r2, #0]
 800998a:	1850      	adds	r0, r2, r1
 800998c:	42a0      	cmp	r0, r4
 800998e:	d10b      	bne.n	80099a8 <_free_r+0x6c>
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	4401      	add	r1, r0
 8009994:	1850      	adds	r0, r2, r1
 8009996:	4283      	cmp	r3, r0
 8009998:	6011      	str	r1, [r2, #0]
 800999a:	d1e0      	bne.n	800995e <_free_r+0x22>
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	6053      	str	r3, [r2, #4]
 80099a2:	4408      	add	r0, r1
 80099a4:	6010      	str	r0, [r2, #0]
 80099a6:	e7da      	b.n	800995e <_free_r+0x22>
 80099a8:	d902      	bls.n	80099b0 <_free_r+0x74>
 80099aa:	230c      	movs	r3, #12
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	e7d6      	b.n	800995e <_free_r+0x22>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	1821      	adds	r1, r4, r0
 80099b4:	428b      	cmp	r3, r1
 80099b6:	bf04      	itt	eq
 80099b8:	6819      	ldreq	r1, [r3, #0]
 80099ba:	685b      	ldreq	r3, [r3, #4]
 80099bc:	6063      	str	r3, [r4, #4]
 80099be:	bf04      	itt	eq
 80099c0:	1809      	addeq	r1, r1, r0
 80099c2:	6021      	streq	r1, [r4, #0]
 80099c4:	6054      	str	r4, [r2, #4]
 80099c6:	e7ca      	b.n	800995e <_free_r+0x22>
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
 80099ca:	bf00      	nop
 80099cc:	20000594 	.word	0x20000594

080099d0 <__ssputs_r>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	688e      	ldr	r6, [r1, #8]
 80099d6:	461f      	mov	r7, r3
 80099d8:	42be      	cmp	r6, r7
 80099da:	680b      	ldr	r3, [r1, #0]
 80099dc:	4682      	mov	sl, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	4690      	mov	r8, r2
 80099e2:	d82d      	bhi.n	8009a40 <__ssputs_r+0x70>
 80099e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099ec:	d026      	beq.n	8009a3c <__ssputs_r+0x6c>
 80099ee:	6965      	ldr	r5, [r4, #20]
 80099f0:	6909      	ldr	r1, [r1, #16]
 80099f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099f6:	eba3 0901 	sub.w	r9, r3, r1
 80099fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099fe:	1c7b      	adds	r3, r7, #1
 8009a00:	444b      	add	r3, r9
 8009a02:	106d      	asrs	r5, r5, #1
 8009a04:	429d      	cmp	r5, r3
 8009a06:	bf38      	it	cc
 8009a08:	461d      	movcc	r5, r3
 8009a0a:	0553      	lsls	r3, r2, #21
 8009a0c:	d527      	bpl.n	8009a5e <__ssputs_r+0x8e>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7ff fc66 	bl	80092e0 <_malloc_r>
 8009a14:	4606      	mov	r6, r0
 8009a16:	b360      	cbz	r0, 8009a72 <__ssputs_r+0xa2>
 8009a18:	6921      	ldr	r1, [r4, #16]
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	f7ff ff7f 	bl	800991e <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	444e      	add	r6, r9
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	6026      	str	r6, [r4, #0]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	463e      	mov	r6, r7
 8009a3c:	42be      	cmp	r6, r7
 8009a3e:	d900      	bls.n	8009a42 <__ssputs_r+0x72>
 8009a40:	463e      	mov	r6, r7
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	4632      	mov	r2, r6
 8009a46:	4641      	mov	r1, r8
 8009a48:	f000 fd8a 	bl	800a560 <memmove>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	1b9b      	subs	r3, r3, r6
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4433      	add	r3, r6
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5e:	462a      	mov	r2, r5
 8009a60:	f000 fdba 	bl	800a5d8 <_realloc_r>
 8009a64:	4606      	mov	r6, r0
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d1e0      	bne.n	8009a2c <__ssputs_r+0x5c>
 8009a6a:	6921      	ldr	r1, [r4, #16]
 8009a6c:	4650      	mov	r0, sl
 8009a6e:	f7ff ff65 	bl	800993c <_free_r>
 8009a72:	230c      	movs	r3, #12
 8009a74:	f8ca 3000 	str.w	r3, [sl]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e7e9      	b.n	8009a5a <__ssputs_r+0x8a>
	...

08009a88 <_svfiprintf_r>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	4698      	mov	r8, r3
 8009a8e:	898b      	ldrh	r3, [r1, #12]
 8009a90:	061b      	lsls	r3, r3, #24
 8009a92:	b09d      	sub	sp, #116	@ 0x74
 8009a94:	4607      	mov	r7, r0
 8009a96:	460d      	mov	r5, r1
 8009a98:	4614      	mov	r4, r2
 8009a9a:	d510      	bpl.n	8009abe <_svfiprintf_r+0x36>
 8009a9c:	690b      	ldr	r3, [r1, #16]
 8009a9e:	b973      	cbnz	r3, 8009abe <_svfiprintf_r+0x36>
 8009aa0:	2140      	movs	r1, #64	@ 0x40
 8009aa2:	f7ff fc1d 	bl	80092e0 <_malloc_r>
 8009aa6:	6028      	str	r0, [r5, #0]
 8009aa8:	6128      	str	r0, [r5, #16]
 8009aaa:	b930      	cbnz	r0, 8009aba <_svfiprintf_r+0x32>
 8009aac:	230c      	movs	r3, #12
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	b01d      	add	sp, #116	@ 0x74
 8009ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aba:	2340      	movs	r3, #64	@ 0x40
 8009abc:	616b      	str	r3, [r5, #20]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac2:	2320      	movs	r3, #32
 8009ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009acc:	2330      	movs	r3, #48	@ 0x30
 8009ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c6c <_svfiprintf_r+0x1e4>
 8009ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ad6:	f04f 0901 	mov.w	r9, #1
 8009ada:	4623      	mov	r3, r4
 8009adc:	469a      	mov	sl, r3
 8009ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae2:	b10a      	cbz	r2, 8009ae8 <_svfiprintf_r+0x60>
 8009ae4:	2a25      	cmp	r2, #37	@ 0x25
 8009ae6:	d1f9      	bne.n	8009adc <_svfiprintf_r+0x54>
 8009ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8009aec:	d00b      	beq.n	8009b06 <_svfiprintf_r+0x7e>
 8009aee:	465b      	mov	r3, fp
 8009af0:	4622      	mov	r2, r4
 8009af2:	4629      	mov	r1, r5
 8009af4:	4638      	mov	r0, r7
 8009af6:	f7ff ff6b 	bl	80099d0 <__ssputs_r>
 8009afa:	3001      	adds	r0, #1
 8009afc:	f000 80a7 	beq.w	8009c4e <_svfiprintf_r+0x1c6>
 8009b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b02:	445a      	add	r2, fp
 8009b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b06:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 809f 	beq.w	8009c4e <_svfiprintf_r+0x1c6>
 8009b10:	2300      	movs	r3, #0
 8009b12:	f04f 32ff 	mov.w	r2, #4294967295
 8009b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b1a:	f10a 0a01 	add.w	sl, sl, #1
 8009b1e:	9304      	str	r3, [sp, #16]
 8009b20:	9307      	str	r3, [sp, #28]
 8009b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b28:	4654      	mov	r4, sl
 8009b2a:	2205      	movs	r2, #5
 8009b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b30:	484e      	ldr	r0, [pc, #312]	@ (8009c6c <_svfiprintf_r+0x1e4>)
 8009b32:	f7f6 fb4d 	bl	80001d0 <memchr>
 8009b36:	9a04      	ldr	r2, [sp, #16]
 8009b38:	b9d8      	cbnz	r0, 8009b72 <_svfiprintf_r+0xea>
 8009b3a:	06d0      	lsls	r0, r2, #27
 8009b3c:	bf44      	itt	mi
 8009b3e:	2320      	movmi	r3, #32
 8009b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b44:	0711      	lsls	r1, r2, #28
 8009b46:	bf44      	itt	mi
 8009b48:	232b      	movmi	r3, #43	@ 0x2b
 8009b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b54:	d015      	beq.n	8009b82 <_svfiprintf_r+0xfa>
 8009b56:	9a07      	ldr	r2, [sp, #28]
 8009b58:	4654      	mov	r4, sl
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	f04f 0c0a 	mov.w	ip, #10
 8009b60:	4621      	mov	r1, r4
 8009b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b66:	3b30      	subs	r3, #48	@ 0x30
 8009b68:	2b09      	cmp	r3, #9
 8009b6a:	d94b      	bls.n	8009c04 <_svfiprintf_r+0x17c>
 8009b6c:	b1b0      	cbz	r0, 8009b9c <_svfiprintf_r+0x114>
 8009b6e:	9207      	str	r2, [sp, #28]
 8009b70:	e014      	b.n	8009b9c <_svfiprintf_r+0x114>
 8009b72:	eba0 0308 	sub.w	r3, r0, r8
 8009b76:	fa09 f303 	lsl.w	r3, r9, r3
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	46a2      	mov	sl, r4
 8009b80:	e7d2      	b.n	8009b28 <_svfiprintf_r+0xa0>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	1d19      	adds	r1, r3, #4
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	9103      	str	r1, [sp, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfbb      	ittet	lt
 8009b8e:	425b      	neglt	r3, r3
 8009b90:	f042 0202 	orrlt.w	r2, r2, #2
 8009b94:	9307      	strge	r3, [sp, #28]
 8009b96:	9307      	strlt	r3, [sp, #28]
 8009b98:	bfb8      	it	lt
 8009b9a:	9204      	strlt	r2, [sp, #16]
 8009b9c:	7823      	ldrb	r3, [r4, #0]
 8009b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ba0:	d10a      	bne.n	8009bb8 <_svfiprintf_r+0x130>
 8009ba2:	7863      	ldrb	r3, [r4, #1]
 8009ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba6:	d132      	bne.n	8009c0e <_svfiprintf_r+0x186>
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	9203      	str	r2, [sp, #12]
 8009bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bb4:	3402      	adds	r4, #2
 8009bb6:	9305      	str	r3, [sp, #20]
 8009bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c7c <_svfiprintf_r+0x1f4>
 8009bbc:	7821      	ldrb	r1, [r4, #0]
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	f7f6 fb05 	bl	80001d0 <memchr>
 8009bc6:	b138      	cbz	r0, 8009bd8 <_svfiprintf_r+0x150>
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	eba0 000a 	sub.w	r0, r0, sl
 8009bce:	2240      	movs	r2, #64	@ 0x40
 8009bd0:	4082      	lsls	r2, r0
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	3401      	adds	r4, #1
 8009bd6:	9304      	str	r3, [sp, #16]
 8009bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bdc:	4824      	ldr	r0, [pc, #144]	@ (8009c70 <_svfiprintf_r+0x1e8>)
 8009bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009be2:	2206      	movs	r2, #6
 8009be4:	f7f6 faf4 	bl	80001d0 <memchr>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d036      	beq.n	8009c5a <_svfiprintf_r+0x1d2>
 8009bec:	4b21      	ldr	r3, [pc, #132]	@ (8009c74 <_svfiprintf_r+0x1ec>)
 8009bee:	bb1b      	cbnz	r3, 8009c38 <_svfiprintf_r+0x1b0>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	3307      	adds	r3, #7
 8009bf4:	f023 0307 	bic.w	r3, r3, #7
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfe:	4433      	add	r3, r6
 8009c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c02:	e76a      	b.n	8009ada <_svfiprintf_r+0x52>
 8009c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c08:	460c      	mov	r4, r1
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e7a8      	b.n	8009b60 <_svfiprintf_r+0xd8>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	3401      	adds	r4, #1
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	4619      	mov	r1, r3
 8009c16:	f04f 0c0a 	mov.w	ip, #10
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c20:	3a30      	subs	r2, #48	@ 0x30
 8009c22:	2a09      	cmp	r2, #9
 8009c24:	d903      	bls.n	8009c2e <_svfiprintf_r+0x1a6>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0c6      	beq.n	8009bb8 <_svfiprintf_r+0x130>
 8009c2a:	9105      	str	r1, [sp, #20]
 8009c2c:	e7c4      	b.n	8009bb8 <_svfiprintf_r+0x130>
 8009c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c32:	4604      	mov	r4, r0
 8009c34:	2301      	movs	r3, #1
 8009c36:	e7f0      	b.n	8009c1a <_svfiprintf_r+0x192>
 8009c38:	ab03      	add	r3, sp, #12
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c78 <_svfiprintf_r+0x1f0>)
 8009c40:	a904      	add	r1, sp, #16
 8009c42:	4638      	mov	r0, r7
 8009c44:	f3af 8000 	nop.w
 8009c48:	1c42      	adds	r2, r0, #1
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	d1d6      	bne.n	8009bfc <_svfiprintf_r+0x174>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	065b      	lsls	r3, r3, #25
 8009c52:	f53f af2d 	bmi.w	8009ab0 <_svfiprintf_r+0x28>
 8009c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c58:	e72c      	b.n	8009ab4 <_svfiprintf_r+0x2c>
 8009c5a:	ab03      	add	r3, sp, #12
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	462a      	mov	r2, r5
 8009c60:	4b05      	ldr	r3, [pc, #20]	@ (8009c78 <_svfiprintf_r+0x1f0>)
 8009c62:	a904      	add	r1, sp, #16
 8009c64:	4638      	mov	r0, r7
 8009c66:	f000 f9bb 	bl	8009fe0 <_printf_i>
 8009c6a:	e7ed      	b.n	8009c48 <_svfiprintf_r+0x1c0>
 8009c6c:	0800aae4 	.word	0x0800aae4
 8009c70:	0800aaee 	.word	0x0800aaee
 8009c74:	00000000 	.word	0x00000000
 8009c78:	080099d1 	.word	0x080099d1
 8009c7c:	0800aaea 	.word	0x0800aaea

08009c80 <__sfputc_r>:
 8009c80:	6893      	ldr	r3, [r2, #8]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	b410      	push	{r4}
 8009c88:	6093      	str	r3, [r2, #8]
 8009c8a:	da08      	bge.n	8009c9e <__sfputc_r+0x1e>
 8009c8c:	6994      	ldr	r4, [r2, #24]
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	db01      	blt.n	8009c96 <__sfputc_r+0x16>
 8009c92:	290a      	cmp	r1, #10
 8009c94:	d103      	bne.n	8009c9e <__sfputc_r+0x1e>
 8009c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9a:	f000 bbcd 	b.w	800a438 <__swbuf_r>
 8009c9e:	6813      	ldr	r3, [r2, #0]
 8009ca0:	1c58      	adds	r0, r3, #1
 8009ca2:	6010      	str	r0, [r2, #0]
 8009ca4:	7019      	strb	r1, [r3, #0]
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <__sfputs_r>:
 8009cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	18d5      	adds	r5, r2, r3
 8009cb8:	42ac      	cmp	r4, r5
 8009cba:	d101      	bne.n	8009cc0 <__sfputs_r+0x12>
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e007      	b.n	8009cd0 <__sfputs_r+0x22>
 8009cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc4:	463a      	mov	r2, r7
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7ff ffda 	bl	8009c80 <__sfputc_r>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d1f3      	bne.n	8009cb8 <__sfputs_r+0xa>
 8009cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cd4 <_vfiprintf_r>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	460d      	mov	r5, r1
 8009cda:	b09d      	sub	sp, #116	@ 0x74
 8009cdc:	4614      	mov	r4, r2
 8009cde:	4698      	mov	r8, r3
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	b118      	cbz	r0, 8009cec <_vfiprintf_r+0x18>
 8009ce4:	6a03      	ldr	r3, [r0, #32]
 8009ce6:	b90b      	cbnz	r3, 8009cec <_vfiprintf_r+0x18>
 8009ce8:	f7ff fc12 	bl	8009510 <__sinit>
 8009cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cee:	07d9      	lsls	r1, r3, #31
 8009cf0:	d405      	bmi.n	8009cfe <_vfiprintf_r+0x2a>
 8009cf2:	89ab      	ldrh	r3, [r5, #12]
 8009cf4:	059a      	lsls	r2, r3, #22
 8009cf6:	d402      	bmi.n	8009cfe <_vfiprintf_r+0x2a>
 8009cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cfa:	f7ff fe0e 	bl	800991a <__retarget_lock_acquire_recursive>
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	071b      	lsls	r3, r3, #28
 8009d02:	d501      	bpl.n	8009d08 <_vfiprintf_r+0x34>
 8009d04:	692b      	ldr	r3, [r5, #16]
 8009d06:	b99b      	cbnz	r3, 8009d30 <_vfiprintf_r+0x5c>
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f000 fbd2 	bl	800a4b4 <__swsetup_r>
 8009d10:	b170      	cbz	r0, 8009d30 <_vfiprintf_r+0x5c>
 8009d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d14:	07dc      	lsls	r4, r3, #31
 8009d16:	d504      	bpl.n	8009d22 <_vfiprintf_r+0x4e>
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	b01d      	add	sp, #116	@ 0x74
 8009d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d22:	89ab      	ldrh	r3, [r5, #12]
 8009d24:	0598      	lsls	r0, r3, #22
 8009d26:	d4f7      	bmi.n	8009d18 <_vfiprintf_r+0x44>
 8009d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d2a:	f7ff fdf7 	bl	800991c <__retarget_lock_release_recursive>
 8009d2e:	e7f3      	b.n	8009d18 <_vfiprintf_r+0x44>
 8009d30:	2300      	movs	r3, #0
 8009d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d34:	2320      	movs	r3, #32
 8009d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3e:	2330      	movs	r3, #48	@ 0x30
 8009d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ef0 <_vfiprintf_r+0x21c>
 8009d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d48:	f04f 0901 	mov.w	r9, #1
 8009d4c:	4623      	mov	r3, r4
 8009d4e:	469a      	mov	sl, r3
 8009d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d54:	b10a      	cbz	r2, 8009d5a <_vfiprintf_r+0x86>
 8009d56:	2a25      	cmp	r2, #37	@ 0x25
 8009d58:	d1f9      	bne.n	8009d4e <_vfiprintf_r+0x7a>
 8009d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d5e:	d00b      	beq.n	8009d78 <_vfiprintf_r+0xa4>
 8009d60:	465b      	mov	r3, fp
 8009d62:	4622      	mov	r2, r4
 8009d64:	4629      	mov	r1, r5
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7ff ffa1 	bl	8009cae <__sfputs_r>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f000 80a7 	beq.w	8009ec0 <_vfiprintf_r+0x1ec>
 8009d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d74:	445a      	add	r2, fp
 8009d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d78:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 809f 	beq.w	8009ec0 <_vfiprintf_r+0x1ec>
 8009d82:	2300      	movs	r3, #0
 8009d84:	f04f 32ff 	mov.w	r2, #4294967295
 8009d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d8c:	f10a 0a01 	add.w	sl, sl, #1
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d9a:	4654      	mov	r4, sl
 8009d9c:	2205      	movs	r2, #5
 8009d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da2:	4853      	ldr	r0, [pc, #332]	@ (8009ef0 <_vfiprintf_r+0x21c>)
 8009da4:	f7f6 fa14 	bl	80001d0 <memchr>
 8009da8:	9a04      	ldr	r2, [sp, #16]
 8009daa:	b9d8      	cbnz	r0, 8009de4 <_vfiprintf_r+0x110>
 8009dac:	06d1      	lsls	r1, r2, #27
 8009dae:	bf44      	itt	mi
 8009db0:	2320      	movmi	r3, #32
 8009db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009db6:	0713      	lsls	r3, r2, #28
 8009db8:	bf44      	itt	mi
 8009dba:	232b      	movmi	r3, #43	@ 0x2b
 8009dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dc6:	d015      	beq.n	8009df4 <_vfiprintf_r+0x120>
 8009dc8:	9a07      	ldr	r2, [sp, #28]
 8009dca:	4654      	mov	r4, sl
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f04f 0c0a 	mov.w	ip, #10
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd8:	3b30      	subs	r3, #48	@ 0x30
 8009dda:	2b09      	cmp	r3, #9
 8009ddc:	d94b      	bls.n	8009e76 <_vfiprintf_r+0x1a2>
 8009dde:	b1b0      	cbz	r0, 8009e0e <_vfiprintf_r+0x13a>
 8009de0:	9207      	str	r2, [sp, #28]
 8009de2:	e014      	b.n	8009e0e <_vfiprintf_r+0x13a>
 8009de4:	eba0 0308 	sub.w	r3, r0, r8
 8009de8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	9304      	str	r3, [sp, #16]
 8009df0:	46a2      	mov	sl, r4
 8009df2:	e7d2      	b.n	8009d9a <_vfiprintf_r+0xc6>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	1d19      	adds	r1, r3, #4
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	9103      	str	r1, [sp, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	bfbb      	ittet	lt
 8009e00:	425b      	neglt	r3, r3
 8009e02:	f042 0202 	orrlt.w	r2, r2, #2
 8009e06:	9307      	strge	r3, [sp, #28]
 8009e08:	9307      	strlt	r3, [sp, #28]
 8009e0a:	bfb8      	it	lt
 8009e0c:	9204      	strlt	r2, [sp, #16]
 8009e0e:	7823      	ldrb	r3, [r4, #0]
 8009e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e12:	d10a      	bne.n	8009e2a <_vfiprintf_r+0x156>
 8009e14:	7863      	ldrb	r3, [r4, #1]
 8009e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e18:	d132      	bne.n	8009e80 <_vfiprintf_r+0x1ac>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	1d1a      	adds	r2, r3, #4
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	9203      	str	r2, [sp, #12]
 8009e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e26:	3402      	adds	r4, #2
 8009e28:	9305      	str	r3, [sp, #20]
 8009e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f00 <_vfiprintf_r+0x22c>
 8009e2e:	7821      	ldrb	r1, [r4, #0]
 8009e30:	2203      	movs	r2, #3
 8009e32:	4650      	mov	r0, sl
 8009e34:	f7f6 f9cc 	bl	80001d0 <memchr>
 8009e38:	b138      	cbz	r0, 8009e4a <_vfiprintf_r+0x176>
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	eba0 000a 	sub.w	r0, r0, sl
 8009e40:	2240      	movs	r2, #64	@ 0x40
 8009e42:	4082      	lsls	r2, r0
 8009e44:	4313      	orrs	r3, r2
 8009e46:	3401      	adds	r4, #1
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4e:	4829      	ldr	r0, [pc, #164]	@ (8009ef4 <_vfiprintf_r+0x220>)
 8009e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e54:	2206      	movs	r2, #6
 8009e56:	f7f6 f9bb 	bl	80001d0 <memchr>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d03f      	beq.n	8009ede <_vfiprintf_r+0x20a>
 8009e5e:	4b26      	ldr	r3, [pc, #152]	@ (8009ef8 <_vfiprintf_r+0x224>)
 8009e60:	bb1b      	cbnz	r3, 8009eaa <_vfiprintf_r+0x1d6>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	3307      	adds	r3, #7
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	9303      	str	r3, [sp, #12]
 8009e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e70:	443b      	add	r3, r7
 8009e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e74:	e76a      	b.n	8009d4c <_vfiprintf_r+0x78>
 8009e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	e7a8      	b.n	8009dd2 <_vfiprintf_r+0xfe>
 8009e80:	2300      	movs	r3, #0
 8009e82:	3401      	adds	r4, #1
 8009e84:	9305      	str	r3, [sp, #20]
 8009e86:	4619      	mov	r1, r3
 8009e88:	f04f 0c0a 	mov.w	ip, #10
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e92:	3a30      	subs	r2, #48	@ 0x30
 8009e94:	2a09      	cmp	r2, #9
 8009e96:	d903      	bls.n	8009ea0 <_vfiprintf_r+0x1cc>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0c6      	beq.n	8009e2a <_vfiprintf_r+0x156>
 8009e9c:	9105      	str	r1, [sp, #20]
 8009e9e:	e7c4      	b.n	8009e2a <_vfiprintf_r+0x156>
 8009ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e7f0      	b.n	8009e8c <_vfiprintf_r+0x1b8>
 8009eaa:	ab03      	add	r3, sp, #12
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4b12      	ldr	r3, [pc, #72]	@ (8009efc <_vfiprintf_r+0x228>)
 8009eb2:	a904      	add	r1, sp, #16
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f3af 8000 	nop.w
 8009eba:	4607      	mov	r7, r0
 8009ebc:	1c78      	adds	r0, r7, #1
 8009ebe:	d1d6      	bne.n	8009e6e <_vfiprintf_r+0x19a>
 8009ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ec2:	07d9      	lsls	r1, r3, #31
 8009ec4:	d405      	bmi.n	8009ed2 <_vfiprintf_r+0x1fe>
 8009ec6:	89ab      	ldrh	r3, [r5, #12]
 8009ec8:	059a      	lsls	r2, r3, #22
 8009eca:	d402      	bmi.n	8009ed2 <_vfiprintf_r+0x1fe>
 8009ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ece:	f7ff fd25 	bl	800991c <__retarget_lock_release_recursive>
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	065b      	lsls	r3, r3, #25
 8009ed6:	f53f af1f 	bmi.w	8009d18 <_vfiprintf_r+0x44>
 8009eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009edc:	e71e      	b.n	8009d1c <_vfiprintf_r+0x48>
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4b05      	ldr	r3, [pc, #20]	@ (8009efc <_vfiprintf_r+0x228>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f000 f879 	bl	8009fe0 <_printf_i>
 8009eee:	e7e4      	b.n	8009eba <_vfiprintf_r+0x1e6>
 8009ef0:	0800aae4 	.word	0x0800aae4
 8009ef4:	0800aaee 	.word	0x0800aaee
 8009ef8:	00000000 	.word	0x00000000
 8009efc:	08009caf 	.word	0x08009caf
 8009f00:	0800aaea 	.word	0x0800aaea

08009f04 <_printf_common>:
 8009f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f08:	4616      	mov	r6, r2
 8009f0a:	4698      	mov	r8, r3
 8009f0c:	688a      	ldr	r2, [r1, #8]
 8009f0e:	690b      	ldr	r3, [r1, #16]
 8009f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f14:	4293      	cmp	r3, r2
 8009f16:	bfb8      	it	lt
 8009f18:	4613      	movlt	r3, r2
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f20:	4607      	mov	r7, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	b10a      	cbz	r2, 8009f2a <_printf_common+0x26>
 8009f26:	3301      	adds	r3, #1
 8009f28:	6033      	str	r3, [r6, #0]
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	0699      	lsls	r1, r3, #26
 8009f2e:	bf42      	ittt	mi
 8009f30:	6833      	ldrmi	r3, [r6, #0]
 8009f32:	3302      	addmi	r3, #2
 8009f34:	6033      	strmi	r3, [r6, #0]
 8009f36:	6825      	ldr	r5, [r4, #0]
 8009f38:	f015 0506 	ands.w	r5, r5, #6
 8009f3c:	d106      	bne.n	8009f4c <_printf_common+0x48>
 8009f3e:	f104 0a19 	add.w	sl, r4, #25
 8009f42:	68e3      	ldr	r3, [r4, #12]
 8009f44:	6832      	ldr	r2, [r6, #0]
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	42ab      	cmp	r3, r5
 8009f4a:	dc26      	bgt.n	8009f9a <_printf_common+0x96>
 8009f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f50:	6822      	ldr	r2, [r4, #0]
 8009f52:	3b00      	subs	r3, #0
 8009f54:	bf18      	it	ne
 8009f56:	2301      	movne	r3, #1
 8009f58:	0692      	lsls	r2, r2, #26
 8009f5a:	d42b      	bmi.n	8009fb4 <_printf_common+0xb0>
 8009f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f60:	4641      	mov	r1, r8
 8009f62:	4638      	mov	r0, r7
 8009f64:	47c8      	blx	r9
 8009f66:	3001      	adds	r0, #1
 8009f68:	d01e      	beq.n	8009fa8 <_printf_common+0xa4>
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	6922      	ldr	r2, [r4, #16]
 8009f6e:	f003 0306 	and.w	r3, r3, #6
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	bf02      	ittt	eq
 8009f76:	68e5      	ldreq	r5, [r4, #12]
 8009f78:	6833      	ldreq	r3, [r6, #0]
 8009f7a:	1aed      	subeq	r5, r5, r3
 8009f7c:	68a3      	ldr	r3, [r4, #8]
 8009f7e:	bf0c      	ite	eq
 8009f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f84:	2500      	movne	r5, #0
 8009f86:	4293      	cmp	r3, r2
 8009f88:	bfc4      	itt	gt
 8009f8a:	1a9b      	subgt	r3, r3, r2
 8009f8c:	18ed      	addgt	r5, r5, r3
 8009f8e:	2600      	movs	r6, #0
 8009f90:	341a      	adds	r4, #26
 8009f92:	42b5      	cmp	r5, r6
 8009f94:	d11a      	bne.n	8009fcc <_printf_common+0xc8>
 8009f96:	2000      	movs	r0, #0
 8009f98:	e008      	b.n	8009fac <_printf_common+0xa8>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	47c8      	blx	r9
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d103      	bne.n	8009fb0 <_printf_common+0xac>
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	e7c6      	b.n	8009f42 <_printf_common+0x3e>
 8009fb4:	18e1      	adds	r1, r4, r3
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	2030      	movs	r0, #48	@ 0x30
 8009fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fbe:	4422      	add	r2, r4
 8009fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fc8:	3302      	adds	r3, #2
 8009fca:	e7c7      	b.n	8009f5c <_printf_common+0x58>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	47c8      	blx	r9
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d0e6      	beq.n	8009fa8 <_printf_common+0xa4>
 8009fda:	3601      	adds	r6, #1
 8009fdc:	e7d9      	b.n	8009f92 <_printf_common+0x8e>
	...

08009fe0 <_printf_i>:
 8009fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	7e0f      	ldrb	r7, [r1, #24]
 8009fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fe8:	2f78      	cmp	r7, #120	@ 0x78
 8009fea:	4691      	mov	r9, r2
 8009fec:	4680      	mov	r8, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	469a      	mov	sl, r3
 8009ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ff6:	d807      	bhi.n	800a008 <_printf_i+0x28>
 8009ff8:	2f62      	cmp	r7, #98	@ 0x62
 8009ffa:	d80a      	bhi.n	800a012 <_printf_i+0x32>
 8009ffc:	2f00      	cmp	r7, #0
 8009ffe:	f000 80d1 	beq.w	800a1a4 <_printf_i+0x1c4>
 800a002:	2f58      	cmp	r7, #88	@ 0x58
 800a004:	f000 80b8 	beq.w	800a178 <_printf_i+0x198>
 800a008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a00c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a010:	e03a      	b.n	800a088 <_printf_i+0xa8>
 800a012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a016:	2b15      	cmp	r3, #21
 800a018:	d8f6      	bhi.n	800a008 <_printf_i+0x28>
 800a01a:	a101      	add	r1, pc, #4	@ (adr r1, 800a020 <_printf_i+0x40>)
 800a01c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a020:	0800a079 	.word	0x0800a079
 800a024:	0800a08d 	.word	0x0800a08d
 800a028:	0800a009 	.word	0x0800a009
 800a02c:	0800a009 	.word	0x0800a009
 800a030:	0800a009 	.word	0x0800a009
 800a034:	0800a009 	.word	0x0800a009
 800a038:	0800a08d 	.word	0x0800a08d
 800a03c:	0800a009 	.word	0x0800a009
 800a040:	0800a009 	.word	0x0800a009
 800a044:	0800a009 	.word	0x0800a009
 800a048:	0800a009 	.word	0x0800a009
 800a04c:	0800a18b 	.word	0x0800a18b
 800a050:	0800a0b7 	.word	0x0800a0b7
 800a054:	0800a145 	.word	0x0800a145
 800a058:	0800a009 	.word	0x0800a009
 800a05c:	0800a009 	.word	0x0800a009
 800a060:	0800a1ad 	.word	0x0800a1ad
 800a064:	0800a009 	.word	0x0800a009
 800a068:	0800a0b7 	.word	0x0800a0b7
 800a06c:	0800a009 	.word	0x0800a009
 800a070:	0800a009 	.word	0x0800a009
 800a074:	0800a14d 	.word	0x0800a14d
 800a078:	6833      	ldr	r3, [r6, #0]
 800a07a:	1d1a      	adds	r2, r3, #4
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6032      	str	r2, [r6, #0]
 800a080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a088:	2301      	movs	r3, #1
 800a08a:	e09c      	b.n	800a1c6 <_printf_i+0x1e6>
 800a08c:	6833      	ldr	r3, [r6, #0]
 800a08e:	6820      	ldr	r0, [r4, #0]
 800a090:	1d19      	adds	r1, r3, #4
 800a092:	6031      	str	r1, [r6, #0]
 800a094:	0606      	lsls	r6, r0, #24
 800a096:	d501      	bpl.n	800a09c <_printf_i+0xbc>
 800a098:	681d      	ldr	r5, [r3, #0]
 800a09a:	e003      	b.n	800a0a4 <_printf_i+0xc4>
 800a09c:	0645      	lsls	r5, r0, #25
 800a09e:	d5fb      	bpl.n	800a098 <_printf_i+0xb8>
 800a0a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0a4:	2d00      	cmp	r5, #0
 800a0a6:	da03      	bge.n	800a0b0 <_printf_i+0xd0>
 800a0a8:	232d      	movs	r3, #45	@ 0x2d
 800a0aa:	426d      	negs	r5, r5
 800a0ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0b0:	4858      	ldr	r0, [pc, #352]	@ (800a214 <_printf_i+0x234>)
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	e011      	b.n	800a0da <_printf_i+0xfa>
 800a0b6:	6821      	ldr	r1, [r4, #0]
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	0608      	lsls	r0, r1, #24
 800a0bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0c0:	d402      	bmi.n	800a0c8 <_printf_i+0xe8>
 800a0c2:	0649      	lsls	r1, r1, #25
 800a0c4:	bf48      	it	mi
 800a0c6:	b2ad      	uxthmi	r5, r5
 800a0c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0ca:	4852      	ldr	r0, [pc, #328]	@ (800a214 <_printf_i+0x234>)
 800a0cc:	6033      	str	r3, [r6, #0]
 800a0ce:	bf14      	ite	ne
 800a0d0:	230a      	movne	r3, #10
 800a0d2:	2308      	moveq	r3, #8
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0da:	6866      	ldr	r6, [r4, #4]
 800a0dc:	60a6      	str	r6, [r4, #8]
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	db05      	blt.n	800a0ee <_printf_i+0x10e>
 800a0e2:	6821      	ldr	r1, [r4, #0]
 800a0e4:	432e      	orrs	r6, r5
 800a0e6:	f021 0104 	bic.w	r1, r1, #4
 800a0ea:	6021      	str	r1, [r4, #0]
 800a0ec:	d04b      	beq.n	800a186 <_printf_i+0x1a6>
 800a0ee:	4616      	mov	r6, r2
 800a0f0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0f4:	fb03 5711 	mls	r7, r3, r1, r5
 800a0f8:	5dc7      	ldrb	r7, [r0, r7]
 800a0fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0fe:	462f      	mov	r7, r5
 800a100:	42bb      	cmp	r3, r7
 800a102:	460d      	mov	r5, r1
 800a104:	d9f4      	bls.n	800a0f0 <_printf_i+0x110>
 800a106:	2b08      	cmp	r3, #8
 800a108:	d10b      	bne.n	800a122 <_printf_i+0x142>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	07df      	lsls	r7, r3, #31
 800a10e:	d508      	bpl.n	800a122 <_printf_i+0x142>
 800a110:	6923      	ldr	r3, [r4, #16]
 800a112:	6861      	ldr	r1, [r4, #4]
 800a114:	4299      	cmp	r1, r3
 800a116:	bfde      	ittt	le
 800a118:	2330      	movle	r3, #48	@ 0x30
 800a11a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a11e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a122:	1b92      	subs	r2, r2, r6
 800a124:	6122      	str	r2, [r4, #16]
 800a126:	f8cd a000 	str.w	sl, [sp]
 800a12a:	464b      	mov	r3, r9
 800a12c:	aa03      	add	r2, sp, #12
 800a12e:	4621      	mov	r1, r4
 800a130:	4640      	mov	r0, r8
 800a132:	f7ff fee7 	bl	8009f04 <_printf_common>
 800a136:	3001      	adds	r0, #1
 800a138:	d14a      	bne.n	800a1d0 <_printf_i+0x1f0>
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	b004      	add	sp, #16
 800a140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	f043 0320 	orr.w	r3, r3, #32
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	4832      	ldr	r0, [pc, #200]	@ (800a218 <_printf_i+0x238>)
 800a14e:	2778      	movs	r7, #120	@ 0x78
 800a150:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	6831      	ldr	r1, [r6, #0]
 800a158:	061f      	lsls	r7, r3, #24
 800a15a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a15e:	d402      	bmi.n	800a166 <_printf_i+0x186>
 800a160:	065f      	lsls	r7, r3, #25
 800a162:	bf48      	it	mi
 800a164:	b2ad      	uxthmi	r5, r5
 800a166:	6031      	str	r1, [r6, #0]
 800a168:	07d9      	lsls	r1, r3, #31
 800a16a:	bf44      	itt	mi
 800a16c:	f043 0320 	orrmi.w	r3, r3, #32
 800a170:	6023      	strmi	r3, [r4, #0]
 800a172:	b11d      	cbz	r5, 800a17c <_printf_i+0x19c>
 800a174:	2310      	movs	r3, #16
 800a176:	e7ad      	b.n	800a0d4 <_printf_i+0xf4>
 800a178:	4826      	ldr	r0, [pc, #152]	@ (800a214 <_printf_i+0x234>)
 800a17a:	e7e9      	b.n	800a150 <_printf_i+0x170>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	f023 0320 	bic.w	r3, r3, #32
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	e7f6      	b.n	800a174 <_printf_i+0x194>
 800a186:	4616      	mov	r6, r2
 800a188:	e7bd      	b.n	800a106 <_printf_i+0x126>
 800a18a:	6833      	ldr	r3, [r6, #0]
 800a18c:	6825      	ldr	r5, [r4, #0]
 800a18e:	6961      	ldr	r1, [r4, #20]
 800a190:	1d18      	adds	r0, r3, #4
 800a192:	6030      	str	r0, [r6, #0]
 800a194:	062e      	lsls	r6, r5, #24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	d501      	bpl.n	800a19e <_printf_i+0x1be>
 800a19a:	6019      	str	r1, [r3, #0]
 800a19c:	e002      	b.n	800a1a4 <_printf_i+0x1c4>
 800a19e:	0668      	lsls	r0, r5, #25
 800a1a0:	d5fb      	bpl.n	800a19a <_printf_i+0x1ba>
 800a1a2:	8019      	strh	r1, [r3, #0]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	e7bc      	b.n	800a126 <_printf_i+0x146>
 800a1ac:	6833      	ldr	r3, [r6, #0]
 800a1ae:	1d1a      	adds	r2, r3, #4
 800a1b0:	6032      	str	r2, [r6, #0]
 800a1b2:	681e      	ldr	r6, [r3, #0]
 800a1b4:	6862      	ldr	r2, [r4, #4]
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7f6 f809 	bl	80001d0 <memchr>
 800a1be:	b108      	cbz	r0, 800a1c4 <_printf_i+0x1e4>
 800a1c0:	1b80      	subs	r0, r0, r6
 800a1c2:	6060      	str	r0, [r4, #4]
 800a1c4:	6863      	ldr	r3, [r4, #4]
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ce:	e7aa      	b.n	800a126 <_printf_i+0x146>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	47d0      	blx	sl
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d0ad      	beq.n	800a13a <_printf_i+0x15a>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	079b      	lsls	r3, r3, #30
 800a1e2:	d413      	bmi.n	800a20c <_printf_i+0x22c>
 800a1e4:	68e0      	ldr	r0, [r4, #12]
 800a1e6:	9b03      	ldr	r3, [sp, #12]
 800a1e8:	4298      	cmp	r0, r3
 800a1ea:	bfb8      	it	lt
 800a1ec:	4618      	movlt	r0, r3
 800a1ee:	e7a6      	b.n	800a13e <_printf_i+0x15e>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	47d0      	blx	sl
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d09d      	beq.n	800a13a <_printf_i+0x15a>
 800a1fe:	3501      	adds	r5, #1
 800a200:	68e3      	ldr	r3, [r4, #12]
 800a202:	9903      	ldr	r1, [sp, #12]
 800a204:	1a5b      	subs	r3, r3, r1
 800a206:	42ab      	cmp	r3, r5
 800a208:	dcf2      	bgt.n	800a1f0 <_printf_i+0x210>
 800a20a:	e7eb      	b.n	800a1e4 <_printf_i+0x204>
 800a20c:	2500      	movs	r5, #0
 800a20e:	f104 0619 	add.w	r6, r4, #25
 800a212:	e7f5      	b.n	800a200 <_printf_i+0x220>
 800a214:	0800aaf5 	.word	0x0800aaf5
 800a218:	0800ab06 	.word	0x0800ab06

0800a21c <__sflush_r>:
 800a21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a224:	0716      	lsls	r6, r2, #28
 800a226:	4605      	mov	r5, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	d454      	bmi.n	800a2d6 <__sflush_r+0xba>
 800a22c:	684b      	ldr	r3, [r1, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dc02      	bgt.n	800a238 <__sflush_r+0x1c>
 800a232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	dd48      	ble.n	800a2ca <__sflush_r+0xae>
 800a238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	d045      	beq.n	800a2ca <__sflush_r+0xae>
 800a23e:	2300      	movs	r3, #0
 800a240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a244:	682f      	ldr	r7, [r5, #0]
 800a246:	6a21      	ldr	r1, [r4, #32]
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	d030      	beq.n	800a2ae <__sflush_r+0x92>
 800a24c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	0759      	lsls	r1, r3, #29
 800a252:	d505      	bpl.n	800a260 <__sflush_r+0x44>
 800a254:	6863      	ldr	r3, [r4, #4]
 800a256:	1ad2      	subs	r2, r2, r3
 800a258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a25a:	b10b      	cbz	r3, 800a260 <__sflush_r+0x44>
 800a25c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a25e:	1ad2      	subs	r2, r2, r3
 800a260:	2300      	movs	r3, #0
 800a262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a264:	6a21      	ldr	r1, [r4, #32]
 800a266:	4628      	mov	r0, r5
 800a268:	47b0      	blx	r6
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	d106      	bne.n	800a27e <__sflush_r+0x62>
 800a270:	6829      	ldr	r1, [r5, #0]
 800a272:	291d      	cmp	r1, #29
 800a274:	d82b      	bhi.n	800a2ce <__sflush_r+0xb2>
 800a276:	4a2a      	ldr	r2, [pc, #168]	@ (800a320 <__sflush_r+0x104>)
 800a278:	40ca      	lsrs	r2, r1
 800a27a:	07d6      	lsls	r6, r2, #31
 800a27c:	d527      	bpl.n	800a2ce <__sflush_r+0xb2>
 800a27e:	2200      	movs	r2, #0
 800a280:	6062      	str	r2, [r4, #4]
 800a282:	04d9      	lsls	r1, r3, #19
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	6022      	str	r2, [r4, #0]
 800a288:	d504      	bpl.n	800a294 <__sflush_r+0x78>
 800a28a:	1c42      	adds	r2, r0, #1
 800a28c:	d101      	bne.n	800a292 <__sflush_r+0x76>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b903      	cbnz	r3, 800a294 <__sflush_r+0x78>
 800a292:	6560      	str	r0, [r4, #84]	@ 0x54
 800a294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a296:	602f      	str	r7, [r5, #0]
 800a298:	b1b9      	cbz	r1, 800a2ca <__sflush_r+0xae>
 800a29a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	d002      	beq.n	800a2a8 <__sflush_r+0x8c>
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f7ff fb4a 	bl	800993c <_free_r>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ac:	e00d      	b.n	800a2ca <__sflush_r+0xae>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b0      	blx	r6
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	1c50      	adds	r0, r2, #1
 800a2b8:	d1c9      	bne.n	800a24e <__sflush_r+0x32>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0c6      	beq.n	800a24e <__sflush_r+0x32>
 800a2c0:	2b1d      	cmp	r3, #29
 800a2c2:	d001      	beq.n	800a2c8 <__sflush_r+0xac>
 800a2c4:	2b16      	cmp	r3, #22
 800a2c6:	d11e      	bne.n	800a306 <__sflush_r+0xea>
 800a2c8:	602f      	str	r7, [r5, #0]
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	e022      	b.n	800a314 <__sflush_r+0xf8>
 800a2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d2:	b21b      	sxth	r3, r3
 800a2d4:	e01b      	b.n	800a30e <__sflush_r+0xf2>
 800a2d6:	690f      	ldr	r7, [r1, #16]
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	d0f6      	beq.n	800a2ca <__sflush_r+0xae>
 800a2dc:	0793      	lsls	r3, r2, #30
 800a2de:	680e      	ldr	r6, [r1, #0]
 800a2e0:	bf08      	it	eq
 800a2e2:	694b      	ldreq	r3, [r1, #20]
 800a2e4:	600f      	str	r7, [r1, #0]
 800a2e6:	bf18      	it	ne
 800a2e8:	2300      	movne	r3, #0
 800a2ea:	eba6 0807 	sub.w	r8, r6, r7
 800a2ee:	608b      	str	r3, [r1, #8]
 800a2f0:	f1b8 0f00 	cmp.w	r8, #0
 800a2f4:	dde9      	ble.n	800a2ca <__sflush_r+0xae>
 800a2f6:	6a21      	ldr	r1, [r4, #32]
 800a2f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2fa:	4643      	mov	r3, r8
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b0      	blx	r6
 800a302:	2800      	cmp	r0, #0
 800a304:	dc08      	bgt.n	800a318 <__sflush_r+0xfc>
 800a306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a318:	4407      	add	r7, r0
 800a31a:	eba8 0800 	sub.w	r8, r8, r0
 800a31e:	e7e7      	b.n	800a2f0 <__sflush_r+0xd4>
 800a320:	20400001 	.word	0x20400001

0800a324 <_fflush_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b913      	cbnz	r3, 800a334 <_fflush_r+0x10>
 800a32e:	2500      	movs	r5, #0
 800a330:	4628      	mov	r0, r5
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	b118      	cbz	r0, 800a33e <_fflush_r+0x1a>
 800a336:	6a03      	ldr	r3, [r0, #32]
 800a338:	b90b      	cbnz	r3, 800a33e <_fflush_r+0x1a>
 800a33a:	f7ff f8e9 	bl	8009510 <__sinit>
 800a33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0f3      	beq.n	800a32e <_fflush_r+0xa>
 800a346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a348:	07d0      	lsls	r0, r2, #31
 800a34a:	d404      	bmi.n	800a356 <_fflush_r+0x32>
 800a34c:	0599      	lsls	r1, r3, #22
 800a34e:	d402      	bmi.n	800a356 <_fflush_r+0x32>
 800a350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a352:	f7ff fae2 	bl	800991a <__retarget_lock_acquire_recursive>
 800a356:	4628      	mov	r0, r5
 800a358:	4621      	mov	r1, r4
 800a35a:	f7ff ff5f 	bl	800a21c <__sflush_r>
 800a35e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a360:	07da      	lsls	r2, r3, #31
 800a362:	4605      	mov	r5, r0
 800a364:	d4e4      	bmi.n	800a330 <_fflush_r+0xc>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	059b      	lsls	r3, r3, #22
 800a36a:	d4e1      	bmi.n	800a330 <_fflush_r+0xc>
 800a36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a36e:	f7ff fad5 	bl	800991c <__retarget_lock_release_recursive>
 800a372:	e7dd      	b.n	800a330 <_fflush_r+0xc>

0800a374 <__swhatbuf_r>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	460c      	mov	r4, r1
 800a378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37c:	2900      	cmp	r1, #0
 800a37e:	b096      	sub	sp, #88	@ 0x58
 800a380:	4615      	mov	r5, r2
 800a382:	461e      	mov	r6, r3
 800a384:	da0d      	bge.n	800a3a2 <__swhatbuf_r+0x2e>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a38c:	f04f 0100 	mov.w	r1, #0
 800a390:	bf14      	ite	ne
 800a392:	2340      	movne	r3, #64	@ 0x40
 800a394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a398:	2000      	movs	r0, #0
 800a39a:	6031      	str	r1, [r6, #0]
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	b016      	add	sp, #88	@ 0x58
 800a3a0:	bd70      	pop	{r4, r5, r6, pc}
 800a3a2:	466a      	mov	r2, sp
 800a3a4:	f000 f8f6 	bl	800a594 <_fstat_r>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	dbec      	blt.n	800a386 <__swhatbuf_r+0x12>
 800a3ac:	9901      	ldr	r1, [sp, #4]
 800a3ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3b6:	4259      	negs	r1, r3
 800a3b8:	4159      	adcs	r1, r3
 800a3ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3be:	e7eb      	b.n	800a398 <__swhatbuf_r+0x24>

0800a3c0 <__smakebuf_r>:
 800a3c0:	898b      	ldrh	r3, [r1, #12]
 800a3c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c4:	079d      	lsls	r5, r3, #30
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	d507      	bpl.n	800a3dc <__smakebuf_r+0x1c>
 800a3cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	6163      	str	r3, [r4, #20]
 800a3d8:	b003      	add	sp, #12
 800a3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3dc:	ab01      	add	r3, sp, #4
 800a3de:	466a      	mov	r2, sp
 800a3e0:	f7ff ffc8 	bl	800a374 <__swhatbuf_r>
 800a3e4:	9f00      	ldr	r7, [sp, #0]
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7fe ff78 	bl	80092e0 <_malloc_r>
 800a3f0:	b948      	cbnz	r0, 800a406 <__smakebuf_r+0x46>
 800a3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f6:	059a      	lsls	r2, r3, #22
 800a3f8:	d4ee      	bmi.n	800a3d8 <__smakebuf_r+0x18>
 800a3fa:	f023 0303 	bic.w	r3, r3, #3
 800a3fe:	f043 0302 	orr.w	r3, r3, #2
 800a402:	81a3      	strh	r3, [r4, #12]
 800a404:	e7e2      	b.n	800a3cc <__smakebuf_r+0xc>
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	6020      	str	r0, [r4, #0]
 800a40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	9b01      	ldr	r3, [sp, #4]
 800a412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a416:	b15b      	cbz	r3, 800a430 <__smakebuf_r+0x70>
 800a418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a41c:	4630      	mov	r0, r6
 800a41e:	f000 f8cb 	bl	800a5b8 <_isatty_r>
 800a422:	b128      	cbz	r0, 800a430 <__smakebuf_r+0x70>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	431d      	orrs	r5, r3
 800a434:	81a5      	strh	r5, [r4, #12]
 800a436:	e7cf      	b.n	800a3d8 <__smakebuf_r+0x18>

0800a438 <__swbuf_r>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	460e      	mov	r6, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	4605      	mov	r5, r0
 800a440:	b118      	cbz	r0, 800a44a <__swbuf_r+0x12>
 800a442:	6a03      	ldr	r3, [r0, #32]
 800a444:	b90b      	cbnz	r3, 800a44a <__swbuf_r+0x12>
 800a446:	f7ff f863 	bl	8009510 <__sinit>
 800a44a:	69a3      	ldr	r3, [r4, #24]
 800a44c:	60a3      	str	r3, [r4, #8]
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	071a      	lsls	r2, r3, #28
 800a452:	d501      	bpl.n	800a458 <__swbuf_r+0x20>
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	b943      	cbnz	r3, 800a46a <__swbuf_r+0x32>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f82a 	bl	800a4b4 <__swsetup_r>
 800a460:	b118      	cbz	r0, 800a46a <__swbuf_r+0x32>
 800a462:	f04f 37ff 	mov.w	r7, #4294967295
 800a466:	4638      	mov	r0, r7
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	1a98      	subs	r0, r3, r2
 800a470:	6963      	ldr	r3, [r4, #20]
 800a472:	b2f6      	uxtb	r6, r6
 800a474:	4283      	cmp	r3, r0
 800a476:	4637      	mov	r7, r6
 800a478:	dc05      	bgt.n	800a486 <__swbuf_r+0x4e>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff ff51 	bl	800a324 <_fflush_r>
 800a482:	2800      	cmp	r0, #0
 800a484:	d1ed      	bne.n	800a462 <__swbuf_r+0x2a>
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	3b01      	subs	r3, #1
 800a48a:	60a3      	str	r3, [r4, #8]
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	6022      	str	r2, [r4, #0]
 800a492:	701e      	strb	r6, [r3, #0]
 800a494:	6962      	ldr	r2, [r4, #20]
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	429a      	cmp	r2, r3
 800a49a:	d004      	beq.n	800a4a6 <__swbuf_r+0x6e>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	07db      	lsls	r3, r3, #31
 800a4a0:	d5e1      	bpl.n	800a466 <__swbuf_r+0x2e>
 800a4a2:	2e0a      	cmp	r6, #10
 800a4a4:	d1df      	bne.n	800a466 <__swbuf_r+0x2e>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7ff ff3b 	bl	800a324 <_fflush_r>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d0d9      	beq.n	800a466 <__swbuf_r+0x2e>
 800a4b2:	e7d6      	b.n	800a462 <__swbuf_r+0x2a>

0800a4b4 <__swsetup_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4b29      	ldr	r3, [pc, #164]	@ (800a55c <__swsetup_r+0xa8>)
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	460c      	mov	r4, r1
 800a4be:	b118      	cbz	r0, 800a4c8 <__swsetup_r+0x14>
 800a4c0:	6a03      	ldr	r3, [r0, #32]
 800a4c2:	b90b      	cbnz	r3, 800a4c8 <__swsetup_r+0x14>
 800a4c4:	f7ff f824 	bl	8009510 <__sinit>
 800a4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4cc:	0719      	lsls	r1, r3, #28
 800a4ce:	d422      	bmi.n	800a516 <__swsetup_r+0x62>
 800a4d0:	06da      	lsls	r2, r3, #27
 800a4d2:	d407      	bmi.n	800a4e4 <__swsetup_r+0x30>
 800a4d4:	2209      	movs	r2, #9
 800a4d6:	602a      	str	r2, [r5, #0]
 800a4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e2:	e033      	b.n	800a54c <__swsetup_r+0x98>
 800a4e4:	0758      	lsls	r0, r3, #29
 800a4e6:	d512      	bpl.n	800a50e <__swsetup_r+0x5a>
 800a4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ea:	b141      	cbz	r1, 800a4fe <__swsetup_r+0x4a>
 800a4ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d002      	beq.n	800a4fa <__swsetup_r+0x46>
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff fa21 	bl	800993c <_free_r>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	2300      	movs	r3, #0
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f043 0308 	orr.w	r3, r3, #8
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	b94b      	cbnz	r3, 800a52e <__swsetup_r+0x7a>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a524:	d003      	beq.n	800a52e <__swsetup_r+0x7a>
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f7ff ff49 	bl	800a3c0 <__smakebuf_r>
 800a52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a532:	f013 0201 	ands.w	r2, r3, #1
 800a536:	d00a      	beq.n	800a54e <__swsetup_r+0x9a>
 800a538:	2200      	movs	r2, #0
 800a53a:	60a2      	str	r2, [r4, #8]
 800a53c:	6962      	ldr	r2, [r4, #20]
 800a53e:	4252      	negs	r2, r2
 800a540:	61a2      	str	r2, [r4, #24]
 800a542:	6922      	ldr	r2, [r4, #16]
 800a544:	b942      	cbnz	r2, 800a558 <__swsetup_r+0xa4>
 800a546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a54a:	d1c5      	bne.n	800a4d8 <__swsetup_r+0x24>
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	0799      	lsls	r1, r3, #30
 800a550:	bf58      	it	pl
 800a552:	6962      	ldrpl	r2, [r4, #20]
 800a554:	60a2      	str	r2, [r4, #8]
 800a556:	e7f4      	b.n	800a542 <__swsetup_r+0x8e>
 800a558:	2000      	movs	r0, #0
 800a55a:	e7f7      	b.n	800a54c <__swsetup_r+0x98>
 800a55c:	20000040 	.word	0x20000040

0800a560 <memmove>:
 800a560:	4288      	cmp	r0, r1
 800a562:	b510      	push	{r4, lr}
 800a564:	eb01 0402 	add.w	r4, r1, r2
 800a568:	d902      	bls.n	800a570 <memmove+0x10>
 800a56a:	4284      	cmp	r4, r0
 800a56c:	4623      	mov	r3, r4
 800a56e:	d807      	bhi.n	800a580 <memmove+0x20>
 800a570:	1e43      	subs	r3, r0, #1
 800a572:	42a1      	cmp	r1, r4
 800a574:	d008      	beq.n	800a588 <memmove+0x28>
 800a576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a57e:	e7f8      	b.n	800a572 <memmove+0x12>
 800a580:	4402      	add	r2, r0
 800a582:	4601      	mov	r1, r0
 800a584:	428a      	cmp	r2, r1
 800a586:	d100      	bne.n	800a58a <memmove+0x2a>
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a58e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a592:	e7f7      	b.n	800a584 <memmove+0x24>

0800a594 <_fstat_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4d07      	ldr	r5, [pc, #28]	@ (800a5b4 <_fstat_r+0x20>)
 800a598:	2300      	movs	r3, #0
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	f7f7 fcd1 	bl	8001f48 <_fstat>
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d102      	bne.n	800a5b0 <_fstat_r+0x1c>
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	b103      	cbz	r3, 800a5b0 <_fstat_r+0x1c>
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	bd38      	pop	{r3, r4, r5, pc}
 800a5b2:	bf00      	nop
 800a5b4:	200006d4 	.word	0x200006d4

0800a5b8 <_isatty_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	4d06      	ldr	r5, [pc, #24]	@ (800a5d4 <_isatty_r+0x1c>)
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4604      	mov	r4, r0
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	602b      	str	r3, [r5, #0]
 800a5c4:	f7f7 fcd0 	bl	8001f68 <_isatty>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_isatty_r+0x1a>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_isatty_r+0x1a>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	200006d4 	.word	0x200006d4

0800a5d8 <_realloc_r>:
 800a5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5dc:	4607      	mov	r7, r0
 800a5de:	4614      	mov	r4, r2
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	b921      	cbnz	r1, 800a5ee <_realloc_r+0x16>
 800a5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	f7fe be79 	b.w	80092e0 <_malloc_r>
 800a5ee:	b92a      	cbnz	r2, 800a5fc <_realloc_r+0x24>
 800a5f0:	f7ff f9a4 	bl	800993c <_free_r>
 800a5f4:	4625      	mov	r5, r4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fc:	f000 f81a 	bl	800a634 <_malloc_usable_size_r>
 800a600:	4284      	cmp	r4, r0
 800a602:	4606      	mov	r6, r0
 800a604:	d802      	bhi.n	800a60c <_realloc_r+0x34>
 800a606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a60a:	d8f4      	bhi.n	800a5f6 <_realloc_r+0x1e>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4638      	mov	r0, r7
 800a610:	f7fe fe66 	bl	80092e0 <_malloc_r>
 800a614:	4680      	mov	r8, r0
 800a616:	b908      	cbnz	r0, 800a61c <_realloc_r+0x44>
 800a618:	4645      	mov	r5, r8
 800a61a:	e7ec      	b.n	800a5f6 <_realloc_r+0x1e>
 800a61c:	42b4      	cmp	r4, r6
 800a61e:	4622      	mov	r2, r4
 800a620:	4629      	mov	r1, r5
 800a622:	bf28      	it	cs
 800a624:	4632      	movcs	r2, r6
 800a626:	f7ff f97a 	bl	800991e <memcpy>
 800a62a:	4629      	mov	r1, r5
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7ff f985 	bl	800993c <_free_r>
 800a632:	e7f1      	b.n	800a618 <_realloc_r+0x40>

0800a634 <_malloc_usable_size_r>:
 800a634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a638:	1f18      	subs	r0, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	bfbc      	itt	lt
 800a63e:	580b      	ldrlt	r3, [r1, r0]
 800a640:	18c0      	addlt	r0, r0, r3
 800a642:	4770      	bx	lr

0800a644 <_init>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	bf00      	nop
 800a648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64a:	bc08      	pop	{r3}
 800a64c:	469e      	mov	lr, r3
 800a64e:	4770      	bx	lr

0800a650 <_fini>:
 800a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a652:	bf00      	nop
 800a654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a656:	bc08      	pop	{r3}
 800a658:	469e      	mov	lr, r3
 800a65a:	4770      	bx	lr
