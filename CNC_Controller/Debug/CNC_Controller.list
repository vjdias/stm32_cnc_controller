
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e924  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800eab4  0800eab4  0000fab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1bc  0800f1bc  0001107c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f1bc  0800f1bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1c4  0800f1c4  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1c4  0800f1c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1c8  0800f1c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800f1cc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000080  0800f248  00011080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011d0  0800f248  000111d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020349  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d6  00000000  00000000  000313f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000166a  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bff  00000000  00000000  00039eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028043  00000000  00000000  00063aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa3ef  00000000  00000000  0008baec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080a4  00000000  00000000  00185f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0018dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea9c 	.word	0x0800ea9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ea9c 	.word	0x0800ea9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <has_header_tail+0x40>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d90e      	bls.n	8000724 <has_header_tail+0x40>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <has_header_tail+0x40>
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <has_header_tail+0x40>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <has_header_tail+0x42>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <frame_expect_req+0x1e>
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d202      	bcs.n	8000756 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	e012      	b.n	800077c <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000756:	2355      	movs	r3, #85	@ 0x55
 8000758:	22aa      	movs	r2, #170	@ 0xaa
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ffc1 	bl	80006e4 <has_header_tail>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	429a      	cmp	r2, r3
 8000772:	d002      	beq.n	800077a <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000774:	f06f 0301 	mvn.w	r3, #1
 8000778:	e000      	b.n	800077c <frame_expect_req+0x4a>
	return PROTO_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <move_end_req_decoder+0x18>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e011      	b.n	80007c6 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 80007a2:	2304      	movs	r3, #4
 80007a4:	2206      	movs	r2, #6
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ffc2 	bl	8000732 <frame_expect_req>
 80007ae:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <move_end_req_decoder+0x36>
		return st;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	e005      	b.n	80007c6 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3302      	adds	r3, #2
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4611      	mov	r1, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <has_header_tail+0x40>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d90e      	bls.n	800080e <has_header_tail+0x40>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d109      	bne.n	800080e <has_header_tail+0x40>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d101      	bne.n	800080e <has_header_tail+0x40>
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <has_header_tail+0x42>
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	b29b      	uxth	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	061a      	lsls	r2, r3, #24
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3302      	adds	r3, #2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	4313      	orrs	r3, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	3203      	adds	r2, #3
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4313      	orrs	r3, r2
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <frame_expect_req+0x1e>
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d202      	bcs.n	80008a2 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	e012      	b.n	80008c8 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008a2:	2355      	movs	r3, #85	@ 0x55
 80008a4:	22aa      	movs	r2, #170	@ 0xaa
 80008a6:	68b9      	ldr	r1, [r7, #8]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff90 	bl	80007ce <has_header_tail>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d002      	beq.n	80008c6 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008c0:	f06f 0301 	mvn.w	r3, #1
 80008c4:	e000      	b.n	80008c8 <frame_expect_req+0x4a>
	return PROTO_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <move_queue_add_req_decoder+0x18>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e09a      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 80008ee:	232a      	movs	r3, #42	@ 0x2a
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ffc2 	bl	800087e <frame_expect_req>
 80008fa:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <move_queue_add_req_decoder+0x36>
		return st;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	e08e      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3302      	adds	r3, #2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3303      	adds	r3, #3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <be16_read>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3306      	adds	r3, #6
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff89 	bl	8000848 <be32_read>
 8000936:	4602      	mov	r2, r0
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	330a      	adds	r3, #10
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff6b 	bl	800081c <be16_read>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff78 	bl	8000848 <be32_read>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff5a 	bl	800081c <be16_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3312      	adds	r3, #18
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff67 	bl	8000848 <be32_read>
 800097a:	4602      	mov	r2, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3316      	adds	r3, #22
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff49 	bl	800081c <be16_read>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3318      	adds	r3, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff40 	bl	800081c <be16_read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	331a      	adds	r3, #26
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff37 	bl	800081c <be16_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	331c      	adds	r3, #28
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff2e 	bl	800081c <be16_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	331e      	adds	r3, #30
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff25 	bl	800081c <be16_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3320      	adds	r3, #32
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff1c 	bl	800081c <be16_read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3322      	adds	r3, #34	@ 0x22
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff13 	bl	800081c <be16_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3324      	adds	r3, #36	@ 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff0a 	bl	800081c <be16_read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3326      	adds	r3, #38	@ 0x26
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff01 	bl	800081c <be16_read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <has_header_tail+0x40>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d90e      	bls.n	8000a6c <has_header_tail+0x40>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d109      	bne.n	8000a6c <has_header_tail+0x40>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d101      	bne.n	8000a6c <has_header_tail+0x40>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <has_header_tail+0x42>
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <frame_expect_req+0x1e>
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d202      	bcs.n	8000a9e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e012      	b.n	8000ac4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a9e:	2355      	movs	r3, #85	@ 0x55
 8000aa0:	22aa      	movs	r2, #170	@ 0xaa
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff ffc1 	bl	8000a2c <has_header_tail>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d002      	beq.n	8000ac2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000abc:	f06f 0301 	mvn.w	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <move_queue_status_req_decoder+0x18>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	e011      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000aea:	2304      	movs	r3, #4
 8000aec:	2202      	movs	r2, #2
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ffc2 	bl	8000a7a <frame_expect_req>
 8000af6:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <move_queue_status_req_decoder+0x36>
		return st;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	e005      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3302      	adds	r3, #2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4611      	mov	r1, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d011      	beq.n	8000b56 <has_header_tail+0x40>
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d90e      	bls.n	8000b56 <has_header_tail+0x40>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d109      	bne.n	8000b56 <has_header_tail+0x40>
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <has_header_tail+0x40>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <has_header_tail+0x42>
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <frame_expect_req+0x1e>
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d202      	bcs.n	8000b88 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e012      	b.n	8000bae <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000b88:	2355      	movs	r3, #85	@ 0x55
 8000b8a:	22aa      	movs	r2, #170	@ 0xaa
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ffc1 	bl	8000b16 <has_header_tail>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d002      	beq.n	8000bac <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000ba6:	f06f 0301 	mvn.w	r3, #1
 8000baa:	e000      	b.n	8000bae <frame_expect_req+0x4a>
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <start_move_req_decoder+0x18>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e011      	b.n	8000bf8 <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ffc2 	bl	8000b64 <frame_expect_req>
 8000be0:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <start_move_req_decoder+0x36>
		return st;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	e005      	b.n	8000bf8 <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e009      	b.n	8000c28 <xor_reduce_bytes+0x28>
		x ^= p[i];
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f1      	bcc.n	8000c14 <xor_reduce_bytes+0x14>
	return x;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <set_parity_byte+0x1a>
		return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e00b      	b.n	8000c70 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	18d0      	adds	r0, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	18d4      	adds	r4, r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	f7ff ffcb 	bl	8000c00 <xor_reduce_bytes>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	22ab      	movs	r2, #171	@ 0xab
 8000c88:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff ffb4 	bl	8000c3e <set_parity_byte>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d802      	bhi.n	8000d04 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e01c      	b.n	8000d3e <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 8000d04:	2107      	movs	r1, #7
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff ffb6 	bl	8000c78 <resp_init>
	raw[2] = in->frameId;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	7852      	ldrb	r2, [r2, #1]
 8000d1e:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3304      	adds	r3, #4
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	7892      	ldrb	r2, [r2, #2]
 8000d28:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f7ff ffc5 	bl	8000cbe <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000d34:	2106      	movs	r1, #6
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f7ff ffb1 	bl	8000c9e <resp_set_tail>
	return PROTO_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	22ab      	movs	r2, #171	@ 0xab
 8000d56:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <move_end_resp_encoder>:
	if (st != PROTO_OK)
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d802      	bhi.n	8000db0 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e00d      	b.n	8000dcc <move_end_resp_encoder+0x40>
	resp_init(raw, RESP_MOVE_END);
 8000db0:	2106      	movs	r1, #6
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f7ff ffc7 	bl	8000d46 <resp_init>
	raw[2] = in->frameId;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff ffd1 	bl	8000d6c <resp_set_tail>
	return PROTO_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e009      	b.n	8000dfc <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4053      	eors	r3, r2
 8000df4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3f1      	bcc.n	8000de8 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4053      	eors	r3, r2
 8000e0e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <set_parity_bit>:
		uint32_t parity_index) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <set_parity_bit+0x1a>
		return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	e010      	b.n	8000e78 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffb8 	bl	8000dd4 <xor_bit_reduce_bytes>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f001 0201 	and.w	r2, r1, #1
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	22ab      	movs	r2, #171	@ 0xab
 8000e90:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2254      	movs	r2, #84	@ 0x54
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ffaf 	bl	8000e3c <set_parity_bit>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d802      	bhi.n	8000f0c <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e017      	b.n	8000f3c <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff ffb6 	bl	8000e80 <resp_init>
	raw[2] = in->frameId;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3302      	adds	r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3303      	adds	r3, #3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7852      	ldrb	r2, [r2, #1]
 8000f26:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 8000f28:	2204      	movs	r2, #4
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f7ff ffca 	bl	8000ec6 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 8000f32:	2105      	movs	r1, #5
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff ffb6 	bl	8000ea6 <resp_set_tail>
	return PROTO_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4053      	eors	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4053      	eors	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4053      	eors	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <set_parity_bit>:
		uint32_t parity_index) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <set_parity_bit+0x1a>
		return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	e010      	b.n	8000fe8 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb8 	bl	8000f44 <xor_bit_reduce_bytes>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f001 0201 	and.w	r2, r1, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	22ab      	movs	r2, #171	@ 0xab
 8001000:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	2254      	movs	r2, #84	@ 0x54
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <parity_set_bit_1N>:
		uint32_t parity_index) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	2101      	movs	r1, #1
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffaf 	bl	8000fac <set_parity_bit>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d802      	bhi.n	800107c <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e035      	b.n	80010e8 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 800107c:	2102      	movs	r1, #2
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff ffb6 	bl	8000ff0 <resp_init>
	raw[2] = in->frameId;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3302      	adds	r3, #2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3303      	adds	r3, #3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	7852      	ldrb	r2, [r2, #1]
 8001096:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3304      	adds	r3, #4
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	7892      	ldrb	r2, [r2, #2]
 80010a0:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3305      	adds	r3, #5
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	78d2      	ldrb	r2, [r2, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3306      	adds	r3, #6
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	7912      	ldrb	r2, [r2, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3307      	adds	r3, #7
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7952      	ldrb	r2, [r2, #5]
 80010be:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3308      	adds	r3, #8
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	7992      	ldrb	r2, [r2, #6]
 80010c8:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3309      	adds	r3, #9
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	79d2      	ldrb	r2, [r2, #7]
 80010d2:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 80010d4:	220a      	movs	r2, #10
 80010d6:	2109      	movs	r1, #9
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f7ff ffac 	bl	8001036 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 80010de:	210b      	movs	r1, #11
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff ff98 	bl	8001016 <resp_set_tail>
	return PROTO_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ab      	movs	r2, #171	@ 0xab
 8001100:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	2254      	movs	r2, #84	@ 0x54
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <start_move_resp_encoder>:
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d802      	bhi.n	800115a <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	e00d      	b.n	8001176 <start_move_resp_encoder+0x40>
	resp_init(raw, RESP_START_MOVE);
 800115a:	2103      	movs	r1, #3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ffc7 	bl	80010f0 <resp_init>
	raw[2] = in->frameId;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 800116c:	2103      	movs	r1, #3
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff ffd1 	bl	8001116 <resp_set_tail>
	return PROTO_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001182:	210c      	movs	r1, #12
 8001184:	2001      	movs	r0, #1
 8001186:	f00c fa89 	bl	800d69c <calloc>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <resp_fifo_push+0x24>
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e03d      	b.n	8001230 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 80011b4:	200c      	movs	r0, #12
 80011b6:	f00c fa8d 	bl	800d6d4 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <resp_fifo_push+0x3a>
 80011c4:	f06f 0302 	mvn.w	r3, #2
 80011c8:	e032      	b.n	8001230 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f00c fa82 	bl	800d6d4 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <resp_fifo_push+0x5c>
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f00c fa7f 	bl	800d6e4 <free>
 80011e6:	f06f 0302 	mvn.w	r3, #2
 80011ea:	e021      	b.n	8001230 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00c fdbe 	bl	800dd76 <memcpy>
    n->len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <resp_fifo_push+0x88>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e002      	b.n	800121e <resp_fifo_push+0x8e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
    q->tail = n;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	605a      	str	r2, [r3, #4]
    q->count++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <resp_fifo_pop+0x20>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <resp_fifo_pop+0x20>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <resp_fifo_pop+0x24>
 8001258:	2300      	movs	r3, #0
 800125a:	e02e      	b.n	80012ba <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d202      	bcs.n	8001272 <resp_fifo_pop+0x3a>
 800126c:	f06f 0303 	mvn.w	r3, #3
 8001270:	e023      	b.n	80012ba <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00c fd7a 	bl	800dd76 <memcpy>
    int ret = (int)n->len;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <resp_fifo_pop+0x66>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
    q->count--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    free(n->buf);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00c fa19 	bl	800d6e4 <free>
    free(n);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f00c fa16 	bl	800d6e4 <free>
    return ret;
 80012b8:	693b      	ldr	r3, [r7, #16]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    if (!r) return;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01a      	beq.n	800130c <router_init+0x48>
    memset(r, 0, sizeof(*r));
 80012d6:	2248      	movs	r2, #72	@ 0x48
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f00c fcc0 	bl	800dc60 <memset>
    r->resp = resp_fifo;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80012e6:	2224      	movs	r2, #36	@ 0x24
 80012e8:	2100      	movs	r1, #0
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <router_init+0x50>)
 80012ec:	f00c fcb8 	bl	800dc60 <memset>
    if (h) g_handlers = *h;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <router_init+0x4a>
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <router_init+0x50>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	e000      	b.n	800130e <router_init+0x4a>
    if (!r) return;
 800130c:	bf00      	nop
}
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000009c 	.word	0x2000009c

08001318 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80c0 	beq.w	80014ac <dispatch+0x194>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80bc 	beq.w	80014ac <dispatch+0x194>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b03      	cmp	r3, #3
 8001338:	f240 80b8 	bls.w	80014ac <dispatch+0x194>
    uint8_t type = f[1];
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b20      	cmp	r3, #32
 8001348:	dc4a      	bgt.n	80013e0 <dispatch+0xc8>
 800134a:	2b00      	cmp	r3, #0
 800134c:	f340 80b0 	ble.w	80014b0 <dispatch+0x198>
 8001350:	3b01      	subs	r3, #1
 8001352:	2b1f      	cmp	r3, #31
 8001354:	f200 80ac 	bhi.w	80014b0 <dispatch+0x198>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <dispatch+0x48>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013fd 	.word	0x080013fd
 8001368:	08001413 	.word	0x08001413
 800136c:	08001429 	.word	0x08001429
 8001370:	0800143f 	.word	0x0800143f
 8001374:	08001455 	.word	0x08001455
 8001378:	0800146b 	.word	0x0800146b
 800137c:	080014b1 	.word	0x080014b1
 8001380:	080014b1 	.word	0x080014b1
 8001384:	080014b1 	.word	0x080014b1
 8001388:	080014b1 	.word	0x080014b1
 800138c:	080014b1 	.word	0x080014b1
 8001390:	080014b1 	.word	0x080014b1
 8001394:	080014b1 	.word	0x080014b1
 8001398:	080014b1 	.word	0x080014b1
 800139c:	080014b1 	.word	0x080014b1
 80013a0:	080014b1 	.word	0x080014b1
 80013a4:	080014b1 	.word	0x080014b1
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014b1 	.word	0x080014b1
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014b1 	.word	0x080014b1
 80013b8:	080014b1 	.word	0x080014b1
 80013bc:	080014b1 	.word	0x080014b1
 80013c0:	080014b1 	.word	0x080014b1
 80013c4:	080014b1 	.word	0x080014b1
 80013c8:	080014b1 	.word	0x080014b1
 80013cc:	080014b1 	.word	0x080014b1
 80013d0:	080014b1 	.word	0x080014b1
 80013d4:	080014b1 	.word	0x080014b1
 80013d8:	080014b1 	.word	0x080014b1
 80013dc:	08001481 	.word	0x08001481
 80013e0:	2b68      	cmp	r3, #104	@ 0x68
 80013e2:	d058      	beq.n	8001496 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80013e4:	e064      	b.n	80014b0 <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <dispatch+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d062      	beq.n	80014b4 <dispatch+0x19c>
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dispatch+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	4798      	blx	r3
 80013fa:	e05b      	b.n	80014b4 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <dispatch+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d059      	beq.n	80014b8 <dispatch+0x1a0>
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dispatch+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4798      	blx	r3
 8001410:	e052      	b.n	80014b8 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <dispatch+0x1c4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d050      	beq.n	80014bc <dispatch+0x1a4>
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dispatch+0x1c4>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	4798      	blx	r3
 8001426:	e049      	b.n	80014bc <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <dispatch+0x1c4>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d047      	beq.n	80014c0 <dispatch+0x1a8>
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dispatch+0x1c4>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4798      	blx	r3
 800143c:	e040      	b.n	80014c0 <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <dispatch+0x1c4>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d03e      	beq.n	80014c4 <dispatch+0x1ac>
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dispatch+0x1c4>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	4798      	blx	r3
 8001452:	e037      	b.n	80014c4 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <dispatch+0x1c4>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <dispatch+0x1b0>
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <dispatch+0x1c4>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	4798      	blx	r3
 8001468:	e02e      	b.n	80014c8 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <dispatch+0x1c4>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02c      	beq.n	80014cc <dispatch+0x1b4>
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <dispatch+0x1c4>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	4798      	blx	r3
 800147e:	e025      	b.n	80014cc <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <dispatch+0x1c4>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <dispatch+0x1b8>
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dispatch+0x1c4>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	4798      	blx	r3
 8001494:	e01c      	b.n	80014d0 <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <dispatch+0x1c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <dispatch+0x1bc>
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <dispatch+0x1c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	4798      	blx	r3
 80014aa:	e013      	b.n	80014d4 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 80014ac:	bf00      	nop
 80014ae:	e012      	b.n	80014d6 <dispatch+0x1be>
        default: /* desconhecido */  break;
 80014b0:	bf00      	nop
 80014b2:	e010      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80014b4:	bf00      	nop
 80014b6:	e00e      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 80014d4:	bf00      	nop
    }
    #undef CALL
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000009c 	.word	0x2000009c

080014e0 <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d910      	bls.n	8001520 <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2baa      	cmp	r3, #170	@ 0xaa
 8001504:	d10e      	bne.n	8001524 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b55      	cmp	r3, #85	@ 0x55
 8001512:	d109      	bne.n	8001528 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fefd 	bl	8001318 <dispatch>
 800151e:	e004      	b.n	800152a <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001528:	bf00      	nop
}
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <home_service_init+0x34>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <home_service_init+0x34>)
 800153e:	2200      	movs	r2, #0
 8001540:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <home_service_init+0x38>)
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <home_service_init+0x3c>)
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <home_service_init+0x40>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <home_service_init+0x44>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2003      	movs	r0, #3
 8001558:	f000 fcd2 	bl	8001f00 <log_event_auto>
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000c0 	.word	0x200000c0
 8001568:	0800eab4 	.word	0x0800eab4
 800156c:	0800eabc 	.word	0x0800eabc
 8001570:	0800eac0 	.word	0x0800eac0
 8001574:	0800eac4 	.word	0x0800eac4

08001578 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <home_on_move_home+0x2c>)
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <home_on_move_home+0x30>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <home_on_move_home+0x34>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <home_on_move_home+0x38>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fcb2 	bl	8001f00 <log_event_auto>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800eab4 	.word	0x0800eab4
 80015a8:	0800eacc 	.word	0x0800eacc
 80015ac:	0800eac0 	.word	0x0800eac0
 80015b0:	0800eadc 	.word	0x0800eadc

080015b4 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    if (!led)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fa06 	bl	8005a00 <HAL_GPIO_Init>
 80015f4:	e000      	b.n	80015f8 <led_gpio_config_output+0x44>
        return;
 80015f6:	bf00      	nop
}
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b088      	sub	sp, #32
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    if (!led)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f004 f9de 	bl	8005a00 <HAL_GPIO_Init>
 8001644:	e000      	b.n	8001648 <led_gpio_config_pwm+0x4a>
        return;
 8001646:	bf00      	nop
}
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	460b      	mov	r3, r1
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	733b      	strb	r3, [r7, #12]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	737b      	strb	r3, [r7, #13]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800166e:	f107 0110 	add.w	r1, r7, #16
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2207      	movs	r2, #7
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb31 	bl	8000ce0 <led_ctrl_resp_encoder>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <led_push_response+0x80>)
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <led_push_response+0x84>)
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <led_push_response+0x88>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	2164      	movs	r1, #100	@ 0x64
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fc32 	bl	8001f00 <log_event_auto>
 800169c:	e014      	b.n	80016c8 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2107      	movs	r1, #7
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fb09 	bl	8003cbc <app_resp_push>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <led_push_response+0x80>)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <led_push_response+0x8c>)
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <led_push_response+0x88>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	f06f 0203 	mvn.w	r2, #3
 80016c0:	2164      	movs	r1, #100	@ 0x64
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fc1c 	bl	8001f00 <log_event_auto>
    }
}
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800eae8 	.word	0x0800eae8
 80016d4:	0800eaec 	.word	0x0800eaec
 80016d8:	0800eb08 	.word	0x0800eb08
 80016dc:	0800eb10 	.word	0x0800eb10

080016e0 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 80016e6:	f006 f943 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 80016ea:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <led_timer_get_clock+0x34>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80016f4:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <led_timer_get_clock+0x28>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000

08001718 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001724:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <led_compute_period_ticks+0x16>
        return 0u;
 800172a:	2300      	movs	r3, #0
 800172c:	e066      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 800172e:	f7ff ffd7 	bl	80016e0 <led_timer_get_clock>
 8001732:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <led_compute_period_ticks+0xf0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 800173c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <led_compute_period_ticks+0x2e>
        return 0u;
 8001742:	2300      	movs	r3, #0
 8001744:	e05a      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <led_compute_period_ticks+0x42>
        return 0u;
 8001756:	2300      	movs	r3, #0
 8001758:	e050      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	2200      	movs	r2, #0
 800175e:	4698      	mov	r8, r3
 8001760:	4691      	mov	r9, r2
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	1891      	adds	r1, r2, r2
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	415b      	adcs	r3, r3
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001772:	eb12 0408 	adds.w	r4, r2, r8
 8001776:	eb43 0509 	adc.w	r5, r3, r9
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	016b      	lsls	r3, r5, #5
 8001784:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001788:	0162      	lsls	r2, r4, #5
 800178a:	eb14 0a02 	adds.w	sl, r4, r2
 800178e:	eb45 0b03 	adc.w	fp, r5, r3
 8001792:	eb1a 0308 	adds.w	r3, sl, r8
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	eb4b 0309 	adc.w	r3, fp, r9
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 80017a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017bc:	4621      	mov	r1, r4
 80017be:	1889      	adds	r1, r1, r2
 80017c0:	61b9      	str	r1, [r7, #24]
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb43 0101 	adc.w	r1, r3, r1
 80017c8:	61f9      	str	r1, [r7, #28]
 80017ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017cc:	2200      	movs	r2, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	617a      	str	r2, [r7, #20]
 80017d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017da:	f7fe fd49 	bl	8000270 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d305      	bcc.n	80017fa <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	20000fac 	.word	0x20000fac

0800180c <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <led_apply_pwm+0x14>
        period_ticks = 1u;
 800181c:	2301      	movs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d901      	bls.n	800182c <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <led_apply_pwm+0x2c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3b01      	subs	r3, #1
 8001836:	e000      	b.n	800183a <led_apply_pwm+0x2e>
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <led_apply_pwm+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <led_apply_pwm+0x5c>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <led_apply_pwm+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001852:	2101      	movs	r1, #1
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <led_apply_pwm+0x5c>)
 8001856:	f009 fbfd 	bl	800b054 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <led_apply_pwm+0x5c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000fac 	.word	0x20000fac

0800186c <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
    if (!led)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d029      	beq.n	80018ce <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 800187a:	f000 f913 	bl	8001aa4 <led_pwm_stop>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00d      	beq.n	80018a4 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001888:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <led_force_off+0x6c>)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <led_force_off+0x70>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <led_force_off+0x74>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	f06f 0203 	mvn.w	r2, #3
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fb2e 	bl	8001f00 <log_event_auto>
    }
    led_gpio_config_output(led);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe85 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	f004 fb4f 	bl	8005f58 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
 80018cc:	e000      	b.n	80018d0 <led_force_off+0x64>
        return;
 80018ce:	bf00      	nop
}
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800eae8 	.word	0x0800eae8
 80018dc:	0800eb28 	.word	0x0800eb28
 80018e0:	0800eb4c 	.word	0x0800eb4c

080018e4 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	6078      	str	r0, [r7, #4]
    if (!led)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d029      	beq.n	8001946 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 80018f2:	f000 f8d7 	bl	8001aa4 <led_pwm_stop>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <led_force_on+0x6c>)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <led_force_on+0x70>)
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <led_force_on+0x74>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	f06f 0203 	mvn.w	r2, #3
 8001914:	2164      	movs	r1, #100	@ 0x64
 8001916:	2001      	movs	r0, #1
 8001918:	f000 faf2 	bl	8001f00 <log_event_auto>
    }
    led_gpio_config_output(led);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fe49 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f004 fb13 	bl	8005f58 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	735a      	strb	r2, [r3, #13]
 8001944:	e000      	b.n	8001948 <led_force_on+0x64>
        return;
 8001946:	bf00      	nop
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800eae8 	.word	0x0800eae8
 8001954:	0800eb28 	.word	0x0800eb28
 8001958:	0800eb4c 	.word	0x0800eb4c

0800195c <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <led_force_blink+0x8c>
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fece 	bl	8001718 <led_compute_period_ticks>
 800197c:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d801      	bhi.n	8001988 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d902      	bls.n	8001996 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001994:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe2e 	bl	80015fe <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff31 	bl	800180c <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 80019aa:	f000 f85d 	bl	8001a68 <led_pwm_start>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00f      	beq.n	80019d4 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <led_force_blink+0x94>)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <led_force_blink+0x98>)
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <led_force_blink+0x9c>)
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	f06f 0203 	mvn.w	r2, #3
 80019c4:	2164      	movs	r1, #100	@ 0x64
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fa9a 	bl	8001f00 <log_event_auto>
        led_force_off(led);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff4d 	bl	800186c <led_force_off>
        return;
 80019d2:	e00a      	b.n	80019ea <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	735a      	strb	r2, [r3, #13]
 80019e6:	e000      	b.n	80019ea <led_force_blink+0x8e>
        return;
 80019e8:	bf00      	nop
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800eae8 	.word	0x0800eae8
 80019f4:	0800eb54 	.word	0x0800eb54
 80019f8:	0800eb4c 	.word	0x0800eb4c

080019fc <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d026      	beq.n	8001a60 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a22:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001a24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <led_apply_config+0x3c>
        led_force_on(led);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff57 	bl	80018e4 <led_force_on>
 8001a36:	e00e      	b.n	8001a56 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d108      	bne.n	8001a50 <led_apply_config+0x54>
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff87 	bl	800195c <led_force_blink>
 8001a4e:	e002      	b.n	8001a56 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff0b 	bl	800186c <led_force_off>
    }

    if (primask == 0u) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5c:	b662      	cpsie	i
}
 8001a5e:	e000      	b.n	8001a62 <led_apply_config+0x66>
        return;
 8001a60:	bf00      	nop
        __enable_irq();
    }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <led_pwm_start+0x34>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <led_pwm_start+0x12>
        return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e00c      	b.n	8001a94 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <led_pwm_start+0x38>)
 8001a7e:	f008 fa2f 	bl	8009ee0 <HAL_TIM_PWM_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <led_pwm_start+0x34>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000c2 	.word	0x200000c2
 8001aa0:	20000fac 	.word	0x20000fac

08001aa4 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <led_pwm_stop+0x64>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <led_pwm_stop+0x12>
        return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e024      	b.n	8001b00 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aba:	f008 fbc1 	bl	800a240 <HAL_TIM_PWM_Stop>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <led_pwm_stop+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <led_pwm_stop+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <led_pwm_stop+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000c2 	.word	0x200000c2
 8001b0c:	20000fac 	.word	0x20000fac

08001b10 <led_service_init>:

void led_service_init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <led_service_init+0x110>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e02d      	b.n	8001b7e <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4a3f      	ldr	r2, [pc, #252]	@ (8001c24 <led_service_init+0x114>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fd42 	bl	80015b4 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001b30:	4a3c      	ldr	r2, [pc, #240]	@ (8001c24 <led_service_init+0x114>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <led_service_init+0x114>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 fa05 	bl	8005f58 <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 8001b4e:	4a35      	ldr	r2, [pc, #212]	@ (8001c24 <led_service_init+0x114>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	330c      	adds	r3, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8001b5c:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <led_service_init+0x114>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	330e      	adds	r3, #14
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <led_service_init+0x114>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	330d      	adds	r3, #13
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ce      	beq.n	8001b22 <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <led_service_init+0x118>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <led_service_init+0x11c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d001      	beq.n	8001b92 <led_service_init+0x82>
        MX_TIM15_Init();
 8001b8e:	f002 ffc3 	bl	8004b18 <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001b92:	4825      	ldr	r0, [pc, #148]	@ (8001c28 <led_service_init+0x118>)
 8001b94:	f008 f890 	bl	8009cb8 <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <led_service_init+0x120>)
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <led_service_init+0x124>)
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <led_service_init+0x128>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	f06f 0203 	mvn.w	r2, #3
 8001bae:	2164      	movs	r1, #100	@ 0x64
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 f9a5 	bl	8001f00 <log_event_auto>
        return;
 8001bb6:	e02f      	b.n	8001c18 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	@ 0x60
 8001bcc:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	480e      	ldr	r0, [pc, #56]	@ (8001c28 <led_service_init+0x118>)
 8001bee:	f008 ffe3 	bl	800abb8 <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <led_service_init+0x120>)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <led_service_init+0x12c>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <led_service_init+0x128>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	f06f 0203 	mvn.w	r2, #3
 8001c08:	2164      	movs	r1, #100	@ 0x64
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 f978 	bl	8001f00 <log_event_auto>
        return;
 8001c10:	e002      	b.n	8001c18 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 8001c12:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <led_service_init+0x114>)
 8001c14:	f7ff fe2a 	bl	800186c <led_force_off>
}
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000c2 	.word	0x200000c2
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000fac 	.word	0x20000fac
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	0800eae8 	.word	0x0800eae8
 8001c34:	0800eb74 	.word	0x0800eb74
 8001c38:	0800eb4c 	.word	0x0800eb4c
 8001c3c:	0800eb98 	.word	0x0800eb98

08001c40 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b097      	sub	sp, #92	@ 0x5c
 8001c44:	af0a      	add	r7, sp, #40	@ 0x28
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80d2 	beq.w	8001df6 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d902      	bls.n	8001c5e <led_on_led_ctrl+0x1e>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c5c:	d90e      	bls.n	8001c7c <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001c5e:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <led_on_led_ctrl+0x1c4>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <led_on_led_ctrl+0x1c8>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f06f 0203 	mvn.w	r2, #3
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	2001      	movs	r0, #1
 8001c76:	f000 f943 	bl	8001f00 <log_event_auto>
        return;
 8001c7a:	e0bd      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	461a      	mov	r2, r3
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fcef 	bl	8000668 <led_ctrl_req_decoder>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 8001c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00f      	beq.n	8001cb8 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 8001c98:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001c9c:	4958      	ldr	r1, [pc, #352]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <led_on_led_ctrl+0x1cc>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <led_on_led_ctrl+0x1d0>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	2164      	movs	r1, #100	@ 0x64
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f925 	bl	8001f00 <log_event_auto>
        return;
 8001cb6:	e09f      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 8001cb8:	7f7b      	ldrb	r3, [r7, #29]
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	e02d      	b.n	8001d32 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001cec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d00:	1898      	adds	r0, r3, r2
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3320      	adds	r3, #32
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3320      	adds	r3, #32
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff fe6a 	bl	80019fc <led_apply_config>
 8001d28:	e000      	b.n	8001d2c <led_on_led_ctrl+0xec>
            continue;
 8001d2a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	3301      	adds	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ce      	beq.n	8001cd6 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8001d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d44:	4013      	ands	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d52:	e00a      	b.n	8001d6a <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <led_on_led_ctrl+0x12a>
 8001d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 8001d6a:	7f3b      	ldrb	r3, [r7, #28]
 8001d6c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001d70:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc6b 	bl	8001650 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 8001d7a:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001d7e:	4e20      	ldr	r6, [pc, #128]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001d80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d84:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d88:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d90:	89db      	ldrh	r3, [r3, #14]
 8001d92:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001d94:	fba0 0303 	umull	r0, r3, r0, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001da0:	89db      	ldrh	r3, [r3, #14]
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001da4:	fba0 5003 	umull	r5, r0, r0, r3
 8001da8:	0940      	lsrs	r0, r0, #5
 8001daa:	2564      	movs	r5, #100	@ 0x64
 8001dac:	fb05 f000 	mul.w	r0, r5, r0
 8001db0:	1a1b      	subs	r3, r3, r0
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461d      	mov	r5, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001dca:	9009      	str	r0, [sp, #36]	@ 0x24
 8001dcc:	9308      	str	r3, [sp, #32]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	9506      	str	r5, [sp, #24]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	9005      	str	r0, [sp, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <led_on_led_ctrl+0x1e0>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <led_on_led_ctrl+0x1e4>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4633      	mov	r3, r6
 8001dea:	4622      	mov	r2, r4
 8001dec:	2102      	movs	r1, #2
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f886 	bl	8001f00 <log_event_auto>
 8001df4:	e000      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
        return;
 8001df6:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
}
 8001df8:	3734      	adds	r7, #52	@ 0x34
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800eae8 	.word	0x0800eae8
 8001e04:	0800ebc0 	.word	0x0800ebc0
 8001e08:	0800ebdc 	.word	0x0800ebdc
 8001e0c:	0800ebe0 	.word	0x0800ebe0
 8001e10:	0800ec04 	.word	0x0800ec04
 8001e14:	20000000 	.word	0x20000000
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	20000fac 	.word	0x20000fac
 8001e20:	0800ec0c 	.word	0x0800ec0c
 8001e24:	0800ec5c 	.word	0x0800ec5c

08001e28 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <log_service_init+0x18>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6898      	ldr	r0, [r3, #8]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2202      	movs	r2, #2
 8001e36:	2100      	movs	r1, #0
 8001e38:	f00b fdde 	bl	800d9f8 <setvbuf>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000002c 	.word	0x2000002c

08001e44 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	603a      	str	r2, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	460b      	mov	r3, r1
 8001e52:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8001e54:	79f9      	ldrb	r1, [r7, #7]
 8001e56:	79ba      	ldrb	r2, [r7, #6]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <log_event_ids+0x24>)
 8001e5c:	f00b fdba 	bl	800d9d4 <iprintf>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	0800ec64 	.word	0x0800ec64

08001e6c <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <log_event_names+0x16>
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <log_event_names+0x40>)
 8001e80:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <log_event_names+0x20>
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <log_event_names+0x40>)
 8001e8a:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <log_event_names+0x2a>
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <log_event_names+0x40>)
 8001e94:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <log_event_names+0x44>)
 8001e9e:	f00b fd99 	bl	800d9d4 <iprintf>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800ec84 	.word	0x0800ec84
 8001eb0:	0800ec88 	.word	0x0800ec88

08001eb4 <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d002      	beq.n	8001ecc <_write+0x18>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d111      	bne.n	8001ef0 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <_write+0x48>)
 8001ed8:	f00a fd1e 	bl	800c918 <HAL_UART_Transmit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <_write+0x36>
        return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e004      	b.n	8001ef4 <_write+0x40>
      else
        return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e001      	b.n	8001ef4 <_write+0x40>
    }
    return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000ff8 	.word	0x20000ff8

08001f00 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a8      	sub	sp, #160	@ 0xa0
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8001f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <log_event_auto+0x3c>
 8001f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001f24:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001f28:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001f2a:	f107 0018 	add.w	r0, r7, #24
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	f00b fe85 	bl	800dc44 <vsniprintf>
    if(fmt && fmt[0]){
 8001f3a:	e003      	b.n	8001f44 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001f3c:	233f      	movs	r3, #63	@ 0x3f
 8001f3e:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8001f40:	2300      	movs	r3, #0
 8001f42:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <log_event_auto+0x4e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e000      	b.n	8001f50 <log_event_auto+0x50>
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <log_event_auto+0x84>)
 8001f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8001f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <log_event_auto+0x62>
 8001f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f60:	e000      	b.n	8001f64 <log_event_auto+0x64>
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <log_event_auto+0x84>)
 8001f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001f70:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <log_event_auto+0x88>)
 8001f76:	f00b fd2d 	bl	800d9d4 <iprintf>
}
 8001f7a:	bf00      	nop
 8001f7c:	37a0      	adds	r7, #160	@ 0xa0
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800ec84 	.word	0x0800ec84
 8001f88:	0800ec88 	.word	0x0800ec88

08001f8c <gpio_bsrr_set>:
    { GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_2, GPIOD, GPIO_PIN_14,
      MOTION_ENCODER_TYPE_TIM, &htim5, NULL, 32u },
};

static inline void gpio_bsrr_set(GPIO_TypeDef *port, uint16_t pin)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <gpio_bsrr_set+0x1a>
    port->BSRR = pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	e000      	b.n	8001fa8 <gpio_bsrr_set+0x1c>
    if (!port) return;
 8001fa6:	bf00      	nop
}
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <gpio_bsrr_reset>:
static inline void gpio_bsrr_reset(GPIO_TypeDef *port, uint16_t pin)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <gpio_bsrr_reset+0x1c>
    port->BSRR = ((uint32_t)pin) << 16u;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
 8001fcc:	e000      	b.n	8001fd0 <gpio_bsrr_reset+0x1e>
    if (!port) return;
 8001fce:	bf00      	nop
}
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <motion_hw_init>:

void motion_hw_init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
    // Garante STEP baixo e drivers desabilitados
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	e02b      	b.n	8002040 <motion_hw_init+0x64>
        gpio_bsrr_reset(g_axis[i].step_port, g_axis[i].step_pin);
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	493d      	ldr	r1, [pc, #244]	@ (80020e0 <motion_hw_init+0x104>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	79fa      	ldrb	r2, [r7, #7]
 8001ffa:	4939      	ldr	r1, [pc, #228]	@ (80020e0 <motion_hw_init+0x104>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3304      	adds	r3, #4
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	f7ff ffd1 	bl	8001fb2 <gpio_bsrr_reset>
        // Enable ativo em baixo: mantém alto (desabilitado)
        gpio_bsrr_set(g_axis[i].ena_port, g_axis[i].ena_pin);
 8002010:	79fa      	ldrb	r2, [r7, #7]
 8002012:	4933      	ldr	r1, [pc, #204]	@ (80020e0 <motion_hw_init+0x104>)
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3310      	adds	r3, #16
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	492e      	ldr	r1, [pc, #184]	@ (80020e0 <motion_hw_init+0x104>)
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3314      	adds	r3, #20
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f7ff ffa9 	bl	8001f8c <gpio_bsrr_set>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	3301      	adds	r3, #1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d9d0      	bls.n	8001fe8 <motion_hw_init+0xc>
    }

    // Zera contadores e inicia encoders conforme o tipo de periférico
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002046:	2300      	movs	r3, #0
 8002048:	71bb      	strb	r3, [r7, #6]
 800204a:	e034      	b.n	80020b6 <motion_hw_init+0xda>
        const motion_axis_hw_t *axis = &g_axis[i];
 800204c:	79ba      	ldrb	r2, [r7, #6]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4a22      	ldr	r2, [pc, #136]	@ (80020e0 <motion_hw_init+0x104>)
 8002058:	4413      	add	r3, r2
 800205a:	603b      	str	r3, [r7, #0]
        if (axis->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	7d9b      	ldrb	r3, [r3, #22]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d110      	bne.n	8002086 <motion_hw_init+0xaa>
            __HAL_TIM_SET_COUNTER(axis->tim, 0u);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24
            if (HAL_TIM_Encoder_Start(axis->tim, TIM_CHANNEL_ALL) != HAL_OK) {
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	213c      	movs	r1, #60	@ 0x3c
 8002074:	4618      	mov	r0, r3
 8002076:	f008 fbd9 	bl	800a82c <HAL_TIM_Encoder_Start>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <motion_hw_init+0xd4>
                Error_Handler();
 8002080:	f002 f9ea 	bl	8004458 <Error_Handler>
 8002084:	e014      	b.n	80020b0 <motion_hw_init+0xd4>
            }
        } else if (axis->encoder_type == MOTION_ENCODER_TYPE_LPTIM) {
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	7d9b      	ldrb	r3, [r3, #22]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d110      	bne.n	80020b0 <motion_hw_init+0xd4>
            (void)HAL_LPTIM_Encoder_Stop(axis->lptim);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4618      	mov	r0, r3
 8002094:	f004 fa5a 	bl	800654c <HAL_LPTIM_Encoder_Stop>
            if (HAL_LPTIM_Encoder_Start(axis->lptim, LPTIM_ENCODER_PERIOD) != HAL_OK) {
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 f9c9 	bl	8006438 <HAL_LPTIM_Encoder_Start>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <motion_hw_init+0xd4>
                Error_Handler();
 80020ac:	f002 f9d4 	bl	8004458 <Error_Handler>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	3301      	adds	r3, #1
 80020b4:	71bb      	strb	r3, [r7, #6]
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d9c7      	bls.n	800204c <motion_hw_init+0x70>
#endif
        }
    }

    // Mantém os EN dos eixos Y (1) e Z (2) ativados (nível baixo) conforme solicitado
    gpio_bsrr_reset(g_axis[1].ena_port, g_axis[1].ena_pin);
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <motion_hw_init+0x108>)
 80020be:	2220      	movs	r2, #32
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff75 	bl	8001fb2 <gpio_bsrr_reset>
    gpio_bsrr_reset(g_axis[2].ena_port, g_axis[2].ena_pin);
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <motion_hw_init+0x10c>)
 80020ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff6e 	bl	8001fb2 <gpio_bsrr_reset>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	0800f0cc 	.word	0x0800f0cc
 80020e4:	48000800 	.word	0x48000800
 80020e8:	48000c00 	.word	0x48000c00

080020ec <motion_hw_set_dir>:

void motion_hw_set_dir(uint8_t axis, uint8_t dir)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	460a      	mov	r2, r1
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d82e      	bhi.n	8002160 <motion_hw_set_dir+0x74>
    if (dir) gpio_bsrr_set(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <motion_hw_set_dir+0x48>
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	4917      	ldr	r1, [pc, #92]	@ (8002168 <motion_hw_set_dir+0x7c>)
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3308      	adds	r3, #8
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	4912      	ldr	r1, [pc, #72]	@ (8002168 <motion_hw_set_dir+0x7c>)
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	330c      	adds	r3, #12
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	f7ff ff2d 	bl	8001f8c <gpio_bsrr_set>
 8002132:	e016      	b.n	8002162 <motion_hw_set_dir+0x76>
    else     gpio_bsrr_reset(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002134:	79fa      	ldrb	r2, [r7, #7]
 8002136:	490c      	ldr	r1, [pc, #48]	@ (8002168 <motion_hw_set_dir+0x7c>)
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3308      	adds	r3, #8
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	79fa      	ldrb	r2, [r7, #7]
 8002148:	4907      	ldr	r1, [pc, #28]	@ (8002168 <motion_hw_set_dir+0x7c>)
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	330c      	adds	r3, #12
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f7ff ff2a 	bl	8001fb2 <gpio_bsrr_reset>
 800215e:	e000      	b.n	8002162 <motion_hw_set_dir+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002160:	bf00      	nop
}
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	0800f0cc 	.word	0x0800f0cc

0800216c <motion_hw_enable>:

void motion_hw_enable(uint8_t axis, uint8_t enable)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	460a      	mov	r2, r1
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	4613      	mov	r3, r2
 800217a:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d82e      	bhi.n	80021e0 <motion_hw_enable+0x74>
    // Enable ativo em baixo: enable=1 -> força baixo
    if (enable) gpio_bsrr_reset(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d015      	beq.n	80021b4 <motion_hw_enable+0x48>
 8002188:	79fa      	ldrb	r2, [r7, #7]
 800218a:	4917      	ldr	r1, [pc, #92]	@ (80021e8 <motion_hw_enable+0x7c>)
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3310      	adds	r3, #16
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	79fa      	ldrb	r2, [r7, #7]
 800219c:	4912      	ldr	r1, [pc, #72]	@ (80021e8 <motion_hw_enable+0x7c>)
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3314      	adds	r3, #20
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7ff ff00 	bl	8001fb2 <gpio_bsrr_reset>
 80021b2:	e016      	b.n	80021e2 <motion_hw_enable+0x76>
    else        gpio_bsrr_set(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	490c      	ldr	r1, [pc, #48]	@ (80021e8 <motion_hw_enable+0x7c>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3310      	adds	r3, #16
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	79fa      	ldrb	r2, [r7, #7]
 80021c8:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <motion_hw_enable+0x7c>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	3314      	adds	r3, #20
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f7ff fed7 	bl	8001f8c <gpio_bsrr_set>
 80021de:	e000      	b.n	80021e2 <motion_hw_enable+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 80021e0:	bf00      	nop
}
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	0800f0cc 	.word	0x0800f0cc

080021ec <motion_hw_step_high>:

void motion_hw_step_high(uint8_t axis)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d814      	bhi.n	8002226 <motion_hw_step_high+0x3a>
    gpio_bsrr_set(g_axis[axis].step_port, g_axis[axis].step_pin);
 80021fc:	79fa      	ldrb	r2, [r7, #7]
 80021fe:	490c      	ldr	r1, [pc, #48]	@ (8002230 <motion_hw_step_high+0x44>)
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <motion_hw_step_high+0x44>)
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3304      	adds	r3, #4
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	f7ff feb4 	bl	8001f8c <gpio_bsrr_set>
 8002224:	e000      	b.n	8002228 <motion_hw_step_high+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002226:	bf00      	nop
}
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	0800f0cc 	.word	0x0800f0cc

08002234 <motion_hw_step_low>:
void motion_hw_step_low(uint8_t axis)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d814      	bhi.n	800226e <motion_hw_step_low+0x3a>
    gpio_bsrr_reset(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002244:	79fa      	ldrb	r2, [r7, #7]
 8002246:	490c      	ldr	r1, [pc, #48]	@ (8002278 <motion_hw_step_low+0x44>)
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	4908      	ldr	r1, [pc, #32]	@ (8002278 <motion_hw_step_low+0x44>)
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3304      	adds	r3, #4
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	f7ff fea3 	bl	8001fb2 <gpio_bsrr_reset>
 800226c:	e000      	b.n	8002270 <motion_hw_step_low+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 800226e:	bf00      	nop
}
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800f0cc 	.word	0x0800f0cc

0800227c <motion_hw_encoder_read_raw>:

uint32_t motion_hw_encoder_read_raw(uint8_t axis)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <motion_hw_encoder_read_raw+0x14>
 800228c:	2300      	movs	r3, #0
 800228e:	e015      	b.n	80022bc <motion_hw_encoder_read_raw+0x40>
    const motion_axis_hw_t *hw = &g_axis[axis];
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4a0b      	ldr	r2, [pc, #44]	@ (80022c8 <motion_hw_encoder_read_raw+0x4c>)
 800229c:	4413      	add	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
    if (hw->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	7d9b      	ldrb	r3, [r3, #22]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <motion_hw_encoder_read_raw+0x36>
        return (uint32_t)__HAL_TIM_GET_COUNTER(hw->tim);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	e004      	b.n	80022bc <motion_hw_encoder_read_raw+0x40>
    } else {
        return (uint32_t)(hw->lptim->Instance->CNT & 0xFFFFu);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	b29b      	uxth	r3, r3
    }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	0800f0cc 	.word	0x0800f0cc

080022cc <motion_hw_encoder_bits>:

uint8_t motion_hw_encoder_bits(uint8_t axis)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0u;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <motion_hw_encoder_bits+0x14>
 80022dc:	2300      	movs	r3, #0
 80022de:	e008      	b.n	80022f2 <motion_hw_encoder_bits+0x26>
    return g_axis[axis].counter_bits;
 80022e0:	79fa      	ldrb	r2, [r7, #7]
 80022e2:	4907      	ldr	r1, [pc, #28]	@ (8002300 <motion_hw_encoder_bits+0x34>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3320      	adds	r3, #32
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	0800f0cc 	.word	0x0800f0cc

08002304 <motion_lock>:
static int64_t g_encoder_origin[MOTION_AXIS_COUNT];
// Flags de teste/demonstração
static volatile uint8_t g_demo_continuous = 0u; // quando 1, gera passos continuamente
static const uint16_t g_demo_speed_table[4] = { 5u, 10u, 20u, 40u }; // ksteps/s aprox (1kHz)
static volatile uint8_t g_demo_speed_idx = 1u; // default ≈10k steps/s (compatível com versão anterior)
static inline uint32_t motion_lock(void) {
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230a:	f3ef 8310 	mrs	r3, PRIMASK
 800230e:	603b      	str	r3, [r7, #0]
  return(result);
 8002310:	683b      	ldr	r3, [r7, #0]
	uint32_t primask = __get_PRIMASK();
 8002312:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
}
 8002316:	bf00      	nop
	__disable_irq();
	return primask;
 8002318:	687b      	ldr	r3, [r7, #4]
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f383 8810 	msr	PRIMASK, r3
}
 8002338:	bf00      	nop
	__set_PRIMASK(primask);
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <motion_total_for_axis>:
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <motion_total_for_axis+0x18>
 8002358:	2b01      	cmp	r3, #1
 800235a:	d003      	beq.n	8002364 <motion_total_for_axis+0x1e>
 800235c:	e005      	b.n	800236a <motion_total_for_axis+0x24>
	case AXIS_X:
		return req->sx;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	e004      	b.n	800236e <motion_total_for_axis+0x28>
	case AXIS_Y:
		return req->sy;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	e001      	b.n	800236e <motion_total_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->sz;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
	}
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <motion_velocity_for_axis>:
static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <motion_velocity_for_axis+0x18>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d003      	beq.n	8002398 <motion_velocity_for_axis+0x1e>
 8002390:	e005      	b.n	800239e <motion_velocity_for_axis+0x24>
	case AXIS_X:
		return req->vx;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	885b      	ldrh	r3, [r3, #2]
 8002396:	e004      	b.n	80023a2 <motion_velocity_for_axis+0x28>
	case AXIS_Y:
		return req->vy;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	891b      	ldrh	r3, [r3, #8]
 800239c:	e001      	b.n	80023a2 <motion_velocity_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->vz;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8a1b      	ldrh	r3, [r3, #16]
	}
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <motion_kp_for_axis>:
static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <motion_kp_for_axis+0x18>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d003      	beq.n	80023cc <motion_kp_for_axis+0x1e>
 80023c4:	e005      	b.n	80023d2 <motion_kp_for_axis+0x24>
	case AXIS_X:
		return req->kp_x;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8b1b      	ldrh	r3, [r3, #24]
 80023ca:	e004      	b.n	80023d6 <motion_kp_for_axis+0x28>
	case AXIS_Y:
		return req->kp_y;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8bdb      	ldrh	r3, [r3, #30]
 80023d0:	e001      	b.n	80023d6 <motion_kp_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->kp_z;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
	}
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <motion_ki_for_axis>:
static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <motion_ki_for_axis+0x18>
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d003      	beq.n	8002400 <motion_ki_for_axis+0x1e>
 80023f8:	e005      	b.n	8002406 <motion_ki_for_axis+0x24>
	case AXIS_X:
		return req->ki_x;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8b5b      	ldrh	r3, [r3, #26]
 80023fe:	e004      	b.n	800240a <motion_ki_for_axis+0x28>
	case AXIS_Y:
		return req->ki_y;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8c1b      	ldrh	r3, [r3, #32]
 8002404:	e001      	b.n	800240a <motion_ki_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->ki_z;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
	}
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <motion_kd_for_axis>:
static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <motion_kd_for_axis+0x18>
 8002428:	2b01      	cmp	r3, #1
 800242a:	d003      	beq.n	8002434 <motion_kd_for_axis+0x1e>
 800242c:	e005      	b.n	800243a <motion_kd_for_axis+0x24>
	case AXIS_X:
		return req->kd_x;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8b9b      	ldrh	r3, [r3, #28]
 8002432:	e004      	b.n	800243e <motion_kd_for_axis+0x28>
	case AXIS_Y:
		return req->kd_y;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002438:	e001      	b.n	800243e <motion_kd_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->kd_z;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
	}
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <motion_clamp_error>:
static inline int8_t motion_clamp_error(int32_t value) {
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	if (value > 127)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b7f      	cmp	r3, #127	@ 0x7f
 8002456:	dd01      	ble.n	800245c <motion_clamp_error+0x12>
		return 127;
 8002458:	237f      	movs	r3, #127	@ 0x7f
 800245a:	e008      	b.n	800246e <motion_clamp_error+0x24>
	if (value < -128)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002462:	da02      	bge.n	800246a <motion_clamp_error+0x20>
		return -128;
 8002464:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002468:	e001      	b.n	800246e <motion_clamp_error+0x24>
	return (int8_t) value;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	b25b      	sxtb	r3, r3
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <motion_refresh_status_locked>:
static void motion_refresh_status_locked(void) {
 800247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002480:	b0a3      	sub	sp, #140	@ 0x8c
 8002482:	af00      	add	r7, sp, #0
	g_status.queue_depth = (uint8_t) (g_queue_count
			+ (g_has_active_segment ? 1u : 0u));
 8002484:	4b9a      	ldr	r3, [pc, #616]	@ (80026f0 <motion_refresh_status_locked+0x274>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
	g_status.queue_depth = (uint8_t) (g_queue_count
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <motion_refresh_status_locked+0x16>
 800248e:	2201      	movs	r2, #1
 8002490:	e000      	b.n	8002494 <motion_refresh_status_locked+0x18>
 8002492:	2200      	movs	r2, #0
 8002494:	4b97      	ldr	r3, [pc, #604]	@ (80026f4 <motion_refresh_status_locked+0x278>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4413      	add	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4a96      	ldr	r2, [pc, #600]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 800249e:	7053      	strb	r3, [r2, #1]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80024a6:	e118      	b.n	80026da <motion_refresh_status_locked+0x25e>
		const motion_axis_state_t *ax = &g_axis_state[axis];
 80024a8:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4a91      	ldr	r2, [pc, #580]	@ (80026fc <motion_refresh_status_locked+0x280>)
 80024b6:	4413      	add	r3, r2
 80024b8:	677b      	str	r3, [r7, #116]	@ 0x74
		uint32_t total = ax->total_steps;
 80024ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	673b      	str	r3, [r7, #112]	@ 0x70
		uint32_t emitted = ax->emitted_steps;
 80024c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
		uint8_t pct = 0u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		if (g_has_active_segment && total > 0u) {
 80024cc:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <motion_refresh_status_locked+0x274>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d049      	beq.n	800256a <motion_refresh_status_locked+0xee>
 80024d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d046      	beq.n	800256a <motion_refresh_status_locked+0xee>
			uint64_t scaled = (uint64_t) emitted * 100u;
 80024dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024de:	2200      	movs	r2, #0
 80024e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80024e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024e8:	1891      	adds	r1, r2, r2
 80024ea:	6239      	str	r1, [r7, #32]
 80024ec:	415b      	adcs	r3, r3
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80024f6:	eb12 0801 	adds.w	r8, r2, r1
 80024fa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80024fc:	eb43 0901 	adc.w	r9, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800250c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002510:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002514:	eb18 0102 	adds.w	r1, r8, r2
 8002518:	6439      	str	r1, [r7, #64]	@ 0x40
 800251a:	eb49 0303 	adc.w	r3, r9, r3
 800251e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002522:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002526:	4602      	mov	r2, r0
 8002528:	189b      	adds	r3, r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800252e:	460a      	mov	r2, r1
 8002530:	4153      	adcs	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002538:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			pct = (uint8_t) (scaled / total);
 800253c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800253e:	2200      	movs	r2, #0
 8002540:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002542:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002548:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800254c:	f7fd fe90 	bl	8000270 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4613      	mov	r3, r2
 8002556:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			if (pct > 100u)
 800255a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d954      	bls.n	800260c <motion_refresh_status_locked+0x190>
				pct = 100u;
 8002562:	2364      	movs	r3, #100	@ 0x64
 8002564:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		if (g_has_active_segment && total > 0u) {
 8002568:	e050      	b.n	800260c <motion_refresh_status_locked+0x190>
		} else if (total == 0u && g_has_active_segment) {
 800256a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <motion_refresh_status_locked+0x106>
 8002570:	4b5f      	ldr	r3, [pc, #380]	@ (80026f0 <motion_refresh_status_locked+0x274>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <motion_refresh_status_locked+0x106>
			pct = 100u;
 800257a:	2364      	movs	r3, #100	@ 0x64
 800257c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002580:	e045      	b.n	800260e <motion_refresh_status_locked+0x192>
		} else if (!g_has_active_segment && total > 0u) {
 8002582:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <motion_refresh_status_locked+0x274>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d140      	bne.n	800260e <motion_refresh_status_locked+0x192>
 800258c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800258e:	2b00      	cmp	r3, #0
 8002590:	d03d      	beq.n	800260e <motion_refresh_status_locked+0x192>
			pct = (emitted >= total) ?
 8002592:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002596:	429a      	cmp	r2, r3
 8002598:	d234      	bcs.n	8002604 <motion_refresh_status_locked+0x188>
					100u : (uint8_t) (((uint64_t) emitted * 100u) / total);
 800259a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800259c:	2200      	movs	r2, #0
 800259e:	469a      	mov	sl, r3
 80025a0:	4693      	mov	fp, r2
 80025a2:	4652      	mov	r2, sl
 80025a4:	465b      	mov	r3, fp
 80025a6:	1891      	adds	r1, r2, r2
 80025a8:	6139      	str	r1, [r7, #16]
 80025aa:	415b      	adcs	r3, r3
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025b2:	eb12 040a 	adds.w	r4, r2, sl
 80025b6:	eb43 050b 	adc.w	r5, r3, fp
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	016b      	lsls	r3, r5, #5
 80025c4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80025c8:	0162      	lsls	r2, r4, #5
 80025ca:	18a1      	adds	r1, r4, r2
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	eb45 0303 	adc.w	r3, r5, r3
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025d8:	460b      	mov	r3, r1
 80025da:	eb13 030a 	adds.w	r3, r3, sl
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30
 80025e0:	4613      	mov	r3, r2
 80025e2:	eb43 030b 	adc.w	r3, r3, fp
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ea:	2200      	movs	r2, #0
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80025f8:	f7fd fe3a 	bl	8000270 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
			pct = (emitted >= total) ?
 8002600:	b2d3      	uxtb	r3, r2
 8002602:	e000      	b.n	8002606 <motion_refresh_status_locked+0x18a>
 8002604:	2364      	movs	r3, #100	@ 0x64
 8002606:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800260a:	e000      	b.n	800260e <motion_refresh_status_locked+0x192>
		if (g_has_active_segment && total > 0u) {
 800260c:	bf00      	nop
		}
		int64_t actual_counts = g_encoder_position[axis]
 800260e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002612:	4a3b      	ldr	r2, [pc, #236]	@ (8002700 <motion_refresh_status_locked+0x284>)
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	e9d3 0100 	ldrd	r0, r1, [r3]
				- g_encoder_origin[axis];
 800261c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002620:	4a38      	ldr	r2, [pc, #224]	@ (8002704 <motion_refresh_status_locked+0x288>)
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
		int64_t actual_counts = g_encoder_position[axis]
 800262a:	1a86      	subs	r6, r0, r2
 800262c:	603e      	str	r6, [r7, #0]
 800262e:	eb61 0303 	sbc.w	r3, r1, r3
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002638:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		if (actual_counts > (int64_t) INT32_MAX)
 800263c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002640:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002644:	f173 0300 	sbcs.w	r3, r3, #0
 8002648:	db06      	blt.n	8002658 <motion_refresh_status_locked+0x1dc>
			actual_counts = INT32_MAX;
 800264a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8002656:	e00c      	b.n	8002672 <motion_refresh_status_locked+0x1f6>
		else if (actual_counts < (int64_t) INT32_MIN)
 8002658:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800265c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002660:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002664:	da05      	bge.n	8002672 <motion_refresh_status_locked+0x1f6>
			actual_counts = INT32_MIN;
 8002666:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		int32_t desired_counts = (int32_t) ax->target_steps;
 8002672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	65fb      	str	r3, [r7, #92]	@ 0x5c
		int32_t err = desired_counts - (int32_t) actual_counts;
 8002678:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800267a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	65bb      	str	r3, [r7, #88]	@ 0x58
		int8_t err8 = motion_clamp_error(err);
 8002680:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002682:	f7ff fee2 	bl	800244a <motion_clamp_error>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		switch (axis) {
 800268c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <motion_refresh_status_locked+0x21e>
 8002694:	2b01      	cmp	r3, #1
 8002696:	d009      	beq.n	80026ac <motion_refresh_status_locked+0x230>
 8002698:	e011      	b.n	80026be <motion_refresh_status_locked+0x242>
		case AXIS_X:
			g_status.pctX = pct;
 800269a:	4a17      	ldr	r2, [pc, #92]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 800269c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80026a0:	7093      	strb	r3, [r2, #2]
			g_status.pidErrX = err8;
 80026a2:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 80026a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026a8:	7153      	strb	r3, [r2, #5]
			break;
 80026aa:	e011      	b.n	80026d0 <motion_refresh_status_locked+0x254>
		case AXIS_Y:
			g_status.pctY = pct;
 80026ac:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 80026ae:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80026b2:	70d3      	strb	r3, [r2, #3]
			g_status.pidErrY = err8;
 80026b4:	4a10      	ldr	r2, [pc, #64]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 80026b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026ba:	7193      	strb	r3, [r2, #6]
			break;
 80026bc:	e008      	b.n	80026d0 <motion_refresh_status_locked+0x254>
		case AXIS_Z:
		default:
			g_status.pctZ = pct;
 80026be:	4a0e      	ldr	r2, [pc, #56]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 80026c0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80026c4:	7113      	strb	r3, [r2, #4]
			g_status.pidErrZ = err8;
 80026c6:	4a0c      	ldr	r2, [pc, #48]	@ (80026f8 <motion_refresh_status_locked+0x27c>)
 80026c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026cc:	71d3      	strb	r3, [r2, #7]
			break;
 80026ce:	bf00      	nop
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80026d0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026d4:	3301      	adds	r3, #1
 80026d6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80026da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026de:	2b02      	cmp	r3, #2
 80026e0:	f67f aee2 	bls.w	80024a8 <motion_refresh_status_locked+0x2c>
		}
	}
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	378c      	adds	r7, #140	@ 0x8c
 80026ea:	46bd      	mov	sp, r7
 80026ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f0:	20000114 	.word	0x20000114
 80026f4:	20000c1a 	.word	0x20000c1a
 80026f8:	200000c4 	.word	0x200000c4
 80026fc:	200000cc 	.word	0x200000cc
 8002700:	20000c20 	.word	0x20000c20
 8002704:	20000c48 	.word	0x20000c48

08002708 <motion_stop_all_axes_locked>:
static void motion_stop_all_axes_locked(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	e05a      	b.n	80027ca <motion_stop_all_axes_locked+0xc2>
                motion_hw_step_low(axis);
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd8c 	bl	8002234 <motion_hw_step_low>
                motion_hw_enable(axis, 0u);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fd23 	bl	800216c <motion_hw_enable>
                g_axis_state[axis].total_steps = 0u;
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	492c      	ldr	r1, [pc, #176]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
                g_axis_state[axis].target_steps = 0u;
 8002738:	79fa      	ldrb	r2, [r7, #7]
 800273a:	4928      	ldr	r1, [pc, #160]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	3304      	adds	r3, #4
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
                g_axis_state[axis].emitted_steps = 0u;
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	4923      	ldr	r1, [pc, #140]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3308      	adds	r3, #8
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].velocity_per_tick = 0u;
 8002760:	79fa      	ldrb	r2, [r7, #7]
 8002762:	491e      	ldr	r1, [pc, #120]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	330c      	adds	r3, #12
 8002770:	2200      	movs	r2, #0
 8002772:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].kp = 0u;
 8002774:	79fa      	ldrb	r2, [r7, #7]
 8002776:	4919      	ldr	r1, [pc, #100]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	330e      	adds	r3, #14
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].ki = 0u;
 8002788:	79fa      	ldrb	r2, [r7, #7]
 800278a:	4914      	ldr	r1, [pc, #80]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	3310      	adds	r3, #16
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].kd = 0u;
 800279c:	79fa      	ldrb	r2, [r7, #7]
 800279e:	490f      	ldr	r1, [pc, #60]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3312      	adds	r3, #18
 80027ac:	2200      	movs	r2, #0
 80027ae:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].step_high = 0u;
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	490a      	ldr	r1, [pc, #40]	@ (80027dc <motion_stop_all_axes_locked+0xd4>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3314      	adds	r3, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	3301      	adds	r3, #1
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d9a1      	bls.n	8002714 <motion_stop_all_axes_locked+0xc>
	}
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200000cc 	.word	0x200000cc

080027e0 <motion_queue_clear_locked>:
static void motion_queue_clear_locked(void) {
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	g_queue_head = 0u;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <motion_queue_clear_locked+0x20>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
	g_queue_tail = 0u;
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <motion_queue_clear_locked+0x24>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
	g_queue_count = 0u;
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <motion_queue_clear_locked+0x28>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20000c18 	.word	0x20000c18
 8002804:	20000c19 	.word	0x20000c19
 8002808:	20000c1a 	.word	0x20000c1a

0800280c <motion_queue_push_locked>:
static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 8002814:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <motion_queue_push_locked+0x68>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b3f      	cmp	r3, #63	@ 0x3f
 800281a:	d902      	bls.n	8002822 <motion_queue_push_locked+0x16>
		return PROTO_ERR_RANGE;
 800281c:	f06f 0303 	mvn.w	r3, #3
 8002820:	e024      	b.n	800286c <motion_queue_push_locked+0x60>
	g_queue[g_queue_tail].req = *req;
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <motion_queue_push_locked+0x6c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <motion_queue_push_locked+0x70>)
 800282a:	232c      	movs	r3, #44	@ 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800283a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800283c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800283e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	g_queue_tail = (uint8_t) ((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <motion_queue_push_locked+0x6c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <motion_queue_push_locked+0x6c>)
 8002858:	701a      	strb	r2, [r3, #0]
	++g_queue_count;
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <motion_queue_push_locked+0x68>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <motion_queue_push_locked+0x68>)
 8002864:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 8002866:	f7ff fe09 	bl	800247c <motion_refresh_status_locked>
	return PROTO_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bdb0      	pop	{r4, r5, r7, pc}
 8002874:	20000c1a 	.word	0x20000c1a
 8002878:	20000c19 	.word	0x20000c19
 800287c:	20000118 	.word	0x20000118

08002880 <motion_queue_pop_locked>:
static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 8002880:	b4b0      	push	{r4, r5, r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	if (g_queue_count == 0u)
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <motion_queue_pop_locked+0x6c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <motion_queue_pop_locked+0x14>
		return 0;
 8002890:	2300      	movs	r3, #0
 8002892:	e025      	b.n	80028e0 <motion_queue_pop_locked+0x60>
	if (out)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <motion_queue_pop_locked+0x40>
		*out = g_queue[g_queue_head].req;
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <motion_queue_pop_locked+0x70>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <motion_queue_pop_locked+0x74>)
 80028a4:	232c      	movs	r3, #44	@ 0x2c
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	460c      	mov	r4, r1
 80028ae:	461d      	mov	r5, r3
 80028b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	g_queue_head = (uint8_t) ((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <motion_queue_pop_locked+0x70>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <motion_queue_pop_locked+0x70>)
 80028d0:	701a      	strb	r2, [r3, #0]
	--g_queue_count;
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <motion_queue_pop_locked+0x6c>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <motion_queue_pop_locked+0x6c>)
 80028dc:	701a      	strb	r2, [r3, #0]
	return 1;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bcb0      	pop	{r4, r5, r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000c1a 	.word	0x20000c1a
 80028f0:	20000c18 	.word	0x20000c18
 80028f4:	20000118 	.word	0x20000118

080028f8 <motion_begin_segment_locked>:
static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	if (!seg)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d078      	beq.n	80029f8 <motion_begin_segment_locked+0x100>
		return;
	g_has_active_segment = 1u;
 8002906:	4b3e      	ldr	r3, [pc, #248]	@ (8002a00 <motion_begin_segment_locked+0x108>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
 8002910:	e06e      	b.n	80029f0 <motion_begin_segment_locked+0xf8>
		motion_axis_state_t *ax = &g_axis_state[axis];
 8002912:	7dfa      	ldrb	r2, [r7, #23]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4a39      	ldr	r2, [pc, #228]	@ (8002a04 <motion_begin_segment_locked+0x10c>)
 800291e:	4413      	add	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
		uint32_t total = motion_total_for_axis(seg, axis);
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fd0d 	bl	8002346 <motion_total_for_axis>
 800292c:	60f8      	str	r0, [r7, #12]
		uint16_t velocity = motion_velocity_for_axis(seg, axis);
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fd21 	bl	800237a <motion_velocity_for_axis>
 8002938:	4603      	mov	r3, r0
 800293a:	817b      	strh	r3, [r7, #10]
		ax->total_steps = total;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	601a      	str	r2, [r3, #0]
		ax->target_steps = 0u;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
		ax->emitted_steps = 0u;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
		ax->velocity_per_tick = velocity;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	897a      	ldrh	r2, [r7, #10]
 8002952:	819a      	strh	r2, [r3, #12]
		ax->kp = motion_kp_for_axis(seg, axis);
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fd28 	bl	80023ae <motion_kp_for_axis>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	81da      	strh	r2, [r3, #14]
		ax->ki = motion_ki_for_axis(seg, axis);
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fd39 	bl	80023e2 <motion_ki_for_axis>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	821a      	strh	r2, [r3, #16]
		ax->kd = motion_kd_for_axis(seg, axis);
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fd4a 	bl	8002416 <motion_kd_for_axis>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	825a      	strh	r2, [r3, #18]
		ax->step_high = 0u;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2200      	movs	r2, #0
 800298e:	751a      	strb	r2, [r3, #20]
                motion_hw_step_low(axis);
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc4e 	bl	8002234 <motion_hw_step_low>
                motion_hw_set_dir(axis,
                                (uint8_t) ((seg->dirMask >> axis) & 0x1u));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	461a      	mov	r2, r3
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	fa42 f303 	asr.w	r3, r2, r3
                motion_hw_set_dir(axis,
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fb9b 	bl	80020ec <motion_hw_set_dir>
                if (total > 0u)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <motion_begin_segment_locked+0xd0>
                        motion_hw_enable(axis, 1u);
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fbd3 	bl	800216c <motion_hw_enable>
 80029c6:	e004      	b.n	80029d2 <motion_begin_segment_locked+0xda>
                else
                        motion_hw_enable(axis, 0u);
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fbcd 	bl	800216c <motion_hw_enable>
		g_encoder_origin[axis] = g_encoder_position[axis];
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	7df9      	ldrb	r1, [r7, #23]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a08 <motion_begin_segment_locked+0x110>)
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	480a      	ldr	r0, [pc, #40]	@ (8002a0c <motion_begin_segment_locked+0x114>)
 80029e2:	00c9      	lsls	r1, r1, #3
 80029e4:	4401      	add	r1, r0
 80029e6:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	3301      	adds	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d98d      	bls.n	8002912 <motion_begin_segment_locked+0x1a>
 80029f6:	e000      	b.n	80029fa <motion_begin_segment_locked+0x102>
		return;
 80029f8:	bf00      	nop
	}
}
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000114 	.word	0x20000114
 8002a04:	200000cc 	.word	0x200000cc
 8002a08:	20000c20 	.word	0x20000c20
 8002a0c:	20000c48 	.word	0x20000c48

08002a10 <motion_try_start_next_locked>:
static uint8_t motion_try_start_next_locked(void) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af00      	add	r7, sp, #0
	move_queue_add_req_t next;
	if (!motion_queue_pop_locked(&next))
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff31 	bl	8002880 <motion_queue_pop_locked>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <motion_try_start_next_locked+0x18>
		return 0u;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e004      	b.n	8002a32 <motion_try_start_next_locked+0x22>
	motion_begin_segment_locked(&next);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff64 	bl	80028f8 <motion_begin_segment_locked>
	return 1u;
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3730      	adds	r7, #48	@ 0x30
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <motion_update_encoders>:
static void motion_update_encoders(void) {
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b088      	sub	sp, #32
 8002a42:	af00      	add	r7, sp, #0
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
 8002a48:	e05c      	b.n	8002b04 <motion_update_encoders+0xc8>
                uint32_t now = motion_hw_encoder_read_raw(axis);
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fc15 	bl	800227c <motion_hw_encoder_read_raw>
 8002a52:	61b8      	str	r0, [r7, #24]
                uint8_t bits = motion_hw_encoder_bits(axis);
 8002a54:	7ffb      	ldrb	r3, [r7, #31]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fc38 	bl	80022cc <motion_hw_encoder_bits>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	75fb      	strb	r3, [r7, #23]
                if (bits == 16u) {
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d127      	bne.n	8002ab6 <motion_update_encoders+0x7a>
                        uint16_t prev = (uint16_t) g_encoder_last_raw[axis];
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
 8002a68:	4a2b      	ldr	r2, [pc, #172]	@ (8002b18 <motion_update_encoders+0xdc>)
 8002a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6e:	81fb      	strh	r3, [r7, #14]
                        int16_t delta = (int16_t) ((uint16_t) now - prev);
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	81bb      	strh	r3, [r7, #12]
                        g_encoder_last_raw[axis] = (uint16_t) now;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4a24      	ldr	r2, [pc, #144]	@ (8002b18 <motion_update_encoders+0xdc>)
 8002a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        g_encoder_position[axis] += delta;
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	4a23      	ldr	r2, [pc, #140]	@ (8002b1c <motion_update_encoders+0xe0>)
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002a9a:	17c8      	asrs	r0, r1, #31
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4605      	mov	r5, r0
 8002aa0:	7ff9      	ldrb	r1, [r7, #31]
 8002aa2:	eb12 0a04 	adds.w	sl, r2, r4
 8002aa6:	eb43 0b05 	adc.w	fp, r3, r5
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <motion_update_encoders+0xe0>)
 8002aac:	00cb      	lsls	r3, r1, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	e9c3 ab00 	strd	sl, fp, [r3]
 8002ab4:	e023      	b.n	8002afe <motion_update_encoders+0xc2>
                } else {
                        int32_t delta = (int32_t) (now - g_encoder_last_raw[axis]);
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <motion_update_encoders+0xdc>)
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	613b      	str	r3, [r7, #16]
                        g_encoder_last_raw[axis] = now;
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
 8002ac6:	4914      	ldr	r1, [pc, #80]	@ (8002b18 <motion_update_encoders+0xdc>)
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        g_encoder_position[axis] += delta;
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <motion_update_encoders+0xe0>)
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	6939      	ldr	r1, [r7, #16]
 8002adc:	17c8      	asrs	r0, r1, #31
 8002ade:	4688      	mov	r8, r1
 8002ae0:	4681      	mov	r9, r0
 8002ae2:	7ff9      	ldrb	r1, [r7, #31]
 8002ae4:	eb12 0008 	adds.w	r0, r2, r8
 8002ae8:	6038      	str	r0, [r7, #0]
 8002aea:	eb43 0309 	adc.w	r3, r3, r9
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <motion_update_encoders+0xe0>)
 8002af2:	00cb      	lsls	r3, r1, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002afa:	e9c3 1200 	strd	r1, r2, [r3]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002afe:	7ffb      	ldrb	r3, [r7, #31]
 8002b00:	3301      	adds	r3, #1
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	7ffb      	ldrb	r3, [r7, #31]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d99f      	bls.n	8002a4a <motion_update_encoders+0xe>
                }
        }
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b16:	bf00      	nop
 8002b18:	20000c38 	.word	0x20000c38
 8002b1c:	20000c20 	.word	0x20000c20

08002b20 <motion_send_queue_add_ack>:
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	4603      	mov	r3, r0
 8002b28:	460a      	mov	r2, r1
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71bb      	strb	r3, [r7, #6]
	uint8_t raw[6];
	move_queue_add_ack_resp_t resp = { frame_id, status };
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	733b      	strb	r3, [r7, #12]
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	737b      	strb	r3, [r7, #13]
	if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002b38:	f107 0110 	add.w	r1, r7, #16
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	2206      	movs	r2, #6
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f9d0 	bl	8000ee8 <move_queue_add_ack_resp_encoder>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <motion_send_queue_add_ack+0x48>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <motion_send_queue_add_ack+0x78>)
 8002b50:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <motion_send_queue_add_ack+0x7c>)
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <motion_send_queue_add_ack+0x80>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	f06f 0201 	mvn.w	r2, #1
 8002b5e:	2164      	movs	r1, #100	@ 0x64
 8002b60:	2002      	movs	r0, #2
 8002b62:	f7ff f9cd 	bl	8001f00 <log_event_auto>
 8002b66:	e014      	b.n	8002b92 <motion_send_queue_add_ack+0x72>
		return;
	}
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	2106      	movs	r1, #6
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f8a4 	bl	8003cbc <app_resp_push>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <motion_send_queue_add_ack+0x72>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 8002b7a:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <motion_send_queue_add_ack+0x78>)
 8002b7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <motion_send_queue_add_ack+0x84>)
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <motion_send_queue_add_ack+0x80>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	f06f 0203 	mvn.w	r2, #3
 8002b8a:	2164      	movs	r1, #100	@ 0x64
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f7ff f9b7 	bl	8001f00 <log_event_auto>
	}
}
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	0800ecac 	.word	0x0800ecac
 8002b9c:	0800ecb4 	.word	0x0800ecb4
 8002ba0:	0800ecc0 	.word	0x0800ecc0
 8002ba4:	0800ecc4 	.word	0x0800ecc4

08002ba8 <motion_send_queue_status_response>:
static void motion_send_queue_status_response(uint8_t frame_id) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[12];
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	733b      	strb	r3, [r7, #12]
			(uint8_t) g_status.state, .pidErrX = (uint8_t) g_status.pidErrX,
 8002bb6:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bbc:	737b      	strb	r3, [r7, #13]
			(uint8_t) g_status.state, .pidErrX = (uint8_t) g_status.pidErrX,
 8002bbe:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002bc0:	795b      	ldrb	r3, [r3, #5]
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bc6:	73bb      	strb	r3, [r7, #14]
			.pidErrY = (uint8_t) g_status.pidErrY, .pidErrZ =
 8002bc8:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002bca:	799b      	ldrb	r3, [r3, #6]
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bd0:	73fb      	strb	r3, [r7, #15]
					(uint8_t) g_status.pidErrZ, .pctX = g_status.pctX, .pctY =
 8002bd2:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002bd4:	79db      	ldrb	r3, [r3, #7]
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bda:	743b      	strb	r3, [r7, #16]
					(uint8_t) g_status.pidErrZ, .pctX = g_status.pctX, .pctY =
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002bde:	789b      	ldrb	r3, [r3, #2]
 8002be0:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002be2:	747b      	strb	r3, [r7, #17]
					g_status.pctY, .pctZ = g_status.pctZ, };
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002be6:	78db      	ldrb	r3, [r3, #3]
 8002be8:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bea:	74bb      	strb	r3, [r7, #18]
					g_status.pctY, .pctZ = g_status.pctZ, };
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <motion_send_queue_status_response+0xac>)
 8002bee:	791b      	ldrb	r3, [r3, #4]
 8002bf0:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002bf2:	74fb      	strb	r3, [r7, #19]
	if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002bf4:	f107 0114 	add.w	r1, r7, #20
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fa2a 	bl	8001058 <move_queue_status_resp_encoder>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <motion_send_queue_status_response+0x7c>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 8002c0a:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <motion_send_queue_status_response+0xb0>)
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <motion_send_queue_status_response+0xb4>)
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <motion_send_queue_status_response+0xb8>)
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	f06f 0201 	mvn.w	r2, #1
 8002c1a:	2164      	movs	r1, #100	@ 0x64
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7ff f96f 	bl	8001f00 <log_event_auto>
 8002c22:	e014      	b.n	8002c4e <motion_send_queue_status_response+0xa6>
		return;
	}
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	210c      	movs	r1, #12
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f846 	bl	8003cbc <app_resp_push>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <motion_send_queue_status_response+0xa6>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 8002c36:	4a08      	ldr	r2, [pc, #32]	@ (8002c58 <motion_send_queue_status_response+0xb0>)
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <motion_send_queue_status_response+0xbc>)
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <motion_send_queue_status_response+0xb8>)
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	f06f 0203 	mvn.w	r2, #3
 8002c46:	2164      	movs	r1, #100	@ 0x64
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7ff f959 	bl	8001f00 <log_event_auto>
	}
}
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200000c4 	.word	0x200000c4
 8002c58:	0800ecac 	.word	0x0800ecac
 8002c5c:	0800ecb4 	.word	0x0800ecb4
 8002c60:	0800ecd0 	.word	0x0800ecd0
 8002c64:	0800ecc4 	.word	0x0800ecc4

08002c68 <motion_send_start_response>:
static void motion_send_start_response(uint8_t frame_id) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[4];
	start_move_resp_t resp = { frame_id };
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	723b      	strb	r3, [r7, #8]
	if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK)
 8002c76:	f107 010c 	add.w	r1, r7, #12
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fa58 	bl	8001136 <start_move_resp_encoder>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d115      	bne.n	8002cb8 <motion_send_start_response+0x50>
		return;
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2104      	movs	r1, #4
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 f812 	bl	8003cbc <app_resp_push>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <motion_send_start_response+0x52>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 8002c9e:	4a08      	ldr	r2, [pc, #32]	@ (8002cc0 <motion_send_start_response+0x58>)
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <motion_send_start_response+0x5c>)
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <motion_send_start_response+0x60>)
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	f06f 0203 	mvn.w	r2, #3
 8002cae:	2164      	movs	r1, #100	@ 0x64
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7ff f925 	bl	8001f00 <log_event_auto>
 8002cb6:	e000      	b.n	8002cba <motion_send_start_response+0x52>
		return;
 8002cb8:	bf00      	nop
	}
}
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	0800ecac 	.word	0x0800ecac
 8002cc4:	0800ecd8 	.word	0x0800ecd8
 8002cc8:	0800ece8 	.word	0x0800ece8

08002ccc <motion_send_move_end_response>:
static void motion_send_move_end_response(uint8_t frame_id) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[4];
	move_end_resp_t resp = { frame_id };
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	723b      	strb	r3, [r7, #8]
	if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK)
 8002cda:	f107 010c 	add.w	r1, r7, #12
 8002cde:	f107 0308 	add.w	r3, r7, #8
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f851 	bl	8000d8c <move_end_resp_encoder>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d115      	bne.n	8002d1c <motion_send_move_end_response+0x50>
		return;
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 ffe0 	bl	8003cbc <app_resp_push>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <motion_send_move_end_response+0x52>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end",
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <motion_send_move_end_response+0x58>)
 8002d04:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <motion_send_move_end_response+0x5c>)
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <motion_send_move_end_response+0x60>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	f06f 0203 	mvn.w	r2, #3
 8002d12:	2164      	movs	r1, #100	@ 0x64
 8002d14:	2002      	movs	r0, #2
 8002d16:	f7ff f8f3 	bl	8001f00 <log_event_auto>
 8002d1a:	e000      	b.n	8002d1e <motion_send_move_end_response+0x52>
		return;
 8002d1c:	bf00      	nop
				"resp_queue_full");
	}
}
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0800ecac 	.word	0x0800ecac
 8002d28:	0800ecd8 	.word	0x0800ecd8
 8002d2c:	0800ecf0 	.word	0x0800ecf0

08002d30 <motion_service_init>:
void motion_service_init(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af04      	add	r7, sp, #16
	uint32_t primask = motion_lock();
 8002d36:	f7ff fae5 	bl	8002304 <motion_lock>
 8002d3a:	60b8      	str	r0, [r7, #8]
	memset(&g_status, 0, sizeof g_status);
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	2100      	movs	r1, #0
 8002d40:	483d      	ldr	r0, [pc, #244]	@ (8002e38 <motion_service_init+0x108>)
 8002d42:	f00a ff8d 	bl	800dc60 <memset>
	memset(g_axis_state, 0, sizeof g_axis_state);
 8002d46:	2248      	movs	r2, #72	@ 0x48
 8002d48:	2100      	movs	r1, #0
 8002d4a:	483c      	ldr	r0, [pc, #240]	@ (8002e3c <motion_service_init+0x10c>)
 8002d4c:	f00a ff88 	bl	800dc60 <memset>
	memset(g_queue, 0, sizeof g_queue);
 8002d50:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 8002d54:	2100      	movs	r1, #0
 8002d56:	483a      	ldr	r0, [pc, #232]	@ (8002e40 <motion_service_init+0x110>)
 8002d58:	f00a ff82 	bl	800dc60 <memset>
	memset(g_encoder_position, 0, sizeof g_encoder_position);
 8002d5c:	2218      	movs	r2, #24
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4838      	ldr	r0, [pc, #224]	@ (8002e44 <motion_service_init+0x114>)
 8002d62:	f00a ff7d 	bl	800dc60 <memset>
	memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 8002d66:	220c      	movs	r2, #12
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4837      	ldr	r0, [pc, #220]	@ (8002e48 <motion_service_init+0x118>)
 8002d6c:	f00a ff78 	bl	800dc60 <memset>
	memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 8002d70:	2218      	movs	r2, #24
 8002d72:	2100      	movs	r1, #0
 8002d74:	4835      	ldr	r0, [pc, #212]	@ (8002e4c <motion_service_init+0x11c>)
 8002d76:	f00a ff73 	bl	800dc60 <memset>
	/* Define velocidade inicial do demo para o menor valor da tabela */
	g_demo_speed_idx = 0u;
 8002d7a:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <motion_service_init+0x120>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
	g_status.state = MOTION_IDLE;
 8002d80:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <motion_service_init+0x108>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
	g_queue_head = g_queue_tail = g_queue_count = 0u;
 8002d86:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <motion_service_init+0x124>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <motion_service_init+0x124>)
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	4b31      	ldr	r3, [pc, #196]	@ (8002e58 <motion_service_init+0x128>)
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	4b30      	ldr	r3, [pc, #192]	@ (8002e58 <motion_service_init+0x128>)
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <motion_service_init+0x12c>)
 8002d9a:	701a      	strb	r2, [r3, #0]
	g_has_active_segment = 0u;
 8002d9c:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <motion_service_init+0x130>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
        motion_stop_all_axes_locked();
 8002da2:	f7ff fcb1 	bl	8002708 <motion_stop_all_axes_locked>
        motion_refresh_status_locked();
 8002da6:	f7ff fb69 	bl	800247c <motion_refresh_status_locked>
        motion_unlock(primask);
 8002daa:	68b8      	ldr	r0, [r7, #8]
 8002dac:	f7ff fabb 	bl	8002326 <motion_unlock>
        motion_hw_init();
 8002db0:	f7ff f914 	bl	8001fdc <motion_hw_init>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e01a      	b.n	8002df0 <motion_service_init+0xc0>
                uint32_t raw = motion_hw_encoder_read_raw(axis);
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fa5d 	bl	800227c <motion_hw_encoder_read_raw>
 8002dc2:	6078      	str	r0, [r7, #4]
                if (motion_hw_encoder_bits(axis) == 16u) {
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fa80 	bl	80022cc <motion_hw_encoder_bits>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d106      	bne.n	8002de0 <motion_service_init+0xb0>
                        g_encoder_last_raw[axis] = raw & 0xFFFFu;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	491b      	ldr	r1, [pc, #108]	@ (8002e48 <motion_service_init+0x118>)
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002dde:	e004      	b.n	8002dea <motion_service_init+0xba>
                } else {
                        g_encoder_last_raw[axis] = raw;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	4919      	ldr	r1, [pc, #100]	@ (8002e48 <motion_service_init+0x118>)
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	3301      	adds	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d9e1      	bls.n	8002dba <motion_service_init+0x8a>
                }
        }
        if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8002df6:	481b      	ldr	r0, [pc, #108]	@ (8002e64 <motion_service_init+0x134>)
 8002df8:	f006 fe2a 	bl	8009a50 <HAL_TIM_Base_Start_IT>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <motion_service_init+0xd6>
                Error_Handler();
 8002e02:	f001 fb29 	bl	8004458 <Error_Handler>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8002e06:	4818      	ldr	r0, [pc, #96]	@ (8002e68 <motion_service_init+0x138>)
 8002e08:	f006 fe22 	bl	8009a50 <HAL_TIM_Base_Start_IT>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <motion_service_init+0xe6>
		Error_Handler();
 8002e12:	f001 fb21 	bl	8004458 <Error_Handler>
	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8002e16:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <motion_service_init+0x13c>)
 8002e18:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <motion_service_init+0x140>)
 8002e1a:	9302      	str	r3, [sp, #8]
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <motion_service_init+0x144>)
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <motion_service_init+0x148>)
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f7ff f868 	bl	8001f00 <log_event_auto>
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200000c4 	.word	0x200000c4
 8002e3c:	200000cc 	.word	0x200000cc
 8002e40:	20000118 	.word	0x20000118
 8002e44:	20000c20 	.word	0x20000c20
 8002e48:	20000c38 	.word	0x20000c38
 8002e4c:	20000c48 	.word	0x20000c48
 8002e50:	20000010 	.word	0x20000010
 8002e54:	20000c1a 	.word	0x20000c1a
 8002e58:	20000c19 	.word	0x20000c19
 8002e5c:	20000c18 	.word	0x20000c18
 8002e60:	20000114 	.word	0x20000114
 8002e64:	20000f14 	.word	0x20000f14
 8002e68:	20000f60 	.word	0x20000f60
 8002e6c:	0800ecac 	.word	0x0800ecac
 8002e70:	0800ecfc 	.word	0x0800ecfc
 8002e74:	0800ed0c 	.word	0x0800ed0c
 8002e78:	0800ed10 	.word	0x0800ed10

08002e7c <motion_on_tim6_tick>:
const motion_status_t* motion_status_get(void) {
	return &g_status;
}
void motion_on_tim6_tick(void) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
        if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 8002e82:	4b57      	ldr	r3, [pc, #348]	@ (8002fe0 <motion_on_tim6_tick+0x164>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	f040 80a2 	bne.w	8002fd2 <motion_on_tim6_tick+0x156>
 8002e8e:	4b55      	ldr	r3, [pc, #340]	@ (8002fe4 <motion_on_tim6_tick+0x168>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 809c 	beq.w	8002fd2 <motion_on_tim6_tick+0x156>
                return;
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
 8002e9e:	e030      	b.n	8002f02 <motion_on_tim6_tick+0x86>
                motion_axis_state_t *ax = &g_axis_state[axis];
 8002ea0:	7dfa      	ldrb	r2, [r7, #23]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe8 <motion_on_tim6_tick+0x16c>)
 8002eac:	4413      	add	r3, r2
 8002eae:	603b      	str	r3, [r7, #0]
                if (ax->step_high) {
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7d1b      	ldrb	r3, [r3, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <motion_on_tim6_tick+0x4c>
                        motion_hw_step_low(axis);
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f9ba 	bl	8002234 <motion_hw_step_low>
                        ax->step_high = 0u;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	751a      	strb	r2, [r3, #20]
                        continue;
 8002ec6:	e019      	b.n	8002efc <motion_on_tim6_tick+0x80>
                }
                if (ax->emitted_steps >= ax->total_steps)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d212      	bcs.n	8002efa <motion_on_tim6_tick+0x7e>
                        continue;
                if (ax->emitted_steps < ax->target_steps) {
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d20d      	bcs.n	8002efc <motion_on_tim6_tick+0x80>
                        motion_hw_step_high(axis);
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f982 	bl	80021ec <motion_hw_step_high>
                        ax->step_high = 1u;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	751a      	strb	r2, [r3, #20]
                        ++ax->emitted_steps;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	e000      	b.n	8002efc <motion_on_tim6_tick+0x80>
                        continue;
 8002efa:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	3301      	adds	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d9cb      	bls.n	8002ea0 <motion_on_tim6_tick+0x24>
                }
        }
	uint8_t finished = 1u;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	757b      	strb	r3, [r7, #21]
 8002f10:	e017      	b.n	8002f42 <motion_on_tim6_tick+0xc6>
		const motion_axis_state_t *ax = &g_axis_state[axis];
 8002f12:	7d7a      	ldrb	r2, [r7, #21]
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4a32      	ldr	r2, [pc, #200]	@ (8002fe8 <motion_on_tim6_tick+0x16c>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
		if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d303      	bcc.n	8002f36 <motion_on_tim6_tick+0xba>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	7d1b      	ldrb	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <motion_on_tim6_tick+0xc0>
			finished = 0u;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75bb      	strb	r3, [r7, #22]
			break;
 8002f3a:	e005      	b.n	8002f48 <motion_on_tim6_tick+0xcc>
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f3c:	7d7b      	ldrb	r3, [r7, #21]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	757b      	strb	r3, [r7, #21]
 8002f42:	7d7b      	ldrb	r3, [r7, #21]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d9e4      	bls.n	8002f12 <motion_on_tim6_tick+0x96>
		}
	}
	if (!finished)
 8002f48:	7dbb      	ldrb	r3, [r7, #22]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d043      	beq.n	8002fd6 <motion_on_tim6_tick+0x15a>
		return;
	uint32_t primask = motion_lock();
 8002f4e:	f7ff f9d9 	bl	8002304 <motion_lock>
 8002f52:	60b8      	str	r0, [r7, #8]
	if (g_has_active_segment) {
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <motion_on_tim6_tick+0x168>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d035      	beq.n	8002fca <motion_on_tim6_tick+0x14e>
		uint8_t confirm = 1u;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	753b      	strb	r3, [r7, #20]
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	74fb      	strb	r3, [r7, #19]
 8002f66:	e017      	b.n	8002f98 <motion_on_tim6_tick+0x11c>
			const motion_axis_state_t *ax = &g_axis_state[axis];
 8002f68:	7cfa      	ldrb	r2, [r7, #19]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe8 <motion_on_tim6_tick+0x16c>)
 8002f74:	4413      	add	r3, r2
 8002f76:	607b      	str	r3, [r7, #4]
			if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d303      	bcc.n	8002f8c <motion_on_tim6_tick+0x110>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7d1b      	ldrb	r3, [r3, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <motion_on_tim6_tick+0x116>
				confirm = 0u;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	753b      	strb	r3, [r7, #20]
				break;
 8002f90:	e005      	b.n	8002f9e <motion_on_tim6_tick+0x122>
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	3301      	adds	r3, #1
 8002f96:	74fb      	strb	r3, [r7, #19]
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d9e4      	bls.n	8002f68 <motion_on_tim6_tick+0xec>
			}
		}
		if (confirm) {
 8002f9e:	7d3b      	ldrb	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <motion_on_tim6_tick+0x14e>
			if (motion_try_start_next_locked()) {
 8002fa4:	f7ff fd34 	bl	8002a10 <motion_try_start_next_locked>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <motion_on_tim6_tick+0x13a>
				g_status.state = MOTION_RUNNING;
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <motion_on_tim6_tick+0x164>)
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e007      	b.n	8002fc6 <motion_on_tim6_tick+0x14a>
			} else {
				g_has_active_segment = 0u;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <motion_on_tim6_tick+0x168>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
				motion_stop_all_axes_locked();
 8002fbc:	f7ff fba4 	bl	8002708 <motion_stop_all_axes_locked>
				g_status.state = MOTION_DONE;
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <motion_on_tim6_tick+0x164>)
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	701a      	strb	r2, [r3, #0]
			}
			motion_refresh_status_locked();
 8002fc6:	f7ff fa59 	bl	800247c <motion_refresh_status_locked>
		}
	}
	motion_unlock(primask);
 8002fca:	68b8      	ldr	r0, [r7, #8]
 8002fcc:	f7ff f9ab 	bl	8002326 <motion_unlock>
 8002fd0:	e002      	b.n	8002fd8 <motion_on_tim6_tick+0x15c>
                return;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <motion_on_tim6_tick+0x15c>
		return;
 8002fd6:	bf00      	nop
}
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000c4 	.word	0x200000c4
 8002fe4:	20000114 	.word	0x20000114
 8002fe8:	200000cc 	.word	0x200000cc

08002fec <motion_on_tim7_tick>:
void motion_on_tim7_tick(void) {
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b08c      	sub	sp, #48	@ 0x30
 8002ff2:	af00      	add	r7, sp, #0
	motion_update_encoders();
 8002ff4:	f7ff fd22 	bl	8002a3c <motion_update_encoders>
	if (g_status.state == MOTION_RUNNING && g_has_active_segment) {
 8002ff8:	4b36      	ldr	r3, [pc, #216]	@ (80030d4 <motion_on_tim7_tick+0xe8>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d15a      	bne.n	80030b8 <motion_on_tim7_tick+0xcc>
 8003002:	4b35      	ldr	r3, [pc, #212]	@ (80030d8 <motion_on_tim7_tick+0xec>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d055      	beq.n	80030b8 <motion_on_tim7_tick+0xcc>
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800300c:	2300      	movs	r3, #0
 800300e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003012:	e04d      	b.n	80030b0 <motion_on_tim7_tick+0xc4>
			motion_axis_state_t *ax = &g_axis_state[axis];
 8003014:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4a2e      	ldr	r2, [pc, #184]	@ (80030dc <motion_on_tim7_tick+0xf0>)
 8003022:	4413      	add	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
			if (ax->emitted_steps >= ax->total_steps)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d238      	bcs.n	80030a4 <motion_on_tim7_tick+0xb8>
				continue;
			uint32_t total = ax->total_steps;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
			uint32_t target = ax->target_steps;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uint32_t velocity = ax->velocity_per_tick;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	899b      	ldrh	r3, [r3, #12]
 8003042:	617b      	str	r3, [r7, #20]
			if (velocity == 0u) {
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <motion_on_tim7_tick+0x64>
				target = total;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800304e:	e025      	b.n	800309c <motion_on_tim7_tick+0xb0>
			} else {
				uint64_t next = (uint64_t) target + (uint64_t) velocity;
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	2200      	movs	r2, #0
 8003054:	461c      	mov	r4, r3
 8003056:	4615      	mov	r5, r2
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2200      	movs	r2, #0
 800305c:	4698      	mov	r8, r3
 800305e:	4691      	mov	r9, r2
 8003060:	eb14 0308 	adds.w	r3, r4, r8
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	eb45 0309 	adc.w	r3, r5, r9
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003070:	e9c7 2308 	strd	r2, r3, [r7, #32]
				if (next > total)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2200      	movs	r2, #0
 8003078:	469a      	mov	sl, r3
 800307a:	4693      	mov	fp, r2
 800307c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003080:	4592      	cmp	sl, r2
 8003082:	eb7b 0303 	sbcs.w	r3, fp, r3
 8003086:	d207      	bcs.n	8003098 <motion_on_tim7_tick+0xac>
					next = total;
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2200      	movs	r2, #0
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003094:	e9c7 2308 	strd	r2, r3, [r7, #32]
				target = (uint32_t) next;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
			}
			ax->target_steps = target;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	e000      	b.n	80030a6 <motion_on_tim7_tick+0xba>
				continue;
 80030a4:	bf00      	nop
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80030a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030aa:	3301      	adds	r3, #1
 80030ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80030b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d9ad      	bls.n	8003014 <motion_on_tim7_tick+0x28>
		}
	}
	uint32_t primask = motion_lock();
 80030b8:	f7ff f924 	bl	8002304 <motion_lock>
 80030bc:	6138      	str	r0, [r7, #16]
	motion_refresh_status_locked();
 80030be:	f7ff f9dd 	bl	800247c <motion_refresh_status_locked>
	motion_unlock(primask);
 80030c2:	6938      	ldr	r0, [r7, #16]
 80030c4:	f7ff f92f 	bl	8002326 <motion_unlock>
}
 80030c8:	bf00      	nop
 80030ca:	3730      	adds	r7, #48	@ 0x30
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d2:	bf00      	nop
 80030d4:	200000c4 	.word	0x200000c4
 80030d8:	20000114 	.word	0x20000114
 80030dc:	200000cc 	.word	0x200000cc

080030e0 <motion_on_move_queue_add>:
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b097      	sub	sp, #92	@ 0x5c
 80030e4:	af06      	add	r7, sp, #24
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	move_queue_add_req_t req;
	uint8_t ack_status = MOTION_ACK_INVALID;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t frame_id = 0u;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    if (!frame)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8087 	beq.w	800320c <motion_on_move_queue_add+0x12c>
        return;
    proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	461a      	mov	r2, r3
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fbe2 	bl	80008d0 <move_queue_add_req_decoder>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (decode_status != PROTO_OK) {
 8003112:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <motion_on_move_queue_add+0x64>
        motion_send_queue_add_ack(frame_id, ack_status);
 800311a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800311e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fcfb 	bl	8002b20 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 800312a:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 800312e:	4939      	ldr	r1, [pc, #228]	@ (8003214 <motion_on_move_queue_add+0x134>)
 8003130:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <motion_on_move_queue_add+0x138>)
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <motion_on_move_queue_add+0x13c>)
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	2164      	movs	r1, #100	@ 0x64
 800313c:	2002      	movs	r0, #2
 800313e:	f7fe fedf 	bl	8001f00 <log_event_auto>
        return;
 8003142:	e064      	b.n	800320e <motion_on_move_queue_add+0x12e>
    }
    frame_id = req.frameId;
 8003144:	7a3b      	ldrb	r3, [r7, #8]
 8003146:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* Bloqueia enfileiramento em condição de E-STOP */
    if (!safety_is_safe()) {
 800314a:	f000 fb77 	bl	800383c <safety_is_safe>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d114      	bne.n	800317e <motion_on_move_queue_add+0x9e>
        motion_send_queue_add_ack(frame_id, ack_status);
 8003154:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003158:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fcde 	bl	8002b20 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "queue_add", "blocked_safety");
 8003164:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <motion_on_move_queue_add+0x134>)
 8003166:	4b2e      	ldr	r3, [pc, #184]	@ (8003220 <motion_on_move_queue_add+0x140>)
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	4b2c      	ldr	r3, [pc, #176]	@ (800321c <motion_on_move_queue_add+0x13c>)
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	f06f 0203 	mvn.w	r2, #3
 8003174:	2164      	movs	r1, #100	@ 0x64
 8003176:	2002      	movs	r0, #2
 8003178:	f7fe fec2 	bl	8001f00 <log_event_auto>
        return;
 800317c:	e047      	b.n	800320e <motion_on_move_queue_add+0x12e>
    }
	uint32_t primask = motion_lock();
 800317e:	f7ff f8c1 	bl	8002304 <motion_lock>
 8003182:	63b8      	str	r0, [r7, #56]	@ 0x38
	proto_result_t push_status = motion_queue_push_locked(&req);
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fb3f 	bl	800280c <motion_queue_push_locked>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (push_status == PROTO_OK) {
 8003194:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003198:	2b00      	cmp	r3, #0
 800319a:	d112      	bne.n	80031c2 <motion_on_move_queue_add+0xe2>
		ack_status = MOTION_ACK_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <motion_on_move_queue_add+0x144>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <motion_on_move_queue_add+0xd6>
 80031ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <motion_on_move_queue_add+0x144>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d102      	bne.n	80031bc <motion_on_move_queue_add+0xdc>
			g_status.state = MOTION_QUEUED;
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <motion_on_move_queue_add+0x144>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
		motion_refresh_status_locked();
 80031bc:	f7ff f95e 	bl	800247c <motion_refresh_status_locked>
 80031c0:	e002      	b.n	80031c8 <motion_on_move_queue_add+0xe8>
	} else {
		ack_status = MOTION_ACK_QUEUE_FULL;
 80031c2:	2302      	movs	r3, #2
 80031c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	motion_unlock(primask);
 80031c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80031ca:	f7ff f8ac 	bl	8002326 <motion_unlock>
	motion_send_queue_add_ack(frame_id, ack_status);
 80031ce:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80031d2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fca1 	bl	8002b20 <motion_send_queue_add_ack>
	LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 80031de:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80031e2:	480c      	ldr	r0, [pc, #48]	@ (8003214 <motion_on_move_queue_add+0x134>)
 80031e4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80031e8:	7a79      	ldrb	r1, [r7, #9]
 80031ea:	460c      	mov	r4, r1
 80031ec:	490d      	ldr	r1, [pc, #52]	@ (8003224 <motion_on_move_queue_add+0x144>)
 80031ee:	7849      	ldrb	r1, [r1, #1]
 80031f0:	b2c9      	uxtb	r1, r1
 80031f2:	9104      	str	r1, [sp, #16]
 80031f4:	9403      	str	r4, [sp, #12]
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <motion_on_move_queue_add+0x148>)
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	4b07      	ldr	r3, [pc, #28]	@ (800321c <motion_on_move_queue_add+0x13c>)
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	2101      	movs	r1, #1
 8003204:	2002      	movs	r0, #2
 8003206:	f7fe fe7b 	bl	8001f00 <log_event_auto>
 800320a:	e000      	b.n	800320e <motion_on_move_queue_add+0x12e>
        return;
 800320c:	bf00      	nop
			"frame=%u dirMask=0x%02X queue=%u", (unsigned )frame_id,
			(unsigned )req.dirMask, (unsigned )g_status.queue_depth);
}
 800320e:	3744      	adds	r7, #68	@ 0x44
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	0800ecac 	.word	0x0800ecac
 8003218:	0800ed18 	.word	0x0800ed18
 800321c:	0800ed24 	.word	0x0800ed24
 8003220:	0800ed30 	.word	0x0800ed30
 8003224:	200000c4 	.word	0x200000c4
 8003228:	0800ed40 	.word	0x0800ed40

0800322c <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b08c      	sub	sp, #48	@ 0x30
 8003230:	af08      	add	r7, sp, #32
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	move_queue_status_req_t req;
	if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8003236:	f107 0308 	add.w	r3, r7, #8
 800323a:	461a      	mov	r2, r3
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fc44 	bl	8000acc <move_queue_status_req_decoder>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <motion_on_move_queue_status+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status",
 800324a:	4a1f      	ldr	r2, [pc, #124]	@ (80032c8 <motion_on_move_queue_status+0x9c>)
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <motion_on_move_queue_status+0xa0>)
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	4b1f      	ldr	r3, [pc, #124]	@ (80032d0 <motion_on_move_queue_status+0xa4>)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	f06f 0201 	mvn.w	r2, #1
 800325a:	2164      	movs	r1, #100	@ 0x64
 800325c:	2002      	movs	r0, #2
 800325e:	f7fe fe4f 	bl	8001f00 <log_event_auto>
 8003262:	e02e      	b.n	80032c2 <motion_on_move_queue_status+0x96>
				"decode_fail");
		return;
	}
	uint32_t primask = motion_lock();
 8003264:	f7ff f84e 	bl	8002304 <motion_lock>
 8003268:	60f8      	str	r0, [r7, #12]
	motion_refresh_status_locked();
 800326a:	f7ff f907 	bl	800247c <motion_refresh_status_locked>
	motion_unlock(primask);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff f859 	bl	8002326 <motion_unlock>
	motion_send_queue_status_response(req.frameId);
 8003274:	7a3b      	ldrb	r3, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fc96 	bl	8002ba8 <motion_send_queue_status_response>
	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 800327c:	4a12      	ldr	r2, [pc, #72]	@ (80032c8 <motion_on_move_queue_status+0x9c>)
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <motion_on_move_queue_status+0xa8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4619      	mov	r1, r3
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <motion_on_move_queue_status+0xa8>)
 8003288:	785b      	ldrb	r3, [r3, #1]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <motion_on_move_queue_status+0xa8>)
 8003290:	789b      	ldrb	r3, [r3, #2]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461c      	mov	r4, r3
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <motion_on_move_queue_status+0xa8>)
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461d      	mov	r5, r3
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <motion_on_move_queue_status+0xa8>)
 80032a0:	791b      	ldrb	r3, [r3, #4]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	9306      	str	r3, [sp, #24]
 80032a6:	9505      	str	r5, [sp, #20]
 80032a8:	9404      	str	r4, [sp, #16]
 80032aa:	9003      	str	r0, [sp, #12]
 80032ac:	9102      	str	r1, [sp, #8]
 80032ae:	4b0a      	ldr	r3, [pc, #40]	@ (80032d8 <motion_on_move_queue_status+0xac>)
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <motion_on_move_queue_status+0xa4>)
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	2200      	movs	r2, #0
 80032ba:	2101      	movs	r1, #1
 80032bc:	2002      	movs	r0, #2
 80032be:	f7fe fe1f 	bl	8001f00 <log_event_auto>
			"state=%u depth=%u pct=(%u,%u,%u)", (unsigned )g_status.state,
			(unsigned )g_status.queue_depth, (unsigned )g_status.pctX,
			(unsigned )g_status.pctY, (unsigned )g_status.pctZ);
}
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bdb0      	pop	{r4, r5, r7, pc}
 80032c8:	0800ecac 	.word	0x0800ecac
 80032cc:	0800ed18 	.word	0x0800ed18
 80032d0:	0800ed64 	.word	0x0800ed64
 80032d4:	200000c4 	.word	0x200000c4
 80032d8:	0800ed74 	.word	0x0800ed74

080032dc <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	start_move_req_t req;
	if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	461a      	mov	r2, r3
 80032ec:	6839      	ldr	r1, [r7, #0]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fc61 	bl	8000bb6 <start_move_req_decoder>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <motion_on_start_move+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move",
 80032fa:	4a25      	ldr	r2, [pc, #148]	@ (8003390 <motion_on_start_move+0xb4>)
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <motion_on_start_move+0xb8>)
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <motion_on_start_move+0xbc>)
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	f06f 0201 	mvn.w	r2, #1
 800330a:	2164      	movs	r1, #100	@ 0x64
 800330c:	2002      	movs	r0, #2
 800330e:	f7fe fdf7 	bl	8001f00 <log_event_auto>
 8003312:	e03a      	b.n	800338a <motion_on_start_move+0xae>
				"decode_fail");
		return;
	}
	uint8_t started = 0u;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
	uint32_t primask = motion_lock();
 8003318:	f7fe fff4 	bl	8002304 <motion_lock>
 800331c:	6138      	str	r0, [r7, #16]
	if (!safety_is_safe()) {
 800331e:	f000 fa8d 	bl	800383c <safety_is_safe>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <motion_on_start_move+0x52>
		/* Segurança não liberada: ignora início */
		started = 0u;
 8003328:	2300      	movs	r3, #0
 800332a:	75fb      	strb	r3, [r7, #23]
 800332c:	e014      	b.n	8003358 <motion_on_start_move+0x7c>
	} else if (!g_has_active_segment) {
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <motion_on_start_move+0xc0>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <motion_on_start_move+0x72>
		if (motion_try_start_next_locked()) {
 8003338:	f7ff fb6a 	bl	8002a10 <motion_try_start_next_locked>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <motion_on_start_move+0x7c>
			g_status.state = MOTION_RUNNING;
 8003342:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <motion_on_start_move+0xc4>)
 8003344:	2202      	movs	r2, #2
 8003346:	701a      	strb	r2, [r3, #0]
			started = 1u;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
 800334c:	e004      	b.n	8003358 <motion_on_start_move+0x7c>
		}
	} else {
		g_status.state = MOTION_RUNNING;
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <motion_on_start_move+0xc4>)
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
		started = 1u;
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
	}
	motion_refresh_status_locked();
 8003358:	f7ff f890 	bl	800247c <motion_refresh_status_locked>
	motion_unlock(primask);
 800335c:	6938      	ldr	r0, [r7, #16]
 800335e:	f7fe ffe2 	bl	8002326 <motion_unlock>
	motion_send_start_response(req.frameId);
 8003362:	7b3b      	ldrb	r3, [r7, #12]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fc7f 	bl	8002c68 <motion_send_start_response>
	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move",
 800336a:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <motion_on_start_move+0xb4>)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <motion_on_start_move+0x9a>
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <motion_on_start_move+0xc8>)
 8003374:	e000      	b.n	8003378 <motion_on_start_move+0x9c>
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <motion_on_start_move+0xcc>)
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <motion_on_start_move+0xbc>)
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	2200      	movs	r2, #0
 8003382:	2102      	movs	r1, #2
 8003384:	2002      	movs	r0, #2
 8003386:	f7fe fdbb 	bl	8001f00 <log_event_auto>
			started ? "running" : "ignored");
}
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	0800ecac 	.word	0x0800ecac
 8003394:	0800ed18 	.word	0x0800ed18
 8003398:	0800ed98 	.word	0x0800ed98
 800339c:	20000114 	.word	0x20000114
 80033a0:	200000c4 	.word	0x200000c4
 80033a4:	0800eda4 	.word	0x0800eda4
 80033a8:	0800edac 	.word	0x0800edac

080033ac <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af04      	add	r7, sp, #16
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
	move_end_req_t req;
	if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	461a      	mov	r2, r3
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd f9e0 	bl	8000784 <move_end_req_decoder>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <motion_on_move_end+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 80033ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <motion_on_move_end+0x9c>)
 80033cc:	4b1f      	ldr	r3, [pc, #124]	@ (800344c <motion_on_move_end+0xa0>)
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003450 <motion_on_move_end+0xa4>)
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	f06f 0201 	mvn.w	r2, #1
 80033da:	2164      	movs	r1, #100	@ 0x64
 80033dc:	2002      	movs	r0, #2
 80033de:	f7fe fd8f 	bl	8001f00 <log_event_auto>
 80033e2:	e02d      	b.n	8003440 <motion_on_move_end+0x94>
		return;
	}
	uint32_t primask = motion_lock();
 80033e4:	f7fe ff8e 	bl	8002304 <motion_lock>
 80033e8:	60f8      	str	r0, [r7, #12]
	motion_stop_all_axes_locked();
 80033ea:	f7ff f98d 	bl	8002708 <motion_stop_all_axes_locked>
	motion_queue_clear_locked();
 80033ee:	f7ff f9f7 	bl	80027e0 <motion_queue_clear_locked>
	g_has_active_segment = 0u;
 80033f2:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <motion_on_move_end+0xa8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
	g_status.state = MOTION_STOPPING;
 80033f8:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <motion_on_move_end+0xac>)
 80033fa:	2204      	movs	r2, #4
 80033fc:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 80033fe:	f7ff f83d 	bl	800247c <motion_refresh_status_locked>
	motion_unlock(primask);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7fe ff8f 	bl	8002326 <motion_unlock>
	motion_send_move_end_response(req.frameId);
 8003408:	7a3b      	ldrb	r3, [r7, #8]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fc5e 	bl	8002ccc <motion_send_move_end_response>
	primask = motion_lock();
 8003410:	f7fe ff78 	bl	8002304 <motion_lock>
 8003414:	60f8      	str	r0, [r7, #12]
	g_status.state = MOTION_IDLE;
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <motion_on_move_end+0xac>)
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 800341c:	f7ff f82e 	bl	800247c <motion_refresh_status_locked>
	motion_unlock(primask);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7fe ff80 	bl	8002326 <motion_unlock>
	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 8003426:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <motion_on_move_end+0x9c>)
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <motion_on_move_end+0xb0>)
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <motion_on_move_end+0xb4>)
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <motion_on_move_end+0xa4>)
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	2200      	movs	r2, #0
 8003438:	2102      	movs	r1, #2
 800343a:	2002      	movs	r0, #2
 800343c:	f7fe fd60 	bl	8001f00 <log_event_auto>
}
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	0800ecac 	.word	0x0800ecac
 800344c:	0800ed18 	.word	0x0800ed18
 8003450:	0800ecf0 	.word	0x0800ecf0
 8003454:	20000114 	.word	0x20000114
 8003458:	200000c4 	.word	0x200000c4
 800345c:	0800edb4 	.word	0x0800edb4
 8003460:	0800ed0c 	.word	0x0800ed0c

08003464 <motion_demo_set_continuous>:
    motion_unlock(primask);
}

// Liga/desliga gerador contínuo de passos (ignora a fila)
void motion_demo_set_continuous(uint8_t enable)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 800346e:	f7fe ff49 	bl	8002304 <motion_lock>
 8003472:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <motion_demo_set_continuous+0x1a>
 800347a:	2201      	movs	r2, #1
 800347c:	e000      	b.n	8003480 <motion_demo_set_continuous+0x1c>
 800347e:	2200      	movs	r2, #0
 8003480:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <motion_demo_set_continuous+0x108>)
 8003482:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 8003484:	4b39      	ldr	r3, [pc, #228]	@ (800356c <motion_demo_set_continuous+0x108>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d05a      	beq.n	8003544 <motion_demo_set_continuous+0xe0>
        // Programa um "segmento" muito longo e velocidade fixa por eixo
        g_has_active_segment = 1u;
 800348e:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <motion_demo_set_continuous+0x10c>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003494:	2300      	movs	r3, #0
 8003496:	75fb      	strb	r3, [r7, #23]
 8003498:	e04b      	b.n	8003532 <motion_demo_set_continuous+0xce>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800349a:	7dfa      	ldrb	r2, [r7, #23]
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4a33      	ldr	r2, [pc, #204]	@ (8003574 <motion_demo_set_continuous+0x110>)
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
            ax->total_steps = 0xFFFFFFFFu; // efetivamente contínuo
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	601a      	str	r2, [r3, #0]
            ax->target_steps = 0u;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	605a      	str	r2, [r3, #4]
            ax->emitted_steps = 0u;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
            ax->velocity_per_tick = (uint16_t)(g_demo_speed_table[g_demo_speed_idx & 0x3u] / 5u);
 80034be:	4b2e      	ldr	r3, [pc, #184]	@ (8003578 <motion_demo_set_continuous+0x114>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <motion_demo_set_continuous+0x118>)
 80034ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <motion_demo_set_continuous+0x11c>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	819a      	strh	r2, [r3, #12]
            ax->kp = ax->ki = ax->kd = 0u;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	825a      	strh	r2, [r3, #18]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8a5a      	ldrh	r2, [r3, #18]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	821a      	strh	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8a1a      	ldrh	r2, [r3, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	81da      	strh	r2, [r3, #14]
            ax->step_high = 0u;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	751a      	strb	r2, [r3, #20]
            motion_hw_step_low(axis);
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fe9a 	bl	8002234 <motion_hw_step_low>
            motion_hw_set_dir(axis, 1u);   // forward
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe fdf1 	bl	80020ec <motion_hw_set_dir>
            motion_hw_enable(axis, 1u);     // liga driver (ativo em baixo)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fe2c 	bl	800216c <motion_hw_enable>
            g_encoder_origin[axis] = g_encoder_position[axis];
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	7df9      	ldrb	r1, [r7, #23]
 8003518:	4a1a      	ldr	r2, [pc, #104]	@ (8003584 <motion_demo_set_continuous+0x120>)
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	4819      	ldr	r0, [pc, #100]	@ (8003588 <motion_demo_set_continuous+0x124>)
 8003524:	00c9      	lsls	r1, r1, #3
 8003526:	4401      	add	r1, r0
 8003528:	e9c1 2300 	strd	r2, r3, [r1]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	3301      	adds	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d9b0      	bls.n	800349a <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 8003538:	4b14      	ldr	r3, [pc, #80]	@ (800358c <motion_demo_set_continuous+0x128>)
 800353a:	2202      	movs	r2, #2
 800353c:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 800353e:	f7fe ff9d 	bl	800247c <motion_refresh_status_locked>
 8003542:	e00b      	b.n	800355c <motion_demo_set_continuous+0xf8>
    } else {
        // Para tudo e retorna a IDLE
        motion_stop_all_axes_locked();
 8003544:	f7ff f8e0 	bl	8002708 <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 8003548:	f7ff f94a 	bl	80027e0 <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 800354c:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <motion_demo_set_continuous+0x10c>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <motion_demo_set_continuous+0x128>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8003558:	f7fe ff90 	bl	800247c <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 800355c:	6938      	ldr	r0, [r7, #16]
 800355e:	f7fe fee2 	bl	8002326 <motion_unlock>
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000c60 	.word	0x20000c60
 8003570:	20000114 	.word	0x20000114
 8003574:	200000cc 	.word	0x200000cc
 8003578:	20000010 	.word	0x20000010
 800357c:	0800f138 	.word	0x0800f138
 8003580:	cccccccd 	.word	0xcccccccd
 8003584:	20000c20 	.word	0x20000c20
 8003588:	20000c48 	.word	0x20000c48
 800358c:	200000c4 	.word	0x200000c4

08003590 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	if (!htim)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00f      	beq.n	80035be <HAL_TIM_PeriodElapsedCallback+0x2e>
		return;
	if (htim->Instance == TIM6) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a09      	ldr	r2, [pc, #36]	@ (80035c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_TIM_PeriodElapsedCallback+0x1e>
		motion_on_tim6_tick();
 80035a8:	f7ff fc68 	bl	8002e7c <motion_on_tim6_tick>
 80035ac:	e008      	b.n	80035c0 <HAL_TIM_PeriodElapsedCallback+0x30>
	} else if (htim->Instance == TIM7) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a06      	ldr	r2, [pc, #24]	@ (80035cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <HAL_TIM_PeriodElapsedCallback+0x30>
		motion_on_tim7_tick();
 80035b8:	f7ff fd18 	bl	8002fec <motion_on_tim7_tick>
 80035bc:	e000      	b.n	80035c0 <HAL_TIM_PeriodElapsedCallback+0x30>
		return;
 80035be:	bf00      	nop
	} else {
		(void) htim;
	}
}
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40001000 	.word	0x40001000
 80035cc:	40001400 	.word	0x40001400

080035d0 <motion_emergency_stop>:

/* ===== API pública auxiliar ===== */
void motion_emergency_stop(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
    uint32_t primask = motion_lock();
 80035d6:	f7fe fe95 	bl	8002304 <motion_lock>
 80035da:	6078      	str	r0, [r7, #4]
    /* Desliga demo e qualquer segmento em andamento */
    g_demo_continuous = 0u;
 80035dc:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <motion_emergency_stop+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
    motion_stop_all_axes_locked();
 80035e2:	f7ff f891 	bl	8002708 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 80035e6:	f7ff f8fb 	bl	80027e0 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 80035ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <motion_emergency_stop+0x54>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
    /* Transição de estado segura */
    g_status.state = MOTION_STOPPING;
 80035f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <motion_emergency_stop+0x58>)
 80035f2:	2204      	movs	r2, #4
 80035f4:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 80035f6:	f7fe ff41 	bl	800247c <motion_refresh_status_locked>
    motion_unlock(primask);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe fe93 	bl	8002326 <motion_unlock>

    /* Retorna a IDLE logo em seguida para refletir repouso */
    primask = motion_lock();
 8003600:	f7fe fe80 	bl	8002304 <motion_lock>
 8003604:	6078      	str	r0, [r7, #4]
    g_status.state = MOTION_IDLE;
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <motion_emergency_stop+0x58>)
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 800360c:	f7fe ff36 	bl	800247c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fe fe88 	bl	8002326 <motion_unlock>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000c60 	.word	0x20000c60
 8003624:	20000114 	.word	0x20000114
 8003628:	200000c4 	.word	0x200000c4

0800362c <motion_demo_is_active>:

uint8_t motion_demo_is_active(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
    return g_demo_continuous ? 1u : 0u;
 8003630:	4b06      	ldr	r3, [pc, #24]	@ (800364c <motion_demo_is_active+0x20>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <motion_demo_is_active+0x12>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <motion_demo_is_active+0x14>
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000c60 	.word	0x20000c60

08003650 <motion_demo_cycle_speed>:

void motion_demo_cycle_speed(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
    /* Avança índice (0..3) */
    g_demo_speed_idx = (uint8_t)((g_demo_speed_idx + 1u) & 0x3u);
 8003656:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <motion_demo_cycle_speed+0x7c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <motion_demo_cycle_speed+0x7c>)
 8003668:	701a      	strb	r2, [r3, #0]
    if (!g_demo_continuous)
 800366a:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <motion_demo_cycle_speed+0x80>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d026      	beq.n	80036c2 <motion_demo_cycle_speed+0x72>
        return;
    /* Aplica nova velocidade imediatamente se demo está ativo */
    uint16_t v = (uint16_t)(g_demo_speed_table[g_demo_speed_idx & 0x3u] / 5u);
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <motion_demo_cycle_speed+0x7c>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	4a15      	ldr	r2, [pc, #84]	@ (80036d4 <motion_demo_cycle_speed+0x84>)
 8003680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003684:	4a14      	ldr	r2, [pc, #80]	@ (80036d8 <motion_demo_cycle_speed+0x88>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	80bb      	strh	r3, [r7, #4]
    uint32_t primask = motion_lock();
 800368e:	f7fe fe39 	bl	8002304 <motion_lock>
 8003692:	6038      	str	r0, [r7, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003694:	2300      	movs	r3, #0
 8003696:	71fb      	strb	r3, [r7, #7]
 8003698:	e00c      	b.n	80036b4 <motion_demo_cycle_speed+0x64>
        g_axis_state[axis].velocity_per_tick = v;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	490f      	ldr	r1, [pc, #60]	@ (80036dc <motion_demo_cycle_speed+0x8c>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	330c      	adds	r3, #12
 80036aa:	88ba      	ldrh	r2, [r7, #4]
 80036ac:	801a      	strh	r2, [r3, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	3301      	adds	r3, #1
 80036b2:	71fb      	strb	r3, [r7, #7]
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d9ef      	bls.n	800369a <motion_demo_cycle_speed+0x4a>
    }
    motion_unlock(primask);
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	f7fe fe33 	bl	8002326 <motion_unlock>
 80036c0:	e000      	b.n	80036c4 <motion_demo_cycle_speed+0x74>
        return;
 80036c2:	bf00      	nop
}
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000010 	.word	0x20000010
 80036d0:	20000c60 	.word	0x20000c60
 80036d4:	0800f138 	.word	0x0800f138
 80036d8:	cccccccd 	.word	0xcccccccd
 80036dc:	200000cc 	.word	0x200000cc

080036e0 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <probe_service_init+0x40>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <probe_service_init+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003720 <probe_service_init+0x40>)
 80036f6:	60d3      	str	r3, [r2, #12]
 80036f8:	4a09      	ldr	r2, [pc, #36]	@ (8003720 <probe_service_init+0x40>)
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	4a08      	ldr	r2, [pc, #32]	@ (8003720 <probe_service_init+0x40>)
 80036fe:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8003700:	4a08      	ldr	r2, [pc, #32]	@ (8003724 <probe_service_init+0x44>)
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <probe_service_init+0x48>)
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	4b09      	ldr	r3, [pc, #36]	@ (800372c <probe_service_init+0x4c>)
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b09      	ldr	r3, [pc, #36]	@ (8003730 <probe_service_init+0x50>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	2200      	movs	r2, #0
 8003712:	2100      	movs	r1, #0
 8003714:	2004      	movs	r0, #4
 8003716:	f7fe fbf3 	bl	8001f00 <log_event_auto>
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000c64 	.word	0x20000c64
 8003724:	0800edbc 	.word	0x0800edbc
 8003728:	0800edc4 	.word	0x0800edc4
 800372c:	0800edc8 	.word	0x0800edc8
 8003730:	0800edcc 	.word	0x0800edcc

08003734 <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af04      	add	r7, sp, #16
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 800373e:	4a08      	ldr	r2, [pc, #32]	@ (8003760 <probe_on_move_probe_level+0x2c>)
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <probe_on_move_probe_level+0x30>)
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <probe_on_move_probe_level+0x34>)
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	4b08      	ldr	r3, [pc, #32]	@ (800376c <probe_on_move_probe_level+0x38>)
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	2200      	movs	r2, #0
 8003750:	2101      	movs	r1, #1
 8003752:	2004      	movs	r0, #4
 8003754:	f7fe fbd4 	bl	8001f00 <log_event_auto>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	0800edbc 	.word	0x0800edbc
 8003764:	0800edd4 	.word	0x0800edd4
 8003768:	0800edc8 	.word	0x0800edc8
 800376c:	0800ede4 	.word	0x0800ede4

08003770 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 8003776:	4b09      	ldr	r3, [pc, #36]	@ (800379c <safety_service_init+0x2c>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 800377c:	4a08      	ldr	r2, [pc, #32]	@ (80037a0 <safety_service_init+0x30>)
 800377e:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <safety_service_init+0x34>)
 8003780:	9302      	str	r3, [sp, #8]
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <safety_service_init+0x38>)
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <safety_service_init+0x3c>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	2005      	movs	r0, #5
 8003792:	f7fe fbb5 	bl	8001f00 <log_event_auto>
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000c74 	.word	0x20000c74
 80037a0:	0800edf8 	.word	0x0800edf8
 80037a4:	0800ee00 	.word	0x0800ee00
 80037a8:	0800ee08 	.word	0x0800ee08
 80037ac:	0800ee0c 	.word	0x0800ee0c

080037b0 <safety_estop_assert>:
void safety_estop_assert(void) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af04      	add	r7, sp, #16
	g_state = SAFETY_ESTOP;
 80037b6:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <safety_estop_assert+0x2c>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_ASSERT, PROTO_OK, "estop", "assert");
 80037bc:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <safety_estop_assert+0x30>)
 80037be:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <safety_estop_assert+0x34>)
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <safety_estop_assert+0x38>)
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <safety_estop_assert+0x3c>)
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	2200      	movs	r2, #0
 80037ce:	210a      	movs	r1, #10
 80037d0:	2005      	movs	r0, #5
 80037d2:	f7fe fb95 	bl	8001f00 <log_event_auto>
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000c74 	.word	0x20000c74
 80037e0:	0800edf8 	.word	0x0800edf8
 80037e4:	0800ee14 	.word	0x0800ee14
 80037e8:	0800ee08 	.word	0x0800ee08
 80037ec:	0800ee1c 	.word	0x0800ee1c

080037f0 <safety_estop_release>:
void safety_estop_release(void) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af04      	add	r7, sp, #16
	if (g_state == SAFETY_ESTOP)
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <safety_estop_release+0x38>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <safety_estop_release+0x16>
		g_state = SAFETY_RECOVERY_WAIT;
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <safety_estop_release+0x38>)
 8003802:	2202      	movs	r2, #2
 8003804:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_RELEASE, PROTO_OK, "estop", "release");
 8003806:	4a09      	ldr	r2, [pc, #36]	@ (800382c <safety_estop_release+0x3c>)
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <safety_estop_release+0x40>)
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <safety_estop_release+0x44>)
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <safety_estop_release+0x48>)
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	2200      	movs	r2, #0
 8003818:	210b      	movs	r1, #11
 800381a:	2005      	movs	r0, #5
 800381c:	f7fe fb70 	bl	8001f00 <log_event_auto>
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000c74 	.word	0x20000c74
 800382c:	0800edf8 	.word	0x0800edf8
 8003830:	0800ee24 	.word	0x0800ee24
 8003834:	0800ee08 	.word	0x0800ee08
 8003838:	0800ee1c 	.word	0x0800ee1c

0800383c <safety_is_safe>:
int safety_is_safe(void) {
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	return g_state == SAFETY_NORMAL;
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <safety_is_safe+0x20>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000c74 	.word	0x20000c74

08003860 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	68b8      	ldr	r0, [r7, #8]
 8003870:	f7ff fc36 	bl	80030e0 <motion_on_move_queue_add>
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	68b8      	ldr	r0, [r7, #8]
 800388c:	f7ff fcce 	bl	800322c <motion_on_move_queue_status>
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	68b8      	ldr	r0, [r7, #8]
 80038a8:	f7ff fd18 	bl	80032dc <motion_on_start_move>
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	68b8      	ldr	r0, [r7, #8]
 80038c4:	f7fd fe58 	bl	8001578 <home_on_move_home>
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68b8      	ldr	r0, [r7, #8]
 80038e0:	f7ff ff28 	bl	8003734 <probe_on_move_probe_level>
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	68b8      	ldr	r0, [r7, #8]
 80038fc:	f7ff fd56 	bl	80033ac <motion_on_move_end>
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68b8      	ldr	r0, [r7, #8]
 8003918:	f7fe f992 	bl	8001c40 <led_on_led_ctrl>
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	if (!h)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01b      	beq.n	800399a <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a10      	ldr	r2, [pc, #64]	@ (80039a8 <services_register_handlers+0x54>)
 8003966:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a10      	ldr	r2, [pc, #64]	@ (80039ac <services_register_handlers+0x58>)
 800396c:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a0f      	ldr	r2, [pc, #60]	@ (80039b0 <services_register_handlers+0x5c>)
 8003972:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0f      	ldr	r2, [pc, #60]	@ (80039b4 <services_register_handlers+0x60>)
 8003978:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a0e      	ldr	r2, [pc, #56]	@ (80039b8 <services_register_handlers+0x64>)
 800397e:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0e      	ldr	r2, [pc, #56]	@ (80039bc <services_register_handlers+0x68>)
 8003984:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a0d      	ldr	r2, [pc, #52]	@ (80039c0 <services_register_handlers+0x6c>)
 800398a:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <services_register_handlers+0x70>)
 8003990:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <services_register_handlers+0x74>)
 8003996:	621a      	str	r2, [r3, #32]
 8003998:	e000      	b.n	800399c <services_register_handlers+0x48>
		return;
 800399a:	bf00      	nop
}
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	08003861 	.word	0x08003861
 80039ac:	0800387d 	.word	0x0800387d
 80039b0:	08003899 	.word	0x08003899
 80039b4:	080038b5 	.word	0x080038b5
 80039b8:	080038d1 	.word	0x080038d1
 80039bc:	080038ed 	.word	0x080038ed
 80039c0:	08003909 	.word	0x08003909
 80039c4:	08003925 	.word	0x08003925
 80039c8:	0800393d 	.word	0x0800393d

080039cc <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 80039d4:	2216      	movs	r2, #22
 80039d6:	2100      	movs	r1, #0
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f00a f941 	bl	800dc60 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3316      	adds	r3, #22
 80039e2:	2214      	movs	r2, #20
 80039e4:	21a5      	movs	r1, #165	@ 0xa5
 80039e6:	4618      	mov	r0, r3
 80039e8:	f00a f93a 	bl	800dc60 <memset>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e00b      	b.n	8003a1e <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <is_fill42+0x24>
 8003a14:	2300      	movs	r3, #0
 8003a16:	e006      	b.n	8003a26 <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b29      	cmp	r3, #41	@ 0x29
 8003a22:	d9f0      	bls.n	8003a06 <is_fill42+0x12>
    return 1;
 8003a24:	2301      	movs	r3, #1
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 8003a42:	e002      	b.n	8003a4a <find_frame+0x18>
 8003a44:	8afb      	ldrh	r3, [r7, #22]
 8003a46:	3301      	adds	r3, #1
 8003a48:	82fb      	strh	r3, [r7, #22]
 8003a4a:	8afb      	ldrh	r3, [r7, #22]
 8003a4c:	2b29      	cmp	r3, #41	@ 0x29
 8003a4e:	d805      	bhi.n	8003a5c <find_frame+0x2a>
 8003a50:	8afb      	ldrh	r3, [r7, #22]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2baa      	cmp	r3, #170	@ 0xaa
 8003a5a:	d1f3      	bne.n	8003a44 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 8003a5c:	8afb      	ldrh	r3, [r7, #22]
 8003a5e:	2b29      	cmp	r3, #41	@ 0x29
 8003a60:	d901      	bls.n	8003a66 <find_frame+0x34>
 8003a62:	2300      	movs	r3, #0
 8003a64:	e01d      	b.n	8003aa2 <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8003a66:	8afb      	ldrh	r3, [r7, #22]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	82bb      	strh	r3, [r7, #20]
 8003a6c:	e015      	b.n	8003a9a <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 8003a6e:	8abb      	ldrh	r3, [r7, #20]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b55      	cmp	r3, #85	@ 0x55
 8003a78:	d10c      	bne.n	8003a94 <find_frame+0x62>
            *off = i;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	8afa      	ldrh	r2, [r7, #22]
 8003a7e:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8003a80:	8aba      	ldrh	r2, [r7, #20]
 8003a82:	8afb      	ldrh	r3, [r7, #22]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	801a      	strh	r2, [r3, #0]
            return 1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e006      	b.n	8003aa2 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8003a94:	8abb      	ldrh	r3, [r7, #20]
 8003a96:	3301      	adds	r3, #1
 8003a98:	82bb      	strh	r3, [r7, #20]
 8003a9a:	8abb      	ldrh	r3, [r7, #20]
 8003a9c:	2b29      	cmp	r3, #41	@ 0x29
 8003a9e:	d9e6      	bls.n	8003a6e <find_frame+0x3c>
        }
    }
    return 0;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	@ 0x38
 8003ab4:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 8003aba:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <prepare_next_tx+0x90>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003ac2:	4820      	ldr	r0, [pc, #128]	@ (8003b44 <prepare_next_tx+0x94>)
 8003ac4:	f7ff ff82 	bl	80039cc <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b48 <prepare_next_tx+0x98>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e034      	b.n	8003b3a <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <prepare_next_tx+0x90>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1d39      	adds	r1, r7, #4
 8003ad6:	222a      	movs	r2, #42	@ 0x2a
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd fbad 	bl	8001238 <resp_fifo_pop>
 8003ade:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 8003ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dd23      	ble.n	8003b2e <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 8003ae6:	222a      	movs	r2, #42	@ 0x2a
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4816      	ldr	r0, [pc, #88]	@ (8003b44 <prepare_next_tx+0x94>)
 8003aec:	f00a f8b8 	bl	800dc60 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 8003af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af2:	2b14      	cmp	r3, #20
 8003af4:	dc02      	bgt.n	8003afc <prepare_next_tx+0x4c>
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	e000      	b.n	8003afe <prepare_next_tx+0x4e>
 8003afc:	2314      	movs	r3, #20
 8003afe:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 8003b00:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b02:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8003b06:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 8003b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 8003b12:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003b14:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <prepare_next_tx+0x94>)
 8003b16:	1898      	adds	r0, r3, r2
 8003b18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003b1a:	1d3a      	adds	r2, r7, #4
 8003b1c:	4413      	add	r3, r2
 8003b1e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8003b20:	4619      	mov	r1, r3
 8003b22:	f00a f928 	bl	800dd76 <memcpy>
        g_state = APP_SPI_PENDING;
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <prepare_next_tx+0x98>)
 8003b28:	2202      	movs	r2, #2
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e005      	b.n	8003b3a <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003b2e:	4805      	ldr	r0, [pc, #20]	@ (8003b44 <prepare_next_tx+0x94>)
 8003b30:	f7ff ff4c 	bl	80039cc <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <prepare_next_tx+0x98>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
    }
}
 8003b3a:	3738      	adds	r7, #56	@ 0x38
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000ce4 	.word	0x20000ce4
 8003b44:	20000d14 	.word	0x20000d14
 8003b48:	20000d40 	.word	0x20000d40

08003b4c <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 8003b50:	480d      	ldr	r0, [pc, #52]	@ (8003b88 <restart_spi_dma+0x3c>)
 8003b52:	f005 fbbb 	bl	80092cc <HAL_SPI_GetState>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d003      	beq.n	8003b64 <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <restart_spi_dma+0x40>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
        return;
 8003b62:	e00f      	b.n	8003b84 <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi2,
 8003b64:	232a      	movs	r3, #42	@ 0x2a
 8003b66:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <restart_spi_dma+0x44>)
 8003b68:	490a      	ldr	r1, [pc, #40]	@ (8003b94 <restart_spi_dma+0x48>)
 8003b6a:	4807      	ldr	r0, [pc, #28]	@ (8003b88 <restart_spi_dma+0x3c>)
 8003b6c:	f005 f8ec 	bl	8008d48 <HAL_SPI_TransmitReceive_DMA>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8003b76:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <restart_spi_dma+0x40>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
        return;
 8003b7c:	e002      	b.n	8003b84 <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <restart_spi_dma+0x4c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
}
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000d84 	.word	0x20000d84
 8003b8c:	20000d3f 	.word	0x20000d3f
 8003b90:	20000ce8 	.word	0x20000ce8
 8003b94:	20000d14 	.word	0x20000d14
 8003b98:	20000d40 	.word	0x20000d40

08003b9c <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 8003ba0:	2224      	movs	r2, #36	@ 0x24
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4813      	ldr	r0, [pc, #76]	@ (8003bf4 <app_init+0x58>)
 8003ba6:	f00a f85b 	bl	800dc60 <memset>
    services_register_handlers(&g_handlers);
 8003baa:	4812      	ldr	r0, [pc, #72]	@ (8003bf4 <app_init+0x58>)
 8003bac:	f7ff fed2 	bl	8003954 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 8003bb0:	f7fe f93a 	bl	8001e28 <log_service_init>
#endif
    safety_service_init();
 8003bb4:	f7ff fddc 	bl	8003770 <safety_service_init>
    led_service_init();
 8003bb8:	f7fd ffaa 	bl	8001b10 <led_service_init>
    home_service_init();
 8003bbc:	f7fd fcb8 	bl	8001530 <home_service_init>
    probe_service_init();
 8003bc0:	f7ff fd8e 	bl	80036e0 <probe_service_init>
    motion_service_init();
 8003bc4:	f7ff f8b4 	bl	8002d30 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 8003bc8:	f7fd fad9 	bl	800117e <resp_fifo_create>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <app_init+0x5c>)
 8003bd0:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <app_init+0x5c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a07      	ldr	r2, [pc, #28]	@ (8003bf4 <app_init+0x58>)
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4808      	ldr	r0, [pc, #32]	@ (8003bfc <app_init+0x60>)
 8003bdc:	f7fd fb72 	bl	80012c4 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003be0:	4807      	ldr	r0, [pc, #28]	@ (8003c00 <app_init+0x64>)
 8003be2:	f7ff fef3 	bl	80039cc <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 8003be6:	f7ff ffb1 	bl	8003b4c <restart_spi_dma>
    g_state = APP_SPI_READY;
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <app_init+0x68>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000cc0 	.word	0x20000cc0
 8003bf8:	20000ce4 	.word	0x20000ce4
 8003bfc:	20000c78 	.word	0x20000c78
 8003c00:	20000d14 	.word	0x20000d14
 8003c04:	20000d40 	.word	0x20000d40

08003c08 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 8003c0e:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <app_poll+0x6c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <app_poll+0x62>
    g_spi_round_done = 0u;
 8003c18:	4b16      	ldr	r3, [pc, #88]	@ (8003c74 <app_poll+0x6c>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 8003c1e:	213c      	movs	r1, #60	@ 0x3c
 8003c20:	4815      	ldr	r0, [pc, #84]	@ (8003c78 <app_poll+0x70>)
 8003c22:	f7ff fee7 	bl	80039f4 <is_fill42>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d119      	bne.n	8003c60 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	80fb      	strh	r3, [r7, #6]
 8003c30:	2300      	movs	r3, #0
 8003c32:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 8003c34:	1d3a      	adds	r2, r7, #4
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	4619      	mov	r1, r3
 8003c3a:	480f      	ldr	r0, [pc, #60]	@ (8003c78 <app_poll+0x70>)
 8003c3c:	f7ff fef9 	bl	8003a32 <find_frame>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <app_poll+0x70>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	88ba      	ldrh	r2, [r7, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	480a      	ldr	r0, [pc, #40]	@ (8003c7c <app_poll+0x74>)
 8003c54:	f7fd fc44 	bl	80014e0 <router_feed_bytes>
 8003c58:	e002      	b.n	8003c60 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 8003c5a:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <app_poll+0x78>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 8003c60:	f7ff ff26 	bl	8003ab0 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 8003c64:	f7ff ff72 	bl	8003b4c <restart_spi_dma>
 8003c68:	e000      	b.n	8003c6c <app_poll+0x64>
    if (!g_spi_round_done) return;
 8003c6a:	bf00      	nop
}
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000d3e 	.word	0x20000d3e
 8003c78:	20000ce8 	.word	0x20000ce8
 8003c7c:	20000c78 	.word	0x20000c78
 8003c80:	20000d3f 	.word	0x20000d3f

08003c84 <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a07      	ldr	r2, [pc, #28]	@ (8003cb4 <app_spi_isr_txrx_done+0x30>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d105      	bne.n	8003ca8 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <app_spi_isr_txrx_done+0x34>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8003ca8:	bf00      	nop
}
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	20000d3e 	.word	0x20000d3e

08003cbc <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <app_resp_push+0x48>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <app_resp_push+0x1e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <app_resp_push+0x1e>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	e00d      	b.n	8003cfc <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b14      	cmp	r3, #20
 8003ce4:	d902      	bls.n	8003cec <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 8003ce6:	f06f 0303 	mvn.w	r3, #3
 8003cea:	e007      	b.n	8003cfc <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <app_resp_push+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd fa4b 	bl	8001190 <resp_fifo_push>
 8003cfa:	4603      	mov	r3, r0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000ce4 	.word	0x20000ce4

08003d08 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08e      	sub	sp, #56	@ 0x38
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	2224      	movs	r2, #36	@ 0x24
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f009 ffa1 	bl	800dc60 <memset>
    TIM_MasterConfigTypeDef master = {0};
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d42:	2301      	movs	r3, #1
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d46:	2300      	movs	r3, #0
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f006 fba7 	bl	800a4a8 <HAL_TIM_Encoder_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8003d60:	f000 fb7a 	bl	8004458 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8003d6c:	f107 0308 	add.w	r3, r7, #8
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f008 fa7c 	bl	800c270 <HAL_TIMEx_MasterConfigSynchronization>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8003d7e:	f000 fb6b 	bl	8004458 <Error_Handler>
    }
}
 8003d82:	bf00      	nop
 8003d84:	3738      	adds	r7, #56	@ 0x38
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08a      	sub	sp, #40	@ 0x28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	4619      	mov	r1, r3
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f001 fe1f 	bl	8005a00 <HAL_GPIO_Init>
}
 8003dc2:	bf00      	nop
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8003de0:	2203      	movs	r2, #3
 8003de2:	2113      	movs	r1, #19
 8003de4:	4825      	ldr	r0, [pc, #148]	@ (8003e7c <board_config_apply_motion_gpio+0xb0>)
 8003de6:	f7ff ffd0 	bl	8003d8a <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8003dea:	2203      	movs	r2, #3
 8003dec:	2104      	movs	r1, #4
 8003dee:	4823      	ldr	r0, [pc, #140]	@ (8003e7c <board_config_apply_motion_gpio+0xb0>)
 8003df0:	f7ff ffcb 	bl	8003d8a <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8003df4:	2203      	movs	r2, #3
 8003df6:	210c      	movs	r1, #12
 8003df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dfc:	f7ff ffc5 	bl	8003d8a <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8003e00:	2200      	movs	r2, #0
 8003e02:	2130      	movs	r1, #48	@ 0x30
 8003e04:	481e      	ldr	r0, [pc, #120]	@ (8003e80 <board_config_apply_motion_gpio+0xb4>)
 8003e06:	f7ff ffc0 	bl	8003d8a <configure_output>
    configure_output(GPIOD, GPIO_PIN_14, GPIO_SPEED_FREQ_LOW);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e10:	481c      	ldr	r0, [pc, #112]	@ (8003e84 <board_config_apply_motion_gpio+0xb8>)
 8003e12:	f7ff ffba 	bl	8003d8a <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2117      	movs	r1, #23
 8003e1a:	4818      	ldr	r0, [pc, #96]	@ (8003e7c <board_config_apply_motion_gpio+0xb0>)
 8003e1c:	f002 f89c 	bl	8005f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8003e20:	2200      	movs	r2, #0
 8003e22:	210c      	movs	r1, #12
 8003e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e28:	f002 f896 	bl	8005f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);     /* EN_X desabilitado (alto) */
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	2110      	movs	r1, #16
 8003e30:	4813      	ldr	r0, [pc, #76]	@ (8003e80 <board_config_apply_motion_gpio+0xb4>)
 8003e32:	f002 f891 	bl	8005f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);   /* EN_Y habilitado (baixo) */
 8003e36:	2200      	movs	r2, #0
 8003e38:	2120      	movs	r1, #32
 8003e3a:	4811      	ldr	r0, [pc, #68]	@ (8003e80 <board_config_apply_motion_gpio+0xb4>)
 8003e3c:	f002 f88c 	bl	8005f58 <HAL_GPIO_WritePin>
    // EN_Z (PD14) ativo em nível baixo por solicitação: inicia habilitado
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003e40:	2200      	movs	r2, #0
 8003e42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e46:	480f      	ldr	r0, [pc, #60]	@ (8003e84 <board_config_apply_motion_gpio+0xb8>)
 8003e48:	f002 f886 	bl	8005f58 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e4c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003e50:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8003e52:	2301      	movs	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8003e56:	2307      	movs	r3, #7
 8003e58:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4808      	ldr	r0, [pc, #32]	@ (8003e80 <board_config_apply_motion_gpio+0xb4>)
 8003e60:	f001 fdce 	bl	8005a00 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 8003e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e68:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4804      	ldr	r0, [pc, #16]	@ (8003e80 <board_config_apply_motion_gpio+0xb4>)
 8003e70:	f001 fdc6 	bl	8005a00 <HAL_GPIO_Init>
}
 8003e74:	bf00      	nop
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	48000400 	.word	0x48000400
 8003e80:	48000800 	.word	0x48000800
 8003e84:	48000c00 	.word	0x48000c00

08003e88 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim3);
 8003e8c:	4803      	ldr	r0, [pc, #12]	@ (8003e9c <board_config_force_encoder_quadrature+0x14>)
 8003e8e:	f7ff ff3b 	bl	8003d08 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8003e92:	4803      	ldr	r0, [pc, #12]	@ (8003ea0 <board_config_force_encoder_quadrature+0x18>)
 8003e94:	f7ff ff38 	bl	8003d08 <configure_encoder_timer>
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000e7c 	.word	0x20000e7c
 8003ea0:	20000ec8 	.word	0x20000ec8

08003ea4 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2006      	movs	r0, #6
 8003eae:	f001 fa11 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003eb2:	2006      	movs	r0, #6
 8003eb4:	f001 fa3a 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2007      	movs	r0, #7
 8003ebe:	f001 fa09 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003ec2:	2007      	movs	r0, #7
 8003ec4:	f001 fa32 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2100      	movs	r1, #0
 8003ecc:	2008      	movs	r0, #8
 8003ece:	f001 fa01 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003ed2:	2008      	movs	r0, #8
 8003ed4:	f001 fa2a 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2100      	movs	r1, #0
 8003edc:	2028      	movs	r0, #40	@ 0x28
 8003ede:	f001 f9f9 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ee2:	2028      	movs	r0, #40	@ 0x28
 8003ee4:	f001 fa22 	bl	800532c <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2101      	movs	r1, #1
 8003eec:	2036      	movs	r0, #54	@ 0x36
 8003eee:	f001 f9f1 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ef2:	2036      	movs	r0, #54	@ 0x36
 8003ef4:	f001 fa1a 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2102      	movs	r1, #2
 8003efc:	200e      	movs	r0, #14
 8003efe:	f001 f9e9 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003f02:	200e      	movs	r0, #14
 8003f04:	f001 fa12 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	200f      	movs	r0, #15
 8003f0e:	f001 f9e1 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003f12:	200f      	movs	r0, #15
 8003f14:	f001 fa0a 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	2037      	movs	r0, #55	@ 0x37
 8003f1e:	f001 f9d9 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f22:	2037      	movs	r0, #55	@ 0x37
 8003f24:	f001 fa02 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	2025      	movs	r0, #37	@ 0x25
 8003f2e:	f001 f9d1 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f32:	2025      	movs	r0, #37	@ 0x25
 8003f34:	f001 f9fa 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2105      	movs	r1, #5
 8003f3c:	2024      	movs	r0, #36	@ 0x24
 8003f3e:	f001 f9c9 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003f42:	2024      	movs	r0, #36	@ 0x24
 8003f44:	f001 f9f2 	bl	800532c <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2106      	movs	r1, #6
 8003f4c:	2018      	movs	r0, #24
 8003f4e:	f001 f9c1 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003f52:	2018      	movs	r0, #24
 8003f54:	f001 f9ea 	bl	800532c <HAL_NVIC_EnableIRQ>
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <MX_DMA_Init+0x48>)
 8003f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f66:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa4 <MX_DMA_Init+0x48>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <MX_DMA_Init+0x48>)
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	200e      	movs	r0, #14
 8003f80:	f001 f9a8 	bl	80052d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003f84:	200e      	movs	r0, #14
 8003f86:	f001 f9d1 	bl	800532c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	200f      	movs	r0, #15
 8003f90:	f001 f9a0 	bl	80052d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003f94:	200f      	movs	r0, #15
 8003f96:	f001 f9c9 	bl	800532c <HAL_NVIC_EnableIRQ>

}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	@ 0x30
 8003fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fae:	f107 031c 	add.w	r3, r7, #28
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003fc4:	f043 0310 	orr.w	r3, r3, #16
 8003fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fca:	4b4a      	ldr	r3, [pc, #296]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fd6:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	4a46      	ldr	r2, [pc, #280]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fe2:	4b44      	ldr	r3, [pc, #272]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fee:	4b41      	ldr	r3, [pc, #260]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	4a40      	ldr	r2, [pc, #256]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004006:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	4a3a      	ldr	r2, [pc, #232]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004012:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800401e:	4b35      	ldr	r3, [pc, #212]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	4a34      	ldr	r2, [pc, #208]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800402a:	4b32      	ldr	r3, [pc, #200]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004036:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	4a2e      	ldr	r2, [pc, #184]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 800403c:	f043 0308 	orr.w	r3, r3, #8
 8004040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004042:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <MX_GPIO_Init+0x14c>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800404e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004052:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004054:	2303      	movs	r3, #3
 8004056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800405c:	f107 031c 	add.w	r3, r7, #28
 8004060:	4619      	mov	r1, r3
 8004062:	4825      	ldr	r0, [pc, #148]	@ (80040f8 <MX_GPIO_Init+0x150>)
 8004064:	f001 fccc 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8004068:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800406c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800406e:	2303      	movs	r3, #3
 8004070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004076:	f107 031c 	add.w	r3, r7, #28
 800407a:	4619      	mov	r1, r3
 800407c:	481f      	ldr	r0, [pc, #124]	@ (80040fc <MX_GPIO_Init+0x154>)
 800407e:	f001 fcbf 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004082:	2303      	movs	r3, #3
 8004084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004086:	2303      	movs	r3, #3
 8004088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	4619      	mov	r1, r3
 8004094:	481a      	ldr	r0, [pc, #104]	@ (8004100 <MX_GPIO_Init+0x158>)
 8004096:	f001 fcb3 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 800409a:	f649 7338 	movw	r3, #40760	@ 0x9f38
 800409e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040a0:	2303      	movs	r3, #3
 80040a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	4619      	mov	r1, r3
 80040ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040b2:	f001 fca5 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80040b6:	f64d 733f 	movw	r3, #57151	@ 0xdf3f
 80040ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040bc:	2303      	movs	r3, #3
 80040be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c4:	f107 031c 	add.w	r3, r7, #28
 80040c8:	4619      	mov	r1, r3
 80040ca:	480e      	ldr	r0, [pc, #56]	@ (8004104 <MX_GPIO_Init+0x15c>)
 80040cc:	f001 fc98 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80040d0:	f64f 73e4 	movw	r3, #65508	@ 0xffe4
 80040d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d6:	2303      	movs	r3, #3
 80040d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040de:	f107 031c 	add.w	r3, r7, #28
 80040e2:	4619      	mov	r1, r3
 80040e4:	4808      	ldr	r0, [pc, #32]	@ (8004108 <MX_GPIO_Init+0x160>)
 80040e6:	f001 fc8b 	bl	8005a00 <HAL_GPIO_Init>

}
 80040ea:	bf00      	nop
 80040ec:	3730      	adds	r7, #48	@ 0x30
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	48001000 	.word	0x48001000
 80040fc:	48000800 	.word	0x48000800
 8004100:	48001c00 	.word	0x48001c00
 8004104:	48000400 	.word	0x48000400
 8004108:	48000c00 	.word	0x48000c00

0800410c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8004110:	4b16      	ldr	r3, [pc, #88]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004112:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <MX_LPTIM1_Init+0x64>)
 8004114:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800411c:	4b13      	ldr	r3, [pc, #76]	@ (800416c <MX_LPTIM1_Init+0x60>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8004122:	4b12      	ldr	r3, [pc, #72]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <MX_LPTIM1_Init+0x60>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800412e:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004134:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <MX_LPTIM1_Init+0x60>)
 800413e:	2200      	movs	r2, #0
 8004140:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004144:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004148:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <MX_LPTIM1_Init+0x60>)
 800414c:	2200      	movs	r2, #0
 800414e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8004156:	4805      	ldr	r0, [pc, #20]	@ (800416c <MX_LPTIM1_Init+0x60>)
 8004158:	f001 ff64 	bl	8006024 <HAL_LPTIM_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8004162:	f000 f979 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000d44 	.word	0x20000d44
 8004170:	40007c00 	.word	0x40007c00

08004174 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0ac      	sub	sp, #176	@ 0xb0
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	2288      	movs	r2, #136	@ 0x88
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f009 fd63 	bl	800dc60 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a25      	ldr	r2, [pc, #148]	@ (8004234 <HAL_LPTIM_MspInit+0xc0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d143      	bne.n	800422c <HAL_LPTIM_MspInit+0xb8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80041a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ae:	f107 0314 	add.w	r3, r7, #20
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 fc52 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80041be:	f000 f94b 	bl	8004458 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80041c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_LPTIM_MspInit+0xc4>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <HAL_LPTIM_MspInit+0xc4>)
 80041c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004238 <HAL_LPTIM_MspInit+0xc4>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <HAL_LPTIM_MspInit+0xc4>)
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <HAL_LPTIM_MspInit+0xc4>)
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_LPTIM_MspInit+0xc4>)
 80041e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80041f2:	2305      	movs	r3, #5
 80041f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	2302      	movs	r3, #2
 80041fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800420a:	2301      	movs	r3, #1
 800420c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004210:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004214:	4619      	mov	r1, r3
 8004216:	4809      	ldr	r0, [pc, #36]	@ (800423c <HAL_LPTIM_MspInit+0xc8>)
 8004218:	f001 fbf2 	bl	8005a00 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2041      	movs	r0, #65	@ 0x41
 8004222:	f001 f857 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004226:	2041      	movs	r0, #65	@ 0x41
 8004228:	f001 f880 	bl	800532c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 800422c:	bf00      	nop
 800422e:	37b0      	adds	r7, #176	@ 0xb0
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40007c00 	.word	0x40007c00
 8004238:	40021000 	.word	0x40021000
 800423c:	48000800 	.word	0x48000800

08004240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004244:	f000 fee1 	bl	800500a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004248:	f000 f82c 	bl	80042a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800424c:	f7ff feac 	bl	8003fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004250:	f7ff fe84 	bl	8003f5c <MX_DMA_Init>
  MX_SPI2_Init();
 8004254:	f000 f924 	bl	80044a0 <MX_SPI2_Init>
  MX_TIM6_Init();
 8004258:	f000 fbf2 	bl	8004a40 <MX_TIM6_Init>
  MX_TIM5_Init();
 800425c:	f000 fb9a 	bl	8004994 <MX_TIM5_Init>
  MX_TIM7_Init();
 8004260:	f000 fc24 	bl	8004aac <MX_TIM7_Init>
  MX_TIM3_Init();
 8004264:	f000 fb40 	bl	80048e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004268:	f000 fe18 	bl	8004e9c <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800426c:	f000 fc54 	bl	8004b18 <MX_TIM15_Init>
  MX_LPTIM1_Init();
 8004270:	f7ff ff4c 	bl	800410c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8004274:	f7ff fdaa 	bl	8003dcc <board_config_apply_motion_gpio>
    board_config_force_encoder_quadrature();
 8004278:	f7ff fe06 	bl	8003e88 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 800427c:	f7ff fe12 	bl	8003ea4 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 8004280:	f7ff fc8c 	bl	8003b9c <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 8004284:	4805      	ldr	r0, [pc, #20]	@ (800429c <main+0x5c>)
 8004286:	f005 fbe3 	bl	8009a50 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 800428a:	4805      	ldr	r0, [pc, #20]	@ (80042a0 <main+0x60>)
 800428c:	f005 fbe0 	bl	8009a50 <HAL_TIM_Base_Start_IT>
    motion_demo_set_continuous(1);
 8004290:	2001      	movs	r0, #1
 8004292:	f7ff f8e7 	bl	8003464 <motion_demo_set_continuous>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8004296:	f7ff fcb7 	bl	8003c08 <app_poll>
 800429a:	e7fc      	b.n	8004296 <main+0x56>
 800429c:	20000f14 	.word	0x20000f14
 80042a0:	20000f60 	.word	0x20000f60

080042a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b096      	sub	sp, #88	@ 0x58
 80042a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	2244      	movs	r2, #68	@ 0x44
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f009 fcd4 	bl	800dc60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042b8:	463b      	mov	r3, r7
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	60da      	str	r2, [r3, #12]
 80042c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80042c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80042ca:	f002 fb9f 	bl	8006a0c <HAL_PWREx_ControlVoltageScaling>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80042d4:	f000 f8c0 	bl	8004458 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80042d8:	2310      	movs	r3, #16
 80042da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80042dc:	2301      	movs	r3, #1
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80042e4:	2360      	movs	r3, #96	@ 0x60
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042e8:	2302      	movs	r3, #2
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80042ec:	2301      	movs	r3, #1
 80042ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80042f4:	2328      	movs	r3, #40	@ 0x28
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80042f8:	2307      	movs	r3, #7
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042fc:	2302      	movs	r3, #2
 80042fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004300:	2302      	movs	r3, #2
 8004302:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4618      	mov	r0, r3
 800430a:	f002 fbe1 	bl	8006ad0 <HAL_RCC_OscConfig>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004314:	f000 f8a0 	bl	8004458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004318:	230f      	movs	r3, #15
 800431a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800431c:	2303      	movs	r3, #3
 800431e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800432e:	463b      	mov	r3, r7
 8004330:	2104      	movs	r1, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f003 f8ce 	bl	80074d4 <HAL_RCC_ClockConfig>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800433e:	f000 f88b 	bl	8004458 <Error_Handler>
  }
}
 8004342:	bf00      	nop
 8004344:	3758      	adds	r7, #88	@ 0x58
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fc96 	bl	8003c84 <app_spi_isr_txrx_done>
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    if (hspi == NULL) return;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_SPI_ErrorCallback+0x36>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a0c      	ldr	r2, [pc, #48]	@ (80043a4 <HAL_SPI_ErrorCallback+0x44>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d110      	bne.n	800439a <HAL_SPI_ErrorCallback+0x3a>

    g_spi_last_error = hspi->ErrorCode;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <HAL_SPI_ErrorCallback+0x48>)
 800437e:	6013      	str	r3, [r2, #0]
    g_spi_error_count++;
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_SPI_ErrorCallback+0x4c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <HAL_SPI_ErrorCallback+0x4c>)
 8004388:	6013      	str	r3, [r2, #0]

    /* Indicação visual simples para diagnóstico */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800438a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800438e:	4808      	ldr	r0, [pc, #32]	@ (80043b0 <HAL_SPI_ErrorCallback+0x50>)
 8004390:	f001 fe0e 	bl	8005fb0 <HAL_GPIO_TogglePin>
 8004394:	e002      	b.n	800439c <HAL_SPI_ErrorCallback+0x3c>
    if (hspi == NULL) return;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_SPI_ErrorCallback+0x3c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800439a:	bf00      	nop
}
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40003800 	.word	0x40003800
 80043a8:	20000d80 	.word	0x20000d80
 80043ac:	20000d7c 	.word	0x20000d7c
 80043b0:	48000400 	.word	0x48000400

080043b4 <HAL_GPIO_EXTI_Callback>:
/* Botões de segurança (EXTI):
 * - B1 (PC13): E-STOP imediato (pressionado = nível baixo)
 * - B2 (PC0): Release/recover + funções extras do demo (pressionado = baixo)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d019      	beq.n	80043f8 <HAL_GPIO_EXTI_Callback+0x44>
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043c8:	d135      	bne.n	8004436 <HAL_GPIO_EXTI_Callback+0x82>
    case GPIO_PIN_13: /* B1 - E-STOP */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80043ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043ce:	481e      	ldr	r0, [pc, #120]	@ (8004448 <HAL_GPIO_EXTI_Callback+0x94>)
 80043d0:	f001 fda2 	bl	8005f18 <HAL_GPIO_ReadPin>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d12f      	bne.n	800443a <HAL_GPIO_EXTI_Callback+0x86>
            /* Pressionado: aciona E-STOP e para tudo agora */
            safety_estop_assert();
 80043da:	f7ff f9e9 	bl	80037b0 <safety_estop_assert>
            motion_emergency_stop();
 80043de:	f7ff f8f7 	bl	80035d0 <motion_emergency_stop>
            /* Opcionalmente interrompe os timers para cessar qualquer atividade em ISR */
            HAL_TIM_Base_Stop_IT(&htim6);
 80043e2:	481a      	ldr	r0, [pc, #104]	@ (800444c <HAL_GPIO_EXTI_Callback+0x98>)
 80043e4:	f005 fbe8 	bl	8009bb8 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim7);
 80043e8:	4819      	ldr	r0, [pc, #100]	@ (8004450 <HAL_GPIO_EXTI_Callback+0x9c>)
 80043ea:	f005 fbe5 	bl	8009bb8 <HAL_TIM_Base_Stop_IT>
            /* Se houver PWM em TIM15 (LED/auxiliar), pare também */
            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80043ee:	2100      	movs	r1, #0
 80043f0:	4818      	ldr	r0, [pc, #96]	@ (8004454 <HAL_GPIO_EXTI_Callback+0xa0>)
 80043f2:	f005 ff25 	bl	800a240 <HAL_TIM_PWM_Stop>
        }
        break;
 80043f6:	e020      	b.n	800443a <HAL_GPIO_EXTI_Callback+0x86>
    case GPIO_PIN_0:  /* B2 - Release/Resume + demo speed step */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80043f8:	2101      	movs	r1, #1
 80043fa:	4813      	ldr	r0, [pc, #76]	@ (8004448 <HAL_GPIO_EXTI_Callback+0x94>)
 80043fc:	f001 fd8c 	bl	8005f18 <HAL_GPIO_ReadPin>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d11b      	bne.n	800443e <HAL_GPIO_EXTI_Callback+0x8a>
            /* Libera segurança */
            safety_estop_release();
 8004406:	f7ff f9f3 	bl	80037f0 <safety_estop_release>
            /* Garante que os timers base voltem a rodar */
            HAL_TIM_Base_Start_IT(&htim6);
 800440a:	4810      	ldr	r0, [pc, #64]	@ (800444c <HAL_GPIO_EXTI_Callback+0x98>)
 800440c:	f005 fb20 	bl	8009a50 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim7);
 8004410:	480f      	ldr	r0, [pc, #60]	@ (8004450 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004412:	f005 fb1d 	bl	8009a50 <HAL_TIM_Base_Start_IT>
            /* Reativa movimentos conforme contexto */
            if (motion_demo_is_active()) {
 8004416:	f7ff f909 	bl	800362c <motion_demo_is_active>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_GPIO_EXTI_Callback+0x72>
                /* Cicla velocidade no modo demo contínuo */
                motion_demo_cycle_speed();
 8004420:	f7ff f916 	bl	8003650 <motion_demo_cycle_speed>
                motion_demo_set_continuous(1);
                /* Se usa PWM em TIM15 para indicação, retome */
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
            }
        }
        break;
 8004424:	e00b      	b.n	800443e <HAL_GPIO_EXTI_Callback+0x8a>
                motion_demo_set_continuous(1);
 8004426:	2001      	movs	r0, #1
 8004428:	f7ff f81c 	bl	8003464 <motion_demo_set_continuous>
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800442c:	2100      	movs	r1, #0
 800442e:	4809      	ldr	r0, [pc, #36]	@ (8004454 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004430:	f005 fd56 	bl	8009ee0 <HAL_TIM_PWM_Start>
        break;
 8004434:	e003      	b.n	800443e <HAL_GPIO_EXTI_Callback+0x8a>
    case GPIO_PIN_1:
    case GPIO_PIN_2:
    default:
        /* Reservado para sensores PROX/limites; sem ação específica aqui */
        break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 800443e:	bf00      	nop
    }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	48000800 	.word	0x48000800
 800444c:	20000f14 	.word	0x20000f14
 8004450:	20000f60 	.word	0x20000f60
 8004454:	20000fac 	.word	0x20000fac

08004458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 800445c:	f04f 32ff 	mov.w	r2, #4294967295
 8004460:	2164      	movs	r1, #100	@ 0x64
 8004462:	2000      	movs	r0, #0
 8004464:	f7fd fcee 	bl	8001e44 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <Error_Handler+0x24>)
 800446a:	4905      	ldr	r1, [pc, #20]	@ (8004480 <Error_Handler+0x28>)
 800446c:	4805      	ldr	r0, [pc, #20]	@ (8004484 <Error_Handler+0x2c>)
 800446e:	f7fd fcfd 	bl	8001e6c <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8004472:	b672      	cpsid	i
}
 8004474:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <Error_Handler+0x1e>
 800447a:	bf00      	nop
 800447c:	0800ee2c 	.word	0x0800ee2c
 8004480:	0800ee3c 	.word	0x0800ee3c
 8004484:	0800ee44 	.word	0x0800ee44

08004488 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80044a4:	4b18      	ldr	r3, [pc, #96]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044a6:	4a19      	ldr	r2, [pc, #100]	@ (800450c <MX_SPI2_Init+0x6c>)
 80044a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80044aa:	4b17      	ldr	r3, [pc, #92]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044b0:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044b6:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044b8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80044bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80044be:	4b12      	ldr	r3, [pc, #72]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044c0:	2202      	movs	r2, #2
 80044c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80044c4:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044d8:	2200      	movs	r2, #0
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044e4:	2207      	movs	r2, #7
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044f4:	4804      	ldr	r0, [pc, #16]	@ (8004508 <MX_SPI2_Init+0x68>)
 80044f6:	f004 fa39 	bl	800896c <HAL_SPI_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8004500:	f7ff ffaa 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000d84 	.word	0x20000d84
 800450c:	40003800 	.word	0x40003800

08004510 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	@ 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a44      	ldr	r2, [pc, #272]	@ (8004640 <HAL_SPI_MspInit+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f040 8082 	bne.w	8004638 <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004534:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <HAL_SPI_MspInit+0x134>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <HAL_SPI_MspInit+0x134>)
 800453a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800453e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004540:	4b40      	ldr	r3, [pc, #256]	@ (8004644 <HAL_SPI_MspInit+0x134>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800454c:	4b3d      	ldr	r3, [pc, #244]	@ (8004644 <HAL_SPI_MspInit+0x134>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004550:	4a3c      	ldr	r2, [pc, #240]	@ (8004644 <HAL_SPI_MspInit+0x134>)
 8004552:	f043 0308 	orr.w	r3, r3, #8
 8004556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004558:	4b3a      	ldr	r3, [pc, #232]	@ (8004644 <HAL_SPI_MspInit+0x134>)
 800455a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> SPI2_NSS
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8004564:	231b      	movs	r3, #27
 8004566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004568:	2302      	movs	r3, #2
 800456a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004570:	2303      	movs	r3, #3
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004574:	2305      	movs	r3, #5
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004578:	f107 0314 	add.w	r3, r7, #20
 800457c:	4619      	mov	r1, r3
 800457e:	4832      	ldr	r0, [pc, #200]	@ (8004648 <HAL_SPI_MspInit+0x138>)
 8004580:	f001 fa3e 	bl	8005a00 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8004584:	4b31      	ldr	r3, [pc, #196]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 8004586:	4a32      	ldr	r2, [pc, #200]	@ (8004650 <HAL_SPI_MspInit+0x140>)
 8004588:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800458a:	4b30      	ldr	r3, [pc, #192]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 800458c:	2201      	movs	r2, #1
 800458e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004590:	4b2e      	ldr	r3, [pc, #184]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004596:	4b2d      	ldr	r3, [pc, #180]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800459c:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 800459e:	2280      	movs	r2, #128	@ 0x80
 80045a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045a2:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80045ae:	4b27      	ldr	r3, [pc, #156]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045b0:	2220      	movs	r2, #32
 80045b2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045b4:	4b25      	ldr	r3, [pc, #148]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80045ba:	4824      	ldr	r0, [pc, #144]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045bc:	f000 feda 	bl	8005374 <HAL_DMA_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80045c6:	f7ff ff47 	bl	8004458 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80045d0:	4a1e      	ldr	r2, [pc, #120]	@ (800464c <HAL_SPI_MspInit+0x13c>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80045d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004658 <HAL_SPI_MspInit+0x148>)
 80045da:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80045dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045de:	2201      	movs	r2, #1
 80045e0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045e4:	2210      	movs	r2, #16
 80045e6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045ee:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045f0:	2280      	movs	r2, #128	@ 0x80
 80045f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045f4:	4b17      	ldr	r3, [pc, #92]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045fa:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004600:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 8004602:	2220      	movs	r2, #32
 8004604:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004606:	4b13      	ldr	r3, [pc, #76]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 8004608:	2200      	movs	r2, #0
 800460a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800460c:	4811      	ldr	r0, [pc, #68]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 800460e:	f000 feb1 	bl	8005374 <HAL_DMA_Init>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004618:	f7ff ff1e 	bl	8004458 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 8004620:	655a      	str	r2, [r3, #84]	@ 0x54
 8004622:	4a0c      	ldr	r2, [pc, #48]	@ (8004654 <HAL_SPI_MspInit+0x144>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	2100      	movs	r1, #0
 800462c:	2024      	movs	r0, #36	@ 0x24
 800462e:	f000 fe51 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004632:	2024      	movs	r0, #36	@ 0x24
 8004634:	f000 fe7a 	bl	800532c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004638:	bf00      	nop
 800463a:	3728      	adds	r7, #40	@ 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40003800 	.word	0x40003800
 8004644:	40021000 	.word	0x40021000
 8004648:	48000c00 	.word	0x48000c00
 800464c:	20000de8 	.word	0x20000de8
 8004650:	40020044 	.word	0x40020044
 8004654:	20000e30 	.word	0x20000e30
 8004658:	40020058 	.word	0x40020058

0800465c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <HAL_MspInit+0x44>)
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	4a0e      	ldr	r2, [pc, #56]	@ (80046a0 <HAL_MspInit+0x44>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6613      	str	r3, [r2, #96]	@ 0x60
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <HAL_MspInit+0x44>)
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <HAL_MspInit+0x44>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467e:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <HAL_MspInit+0x44>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004684:	6593      	str	r3, [r2, #88]	@ 0x58
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <HAL_MspInit+0x44>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000

080046a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80046a8:	bf00      	nop
 80046aa:	e7fd      	b.n	80046a8 <NMI_Handler+0x4>

080046ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <HardFault_Handler+0x4>

080046b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <MemManage_Handler+0x4>

080046bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <BusFault_Handler+0x4>

080046c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <UsageFault_Handler+0x4>

080046cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046fa:	f000 fcdb 	bl	80050b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004708:	4802      	ldr	r0, [pc, #8]	@ (8004714 <DMA1_Channel4_IRQHandler+0x10>)
 800470a:	f001 f89a 	bl	8005842 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000de8 	.word	0x20000de8

08004718 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800471c:	4802      	ldr	r0, [pc, #8]	@ (8004728 <DMA1_Channel5_IRQHandler+0x10>)
 800471e:	f001 f890 	bl	8005842 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000e30 	.word	0x20000e30

0800472c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004730:	4802      	ldr	r0, [pc, #8]	@ (800473c <SPI2_IRQHandler+0x10>)
 8004732:	f004 fcad 	bl	8009090 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000d84 	.word	0x20000d84

08004740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004744:	4802      	ldr	r0, [pc, #8]	@ (8004750 <TIM6_DAC_IRQHandler+0x10>)
 8004746:	f006 f92f 	bl	800a9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000f14 	.word	0x20000f14

08004754 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004758:	4802      	ldr	r0, [pc, #8]	@ (8004764 <TIM7_IRQHandler+0x10>)
 800475a:	f006 f925 	bl	800a9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000f60 	.word	0x20000f60

08004768 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800476c:	4802      	ldr	r0, [pc, #8]	@ (8004778 <LPTIM1_IRQHandler+0x10>)
 800476e:	f001 ff1f 	bl	80065b0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000d44 	.word	0x20000d44

0800477c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004780:	2001      	movs	r0, #1
 8004782:	f001 fc37 	bl	8005ff4 <HAL_GPIO_EXTI_IRQHandler>
}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}

0800478a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800478e:	2002      	movs	r0, #2
 8004790:	f001 fc30 	bl	8005ff4 <HAL_GPIO_EXTI_IRQHandler>
}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}

08004798 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800479c:	2004      	movs	r0, #4
 800479e:	f001 fc29 	bl	8005ff4 <HAL_GPIO_EXTI_IRQHandler>
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80047aa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80047ae:	f001 fc21 	bl	8005ff4 <HAL_GPIO_EXTI_IRQHandler>
}
 80047b2:	bf00      	nop
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e00a      	b.n	80047de <_read+0x28>
		*ptr++ = __io_getchar();
 80047c8:	f3af 8000 	nop.w
 80047cc:	4601      	mov	r1, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	60ba      	str	r2, [r7, #8]
 80047d4:	b2ca      	uxtb	r2, r1
 80047d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3301      	adds	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	dbf0      	blt.n	80047c8 <_read+0x12>
	}

	return len;
 80047e6:	687b      	ldr	r3, [r7, #4]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004818:	605a      	str	r2, [r3, #4]
	return 0;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <_isatty>:

int _isatty(int file) {
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004830:	2301      	movs	r3, #1
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800486c:	4b13      	ldr	r3, [pc, #76]	@ (80048bc <_sbrk+0x64>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004874:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <_sbrk+0x64>)
 8004876:	4a12      	ldr	r2, [pc, #72]	@ (80048c0 <_sbrk+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <_sbrk+0x64>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d207      	bcs.n	8004898 <_sbrk+0x40>
		errno = ENOMEM;
 8004888:	f009 fa48 	bl	800dd1c <__errno>
 800488c:	4603      	mov	r3, r0
 800488e:	220c      	movs	r2, #12
 8004890:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	e009      	b.n	80048ac <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004898:	4b08      	ldr	r3, [pc, #32]	@ (80048bc <_sbrk+0x64>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800489e:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <_sbrk+0x64>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	4a05      	ldr	r2, [pc, #20]	@ (80048bc <_sbrk+0x64>)
 80048a8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20018000 	.word	0x20018000
 80048b8:	00000400 	.word	0x00000400
 80048bc:	20000e78 	.word	0x20000e78
 80048c0:	200011d0 	.word	0x200011d0

080048c4 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <SystemInit+0x20>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	4a05      	ldr	r2, [pc, #20]	@ (80048e4 <SystemInit+0x20>)
 80048d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	@ 0x30
 80048ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048ee:	f107 030c 	add.w	r3, r7, #12
 80048f2:	2224      	movs	r2, #36	@ 0x24
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f009 f9b2 	bl	800dc60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fc:	463b      	mov	r3, r7
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004906:	4b21      	ldr	r3, [pc, #132]	@ (800498c <MX_TIM3_Init+0xa4>)
 8004908:	4a21      	ldr	r2, [pc, #132]	@ (8004990 <MX_TIM3_Init+0xa8>)
 800490a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800490c:	4b1f      	ldr	r3, [pc, #124]	@ (800498c <MX_TIM3_Init+0xa4>)
 800490e:	2200      	movs	r2, #0
 8004910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004912:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <MX_TIM3_Init+0xa4>)
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004918:	4b1c      	ldr	r3, [pc, #112]	@ (800498c <MX_TIM3_Init+0xa4>)
 800491a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800491e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004920:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <MX_TIM3_Init+0xa4>)
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004926:	4b19      	ldr	r3, [pc, #100]	@ (800498c <MX_TIM3_Init+0xa4>)
 8004928:	2200      	movs	r2, #0
 800492a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800492c:	2301      	movs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004934:	2301      	movs	r3, #1
 8004936:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004940:	2300      	movs	r3, #0
 8004942:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004944:	2301      	movs	r3, #1
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004948:	2300      	movs	r3, #0
 800494a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	4619      	mov	r1, r3
 8004956:	480d      	ldr	r0, [pc, #52]	@ (800498c <MX_TIM3_Init+0xa4>)
 8004958:	f005 fda6 	bl	800a4a8 <HAL_TIM_Encoder_Init>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004962:	f7ff fd79 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800496e:	463b      	mov	r3, r7
 8004970:	4619      	mov	r1, r3
 8004972:	4806      	ldr	r0, [pc, #24]	@ (800498c <MX_TIM3_Init+0xa4>)
 8004974:	f007 fc7c 	bl	800c270 <HAL_TIMEx_MasterConfigSynchronization>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800497e:	f7ff fd6b 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004982:	bf00      	nop
 8004984:	3730      	adds	r7, #48	@ 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000e7c 	.word	0x20000e7c
 8004990:	40000400 	.word	0x40000400

08004994 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08c      	sub	sp, #48	@ 0x30
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	2224      	movs	r2, #36	@ 0x24
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f009 f95c 	bl	800dc60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a8:	463b      	mov	r3, r7
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80049b2:	4b21      	ldr	r3, [pc, #132]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 80049b4:	4a21      	ldr	r2, [pc, #132]	@ (8004a3c <MX_TIM5_Init+0xa8>)
 80049b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80049b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049be:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80049c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d2:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80049d8:	2301      	movs	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80049ec:	2300      	movs	r3, #0
 80049ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80049f0:	2301      	movs	r3, #1
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80049fc:	f107 030c 	add.w	r3, r7, #12
 8004a00:	4619      	mov	r1, r3
 8004a02:	480d      	ldr	r0, [pc, #52]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 8004a04:	f005 fd50 	bl	800a4a8 <HAL_TIM_Encoder_Init>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8004a0e:	f7ff fd23 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a12:	2300      	movs	r3, #0
 8004a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4806      	ldr	r0, [pc, #24]	@ (8004a38 <MX_TIM5_Init+0xa4>)
 8004a20:	f007 fc26 	bl	800c270 <HAL_TIMEx_MasterConfigSynchronization>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8004a2a:	f7ff fd15 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004a2e:	bf00      	nop
 8004a30:	3730      	adds	r7, #48	@ 0x30
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000ec8 	.word	0x20000ec8
 8004a3c:	40000c00 	.word	0x40000c00

08004a40 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004a50:	4b14      	ldr	r3, [pc, #80]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a52:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <MX_TIM6_Init+0x68>)
 8004a54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8004a56:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a58:	224f      	movs	r2, #79	@ 0x4f
 8004a5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a64:	2213      	movs	r2, #19
 8004a66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a68:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a6a:	2280      	movs	r2, #128	@ 0x80
 8004a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a6e:	480d      	ldr	r0, [pc, #52]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a70:	f004 fee4 	bl	800983c <HAL_TIM_Base_Init>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004a7a:	f7ff fced 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a7e:	2320      	movs	r3, #32
 8004a80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4806      	ldr	r0, [pc, #24]	@ (8004aa4 <MX_TIM6_Init+0x64>)
 8004a8c:	f007 fbf0 	bl	800c270 <HAL_TIMEx_MasterConfigSynchronization>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004a96:	f7ff fcdf 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000f14 	.word	0x20000f14
 8004aa8:	40001000 	.word	0x40001000

08004aac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004abe:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <MX_TIM7_Init+0x68>)
 8004ac0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004ac4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004ac8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004ad2:	2209      	movs	r2, #9
 8004ad4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004ad8:	2280      	movs	r2, #128	@ 0x80
 8004ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004adc:	480c      	ldr	r0, [pc, #48]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004ade:	f004 fead 	bl	800983c <HAL_TIM_Base_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004ae8:	f7ff fcb6 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4805      	ldr	r0, [pc, #20]	@ (8004b10 <MX_TIM7_Init+0x64>)
 8004afa:	f007 fbb9 	bl	800c270 <HAL_TIMEx_MasterConfigSynchronization>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004b04:	f7ff fca8 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000f60 	.word	0x20000f60
 8004b14:	40001400 	.word	0x40001400

08004b18 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b09a      	sub	sp, #104	@ 0x68
 8004b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	609a      	str	r2, [r3, #8]
 8004b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
 8004b48:	615a      	str	r2, [r3, #20]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	222c      	movs	r2, #44	@ 0x2c
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f009 f884 	bl	800dc60 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004b58:	4b3e      	ldr	r3, [pc, #248]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c58 <MX_TIM15_Init+0x140>)
 8004b5c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b60:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8004b64:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b66:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b72:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b74:	4b37      	ldr	r3, [pc, #220]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004b7a:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b80:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004b86:	4833      	ldr	r0, [pc, #204]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004b88:	f004 fe58 	bl	800983c <HAL_TIM_Base_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8004b92:	f7ff fc61 	bl	8004458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b9c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	482c      	ldr	r0, [pc, #176]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004ba4:	f006 fada 	bl	800b15c <HAL_TIM_ConfigClockSource>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8004bae:	f7ff fc53 	bl	8004458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004bb2:	4828      	ldr	r0, [pc, #160]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004bb4:	f005 f880 	bl	8009cb8 <HAL_TIM_PWM_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8004bbe:	f7ff fc4b 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004bca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4820      	ldr	r0, [pc, #128]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004bd2:	f007 fb4d 	bl	800c270 <HAL_TIMEx_MasterConfigSynchronization>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8004bdc:	f7ff fc3c 	bl	8004458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004be0:	2360      	movs	r3, #96	@ 0x60
 8004be2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004be8:	2300      	movs	r3, #0
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004bec:	2300      	movs	r3, #0
 8004bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	4619      	mov	r1, r3
 8004c04:	4813      	ldr	r0, [pc, #76]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004c06:	f005 ffd7 	bl	800abb8 <HAL_TIM_PWM_ConfigChannel>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004c10:	f7ff fc22 	bl	8004458 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4807      	ldr	r0, [pc, #28]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004c38:	f007 fc70 	bl	800c51c <HAL_TIMEx_ConfigBreakDeadTime>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 8004c42:	f7ff fc09 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004c46:	4803      	ldr	r0, [pc, #12]	@ (8004c54 <MX_TIM15_Init+0x13c>)
 8004c48:	f000 f8d2 	bl	8004df0 <HAL_TIM_MspPostInit>

}
 8004c4c:	bf00      	nop
 8004c4e:	3768      	adds	r7, #104	@ 0x68
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000fac 	.word	0x20000fac
 8004c58:	40014000 	.word	0x40014000

08004c5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	@ 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c64:	f107 031c 	add.w	r3, r7, #28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a2f      	ldr	r2, [pc, #188]	@ (8004d38 <HAL_TIM_Encoder_MspInit+0xdc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d129      	bne.n	8004cd2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	4a2e      	ldr	r2, [pc, #184]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c96:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9a:	4a28      	ldr	r2, [pc, #160]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ca2:	4b26      	ldr	r3, [pc, #152]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cae:	23c0      	movs	r3, #192	@ 0xc0
 8004cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc2:	f107 031c 	add.w	r3, r7, #28
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ccc:	f000 fe98 	bl	8005a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004cd0:	e02d      	b.n	8004d2e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM5)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d40 <HAL_TIM_Encoder_MspInit+0xe4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d128      	bne.n	8004d2e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cdc:	4b17      	ldr	r3, [pc, #92]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	4a16      	ldr	r2, [pc, #88]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004ce2:	f043 0308 	orr.w	r3, r3, #8
 8004ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce8:	4b14      	ldr	r3, [pc, #80]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf8:	4a10      	ldr	r2, [pc, #64]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d00:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	4619      	mov	r1, r3
 8004d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d2a:	f000 fe69 	bl	8005a00 <HAL_GPIO_Init>
}
 8004d2e:	bf00      	nop
 8004d30:	3730      	adds	r7, #48	@ 0x30
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40000c00 	.word	0x40000c00

08004d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <HAL_TIM_Base_MspInit+0x9c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d114      	bne.n	8004d80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d56:	4b23      	ldr	r3, [pc, #140]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	4a22      	ldr	r2, [pc, #136]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004d5c:	f043 0310 	orr.w	r3, r3, #16
 8004d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2100      	movs	r1, #0
 8004d72:	2036      	movs	r0, #54	@ 0x36
 8004d74:	f000 faae 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d78:	2036      	movs	r0, #54	@ 0x36
 8004d7a:	f000 fad7 	bl	800532c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004d7e:	e02a      	b.n	8004dd6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_TIM_Base_MspInit+0xa4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d114      	bne.n	8004db4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004d8a:	4b16      	ldr	r3, [pc, #88]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	4a15      	ldr	r2, [pc, #84]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d96:	4b13      	ldr	r3, [pc, #76]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004da2:	2200      	movs	r2, #0
 8004da4:	2100      	movs	r1, #0
 8004da6:	2037      	movs	r0, #55	@ 0x37
 8004da8:	f000 fa94 	bl	80052d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004dac:	2037      	movs	r0, #55	@ 0x37
 8004dae:	f000 fabd 	bl	800532c <HAL_NVIC_EnableIRQ>
}
 8004db2:	e010      	b.n	8004dd6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0c      	ldr	r2, [pc, #48]	@ (8004dec <HAL_TIM_Base_MspInit+0xa8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc2:	4a08      	ldr	r2, [pc, #32]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_TIM_Base_MspInit+0xa0>)
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40001000 	.word	0x40001000
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40001400 	.word	0x40001400
 8004dec:	40014000 	.word	0x40014000

08004df0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	@ 0x28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	@ (8004e90 <HAL_TIM_MspPostInit+0xa0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d139      	bne.n	8004e86 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e12:	4b20      	ldr	r3, [pc, #128]	@ (8004e94 <HAL_TIM_MspPostInit+0xa4>)
 8004e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <HAL_TIM_MspPostInit+0xa4>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <HAL_TIM_MspPostInit+0xa4>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e94 <HAL_TIM_MspPostInit+0xa4>)
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2e:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <HAL_TIM_MspPostInit+0xa4>)
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e36:	4b17      	ldr	r3, [pc, #92]	@ (8004e94 <HAL_TIM_MspPostInit+0xa4>)
 8004e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e42:	2304      	movs	r3, #4
 8004e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e46:	2302      	movs	r3, #2
 8004e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8004e52:	230e      	movs	r3, #14
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e60:	f000 fdce 	bl	8005a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e72:	2300      	movs	r3, #0
 8004e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8004e76:	230e      	movs	r3, #14
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7a:	f107 0314 	add.w	r3, r7, #20
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4805      	ldr	r0, [pc, #20]	@ (8004e98 <HAL_TIM_MspPostInit+0xa8>)
 8004e82:	f000 fdbd 	bl	8005a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004e86:	bf00      	nop
 8004e88:	3728      	adds	r7, #40	@ 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40021000 	.word	0x40021000
 8004e98:	48000400 	.word	0x48000400

08004e9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ea0:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ea2:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <MX_USART1_UART_Init+0x5c>)
 8004ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ea6:	4b13      	ldr	r3, [pc, #76]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004eae:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ec2:	220c      	movs	r2, #12
 8004ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ecc:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ed2:	4b08      	ldr	r3, [pc, #32]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ede:	4805      	ldr	r0, [pc, #20]	@ (8004ef4 <MX_USART1_UART_Init+0x58>)
 8004ee0:	f007 fc72 	bl	800c7c8 <HAL_UART_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004eea:	f7ff fab5 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000ff8 	.word	0x20000ff8
 8004ef8:	40013800 	.word	0x40013800

08004efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0ac      	sub	sp, #176	@ 0xb0
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	2288      	movs	r2, #136	@ 0x88
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f008 fe9f 	bl	800dc60 <memset>
  if(uartHandle->Instance==USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a21      	ldr	r2, [pc, #132]	@ (8004fac <HAL_UART_MspInit+0xb0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d13a      	bne.n	8004fa2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f30:	2300      	movs	r3, #0
 8004f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f002 fd8f 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f44:	f7ff fa88 	bl	8004458 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f48:	4b19      	ldr	r3, [pc, #100]	@ (8004fb0 <HAL_UART_MspInit+0xb4>)
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4c:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <HAL_UART_MspInit+0xb4>)
 8004f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f52:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f54:	4b16      	ldr	r3, [pc, #88]	@ (8004fb0 <HAL_UART_MspInit+0xb4>)
 8004f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f60:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <HAL_UART_MspInit+0xb4>)
 8004f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f64:	4a12      	ldr	r2, [pc, #72]	@ (8004fb0 <HAL_UART_MspInit+0xb4>)
 8004f66:	f043 0302 	orr.w	r3, r3, #2
 8004f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f6c:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <HAL_UART_MspInit+0xb4>)
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f78:	23c0      	movs	r3, #192	@ 0xc0
 8004f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f90:	2307      	movs	r3, #7
 8004f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f96:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4805      	ldr	r0, [pc, #20]	@ (8004fb4 <HAL_UART_MspInit+0xb8>)
 8004f9e:	f000 fd2f 	bl	8005a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	37b0      	adds	r7, #176	@ 0xb0
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	48000400 	.word	0x48000400

08004fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ff0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fbc:	f7ff fc82 	bl	80048c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fc0:	480c      	ldr	r0, [pc, #48]	@ (8004ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004fc2:	490d      	ldr	r1, [pc, #52]	@ (8004ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004ffc <LoopForever+0xe>)
  movs r3, #0
 8004fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fc8:	e002      	b.n	8004fd0 <LoopCopyDataInit>

08004fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fce:	3304      	adds	r3, #4

08004fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fd4:	d3f9      	bcc.n	8004fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8005004 <LoopForever+0x16>)
  movs r3, #0
 8004fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fdc:	e001      	b.n	8004fe2 <LoopFillZerobss>

08004fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fe0:	3204      	adds	r2, #4

08004fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fe4:	d3fb      	bcc.n	8004fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004fe6:	f008 fe9f 	bl	800dd28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004fea:	f7ff f929 	bl	8004240 <main>

08004fee <LoopForever>:

LoopForever:
    b LoopForever
 8004fee:	e7fe      	b.n	8004fee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ff0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ff8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004ffc:	0800f1cc 	.word	0x0800f1cc
  ldr r2, =_sbss
 8005000:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005004:	200011d0 	.word	0x200011d0

08005008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005008:	e7fe      	b.n	8005008 <ADC1_2_IRQHandler>

0800500a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005014:	2003      	movs	r0, #3
 8005016:	f000 f93d 	bl	8005294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800501a:	200f      	movs	r0, #15
 800501c:	f000 f80e 	bl	800503c <HAL_InitTick>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	71fb      	strb	r3, [r7, #7]
 800502a:	e001      	b.n	8005030 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800502c:	f7ff fb16 	bl	800465c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005030:	79fb      	ldrb	r3, [r7, #7]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005048:	4b17      	ldr	r3, [pc, #92]	@ (80050a8 <HAL_InitTick+0x6c>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d023      	beq.n	8005098 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005050:	4b16      	ldr	r3, [pc, #88]	@ (80050ac <HAL_InitTick+0x70>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b14      	ldr	r3, [pc, #80]	@ (80050a8 <HAL_InitTick+0x6c>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800505e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f978 	bl	800535c <HAL_SYSTICK_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d809      	bhi.n	800508c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005078:	2200      	movs	r2, #0
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	f000 f928 	bl	80052d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005084:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <HAL_InitTick+0x74>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e007      	b.n	800509c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e004      	b.n	800509c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e001      	b.n	800509c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2000001c 	.word	0x2000001c
 80050ac:	20000014 	.word	0x20000014
 80050b0:	20000018 	.word	0x20000018

080050b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_IncTick+0x20>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_IncTick+0x24>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <HAL_IncTick+0x24>)
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000001c 	.word	0x2000001c
 80050d8:	20001080 	.word	0x20001080

080050dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return uwTick;
 80050e0:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <HAL_GetTick+0x14>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20001080 	.word	0x20001080

080050f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005104:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <__NVIC_SetPriorityGrouping+0x44>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005110:	4013      	ands	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800511c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005126:	4a04      	ldr	r2, [pc, #16]	@ (8005138 <__NVIC_SetPriorityGrouping+0x44>)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	60d3      	str	r3, [r2, #12]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005140:	4b04      	ldr	r3, [pc, #16]	@ (8005154 <__NVIC_GetPriorityGrouping+0x18>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	0a1b      	lsrs	r3, r3, #8
 8005146:	f003 0307 	and.w	r3, r3, #7
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	2b00      	cmp	r3, #0
 8005168:	db0b      	blt.n	8005182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	f003 021f 	and.w	r2, r3, #31
 8005170:	4907      	ldr	r1, [pc, #28]	@ (8005190 <__NVIC_EnableIRQ+0x38>)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2001      	movs	r0, #1
 800517a:	fa00 f202 	lsl.w	r2, r0, r2
 800517e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000e100 	.word	0xe000e100

08005194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	6039      	str	r1, [r7, #0]
 800519e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	db0a      	blt.n	80051be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	490c      	ldr	r1, [pc, #48]	@ (80051e0 <__NVIC_SetPriority+0x4c>)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	0112      	lsls	r2, r2, #4
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	440b      	add	r3, r1
 80051b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051bc:	e00a      	b.n	80051d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	4908      	ldr	r1, [pc, #32]	@ (80051e4 <__NVIC_SetPriority+0x50>)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	3b04      	subs	r3, #4
 80051cc:	0112      	lsls	r2, r2, #4
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	440b      	add	r3, r1
 80051d2:	761a      	strb	r2, [r3, #24]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	e000e100 	.word	0xe000e100
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b089      	sub	sp, #36	@ 0x24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f1c3 0307 	rsb	r3, r3, #7
 8005202:	2b04      	cmp	r3, #4
 8005204:	bf28      	it	cs
 8005206:	2304      	movcs	r3, #4
 8005208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3304      	adds	r3, #4
 800520e:	2b06      	cmp	r3, #6
 8005210:	d902      	bls.n	8005218 <NVIC_EncodePriority+0x30>
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3b03      	subs	r3, #3
 8005216:	e000      	b.n	800521a <NVIC_EncodePriority+0x32>
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800521c:	f04f 32ff 	mov.w	r2, #4294967295
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43da      	mvns	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	401a      	ands	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005230:	f04f 31ff 	mov.w	r1, #4294967295
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	43d9      	mvns	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005240:	4313      	orrs	r3, r2
         );
}
 8005242:	4618      	mov	r0, r3
 8005244:	3724      	adds	r7, #36	@ 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005260:	d301      	bcc.n	8005266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005262:	2301      	movs	r3, #1
 8005264:	e00f      	b.n	8005286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005266:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <SysTick_Config+0x40>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3b01      	subs	r3, #1
 800526c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800526e:	210f      	movs	r1, #15
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	f7ff ff8e 	bl	8005194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <SysTick_Config+0x40>)
 800527a:	2200      	movs	r2, #0
 800527c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800527e:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <SysTick_Config+0x40>)
 8005280:	2207      	movs	r2, #7
 8005282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	e000e010 	.word	0xe000e010

08005294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b07      	cmp	r3, #7
 80052a0:	d00f      	beq.n	80052c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d00c      	beq.n	80052c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d009      	beq.n	80052c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d006      	beq.n	80052c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d003      	beq.n	80052c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80052ba:	21a6      	movs	r1, #166	@ 0xa6
 80052bc:	4804      	ldr	r0, [pc, #16]	@ (80052d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80052be:	f7ff f8e3 	bl	8004488 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ff16 	bl	80050f4 <__NVIC_SetPriorityGrouping>
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0800ee48 	.word	0x0800ee48

080052d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b0f      	cmp	r3, #15
 80052ea:	d903      	bls.n	80052f4 <HAL_NVIC_SetPriority+0x20>
 80052ec:	21be      	movs	r1, #190	@ 0xbe
 80052ee:	480e      	ldr	r0, [pc, #56]	@ (8005328 <HAL_NVIC_SetPriority+0x54>)
 80052f0:	f7ff f8ca 	bl	8004488 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d903      	bls.n	8005302 <HAL_NVIC_SetPriority+0x2e>
 80052fa:	21bf      	movs	r1, #191	@ 0xbf
 80052fc:	480a      	ldr	r0, [pc, #40]	@ (8005328 <HAL_NVIC_SetPriority+0x54>)
 80052fe:	f7ff f8c3 	bl	8004488 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8005302:	f7ff ff1b 	bl	800513c <__NVIC_GetPriorityGrouping>
 8005306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	6978      	ldr	r0, [r7, #20]
 800530e:	f7ff ff6b 	bl	80051e8 <NVIC_EncodePriority>
 8005312:	4602      	mov	r2, r0
 8005314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff3a 	bl	8005194 <__NVIC_SetPriority>
}
 8005320:	bf00      	nop
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	0800ee48 	.word	0x0800ee48

0800532c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da03      	bge.n	8005346 <HAL_NVIC_EnableIRQ+0x1a>
 800533e:	21d2      	movs	r1, #210	@ 0xd2
 8005340:	4805      	ldr	r0, [pc, #20]	@ (8005358 <HAL_NVIC_EnableIRQ+0x2c>)
 8005342:	f7ff f8a1 	bl	8004488 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ff04 	bl	8005158 <__NVIC_EnableIRQ>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	0800ee48 	.word	0x0800ee48

0800535c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff73 	bl	8005250 <SysTick_Config>
 800536a:	4603      	mov	r3, r0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e19d      	b.n	80056c2 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a79      	ldr	r2, [pc, #484]	@ (8005570 <HAL_DMA_Init+0x1fc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d044      	beq.n	800541a <HAL_DMA_Init+0xa6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a77      	ldr	r2, [pc, #476]	@ (8005574 <HAL_DMA_Init+0x200>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d03f      	beq.n	800541a <HAL_DMA_Init+0xa6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a76      	ldr	r2, [pc, #472]	@ (8005578 <HAL_DMA_Init+0x204>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d03a      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a74      	ldr	r2, [pc, #464]	@ (800557c <HAL_DMA_Init+0x208>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d035      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a73      	ldr	r2, [pc, #460]	@ (8005580 <HAL_DMA_Init+0x20c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d030      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a71      	ldr	r2, [pc, #452]	@ (8005584 <HAL_DMA_Init+0x210>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d02b      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a70      	ldr	r2, [pc, #448]	@ (8005588 <HAL_DMA_Init+0x214>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d026      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a6e      	ldr	r2, [pc, #440]	@ (800558c <HAL_DMA_Init+0x218>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d021      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6d      	ldr	r2, [pc, #436]	@ (8005590 <HAL_DMA_Init+0x21c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01c      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005594 <HAL_DMA_Init+0x220>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d017      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005598 <HAL_DMA_Init+0x224>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d012      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a68      	ldr	r2, [pc, #416]	@ (800559c <HAL_DMA_Init+0x228>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00d      	beq.n	800541a <HAL_DMA_Init+0xa6>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a67      	ldr	r2, [pc, #412]	@ (80055a0 <HAL_DMA_Init+0x22c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d008      	beq.n	800541a <HAL_DMA_Init+0xa6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a65      	ldr	r2, [pc, #404]	@ (80055a4 <HAL_DMA_Init+0x230>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <HAL_DMA_Init+0xa6>
 8005412:	21a5      	movs	r1, #165	@ 0xa5
 8005414:	4864      	ldr	r0, [pc, #400]	@ (80055a8 <HAL_DMA_Init+0x234>)
 8005416:	f7ff f837 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <HAL_DMA_Init+0xc8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b10      	cmp	r3, #16
 8005428:	d008      	beq.n	800543c <HAL_DMA_Init+0xc8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005432:	d003      	beq.n	800543c <HAL_DMA_Init+0xc8>
 8005434:	21a6      	movs	r1, #166	@ 0xa6
 8005436:	485c      	ldr	r0, [pc, #368]	@ (80055a8 <HAL_DMA_Init+0x234>)
 8005438:	f7ff f826 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b40      	cmp	r3, #64	@ 0x40
 8005442:	d007      	beq.n	8005454 <HAL_DMA_Init+0xe0>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_DMA_Init+0xe0>
 800544c:	21a7      	movs	r1, #167	@ 0xa7
 800544e:	4856      	ldr	r0, [pc, #344]	@ (80055a8 <HAL_DMA_Init+0x234>)
 8005450:	f7ff f81a 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b80      	cmp	r3, #128	@ 0x80
 800545a:	d007      	beq.n	800546c <HAL_DMA_Init+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_DMA_Init+0xf8>
 8005464:	21a8      	movs	r1, #168	@ 0xa8
 8005466:	4850      	ldr	r0, [pc, #320]	@ (80055a8 <HAL_DMA_Init+0x234>)
 8005468:	f7ff f80e 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <HAL_DMA_Init+0x11c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800547c:	d008      	beq.n	8005490 <HAL_DMA_Init+0x11c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005486:	d003      	beq.n	8005490 <HAL_DMA_Init+0x11c>
 8005488:	21a9      	movs	r1, #169	@ 0xa9
 800548a:	4847      	ldr	r0, [pc, #284]	@ (80055a8 <HAL_DMA_Init+0x234>)
 800548c:	f7fe fffc 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <HAL_DMA_Init+0x140>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a0:	d008      	beq.n	80054b4 <HAL_DMA_Init+0x140>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054aa:	d003      	beq.n	80054b4 <HAL_DMA_Init+0x140>
 80054ac:	21aa      	movs	r1, #170	@ 0xaa
 80054ae:	483e      	ldr	r0, [pc, #248]	@ (80055a8 <HAL_DMA_Init+0x234>)
 80054b0:	f7fe ffea 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_DMA_Init+0x158>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d003      	beq.n	80054cc <HAL_DMA_Init+0x158>
 80054c4:	21ab      	movs	r1, #171	@ 0xab
 80054c6:	4838      	ldr	r0, [pc, #224]	@ (80055a8 <HAL_DMA_Init+0x234>)
 80054c8:	f7fe ffde 	bl	8004488 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d012      	beq.n	80054fa <HAL_DMA_Init+0x186>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054dc:	d00d      	beq.n	80054fa <HAL_DMA_Init+0x186>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e6:	d008      	beq.n	80054fa <HAL_DMA_Init+0x186>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054f0:	d003      	beq.n	80054fa <HAL_DMA_Init+0x186>
 80054f2:	21ac      	movs	r1, #172	@ 0xac
 80054f4:	482c      	ldr	r0, [pc, #176]	@ (80055a8 <HAL_DMA_Init+0x234>)
 80054f6:	f7fe ffc7 	bl	8004488 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01f      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d01b      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d017      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d013      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b04      	cmp	r3, #4
 8005520:	d00f      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b05      	cmp	r3, #5
 8005528:	d00b      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b06      	cmp	r3, #6
 8005530:	d007      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b07      	cmp	r3, #7
 8005538:	d003      	beq.n	8005542 <HAL_DMA_Init+0x1ce>
 800553a:	21ae      	movs	r1, #174	@ 0xae
 800553c:	481a      	ldr	r0, [pc, #104]	@ (80055a8 <HAL_DMA_Init+0x234>)
 800553e:	f7fe ffa3 	bl	8004488 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	4b18      	ldr	r3, [pc, #96]	@ (80055ac <HAL_DMA_Init+0x238>)
 800554a:	429a      	cmp	r2, r3
 800554c:	d836      	bhi.n	80055bc <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	4b16      	ldr	r3, [pc, #88]	@ (80055b0 <HAL_DMA_Init+0x23c>)
 8005556:	4413      	add	r3, r2
 8005558:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <HAL_DMA_Init+0x240>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	009a      	lsls	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a13      	ldr	r2, [pc, #76]	@ (80055b8 <HAL_DMA_Init+0x244>)
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40
 800556c:	e035      	b.n	80055da <HAL_DMA_Init+0x266>
 800556e:	bf00      	nop
 8005570:	40020008 	.word	0x40020008
 8005574:	4002001c 	.word	0x4002001c
 8005578:	40020030 	.word	0x40020030
 800557c:	40020044 	.word	0x40020044
 8005580:	40020058 	.word	0x40020058
 8005584:	4002006c 	.word	0x4002006c
 8005588:	40020080 	.word	0x40020080
 800558c:	40020408 	.word	0x40020408
 8005590:	4002041c 	.word	0x4002041c
 8005594:	40020430 	.word	0x40020430
 8005598:	40020444 	.word	0x40020444
 800559c:	40020458 	.word	0x40020458
 80055a0:	4002046c 	.word	0x4002046c
 80055a4:	40020480 	.word	0x40020480
 80055a8:	0800ee84 	.word	0x0800ee84
 80055ac:	40020407 	.word	0x40020407
 80055b0:	bffdfff8 	.word	0xbffdfff8
 80055b4:	cccccccd 	.word	0xcccccccd
 80055b8:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	4b42      	ldr	r3, [pc, #264]	@ (80056cc <HAL_DMA_Init+0x358>)
 80055c4:	4413      	add	r3, r2
 80055c6:	4a42      	ldr	r2, [pc, #264]	@ (80056d0 <HAL_DMA_Init+0x35c>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	009a      	lsls	r2, r3, #2
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3f      	ldr	r2, [pc, #252]	@ (80056d4 <HAL_DMA_Init+0x360>)
 80055d8:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80055f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005634:	d039      	beq.n	80056aa <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <HAL_DMA_Init+0x364>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d11a      	bne.n	8005676 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005640:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <HAL_DMA_Init+0x368>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005648:	f003 031c 	and.w	r3, r3, #28
 800564c:	210f      	movs	r1, #15
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	4921      	ldr	r1, [pc, #132]	@ (80056dc <HAL_DMA_Init+0x368>)
 8005656:	4013      	ands	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800565a:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <HAL_DMA_Init+0x368>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f003 031c 	and.w	r3, r3, #28
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	491b      	ldr	r1, [pc, #108]	@ (80056dc <HAL_DMA_Init+0x368>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	e019      	b.n	80056aa <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005676:	4b1a      	ldr	r3, [pc, #104]	@ (80056e0 <HAL_DMA_Init+0x36c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	f003 031c 	and.w	r3, r3, #28
 8005682:	210f      	movs	r1, #15
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	4915      	ldr	r1, [pc, #84]	@ (80056e0 <HAL_DMA_Init+0x36c>)
 800568c:	4013      	ands	r3, r2
 800568e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005690:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <HAL_DMA_Init+0x36c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569c:	f003 031c 	and.w	r3, r3, #28
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	490e      	ldr	r1, [pc, #56]	@ (80056e0 <HAL_DMA_Init+0x36c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	bffdfbf8 	.word	0xbffdfbf8
 80056d0:	cccccccd 	.word	0xcccccccd
 80056d4:	40020400 	.word	0x40020400
 80056d8:	40020000 	.word	0x40020000
 80056dc:	400200a8 	.word	0x400200a8
 80056e0:	400204a8 	.word	0x400204a8

080056e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_DMA_Start_IT+0x20>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005702:	d304      	bcc.n	800570e <HAL_DMA_Start_IT+0x2a>
 8005704:	f240 11df 	movw	r1, #479	@ 0x1df
 8005708:	482c      	ldr	r0, [pc, #176]	@ (80057bc <HAL_DMA_Start_IT+0xd8>)
 800570a:	f7fe febd 	bl	8004488 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_DMA_Start_IT+0x38>
 8005718:	2302      	movs	r3, #2
 800571a:	e04b      	b.n	80057b4 <HAL_DMA_Start_IT+0xd0>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d13a      	bne.n	80057a6 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f923 	bl	80059a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 020e 	orr.w	r2, r2, #14
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e00f      	b.n	8005794 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0204 	bic.w	r2, r2, #4
 8005782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 020a 	orr.w	r2, r2, #10
 8005792:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e005      	b.n	80057b2 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
 80057b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	0800ee84 	.word	0x0800ee84

080057c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d005      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2204      	movs	r2, #4
 80057dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
 80057e2:	e029      	b.n	8005838 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 020e 	bic.w	r2, r2, #14
 80057f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005808:	f003 021c 	and.w	r2, r3, #28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	2101      	movs	r1, #1
 8005812:	fa01 f202 	lsl.w	r2, r1, r2
 8005816:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
    }
  }
  return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f003 031c 	and.w	r3, r3, #28
 8005862:	2204      	movs	r2, #4
 8005864:	409a      	lsls	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d026      	beq.n	80058bc <HAL_DMA_IRQHandler+0x7a>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d021      	beq.n	80058bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d107      	bne.n	8005896 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0204 	bic.w	r2, r2, #4
 8005894:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f003 021c 	and.w	r2, r3, #28
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	2104      	movs	r1, #4
 80058a4:	fa01 f202 	lsl.w	r2, r1, r2
 80058a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d071      	beq.n	8005996 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80058ba:	e06c      	b.n	8005996 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c0:	f003 031c 	and.w	r3, r3, #28
 80058c4:	2202      	movs	r2, #2
 80058c6:	409a      	lsls	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02e      	beq.n	800592e <HAL_DMA_IRQHandler+0xec>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d029      	beq.n	800592e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 020a 	bic.w	r2, r2, #10
 80058f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005904:	f003 021c 	and.w	r2, r3, #28
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	2102      	movs	r1, #2
 800590e:	fa01 f202 	lsl.w	r2, r1, r2
 8005912:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d038      	beq.n	8005996 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800592c:	e033      	b.n	8005996 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	f003 031c 	and.w	r3, r3, #28
 8005936:	2208      	movs	r2, #8
 8005938:	409a      	lsls	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02a      	beq.n	8005998 <HAL_DMA_IRQHandler+0x156>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d025      	beq.n	8005998 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 020e 	bic.w	r2, r2, #14
 800595a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005960:	f003 021c 	and.w	r2, r3, #28
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	2101      	movs	r1, #1
 800596a:	fa01 f202 	lsl.w	r2, r1, r2
 800596e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005996:	bf00      	nop
 8005998:	bf00      	nop
}
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f003 021c 	and.w	r2, r3, #28
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	2101      	movs	r1, #1
 80059bc:	fa01 f202 	lsl.w	r2, r1, r2
 80059c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d108      	bne.n	80059e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059e2:	e007      	b.n	80059f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a14:	d01f      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a3c      	ldr	r2, [pc, #240]	@ (8005b0c <HAL_GPIO_Init+0x10c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a3b      	ldr	r2, [pc, #236]	@ (8005b10 <HAL_GPIO_Init+0x110>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d017      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a3a      	ldr	r2, [pc, #232]	@ (8005b14 <HAL_GPIO_Init+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a39      	ldr	r2, [pc, #228]	@ (8005b18 <HAL_GPIO_Init+0x118>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a38      	ldr	r2, [pc, #224]	@ (8005b1c <HAL_GPIO_Init+0x11c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a37      	ldr	r2, [pc, #220]	@ (8005b20 <HAL_GPIO_Init+0x120>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a36      	ldr	r2, [pc, #216]	@ (8005b24 <HAL_GPIO_Init+0x124>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_Init+0x56>
 8005a4e:	21aa      	movs	r1, #170	@ 0xaa
 8005a50:	4835      	ldr	r0, [pc, #212]	@ (8005b28 <HAL_GPIO_Init+0x128>)
 8005a52:	f7fe fd19 	bl	8004488 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_GPIO_Init+0x6a>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d303      	bcc.n	8005a72 <HAL_GPIO_Init+0x72>
 8005a6a:	21ab      	movs	r1, #171	@ 0xab
 8005a6c:	482e      	ldr	r0, [pc, #184]	@ (8005b28 <HAL_GPIO_Init+0x128>)
 8005a6e:	f7fe fd0b 	bl	8004488 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 823d 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f000 8238 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b11      	cmp	r3, #17
 8005a8c:	f000 8233 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f000 822e 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b12      	cmp	r3, #18
 8005aa0:	f000 8229 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8005aac:	f000 8223 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005ab8:	f000 821d 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8005ac4:	f000 8217 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8005ad0:	f000 8211 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8005adc:	f000 820b 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8005ae8:	f000 8205 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	f000 8200 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b0b      	cmp	r3, #11
 8005afc:	f000 81fb 	beq.w	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005b00:	21ac      	movs	r1, #172	@ 0xac
 8005b02:	4809      	ldr	r0, [pc, #36]	@ (8005b28 <HAL_GPIO_Init+0x128>)
 8005b04:	f7fe fcc0 	bl	8004488 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b08:	e1f5      	b.n	8005ef6 <HAL_GPIO_Init+0x4f6>
 8005b0a:	bf00      	nop
 8005b0c:	48000400 	.word	0x48000400
 8005b10:	48000800 	.word	0x48000800
 8005b14:	48000c00 	.word	0x48000c00
 8005b18:	48001000 	.word	0x48001000
 8005b1c:	48001400 	.word	0x48001400
 8005b20:	48001800 	.word	0x48001800
 8005b24:	48001c00 	.word	0x48001c00
 8005b28:	0800eebc 	.word	0x0800eebc
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2101      	movs	r1, #1
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 81d6 	beq.w	8005ef0 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d005      	beq.n	8005b5c <HAL_GPIO_Init+0x15c>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d144      	bne.n	8005be6 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00f      	beq.n	8005b84 <HAL_GPIO_Init+0x184>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d00b      	beq.n	8005b84 <HAL_GPIO_Init+0x184>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d007      	beq.n	8005b84 <HAL_GPIO_Init+0x184>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d003      	beq.n	8005b84 <HAL_GPIO_Init+0x184>
 8005b7c:	21bb      	movs	r1, #187	@ 0xbb
 8005b7e:	489c      	ldr	r0, [pc, #624]	@ (8005df0 <HAL_GPIO_Init+0x3f0>)
 8005b80:	f7fe fc82 	bl	8004488 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	2203      	movs	r2, #3
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bba:	2201      	movs	r2, #1
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0201 	and.w	r2, r3, #1
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d118      	bne.n	8005c24 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4013      	ands	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	08db      	lsrs	r3, r3, #3
 8005c0e:	f003 0201 	and.w	r2, r3, #1
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d027      	beq.n	8005c80 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <HAL_GPIO_Init+0x250>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d007      	beq.n	8005c50 <HAL_GPIO_Init+0x250>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d003      	beq.n	8005c50 <HAL_GPIO_Init+0x250>
 8005c48:	21dc      	movs	r1, #220	@ 0xdc
 8005c4a:	4869      	ldr	r0, [pc, #420]	@ (8005df0 <HAL_GPIO_Init+0x3f0>)
 8005c4c:	f7fe fc1c 	bl	8004488 <assert_failed>

        temp = GPIOx->PUPDR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4013      	ands	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d14f      	bne.n	8005d2c <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c92:	d01f      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a57      	ldr	r2, [pc, #348]	@ (8005df4 <HAL_GPIO_Init+0x3f4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a56      	ldr	r2, [pc, #344]	@ (8005df8 <HAL_GPIO_Init+0x3f8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d017      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a55      	ldr	r2, [pc, #340]	@ (8005dfc <HAL_GPIO_Init+0x3fc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a54      	ldr	r2, [pc, #336]	@ (8005e00 <HAL_GPIO_Init+0x400>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00f      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a53      	ldr	r2, [pc, #332]	@ (8005e04 <HAL_GPIO_Init+0x404>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a52      	ldr	r2, [pc, #328]	@ (8005e08 <HAL_GPIO_Init+0x408>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a51      	ldr	r2, [pc, #324]	@ (8005e0c <HAL_GPIO_Init+0x40c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <HAL_GPIO_Init+0x2d4>
 8005ccc:	21e8      	movs	r1, #232	@ 0xe8
 8005cce:	4848      	ldr	r0, [pc, #288]	@ (8005df0 <HAL_GPIO_Init+0x3f0>)
 8005cd0:	f7fe fbda 	bl	8004488 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b0f      	cmp	r3, #15
 8005cda:	d903      	bls.n	8005ce4 <HAL_GPIO_Init+0x2e4>
 8005cdc:	21e9      	movs	r1, #233	@ 0xe9
 8005cde:	4844      	ldr	r0, [pc, #272]	@ (8005df0 <HAL_GPIO_Init+0x3f0>)
 8005ce0:	f7fe fbd2 	bl	8004488 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	08da      	lsrs	r2, r3, #3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3208      	adds	r2, #8
 8005cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	220f      	movs	r2, #15
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4013      	ands	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	08da      	lsrs	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3208      	adds	r2, #8
 8005d26:	6939      	ldr	r1, [r7, #16]
 8005d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	2203      	movs	r2, #3
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4013      	ands	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 0203 	and.w	r2, r3, #3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80c1 	beq.w	8005ef0 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d6e:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <HAL_GPIO_Init+0x410>)
 8005d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d72:	4a27      	ldr	r2, [pc, #156]	@ (8005e10 <HAL_GPIO_Init+0x410>)
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d7a:	4b25      	ldr	r3, [pc, #148]	@ (8005e10 <HAL_GPIO_Init+0x410>)
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d86:	4a23      	ldr	r2, [pc, #140]	@ (8005e14 <HAL_GPIO_Init+0x414>)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	220f      	movs	r2, #15
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4013      	ands	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005db0:	d03a      	beq.n	8005e28 <HAL_GPIO_Init+0x428>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a0f      	ldr	r2, [pc, #60]	@ (8005df4 <HAL_GPIO_Init+0x3f4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d034      	beq.n	8005e24 <HAL_GPIO_Init+0x424>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8005df8 <HAL_GPIO_Init+0x3f8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d02e      	beq.n	8005e20 <HAL_GPIO_Init+0x420>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8005dfc <HAL_GPIO_Init+0x3fc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d028      	beq.n	8005e1c <HAL_GPIO_Init+0x41c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8005e00 <HAL_GPIO_Init+0x400>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_GPIO_Init+0x418>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8005e04 <HAL_GPIO_Init+0x404>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d007      	beq.n	8005dea <HAL_GPIO_Init+0x3ea>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <HAL_GPIO_Init+0x408>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d101      	bne.n	8005de6 <HAL_GPIO_Init+0x3e6>
 8005de2:	2306      	movs	r3, #6
 8005de4:	e021      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005de6:	2307      	movs	r3, #7
 8005de8:	e01f      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005dea:	2305      	movs	r3, #5
 8005dec:	e01d      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005dee:	bf00      	nop
 8005df0:	0800eebc 	.word	0x0800eebc
 8005df4:	48000400 	.word	0x48000400
 8005df8:	48000800 	.word	0x48000800
 8005dfc:	48000c00 	.word	0x48000c00
 8005e00:	48001000 	.word	0x48001000
 8005e04:	48001400 	.word	0x48001400
 8005e08:	48001800 	.word	0x48001800
 8005e0c:	48001c00 	.word	0x48001c00
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40010000 	.word	0x40010000
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e006      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e004      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e002      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_GPIO_Init+0x42a>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	f002 0203 	and.w	r2, r2, #3
 8005e30:	0092      	lsls	r2, r2, #2
 8005e32:	4093      	lsls	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e3a:	4935      	ldr	r1, [pc, #212]	@ (8005f10 <HAL_GPIO_Init+0x510>)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	3302      	adds	r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e48:	4b32      	ldr	r3, [pc, #200]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e6c:	4a29      	ldr	r2, [pc, #164]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e72:	4b28      	ldr	r3, [pc, #160]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e96:	4a1f      	ldr	r2, [pc, #124]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ec0:	4a14      	ldr	r2, [pc, #80]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005ec6:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eea:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <HAL_GPIO_Init+0x514>)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f ae13 	bne.w	8005b2c <HAL_GPIO_Init+0x12c>
  }
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40010400 	.word	0x40010400

08005f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f24:	887b      	ldrh	r3, [r7, #2]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <HAL_GPIO_ReadPin+0x1c>
 8005f2a:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8005f2e:	4809      	ldr	r0, [pc, #36]	@ (8005f54 <HAL_GPIO_ReadPin+0x3c>)
 8005f30:	f7fe faaa 	bl	8004488 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
 8005f44:	e001      	b.n	8005f4a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	0800eebc 	.word	0x0800eebc

08005f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	807b      	strh	r3, [r7, #2]
 8005f64:	4613      	mov	r3, r2
 8005f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f68:	887b      	ldrh	r3, [r7, #2]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <HAL_GPIO_WritePin+0x20>
 8005f6e:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8005f72:	480e      	ldr	r0, [pc, #56]	@ (8005fac <HAL_GPIO_WritePin+0x54>)
 8005f74:	f7fe fa88 	bl	8004488 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005f78:	787b      	ldrb	r3, [r7, #1]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_GPIO_WritePin+0x36>
 8005f7e:	787b      	ldrb	r3, [r7, #1]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d004      	beq.n	8005f8e <HAL_GPIO_WritePin+0x36>
 8005f84:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f88:	4808      	ldr	r0, [pc, #32]	@ (8005fac <HAL_GPIO_WritePin+0x54>)
 8005f8a:	f7fe fa7d 	bl	8004488 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005f8e:	787b      	ldrb	r3, [r7, #1]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f9a:	e002      	b.n	8005fa2 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f9c:	887a      	ldrh	r2, [r7, #2]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	0800eebc 	.word	0x0800eebc

08005fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_GPIO_TogglePin+0x1c>
 8005fc2:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 8005fc6:	480a      	ldr	r0, [pc, #40]	@ (8005ff0 <HAL_GPIO_TogglePin+0x40>)
 8005fc8:	f7fe fa5e 	bl	8004488 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	041a      	lsls	r2, r3, #16
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	43d9      	mvns	r1, r3
 8005fde:	887b      	ldrh	r3, [r7, #2]
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	619a      	str	r2, [r3, #24]
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	0800eebc 	.word	0x0800eebc

08005ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ffe:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800600a:	4a05      	ldr	r2, [pc, #20]	@ (8006020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe f9ce 	bl	80043b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40010400 	.word	0x40010400

08006024 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e1f3      	b.n	800641e <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a8e      	ldr	r2, [pc, #568]	@ (8006274 <HAL_LPTIM_Init+0x250>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d008      	beq.n	8006052 <HAL_LPTIM_Init+0x2e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a8c      	ldr	r2, [pc, #560]	@ (8006278 <HAL_LPTIM_Init+0x254>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <HAL_LPTIM_Init+0x2e>
 800604a:	21fc      	movs	r1, #252	@ 0xfc
 800604c:	488b      	ldr	r0, [pc, #556]	@ (800627c <HAL_LPTIM_Init+0x258>)
 800604e:	f7fe fa1b 	bl	8004488 <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d007      	beq.n	800606a <HAL_LPTIM_Init+0x46>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_LPTIM_Init+0x46>
 8006062:	21fe      	movs	r1, #254	@ 0xfe
 8006064:	4885      	ldr	r0, [pc, #532]	@ (800627c <HAL_LPTIM_Init+0x258>)
 8006066:	f7fe fa0f 	bl	8004488 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d026      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607a:	d021      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006084:	d01c      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800608e:	d017      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006098:	d012      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80060a2:	d00d      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060ac:	d008      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80060b6:	d003      	beq.n	80060c0 <HAL_LPTIM_Init+0x9c>
 80060b8:	21ff      	movs	r1, #255	@ 0xff
 80060ba:	4870      	ldr	r0, [pc, #448]	@ (800627c <HAL_LPTIM_Init+0x258>)
 80060bc:	f7fe f9e4 	bl	8004488 <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d004      	beq.n	80060d2 <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060d0:	d125      	bne.n	800611e <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <HAL_LPTIM_Init+0xd0>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d008      	beq.n	80060f4 <HAL_LPTIM_Init+0xd0>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d004      	beq.n	80060f4 <HAL_LPTIM_Init+0xd0>
 80060ea:	f240 1103 	movw	r1, #259	@ 0x103
 80060ee:	4863      	ldr	r0, [pc, #396]	@ (800627c <HAL_LPTIM_Init+0x258>)
 80060f0:	f7fe f9ca 	bl	8004488 <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d010      	beq.n	800611e <HAL_LPTIM_Init+0xfa>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b08      	cmp	r3, #8
 8006102:	d00c      	beq.n	800611e <HAL_LPTIM_Init+0xfa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b10      	cmp	r3, #16
 800610a:	d008      	beq.n	800611e <HAL_LPTIM_Init+0xfa>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b18      	cmp	r3, #24
 8006112:	d004      	beq.n	800611e <HAL_LPTIM_Init+0xfa>
 8006114:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8006118:	4858      	ldr	r0, [pc, #352]	@ (800627c <HAL_LPTIM_Init+0x258>)
 800611a:	f7fe f9b5 	bl	8004488 <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d027      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800613a:	d022      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006144:	d01d      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800614e:	d018      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006158:	d013      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006162:	d00e      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800616c:	d009      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8006176:	d004      	beq.n	8006182 <HAL_LPTIM_Init+0x15e>
 8006178:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800617c:	483f      	ldr	r0, [pc, #252]	@ (800627c <HAL_LPTIM_Init+0x258>)
 800617e:	f7fe f983 	bl	8004488 <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800618a:	4293      	cmp	r3, r2
 800618c:	d028      	beq.n	80061e0 <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006196:	d00e      	beq.n	80061b6 <HAL_LPTIM_Init+0x192>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061a0:	d009      	beq.n	80061b6 <HAL_LPTIM_Init+0x192>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80061aa:	d004      	beq.n	80061b6 <HAL_LPTIM_Init+0x192>
 80061ac:	f240 1109 	movw	r1, #265	@ 0x109
 80061b0:	4832      	ldr	r0, [pc, #200]	@ (800627c <HAL_LPTIM_Init+0x258>)
 80061b2:	f7fe f969 	bl	8004488 <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d010      	beq.n	80061e0 <HAL_LPTIM_Init+0x1bc>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d00c      	beq.n	80061e0 <HAL_LPTIM_Init+0x1bc>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	2b80      	cmp	r3, #128	@ 0x80
 80061cc:	d008      	beq.n	80061e0 <HAL_LPTIM_Init+0x1bc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061d4:	d004      	beq.n	80061e0 <HAL_LPTIM_Init+0x1bc>
 80061d6:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80061da:	4828      	ldr	r0, [pc, #160]	@ (800627c <HAL_LPTIM_Init+0x258>)
 80061dc:	f7fe f954 	bl	8004488 <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061e8:	d008      	beq.n	80061fc <HAL_LPTIM_Init+0x1d8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_LPTIM_Init+0x1d8>
 80061f2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80061f6:	4821      	ldr	r0, [pc, #132]	@ (800627c <HAL_LPTIM_Init+0x258>)
 80061f8:	f7fe f946 	bl	8004488 <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <HAL_LPTIM_Init+0x1f4>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800620c:	d004      	beq.n	8006218 <HAL_LPTIM_Init+0x1f4>
 800620e:	f240 110d 	movw	r1, #269	@ 0x10d
 8006212:	481a      	ldr	r0, [pc, #104]	@ (800627c <HAL_LPTIM_Init+0x258>)
 8006214:	f7fe f938 	bl	8004488 <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d009      	beq.n	8006234 <HAL_LPTIM_Init+0x210>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006228:	d004      	beq.n	8006234 <HAL_LPTIM_Init+0x210>
 800622a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800622e:	4813      	ldr	r0, [pc, #76]	@ (800627c <HAL_LPTIM_Init+0x258>)
 8006230:	f7fe f92a 	bl	8004488 <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fd ff93 	bl	8004174 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d00c      	beq.n	8006280 <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800626e:	d10b      	bne.n	8006288 <HAL_LPTIM_Init+0x264>
 8006270:	e006      	b.n	8006280 <HAL_LPTIM_Init+0x25c>
 8006272:	bf00      	nop
 8006274:	40007c00 	.word	0x40007c00
 8006278:	40009400 	.word	0x40009400
 800627c:	0800eef8 	.word	0x0800eef8
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 031e 	bic.w	r3, r3, #30
 8006286:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006290:	4293      	cmp	r3, r2
 8006292:	d005      	beq.n	80062a0 <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800629a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800629e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4b61      	ldr	r3, [pc, #388]	@ (8006428 <HAL_LPTIM_Init+0x404>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80062b0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80062b6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80062bc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80062c2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d107      	bne.n	80062e2 <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80062da:	4313      	orrs	r3, r2
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d004      	beq.n	80062f4 <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062f2:	d107      	bne.n	8006304 <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80062fc:	4313      	orrs	r3, r2
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800630c:	4293      	cmp	r3, r2
 800630e:	d00a      	beq.n	8006326 <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006318:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800631e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3e      	ldr	r2, [pc, #248]	@ (800642c <HAL_LPTIM_Init+0x408>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d141      	bne.n	80063bc <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a3b      	ldr	r2, [pc, #236]	@ (800642c <HAL_LPTIM_Init+0x408>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d107      	bne.n	8006352 <HAL_LPTIM_Init+0x32e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01d      	beq.n	8006386 <HAL_LPTIM_Init+0x362>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d019      	beq.n	8006386 <HAL_LPTIM_Init+0x362>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a36      	ldr	r2, [pc, #216]	@ (8006430 <HAL_LPTIM_Init+0x40c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10f      	bne.n	800637c <HAL_LPTIM_Init+0x358>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HAL_LPTIM_Init+0x362>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d00c      	beq.n	8006386 <HAL_LPTIM_Init+0x362>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	2b02      	cmp	r3, #2
 8006372:	d008      	beq.n	8006386 <HAL_LPTIM_Init+0x362>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	2b03      	cmp	r3, #3
 800637a:	d004      	beq.n	8006386 <HAL_LPTIM_Init+0x362>
 800637c:	f240 117f 	movw	r1, #383	@ 0x17f
 8006380:	482c      	ldr	r0, [pc, #176]	@ (8006434 <HAL_LPTIM_Init+0x410>)
 8006382:	f7fe f881 	bl	8004488 <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a28      	ldr	r2, [pc, #160]	@ (800642c <HAL_LPTIM_Init+0x408>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d107      	bne.n	80063a0 <HAL_LPTIM_Init+0x37c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_LPTIM_Init+0x386>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639c:	2b02      	cmp	r3, #2
 800639e:	d004      	beq.n	80063aa <HAL_LPTIM_Init+0x386>
 80063a0:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80063a4:	4823      	ldr	r0, [pc, #140]	@ (8006434 <HAL_LPTIM_Init+0x410>)
 80063a6:	f7fe f86f 	bl	8004488 <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	621a      	str	r2, [r3, #32]
 80063ba:	e02b      	b.n	8006414 <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_LPTIM_Init+0x408>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d107      	bne.n	80063d6 <HAL_LPTIM_Init+0x3b2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01d      	beq.n	800640a <HAL_LPTIM_Init+0x3e6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d019      	beq.n	800640a <HAL_LPTIM_Init+0x3e6>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <HAL_LPTIM_Init+0x40c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10f      	bne.n	8006400 <HAL_LPTIM_Init+0x3dc>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d010      	beq.n	800640a <HAL_LPTIM_Init+0x3e6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d00c      	beq.n	800640a <HAL_LPTIM_Init+0x3e6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d008      	beq.n	800640a <HAL_LPTIM_Init+0x3e6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d004      	beq.n	800640a <HAL_LPTIM_Init+0x3e6>
 8006400:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006404:	480b      	ldr	r0, [pc, #44]	@ (8006434 <HAL_LPTIM_Init+0x410>)
 8006406:	f7fe f83f 	bl	8004488 <assert_failed>

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006412:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	ff19f1fe 	.word	0xff19f1fe
 800642c:	40007c00 	.word	0x40007c00
 8006430:	40009400 	.word	0x40009400
 8006434:	0800eef8 	.word	0x0800eef8

08006438 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t          tmpcfgr;

  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3f      	ldr	r2, [pc, #252]	@ (8006544 <HAL_LPTIM_Encoder_Start+0x10c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_LPTIM_Encoder_Start+0x1e>
 800644c:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 8006450:	483d      	ldr	r0, [pc, #244]	@ (8006548 <HAL_LPTIM_Encoder_Start+0x110>)
 8006452:	f7fe f819 	bl	8004488 <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_LPTIM_Encoder_Start+0x2c>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006462:	d304      	bcc.n	800646e <HAL_LPTIM_Encoder_Start+0x36>
 8006464:	f240 41cb 	movw	r1, #1227	@ 0x4cb
 8006468:	4837      	ldr	r0, [pc, #220]	@ (8006548 <HAL_LPTIM_Encoder_Start+0x110>)
 800646a:	f7fe f80d 	bl	8004488 <assert_failed>
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_LPTIM_Encoder_Start+0x48>
 8006476:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 800647a:	4833      	ldr	r0, [pc, #204]	@ (8006548 <HAL_LPTIM_Encoder_Start+0x110>)
 800647c:	f7fe f804 	bl	8004488 <assert_failed>
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_LPTIM_Encoder_Start+0x5a>
 8006488:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 800648c:	482e      	ldr	r0, [pc, #184]	@ (8006548 <HAL_LPTIM_Encoder_Start+0x110>)
 800648e:	f7fd fffb 	bl	8004488 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00c      	beq.n	80064b4 <HAL_LPTIM_Encoder_Start+0x7c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d008      	beq.n	80064b4 <HAL_LPTIM_Encoder_Start+0x7c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d004      	beq.n	80064b4 <HAL_LPTIM_Encoder_Start+0x7c>
 80064aa:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 80064ae:	4826      	ldr	r0, [pc, #152]	@ (8006548 <HAL_LPTIM_Encoder_Start+0x110>)
 80064b0:	f7fd ffea 	bl	8004488 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0306 	bic.w	r3, r3, #6
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80064ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2210      	movs	r2, #16
 8006504:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800650e:	2110      	movs	r1, #16
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f93d 	bl	8006790 <LPTIM_WaitForFlag>
 8006516:	4603      	mov	r3, r0
 8006518:	2b03      	cmp	r3, #3
 800651a:	d101      	bne.n	8006520 <HAL_LPTIM_Encoder_Start+0xe8>
  {
    return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e00c      	b.n	800653a <HAL_LPTIM_Encoder_Start+0x102>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0204 	orr.w	r2, r2, #4
 800652e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40007c00 	.word	0x40007c00
 8006548:	0800eef8 	.word	0x0800eef8

0800654c <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <HAL_LPTIM_Encoder_Stop+0x5c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_LPTIM_Encoder_Stop+0x1c>
 800655e:	f240 5103 	movw	r1, #1283	@ 0x503
 8006562:	4812      	ldr	r0, [pc, #72]	@ (80065ac <HAL_LPTIM_Encoder_Stop+0x60>)
 8006564:	f7fd ff90 	bl	8004488 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f93d 	bl	80067f0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8fb 	bl	8006772 <HAL_LPTIM_GetState>
 800657c:	4603      	mov	r3, r0
 800657e:	2b03      	cmp	r3, #3
 8006580:	d101      	bne.n	8006586 <HAL_LPTIM_Encoder_Stop+0x3a>
  {
    return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e00c      	b.n	80065a0 <HAL_LPTIM_Encoder_Stop+0x54>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006594:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40007c00 	.word	0x40007c00
 80065ac:	0800eef8 	.word	0x0800eef8

080065b0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10d      	bne.n	80065e2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2201      	movs	r2, #1
 80065da:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f882 	bl	80066e6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d10d      	bne.n	800660c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d106      	bne.n	800660c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2202      	movs	r2, #2
 8006604:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f877 	bl	80066fa <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d10d      	bne.n	8006636 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b04      	cmp	r3, #4
 8006626:	d106      	bne.n	8006636 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2204      	movs	r2, #4
 800662e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f86c 	bl	800670e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b08      	cmp	r3, #8
 8006642:	d10d      	bne.n	8006660 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b08      	cmp	r3, #8
 8006650:	d106      	bne.n	8006660 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2208      	movs	r2, #8
 8006658:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f861 	bl	8006722 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b10      	cmp	r3, #16
 800666c:	d10d      	bne.n	800668a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b10      	cmp	r3, #16
 800667a:	d106      	bne.n	800668a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2210      	movs	r2, #16
 8006682:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f856 	bl	8006736 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b20      	cmp	r3, #32
 8006696:	d10d      	bne.n	80066b4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d106      	bne.n	80066b4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2220      	movs	r2, #32
 80066ac:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f84b 	bl	800674a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	d10d      	bne.n	80066de <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b40      	cmp	r3, #64	@ 0x40
 80066ce:	d106      	bne.n	80066de <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2240      	movs	r2, #64	@ 0x40
 80066d6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f840 	bl	800675e <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006780:	b2db      	uxtb	r3, r3
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800679e:	4b12      	ldr	r3, [pc, #72]	@ (80067e8 <LPTIM_WaitForFlag+0x58>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a12      	ldr	r2, [pc, #72]	@ (80067ec <LPTIM_WaitForFlag+0x5c>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	0b9b      	lsrs	r3, r3, #14
 80067aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	4013      	ands	r3, r2
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d002      	beq.n	80067da <LPTIM_WaitForFlag+0x4a>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1ec      	bne.n	80067b4 <LPTIM_WaitForFlag+0x24>

  return result;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20000014 	.word	0x20000014
 80067ec:	d1b71759 	.word	0xd1b71759

080067f0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	@ 0x30
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006800:	60fb      	str	r3, [r7, #12]
  return(result);
 8006802:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006806:	2301      	movs	r3, #1
 8006808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f383 8810 	msr	PRIMASK, r3
}
 8006810:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a73      	ldr	r2, [pc, #460]	@ (80069e4 <LPTIM_Disable+0x1f4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <LPTIM_Disable+0x34>
 800681c:	4a72      	ldr	r2, [pc, #456]	@ (80069e8 <LPTIM_Disable+0x1f8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006822:	e00d      	b.n	8006840 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006824:	4b71      	ldr	r3, [pc, #452]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800682a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006830:	e006      	b.n	8006840 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006832:	4b6e      	ldr	r3, [pc, #440]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800683e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a5d      	ldr	r2, [pc, #372]	@ (80069e4 <LPTIM_Disable+0x1f4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <LPTIM_Disable+0x8a>
 8006872:	4a5d      	ldr	r2, [pc, #372]	@ (80069e8 <LPTIM_Disable+0x1f8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00d      	beq.n	8006894 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006878:	e019      	b.n	80068ae <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800687a:	4b5c      	ldr	r3, [pc, #368]	@ (80069ec <LPTIM_Disable+0x1fc>)
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	4a5b      	ldr	r2, [pc, #364]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006880:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006884:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006886:	4b59      	ldr	r3, [pc, #356]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	4a58      	ldr	r2, [pc, #352]	@ (80069ec <LPTIM_Disable+0x1fc>)
 800688c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006890:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8006892:	e00c      	b.n	80068ae <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006894:	4b55      	ldr	r3, [pc, #340]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006898:	4a54      	ldr	r2, [pc, #336]	@ (80069ec <LPTIM_Disable+0x1fc>)
 800689a:	f043 0320 	orr.w	r3, r3, #32
 800689e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80068a0:	4b52      	ldr	r3, [pc, #328]	@ (80069ec <LPTIM_Disable+0x1fc>)
 80068a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a4:	4a51      	ldr	r2, [pc, #324]	@ (80069ec <LPTIM_Disable+0x1fc>)
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 80068ac:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <LPTIM_Disable+0xca>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d075      	beq.n	80069a6 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a49      	ldr	r2, [pc, #292]	@ (80069e4 <LPTIM_Disable+0x1f4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <LPTIM_Disable+0xdc>
 80068c4:	4a48      	ldr	r2, [pc, #288]	@ (80069e8 <LPTIM_Disable+0x1f8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80068ca:	e011      	b.n	80068f0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80068cc:	4b47      	ldr	r3, [pc, #284]	@ (80069ec <LPTIM_Disable+0x1fc>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d2:	4a46      	ldr	r2, [pc, #280]	@ (80069ec <LPTIM_Disable+0x1fc>)
 80068d4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80068d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80068dc:	e008      	b.n	80068f0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80068de:	4b43      	ldr	r3, [pc, #268]	@ (80069ec <LPTIM_Disable+0x1fc>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	4a41      	ldr	r2, [pc, #260]	@ (80069ec <LPTIM_Disable+0x1fc>)
 80068e6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80068ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80068ee:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01a      	beq.n	800692c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800690e:	2108      	movs	r1, #8
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff ff3d 	bl	8006790 <LPTIM_WaitForFlag>
 8006916:	4603      	mov	r3, r0
 8006918:	2b03      	cmp	r3, #3
 800691a:	d103      	bne.n	8006924 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2203      	movs	r2, #3
 8006920:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2208      	movs	r2, #8
 800692a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01a      	beq.n	8006968 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800694a:	2110      	movs	r1, #16
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff ff1f 	bl	8006790 <LPTIM_WaitForFlag>
 8006952:	4603      	mov	r3, r0
 8006954:	2b03      	cmp	r3, #3
 8006956:	d103      	bne.n	8006960 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2203      	movs	r2, #3
 800695c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2210      	movs	r2, #16
 8006966:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1d      	ldr	r2, [pc, #116]	@ (80069e4 <LPTIM_Disable+0x1f4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <LPTIM_Disable+0x18a>
 8006972:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <LPTIM_Disable+0x1f8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006978:	e015      	b.n	80069a6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800697a:	4b1c      	ldr	r3, [pc, #112]	@ (80069ec <LPTIM_Disable+0x1fc>)
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006980:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006984:	4919      	ldr	r1, [pc, #100]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800698e:	e00a      	b.n	80069a6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006990:	4b16      	ldr	r3, [pc, #88]	@ (80069ec <LPTIM_Disable+0x1fc>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800699a:	4914      	ldr	r1, [pc, #80]	@ (80069ec <LPTIM_Disable+0x1fc>)
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 80069a4:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069bc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	621a      	str	r2, [r3, #32]
 80069ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f383 8810 	msr	PRIMASK, r3
}
 80069d8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80069da:	bf00      	nop
 80069dc:	3730      	adds	r7, #48	@ 0x30
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40007c00 	.word	0x40007c00
 80069e8:	40009400 	.word	0x40009400
 80069ec:	40021000 	.word	0x40021000

080069f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069f4:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40007000 	.word	0x40007000

08006a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a1a:	d007      	beq.n	8006a2c <HAL_PWREx_ControlVoltageScaling+0x20>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a22:	d003      	beq.n	8006a2c <HAL_PWREx_ControlVoltageScaling+0x20>
 8006a24:	21a7      	movs	r1, #167	@ 0xa7
 8006a26:	4826      	ldr	r0, [pc, #152]	@ (8006ac0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006a28:	f7fd fd2e 	bl	8004488 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a32:	d130      	bne.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a34:	4b23      	ldr	r3, [pc, #140]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a40:	d038      	beq.n	8006ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a42:	4b20      	ldr	r3, [pc, #128]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a52:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2232      	movs	r2, #50	@ 0x32
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006acc <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	0c9b      	lsrs	r3, r3, #18
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a68:	e002      	b.n	8006a70 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a70:	4b14      	ldr	r3, [pc, #80]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7c:	d102      	bne.n	8006a84 <HAL_PWREx_ControlVoltageScaling+0x78>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f2      	bne.n	8006a6a <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a84:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d110      	bne.n	8006ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e00f      	b.n	8006ab6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa2:	d007      	beq.n	8006ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006aa4:	4b07      	ldr	r3, [pc, #28]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006aac:	4a05      	ldr	r2, [pc, #20]	@ (8006ac4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ab2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	0800ef34 	.word	0x0800ef34
 8006ac4:	40007000 	.word	0x40007000
 8006ac8:	20000014 	.word	0x20000014
 8006acc:	431bde83 	.word	0x431bde83

08006ad0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f000 bcef 	b.w	80074c2 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_RCC_OscConfig+0x2e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b1f      	cmp	r3, #31
 8006af2:	d904      	bls.n	8006afe <HAL_RCC_OscConfig+0x2e>
 8006af4:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8006af8:	489a      	ldr	r0, [pc, #616]	@ (8006d64 <HAL_RCC_OscConfig+0x294>)
 8006afa:	f7fd fcc5 	bl	8004488 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006afe:	4b9a      	ldr	r3, [pc, #616]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 030c 	and.w	r3, r3, #12
 8006b06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b08:	4b97      	ldr	r3, [pc, #604]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 813d 	beq.w	8006d9a <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_RCC_OscConfig+0x6a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d004      	beq.n	8006b3a <HAL_RCC_OscConfig+0x6a>
 8006b30:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8006b34:	488b      	ldr	r0, [pc, #556]	@ (8006d64 <HAL_RCC_OscConfig+0x294>)
 8006b36:	f7fd fca7 	bl	8004488 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	2bff      	cmp	r3, #255	@ 0xff
 8006b40:	d904      	bls.n	8006b4c <HAL_RCC_OscConfig+0x7c>
 8006b42:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8006b46:	4887      	ldr	r0, [pc, #540]	@ (8006d64 <HAL_RCC_OscConfig+0x294>)
 8006b48:	f7fd fc9e 	bl	8004488 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d030      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	2b10      	cmp	r3, #16
 8006b5a:	d02c      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d028      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	2b30      	cmp	r3, #48	@ 0x30
 8006b6a:	d024      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	2b40      	cmp	r3, #64	@ 0x40
 8006b72:	d020      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	2b50      	cmp	r3, #80	@ 0x50
 8006b7a:	d01c      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	2b60      	cmp	r3, #96	@ 0x60
 8006b82:	d018      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	2b70      	cmp	r3, #112	@ 0x70
 8006b8a:	d014      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	2b80      	cmp	r3, #128	@ 0x80
 8006b92:	d010      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	2b90      	cmp	r3, #144	@ 0x90
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	2ba0      	cmp	r3, #160	@ 0xa0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	2bb0      	cmp	r3, #176	@ 0xb0
 8006baa:	d004      	beq.n	8006bb6 <HAL_RCC_OscConfig+0xe6>
 8006bac:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8006bb0:	486c      	ldr	r0, [pc, #432]	@ (8006d64 <HAL_RCC_OscConfig+0x294>)
 8006bb2:	f7fd fc69 	bl	8004488 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_RCC_OscConfig+0xfc>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	2b0c      	cmp	r3, #12
 8006bc0:	f040 808e 	bne.w	8006ce0 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	f040 808a 	bne.w	8006ce0 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bcc:	4b66      	ldr	r3, [pc, #408]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <HAL_RCC_OscConfig+0x116>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f000 bc6e 	b.w	80074c2 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1a      	ldr	r2, [r3, #32]
 8006bea:	4b5f      	ldr	r3, [pc, #380]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <HAL_RCC_OscConfig+0x130>
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bfe:	e005      	b.n	8006c0c <HAL_RCC_OscConfig+0x13c>
 8006c00:	4b59      	ldr	r3, [pc, #356]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d224      	bcs.n	8006c5a <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fec1 	bl	800799c <RCC_SetFlashLatencyFromMSIRange>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f000 bc4e 	b.w	80074c2 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c26:	4b50      	ldr	r3, [pc, #320]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a4f      	ldr	r2, [pc, #316]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c2c:	f043 0308 	orr.w	r3, r3, #8
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4b4d      	ldr	r3, [pc, #308]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	494a      	ldr	r1, [pc, #296]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c44:	4b48      	ldr	r3, [pc, #288]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	4945      	ldr	r1, [pc, #276]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	604b      	str	r3, [r1, #4]
 8006c58:	e026      	b.n	8006ca8 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c5a:	4b43      	ldr	r3, [pc, #268]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a42      	ldr	r2, [pc, #264]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c60:	f043 0308 	orr.w	r3, r3, #8
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	4b40      	ldr	r3, [pc, #256]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	493d      	ldr	r1, [pc, #244]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c78:	4b3b      	ldr	r3, [pc, #236]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	4938      	ldr	r1, [pc, #224]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fe80 	bl	800799c <RCC_SetFlashLatencyFromMSIRange>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f000 bc0d 	b.w	80074c2 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ca8:	f000 fdb4 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b2e      	ldr	r3, [pc, #184]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	492c      	ldr	r1, [pc, #176]	@ (8006d6c <HAL_RCC_OscConfig+0x29c>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d70 <HAL_RCC_OscConfig+0x2a0>)
 8006cc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d74 <HAL_RCC_OscConfig+0x2a4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe f9b5 	bl	800503c <HAL_InitTick>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d05d      	beq.n	8006d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	e3f0      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d032      	beq.n	8006d4e <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1e      	ldr	r2, [pc, #120]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cf4:	f7fe f9f2 	bl	80050dc <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cfc:	f7fe f9ee 	bl	80050dc <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e3d9      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d0e:	4b16      	ldr	r3, [pc, #88]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d1a:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d20:	f043 0308 	orr.w	r3, r3, #8
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	490d      	ldr	r1, [pc, #52]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d38:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	4908      	ldr	r1, [pc, #32]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	604b      	str	r3, [r1, #4]
 8006d4c:	e025      	b.n	8006d9a <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d4e:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a05      	ldr	r2, [pc, #20]	@ (8006d68 <HAL_RCC_OscConfig+0x298>)
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d5a:	f7fe f9bf 	bl	80050dc <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d60:	e013      	b.n	8006d8a <HAL_RCC_OscConfig+0x2ba>
 8006d62:	bf00      	nop
 8006d64:	0800ef70 	.word	0x0800ef70
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	0800f140 	.word	0x0800f140
 8006d70:	20000014 	.word	0x20000014
 8006d74:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d78:	f7fe f9b0 	bl	80050dc <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e39b      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d8a:	4b97      	ldr	r3, [pc, #604]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f0      	bne.n	8006d78 <HAL_RCC_OscConfig+0x2a8>
 8006d96:	e000      	b.n	8006d9a <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d07e      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00e      	beq.n	8006dcc <HAL_RCC_OscConfig+0x2fc>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db6:	d009      	beq.n	8006dcc <HAL_RCC_OscConfig+0x2fc>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dc0:	d004      	beq.n	8006dcc <HAL_RCC_OscConfig+0x2fc>
 8006dc2:	f240 2119 	movw	r1, #537	@ 0x219
 8006dc6:	4889      	ldr	r0, [pc, #548]	@ (8006fec <HAL_RCC_OscConfig+0x51c>)
 8006dc8:	f7fd fb5e 	bl	8004488 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d005      	beq.n	8006dde <HAL_RCC_OscConfig+0x30e>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d10e      	bne.n	8006df6 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d10b      	bne.n	8006df6 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dde:	4b82      	ldr	r3, [pc, #520]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d05b      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x3d2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d157      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e365      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCC_OscConfig+0x33e>
 8006e00:	4b79      	ldr	r3, [pc, #484]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a78      	ldr	r2, [pc, #480]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e01d      	b.n	8006e4a <HAL_RCC_OscConfig+0x37a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e16:	d10c      	bne.n	8006e32 <HAL_RCC_OscConfig+0x362>
 8006e18:	4b73      	ldr	r3, [pc, #460]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a72      	ldr	r2, [pc, #456]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	4b70      	ldr	r3, [pc, #448]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a6f      	ldr	r2, [pc, #444]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	e00b      	b.n	8006e4a <HAL_RCC_OscConfig+0x37a>
 8006e32:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a6c      	ldr	r2, [pc, #432]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a69      	ldr	r2, [pc, #420]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d013      	beq.n	8006e7a <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e52:	f7fe f943 	bl	80050dc <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e5a:	f7fe f93f 	bl	80050dc <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b64      	cmp	r3, #100	@ 0x64
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e32a      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x38a>
 8006e78:	e014      	b.n	8006ea4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fe f92f 	bl	80050dc <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e82:	f7fe f92b 	bl	80050dc <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b64      	cmp	r3, #100	@ 0x64
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e316      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e94:	4b54      	ldr	r3, [pc, #336]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f0      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3b2>
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d077      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <HAL_RCC_OscConfig+0x3fc>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec0:	d004      	beq.n	8006ecc <HAL_RCC_OscConfig+0x3fc>
 8006ec2:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006ec6:	4849      	ldr	r0, [pc, #292]	@ (8006fec <HAL_RCC_OscConfig+0x51c>)
 8006ec8:	f7fd fade 	bl	8004488 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b1f      	cmp	r3, #31
 8006ed2:	d904      	bls.n	8006ede <HAL_RCC_OscConfig+0x40e>
 8006ed4:	f240 214d 	movw	r1, #589	@ 0x24d
 8006ed8:	4844      	ldr	r0, [pc, #272]	@ (8006fec <HAL_RCC_OscConfig+0x51c>)
 8006eda:	f7fd fad5 	bl	8004488 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x420>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b0c      	cmp	r3, #12
 8006ee8:	d119      	bne.n	8006f1e <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d116      	bne.n	8006f1e <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_OscConfig+0x438>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e2dc      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f08:	4b37      	ldr	r3, [pc, #220]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	4934      	ldr	r1, [pc, #208]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1c:	e040      	b.n	8006fa0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d023      	beq.n	8006f6e <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f26:	4b30      	ldr	r3, [pc, #192]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f32:	f7fe f8d3 	bl	80050dc <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f3a:	f7fe f8cf 	bl	80050dc <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e2ba      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f4c:	4b26      	ldr	r3, [pc, #152]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f58:	4b23      	ldr	r3, [pc, #140]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	061b      	lsls	r3, r3, #24
 8006f66:	4920      	ldr	r1, [pc, #128]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	604b      	str	r3, [r1, #4]
 8006f6c:	e018      	b.n	8006fa0 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fe f8af 	bl	80050dc <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f82:	f7fe f8ab 	bl	80050dc <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e296      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f94:	4b14      	ldr	r3, [pc, #80]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d04e      	beq.n	800704a <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x4f6>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d004      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x4f6>
 8006fbc:	f240 218d 	movw	r1, #653	@ 0x28d
 8006fc0:	480a      	ldr	r0, [pc, #40]	@ (8006fec <HAL_RCC_OscConfig+0x51c>)
 8006fc2:	f7fd fa61 	bl	8004488 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d021      	beq.n	8007012 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fce:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fd4:	4a04      	ldr	r2, [pc, #16]	@ (8006fe8 <HAL_RCC_OscConfig+0x518>)
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fde:	f7fe f87d 	bl	80050dc <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fe4:	e00d      	b.n	8007002 <HAL_RCC_OscConfig+0x532>
 8006fe6:	bf00      	nop
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	0800ef70 	.word	0x0800ef70
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff0:	f7fe f874 	bl	80050dc <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e25f      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007002:	4b66      	ldr	r3, [pc, #408]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0ef      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x520>
 8007010:	e01b      	b.n	800704a <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007012:	4b62      	ldr	r3, [pc, #392]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007018:	4a60      	ldr	r2, [pc, #384]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007022:	f7fe f85b 	bl	80050dc <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007028:	e008      	b.n	800703c <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800702a:	f7fe f857 	bl	80050dc <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e242      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800703c:	4b57      	ldr	r3, [pc, #348]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800703e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1ef      	bne.n	800702a <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80b8 	beq.w	80071c8 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007058:	2300      	movs	r3, #0
 800705a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <HAL_RCC_OscConfig+0x5ae>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d008      	beq.n	800707e <HAL_RCC_OscConfig+0x5ae>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b05      	cmp	r3, #5
 8007072:	d004      	beq.n	800707e <HAL_RCC_OscConfig+0x5ae>
 8007074:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8007078:	4849      	ldr	r0, [pc, #292]	@ (80071a0 <HAL_RCC_OscConfig+0x6d0>)
 800707a:	f7fd fa05 	bl	8004488 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800707e:	4b47      	ldr	r3, [pc, #284]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10d      	bne.n	80070a6 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800708a:	4b44      	ldr	r3, [pc, #272]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800708c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708e:	4a43      	ldr	r2, [pc, #268]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007094:	6593      	str	r3, [r2, #88]	@ 0x58
 8007096:	4b41      	ldr	r3, [pc, #260]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a2:	2301      	movs	r3, #1
 80070a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a6:	4b3f      	ldr	r3, [pc, #252]	@ (80071a4 <HAL_RCC_OscConfig+0x6d4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d118      	bne.n	80070e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070b2:	4b3c      	ldr	r3, [pc, #240]	@ (80071a4 <HAL_RCC_OscConfig+0x6d4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3b      	ldr	r2, [pc, #236]	@ (80071a4 <HAL_RCC_OscConfig+0x6d4>)
 80070b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070be:	f7fe f80d 	bl	80050dc <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c6:	f7fe f809 	bl	80050dc <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e1f4      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070d8:	4b32      	ldr	r3, [pc, #200]	@ (80071a4 <HAL_RCC_OscConfig+0x6d4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d108      	bne.n	80070fe <HAL_RCC_OscConfig+0x62e>
 80070ec:	4b2b      	ldr	r3, [pc, #172]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f2:	4a2a      	ldr	r2, [pc, #168]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070fc:	e024      	b.n	8007148 <HAL_RCC_OscConfig+0x678>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b05      	cmp	r3, #5
 8007104:	d110      	bne.n	8007128 <HAL_RCC_OscConfig+0x658>
 8007106:	4b25      	ldr	r3, [pc, #148]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710c:	4a23      	ldr	r2, [pc, #140]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800710e:	f043 0304 	orr.w	r3, r3, #4
 8007112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007116:	4b21      	ldr	r3, [pc, #132]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800711c:	4a1f      	ldr	r2, [pc, #124]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007126:	e00f      	b.n	8007148 <HAL_RCC_OscConfig+0x678>
 8007128:	4b1c      	ldr	r3, [pc, #112]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712e:	4a1b      	ldr	r2, [pc, #108]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007138:	4b18      	ldr	r3, [pc, #96]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713e:	4a17      	ldr	r2, [pc, #92]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007140:	f023 0304 	bic.w	r3, r3, #4
 8007144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d016      	beq.n	800717e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fd ffc4 	bl	80050dc <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007156:	e00a      	b.n	800716e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007158:	f7fd ffc0 	bl	80050dc <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e1a9      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800716e:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <HAL_RCC_OscConfig+0x6cc>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0ed      	beq.n	8007158 <HAL_RCC_OscConfig+0x688>
 800717c:	e01b      	b.n	80071b6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717e:	f7fd ffad 	bl	80050dc <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007184:	e010      	b.n	80071a8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fd ffa9 	bl	80050dc <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007194:	4293      	cmp	r3, r2
 8007196:	d907      	bls.n	80071a8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e192      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
 800719c:	40021000 	.word	0x40021000
 80071a0:	0800ef70 	.word	0x0800ef70
 80071a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071a8:	4b98      	ldr	r3, [pc, #608]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e7      	bne.n	8007186 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071b6:	7ffb      	ldrb	r3, [r7, #31]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d105      	bne.n	80071c8 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071bc:	4b93      	ldr	r3, [pc, #588]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80071be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c0:	4a92      	ldr	r2, [pc, #584]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80071c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00c      	beq.n	80071ea <HAL_RCC_OscConfig+0x71a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d008      	beq.n	80071ea <HAL_RCC_OscConfig+0x71a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d004      	beq.n	80071ea <HAL_RCC_OscConfig+0x71a>
 80071e0:	f240 316e 	movw	r1, #878	@ 0x36e
 80071e4:	488a      	ldr	r0, [pc, #552]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 80071e6:	f7fd f94f 	bl	8004488 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8166 	beq.w	80074c0 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f040 813c 	bne.w	8007476 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d010      	beq.n	8007228 <HAL_RCC_OscConfig+0x758>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d00c      	beq.n	8007228 <HAL_RCC_OscConfig+0x758>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	2b02      	cmp	r3, #2
 8007214:	d008      	beq.n	8007228 <HAL_RCC_OscConfig+0x758>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	2b03      	cmp	r3, #3
 800721c:	d004      	beq.n	8007228 <HAL_RCC_OscConfig+0x758>
 800721e:	f240 3176 	movw	r1, #886	@ 0x376
 8007222:	487b      	ldr	r0, [pc, #492]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 8007224:	f7fd f930 	bl	8004488 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_RCC_OscConfig+0x768>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	2b08      	cmp	r3, #8
 8007236:	d904      	bls.n	8007242 <HAL_RCC_OscConfig+0x772>
 8007238:	f240 3177 	movw	r1, #887	@ 0x377
 800723c:	4874      	ldr	r0, [pc, #464]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 800723e:	f7fd f923 	bl	8004488 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007246:	2b07      	cmp	r3, #7
 8007248:	d903      	bls.n	8007252 <HAL_RCC_OscConfig+0x782>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724e:	2b56      	cmp	r3, #86	@ 0x56
 8007250:	d904      	bls.n	800725c <HAL_RCC_OscConfig+0x78c>
 8007252:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8007256:	486e      	ldr	r0, [pc, #440]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 8007258:	f7fd f916 	bl	8004488 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007260:	2b07      	cmp	r3, #7
 8007262:	d008      	beq.n	8007276 <HAL_RCC_OscConfig+0x7a6>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007268:	2b11      	cmp	r3, #17
 800726a:	d004      	beq.n	8007276 <HAL_RCC_OscConfig+0x7a6>
 800726c:	f240 317a 	movw	r1, #890	@ 0x37a
 8007270:	4867      	ldr	r0, [pc, #412]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 8007272:	f7fd f909 	bl	8004488 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727a:	2b02      	cmp	r3, #2
 800727c:	d010      	beq.n	80072a0 <HAL_RCC_OscConfig+0x7d0>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007282:	2b04      	cmp	r3, #4
 8007284:	d00c      	beq.n	80072a0 <HAL_RCC_OscConfig+0x7d0>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728a:	2b06      	cmp	r3, #6
 800728c:	d008      	beq.n	80072a0 <HAL_RCC_OscConfig+0x7d0>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007292:	2b08      	cmp	r3, #8
 8007294:	d004      	beq.n	80072a0 <HAL_RCC_OscConfig+0x7d0>
 8007296:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 800729a:	485d      	ldr	r0, [pc, #372]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 800729c:	f7fd f8f4 	bl	8004488 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d010      	beq.n	80072ca <HAL_RCC_OscConfig+0x7fa>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d00c      	beq.n	80072ca <HAL_RCC_OscConfig+0x7fa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b4:	2b06      	cmp	r3, #6
 80072b6:	d008      	beq.n	80072ca <HAL_RCC_OscConfig+0x7fa>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d004      	beq.n	80072ca <HAL_RCC_OscConfig+0x7fa>
 80072c0:	f240 317d 	movw	r1, #893	@ 0x37d
 80072c4:	4852      	ldr	r0, [pc, #328]	@ (8007410 <HAL_RCC_OscConfig+0x940>)
 80072c6:	f7fd f8df 	bl	8004488 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80072ca:	4b50      	ldr	r3, [pc, #320]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f003 0203 	and.w	r2, r3, #3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	429a      	cmp	r2, r3
 80072dc:	d130      	bne.n	8007340 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e8:	3b01      	subs	r3, #1
 80072ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d127      	bne.n	8007340 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d11f      	bne.n	8007340 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800730a:	2a07      	cmp	r2, #7
 800730c:	bf14      	ite	ne
 800730e:	2201      	movne	r2, #1
 8007310:	2200      	moveq	r2, #0
 8007312:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007314:	4293      	cmp	r3, r2
 8007316:	d113      	bne.n	8007340 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	3b01      	subs	r3, #1
 8007326:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007328:	429a      	cmp	r2, r3
 800732a:	d109      	bne.n	8007340 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	3b01      	subs	r3, #1
 800733a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d074      	beq.n	800742a <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2b0c      	cmp	r3, #12
 8007344:	d06f      	beq.n	8007426 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007346:	4b31      	ldr	r3, [pc, #196]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007352:	4b2e      	ldr	r3, [pc, #184]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e0af      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007362:	4b2a      	ldr	r3, [pc, #168]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a29      	ldr	r2, [pc, #164]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 8007368:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800736c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800736e:	f7fd feb5 	bl	80050dc <HAL_GetTick>
 8007372:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007376:	f7fd feb1 	bl	80050dc <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e09c      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007388:	4b20      	ldr	r3, [pc, #128]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007394:	4b1d      	ldr	r3, [pc, #116]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	4b1e      	ldr	r3, [pc, #120]	@ (8007414 <HAL_RCC_OscConfig+0x944>)
 800739a:	4013      	ands	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073a4:	3a01      	subs	r2, #1
 80073a6:	0112      	lsls	r2, r2, #4
 80073a8:	4311      	orrs	r1, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073ae:	0212      	lsls	r2, r2, #8
 80073b0:	4311      	orrs	r1, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80073b6:	0852      	lsrs	r2, r2, #1
 80073b8:	3a01      	subs	r2, #1
 80073ba:	0552      	lsls	r2, r2, #21
 80073bc:	4311      	orrs	r1, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80073c2:	0852      	lsrs	r2, r2, #1
 80073c4:	3a01      	subs	r2, #1
 80073c6:	0652      	lsls	r2, r2, #25
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80073ce:	0912      	lsrs	r2, r2, #4
 80073d0:	0452      	lsls	r2, r2, #17
 80073d2:	430a      	orrs	r2, r1
 80073d4:	490d      	ldr	r1, [pc, #52]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073da:	4b0c      	ldr	r3, [pc, #48]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a0b      	ldr	r2, [pc, #44]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80073e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073e4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	4a08      	ldr	r2, [pc, #32]	@ (800740c <HAL_RCC_OscConfig+0x93c>)
 80073ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073f0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073f2:	f7fd fe73 	bl	80050dc <HAL_GetTick>
 80073f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f8:	e00e      	b.n	8007418 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073fa:	f7fd fe6f 	bl	80050dc <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d907      	bls.n	8007418 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e05a      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
 800740c:	40021000 	.word	0x40021000
 8007410:	0800ef70 	.word	0x0800ef70
 8007414:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007418:	4b2c      	ldr	r3, [pc, #176]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ea      	beq.n	80073fa <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007424:	e04c      	b.n	80074c0 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e04b      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742a:	4b28      	ldr	r3, [pc, #160]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d144      	bne.n	80074c0 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007436:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a24      	ldr	r2, [pc, #144]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 800743c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007440:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007442:	4b22      	ldr	r3, [pc, #136]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	4a21      	ldr	r2, [pc, #132]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 8007448:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800744c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800744e:	f7fd fe45 	bl	80050dc <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007456:	f7fd fe41 	bl	80050dc <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e02c      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007468:	4b18      	ldr	r3, [pc, #96]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <HAL_RCC_OscConfig+0x986>
 8007474:	e024      	b.n	80074c0 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d01f      	beq.n	80074bc <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747c:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a12      	ldr	r2, [pc, #72]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 8007482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007488:	f7fd fe28 	bl	80050dc <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007490:	f7fd fe24 	bl	80050dc <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e00f      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a2:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f0      	bne.n	8007490 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80074ae:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	4906      	ldr	r1, [pc, #24]	@ (80074cc <HAL_RCC_OscConfig+0x9fc>)
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <HAL_RCC_OscConfig+0xa00>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	60cb      	str	r3, [r1, #12]
 80074ba:	e001      	b.n	80074c0 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40021000 	.word	0x40021000
 80074d0:	feeefffc 	.word	0xfeeefffc

080074d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e186      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x24>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b0f      	cmp	r3, #15
 80074f6:	d904      	bls.n	8007502 <HAL_RCC_ClockConfig+0x2e>
 80074f8:	f240 4159 	movw	r1, #1113	@ 0x459
 80074fc:	4882      	ldr	r0, [pc, #520]	@ (8007708 <HAL_RCC_ClockConfig+0x234>)
 80074fe:	f7fc ffc3 	bl	8004488 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d010      	beq.n	800752a <HAL_RCC_ClockConfig+0x56>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d00d      	beq.n	800752a <HAL_RCC_ClockConfig+0x56>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d00a      	beq.n	800752a <HAL_RCC_ClockConfig+0x56>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d007      	beq.n	800752a <HAL_RCC_ClockConfig+0x56>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b04      	cmp	r3, #4
 800751e:	d004      	beq.n	800752a <HAL_RCC_ClockConfig+0x56>
 8007520:	f240 415a 	movw	r1, #1114	@ 0x45a
 8007524:	4878      	ldr	r0, [pc, #480]	@ (8007708 <HAL_RCC_ClockConfig+0x234>)
 8007526:	f7fc ffaf 	bl	8004488 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800752a:	4b78      	ldr	r3, [pc, #480]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d910      	bls.n	800755a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007538:	4b74      	ldr	r3, [pc, #464]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f023 0207 	bic.w	r2, r3, #7
 8007540:	4972      	ldr	r1, [pc, #456]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007548:	4b70      	ldr	r3, [pc, #448]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d001      	beq.n	800755a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e14d      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d039      	beq.n	80075da <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d024      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b80      	cmp	r3, #128	@ 0x80
 8007574:	d020      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b90      	cmp	r3, #144	@ 0x90
 800757c:	d01c      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2ba0      	cmp	r3, #160	@ 0xa0
 8007584:	d018      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2bb0      	cmp	r3, #176	@ 0xb0
 800758c:	d014      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2bc0      	cmp	r3, #192	@ 0xc0
 8007594:	d010      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2bd0      	cmp	r3, #208	@ 0xd0
 800759c:	d00c      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2be0      	cmp	r3, #224	@ 0xe0
 80075a4:	d008      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80075ac:	d004      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xe4>
 80075ae:	f240 4172 	movw	r1, #1138	@ 0x472
 80075b2:	4855      	ldr	r0, [pc, #340]	@ (8007708 <HAL_RCC_ClockConfig+0x234>)
 80075b4:	f7fc ff68 	bl	8004488 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	4b54      	ldr	r3, [pc, #336]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d908      	bls.n	80075da <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075c8:	4b51      	ldr	r3, [pc, #324]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	494e      	ldr	r1, [pc, #312]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d061      	beq.n	80076aa <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <HAL_RCC_ClockConfig+0x13c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d00c      	beq.n	8007610 <HAL_RCC_ClockConfig+0x13c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d008      	beq.n	8007610 <HAL_RCC_ClockConfig+0x13c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d004      	beq.n	8007610 <HAL_RCC_ClockConfig+0x13c>
 8007606:	f240 417d 	movw	r1, #1149	@ 0x47d
 800760a:	483f      	ldr	r0, [pc, #252]	@ (8007708 <HAL_RCC_ClockConfig+0x234>)
 800760c:	f7fc ff3c 	bl	8004488 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d107      	bne.n	8007628 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007618:	4b3d      	ldr	r3, [pc, #244]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d121      	bne.n	8007668 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0e6      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d107      	bne.n	8007640 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007630:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d115      	bne.n	8007668 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0da      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d107      	bne.n	8007658 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007648:	4b31      	ldr	r3, [pc, #196]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0ce      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007658:	4b2d      	ldr	r3, [pc, #180]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0c6      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007668:	4b29      	ldr	r3, [pc, #164]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f023 0203 	bic.w	r2, r3, #3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4926      	ldr	r1, [pc, #152]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800767a:	f7fd fd2f 	bl	80050dc <HAL_GetTick>
 800767e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007680:	e00a      	b.n	8007698 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007682:	f7fd fd2b 	bl	80050dc <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007690:	4293      	cmp	r3, r2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e0ae      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007698:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 020c 	and.w	r2, r3, #12
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d1eb      	bne.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d010      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	4b15      	ldr	r3, [pc, #84]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d208      	bcs.n	80076d8 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c6:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	490f      	ldr	r1, [pc, #60]	@ (8007710 <HAL_RCC_ClockConfig+0x23c>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076d8:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d216      	bcs.n	8007714 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e6:	4b09      	ldr	r3, [pc, #36]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f023 0207 	bic.w	r2, r3, #7
 80076ee:	4907      	ldr	r1, [pc, #28]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f6:	4b05      	ldr	r3, [pc, #20]	@ (800770c <HAL_RCC_ClockConfig+0x238>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d007      	beq.n	8007714 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e076      	b.n	80077f6 <HAL_RCC_ClockConfig+0x322>
 8007708:	0800ef70 	.word	0x0800ef70
 800770c:	40022000 	.word	0x40022000
 8007710:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d025      	beq.n	800776c <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d018      	beq.n	800775a <HAL_RCC_ClockConfig+0x286>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007730:	d013      	beq.n	800775a <HAL_RCC_ClockConfig+0x286>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800773a:	d00e      	beq.n	800775a <HAL_RCC_ClockConfig+0x286>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007744:	d009      	beq.n	800775a <HAL_RCC_ClockConfig+0x286>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800774e:	d004      	beq.n	800775a <HAL_RCC_ClockConfig+0x286>
 8007750:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8007754:	482a      	ldr	r0, [pc, #168]	@ (8007800 <HAL_RCC_ClockConfig+0x32c>)
 8007756:	f7fc fe97 	bl	8004488 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800775a:	4b2a      	ldr	r3, [pc, #168]	@ (8007804 <HAL_RCC_ClockConfig+0x330>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	4927      	ldr	r1, [pc, #156]	@ (8007804 <HAL_RCC_ClockConfig+0x330>)
 8007768:	4313      	orrs	r3, r2
 800776a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d026      	beq.n	80077c6 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d018      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x2de>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007788:	d013      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x2de>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007792:	d00e      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x2de>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800779c:	d009      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x2de>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077a6:	d004      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x2de>
 80077a8:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80077ac:	4814      	ldr	r0, [pc, #80]	@ (8007800 <HAL_RCC_ClockConfig+0x32c>)
 80077ae:	f7fc fe6b 	bl	8004488 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077b2:	4b14      	ldr	r3, [pc, #80]	@ (8007804 <HAL_RCC_ClockConfig+0x330>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4910      	ldr	r1, [pc, #64]	@ (8007804 <HAL_RCC_ClockConfig+0x330>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077c6:	f000 f825 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 80077ca:	4602      	mov	r2, r0
 80077cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007804 <HAL_RCC_ClockConfig+0x330>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	091b      	lsrs	r3, r3, #4
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	490c      	ldr	r1, [pc, #48]	@ (8007808 <HAL_RCC_ClockConfig+0x334>)
 80077d8:	5ccb      	ldrb	r3, [r1, r3]
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	fa22 f303 	lsr.w	r3, r2, r3
 80077e2:	4a0a      	ldr	r2, [pc, #40]	@ (800780c <HAL_RCC_ClockConfig+0x338>)
 80077e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <HAL_RCC_ClockConfig+0x33c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fd fc26 	bl	800503c <HAL_InitTick>
 80077f0:	4603      	mov	r3, r0
 80077f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	0800ef70 	.word	0x0800ef70
 8007804:	40021000 	.word	0x40021000
 8007808:	0800f140 	.word	0x0800f140
 800780c:	20000014 	.word	0x20000014
 8007810:	20000018 	.word	0x20000018

08007814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007814:	b480      	push	{r7}
 8007816:	b089      	sub	sp, #36	@ 0x24
 8007818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007822:	4b3e      	ldr	r3, [pc, #248]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 030c 	and.w	r3, r3, #12
 800782a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800782c:	4b3b      	ldr	r3, [pc, #236]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_GetSysClockFreq+0x34>
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d121      	bne.n	8007886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d11e      	bne.n	8007886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007848:	4b34      	ldr	r3, [pc, #208]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007854:	4b31      	ldr	r3, [pc, #196]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 8007856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	e005      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007864:	4b2d      	ldr	r3, [pc, #180]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	091b      	lsrs	r3, r3, #4
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007870:	4a2b      	ldr	r2, [pc, #172]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10d      	bne.n	800789c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007884:	e00a      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b04      	cmp	r3, #4
 800788a:	d102      	bne.n	8007892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800788c:	4b25      	ldr	r3, [pc, #148]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x110>)
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	e004      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d101      	bne.n	800789c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007898:	4b23      	ldr	r3, [pc, #140]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x114>)
 800789a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b0c      	cmp	r3, #12
 80078a0:	d134      	bne.n	800790c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078a2:	4b1e      	ldr	r3, [pc, #120]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d003      	beq.n	80078ba <HAL_RCC_GetSysClockFreq+0xa6>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d003      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0xac>
 80078b8:	e005      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x110>)
 80078bc:	617b      	str	r3, [r7, #20]
      break;
 80078be:	e005      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078c0:	4b19      	ldr	r3, [pc, #100]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x114>)
 80078c2:	617b      	str	r3, [r7, #20]
      break;
 80078c4:	e002      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	617b      	str	r3, [r7, #20]
      break;
 80078ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078cc:	4b13      	ldr	r3, [pc, #76]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	091b      	lsrs	r3, r3, #4
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	3301      	adds	r3, #1
 80078d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078da:	4b10      	ldr	r3, [pc, #64]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	fb03 f202 	mul.w	r2, r3, r2
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078f2:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <HAL_RCC_GetSysClockFreq+0x108>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	0e5b      	lsrs	r3, r3, #25
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	3301      	adds	r3, #1
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800790c:	69bb      	ldr	r3, [r7, #24]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3724      	adds	r7, #36	@ 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40021000 	.word	0x40021000
 8007920:	0800f158 	.word	0x0800f158
 8007924:	00f42400 	.word	0x00f42400
 8007928:	007a1200 	.word	0x007a1200

0800792c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b03      	ldr	r3, [pc, #12]	@ (8007940 <HAL_RCC_GetHCLKFreq+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000014 	.word	0x20000014

08007944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007948:	f7ff fff0 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4904      	ldr	r1, [pc, #16]	@ (800796c <HAL_RCC_GetPCLK1Freq+0x28>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40021000 	.word	0x40021000
 800796c:	0800f150 	.word	0x0800f150

08007970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007974:	f7ff ffda 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007978:	4602      	mov	r2, r0
 800797a:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	0adb      	lsrs	r3, r3, #11
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	4904      	ldr	r1, [pc, #16]	@ (8007998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007986:	5ccb      	ldrb	r3, [r1, r3]
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007990:	4618      	mov	r0, r3
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40021000 	.word	0x40021000
 8007998:	0800f150 	.word	0x0800f150

0800799c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079b4:	f7ff f81c 	bl	80069f0 <HAL_PWREx_GetVoltageRange>
 80079b8:	6178      	str	r0, [r7, #20]
 80079ba:	e014      	b.n	80079e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079bc:	4b25      	ldr	r3, [pc, #148]	@ (8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c0:	4a24      	ldr	r2, [pc, #144]	@ (8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80079c8:	4b22      	ldr	r3, [pc, #136]	@ (8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079d4:	f7ff f80c 	bl	80069f0 <HAL_PWREx_GetVoltageRange>
 80079d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079da:	4b1e      	ldr	r3, [pc, #120]	@ (8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	4a1d      	ldr	r2, [pc, #116]	@ (8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ec:	d10b      	bne.n	8007a06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b80      	cmp	r3, #128	@ 0x80
 80079f2:	d919      	bls.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80079f8:	d902      	bls.n	8007a00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079fa:	2302      	movs	r3, #2
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	e013      	b.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a00:	2301      	movs	r3, #1
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	e010      	b.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b80      	cmp	r3, #128	@ 0x80
 8007a0a:	d902      	bls.n	8007a12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	e00a      	b.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b80      	cmp	r3, #128	@ 0x80
 8007a16:	d102      	bne.n	8007a1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a18:	2302      	movs	r3, #2
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	e004      	b.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b70      	cmp	r3, #112	@ 0x70
 8007a22:	d101      	bne.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a24:	2301      	movs	r3, #1
 8007a26:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a28:	4b0b      	ldr	r3, [pc, #44]	@ (8007a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f023 0207 	bic.w	r2, r3, #7
 8007a30:	4909      	ldr	r1, [pc, #36]	@ (8007a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a38:	4b07      	ldr	r3, [pc, #28]	@ (8007a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d001      	beq.n	8007a4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40022000 	.word	0x40022000

08007a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a64:	2300      	movs	r3, #0
 8007a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a68:	2300      	movs	r3, #0
 8007a6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a80:	d303      	bcc.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8007a82:	21c9      	movs	r1, #201	@ 0xc9
 8007a84:	4889      	ldr	r0, [pc, #548]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007a86:	f7fc fcff 	bl	8004488 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d058      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d012      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aa6:	d00d      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ab0:	d008      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007abc:	21d1      	movs	r1, #209	@ 0xd1
 8007abe:	487b      	ldr	r0, [pc, #492]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007ac0:	f7fc fce2 	bl	8004488 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007acc:	d02a      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8007ace:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ad2:	d824      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8007ad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad8:	d008      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ade:	d81e      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae8:	d010      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007aea:	e018      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007aec:	4b70      	ldr	r3, [pc, #448]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a6f      	ldr	r2, [pc, #444]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007af8:	e015      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3304      	adds	r3, #4
 8007afe:	2100      	movs	r1, #0
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fc69 	bl	80083d8 <RCCEx_PLLSAI1_Config>
 8007b06:	4603      	mov	r3, r0
 8007b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b0a:	e00c      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3320      	adds	r3, #32
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fde0 	bl	80086d8 <RCCEx_PLLSAI2_Config>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b1c:	e003      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	74fb      	strb	r3, [r7, #19]
      break;
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8007b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b26:	7cfb      	ldrb	r3, [r7, #19]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b2c:	4b60      	ldr	r3, [pc, #384]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b3a:	495d      	ldr	r1, [pc, #372]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007b42:	e001      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	7cfb      	ldrb	r3, [r7, #19]
 8007b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d059      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b64:	d00e      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b6e:	d009      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b78:	d004      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007b7a:	f240 110f 	movw	r1, #271	@ 0x10f
 8007b7e:	484b      	ldr	r0, [pc, #300]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007b80:	f7fc fc82 	bl	8004488 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b8c:	d02a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8007b8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b92:	d824      	bhi.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x182>
 8007b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b98:	d008      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x150>
 8007b9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b9e:	d81e      	bhi.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x182>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ba8:	d010      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x170>
 8007baa:	e018      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007bac:	4b40      	ldr	r3, [pc, #256]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bb8:	e015      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fc09 	bl	80083d8 <RCCEx_PLLSAI1_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bca:	e00c      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3320      	adds	r3, #32
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fd80 	bl	80086d8 <RCCEx_PLLSAI2_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bdc:	e003      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	74fb      	strb	r3, [r7, #19]
      break;
 8007be2:	e000      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8007be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be6:	7cfb      	ldrb	r3, [r7, #19]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10b      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bec:	4b30      	ldr	r3, [pc, #192]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bfa:	492d      	ldr	r1, [pc, #180]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007c02:	e001      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c04:	7cfb      	ldrb	r3, [r7, #19]
 8007c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80c2 	beq.w	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c16:	2300      	movs	r3, #0
 8007c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d016      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c2e:	d010      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c3a:	d00a      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c46:	d004      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007c48:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8007c4c:	4817      	ldr	r0, [pc, #92]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007c4e:	f7fc fc1b 	bl	8004488 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c52:	4b17      	ldr	r3, [pc, #92]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c68:	4b11      	ldr	r3, [pc, #68]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6c:	4a10      	ldr	r2, [pc, #64]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c74:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c7c:	60bb      	str	r3, [r7, #8]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c80:	2301      	movs	r3, #1
 8007c82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c84:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c90:	f7fd fa24 	bl	80050dc <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c96:	e00f      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c98:	f7fd fa20 	bl	80050dc <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d908      	bls.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	74fb      	strb	r3, [r7, #19]
        break;
 8007caa:	e00b      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007cac:	0800efa8 	.word	0x0800efa8
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007cb8:	4b30      	ldr	r3, [pc, #192]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0e9      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d15c      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cca:	4b2d      	ldr	r3, [pc, #180]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01f      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d019      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ce8:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cf4:	4b22      	ldr	r3, [pc, #136]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfa:	4a21      	ldr	r2, [pc, #132]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d04:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d14:	4a1a      	ldr	r2, [pc, #104]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d016      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d26:	f7fd f9d9 	bl	80050dc <HAL_GetTick>
 8007d2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d2c:	e00b      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fd f9d5 	bl	80050dc <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d902      	bls.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	74fb      	strb	r3, [r7, #19]
            break;
 8007d44:	e006      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d46:	4b0e      	ldr	r3, [pc, #56]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0ec      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8007d54:	7cfb      	ldrb	r3, [r7, #19]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10c      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d5a:	4b09      	ldr	r3, [pc, #36]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d6a:	4905      	ldr	r1, [pc, #20]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007d72:	e009      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d74:	7cfb      	ldrb	r3, [r7, #19]
 8007d76:	74bb      	strb	r3, [r7, #18]
 8007d78:	e006      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8007d7a:	bf00      	nop
 8007d7c:	40007000 	.word	0x40007000
 8007d80:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	7cfb      	ldrb	r3, [r7, #19]
 8007d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d88:	7c7b      	ldrb	r3, [r7, #17]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d105      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d92:	4a8c      	ldr	r2, [pc, #560]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d01f      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d00c      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d008      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d004      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007dc6:	f240 1199 	movw	r1, #409	@ 0x199
 8007dca:	487f      	ldr	r0, [pc, #508]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007dcc:	f7fc fb5c 	bl	8004488 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd6:	f023 0203 	bic.w	r2, r3, #3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	4979      	ldr	r1, [pc, #484]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01f      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d010      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d00c      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e06:	2b0c      	cmp	r3, #12
 8007e08:	d008      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d004      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007e12:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8007e16:	486c      	ldr	r0, [pc, #432]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007e18:	f7fc fb36 	bl	8004488 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e1c:	4b69      	ldr	r3, [pc, #420]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e22:	f023 020c 	bic.w	r2, r3, #12
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2a:	4966      	ldr	r1, [pc, #408]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01f      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d010      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4a:	2b10      	cmp	r3, #16
 8007e4c:	d00c      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	2b30      	cmp	r3, #48	@ 0x30
 8007e54:	d008      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d004      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007e5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e62:	4859      	ldr	r0, [pc, #356]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007e64:	f7fc fb10 	bl	8004488 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e68:	4b56      	ldr	r3, [pc, #344]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e76:	4953      	ldr	r1, [pc, #332]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01f      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d010      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e96:	2b40      	cmp	r3, #64	@ 0x40
 8007e98:	d00c      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ea0:	d008      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	2b80      	cmp	r3, #128	@ 0x80
 8007ea8:	d004      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8007eaa:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8007eae:	4846      	ldr	r0, [pc, #280]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007eb0:	f7fc faea 	bl	8004488 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007eb4:	4b43      	ldr	r3, [pc, #268]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec2:	4940      	ldr	r1, [pc, #256]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d022      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d013      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee6:	d00e      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ef0:	d009      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007efa:	d004      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007efc:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8007f00:	4831      	ldr	r0, [pc, #196]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007f02:	f7fc fac1 	bl	8004488 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f06:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f14:	492b      	ldr	r1, [pc, #172]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d022      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d013      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f38:	d00e      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f42:	d009      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f4c:	d004      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007f4e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8007f52:	481d      	ldr	r0, [pc, #116]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007f54:	f7fc fa98 	bl	8004488 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f58:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f66:	4917      	ldr	r1, [pc, #92]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d028      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d013      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f8a:	d00e      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f94:	d009      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f9a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f9e:	d004      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8007fa0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007fa4:	4808      	ldr	r0, [pc, #32]	@ (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007fa6:	f7fc fa6f 	bl	8004488 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007faa:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb8:	4902      	ldr	r1, [pc, #8]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007fc0:	e004      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007fc2:	bf00      	nop
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	0800efa8 	.word	0x0800efa8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d022      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d013      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe8:	d00e      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ff2:	d009      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ff8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ffc:	d004      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007ffe:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8008002:	489e      	ldr	r0, [pc, #632]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008004:	f7fc fa40 	bl	8004488 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008008:	4b9d      	ldr	r3, [pc, #628]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008016:	499a      	ldr	r1, [pc, #616]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01d      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800803a:	d009      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008044:	d004      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008046:	f240 11ef 	movw	r1, #495	@ 0x1ef
 800804a:	488c      	ldr	r0, [pc, #560]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800804c:	f7fc fa1c 	bl	8004488 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008050:	4b8b      	ldr	r3, [pc, #556]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008056:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800805e:	4988      	ldr	r1, [pc, #544]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01d      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00e      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008082:	d009      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800808c:	d004      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800808e:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8008092:	487a      	ldr	r0, [pc, #488]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008094:	f7fc f9f8 	bl	8004488 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008098:	4b79      	ldr	r3, [pc, #484]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800809e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a6:	4976      	ldr	r1, [pc, #472]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01d      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00e      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080ca:	d009      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d4:	d004      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80080d6:	f240 2107 	movw	r1, #519	@ 0x207
 80080da:	4868      	ldr	r0, [pc, #416]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80080dc:	f7fc f9d4 	bl	8004488 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080e0:	4b67      	ldr	r3, [pc, #412]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80080e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ee:	4964      	ldr	r1, [pc, #400]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d040      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d013      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800810e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008112:	d00e      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811c:	d009      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008122:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008126:	d004      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008128:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800812c:	4853      	ldr	r0, [pc, #332]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800812e:	f7fc f9ab 	bl	8004488 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008132:	4b53      	ldr	r3, [pc, #332]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008138:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008140:	494f      	ldr	r1, [pc, #316]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800814c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008150:	d106      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008152:	4b4b      	ldr	r3, [pc, #300]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	4a4a      	ldr	r2, [pc, #296]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800815c:	60d3      	str	r3, [r2, #12]
 800815e:	e011      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008168:	d10c      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3304      	adds	r3, #4
 800816e:	2101      	movs	r1, #1
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f931 	bl	80083d8 <RCCEx_PLLSAI1_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800817a:	7cfb      	ldrb	r3, [r7, #19]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8008180:	7cfb      	ldrb	r3, [r7, #19]
 8008182:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d040      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008194:	2b00      	cmp	r3, #0
 8008196:	d013      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081a0:	d00e      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081aa:	d009      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80081b4:	d004      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80081b6:	f240 2141 	movw	r1, #577	@ 0x241
 80081ba:	4830      	ldr	r0, [pc, #192]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80081bc:	f7fc f964 	bl	8004488 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80081c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80081c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ce:	492c      	ldr	r1, [pc, #176]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081de:	d106      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081e0:	4b27      	ldr	r3, [pc, #156]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4a26      	ldr	r2, [pc, #152]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80081e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ea:	60d3      	str	r3, [r2, #12]
 80081ec:	e011      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081f6:	d10c      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3304      	adds	r3, #4
 80081fc:	2101      	movs	r1, #1
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f8ea 	bl	80083d8 <RCCEx_PLLSAI1_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008208:	7cfb      	ldrb	r3, [r7, #19]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 800820e:	7cfb      	ldrb	r3, [r7, #19]
 8008210:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d044      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008222:	2b00      	cmp	r3, #0
 8008224:	d013      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800822a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800822e:	d00e      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008238:	d009      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008242:	d004      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008244:	f240 2166 	movw	r1, #614	@ 0x266
 8008248:	480c      	ldr	r0, [pc, #48]	@ (800827c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800824a:	f7fc f91d 	bl	8004488 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800824e:	4b0c      	ldr	r3, [pc, #48]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008254:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825c:	4908      	ldr	r1, [pc, #32]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008268:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800826c:	d10a      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800826e:	4b04      	ldr	r3, [pc, #16]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	4a03      	ldr	r2, [pc, #12]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008278:	60d3      	str	r3, [r2, #12]
 800827a:	e015      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800827c:	0800efa8 	.word	0x0800efa8
 8008280:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800828c:	d10c      	bne.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3304      	adds	r3, #4
 8008292:	2101      	movs	r1, #1
 8008294:	4618      	mov	r0, r3
 8008296:	f000 f89f 	bl	80083d8 <RCCEx_PLLSAI1_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800829e:	7cfb      	ldrb	r3, [r7, #19]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 80082a4:	7cfb      	ldrb	r3, [r7, #19]
 80082a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d047      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d013      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082c4:	d00e      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ce:	d009      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082d8:	d004      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80082da:	f240 2186 	movw	r1, #646	@ 0x286
 80082de:	483c      	ldr	r0, [pc, #240]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80082e0:	f7fc f8d2 	bl	8004488 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082e4:	4b3b      	ldr	r3, [pc, #236]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082f2:	4938      	ldr	r1, [pc, #224]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008302:	d10d      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
 8008308:	2102      	movs	r1, #2
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f864 	bl	80083d8 <RCCEx_PLLSAI1_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008314:	7cfb      	ldrb	r3, [r7, #19]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d014      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800831a:	7cfb      	ldrb	r3, [r7, #19]
 800831c:	74bb      	strb	r3, [r7, #18]
 800831e:	e011      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008328:	d10c      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3320      	adds	r3, #32
 800832e:	2102      	movs	r1, #2
 8008330:	4618      	mov	r0, r3
 8008332:	f000 f9d1 	bl	80086d8 <RCCEx_PLLSAI2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800833a:	7cfb      	ldrb	r3, [r7, #19]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d018      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d009      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008360:	d004      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008362:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8008366:	481a      	ldr	r0, [pc, #104]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8008368:	f7fc f88e 	bl	8004488 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800836c:	4b19      	ldr	r3, [pc, #100]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008372:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837a:	4916      	ldr	r1, [pc, #88]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800837c:	4313      	orrs	r3, r2
 800837e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01b      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800839e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083a2:	d004      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 80083a4:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80083a8:	4809      	ldr	r0, [pc, #36]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80083aa:	f7fc f86d 	bl	8004488 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80083b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083be:	4905      	ldr	r1, [pc, #20]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	0800efa8 	.word	0x0800efa8
 80083d4:	40021000 	.word	0x40021000

080083d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <RCCEx_PLLSAI1_Config+0x38>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d00c      	beq.n	8008410 <RCCEx_PLLSAI1_Config+0x38>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d008      	beq.n	8008410 <RCCEx_PLLSAI1_Config+0x38>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b03      	cmp	r3, #3
 8008404:	d004      	beq.n	8008410 <RCCEx_PLLSAI1_Config+0x38>
 8008406:	f640 3162 	movw	r1, #2914	@ 0xb62
 800840a:	4887      	ldr	r0, [pc, #540]	@ (8008628 <RCCEx_PLLSAI1_Config+0x250>)
 800840c:	f7fc f83c 	bl	8004488 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <RCCEx_PLLSAI1_Config+0x48>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d904      	bls.n	800842a <RCCEx_PLLSAI1_Config+0x52>
 8008420:	f640 3163 	movw	r1, #2915	@ 0xb63
 8008424:	4880      	ldr	r0, [pc, #512]	@ (8008628 <RCCEx_PLLSAI1_Config+0x250>)
 8008426:	f7fc f82f 	bl	8004488 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b07      	cmp	r3, #7
 8008430:	d903      	bls.n	800843a <RCCEx_PLLSAI1_Config+0x62>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b56      	cmp	r3, #86	@ 0x56
 8008438:	d904      	bls.n	8008444 <RCCEx_PLLSAI1_Config+0x6c>
 800843a:	f640 3164 	movw	r1, #2916	@ 0xb64
 800843e:	487a      	ldr	r0, [pc, #488]	@ (8008628 <RCCEx_PLLSAI1_Config+0x250>)
 8008440:	f7fc f822 	bl	8004488 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10b      	bne.n	8008468 <RCCEx_PLLSAI1_Config+0x90>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d105      	bne.n	8008468 <RCCEx_PLLSAI1_Config+0x90>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d007      	beq.n	8008478 <RCCEx_PLLSAI1_Config+0xa0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8008470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <RCCEx_PLLSAI1_Config+0xaa>
 8008478:	f640 3165 	movw	r1, #2917	@ 0xb65
 800847c:	486a      	ldr	r0, [pc, #424]	@ (8008628 <RCCEx_PLLSAI1_Config+0x250>)
 800847e:	f7fc f803 	bl	8004488 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008482:	4b6a      	ldr	r3, [pc, #424]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d018      	beq.n	80084c0 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800848e:	4b67      	ldr	r3, [pc, #412]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0203 	and.w	r2, r3, #3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d10d      	bne.n	80084ba <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
       ||
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80084a6:	4b61      	ldr	r3, [pc, #388]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	091b      	lsrs	r3, r3, #4
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
       ||
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d047      	beq.n	800854a <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	73fb      	strb	r3, [r7, #15]
 80084be:	e044      	b.n	800854a <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d018      	beq.n	80084fa <RCCEx_PLLSAI1_Config+0x122>
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d825      	bhi.n	8008518 <RCCEx_PLLSAI1_Config+0x140>
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d002      	beq.n	80084d6 <RCCEx_PLLSAI1_Config+0xfe>
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d009      	beq.n	80084e8 <RCCEx_PLLSAI1_Config+0x110>
 80084d4:	e020      	b.n	8008518 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80084d6:	4b55      	ldr	r3, [pc, #340]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d11d      	bne.n	800851e <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084e6:	e01a      	b.n	800851e <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80084e8:	4b50      	ldr	r3, [pc, #320]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d116      	bne.n	8008522 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084f8:	e013      	b.n	8008522 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80084fa:	4b4c      	ldr	r3, [pc, #304]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10f      	bne.n	8008526 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008506:	4b49      	ldr	r3, [pc, #292]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008516:	e006      	b.n	8008526 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]
      break;
 800851c:	e004      	b.n	8008528 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800851e:	bf00      	nop
 8008520:	e002      	b.n	8008528 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008522:	bf00      	nop
 8008524:	e000      	b.n	8008528 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008526:	bf00      	nop
    }

    if(status == HAL_OK)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10d      	bne.n	800854a <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800852e:	4b3f      	ldr	r3, [pc, #252]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6819      	ldr	r1, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	3b01      	subs	r3, #1
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	430b      	orrs	r3, r1
 8008544:	4939      	ldr	r1, [pc, #228]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008546:	4313      	orrs	r3, r2
 8008548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f040 80ba 	bne.w	80086c6 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008552:	4b36      	ldr	r3, [pc, #216]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a35      	ldr	r2, [pc, #212]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008558:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800855c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800855e:	f7fc fdbd 	bl	80050dc <HAL_GetTick>
 8008562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008564:	e009      	b.n	800857a <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008566:	f7fc fdb9 	bl	80050dc <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d902      	bls.n	800857a <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	73fb      	strb	r3, [r7, #15]
        break;
 8008578:	e005      	b.n	8008586 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800857a:	4b2c      	ldr	r3, [pc, #176]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1ef      	bne.n	8008566 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 809c 	bne.w	80086c6 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d11e      	bne.n	80085d2 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b07      	cmp	r3, #7
 800859a:	d008      	beq.n	80085ae <RCCEx_PLLSAI1_Config+0x1d6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b11      	cmp	r3, #17
 80085a2:	d004      	beq.n	80085ae <RCCEx_PLLSAI1_Config+0x1d6>
 80085a4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80085a8:	481f      	ldr	r0, [pc, #124]	@ (8008628 <RCCEx_PLLSAI1_Config+0x250>)
 80085aa:	f7fb ff6d 	bl	8004488 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80085ae:	4b1f      	ldr	r3, [pc, #124]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80085b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	6892      	ldr	r2, [r2, #8]
 80085be:	0211      	lsls	r1, r2, #8
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	68d2      	ldr	r2, [r2, #12]
 80085c4:	0912      	lsrs	r2, r2, #4
 80085c6:	0452      	lsls	r2, r2, #17
 80085c8:	430a      	orrs	r2, r1
 80085ca:	4918      	ldr	r1, [pc, #96]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	610b      	str	r3, [r1, #16]
 80085d0:	e055      	b.n	800867e <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d12b      	bne.n	8008630 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d010      	beq.n	8008602 <RCCEx_PLLSAI1_Config+0x22a>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d00c      	beq.n	8008602 <RCCEx_PLLSAI1_Config+0x22a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	2b06      	cmp	r3, #6
 80085ee:	d008      	beq.n	8008602 <RCCEx_PLLSAI1_Config+0x22a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d004      	beq.n	8008602 <RCCEx_PLLSAI1_Config+0x22a>
 80085f8:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80085fc:	480a      	ldr	r0, [pc, #40]	@ (8008628 <RCCEx_PLLSAI1_Config+0x250>)
 80085fe:	f7fb ff43 	bl	8004488 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008602:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800860a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6892      	ldr	r2, [r2, #8]
 8008612:	0211      	lsls	r1, r2, #8
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6912      	ldr	r2, [r2, #16]
 8008618:	0852      	lsrs	r2, r2, #1
 800861a:	3a01      	subs	r2, #1
 800861c:	0552      	lsls	r2, r2, #21
 800861e:	430a      	orrs	r2, r1
 8008620:	4902      	ldr	r1, [pc, #8]	@ (800862c <RCCEx_PLLSAI1_Config+0x254>)
 8008622:	4313      	orrs	r3, r2
 8008624:	610b      	str	r3, [r1, #16]
 8008626:	e02a      	b.n	800867e <RCCEx_PLLSAI1_Config+0x2a6>
 8008628:	0800efa8 	.word	0x0800efa8
 800862c:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d010      	beq.n	800865a <RCCEx_PLLSAI1_Config+0x282>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	2b04      	cmp	r3, #4
 800863e:	d00c      	beq.n	800865a <RCCEx_PLLSAI1_Config+0x282>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	2b06      	cmp	r3, #6
 8008646:	d008      	beq.n	800865a <RCCEx_PLLSAI1_Config+0x282>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	2b08      	cmp	r3, #8
 800864e:	d004      	beq.n	800865a <RCCEx_PLLSAI1_Config+0x282>
 8008650:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8008654:	481e      	ldr	r0, [pc, #120]	@ (80086d0 <RCCEx_PLLSAI1_Config+0x2f8>)
 8008656:	f7fb ff17 	bl	8004488 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800865a:	4b1e      	ldr	r3, [pc, #120]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008662:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6892      	ldr	r2, [r2, #8]
 800866a:	0211      	lsls	r1, r2, #8
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6952      	ldr	r2, [r2, #20]
 8008670:	0852      	lsrs	r2, r2, #1
 8008672:	3a01      	subs	r2, #1
 8008674:	0652      	lsls	r2, r2, #25
 8008676:	430a      	orrs	r2, r1
 8008678:	4916      	ldr	r1, [pc, #88]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 800867a:	4313      	orrs	r3, r2
 800867c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800867e:	4b15      	ldr	r3, [pc, #84]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a14      	ldr	r2, [pc, #80]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008684:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008688:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868a:	f7fc fd27 	bl	80050dc <HAL_GetTick>
 800868e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008690:	e009      	b.n	80086a6 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008692:	f7fc fd23 	bl	80050dc <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d902      	bls.n	80086a6 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	73fb      	strb	r3, [r7, #15]
          break;
 80086a4:	e005      	b.n	80086b2 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086a6:	4b0b      	ldr	r3, [pc, #44]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0ef      	beq.n	8008692 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80086b8:	4b06      	ldr	r3, [pc, #24]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 80086ba:	691a      	ldr	r2, [r3, #16]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	4904      	ldr	r1, [pc, #16]	@ (80086d4 <RCCEx_PLLSAI1_Config+0x2fc>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	0800efa8 	.word	0x0800efa8
 80086d4:	40021000 	.word	0x40021000

080086d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d010      	beq.n	8008710 <RCCEx_PLLSAI2_Config+0x38>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d00c      	beq.n	8008710 <RCCEx_PLLSAI2_Config+0x38>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d008      	beq.n	8008710 <RCCEx_PLLSAI2_Config+0x38>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b03      	cmp	r3, #3
 8008704:	d004      	beq.n	8008710 <RCCEx_PLLSAI2_Config+0x38>
 8008706:	f640 412f 	movw	r1, #3119	@ 0xc2f
 800870a:	4896      	ldr	r0, [pc, #600]	@ (8008964 <RCCEx_PLLSAI2_Config+0x28c>)
 800870c:	f7fb febc 	bl	8004488 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <RCCEx_PLLSAI2_Config+0x48>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b08      	cmp	r3, #8
 800871e:	d904      	bls.n	800872a <RCCEx_PLLSAI2_Config+0x52>
 8008720:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8008724:	488f      	ldr	r0, [pc, #572]	@ (8008964 <RCCEx_PLLSAI2_Config+0x28c>)
 8008726:	f7fb feaf 	bl	8004488 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b07      	cmp	r3, #7
 8008730:	d903      	bls.n	800873a <RCCEx_PLLSAI2_Config+0x62>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b56      	cmp	r3, #86	@ 0x56
 8008738:	d904      	bls.n	8008744 <RCCEx_PLLSAI2_Config+0x6c>
 800873a:	f640 4131 	movw	r1, #3121	@ 0xc31
 800873e:	4889      	ldr	r0, [pc, #548]	@ (8008964 <RCCEx_PLLSAI2_Config+0x28c>)
 8008740:	f7fb fea2 	bl	8004488 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <RCCEx_PLLSAI2_Config+0x84>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <RCCEx_PLLSAI2_Config+0x94>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d004      	beq.n	8008776 <RCCEx_PLLSAI2_Config+0x9e>
 800876c:	f640 4132 	movw	r1, #3122	@ 0xc32
 8008770:	487c      	ldr	r0, [pc, #496]	@ (8008964 <RCCEx_PLLSAI2_Config+0x28c>)
 8008772:	f7fb fe89 	bl	8004488 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008776:	4b7c      	ldr	r3, [pc, #496]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d018      	beq.n	80087b4 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008782:	4b79      	ldr	r3, [pc, #484]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0203 	and.w	r2, r3, #3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d10d      	bne.n	80087ae <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
       ||
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800879a:	4b73      	ldr	r3, [pc, #460]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
       ||
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d047      	beq.n	800883e <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	e044      	b.n	800883e <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d018      	beq.n	80087ee <RCCEx_PLLSAI2_Config+0x116>
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d825      	bhi.n	800880c <RCCEx_PLLSAI2_Config+0x134>
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d002      	beq.n	80087ca <RCCEx_PLLSAI2_Config+0xf2>
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d009      	beq.n	80087dc <RCCEx_PLLSAI2_Config+0x104>
 80087c8:	e020      	b.n	800880c <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087ca:	4b67      	ldr	r3, [pc, #412]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d11d      	bne.n	8008812 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087da:	e01a      	b.n	8008812 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087dc:	4b62      	ldr	r3, [pc, #392]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d116      	bne.n	8008816 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ec:	e013      	b.n	8008816 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087ee:	4b5e      	ldr	r3, [pc, #376]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10f      	bne.n	800881a <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087fa:	4b5b      	ldr	r3, [pc, #364]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880a:	e006      	b.n	800881a <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e004      	b.n	800881c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008812:	bf00      	nop
 8008814:	e002      	b.n	800881c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008816:	bf00      	nop
 8008818:	e000      	b.n	800881c <RCCEx_PLLSAI2_Config+0x144>
      break;
 800881a:	bf00      	nop
    }

    if(status == HAL_OK)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008822:	4b51      	ldr	r3, [pc, #324]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	3b01      	subs	r3, #1
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	430b      	orrs	r3, r1
 8008838:	494b      	ldr	r1, [pc, #300]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 800883a:	4313      	orrs	r3, r2
 800883c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 808a 	bne.w	800895a <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008846:	4b48      	ldr	r3, [pc, #288]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a47      	ldr	r2, [pc, #284]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 800884c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008852:	f7fc fc43 	bl	80050dc <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008858:	e009      	b.n	800886e <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800885a:	f7fc fc3f 	bl	80050dc <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d902      	bls.n	800886e <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	73fb      	strb	r3, [r7, #15]
        break;
 800886c:	e005      	b.n	800887a <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800886e:	4b3e      	ldr	r3, [pc, #248]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1ef      	bne.n	800885a <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d16c      	bne.n	800895a <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d11e      	bne.n	80088c4 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b07      	cmp	r3, #7
 800888c:	d008      	beq.n	80088a0 <RCCEx_PLLSAI2_Config+0x1c8>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b11      	cmp	r3, #17
 8008894:	d004      	beq.n	80088a0 <RCCEx_PLLSAI2_Config+0x1c8>
 8008896:	f640 4185 	movw	r1, #3205	@ 0xc85
 800889a:	4832      	ldr	r0, [pc, #200]	@ (8008964 <RCCEx_PLLSAI2_Config+0x28c>)
 800889c:	f7fb fdf4 	bl	8004488 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088a0:	4b31      	ldr	r3, [pc, #196]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80088a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6892      	ldr	r2, [r2, #8]
 80088b0:	0211      	lsls	r1, r2, #8
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68d2      	ldr	r2, [r2, #12]
 80088b6:	0912      	lsrs	r2, r2, #4
 80088b8:	0452      	lsls	r2, r2, #17
 80088ba:	430a      	orrs	r2, r1
 80088bc:	492a      	ldr	r1, [pc, #168]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	614b      	str	r3, [r1, #20]
 80088c2:	e026      	b.n	8008912 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d010      	beq.n	80088ee <RCCEx_PLLSAI2_Config+0x216>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d00c      	beq.n	80088ee <RCCEx_PLLSAI2_Config+0x216>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b06      	cmp	r3, #6
 80088da:	d008      	beq.n	80088ee <RCCEx_PLLSAI2_Config+0x216>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	2b08      	cmp	r3, #8
 80088e2:	d004      	beq.n	80088ee <RCCEx_PLLSAI2_Config+0x216>
 80088e4:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 80088e8:	481e      	ldr	r0, [pc, #120]	@ (8008964 <RCCEx_PLLSAI2_Config+0x28c>)
 80088ea:	f7fb fdcd 	bl	8004488 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80088f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6892      	ldr	r2, [r2, #8]
 80088fe:	0211      	lsls	r1, r2, #8
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6912      	ldr	r2, [r2, #16]
 8008904:	0852      	lsrs	r2, r2, #1
 8008906:	3a01      	subs	r2, #1
 8008908:	0652      	lsls	r2, r2, #25
 800890a:	430a      	orrs	r2, r1
 800890c:	4916      	ldr	r1, [pc, #88]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 800890e:	4313      	orrs	r3, r2
 8008910:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008912:	4b15      	ldr	r3, [pc, #84]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a14      	ldr	r2, [pc, #80]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800891c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800891e:	f7fc fbdd 	bl	80050dc <HAL_GetTick>
 8008922:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008924:	e009      	b.n	800893a <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008926:	f7fc fbd9 	bl	80050dc <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d902      	bls.n	800893a <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	73fb      	strb	r3, [r7, #15]
          break;
 8008938:	e005      	b.n	8008946 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800893a:	4b0b      	ldr	r3, [pc, #44]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ef      	beq.n	8008926 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 800894e:	695a      	ldr	r2, [r3, #20]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	4904      	ldr	r1, [pc, #16]	@ (8008968 <RCCEx_PLLSAI2_Config+0x290>)
 8008956:	4313      	orrs	r3, r2
 8008958:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	0800efa8 	.word	0x0800efa8
 8008968:	40021000 	.word	0x40021000

0800896c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e1dd      	b.n	8008d3a <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a7b      	ldr	r2, [pc, #492]	@ (8008b70 <HAL_SPI_Init+0x204>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <HAL_SPI_Init+0x3a>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a79      	ldr	r2, [pc, #484]	@ (8008b74 <HAL_SPI_Init+0x208>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_SPI_Init+0x3a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a78      	ldr	r2, [pc, #480]	@ (8008b78 <HAL_SPI_Init+0x20c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <HAL_SPI_Init+0x3a>
 800899c:	f240 1147 	movw	r1, #327	@ 0x147
 80089a0:	4876      	ldr	r0, [pc, #472]	@ (8008b7c <HAL_SPI_Init+0x210>)
 80089a2:	f7fb fd71 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <HAL_SPI_Init+0x56>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089b6:	d004      	beq.n	80089c2 <HAL_SPI_Init+0x56>
 80089b8:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80089bc:	486f      	ldr	r0, [pc, #444]	@ (8008b7c <HAL_SPI_Init+0x210>)
 80089be:	f7fb fd63 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00e      	beq.n	80089e8 <HAL_SPI_Init+0x7c>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d2:	d009      	beq.n	80089e8 <HAL_SPI_Init+0x7c>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089dc:	d004      	beq.n	80089e8 <HAL_SPI_Init+0x7c>
 80089de:	f240 1149 	movw	r1, #329	@ 0x149
 80089e2:	4866      	ldr	r0, [pc, #408]	@ (8008b7c <HAL_SPI_Init+0x210>)
 80089e4:	f7fb fd50 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80089f0:	d040      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80089fa:	d03b      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8008a04:	d036      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a0e:	d031      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8008a18:	d02c      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008a22:	d027      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8008a2c:	d022      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a36:	d01d      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a40:	d018      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a4a:	d013      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008a54:	d00e      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a5e:	d009      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a68:	d004      	beq.n	8008a74 <HAL_SPI_Init+0x108>
 8008a6a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8008a6e:	4843      	ldr	r0, [pc, #268]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008a70:	f7fb fd0a 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a7c:	d00d      	beq.n	8008a9a <HAL_SPI_Init+0x12e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <HAL_SPI_Init+0x12e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a8e:	d004      	beq.n	8008a9a <HAL_SPI_Init+0x12e>
 8008a90:	f240 114b 	movw	r1, #331	@ 0x14b
 8008a94:	4839      	ldr	r0, [pc, #228]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008a96:	f7fb fcf7 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a9e:	2b08      	cmp	r3, #8
 8008aa0:	d008      	beq.n	8008ab4 <HAL_SPI_Init+0x148>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <HAL_SPI_Init+0x148>
 8008aaa:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8008aae:	4833      	ldr	r0, [pc, #204]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008ab0:	f7fb fcea 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d020      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d01c      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d018      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	2b18      	cmp	r3, #24
 8008ad2:	d014      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d010      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	2b28      	cmp	r3, #40	@ 0x28
 8008ae2:	d00c      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	2b30      	cmp	r3, #48	@ 0x30
 8008aea:	d008      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	2b38      	cmp	r3, #56	@ 0x38
 8008af2:	d004      	beq.n	8008afe <HAL_SPI_Init+0x192>
 8008af4:	f240 114d 	movw	r1, #333	@ 0x14d
 8008af8:	4820      	ldr	r0, [pc, #128]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008afa:	f7fb fcc5 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <HAL_SPI_Init+0x1ac>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	2b80      	cmp	r3, #128	@ 0x80
 8008b0c:	d004      	beq.n	8008b18 <HAL_SPI_Init+0x1ac>
 8008b0e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8008b12:	481a      	ldr	r0, [pc, #104]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008b14:	f7fb fcb8 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_SPI_Init+0x1c6>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	2b10      	cmp	r3, #16
 8008b26:	d004      	beq.n	8008b32 <HAL_SPI_Init+0x1c6>
 8008b28:	f240 114f 	movw	r1, #335	@ 0x14f
 8008b2c:	4813      	ldr	r0, [pc, #76]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008b2e:	f7fb fcab 	bl	8004488 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d151      	bne.n	8008bde <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <HAL_SPI_Init+0x1e8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d004      	beq.n	8008b54 <HAL_SPI_Init+0x1e8>
 8008b4a:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8008b4e:	480b      	ldr	r0, [pc, #44]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008b50:	f7fb fc9a 	bl	8004488 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d011      	beq.n	8008b80 <HAL_SPI_Init+0x214>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d00d      	beq.n	8008b80 <HAL_SPI_Init+0x214>
 8008b64:	f240 1153 	movw	r1, #339	@ 0x153
 8008b68:	4804      	ldr	r0, [pc, #16]	@ (8008b7c <HAL_SPI_Init+0x210>)
 8008b6a:	f7fb fc8d 	bl	8004488 <assert_failed>
 8008b6e:	e007      	b.n	8008b80 <HAL_SPI_Init+0x214>
 8008b70:	40013000 	.word	0x40013000
 8008b74:	40003800 	.word	0x40003800
 8008b78:	40003c00 	.word	0x40003c00
 8008b7c:	0800efe4 	.word	0x0800efe4

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b88:	d125      	bne.n	8008bd6 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d050      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d04c      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	2b10      	cmp	r3, #16
 8008ba0:	d048      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	2b18      	cmp	r3, #24
 8008ba8:	d044      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d040      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	2b28      	cmp	r3, #40	@ 0x28
 8008bb8:	d03c      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	2b30      	cmp	r3, #48	@ 0x30
 8008bc0:	d038      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	2b38      	cmp	r3, #56	@ 0x38
 8008bc8:	d034      	beq.n	8008c34 <HAL_SPI_Init+0x2c8>
 8008bca:	f240 1157 	movw	r1, #343	@ 0x157
 8008bce:	485d      	ldr	r0, [pc, #372]	@ (8008d44 <HAL_SPI_Init+0x3d8>)
 8008bd0:	f7fb fc5a 	bl	8004488 <assert_failed>
 8008bd4:	e02e      	b.n	8008c34 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	61da      	str	r2, [r3, #28]
 8008bdc:	e02a      	b.n	8008c34 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d020      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	2b08      	cmp	r3, #8
 8008bec:	d01c      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d018      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	2b18      	cmp	r3, #24
 8008bfc:	d014      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d010      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	2b28      	cmp	r3, #40	@ 0x28
 8008c0c:	d00c      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	2b30      	cmp	r3, #48	@ 0x30
 8008c14:	d008      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	2b38      	cmp	r3, #56	@ 0x38
 8008c1c:	d004      	beq.n	8008c28 <HAL_SPI_Init+0x2bc>
 8008c1e:	f240 1161 	movw	r1, #353	@ 0x161
 8008c22:	4848      	ldr	r0, [pc, #288]	@ (8008d44 <HAL_SPI_Init+0x3d8>)
 8008c24:	f7fb fc30 	bl	8004488 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7fb fc5e 	bl	8004510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c74:	d902      	bls.n	8008c7c <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e002      	b.n	8008c82 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008c8a:	d007      	beq.n	8008c9c <HAL_SPI_Init+0x330>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c94:	d002      	beq.n	8008c9c <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cde:	ea42 0103 	orr.w	r1, r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	f003 0204 	and.w	r2, r3, #4
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d00:	f003 0310 	and.w	r3, r3, #16
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008d18:	ea42 0103 	orr.w	r1, r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	0800efe4 	.word	0x0800efe4

08008d48 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008d5e:	f640 0172 	movw	r1, #2162	@ 0x872
 8008d62:	487f      	ldr	r0, [pc, #508]	@ (8008f60 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8008d64:	f7fb fb90 	bl	8004488 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <HAL_SPI_TransmitReceive_DMA+0x32>
 8008d70:	f640 0173 	movw	r1, #2163	@ 0x873
 8008d74:	487a      	ldr	r0, [pc, #488]	@ (8008f60 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8008d76:	f7fb fb87 	bl	8004488 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d004      	beq.n	8008d8c <HAL_SPI_TransmitReceive_DMA+0x44>
 8008d82:	f640 0176 	movw	r1, #2166	@ 0x876
 8008d86:	4876      	ldr	r0, [pc, #472]	@ (8008f60 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8008d88:	f7fb fb7e 	bl	8004488 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d92:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d00c      	beq.n	8008dba <HAL_SPI_TransmitReceive_DMA+0x72>
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008da6:	d106      	bne.n	8008db6 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <HAL_SPI_TransmitReceive_DMA+0x6e>
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d001      	beq.n	8008dba <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008db6:	2302      	movs	r3, #2
 8008db8:	e15f      	b.n	800907a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d005      	beq.n	8008dcc <HAL_SPI_TransmitReceive_DMA+0x84>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <HAL_SPI_TransmitReceive_DMA+0x84>
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e154      	b.n	800907a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <HAL_SPI_TransmitReceive_DMA+0x96>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e14d      	b.n	800907a <HAL_SPI_TransmitReceive_DMA+0x332>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d003      	beq.n	8008dfa <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2205      	movs	r2, #5
 8008df6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	887a      	ldrh	r2, [r7, #2]
 8008e0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	887a      	ldrh	r2, [r7, #2]
 8008e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	887a      	ldrh	r2, [r7, #2]
 8008e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	887a      	ldrh	r2, [r7, #2]
 8008e24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008e42:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e4c:	d908      	bls.n	8008e60 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e5c:	605a      	str	r2, [r3, #4]
 8008e5e:	e06f      	b.n	8008f40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e6e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e7a:	d126      	bne.n	8008eca <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10f      	bne.n	8008ea8 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e96:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ea6:	e010      	b.n	8008eca <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008eb6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	085b      	lsrs	r3, r3, #1
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed4:	d134      	bne.n	8008f40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ee4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d111      	bne.n	8008f1a <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f04:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008f18:	e012      	b.n	8008f40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f28:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	085b      	lsrs	r3, r3, #1
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3301      	adds	r3, #1
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d10f      	bne.n	8008f6c <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f50:	4a04      	ldr	r2, [pc, #16]	@ (8008f64 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8008f52:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f58:	4a03      	ldr	r2, [pc, #12]	@ (8008f68 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8008f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008f5c:	e00e      	b.n	8008f7c <HAL_SPI_TransmitReceive_DMA+0x234>
 8008f5e:	bf00      	nop
 8008f60:	0800efe4 	.word	0x0800efe4
 8008f64:	08009421 	.word	0x08009421
 8008f68:	080092e9 	.word	0x080092e9
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f70:	4a44      	ldr	r2, [pc, #272]	@ (8009084 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8008f72:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f78:	4a43      	ldr	r2, [pc, #268]	@ (8009088 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8008f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f80:	4a42      	ldr	r2, [pc, #264]	@ (800908c <HAL_SPI_TransmitReceive_DMA+0x344>)
 8008f82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f88:	2200      	movs	r2, #0
 8008f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	330c      	adds	r3, #12
 8008f96:	4619      	mov	r1, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fa4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008fa6:	f7fc fb9d 	bl	80056e4 <HAL_DMA_Start_IT>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fb4:	f043 0210 	orr.w	r2, r3, #16
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e058      	b.n	800907a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fdc:	2200      	movs	r2, #0
 8008fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fec:	2200      	movs	r2, #0
 8008fee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009000:	4619      	mov	r1, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	330c      	adds	r3, #12
 8009008:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800900e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009010:	f7fc fb68 	bl	80056e4 <HAL_DMA_Start_IT>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901e:	f043 0210 	orr.w	r2, r3, #16
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e023      	b.n	800907a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800903c:	2b40      	cmp	r3, #64	@ 0x40
 800903e:	d007      	beq.n	8009050 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800904e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0220 	orr.w	r2, r2, #32
 8009066:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0202 	orr.w	r2, r2, #2
 8009076:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	0800943d 	.word	0x0800943d
 8009088:	08009391 	.word	0x08009391
 800908c:	08009459 	.word	0x08009459

08009090 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	099b      	lsrs	r3, r3, #6
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10f      	bne.n	80090d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	099b      	lsrs	r3, r3, #6
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
    return;
 80090d2:	e0d7      	b.n	8009284 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	085b      	lsrs	r3, r3, #1
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <HAL_SPI_IRQHandler+0x66>
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	09db      	lsrs	r3, r3, #7
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d004      	beq.n	80090f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4798      	blx	r3
    return;
 80090f4:	e0c6      	b.n	8009284 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10c      	bne.n	800911c <HAL_SPI_IRQHandler+0x8c>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	099b      	lsrs	r3, r3, #6
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 80b4 	beq.w	8009284 <HAL_SPI_IRQHandler+0x1f4>
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 80ad 	beq.w	8009284 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	099b      	lsrs	r3, r3, #6
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d023      	beq.n	800917e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b03      	cmp	r3, #3
 8009140:	d011      	beq.n	8009166 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009146:	f043 0204 	orr.w	r2, r3, #4
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	e00b      	b.n	800917e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	613b      	str	r3, [r7, #16]
 800917a:	693b      	ldr	r3, [r7, #16]
        return;
 800917c:	e082      	b.n	8009284 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	095b      	lsrs	r3, r3, #5
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d014      	beq.n	80091b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800918e:	f043 0201 	orr.w	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c4:	f043 0208 	orr.w	r2, r3, #8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091cc:	2300      	movs	r3, #0
 80091ce:	60bb      	str	r3, [r7, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	60bb      	str	r3, [r7, #8]
 80091d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d04f      	beq.n	8009282 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <HAL_SPI_IRQHandler+0x17e>
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d034      	beq.n	8009278 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0203 	bic.w	r2, r2, #3
 800921c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009222:	2b00      	cmp	r3, #0
 8009224:	d011      	beq.n	800924a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922a:	4a18      	ldr	r2, [pc, #96]	@ (800928c <HAL_SPI_IRQHandler+0x1fc>)
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009232:	4618      	mov	r0, r3
 8009234:	f7fc fac4 	bl	80057c0 <HAL_DMA_Abort_IT>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009242:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924e:	2b00      	cmp	r3, #0
 8009250:	d016      	beq.n	8009280 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009256:	4a0d      	ldr	r2, [pc, #52]	@ (800928c <HAL_SPI_IRQHandler+0x1fc>)
 8009258:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800925e:	4618      	mov	r0, r3
 8009260:	f7fc faae 	bl	80057c0 <HAL_DMA_Abort_IT>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009276:	e003      	b.n	8009280 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7fb f871 	bl	8004360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800927e:	e000      	b.n	8009282 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009280:	bf00      	nop
    return;
 8009282:	bf00      	nop
  }
}
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	08009499 	.word	0x08009499

08009290 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092da:	b2db      	uxtb	r3, r3
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f6:	f7fb fef1 	bl	80050dc <HAL_GetTick>
 80092fa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b20      	cmp	r3, #32
 8009308:	d03c      	beq.n	8009384 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0220 	bic.w	r2, r2, #32
 8009318:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10d      	bne.n	800933e <SPI_DMAReceiveCplt+0x56>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800932a:	d108      	bne.n	800933e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0203 	bic.w	r2, r2, #3
 800933a:	605a      	str	r2, [r3, #4]
 800933c:	e007      	b.n	800934e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0201 	bic.w	r2, r2, #1
 800934c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	2164      	movs	r1, #100	@ 0x64
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f9d4 	bl	8009700 <SPI_EndRxTransaction>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7fa ffef 	bl	8004360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009382:	e002      	b.n	800938a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7ff ff83 	bl	8009290 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800939e:	f7fb fe9d 	bl	80050dc <HAL_GetTick>
 80093a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d030      	beq.n	8009414 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0220 	bic.w	r2, r2, #32
 80093c0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	2164      	movs	r1, #100	@ 0x64
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 f9f2 	bl	80097b0 <SPI_EndRxTxTransaction>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d6:	f043 0220 	orr.w	r2, r3, #32
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0203 	bic.w	r2, r2, #3
 80093ec:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7fa ffa7 	bl	8004360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009412:	e002      	b.n	800941a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7fa ff98 	bl	800434a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff ff38 	bl	80092a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff ff34 	bl	80092b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0203 	bic.w	r2, r2, #3
 8009474:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947a:	f043 0210 	orr.w	r2, r3, #16
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7fa ff68 	bl	8004360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7fa ff53 	bl	8004360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094d4:	f7fb fe02 	bl	80050dc <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4413      	add	r3, r2
 80094e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094e4:	f7fb fdfa 	bl	80050dc <HAL_GetTick>
 80094e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094ea:	4b39      	ldr	r3, [pc, #228]	@ (80095d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	015b      	lsls	r3, r3, #5
 80094f0:	0d1b      	lsrs	r3, r3, #20
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	fb02 f303 	mul.w	r3, r2, r3
 80094f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094fa:	e054      	b.n	80095a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009502:	d050      	beq.n	80095a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009504:	f7fb fdea 	bl	80050dc <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	429a      	cmp	r2, r3
 8009512:	d902      	bls.n	800951a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d13d      	bne.n	8009596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009532:	d111      	bne.n	8009558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800953c:	d004      	beq.n	8009548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009546:	d107      	bne.n	8009558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009560:	d10f      	bne.n	8009582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e017      	b.n	80095c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bf0c      	ite	eq
 80095b6:	2301      	moveq	r3, #1
 80095b8:	2300      	movne	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d19b      	bne.n	80094fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000014 	.word	0x20000014

080095d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	@ 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80095e6:	f7fb fd79 	bl	80050dc <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	1a9b      	subs	r3, r3, r2
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	4413      	add	r3, r2
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80095f6:	f7fb fd71 	bl	80050dc <HAL_GetTick>
 80095fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	330c      	adds	r3, #12
 8009602:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009604:	4b3d      	ldr	r3, [pc, #244]	@ (80096fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	00da      	lsls	r2, r3, #3
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	0d1b      	lsrs	r3, r3, #20
 8009614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800961c:	e060      	b.n	80096e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009624:	d107      	bne.n	8009636 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d104      	bne.n	8009636 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009634:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d050      	beq.n	80096e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800963e:	f7fb fd4d 	bl	80050dc <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800964a:	429a      	cmp	r2, r3
 800964c:	d902      	bls.n	8009654 <SPI_WaitFifoStateUntilTimeout+0x80>
 800964e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	d13d      	bne.n	80096d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009662:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800966c:	d111      	bne.n	8009692 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009676:	d004      	beq.n	8009682 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009680:	d107      	bne.n	8009692 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009690:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800969a:	d10f      	bne.n	80096bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e010      	b.n	80096f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	3b01      	subs	r3, #1
 80096de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d196      	bne.n	800961e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3728      	adds	r7, #40	@ 0x28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000014 	.word	0x20000014

08009700 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af02      	add	r7, sp, #8
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009714:	d111      	bne.n	800973a <SPI_EndRxTransaction+0x3a>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800971e:	d004      	beq.n	800972a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009728:	d107      	bne.n	800973a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009738:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2200      	movs	r2, #0
 8009742:	2180      	movs	r1, #128	@ 0x80
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff febd 	bl	80094c4 <SPI_WaitFlagStateUntilTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d007      	beq.n	8009760 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009754:	f043 0220 	orr.w	r2, r3, #32
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e023      	b.n	80097a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009768:	d11d      	bne.n	80097a6 <SPI_EndRxTransaction+0xa6>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009772:	d004      	beq.n	800977e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800977c:	d113      	bne.n	80097a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2200      	movs	r2, #0
 8009786:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff ff22 	bl	80095d4 <SPI_WaitFifoStateUntilTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800979a:	f043 0220 	orr.w	r2, r3, #32
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e000      	b.n	80097a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7ff ff03 	bl	80095d4 <SPI_WaitFifoStateUntilTimeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097d8:	f043 0220 	orr.w	r2, r3, #32
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e027      	b.n	8009834 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	2180      	movs	r1, #128	@ 0x80
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff fe68 	bl	80094c4 <SPI_WaitFlagStateUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097fe:	f043 0220 	orr.w	r2, r3, #32
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e014      	b.n	8009834 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff fedc 	bl	80095d4 <SPI_WaitFifoStateUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009826:	f043 0220 	orr.w	r2, r3, #32
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e000      	b.n	8009834 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e0e6      	b.n	8009a1c <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a74      	ldr	r2, [pc, #464]	@ (8009a24 <HAL_TIM_Base_Init+0x1e8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d036      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009860:	d031      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a70      	ldr	r2, [pc, #448]	@ (8009a28 <HAL_TIM_Base_Init+0x1ec>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d02c      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a6e      	ldr	r2, [pc, #440]	@ (8009a2c <HAL_TIM_Base_Init+0x1f0>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d027      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a6d      	ldr	r2, [pc, #436]	@ (8009a30 <HAL_TIM_Base_Init+0x1f4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d022      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a6b      	ldr	r2, [pc, #428]	@ (8009a34 <HAL_TIM_Base_Init+0x1f8>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d01d      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a6a      	ldr	r2, [pc, #424]	@ (8009a38 <HAL_TIM_Base_Init+0x1fc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d018      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a68      	ldr	r2, [pc, #416]	@ (8009a3c <HAL_TIM_Base_Init+0x200>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d013      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a67      	ldr	r2, [pc, #412]	@ (8009a40 <HAL_TIM_Base_Init+0x204>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00e      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a65      	ldr	r2, [pc, #404]	@ (8009a44 <HAL_TIM_Base_Init+0x208>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d009      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a64      	ldr	r2, [pc, #400]	@ (8009a48 <HAL_TIM_Base_Init+0x20c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d004      	beq.n	80098c6 <HAL_TIM_Base_Init+0x8a>
 80098bc:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80098c0:	4862      	ldr	r0, [pc, #392]	@ (8009a4c <HAL_TIM_Base_Init+0x210>)
 80098c2:	f7fa fde1 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d014      	beq.n	80098f8 <HAL_TIM_Base_Init+0xbc>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d010      	beq.n	80098f8 <HAL_TIM_Base_Init+0xbc>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	2b20      	cmp	r3, #32
 80098dc:	d00c      	beq.n	80098f8 <HAL_TIM_Base_Init+0xbc>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b40      	cmp	r3, #64	@ 0x40
 80098e4:	d008      	beq.n	80098f8 <HAL_TIM_Base_Init+0xbc>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b60      	cmp	r3, #96	@ 0x60
 80098ec:	d004      	beq.n	80098f8 <HAL_TIM_Base_Init+0xbc>
 80098ee:	f240 1117 	movw	r1, #279	@ 0x117
 80098f2:	4856      	ldr	r0, [pc, #344]	@ (8009a4c <HAL_TIM_Base_Init+0x210>)
 80098f4:	f7fa fdc8 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00e      	beq.n	800991e <HAL_TIM_Base_Init+0xe2>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009908:	d009      	beq.n	800991e <HAL_TIM_Base_Init+0xe2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009912:	d004      	beq.n	800991e <HAL_TIM_Base_Init+0xe2>
 8009914:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8009918:	484c      	ldr	r0, [pc, #304]	@ (8009a4c <HAL_TIM_Base_Init+0x210>)
 800991a:	f7fa fdb5 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009926:	d004      	beq.n	8009932 <HAL_TIM_Base_Init+0xf6>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a40      	ldr	r2, [pc, #256]	@ (8009a30 <HAL_TIM_Base_Init+0x1f4>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d107      	bne.n	8009942 <HAL_TIM_Base_Init+0x106>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	bf14      	ite	ne
 800993a:	2301      	movne	r3, #1
 800993c:	2300      	moveq	r3, #0
 800993e:	b2db      	uxtb	r3, r3
 8009940:	e00e      	b.n	8009960 <HAL_TIM_Base_Init+0x124>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <HAL_TIM_Base_Init+0x11c>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009952:	d201      	bcs.n	8009958 <HAL_TIM_Base_Init+0x11c>
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <HAL_TIM_Base_Init+0x11e>
 8009958:	2300      	movs	r3, #0
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	d104      	bne.n	800996e <HAL_TIM_Base_Init+0x132>
 8009964:	f240 1119 	movw	r1, #281	@ 0x119
 8009968:	4838      	ldr	r0, [pc, #224]	@ (8009a4c <HAL_TIM_Base_Init+0x210>)
 800996a:	f7fa fd8d 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <HAL_TIM_Base_Init+0x14c>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	2b80      	cmp	r3, #128	@ 0x80
 800997c:	d004      	beq.n	8009988 <HAL_TIM_Base_Init+0x14c>
 800997e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8009982:	4832      	ldr	r0, [pc, #200]	@ (8009a4c <HAL_TIM_Base_Init+0x210>)
 8009984:	f7fa fd80 	bl	8004488 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fb f9d1 	bl	8004d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f001 ff43 	bl	800b840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	40012c00 	.word	0x40012c00
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40000c00 	.word	0x40000c00
 8009a34:	40001000 	.word	0x40001000
 8009a38:	40001400 	.word	0x40001400
 8009a3c:	40013400 	.word	0x40013400
 8009a40:	40014000 	.word	0x40014000
 8009a44:	40014400 	.word	0x40014400
 8009a48:	40014800 	.word	0x40014800
 8009a4c:	0800f01c 	.word	0x0800f01c

08009a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8009b88 <HAL_TIM_Base_Start_IT+0x138>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d036      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6a:	d031      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a46      	ldr	r2, [pc, #280]	@ (8009b8c <HAL_TIM_Base_Start_IT+0x13c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d02c      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a45      	ldr	r2, [pc, #276]	@ (8009b90 <HAL_TIM_Base_Start_IT+0x140>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d027      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a43      	ldr	r2, [pc, #268]	@ (8009b94 <HAL_TIM_Base_Start_IT+0x144>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d022      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a42      	ldr	r2, [pc, #264]	@ (8009b98 <HAL_TIM_Base_Start_IT+0x148>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d01d      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a40      	ldr	r2, [pc, #256]	@ (8009b9c <HAL_TIM_Base_Start_IT+0x14c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d018      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ba0 <HAL_TIM_Base_Start_IT+0x150>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d013      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a3d      	ldr	r2, [pc, #244]	@ (8009ba4 <HAL_TIM_Base_Start_IT+0x154>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00e      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a3c      	ldr	r2, [pc, #240]	@ (8009ba8 <HAL_TIM_Base_Start_IT+0x158>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d009      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8009bac <HAL_TIM_Base_Start_IT+0x15c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009ac6:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8009aca:	4839      	ldr	r0, [pc, #228]	@ (8009bb0 <HAL_TIM_Base_Start_IT+0x160>)
 8009acc:	f7fa fcdc 	bl	8004488 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d001      	beq.n	8009ae0 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e04f      	b.n	8009b80 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0201 	orr.w	r2, r2, #1
 8009af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a22      	ldr	r2, [pc, #136]	@ (8009b88 <HAL_TIM_Base_Start_IT+0x138>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d01d      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0xee>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0a:	d018      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0xee>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a1e      	ldr	r2, [pc, #120]	@ (8009b8c <HAL_TIM_Base_Start_IT+0x13c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d013      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0xee>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009b90 <HAL_TIM_Base_Start_IT+0x140>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00e      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0xee>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a1b      	ldr	r2, [pc, #108]	@ (8009b94 <HAL_TIM_Base_Start_IT+0x144>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d009      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0xee>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ba0 <HAL_TIM_Base_Start_IT+0x150>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d004      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0xee>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1a      	ldr	r2, [pc, #104]	@ (8009ba4 <HAL_TIM_Base_Start_IT+0x154>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d115      	bne.n	8009b6a <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb4 <HAL_TIM_Base_Start_IT+0x164>)
 8009b46:	4013      	ands	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b06      	cmp	r3, #6
 8009b4e:	d015      	beq.n	8009b7c <HAL_TIM_Base_Start_IT+0x12c>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b56:	d011      	beq.n	8009b7c <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0201 	orr.w	r2, r2, #1
 8009b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b68:	e008      	b.n	8009b7c <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f042 0201 	orr.w	r2, r2, #1
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e000      	b.n	8009b7e <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40012c00 	.word	0x40012c00
 8009b8c:	40000400 	.word	0x40000400
 8009b90:	40000800 	.word	0x40000800
 8009b94:	40000c00 	.word	0x40000c00
 8009b98:	40001000 	.word	0x40001000
 8009b9c:	40001400 	.word	0x40001400
 8009ba0:	40013400 	.word	0x40013400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800
 8009bb0:	0800f01c 	.word	0x0800f01c
 8009bb4:	00010007 	.word	0x00010007

08009bb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a31      	ldr	r2, [pc, #196]	@ (8009c8c <HAL_TIM_Base_Stop_IT+0xd4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d036      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd2:	d031      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8009c90 <HAL_TIM_Base_Stop_IT+0xd8>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d02c      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c94 <HAL_TIM_Base_Stop_IT+0xdc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d027      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a2a      	ldr	r2, [pc, #168]	@ (8009c98 <HAL_TIM_Base_Stop_IT+0xe0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d022      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a29      	ldr	r2, [pc, #164]	@ (8009c9c <HAL_TIM_Base_Stop_IT+0xe4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d01d      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a27      	ldr	r2, [pc, #156]	@ (8009ca0 <HAL_TIM_Base_Stop_IT+0xe8>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d018      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a26      	ldr	r2, [pc, #152]	@ (8009ca4 <HAL_TIM_Base_Stop_IT+0xec>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d013      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a24      	ldr	r2, [pc, #144]	@ (8009ca8 <HAL_TIM_Base_Stop_IT+0xf0>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00e      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a23      	ldr	r2, [pc, #140]	@ (8009cac <HAL_TIM_Base_Stop_IT+0xf4>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d009      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a21      	ldr	r2, [pc, #132]	@ (8009cb0 <HAL_TIM_Base_Stop_IT+0xf8>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d004      	beq.n	8009c38 <HAL_TIM_Base_Stop_IT+0x80>
 8009c2e:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8009c32:	4820      	ldr	r0, [pc, #128]	@ (8009cb4 <HAL_TIM_Base_Stop_IT+0xfc>)
 8009c34:	f7fa fc28 	bl	8004488 <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0201 	bic.w	r2, r2, #1
 8009c46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6a1a      	ldr	r2, [r3, #32]
 8009c4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10f      	bne.n	8009c78 <HAL_TIM_Base_Stop_IT+0xc0>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6a1a      	ldr	r2, [r3, #32]
 8009c5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009c62:	4013      	ands	r3, r2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <HAL_TIM_Base_Stop_IT+0xc0>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0201 	bic.w	r2, r2, #1
 8009c76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40012c00 	.word	0x40012c00
 8009c90:	40000400 	.word	0x40000400
 8009c94:	40000800 	.word	0x40000800
 8009c98:	40000c00 	.word	0x40000c00
 8009c9c:	40001000 	.word	0x40001000
 8009ca0:	40001400 	.word	0x40001400
 8009ca4:	40013400 	.word	0x40013400
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	40014400 	.word	0x40014400
 8009cb0:	40014800 	.word	0x40014800
 8009cb4:	0800f01c 	.word	0x0800f01c

08009cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e0e6      	b.n	8009e98 <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a74      	ldr	r2, [pc, #464]	@ (8009ea0 <HAL_TIM_PWM_Init+0x1e8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d036      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cdc:	d031      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a70      	ldr	r2, [pc, #448]	@ (8009ea4 <HAL_TIM_PWM_Init+0x1ec>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d02c      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a6e      	ldr	r2, [pc, #440]	@ (8009ea8 <HAL_TIM_PWM_Init+0x1f0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d027      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a6d      	ldr	r2, [pc, #436]	@ (8009eac <HAL_TIM_PWM_Init+0x1f4>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d022      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a6b      	ldr	r2, [pc, #428]	@ (8009eb0 <HAL_TIM_PWM_Init+0x1f8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d01d      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8009eb4 <HAL_TIM_PWM_Init+0x1fc>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d018      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a68      	ldr	r2, [pc, #416]	@ (8009eb8 <HAL_TIM_PWM_Init+0x200>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d013      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a67      	ldr	r2, [pc, #412]	@ (8009ebc <HAL_TIM_PWM_Init+0x204>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00e      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a65      	ldr	r2, [pc, #404]	@ (8009ec0 <HAL_TIM_PWM_Init+0x208>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d009      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a64      	ldr	r2, [pc, #400]	@ (8009ec4 <HAL_TIM_PWM_Init+0x20c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d004      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x8a>
 8009d38:	f240 5133 	movw	r1, #1331	@ 0x533
 8009d3c:	4862      	ldr	r0, [pc, #392]	@ (8009ec8 <HAL_TIM_PWM_Init+0x210>)
 8009d3e:	f7fa fba3 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d014      	beq.n	8009d74 <HAL_TIM_PWM_Init+0xbc>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d010      	beq.n	8009d74 <HAL_TIM_PWM_Init+0xbc>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d00c      	beq.n	8009d74 <HAL_TIM_PWM_Init+0xbc>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	2b40      	cmp	r3, #64	@ 0x40
 8009d60:	d008      	beq.n	8009d74 <HAL_TIM_PWM_Init+0xbc>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b60      	cmp	r3, #96	@ 0x60
 8009d68:	d004      	beq.n	8009d74 <HAL_TIM_PWM_Init+0xbc>
 8009d6a:	f240 5134 	movw	r1, #1332	@ 0x534
 8009d6e:	4856      	ldr	r0, [pc, #344]	@ (8009ec8 <HAL_TIM_PWM_Init+0x210>)
 8009d70:	f7fa fb8a 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00e      	beq.n	8009d9a <HAL_TIM_PWM_Init+0xe2>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d84:	d009      	beq.n	8009d9a <HAL_TIM_PWM_Init+0xe2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d8e:	d004      	beq.n	8009d9a <HAL_TIM_PWM_Init+0xe2>
 8009d90:	f240 5135 	movw	r1, #1333	@ 0x535
 8009d94:	484c      	ldr	r0, [pc, #304]	@ (8009ec8 <HAL_TIM_PWM_Init+0x210>)
 8009d96:	f7fa fb77 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da2:	d004      	beq.n	8009dae <HAL_TIM_PWM_Init+0xf6>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a40      	ldr	r2, [pc, #256]	@ (8009eac <HAL_TIM_PWM_Init+0x1f4>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d107      	bne.n	8009dbe <HAL_TIM_PWM_Init+0x106>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bf14      	ite	ne
 8009db6:	2301      	movne	r3, #1
 8009db8:	2300      	moveq	r3, #0
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	e00e      	b.n	8009ddc <HAL_TIM_PWM_Init+0x124>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d006      	beq.n	8009dd4 <HAL_TIM_PWM_Init+0x11c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dce:	d201      	bcs.n	8009dd4 <HAL_TIM_PWM_Init+0x11c>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <HAL_TIM_PWM_Init+0x11e>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <HAL_TIM_PWM_Init+0x132>
 8009de0:	f240 5136 	movw	r1, #1334	@ 0x536
 8009de4:	4838      	ldr	r0, [pc, #224]	@ (8009ec8 <HAL_TIM_PWM_Init+0x210>)
 8009de6:	f7fa fb4f 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <HAL_TIM_PWM_Init+0x14c>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	2b80      	cmp	r3, #128	@ 0x80
 8009df8:	d004      	beq.n	8009e04 <HAL_TIM_PWM_Init+0x14c>
 8009dfa:	f240 5137 	movw	r1, #1335	@ 0x537
 8009dfe:	4832      	ldr	r0, [pc, #200]	@ (8009ec8 <HAL_TIM_PWM_Init+0x210>)
 8009e00:	f7fa fb42 	bl	8004488 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f857 	bl	8009ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2202      	movs	r2, #2
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f001 fd05 	bl	800b840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	40012c00 	.word	0x40012c00
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	40000c00 	.word	0x40000c00
 8009eb0:	40001000 	.word	0x40001000
 8009eb4:	40001400 	.word	0x40001400
 8009eb8:	40013400 	.word	0x40013400
 8009ebc:	40014000 	.word	0x40014000
 8009ec0:	40014400 	.word	0x40014400
 8009ec4:	40014800 	.word	0x40014800
 8009ec8:	0800f01c 	.word	0x0800f01c

08009ecc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a85      	ldr	r2, [pc, #532]	@ (800a104 <HAL_TIM_PWM_Start+0x224>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d115      	bne.n	8009f20 <HAL_TIM_PWM_Start+0x40>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 808d 	beq.w	800a016 <HAL_TIM_PWM_Start+0x136>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	f000 8089 	beq.w	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b08      	cmp	r3, #8
 8009f08:	f000 8085 	beq.w	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b0c      	cmp	r3, #12
 8009f10:	f000 8081 	beq.w	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b10      	cmp	r3, #16
 8009f18:	d07d      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b14      	cmp	r3, #20
 8009f1e:	d07a      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f28:	d10b      	bne.n	8009f42 <HAL_TIM_PWM_Start+0x62>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d072      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d06f      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d06c      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b0c      	cmp	r3, #12
 8009f40:	d069      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a70      	ldr	r2, [pc, #448]	@ (800a108 <HAL_TIM_PWM_Start+0x228>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d10b      	bne.n	8009f64 <HAL_TIM_PWM_Start+0x84>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d061      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	d05e      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b08      	cmp	r3, #8
 8009f5c:	d05b      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b0c      	cmp	r3, #12
 8009f62:	d058      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a68      	ldr	r2, [pc, #416]	@ (800a10c <HAL_TIM_PWM_Start+0x22c>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d10b      	bne.n	8009f86 <HAL_TIM_PWM_Start+0xa6>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d050      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d04d      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d04a      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2b0c      	cmp	r3, #12
 8009f84:	d047      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a61      	ldr	r2, [pc, #388]	@ (800a110 <HAL_TIM_PWM_Start+0x230>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d10b      	bne.n	8009fa8 <HAL_TIM_PWM_Start+0xc8>
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d03f      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d03c      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b08      	cmp	r3, #8
 8009fa0:	d039      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b0c      	cmp	r3, #12
 8009fa6:	d036      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a59      	ldr	r2, [pc, #356]	@ (800a114 <HAL_TIM_PWM_Start+0x234>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d111      	bne.n	8009fd6 <HAL_TIM_PWM_Start+0xf6>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d02e      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d02b      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d028      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2b0c      	cmp	r3, #12
 8009fc8:	d025      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b10      	cmp	r3, #16
 8009fce:	d022      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2b14      	cmp	r3, #20
 8009fd4:	d01f      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a4f      	ldr	r2, [pc, #316]	@ (800a118 <HAL_TIM_PWM_Start+0x238>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d105      	bne.n	8009fec <HAL_TIM_PWM_Start+0x10c>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d017      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d014      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a4a      	ldr	r2, [pc, #296]	@ (800a11c <HAL_TIM_PWM_Start+0x23c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d102      	bne.n	8009ffc <HAL_TIM_PWM_Start+0x11c>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00c      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a47      	ldr	r2, [pc, #284]	@ (800a120 <HAL_TIM_PWM_Start+0x240>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d102      	bne.n	800a00c <HAL_TIM_PWM_Start+0x12c>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <HAL_TIM_PWM_Start+0x136>
 800a00c:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800a010:	4844      	ldr	r0, [pc, #272]	@ (800a124 <HAL_TIM_PWM_Start+0x244>)
 800a012:	f7fa fa39 	bl	8004488 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <HAL_TIM_PWM_Start+0x150>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	bf14      	ite	ne
 800a028:	2301      	movne	r3, #1
 800a02a:	2300      	moveq	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	e03c      	b.n	800a0aa <HAL_TIM_PWM_Start+0x1ca>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d109      	bne.n	800a04a <HAL_TIM_PWM_Start+0x16a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b01      	cmp	r3, #1
 800a040:	bf14      	ite	ne
 800a042:	2301      	movne	r3, #1
 800a044:	2300      	moveq	r3, #0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	e02f      	b.n	800a0aa <HAL_TIM_PWM_Start+0x1ca>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d109      	bne.n	800a064 <HAL_TIM_PWM_Start+0x184>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b01      	cmp	r3, #1
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	e022      	b.n	800a0aa <HAL_TIM_PWM_Start+0x1ca>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b0c      	cmp	r3, #12
 800a068:	d109      	bne.n	800a07e <HAL_TIM_PWM_Start+0x19e>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b01      	cmp	r3, #1
 800a074:	bf14      	ite	ne
 800a076:	2301      	movne	r3, #1
 800a078:	2300      	moveq	r3, #0
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	e015      	b.n	800a0aa <HAL_TIM_PWM_Start+0x1ca>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b10      	cmp	r3, #16
 800a082:	d109      	bne.n	800a098 <HAL_TIM_PWM_Start+0x1b8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	bf14      	ite	ne
 800a090:	2301      	movne	r3, #1
 800a092:	2300      	moveq	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	e008      	b.n	800a0aa <HAL_TIM_PWM_Start+0x1ca>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	bf14      	ite	ne
 800a0a4:	2301      	movne	r3, #1
 800a0a6:	2300      	moveq	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e0af      	b.n	800a212 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <HAL_TIM_PWM_Start+0x1e2>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c0:	e036      	b.n	800a130 <HAL_TIM_PWM_Start+0x250>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d104      	bne.n	800a0d2 <HAL_TIM_PWM_Start+0x1f2>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0d0:	e02e      	b.n	800a130 <HAL_TIM_PWM_Start+0x250>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d104      	bne.n	800a0e2 <HAL_TIM_PWM_Start+0x202>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0e0:	e026      	b.n	800a130 <HAL_TIM_PWM_Start+0x250>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b0c      	cmp	r3, #12
 800a0e6:	d104      	bne.n	800a0f2 <HAL_TIM_PWM_Start+0x212>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0f0:	e01e      	b.n	800a130 <HAL_TIM_PWM_Start+0x250>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	d117      	bne.n	800a128 <HAL_TIM_PWM_Start+0x248>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a100:	e016      	b.n	800a130 <HAL_TIM_PWM_Start+0x250>
 800a102:	bf00      	nop
 800a104:	40012c00 	.word	0x40012c00
 800a108:	40000400 	.word	0x40000400
 800a10c:	40000800 	.word	0x40000800
 800a110:	40000c00 	.word	0x40000c00
 800a114:	40013400 	.word	0x40013400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40014400 	.word	0x40014400
 800a120:	40014800 	.word	0x40014800
 800a124:	0800f01c 	.word	0x0800f01c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2201      	movs	r2, #1
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	4618      	mov	r0, r3
 800a13a:	f002 f821 	bl	800c180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a36      	ldr	r2, [pc, #216]	@ (800a21c <HAL_TIM_PWM_Start+0x33c>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d013      	beq.n	800a170 <HAL_TIM_PWM_Start+0x290>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a34      	ldr	r2, [pc, #208]	@ (800a220 <HAL_TIM_PWM_Start+0x340>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00e      	beq.n	800a170 <HAL_TIM_PWM_Start+0x290>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a33      	ldr	r2, [pc, #204]	@ (800a224 <HAL_TIM_PWM_Start+0x344>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d009      	beq.n	800a170 <HAL_TIM_PWM_Start+0x290>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a31      	ldr	r2, [pc, #196]	@ (800a228 <HAL_TIM_PWM_Start+0x348>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d004      	beq.n	800a170 <HAL_TIM_PWM_Start+0x290>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a30      	ldr	r2, [pc, #192]	@ (800a22c <HAL_TIM_PWM_Start+0x34c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d101      	bne.n	800a174 <HAL_TIM_PWM_Start+0x294>
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <HAL_TIM_PWM_Start+0x296>
 800a174:	2300      	movs	r3, #0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d007      	beq.n	800a18a <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a188:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a23      	ldr	r2, [pc, #140]	@ (800a21c <HAL_TIM_PWM_Start+0x33c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d01d      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x2f0>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a19c:	d018      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x2f0>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a23      	ldr	r2, [pc, #140]	@ (800a230 <HAL_TIM_PWM_Start+0x350>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d013      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x2f0>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a21      	ldr	r2, [pc, #132]	@ (800a234 <HAL_TIM_PWM_Start+0x354>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00e      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x2f0>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a20      	ldr	r2, [pc, #128]	@ (800a238 <HAL_TIM_PWM_Start+0x358>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d009      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x2f0>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a17      	ldr	r2, [pc, #92]	@ (800a220 <HAL_TIM_PWM_Start+0x340>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d004      	beq.n	800a1d0 <HAL_TIM_PWM_Start+0x2f0>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a16      	ldr	r2, [pc, #88]	@ (800a224 <HAL_TIM_PWM_Start+0x344>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d115      	bne.n	800a1fc <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	4b19      	ldr	r3, [pc, #100]	@ (800a23c <HAL_TIM_PWM_Start+0x35c>)
 800a1d8:	4013      	ands	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b06      	cmp	r3, #6
 800a1e0:	d015      	beq.n	800a20e <HAL_TIM_PWM_Start+0x32e>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1e8:	d011      	beq.n	800a20e <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0201 	orr.w	r2, r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fa:	e008      	b.n	800a20e <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	e000      	b.n	800a210 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40012c00 	.word	0x40012c00
 800a220:	40013400 	.word	0x40013400
 800a224:	40014000 	.word	0x40014000
 800a228:	40014400 	.word	0x40014400
 800a22c:	40014800 	.word	0x40014800
 800a230:	40000400 	.word	0x40000400
 800a234:	40000800 	.word	0x40000800
 800a238:	40000c00 	.word	0x40000c00
 800a23c:	00010007 	.word	0x00010007

0800a240 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a8d      	ldr	r2, [pc, #564]	@ (800a484 <HAL_TIM_PWM_Stop+0x244>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d115      	bne.n	800a280 <HAL_TIM_PWM_Stop+0x40>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 808d 	beq.w	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	f000 8089 	beq.w	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b08      	cmp	r3, #8
 800a268:	f000 8085 	beq.w	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b0c      	cmp	r3, #12
 800a270:	f000 8081 	beq.w	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2b10      	cmp	r3, #16
 800a278:	d07d      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b14      	cmp	r3, #20
 800a27e:	d07a      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a288:	d10b      	bne.n	800a2a2 <HAL_TIM_PWM_Stop+0x62>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d072      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b04      	cmp	r3, #4
 800a294:	d06f      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d06c      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b0c      	cmp	r3, #12
 800a2a0:	d069      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a78      	ldr	r2, [pc, #480]	@ (800a488 <HAL_TIM_PWM_Stop+0x248>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d10b      	bne.n	800a2c4 <HAL_TIM_PWM_Stop+0x84>
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d061      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d05e      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2b08      	cmp	r3, #8
 800a2bc:	d05b      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b0c      	cmp	r3, #12
 800a2c2:	d058      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a70      	ldr	r2, [pc, #448]	@ (800a48c <HAL_TIM_PWM_Stop+0x24c>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d10b      	bne.n	800a2e6 <HAL_TIM_PWM_Stop+0xa6>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d050      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d04d      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	d04a      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b0c      	cmp	r3, #12
 800a2e4:	d047      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a69      	ldr	r2, [pc, #420]	@ (800a490 <HAL_TIM_PWM_Stop+0x250>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d10b      	bne.n	800a308 <HAL_TIM_PWM_Stop+0xc8>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d03f      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d03c      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b08      	cmp	r3, #8
 800a300:	d039      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b0c      	cmp	r3, #12
 800a306:	d036      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a61      	ldr	r2, [pc, #388]	@ (800a494 <HAL_TIM_PWM_Stop+0x254>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d111      	bne.n	800a336 <HAL_TIM_PWM_Stop+0xf6>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d02e      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d02b      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b08      	cmp	r3, #8
 800a322:	d028      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b0c      	cmp	r3, #12
 800a328:	d025      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b10      	cmp	r3, #16
 800a32e:	d022      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b14      	cmp	r3, #20
 800a334:	d01f      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a57      	ldr	r2, [pc, #348]	@ (800a498 <HAL_TIM_PWM_Stop+0x258>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d105      	bne.n	800a34c <HAL_TIM_PWM_Stop+0x10c>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d017      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d014      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a52      	ldr	r2, [pc, #328]	@ (800a49c <HAL_TIM_PWM_Stop+0x25c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d102      	bne.n	800a35c <HAL_TIM_PWM_Stop+0x11c>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00c      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a4f      	ldr	r2, [pc, #316]	@ (800a4a0 <HAL_TIM_PWM_Stop+0x260>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d102      	bne.n	800a36c <HAL_TIM_PWM_Stop+0x12c>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <HAL_TIM_PWM_Stop+0x136>
 800a36c:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800a370:	484c      	ldr	r0, [pc, #304]	@ (800a4a4 <HAL_TIM_PWM_Stop+0x264>)
 800a372:	f7fa f889 	bl	8004488 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2200      	movs	r2, #0
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fefe 	bl	800c180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a3e      	ldr	r2, [pc, #248]	@ (800a484 <HAL_TIM_PWM_Stop+0x244>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d013      	beq.n	800a3b6 <HAL_TIM_PWM_Stop+0x176>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a40      	ldr	r2, [pc, #256]	@ (800a494 <HAL_TIM_PWM_Stop+0x254>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d00e      	beq.n	800a3b6 <HAL_TIM_PWM_Stop+0x176>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a3e      	ldr	r2, [pc, #248]	@ (800a498 <HAL_TIM_PWM_Stop+0x258>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d009      	beq.n	800a3b6 <HAL_TIM_PWM_Stop+0x176>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a3d      	ldr	r2, [pc, #244]	@ (800a49c <HAL_TIM_PWM_Stop+0x25c>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d004      	beq.n	800a3b6 <HAL_TIM_PWM_Stop+0x176>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a3b      	ldr	r2, [pc, #236]	@ (800a4a0 <HAL_TIM_PWM_Stop+0x260>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d101      	bne.n	800a3ba <HAL_TIM_PWM_Stop+0x17a>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <HAL_TIM_PWM_Stop+0x17c>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d017      	beq.n	800a3f0 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6a1a      	ldr	r2, [r3, #32]
 800a3c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10f      	bne.n	800a3f0 <HAL_TIM_PWM_Stop+0x1b0>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6a1a      	ldr	r2, [r3, #32]
 800a3d6:	f240 4344 	movw	r3, #1092	@ 0x444
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d107      	bne.n	800a3f0 <HAL_TIM_PWM_Stop+0x1b0>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a3ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6a1a      	ldr	r2, [r3, #32]
 800a3f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10f      	bne.n	800a420 <HAL_TIM_PWM_Stop+0x1e0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6a1a      	ldr	r2, [r3, #32]
 800a406:	f240 4344 	movw	r3, #1092	@ 0x444
 800a40a:	4013      	ands	r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d107      	bne.n	800a420 <HAL_TIM_PWM_Stop+0x1e0>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0201 	bic.w	r2, r2, #1
 800a41e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d104      	bne.n	800a430 <HAL_TIM_PWM_Stop+0x1f0>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a42e:	e023      	b.n	800a478 <HAL_TIM_PWM_Stop+0x238>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b04      	cmp	r3, #4
 800a434:	d104      	bne.n	800a440 <HAL_TIM_PWM_Stop+0x200>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a43e:	e01b      	b.n	800a478 <HAL_TIM_PWM_Stop+0x238>
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b08      	cmp	r3, #8
 800a444:	d104      	bne.n	800a450 <HAL_TIM_PWM_Stop+0x210>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a44e:	e013      	b.n	800a478 <HAL_TIM_PWM_Stop+0x238>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b0c      	cmp	r3, #12
 800a454:	d104      	bne.n	800a460 <HAL_TIM_PWM_Stop+0x220>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a45e:	e00b      	b.n	800a478 <HAL_TIM_PWM_Stop+0x238>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b10      	cmp	r3, #16
 800a464:	d104      	bne.n	800a470 <HAL_TIM_PWM_Stop+0x230>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a46e:	e003      	b.n	800a478 <HAL_TIM_PWM_Stop+0x238>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	40012c00 	.word	0x40012c00
 800a488:	40000400 	.word	0x40000400
 800a48c:	40000800 	.word	0x40000800
 800a490:	40000c00 	.word	0x40000c00
 800a494:	40013400 	.word	0x40013400
 800a498:	40014000 	.word	0x40014000
 800a49c:	40014400 	.word	0x40014400
 800a4a0:	40014800 	.word	0x40014800
 800a4a4:	0800f01c 	.word	0x0800f01c

0800a4a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e1b0      	b.n	800a81e <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a7f      	ldr	r2, [pc, #508]	@ (800a6c0 <HAL_TIM_Encoder_Init+0x218>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d01d      	beq.n	800a502 <HAL_TIM_Encoder_Init+0x5a>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ce:	d018      	beq.n	800a502 <HAL_TIM_Encoder_Init+0x5a>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a7b      	ldr	r2, [pc, #492]	@ (800a6c4 <HAL_TIM_Encoder_Init+0x21c>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d013      	beq.n	800a502 <HAL_TIM_Encoder_Init+0x5a>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a7a      	ldr	r2, [pc, #488]	@ (800a6c8 <HAL_TIM_Encoder_Init+0x220>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d00e      	beq.n	800a502 <HAL_TIM_Encoder_Init+0x5a>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a78      	ldr	r2, [pc, #480]	@ (800a6cc <HAL_TIM_Encoder_Init+0x224>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d009      	beq.n	800a502 <HAL_TIM_Encoder_Init+0x5a>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a77      	ldr	r2, [pc, #476]	@ (800a6d0 <HAL_TIM_Encoder_Init+0x228>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d004      	beq.n	800a502 <HAL_TIM_Encoder_Init+0x5a>
 800a4f8:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800a4fc:	4875      	ldr	r0, [pc, #468]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a4fe:	f7f9 ffc3 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d014      	beq.n	800a534 <HAL_TIM_Encoder_Init+0x8c>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	2b10      	cmp	r3, #16
 800a510:	d010      	beq.n	800a534 <HAL_TIM_Encoder_Init+0x8c>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	2b20      	cmp	r3, #32
 800a518:	d00c      	beq.n	800a534 <HAL_TIM_Encoder_Init+0x8c>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	2b40      	cmp	r3, #64	@ 0x40
 800a520:	d008      	beq.n	800a534 <HAL_TIM_Encoder_Init+0x8c>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b60      	cmp	r3, #96	@ 0x60
 800a528:	d004      	beq.n	800a534 <HAL_TIM_Encoder_Init+0x8c>
 800a52a:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800a52e:	4869      	ldr	r0, [pc, #420]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a530:	f7f9 ffaa 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00e      	beq.n	800a55a <HAL_TIM_Encoder_Init+0xb2>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a544:	d009      	beq.n	800a55a <HAL_TIM_Encoder_Init+0xb2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a54e:	d004      	beq.n	800a55a <HAL_TIM_Encoder_Init+0xb2>
 800a550:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800a554:	485f      	ldr	r0, [pc, #380]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a556:	f7f9 ff97 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <HAL_TIM_Encoder_Init+0xcc>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	2b80      	cmp	r3, #128	@ 0x80
 800a568:	d004      	beq.n	800a574 <HAL_TIM_Encoder_Init+0xcc>
 800a56a:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800a56e:	4859      	ldr	r0, [pc, #356]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a570:	f7f9 ff8a 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d00c      	beq.n	800a596 <HAL_TIM_Encoder_Init+0xee>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d008      	beq.n	800a596 <HAL_TIM_Encoder_Init+0xee>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d004      	beq.n	800a596 <HAL_TIM_Encoder_Init+0xee>
 800a58c:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800a590:	4850      	ldr	r0, [pc, #320]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a592:	f7f9 ff79 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d00c      	beq.n	800a5b8 <HAL_TIM_Encoder_Init+0x110>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d008      	beq.n	800a5b8 <HAL_TIM_Encoder_Init+0x110>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d004      	beq.n	800a5b8 <HAL_TIM_Encoder_Init+0x110>
 800a5ae:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800a5b2:	4848      	ldr	r0, [pc, #288]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a5b4:	f7f9 ff68 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d00c      	beq.n	800a5da <HAL_TIM_Encoder_Init+0x132>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d008      	beq.n	800a5da <HAL_TIM_Encoder_Init+0x132>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d004      	beq.n	800a5da <HAL_TIM_Encoder_Init+0x132>
 800a5d0:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800a5d4:	483f      	ldr	r0, [pc, #252]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a5d6:	f7f9 ff57 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <HAL_TIM_Encoder_Init+0x14c>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d004      	beq.n	800a5f4 <HAL_TIM_Encoder_Init+0x14c>
 800a5ea:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800a5ee:	4839      	ldr	r0, [pc, #228]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a5f0:	f7f9 ff4a 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d008      	beq.n	800a60e <HAL_TIM_Encoder_Init+0x166>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	2b02      	cmp	r3, #2
 800a602:	d004      	beq.n	800a60e <HAL_TIM_Encoder_Init+0x166>
 800a604:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800a608:	4832      	ldr	r0, [pc, #200]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a60a:	f7f9 ff3d 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d010      	beq.n	800a638 <HAL_TIM_Encoder_Init+0x190>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	d00c      	beq.n	800a638 <HAL_TIM_Encoder_Init+0x190>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	2b08      	cmp	r3, #8
 800a624:	d008      	beq.n	800a638 <HAL_TIM_Encoder_Init+0x190>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	2b0c      	cmp	r3, #12
 800a62c:	d004      	beq.n	800a638 <HAL_TIM_Encoder_Init+0x190>
 800a62e:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800a632:	4828      	ldr	r0, [pc, #160]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a634:	f7f9 ff28 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d010      	beq.n	800a662 <HAL_TIM_Encoder_Init+0x1ba>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	2b04      	cmp	r3, #4
 800a646:	d00c      	beq.n	800a662 <HAL_TIM_Encoder_Init+0x1ba>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	2b08      	cmp	r3, #8
 800a64e:	d008      	beq.n	800a662 <HAL_TIM_Encoder_Init+0x1ba>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	69db      	ldr	r3, [r3, #28]
 800a654:	2b0c      	cmp	r3, #12
 800a656:	d004      	beq.n	800a662 <HAL_TIM_Encoder_Init+0x1ba>
 800a658:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800a65c:	481d      	ldr	r0, [pc, #116]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a65e:	f7f9 ff13 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b0f      	cmp	r3, #15
 800a668:	d904      	bls.n	800a674 <HAL_TIM_Encoder_Init+0x1cc>
 800a66a:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800a66e:	4819      	ldr	r0, [pc, #100]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a670:	f7f9 ff0a 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	2b0f      	cmp	r3, #15
 800a67a:	d904      	bls.n	800a686 <HAL_TIM_Encoder_Init+0x1de>
 800a67c:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800a680:	4814      	ldr	r0, [pc, #80]	@ (800a6d4 <HAL_TIM_Encoder_Init+0x22c>)
 800a682:	f7f9 ff01 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a68e:	d004      	beq.n	800a69a <HAL_TIM_Encoder_Init+0x1f2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a0d      	ldr	r2, [pc, #52]	@ (800a6cc <HAL_TIM_Encoder_Init+0x224>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d107      	bne.n	800a6aa <HAL_TIM_Encoder_Init+0x202>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	bf14      	ite	ne
 800a6a2:	2301      	movne	r3, #1
 800a6a4:	2300      	moveq	r3, #0
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	e01a      	b.n	800a6e0 <HAL_TIM_Encoder_Init+0x238>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d012      	beq.n	800a6d8 <HAL_TIM_Encoder_Init+0x230>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ba:	d20d      	bcs.n	800a6d8 <HAL_TIM_Encoder_Init+0x230>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e00c      	b.n	800a6da <HAL_TIM_Encoder_Init+0x232>
 800a6c0:	40012c00 	.word	0x40012c00
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	40000c00 	.word	0x40000c00
 800a6d0:	40013400 	.word	0x40013400
 800a6d4:	0800f01c 	.word	0x0800f01c
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <HAL_TIM_Encoder_Init+0x246>
 800a6e4:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800a6e8:	484f      	ldr	r0, [pc, #316]	@ (800a828 <HAL_TIM_Encoder_Init+0x380>)
 800a6ea:	f7f9 fecd 	bl	8004488 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7fa faaa 	bl	8004c5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6812      	ldr	r2, [r2, #0]
 800a71a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a71e:	f023 0307 	bic.w	r3, r3, #7
 800a722:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f001 f886 	bl	800b840 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a75c:	f023 0303 	bic.w	r3, r3, #3
 800a760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	021b      	lsls	r3, r3, #8
 800a76c:	4313      	orrs	r3, r2
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	4313      	orrs	r3, r2
 800a772:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a77a:	f023 030c 	bic.w	r3, r3, #12
 800a77e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a78a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	4313      	orrs	r3, r2
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	011a      	lsls	r2, r3, #4
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	031b      	lsls	r3, r3, #12
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a7b8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a7c0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	0800f01c 	.word	0x0800f01c

0800a82c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a83c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a844:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a84c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a854:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a4d      	ldr	r2, [pc, #308]	@ (800a990 <HAL_TIM_Encoder_Start+0x164>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d01d      	beq.n	800a89c <HAL_TIM_Encoder_Start+0x70>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a868:	d018      	beq.n	800a89c <HAL_TIM_Encoder_Start+0x70>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a49      	ldr	r2, [pc, #292]	@ (800a994 <HAL_TIM_Encoder_Start+0x168>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d013      	beq.n	800a89c <HAL_TIM_Encoder_Start+0x70>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a47      	ldr	r2, [pc, #284]	@ (800a998 <HAL_TIM_Encoder_Start+0x16c>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00e      	beq.n	800a89c <HAL_TIM_Encoder_Start+0x70>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a46      	ldr	r2, [pc, #280]	@ (800a99c <HAL_TIM_Encoder_Start+0x170>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d009      	beq.n	800a89c <HAL_TIM_Encoder_Start+0x70>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a44      	ldr	r2, [pc, #272]	@ (800a9a0 <HAL_TIM_Encoder_Start+0x174>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d004      	beq.n	800a89c <HAL_TIM_Encoder_Start+0x70>
 800a892:	f640 41a1 	movw	r1, #3233	@ 0xca1
 800a896:	4843      	ldr	r0, [pc, #268]	@ (800a9a4 <HAL_TIM_Encoder_Start+0x178>)
 800a898:	f7f9 fdf6 	bl	8004488 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d110      	bne.n	800a8c4 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d102      	bne.n	800a8ae <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8a8:	7b7b      	ldrb	r3, [r7, #13]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d001      	beq.n	800a8b2 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e069      	b.n	800a986 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2202      	movs	r2, #2
 800a8be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8c2:	e031      	b.n	800a928 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d110      	bne.n	800a8ec <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d102      	bne.n	800a8d6 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8d0:	7b3b      	ldrb	r3, [r7, #12]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d001      	beq.n	800a8da <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e055      	b.n	800a986 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2202      	movs	r2, #2
 800a8de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8ea:	e01d      	b.n	800a928 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d108      	bne.n	800a904 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d105      	bne.n	800a904 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8f8:	7b7b      	ldrb	r3, [r7, #13]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d102      	bne.n	800a904 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8fe:	7b3b      	ldrb	r3, [r7, #12]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d001      	beq.n	800a908 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e03e      	b.n	800a986 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_Encoder_Start+0x10a>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b04      	cmp	r3, #4
 800a932:	d008      	beq.n	800a946 <HAL_TIM_Encoder_Start+0x11a>
 800a934:	e00f      	b.n	800a956 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2201      	movs	r2, #1
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fc1e 	bl	800c180 <TIM_CCxChannelCmd>
      break;
 800a944:	e016      	b.n	800a974 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2201      	movs	r2, #1
 800a94c:	2104      	movs	r1, #4
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 fc16 	bl	800c180 <TIM_CCxChannelCmd>
      break;
 800a954:	e00e      	b.n	800a974 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2201      	movs	r2, #1
 800a95c:	2100      	movs	r1, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f001 fc0e 	bl	800c180 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2201      	movs	r2, #1
 800a96a:	2104      	movs	r1, #4
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 fc07 	bl	800c180 <TIM_CCxChannelCmd>
      break;
 800a972:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	40012c00 	.word	0x40012c00
 800a994:	40000400 	.word	0x40000400
 800a998:	40000800 	.word	0x40000800
 800a99c:	40000c00 	.word	0x40000c00
 800a9a0:	40013400 	.word	0x40013400
 800a9a4:	0800f01c 	.word	0x0800f01c

0800a9a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d020      	beq.n	800aa0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01b      	beq.n	800aa0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f06f 0202 	mvn.w	r2, #2
 800a9dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 ff06 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800a9f8:	e005      	b.n	800aa06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fef8 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 ff09 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0304 	and.w	r3, r3, #4
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d020      	beq.n	800aa58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01b      	beq.n	800aa58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f06f 0204 	mvn.w	r2, #4
 800aa28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fee0 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800aa44:	e005      	b.n	800aa52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fed2 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fee3 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f003 0308 	and.w	r3, r3, #8
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d020      	beq.n	800aaa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f003 0308 	and.w	r3, r3, #8
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01b      	beq.n	800aaa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f06f 0208 	mvn.w	r2, #8
 800aa74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2204      	movs	r2, #4
 800aa7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 feba 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800aa90:	e005      	b.n	800aa9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 feac 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 febd 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f003 0310 	and.w	r3, r3, #16
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d020      	beq.n	800aaf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f003 0310 	and.w	r3, r3, #16
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01b      	beq.n	800aaf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f06f 0210 	mvn.w	r2, #16
 800aac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2208      	movs	r2, #8
 800aac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fe94 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800aadc:	e005      	b.n	800aaea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fe86 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fe97 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0201 	mvn.w	r2, #1
 800ab0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7f8 fd3e 	bl	8003590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d104      	bne.n	800ab28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00c      	beq.n	800ab42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d007      	beq.n	800ab42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ab3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f001 fe2f 	bl	800c7a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00c      	beq.n	800ab66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d007      	beq.n	800ab66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 fe27 	bl	800c7b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00c      	beq.n	800ab8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d007      	beq.n	800ab8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fe51 	bl	800b82c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f003 0320 	and.w	r3, r3, #32
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00c      	beq.n	800abae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0320 	and.w	r3, r3, #32
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f06f 0220 	mvn.w	r2, #32
 800aba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 fdef 	bl	800c78c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abae:	bf00      	nop
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d016      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d013      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b08      	cmp	r3, #8
 800abd8:	d010      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b0c      	cmp	r3, #12
 800abde:	d00d      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b10      	cmp	r3, #16
 800abe4:	d00a      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b14      	cmp	r3, #20
 800abea:	d007      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b3c      	cmp	r3, #60	@ 0x3c
 800abf0:	d004      	beq.n	800abfc <HAL_TIM_PWM_ConfigChannel+0x44>
 800abf2:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800abf6:	488b      	ldr	r0, [pc, #556]	@ (800ae24 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800abf8:	f7f9 fc46 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b60      	cmp	r3, #96	@ 0x60
 800ac02:	d01c      	beq.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x86>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b70      	cmp	r3, #112	@ 0x70
 800ac0a:	d018      	beq.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x86>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a85      	ldr	r2, [pc, #532]	@ (800ae28 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d013      	beq.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x86>
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a84      	ldr	r2, [pc, #528]	@ (800ae2c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d00e      	beq.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x86>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a82      	ldr	r2, [pc, #520]	@ (800ae30 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d009      	beq.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x86>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a81      	ldr	r2, [pc, #516]	@ (800ae34 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d004      	beq.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x86>
 800ac34:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800ac38:	487a      	ldr	r0, [pc, #488]	@ (800ae24 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ac3a:	f7f9 fc25 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d008      	beq.n	800ac58 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d004      	beq.n	800ac58 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800ac4e:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800ac52:	4874      	ldr	r0, [pc, #464]	@ (800ae24 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ac54:	f7f9 fc18 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d008      	beq.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0xba>
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d004      	beq.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0xba>
 800ac68:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800ac6c:	486d      	ldr	r0, [pc, #436]	@ (800ae24 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ac6e:	f7f9 fc0b 	bl	8004488 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e1d9      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x47c>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b14      	cmp	r3, #20
 800ac8c:	f200 81ca 	bhi.w	800b024 <HAL_TIM_PWM_ConfigChannel+0x46c>
 800ac90:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800aced 	.word	0x0800aced
 800ac9c:	0800b025 	.word	0x0800b025
 800aca0:	0800b025 	.word	0x0800b025
 800aca4:	0800b025 	.word	0x0800b025
 800aca8:	0800ad91 	.word	0x0800ad91
 800acac:	0800b025 	.word	0x0800b025
 800acb0:	0800b025 	.word	0x0800b025
 800acb4:	0800b025 	.word	0x0800b025
 800acb8:	0800ae59 	.word	0x0800ae59
 800acbc:	0800b025 	.word	0x0800b025
 800acc0:	0800b025 	.word	0x0800b025
 800acc4:	0800b025 	.word	0x0800b025
 800acc8:	0800aedf 	.word	0x0800aedf
 800accc:	0800b025 	.word	0x0800b025
 800acd0:	0800b025 	.word	0x0800b025
 800acd4:	0800b025 	.word	0x0800b025
 800acd8:	0800af67 	.word	0x0800af67
 800acdc:	0800b025 	.word	0x0800b025
 800ace0:	0800b025 	.word	0x0800b025
 800ace4:	0800b025 	.word	0x0800b025
 800ace8:	0800afc5 	.word	0x0800afc5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a51      	ldr	r2, [pc, #324]	@ (800ae38 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d02c      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acfe:	d027      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a4d      	ldr	r2, [pc, #308]	@ (800ae3c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d022      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a4c      	ldr	r2, [pc, #304]	@ (800ae40 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d01d      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a4a      	ldr	r2, [pc, #296]	@ (800ae44 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d018      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a49      	ldr	r2, [pc, #292]	@ (800ae48 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d013      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a47      	ldr	r2, [pc, #284]	@ (800ae4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00e      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a46      	ldr	r2, [pc, #280]	@ (800ae50 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d009      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a44      	ldr	r2, [pc, #272]	@ (800ae54 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d004      	beq.n	800ad50 <HAL_TIM_PWM_ConfigChannel+0x198>
 800ad46:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800ad4a:	4836      	ldr	r0, [pc, #216]	@ (800ae24 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ad4c:	f7f9 fb9c 	bl	8004488 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fe18 	bl	800b98c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f042 0208 	orr.w	r2, r2, #8
 800ad6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0204 	bic.w	r2, r2, #4
 800ad7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6999      	ldr	r1, [r3, #24]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	619a      	str	r2, [r3, #24]
      break;
 800ad8e:	e14c      	b.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a28      	ldr	r2, [pc, #160]	@ (800ae38 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d022      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ada2:	d01d      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a24      	ldr	r2, [pc, #144]	@ (800ae3c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d018      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a23      	ldr	r2, [pc, #140]	@ (800ae40 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d013      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a21      	ldr	r2, [pc, #132]	@ (800ae44 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00e      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a20      	ldr	r2, [pc, #128]	@ (800ae48 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d009      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d004      	beq.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800add6:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800adda:	4812      	ldr	r0, [pc, #72]	@ (800ae24 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800addc:	f7f9 fb54 	bl	8004488 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68b9      	ldr	r1, [r7, #8]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fe8a 	bl	800bb00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	699a      	ldr	r2, [r3, #24]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	699a      	ldr	r2, [r3, #24]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6999      	ldr	r1, [r3, #24]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	021a      	lsls	r2, r3, #8
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	619a      	str	r2, [r3, #24]
      break;
 800ae20:	e103      	b.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x472>
 800ae22:	bf00      	nop
 800ae24:	0800f01c 	.word	0x0800f01c
 800ae28:	00010040 	.word	0x00010040
 800ae2c:	00010050 	.word	0x00010050
 800ae30:	00010060 	.word	0x00010060
 800ae34:	00010070 	.word	0x00010070
 800ae38:	40012c00 	.word	0x40012c00
 800ae3c:	40000400 	.word	0x40000400
 800ae40:	40000800 	.word	0x40000800
 800ae44:	40000c00 	.word	0x40000c00
 800ae48:	40013400 	.word	0x40013400
 800ae4c:	40014000 	.word	0x40014000
 800ae50:	40014400 	.word	0x40014400
 800ae54:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a77      	ldr	r2, [pc, #476]	@ (800b03c <HAL_TIM_PWM_ConfigChannel+0x484>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d01d      	beq.n	800ae9e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae6a:	d018      	beq.n	800ae9e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a73      	ldr	r2, [pc, #460]	@ (800b040 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d013      	beq.n	800ae9e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a72      	ldr	r2, [pc, #456]	@ (800b044 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d00e      	beq.n	800ae9e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a70      	ldr	r2, [pc, #448]	@ (800b048 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d009      	beq.n	800ae9e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a6f      	ldr	r2, [pc, #444]	@ (800b04c <HAL_TIM_PWM_ConfigChannel+0x494>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d004      	beq.n	800ae9e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800ae94:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800ae98:	486d      	ldr	r0, [pc, #436]	@ (800b050 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800ae9a:	f7f9 faf5 	bl	8004488 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68b9      	ldr	r1, [r7, #8]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fedd 	bl	800bc64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69da      	ldr	r2, [r3, #28]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f042 0208 	orr.w	r2, r2, #8
 800aeb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69da      	ldr	r2, [r3, #28]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 0204 	bic.w	r2, r2, #4
 800aec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69d9      	ldr	r1, [r3, #28]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	61da      	str	r2, [r3, #28]
      break;
 800aedc:	e0a5      	b.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a56      	ldr	r2, [pc, #344]	@ (800b03c <HAL_TIM_PWM_ConfigChannel+0x484>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d01d      	beq.n	800af24 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aef0:	d018      	beq.n	800af24 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a52      	ldr	r2, [pc, #328]	@ (800b040 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d013      	beq.n	800af24 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a50      	ldr	r2, [pc, #320]	@ (800b044 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d00e      	beq.n	800af24 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a4f      	ldr	r2, [pc, #316]	@ (800b048 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d009      	beq.n	800af24 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a4d      	ldr	r2, [pc, #308]	@ (800b04c <HAL_TIM_PWM_ConfigChannel+0x494>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d004      	beq.n	800af24 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800af1a:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800af1e:	484c      	ldr	r0, [pc, #304]	@ (800b050 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800af20:	f7f9 fab2 	bl	8004488 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 ff4c 	bl	800bdc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69da      	ldr	r2, [r3, #28]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	69da      	ldr	r2, [r3, #28]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69d9      	ldr	r1, [r3, #28]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	021a      	lsls	r2, r3, #8
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	61da      	str	r2, [r3, #28]
      break;
 800af64:	e061      	b.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a34      	ldr	r2, [pc, #208]	@ (800b03c <HAL_TIM_PWM_ConfigChannel+0x484>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d009      	beq.n	800af84 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a35      	ldr	r2, [pc, #212]	@ (800b04c <HAL_TIM_PWM_ConfigChannel+0x494>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d004      	beq.n	800af84 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800af7a:	f241 1104 	movw	r1, #4356	@ 0x1104
 800af7e:	4834      	ldr	r0, [pc, #208]	@ (800b050 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800af80:	f7f9 fa82 	bl	8004488 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 ff94 	bl	800beb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f042 0208 	orr.w	r2, r2, #8
 800af9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0204 	bic.w	r2, r2, #4
 800afae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800afc2:	e032      	b.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a1c      	ldr	r2, [pc, #112]	@ (800b03c <HAL_TIM_PWM_ConfigChannel+0x484>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d009      	beq.n	800afe2 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a1e      	ldr	r2, [pc, #120]	@ (800b04c <HAL_TIM_PWM_ConfigChannel+0x494>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d004      	beq.n	800afe2 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800afd8:	f241 1115 	movw	r1, #4373	@ 0x1115
 800afdc:	481c      	ldr	r0, [pc, #112]	@ (800b050 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800afde:	f7f9 fa53 	bl	8004488 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 ffc9 	bl	800bf80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800affc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b00c:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	021a      	lsls	r2, r3, #8
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b022:	e002      	b.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	75fb      	strb	r3, [r7, #23]
      break;
 800b028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b032:	7dfb      	ldrb	r3, [r7, #23]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	40012c00 	.word	0x40012c00
 800b040:	40000400 	.word	0x40000400
 800b044:	40000800 	.word	0x40000800
 800b048:	40000c00 	.word	0x40000c00
 800b04c:	40013400 	.word	0x40013400
 800b050:	0800f01c 	.word	0x0800f01c

0800b054 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a33      	ldr	r2, [pc, #204]	@ (800b130 <HAL_TIM_GenerateEvent+0xdc>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d036      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b070:	d031      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a2f      	ldr	r2, [pc, #188]	@ (800b134 <HAL_TIM_GenerateEvent+0xe0>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d02c      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a2d      	ldr	r2, [pc, #180]	@ (800b138 <HAL_TIM_GenerateEvent+0xe4>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d027      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a2c      	ldr	r2, [pc, #176]	@ (800b13c <HAL_TIM_GenerateEvent+0xe8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d022      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a2a      	ldr	r2, [pc, #168]	@ (800b140 <HAL_TIM_GenerateEvent+0xec>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d01d      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a29      	ldr	r2, [pc, #164]	@ (800b144 <HAL_TIM_GenerateEvent+0xf0>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d018      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a27      	ldr	r2, [pc, #156]	@ (800b148 <HAL_TIM_GenerateEvent+0xf4>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d013      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a26      	ldr	r2, [pc, #152]	@ (800b14c <HAL_TIM_GenerateEvent+0xf8>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d00e      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a24      	ldr	r2, [pc, #144]	@ (800b150 <HAL_TIM_GenerateEvent+0xfc>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d009      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a23      	ldr	r2, [pc, #140]	@ (800b154 <HAL_TIM_GenerateEvent+0x100>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d004      	beq.n	800b0d6 <HAL_TIM_GenerateEvent+0x82>
 800b0cc:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800b0d0:	4821      	ldr	r0, [pc, #132]	@ (800b158 <HAL_TIM_GenerateEvent+0x104>)
 800b0d2:	f7f9 f9d9 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0dc:	d202      	bcs.n	800b0e4 <HAL_TIM_GenerateEvent+0x90>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <HAL_TIM_GenerateEvent+0x9a>
 800b0e4:	f241 4181 	movw	r1, #5249	@ 0x1481
 800b0e8:	481b      	ldr	r0, [pc, #108]	@ (800b158 <HAL_TIM_GenerateEvent+0x104>)
 800b0ea:	f7f9 f9cd 	bl	8004488 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIM_GenerateEvent+0xa8>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e014      	b.n	800b126 <HAL_TIM_GenerateEvent+0xd2>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	683a      	ldr	r2, [r7, #0]
 800b112:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	40012c00 	.word	0x40012c00
 800b134:	40000400 	.word	0x40000400
 800b138:	40000800 	.word	0x40000800
 800b13c:	40000c00 	.word	0x40000c00
 800b140:	40001000 	.word	0x40001000
 800b144:	40001400 	.word	0x40001400
 800b148:	40013400 	.word	0x40013400
 800b14c:	40014000 	.word	0x40014000
 800b150:	40014400 	.word	0x40014400
 800b154:	40014800 	.word	0x40014800
 800b158:	0800f01c 	.word	0x0800f01c

0800b15c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_TIM_ConfigClockSource+0x1c>
 800b174:	2302      	movs	r3, #2
 800b176:	e329      	b.n	800b7cc <HAL_TIM_ConfigClockSource+0x670>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b190:	d029      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b70      	cmp	r3, #112	@ 0x70
 800b198:	d025      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1a2:	d020      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b40      	cmp	r3, #64	@ 0x40
 800b1aa:	d01c      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b50      	cmp	r3, #80	@ 0x50
 800b1b2:	d018      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b60      	cmp	r3, #96	@ 0x60
 800b1ba:	d014      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d010      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d00c      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d008      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b30      	cmp	r3, #48	@ 0x30
 800b1da:	d004      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x8a>
 800b1dc:	f241 5156 	movw	r1, #5462	@ 0x1556
 800b1e0:	4888      	ldr	r0, [pc, #544]	@ (800b404 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b1e2:	f7f9 f951 	bl	8004488 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1f4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b1f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b200:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b212:	f000 810d 	beq.w	800b430 <HAL_TIM_ConfigClockSource+0x2d4>
 800b216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b21a:	f200 82ca 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b21e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b222:	d02d      	beq.n	800b280 <HAL_TIM_ConfigClockSource+0x124>
 800b224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b228:	f200 82c3 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b22c:	2b70      	cmp	r3, #112	@ 0x70
 800b22e:	d06f      	beq.n	800b310 <HAL_TIM_ConfigClockSource+0x1b4>
 800b230:	2b70      	cmp	r3, #112	@ 0x70
 800b232:	f200 82be 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b236:	2b60      	cmp	r3, #96	@ 0x60
 800b238:	f000 81d4 	beq.w	800b5e4 <HAL_TIM_ConfigClockSource+0x488>
 800b23c:	2b60      	cmp	r3, #96	@ 0x60
 800b23e:	f200 82b8 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b242:	2b50      	cmp	r3, #80	@ 0x50
 800b244:	f000 8165 	beq.w	800b512 <HAL_TIM_ConfigClockSource+0x3b6>
 800b248:	2b50      	cmp	r3, #80	@ 0x50
 800b24a:	f200 82b2 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b24e:	2b40      	cmp	r3, #64	@ 0x40
 800b250:	f000 8223 	beq.w	800b69a <HAL_TIM_ConfigClockSource+0x53e>
 800b254:	2b40      	cmp	r3, #64	@ 0x40
 800b256:	f200 82ac 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b25a:	2b30      	cmp	r3, #48	@ 0x30
 800b25c:	f000 8278 	beq.w	800b750 <HAL_TIM_ConfigClockSource+0x5f4>
 800b260:	2b30      	cmp	r3, #48	@ 0x30
 800b262:	f200 82a6 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b266:	2b20      	cmp	r3, #32
 800b268:	f000 8272 	beq.w	800b750 <HAL_TIM_ConfigClockSource+0x5f4>
 800b26c:	2b20      	cmp	r3, #32
 800b26e:	f200 82a0 	bhi.w	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 826c 	beq.w	800b750 <HAL_TIM_ConfigClockSource+0x5f4>
 800b278:	2b10      	cmp	r3, #16
 800b27a:	f000 8269 	beq.w	800b750 <HAL_TIM_ConfigClockSource+0x5f4>
 800b27e:	e298      	b.n	800b7b2 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a60      	ldr	r2, [pc, #384]	@ (800b408 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b286:	4293      	cmp	r3, r2
 800b288:	f000 8296 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b294:	f000 8290 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a5b      	ldr	r2, [pc, #364]	@ (800b40c <HAL_TIM_ConfigClockSource+0x2b0>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	f000 828a 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a59      	ldr	r2, [pc, #356]	@ (800b410 <HAL_TIM_ConfigClockSource+0x2b4>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	f000 8284 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a57      	ldr	r2, [pc, #348]	@ (800b414 <HAL_TIM_ConfigClockSource+0x2b8>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	f000 827e 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a55      	ldr	r2, [pc, #340]	@ (800b418 <HAL_TIM_ConfigClockSource+0x2bc>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	f000 8278 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a53      	ldr	r2, [pc, #332]	@ (800b41c <HAL_TIM_ConfigClockSource+0x2c0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	f000 8272 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a51      	ldr	r2, [pc, #324]	@ (800b420 <HAL_TIM_ConfigClockSource+0x2c4>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	f000 826c 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a4f      	ldr	r2, [pc, #316]	@ (800b424 <HAL_TIM_ConfigClockSource+0x2c8>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	f000 8266 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a4d      	ldr	r2, [pc, #308]	@ (800b428 <HAL_TIM_ConfigClockSource+0x2cc>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	f000 8260 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a4b      	ldr	r2, [pc, #300]	@ (800b42c <HAL_TIM_ConfigClockSource+0x2d0>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f000 825a 	beq.w	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
 800b304:	f241 5162 	movw	r1, #5474	@ 0x1562
 800b308:	483e      	ldr	r0, [pc, #248]	@ (800b404 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b30a:	f7f9 f8bd 	bl	8004488 <assert_failed>
      break;
 800b30e:	e253      	b.n	800b7b8 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a3c      	ldr	r2, [pc, #240]	@ (800b408 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d022      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b322:	d01d      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a38      	ldr	r2, [pc, #224]	@ (800b40c <HAL_TIM_ConfigClockSource+0x2b0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d018      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a37      	ldr	r2, [pc, #220]	@ (800b410 <HAL_TIM_ConfigClockSource+0x2b4>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d013      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a35      	ldr	r2, [pc, #212]	@ (800b414 <HAL_TIM_ConfigClockSource+0x2b8>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00e      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a36      	ldr	r2, [pc, #216]	@ (800b420 <HAL_TIM_ConfigClockSource+0x2c4>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d009      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a34      	ldr	r2, [pc, #208]	@ (800b424 <HAL_TIM_ConfigClockSource+0x2c8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d004      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x204>
 800b356:	f241 5169 	movw	r1, #5481	@ 0x1569
 800b35a:	482a      	ldr	r0, [pc, #168]	@ (800b404 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b35c:	f7f9 f894 	bl	8004488 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d013      	beq.n	800b390 <HAL_TIM_ConfigClockSource+0x234>
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b370:	d00e      	beq.n	800b390 <HAL_TIM_ConfigClockSource+0x234>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b37a:	d009      	beq.n	800b390 <HAL_TIM_ConfigClockSource+0x234>
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b384:	d004      	beq.n	800b390 <HAL_TIM_ConfigClockSource+0x234>
 800b386:	f241 516c 	movw	r1, #5484	@ 0x156c
 800b38a:	481e      	ldr	r0, [pc, #120]	@ (800b404 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b38c:	f7f9 f87c 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b398:	d014      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x268>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d010      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x268>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x268>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d008      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x268>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	2b0a      	cmp	r3, #10
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x268>
 800b3ba:	f241 516d 	movw	r1, #5485	@ 0x156d
 800b3be:	4811      	ldr	r0, [pc, #68]	@ (800b404 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b3c0:	f7f9 f862 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	2b0f      	cmp	r3, #15
 800b3ca:	d904      	bls.n	800b3d6 <HAL_TIM_ConfigClockSource+0x27a>
 800b3cc:	f241 516e 	movw	r1, #5486	@ 0x156e
 800b3d0:	480c      	ldr	r0, [pc, #48]	@ (800b404 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b3d2:	f7f9 f859 	bl	8004488 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3e6:	f000 feab 	bl	800c140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b3f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	609a      	str	r2, [r3, #8]
      break;
 800b402:	e1da      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
 800b404:	0800f01c 	.word	0x0800f01c
 800b408:	40012c00 	.word	0x40012c00
 800b40c:	40000400 	.word	0x40000400
 800b410:	40000800 	.word	0x40000800
 800b414:	40000c00 	.word	0x40000c00
 800b418:	40001000 	.word	0x40001000
 800b41c:	40001400 	.word	0x40001400
 800b420:	40013400 	.word	0x40013400
 800b424:	40014000 	.word	0x40014000
 800b428:	40014400 	.word	0x40014400
 800b42c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a64      	ldr	r2, [pc, #400]	@ (800b5c8 <HAL_TIM_ConfigClockSource+0x46c>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d01d      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x31a>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b442:	d018      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x31a>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a60      	ldr	r2, [pc, #384]	@ (800b5cc <HAL_TIM_ConfigClockSource+0x470>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d013      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x31a>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a5f      	ldr	r2, [pc, #380]	@ (800b5d0 <HAL_TIM_ConfigClockSource+0x474>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00e      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x31a>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a5d      	ldr	r2, [pc, #372]	@ (800b5d4 <HAL_TIM_ConfigClockSource+0x478>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d009      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x31a>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a5c      	ldr	r2, [pc, #368]	@ (800b5d8 <HAL_TIM_ConfigClockSource+0x47c>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d004      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x31a>
 800b46c:	f241 5181 	movw	r1, #5505	@ 0x1581
 800b470:	485a      	ldr	r0, [pc, #360]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b472:	f7f9 f809 	bl	8004488 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d013      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x34a>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b486:	d00e      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x34a>
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b490:	d009      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x34a>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b49a:	d004      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x34a>
 800b49c:	f241 5184 	movw	r1, #5508	@ 0x1584
 800b4a0:	484e      	ldr	r0, [pc, #312]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b4a2:	f7f8 fff1 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4ae:	d014      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x37e>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d010      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x37e>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00c      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x37e>
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d008      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x37e>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2b0a      	cmp	r3, #10
 800b4ce:	d004      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x37e>
 800b4d0:	f241 5185 	movw	r1, #5509	@ 0x1585
 800b4d4:	4841      	ldr	r0, [pc, #260]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b4d6:	f7f8 ffd7 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	2b0f      	cmp	r3, #15
 800b4e0:	d904      	bls.n	800b4ec <HAL_TIM_ConfigClockSource+0x390>
 800b4e2:	f241 5186 	movw	r1, #5510	@ 0x1586
 800b4e6:	483d      	ldr	r0, [pc, #244]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b4e8:	f7f8 ffce 	bl	8004488 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4fc:	f000 fe20 	bl	800c140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b50e:	609a      	str	r2, [r3, #8]
      break;
 800b510:	e153      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a2c      	ldr	r2, [pc, #176]	@ (800b5c8 <HAL_TIM_ConfigClockSource+0x46c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d022      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b524:	d01d      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a28      	ldr	r2, [pc, #160]	@ (800b5cc <HAL_TIM_ConfigClockSource+0x470>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d018      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a26      	ldr	r2, [pc, #152]	@ (800b5d0 <HAL_TIM_ConfigClockSource+0x474>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d013      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a25      	ldr	r2, [pc, #148]	@ (800b5d4 <HAL_TIM_ConfigClockSource+0x478>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d00e      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a23      	ldr	r2, [pc, #140]	@ (800b5d8 <HAL_TIM_ConfigClockSource+0x47c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d009      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a23      	ldr	r2, [pc, #140]	@ (800b5e0 <HAL_TIM_ConfigClockSource+0x484>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d004      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x406>
 800b558:	f241 5195 	movw	r1, #5525	@ 0x1595
 800b55c:	481f      	ldr	r0, [pc, #124]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b55e:	f7f8 ff93 	bl	8004488 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b56a:	d014      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x43a>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d010      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x43a>
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00c      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x43a>
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	2b02      	cmp	r3, #2
 800b582:	d008      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x43a>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2b0a      	cmp	r3, #10
 800b58a:	d004      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x43a>
 800b58c:	f241 5198 	movw	r1, #5528	@ 0x1598
 800b590:	4812      	ldr	r0, [pc, #72]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b592:	f7f8 ff79 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	2b0f      	cmp	r3, #15
 800b59c:	d904      	bls.n	800b5a8 <HAL_TIM_ConfigClockSource+0x44c>
 800b59e:	f241 5199 	movw	r1, #5529	@ 0x1599
 800b5a2:	480e      	ldr	r0, [pc, #56]	@ (800b5dc <HAL_TIM_ConfigClockSource+0x480>)
 800b5a4:	f7f8 ff70 	bl	8004488 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f000 fd49 	bl	800c04c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2150      	movs	r1, #80	@ 0x50
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fda2 	bl	800c10a <TIM_ITRx_SetConfig>
      break;
 800b5c6:	e0f8      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
 800b5c8:	40012c00 	.word	0x40012c00
 800b5cc:	40000400 	.word	0x40000400
 800b5d0:	40000800 	.word	0x40000800
 800b5d4:	40000c00 	.word	0x40000c00
 800b5d8:	40013400 	.word	0x40013400
 800b5dc:	0800f01c 	.word	0x0800f01c
 800b5e0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a7a      	ldr	r2, [pc, #488]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x678>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d022      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5f6:	d01d      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a76      	ldr	r2, [pc, #472]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x67c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d018      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a75      	ldr	r2, [pc, #468]	@ (800b7dc <HAL_TIM_ConfigClockSource+0x680>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d013      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a73      	ldr	r2, [pc, #460]	@ (800b7e0 <HAL_TIM_ConfigClockSource+0x684>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d00e      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a72      	ldr	r2, [pc, #456]	@ (800b7e4 <HAL_TIM_ConfigClockSource+0x688>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d009      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a70      	ldr	r2, [pc, #448]	@ (800b7e8 <HAL_TIM_ConfigClockSource+0x68c>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d004      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x4d8>
 800b62a:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800b62e:	486f      	ldr	r0, [pc, #444]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b630:	f7f8 ff2a 	bl	8004488 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b63c:	d014      	beq.n	800b668 <HAL_TIM_ConfigClockSource+0x50c>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d010      	beq.n	800b668 <HAL_TIM_ConfigClockSource+0x50c>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00c      	beq.n	800b668 <HAL_TIM_ConfigClockSource+0x50c>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d008      	beq.n	800b668 <HAL_TIM_ConfigClockSource+0x50c>
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2b0a      	cmp	r3, #10
 800b65c:	d004      	beq.n	800b668 <HAL_TIM_ConfigClockSource+0x50c>
 800b65e:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800b662:	4862      	ldr	r0, [pc, #392]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b664:	f7f8 ff10 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	2b0f      	cmp	r3, #15
 800b66e:	d904      	bls.n	800b67a <HAL_TIM_ConfigClockSource+0x51e>
 800b670:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800b674:	485d      	ldr	r0, [pc, #372]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b676:	f7f8 ff07 	bl	8004488 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b686:	461a      	mov	r2, r3
 800b688:	f000 fd0f 	bl	800c0aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2160      	movs	r1, #96	@ 0x60
 800b692:	4618      	mov	r0, r3
 800b694:	f000 fd39 	bl	800c10a <TIM_ITRx_SetConfig>
      break;
 800b698:	e08f      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a4d      	ldr	r2, [pc, #308]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x678>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d022      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ac:	d01d      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a49      	ldr	r2, [pc, #292]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x67c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d018      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a47      	ldr	r2, [pc, #284]	@ (800b7dc <HAL_TIM_ConfigClockSource+0x680>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d013      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a46      	ldr	r2, [pc, #280]	@ (800b7e0 <HAL_TIM_ConfigClockSource+0x684>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00e      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a44      	ldr	r2, [pc, #272]	@ (800b7e4 <HAL_TIM_ConfigClockSource+0x688>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d009      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a43      	ldr	r2, [pc, #268]	@ (800b7e8 <HAL_TIM_ConfigClockSource+0x68c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d004      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x58e>
 800b6e0:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800b6e4:	4841      	ldr	r0, [pc, #260]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b6e6:	f7f8 fecf 	bl	8004488 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6f2:	d014      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x5c2>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d010      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x5c2>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00c      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x5c2>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d008      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x5c2>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2b0a      	cmp	r3, #10
 800b712:	d004      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x5c2>
 800b714:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800b718:	4834      	ldr	r0, [pc, #208]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b71a:	f7f8 feb5 	bl	8004488 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	2b0f      	cmp	r3, #15
 800b724:	d904      	bls.n	800b730 <HAL_TIM_ConfigClockSource+0x5d4>
 800b726:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800b72a:	4830      	ldr	r0, [pc, #192]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b72c:	f7f8 feac 	bl	8004488 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b73c:	461a      	mov	r2, r3
 800b73e:	f000 fc85 	bl	800c04c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2140      	movs	r1, #64	@ 0x40
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fcde 	bl	800c10a <TIM_ITRx_SetConfig>
      break;
 800b74e:	e034      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a1f      	ldr	r2, [pc, #124]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x678>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d022      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b762:	d01d      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a1b      	ldr	r2, [pc, #108]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x67c>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d018      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a1a      	ldr	r2, [pc, #104]	@ (800b7dc <HAL_TIM_ConfigClockSource+0x680>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d013      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a18      	ldr	r2, [pc, #96]	@ (800b7e0 <HAL_TIM_ConfigClockSource+0x684>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00e      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a17      	ldr	r2, [pc, #92]	@ (800b7e4 <HAL_TIM_ConfigClockSource+0x688>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d009      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a15      	ldr	r2, [pc, #84]	@ (800b7e8 <HAL_TIM_ConfigClockSource+0x68c>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d004      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0x644>
 800b796:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800b79a:	4814      	ldr	r0, [pc, #80]	@ (800b7ec <HAL_TIM_ConfigClockSource+0x690>)
 800b79c:	f7f8 fe74 	bl	8004488 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f000 fcad 	bl	800c10a <TIM_ITRx_SetConfig>
      break;
 800b7b0:	e003      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b6:	e000      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800b7b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	40012c00 	.word	0x40012c00
 800b7d8:	40000400 	.word	0x40000400
 800b7dc:	40000800 	.word	0x40000800
 800b7e0:	40000c00 	.word	0x40000c00
 800b7e4:	40013400 	.word	0x40013400
 800b7e8:	40014000 	.word	0x40014000
 800b7ec:	0800f01c 	.word	0x0800f01c

0800b7f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a46      	ldr	r2, [pc, #280]	@ (800b96c <TIM_Base_SetConfig+0x12c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d013      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b85e:	d00f      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a43      	ldr	r2, [pc, #268]	@ (800b970 <TIM_Base_SetConfig+0x130>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00b      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a42      	ldr	r2, [pc, #264]	@ (800b974 <TIM_Base_SetConfig+0x134>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d007      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a41      	ldr	r2, [pc, #260]	@ (800b978 <TIM_Base_SetConfig+0x138>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d003      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a40      	ldr	r2, [pc, #256]	@ (800b97c <TIM_Base_SetConfig+0x13c>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d108      	bne.n	800b892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a35      	ldr	r2, [pc, #212]	@ (800b96c <TIM_Base_SetConfig+0x12c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d01f      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8a0:	d01b      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a32      	ldr	r2, [pc, #200]	@ (800b970 <TIM_Base_SetConfig+0x130>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d017      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a31      	ldr	r2, [pc, #196]	@ (800b974 <TIM_Base_SetConfig+0x134>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d013      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a30      	ldr	r2, [pc, #192]	@ (800b978 <TIM_Base_SetConfig+0x138>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d00f      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a2f      	ldr	r2, [pc, #188]	@ (800b97c <TIM_Base_SetConfig+0x13c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d00b      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a2e      	ldr	r2, [pc, #184]	@ (800b980 <TIM_Base_SetConfig+0x140>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d007      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a2d      	ldr	r2, [pc, #180]	@ (800b984 <TIM_Base_SetConfig+0x144>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d003      	beq.n	800b8da <TIM_Base_SetConfig+0x9a>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a2c      	ldr	r2, [pc, #176]	@ (800b988 <TIM_Base_SetConfig+0x148>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d108      	bne.n	800b8ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	689a      	ldr	r2, [r3, #8]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a16      	ldr	r2, [pc, #88]	@ (800b96c <TIM_Base_SetConfig+0x12c>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d00f      	beq.n	800b938 <TIM_Base_SetConfig+0xf8>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a18      	ldr	r2, [pc, #96]	@ (800b97c <TIM_Base_SetConfig+0x13c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00b      	beq.n	800b938 <TIM_Base_SetConfig+0xf8>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a17      	ldr	r2, [pc, #92]	@ (800b980 <TIM_Base_SetConfig+0x140>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d007      	beq.n	800b938 <TIM_Base_SetConfig+0xf8>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a16      	ldr	r2, [pc, #88]	@ (800b984 <TIM_Base_SetConfig+0x144>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d003      	beq.n	800b938 <TIM_Base_SetConfig+0xf8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a15      	ldr	r2, [pc, #84]	@ (800b988 <TIM_Base_SetConfig+0x148>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d103      	bne.n	800b940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	691a      	ldr	r2, [r3, #16]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d105      	bne.n	800b95e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	f023 0201 	bic.w	r2, r3, #1
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	611a      	str	r2, [r3, #16]
  }
}
 800b95e:	bf00      	nop
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	40012c00 	.word	0x40012c00
 800b970:	40000400 	.word	0x40000400
 800b974:	40000800 	.word	0x40000800
 800b978:	40000c00 	.word	0x40000c00
 800b97c:	40013400 	.word	0x40013400
 800b980:	40014000 	.word	0x40014000
 800b984:	40014400 	.word	0x40014400
 800b988:	40014800 	.word	0x40014800

0800b98c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a1b      	ldr	r3, [r3, #32]
 800b9a0:	f023 0201 	bic.w	r2, r3, #1
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 0303 	bic.w	r3, r3, #3
 800b9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f023 0302 	bic.w	r3, r3, #2
 800b9d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a40      	ldr	r2, [pc, #256]	@ (800bae8 <TIM_OC1_SetConfig+0x15c>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d00f      	beq.n	800ba0c <TIM_OC1_SetConfig+0x80>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a3f      	ldr	r2, [pc, #252]	@ (800baec <TIM_OC1_SetConfig+0x160>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d00b      	beq.n	800ba0c <TIM_OC1_SetConfig+0x80>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a3e      	ldr	r2, [pc, #248]	@ (800baf0 <TIM_OC1_SetConfig+0x164>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d007      	beq.n	800ba0c <TIM_OC1_SetConfig+0x80>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a3d      	ldr	r2, [pc, #244]	@ (800baf4 <TIM_OC1_SetConfig+0x168>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d003      	beq.n	800ba0c <TIM_OC1_SetConfig+0x80>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a3c      	ldr	r2, [pc, #240]	@ (800baf8 <TIM_OC1_SetConfig+0x16c>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d119      	bne.n	800ba40 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d008      	beq.n	800ba26 <TIM_OC1_SetConfig+0x9a>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	2b08      	cmp	r3, #8
 800ba1a:	d004      	beq.n	800ba26 <TIM_OC1_SetConfig+0x9a>
 800ba1c:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800ba20:	4836      	ldr	r0, [pc, #216]	@ (800bafc <TIM_OC1_SetConfig+0x170>)
 800ba22:	f7f8 fd31 	bl	8004488 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f023 0308 	bic.w	r3, r3, #8
 800ba2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f023 0304 	bic.w	r3, r3, #4
 800ba3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a29      	ldr	r2, [pc, #164]	@ (800bae8 <TIM_OC1_SetConfig+0x15c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00f      	beq.n	800ba68 <TIM_OC1_SetConfig+0xdc>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a28      	ldr	r2, [pc, #160]	@ (800baec <TIM_OC1_SetConfig+0x160>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <TIM_OC1_SetConfig+0xdc>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a27      	ldr	r2, [pc, #156]	@ (800baf0 <TIM_OC1_SetConfig+0x164>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <TIM_OC1_SetConfig+0xdc>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a26      	ldr	r2, [pc, #152]	@ (800baf4 <TIM_OC1_SetConfig+0x168>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_OC1_SetConfig+0xdc>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a25      	ldr	r2, [pc, #148]	@ (800baf8 <TIM_OC1_SetConfig+0x16c>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d12d      	bne.n	800bac4 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba70:	d008      	beq.n	800ba84 <TIM_OC1_SetConfig+0xf8>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d004      	beq.n	800ba84 <TIM_OC1_SetConfig+0xf8>
 800ba7a:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800ba7e:	481f      	ldr	r0, [pc, #124]	@ (800bafc <TIM_OC1_SetConfig+0x170>)
 800ba80:	f7f8 fd02 	bl	8004488 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba8c:	d008      	beq.n	800baa0 <TIM_OC1_SetConfig+0x114>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d004      	beq.n	800baa0 <TIM_OC1_SetConfig+0x114>
 800ba96:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800ba9a:	4818      	ldr	r0, [pc, #96]	@ (800bafc <TIM_OC1_SetConfig+0x170>)
 800ba9c:	f7f8 fcf4 	bl	8004488 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800baa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800baae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	695b      	ldr	r3, [r3, #20]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	693a      	ldr	r2, [r7, #16]
 800bac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	621a      	str	r2, [r3, #32]
}
 800bade:	bf00      	nop
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	40012c00 	.word	0x40012c00
 800baec:	40013400 	.word	0x40013400
 800baf0:	40014000 	.word	0x40014000
 800baf4:	40014400 	.word	0x40014400
 800baf8:	40014800 	.word	0x40014800
 800bafc:	0800f01c 	.word	0x0800f01c

0800bb00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	f023 0210 	bic.w	r2, r3, #16
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f023 0320 	bic.w	r3, r3, #32
 800bb4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	011b      	lsls	r3, r3, #4
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a3b      	ldr	r2, [pc, #236]	@ (800bc4c <TIM_OC2_SetConfig+0x14c>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d003      	beq.n	800bb6c <TIM_OC2_SetConfig+0x6c>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a3a      	ldr	r2, [pc, #232]	@ (800bc50 <TIM_OC2_SetConfig+0x150>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d11a      	bne.n	800bba2 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d008      	beq.n	800bb86 <TIM_OC2_SetConfig+0x86>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	2b08      	cmp	r3, #8
 800bb7a:	d004      	beq.n	800bb86 <TIM_OC2_SetConfig+0x86>
 800bb7c:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800bb80:	4834      	ldr	r0, [pc, #208]	@ (800bc54 <TIM_OC2_SetConfig+0x154>)
 800bb82:	f7f8 fc81 	bl	8004488 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a29      	ldr	r2, [pc, #164]	@ (800bc4c <TIM_OC2_SetConfig+0x14c>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d00f      	beq.n	800bbca <TIM_OC2_SetConfig+0xca>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a28      	ldr	r2, [pc, #160]	@ (800bc50 <TIM_OC2_SetConfig+0x150>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00b      	beq.n	800bbca <TIM_OC2_SetConfig+0xca>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a28      	ldr	r2, [pc, #160]	@ (800bc58 <TIM_OC2_SetConfig+0x158>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d007      	beq.n	800bbca <TIM_OC2_SetConfig+0xca>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a27      	ldr	r2, [pc, #156]	@ (800bc5c <TIM_OC2_SetConfig+0x15c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d003      	beq.n	800bbca <TIM_OC2_SetConfig+0xca>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a26      	ldr	r2, [pc, #152]	@ (800bc60 <TIM_OC2_SetConfig+0x160>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d12f      	bne.n	800bc2a <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbd2:	d008      	beq.n	800bbe6 <TIM_OC2_SetConfig+0xe6>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d004      	beq.n	800bbe6 <TIM_OC2_SetConfig+0xe6>
 800bbdc:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800bbe0:	481c      	ldr	r0, [pc, #112]	@ (800bc54 <TIM_OC2_SetConfig+0x154>)
 800bbe2:	f7f8 fc51 	bl	8004488 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbee:	d008      	beq.n	800bc02 <TIM_OC2_SetConfig+0x102>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <TIM_OC2_SetConfig+0x102>
 800bbf8:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800bbfc:	4815      	ldr	r0, [pc, #84]	@ (800bc54 <TIM_OC2_SetConfig+0x154>)
 800bbfe:	f7f8 fc43 	bl	8004488 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	621a      	str	r2, [r3, #32]
}
 800bc44:	bf00      	nop
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	40012c00 	.word	0x40012c00
 800bc50:	40013400 	.word	0x40013400
 800bc54:	0800f01c 	.word	0x0800f01c
 800bc58:	40014000 	.word	0x40014000
 800bc5c:	40014400 	.word	0x40014400
 800bc60:	40014800 	.word	0x40014800

0800bc64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	021b      	lsls	r3, r3, #8
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a3b      	ldr	r2, [pc, #236]	@ (800bdb0 <TIM_OC3_SetConfig+0x14c>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d003      	beq.n	800bcce <TIM_OC3_SetConfig+0x6a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a3a      	ldr	r2, [pc, #232]	@ (800bdb4 <TIM_OC3_SetConfig+0x150>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d11a      	bne.n	800bd04 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d008      	beq.n	800bce8 <TIM_OC3_SetConfig+0x84>
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	2b08      	cmp	r3, #8
 800bcdc:	d004      	beq.n	800bce8 <TIM_OC3_SetConfig+0x84>
 800bcde:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800bce2:	4835      	ldr	r0, [pc, #212]	@ (800bdb8 <TIM_OC3_SetConfig+0x154>)
 800bce4:	f7f8 fbd0 	bl	8004488 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a2a      	ldr	r2, [pc, #168]	@ (800bdb0 <TIM_OC3_SetConfig+0x14c>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00f      	beq.n	800bd2c <TIM_OC3_SetConfig+0xc8>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a29      	ldr	r2, [pc, #164]	@ (800bdb4 <TIM_OC3_SetConfig+0x150>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d00b      	beq.n	800bd2c <TIM_OC3_SetConfig+0xc8>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a29      	ldr	r2, [pc, #164]	@ (800bdbc <TIM_OC3_SetConfig+0x158>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d007      	beq.n	800bd2c <TIM_OC3_SetConfig+0xc8>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a28      	ldr	r2, [pc, #160]	@ (800bdc0 <TIM_OC3_SetConfig+0x15c>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d003      	beq.n	800bd2c <TIM_OC3_SetConfig+0xc8>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a27      	ldr	r2, [pc, #156]	@ (800bdc4 <TIM_OC3_SetConfig+0x160>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d12f      	bne.n	800bd8c <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd34:	d008      	beq.n	800bd48 <TIM_OC3_SetConfig+0xe4>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d004      	beq.n	800bd48 <TIM_OC3_SetConfig+0xe4>
 800bd3e:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800bd42:	481d      	ldr	r0, [pc, #116]	@ (800bdb8 <TIM_OC3_SetConfig+0x154>)
 800bd44:	f7f8 fba0 	bl	8004488 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd50:	d008      	beq.n	800bd64 <TIM_OC3_SetConfig+0x100>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d004      	beq.n	800bd64 <TIM_OC3_SetConfig+0x100>
 800bd5a:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800bd5e:	4816      	ldr	r0, [pc, #88]	@ (800bdb8 <TIM_OC3_SetConfig+0x154>)
 800bd60:	f7f8 fb92 	bl	8004488 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	011b      	lsls	r3, r3, #4
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	621a      	str	r2, [r3, #32]
}
 800bda6:	bf00      	nop
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	40012c00 	.word	0x40012c00
 800bdb4:	40013400 	.word	0x40013400
 800bdb8:	0800f01c 	.word	0x0800f01c
 800bdbc:	40014000 	.word	0x40014000
 800bdc0:	40014400 	.word	0x40014400
 800bdc4:	40014800 	.word	0x40014800

0800bdc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a1b      	ldr	r3, [r3, #32]
 800bddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bdf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	021b      	lsls	r3, r3, #8
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	031b      	lsls	r3, r3, #12
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	4313      	orrs	r3, r2
 800be22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a1e      	ldr	r2, [pc, #120]	@ (800bea0 <TIM_OC4_SetConfig+0xd8>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d00f      	beq.n	800be4c <TIM_OC4_SetConfig+0x84>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bea4 <TIM_OC4_SetConfig+0xdc>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d00b      	beq.n	800be4c <TIM_OC4_SetConfig+0x84>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a1c      	ldr	r2, [pc, #112]	@ (800bea8 <TIM_OC4_SetConfig+0xe0>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d007      	beq.n	800be4c <TIM_OC4_SetConfig+0x84>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a1b      	ldr	r2, [pc, #108]	@ (800beac <TIM_OC4_SetConfig+0xe4>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d003      	beq.n	800be4c <TIM_OC4_SetConfig+0x84>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a1a      	ldr	r2, [pc, #104]	@ (800beb0 <TIM_OC4_SetConfig+0xe8>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d117      	bne.n	800be7c <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be54:	d008      	beq.n	800be68 <TIM_OC4_SetConfig+0xa0>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d004      	beq.n	800be68 <TIM_OC4_SetConfig+0xa0>
 800be5e:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800be62:	4814      	ldr	r0, [pc, #80]	@ (800beb4 <TIM_OC4_SetConfig+0xec>)
 800be64:	f7f8 fb10 	bl	8004488 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	019b      	lsls	r3, r3, #6
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	621a      	str	r2, [r3, #32]
}
 800be96:	bf00      	nop
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	40012c00 	.word	0x40012c00
 800bea4:	40013400 	.word	0x40013400
 800bea8:	40014000 	.word	0x40014000
 800beac:	40014400 	.word	0x40014400
 800beb0:	40014800 	.word	0x40014800
 800beb4:	0800f01c 	.word	0x0800f01c

0800beb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800befc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	041b      	lsls	r3, r3, #16
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a17      	ldr	r2, [pc, #92]	@ (800bf6c <TIM_OC5_SetConfig+0xb4>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d00f      	beq.n	800bf32 <TIM_OC5_SetConfig+0x7a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a16      	ldr	r2, [pc, #88]	@ (800bf70 <TIM_OC5_SetConfig+0xb8>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d00b      	beq.n	800bf32 <TIM_OC5_SetConfig+0x7a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a15      	ldr	r2, [pc, #84]	@ (800bf74 <TIM_OC5_SetConfig+0xbc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d007      	beq.n	800bf32 <TIM_OC5_SetConfig+0x7a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a14      	ldr	r2, [pc, #80]	@ (800bf78 <TIM_OC5_SetConfig+0xc0>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d003      	beq.n	800bf32 <TIM_OC5_SetConfig+0x7a>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a13      	ldr	r2, [pc, #76]	@ (800bf7c <TIM_OC5_SetConfig+0xc4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d109      	bne.n	800bf46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	693a      	ldr	r2, [r7, #16]
 800bf5e:	621a      	str	r2, [r3, #32]
}
 800bf60:	bf00      	nop
 800bf62:	371c      	adds	r7, #28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	40012c00 	.word	0x40012c00
 800bf70:	40013400 	.word	0x40013400
 800bf74:	40014000 	.word	0x40014000
 800bf78:	40014400 	.word	0x40014400
 800bf7c:	40014800 	.word	0x40014800

0800bf80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bfae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bfc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	051b      	lsls	r3, r3, #20
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a18      	ldr	r2, [pc, #96]	@ (800c038 <TIM_OC6_SetConfig+0xb8>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00f      	beq.n	800bffc <TIM_OC6_SetConfig+0x7c>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a17      	ldr	r2, [pc, #92]	@ (800c03c <TIM_OC6_SetConfig+0xbc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d00b      	beq.n	800bffc <TIM_OC6_SetConfig+0x7c>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a16      	ldr	r2, [pc, #88]	@ (800c040 <TIM_OC6_SetConfig+0xc0>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d007      	beq.n	800bffc <TIM_OC6_SetConfig+0x7c>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a15      	ldr	r2, [pc, #84]	@ (800c044 <TIM_OC6_SetConfig+0xc4>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d003      	beq.n	800bffc <TIM_OC6_SetConfig+0x7c>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a14      	ldr	r2, [pc, #80]	@ (800c048 <TIM_OC6_SetConfig+0xc8>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d109      	bne.n	800c010 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	029b      	lsls	r3, r3, #10
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	621a      	str	r2, [r3, #32]
}
 800c02a:	bf00      	nop
 800c02c:	371c      	adds	r7, #28
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	40012c00 	.word	0x40012c00
 800c03c:	40013400 	.word	0x40013400
 800c040:	40014000 	.word	0x40014000
 800c044:	40014400 	.word	0x40014400
 800c048:	40014800 	.word	0x40014800

0800c04c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	f023 0201 	bic.w	r2, r3, #1
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	011b      	lsls	r3, r3, #4
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4313      	orrs	r3, r2
 800c080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f023 030a 	bic.w	r3, r3, #10
 800c088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	4313      	orrs	r3, r2
 800c090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	621a      	str	r2, [r3, #32]
}
 800c09e:	bf00      	nop
 800c0a0:	371c      	adds	r7, #28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b087      	sub	sp, #28
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	60b9      	str	r1, [r7, #8]
 800c0b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6a1b      	ldr	r3, [r3, #32]
 800c0c0:	f023 0210 	bic.w	r2, r3, #16
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c0d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	031b      	lsls	r3, r3, #12
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c0e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	697a      	ldr	r2, [r7, #20]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	621a      	str	r2, [r3, #32]
}
 800c0fe:	bf00      	nop
 800c100:	371c      	adds	r7, #28
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b085      	sub	sp, #20
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	4313      	orrs	r3, r2
 800c128:	f043 0307 	orr.w	r3, r3, #7
 800c12c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	609a      	str	r2, [r3, #8]
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c140:	b480      	push	{r7}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c15a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	021a      	lsls	r2, r3, #8
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	431a      	orrs	r2, r3
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	4313      	orrs	r3, r2
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	609a      	str	r2, [r3, #8]
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4a2f      	ldr	r2, [pc, #188]	@ (800c24c <TIM_CCxChannelCmd+0xcc>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d024      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c19a:	d020      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4a2c      	ldr	r2, [pc, #176]	@ (800c250 <TIM_CCxChannelCmd+0xd0>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d01c      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4a2b      	ldr	r2, [pc, #172]	@ (800c254 <TIM_CCxChannelCmd+0xd4>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d018      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c258 <TIM_CCxChannelCmd+0xd8>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d014      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	4a29      	ldr	r2, [pc, #164]	@ (800c25c <TIM_CCxChannelCmd+0xdc>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d010      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4a28      	ldr	r2, [pc, #160]	@ (800c260 <TIM_CCxChannelCmd+0xe0>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00c      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4a27      	ldr	r2, [pc, #156]	@ (800c264 <TIM_CCxChannelCmd+0xe4>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d008      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4a26      	ldr	r2, [pc, #152]	@ (800c268 <TIM_CCxChannelCmd+0xe8>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d004      	beq.n	800c1de <TIM_CCxChannelCmd+0x5e>
 800c1d4:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800c1d8:	4824      	ldr	r0, [pc, #144]	@ (800c26c <TIM_CCxChannelCmd+0xec>)
 800c1da:	f7f8 f955 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d016      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	d013      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	d010      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b0c      	cmp	r3, #12
 800c1f4:	d00d      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2b10      	cmp	r3, #16
 800c1fa:	d00a      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b14      	cmp	r3, #20
 800c200:	d007      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2b3c      	cmp	r3, #60	@ 0x3c
 800c206:	d004      	beq.n	800c212 <TIM_CCxChannelCmd+0x92>
 800c208:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800c20c:	4817      	ldr	r0, [pc, #92]	@ (800c26c <TIM_CCxChannelCmd+0xec>)
 800c20e:	f7f8 f93b 	bl	8004488 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	f003 031f 	and.w	r3, r3, #31
 800c218:	2201      	movs	r2, #1
 800c21a:	fa02 f303 	lsl.w	r3, r2, r3
 800c21e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6a1a      	ldr	r2, [r3, #32]
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	43db      	mvns	r3, r3
 800c228:	401a      	ands	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6a1a      	ldr	r2, [r3, #32]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f003 031f 	and.w	r3, r3, #31
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	fa01 f303 	lsl.w	r3, r1, r3
 800c23e:	431a      	orrs	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	621a      	str	r2, [r3, #32]
}
 800c244:	bf00      	nop
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	40012c00 	.word	0x40012c00
 800c250:	40000400 	.word	0x40000400
 800c254:	40000800 	.word	0x40000800
 800c258:	40000c00 	.word	0x40000c00
 800c25c:	40013400 	.word	0x40013400
 800c260:	40014000 	.word	0x40014000
 800c264:	40014400 	.word	0x40014400
 800c268:	40014800 	.word	0x40014800
 800c26c:	0800f01c 	.word	0x0800f01c

0800c270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a34      	ldr	r2, [pc, #208]	@ (800c350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d02c      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c28c:	d027      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a30      	ldr	r2, [pc, #192]	@ (800c354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d022      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a2e      	ldr	r2, [pc, #184]	@ (800c358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d01d      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c35c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d018      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a2b      	ldr	r2, [pc, #172]	@ (800c360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d013      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a2a      	ldr	r2, [pc, #168]	@ (800c364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00e      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a28      	ldr	r2, [pc, #160]	@ (800c368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d009      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a27      	ldr	r2, [pc, #156]	@ (800c36c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d004      	beq.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c2d4:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800c2d8:	4825      	ldr	r0, [pc, #148]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2da:	f7f8 f8d5 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d020      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b10      	cmp	r3, #16
 800c2ec:	d01c      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b20      	cmp	r3, #32
 800c2f4:	d018      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b30      	cmp	r3, #48	@ 0x30
 800c2fc:	d014      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b40      	cmp	r3, #64	@ 0x40
 800c304:	d010      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b50      	cmp	r3, #80	@ 0x50
 800c30c:	d00c      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b60      	cmp	r3, #96	@ 0x60
 800c314:	d008      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b70      	cmp	r3, #112	@ 0x70
 800c31c:	d004      	beq.n	800c328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c31e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800c322:	4813      	ldr	r0, [pc, #76]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c324:	f7f8 f8b0 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	2b80      	cmp	r3, #128	@ 0x80
 800c32e:	d008      	beq.n	800c342 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800c338:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800c33c:	480c      	ldr	r0, [pc, #48]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c33e:	f7f8 f8a3 	bl	8004488 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d113      	bne.n	800c374 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800c34c:	2302      	movs	r3, #2
 800c34e:	e0d3      	b.n	800c4f8 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800c350:	40012c00 	.word	0x40012c00
 800c354:	40000400 	.word	0x40000400
 800c358:	40000800 	.word	0x40000800
 800c35c:	40000c00 	.word	0x40000c00
 800c360:	40001000 	.word	0x40001000
 800c364:	40001400 	.word	0x40001400
 800c368:	40013400 	.word	0x40013400
 800c36c:	40014000 	.word	0x40014000
 800c370:	0800f054 	.word	0x0800f054
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a59      	ldr	r2, [pc, #356]	@ (800c500 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d004      	beq.n	800c3a8 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a58      	ldr	r2, [pc, #352]	@ (800c504 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d161      	bne.n	800c46c <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d054      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3b8:	d04f      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3c2:	d04a      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c3cc:	d045      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3d6:	d040      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800c3e0:	d03b      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c3ea:	d036      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c3f4:	d031      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800c3fe:	d02c      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c408:	d027      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800c412:	d022      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c41c:	d01d      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800c426:	d018      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c430:	d013      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800c43a:	d00e      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800c444:	d009      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800c44e:	d004      	beq.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c450:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800c454:	482c      	ldr	r0, [pc, #176]	@ (800c508 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800c456:	f7f8 f817 	bl	8004488 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c460:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	4313      	orrs	r3, r2
 800c46a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a1d      	ldr	r2, [pc, #116]	@ (800c500 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d01d      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c498:	d018      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a1b      	ldr	r2, [pc, #108]	@ (800c50c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d013      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a19      	ldr	r2, [pc, #100]	@ (800c510 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d00e      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a18      	ldr	r2, [pc, #96]	@ (800c514 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d009      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a11      	ldr	r2, [pc, #68]	@ (800c504 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d004      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a14      	ldr	r2, [pc, #80]	@ (800c518 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d10c      	bne.n	800c4e6 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	40012c00 	.word	0x40012c00
 800c504:	40013400 	.word	0x40013400
 800c508:	0800f054 	.word	0x0800f054
 800c50c:	40000400 	.word	0x40000400
 800c510:	40000800 	.word	0x40000800
 800c514:	40000c00 	.word	0x40000c00
 800c518:	40014000 	.word	0x40014000

0800c51c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c526:	2300      	movs	r3, #0
 800c528:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a91      	ldr	r2, [pc, #580]	@ (800c774 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d018      	beq.n	800c566 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a8f      	ldr	r2, [pc, #572]	@ (800c778 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d013      	beq.n	800c566 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a8e      	ldr	r2, [pc, #568]	@ (800c77c <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d00e      	beq.n	800c566 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a8c      	ldr	r2, [pc, #560]	@ (800c780 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d009      	beq.n	800c566 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a8b      	ldr	r2, [pc, #556]	@ (800c784 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d004      	beq.n	800c566 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c55c:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800c560:	4889      	ldr	r0, [pc, #548]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c562:	f7f7 ff91 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c56e:	d008      	beq.n	800c582 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800c578:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800c57c:	4882      	ldr	r0, [pc, #520]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c57e:	f7f7 ff83 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c58a:	d008      	beq.n	800c59e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d004      	beq.n	800c59e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800c594:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800c598:	487b      	ldr	r0, [pc, #492]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c59a:	f7f7 ff75 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d013      	beq.n	800c5ce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5ae:	d00e      	beq.n	800c5ce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5b8:	d009      	beq.n	800c5ce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5c2:	d004      	beq.n	800c5ce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800c5c4:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800c5c8:	486f      	ldr	r0, [pc, #444]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c5ca:	f7f7 ff5d 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	2bff      	cmp	r3, #255	@ 0xff
 800c5d4:	d904      	bls.n	800c5e0 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800c5d6:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800c5da:	486b      	ldr	r0, [pc, #428]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c5dc:	f7f7 ff54 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5e8:	d008      	beq.n	800c5fc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d004      	beq.n	800c5fc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c5f2:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800c5f6:	4864      	ldr	r0, [pc, #400]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c5f8:	f7f7 ff46 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d009      	beq.n	800c618 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	695b      	ldr	r3, [r3, #20]
 800c608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c60c:	d004      	beq.n	800c618 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c60e:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800c612:	485d      	ldr	r0, [pc, #372]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c614:	f7f7 ff38 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	2b0f      	cmp	r3, #15
 800c61e:	d904      	bls.n	800c62a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c620:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800c624:	4858      	ldr	r0, [pc, #352]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c626:	f7f7 ff2f 	bl	8004488 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c62e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c632:	d008      	beq.n	800c646 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c63c:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800c640:	4851      	ldr	r0, [pc, #324]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c642:	f7f7 ff21 	bl	8004488 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d101      	bne.n	800c654 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800c650:	2302      	movs	r3, #2
 800c652:	e08a      	b.n	800c76a <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	4313      	orrs	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4313      	orrs	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	695b      	ldr	r3, [r3, #20]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	041b      	lsls	r3, r3, #16
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a28      	ldr	r2, [pc, #160]	@ (800c774 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d004      	beq.n	800c6e2 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a26      	ldr	r2, [pc, #152]	@ (800c778 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d13a      	bne.n	800c758 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	69db      	ldr	r3, [r3, #28]
 800c6e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6ea:	d008      	beq.n	800c6fe <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	69db      	ldr	r3, [r3, #28]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d004      	beq.n	800c6fe <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800c6f4:	f640 0112 	movw	r1, #2066	@ 0x812
 800c6f8:	4823      	ldr	r0, [pc, #140]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c6fa:	f7f7 fec5 	bl	8004488 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c70e:	d004      	beq.n	800c71a <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800c710:	f640 0113 	movw	r1, #2067	@ 0x813
 800c714:	481c      	ldr	r0, [pc, #112]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c716:	f7f7 feb7 	bl	8004488 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71e:	2b0f      	cmp	r3, #15
 800c720:	d904      	bls.n	800c72c <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800c722:	f640 0114 	movw	r1, #2068	@ 0x814
 800c726:	4818      	ldr	r0, [pc, #96]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c728:	f7f7 feae 	bl	8004488 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c736:	051b      	lsls	r3, r3, #20
 800c738:	4313      	orrs	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	4313      	orrs	r3, r2
 800c748:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	4313      	orrs	r3, r2
 800c756:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	40012c00 	.word	0x40012c00
 800c778:	40013400 	.word	0x40013400
 800c77c:	40014000 	.word	0x40014000
 800c780:	40014400 	.word	0x40014400
 800c784:	40014800 	.word	0x40014800
 800c788:	0800f054 	.word	0x0800f054

0800c78c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e08b      	b.n	800c8f2 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d023      	beq.n	800c82a <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a45      	ldr	r2, [pc, #276]	@ (800c8fc <HAL_UART_Init+0x134>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d041      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a43      	ldr	r2, [pc, #268]	@ (800c900 <HAL_UART_Init+0x138>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d03c      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a42      	ldr	r2, [pc, #264]	@ (800c904 <HAL_UART_Init+0x13c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d037      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a40      	ldr	r2, [pc, #256]	@ (800c908 <HAL_UART_Init+0x140>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d032      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a3f      	ldr	r2, [pc, #252]	@ (800c90c <HAL_UART_Init+0x144>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d02d      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a3d      	ldr	r2, [pc, #244]	@ (800c910 <HAL_UART_Init+0x148>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d028      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c81e:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800c822:	483c      	ldr	r0, [pc, #240]	@ (800c914 <HAL_UART_Init+0x14c>)
 800c824:	f7f7 fe30 	bl	8004488 <assert_failed>
 800c828:	e022      	b.n	800c870 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a33      	ldr	r2, [pc, #204]	@ (800c8fc <HAL_UART_Init+0x134>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d01d      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a31      	ldr	r2, [pc, #196]	@ (800c900 <HAL_UART_Init+0x138>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d018      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a30      	ldr	r2, [pc, #192]	@ (800c904 <HAL_UART_Init+0x13c>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d013      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a2e      	ldr	r2, [pc, #184]	@ (800c908 <HAL_UART_Init+0x140>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d00e      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a2d      	ldr	r2, [pc, #180]	@ (800c90c <HAL_UART_Init+0x144>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d009      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a2b      	ldr	r2, [pc, #172]	@ (800c910 <HAL_UART_Init+0x148>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d004      	beq.n	800c870 <HAL_UART_Init+0xa8>
 800c866:	f240 1157 	movw	r1, #343	@ 0x157
 800c86a:	482a      	ldr	r0, [pc, #168]	@ (800c914 <HAL_UART_Init+0x14c>)
 800c86c:	f7f7 fe0c 	bl	8004488 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c874:	2b00      	cmp	r3, #0
 800c876:	d106      	bne.n	800c886 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7f8 fb3b 	bl	8004efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2224      	movs	r2, #36	@ 0x24
 800c88a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 0201 	bic.w	r2, r2, #1
 800c89a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fc1f 	bl	800d0e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f8be 	bl	800ca2c <UART_SetConfig>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d101      	bne.n	800c8ba <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e01b      	b.n	800c8f2 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c8c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	689a      	ldr	r2, [r3, #8]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c8d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f042 0201 	orr.w	r2, r2, #1
 800c8e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fd5c 	bl	800d3a8 <UART_CheckIdleState>
 800c8f0:	4603      	mov	r3, r0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	40013800 	.word	0x40013800
 800c900:	40004400 	.word	0x40004400
 800c904:	40004800 	.word	0x40004800
 800c908:	40004c00 	.word	0x40004c00
 800c90c:	40005000 	.word	0x40005000
 800c910:	40008000 	.word	0x40008000
 800c914:	0800f090 	.word	0x0800f090

0800c918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	@ 0x28
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	603b      	str	r3, [r7, #0]
 800c924:	4613      	mov	r3, r2
 800c926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	d177      	bne.n	800ca20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <HAL_UART_Transmit+0x24>
 800c936:	88fb      	ldrh	r3, [r7, #6]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d101      	bne.n	800c940 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e070      	b.n	800ca22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2221      	movs	r2, #33	@ 0x21
 800c94c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c94e:	f7f8 fbc5 	bl	80050dc <HAL_GetTick>
 800c952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	88fa      	ldrh	r2, [r7, #6]
 800c960:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c96c:	d108      	bne.n	800c980 <HAL_UART_Transmit+0x68>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	61bb      	str	r3, [r7, #24]
 800c97e:	e003      	b.n	800c988 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c988:	e02f      	b.n	800c9ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2200      	movs	r2, #0
 800c992:	2180      	movs	r1, #128	@ 0x80
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 fdaf 	bl	800d4f8 <UART_WaitOnFlagUntilTimeout>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e03b      	b.n	800ca22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10b      	bne.n	800c9c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	881a      	ldrh	r2, [r3, #0]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9bc:	b292      	uxth	r2, r2
 800c9be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	3302      	adds	r3, #2
 800c9c4:	61bb      	str	r3, [r7, #24]
 800c9c6:	e007      	b.n	800c9d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	781a      	ldrb	r2, [r3, #0]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1c9      	bne.n	800c98a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	2140      	movs	r1, #64	@ 0x40
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f000 fd79 	bl	800d4f8 <UART_WaitOnFlagUntilTimeout>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d004      	beq.n	800ca16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2220      	movs	r2, #32
 800ca10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e005      	b.n	800ca22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e000      	b.n	800ca22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ca20:	2302      	movs	r3, #2
  }
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3720      	adds	r7, #32
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca30:	b08a      	sub	sp, #40	@ 0x28
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	4a9e      	ldr	r2, [pc, #632]	@ (800ccbc <UART_SetConfig+0x290>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d904      	bls.n	800ca50 <UART_SetConfig+0x24>
 800ca46:	f640 4158 	movw	r1, #3160	@ 0xc58
 800ca4a:	489d      	ldr	r0, [pc, #628]	@ (800ccc0 <UART_SetConfig+0x294>)
 800ca4c:	f7f7 fd1c 	bl	8004488 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca58:	d00d      	beq.n	800ca76 <UART_SetConfig+0x4a>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d009      	beq.n	800ca76 <UART_SetConfig+0x4a>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca6a:	d004      	beq.n	800ca76 <UART_SetConfig+0x4a>
 800ca6c:	f640 4159 	movw	r1, #3161	@ 0xc59
 800ca70:	4893      	ldr	r0, [pc, #588]	@ (800ccc0 <UART_SetConfig+0x294>)
 800ca72:	f7f7 fd09 	bl	8004488 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a92      	ldr	r2, [pc, #584]	@ (800ccc4 <UART_SetConfig+0x298>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d10e      	bne.n	800ca9e <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d030      	beq.n	800caea <UART_SetConfig+0xbe>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca90:	d02b      	beq.n	800caea <UART_SetConfig+0xbe>
 800ca92:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800ca96:	488a      	ldr	r0, [pc, #552]	@ (800ccc0 <UART_SetConfig+0x294>)
 800ca98:	f7f7 fcf6 	bl	8004488 <assert_failed>
 800ca9c:	e025      	b.n	800caea <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caa6:	d012      	beq.n	800cace <UART_SetConfig+0xa2>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00e      	beq.n	800cace <UART_SetConfig+0xa2>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cab8:	d009      	beq.n	800cace <UART_SetConfig+0xa2>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cac2:	d004      	beq.n	800cace <UART_SetConfig+0xa2>
 800cac4:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800cac8:	487d      	ldr	r0, [pc, #500]	@ (800ccc0 <UART_SetConfig+0x294>)
 800caca:	f7f7 fcdd 	bl	8004488 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d009      	beq.n	800caea <UART_SetConfig+0xbe>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cade:	d004      	beq.n	800caea <UART_SetConfig+0xbe>
 800cae0:	f640 4161 	movw	r1, #3169	@ 0xc61
 800cae4:	4876      	ldr	r0, [pc, #472]	@ (800ccc0 <UART_SetConfig+0x294>)
 800cae6:	f7f7 fccf 	bl	8004488 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00e      	beq.n	800cb10 <UART_SetConfig+0xe4>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cafa:	d009      	beq.n	800cb10 <UART_SetConfig+0xe4>
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cb04:	d004      	beq.n	800cb10 <UART_SetConfig+0xe4>
 800cb06:	f640 4164 	movw	r1, #3172	@ 0xc64
 800cb0a:	486d      	ldr	r0, [pc, #436]	@ (800ccc0 <UART_SetConfig+0x294>)
 800cb0c:	f7f7 fcbc 	bl	8004488 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	f023 030c 	bic.w	r3, r3, #12
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d103      	bne.n	800cb24 <UART_SetConfig+0xf8>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d104      	bne.n	800cb2e <UART_SetConfig+0x102>
 800cb24:	f640 4165 	movw	r1, #3173	@ 0xc65
 800cb28:	4865      	ldr	r0, [pc, #404]	@ (800ccc0 <UART_SetConfig+0x294>)
 800cb2a:	f7f7 fcad 	bl	8004488 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d013      	beq.n	800cb5e <UART_SetConfig+0x132>
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb3e:	d00e      	beq.n	800cb5e <UART_SetConfig+0x132>
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb48:	d009      	beq.n	800cb5e <UART_SetConfig+0x132>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb52:	d004      	beq.n	800cb5e <UART_SetConfig+0x132>
 800cb54:	f640 4166 	movw	r1, #3174	@ 0xc66
 800cb58:	4859      	ldr	r0, [pc, #356]	@ (800ccc0 <UART_SetConfig+0x294>)
 800cb5a:	f7f7 fc95 	bl	8004488 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	69db      	ldr	r3, [r3, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <UART_SetConfig+0x14e>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb6e:	d004      	beq.n	800cb7a <UART_SetConfig+0x14e>
 800cb70:	f640 4167 	movw	r1, #3175	@ 0xc67
 800cb74:	4852      	ldr	r0, [pc, #328]	@ (800ccc0 <UART_SetConfig+0x294>)
 800cb76:	f7f7 fc87 	bl	8004488 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	689a      	ldr	r2, [r3, #8]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	431a      	orrs	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	431a      	orrs	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	69db      	ldr	r3, [r3, #28]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	4b4b      	ldr	r3, [pc, #300]	@ (800ccc8 <UART_SetConfig+0x29c>)
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	6812      	ldr	r2, [r2, #0]
 800cba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cba2:	430b      	orrs	r3, r1
 800cba4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a3f      	ldr	r2, [pc, #252]	@ (800ccc4 <UART_SetConfig+0x298>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d004      	beq.n	800cbd6 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6a1b      	ldr	r3, [r3, #32]
 800cbd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a37      	ldr	r2, [pc, #220]	@ (800cccc <UART_SetConfig+0x2a0>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d125      	bne.n	800cc40 <UART_SetConfig+0x214>
 800cbf4:	4b36      	ldr	r3, [pc, #216]	@ (800ccd0 <UART_SetConfig+0x2a4>)
 800cbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbfa:	f003 0303 	and.w	r3, r3, #3
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d81a      	bhi.n	800cc38 <UART_SetConfig+0x20c>
 800cc02:	a201      	add	r2, pc, #4	@ (adr r2, 800cc08 <UART_SetConfig+0x1dc>)
 800cc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc08:	0800cc19 	.word	0x0800cc19
 800cc0c:	0800cc29 	.word	0x0800cc29
 800cc10:	0800cc21 	.word	0x0800cc21
 800cc14:	0800cc31 	.word	0x0800cc31
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cc1e:	e114      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cc20:	2302      	movs	r3, #2
 800cc22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cc26:	e110      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cc28:	2304      	movs	r3, #4
 800cc2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cc2e:	e10c      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cc30:	2308      	movs	r3, #8
 800cc32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cc36:	e108      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cc38:	2310      	movs	r3, #16
 800cc3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cc3e:	e104      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a23      	ldr	r2, [pc, #140]	@ (800ccd4 <UART_SetConfig+0x2a8>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d146      	bne.n	800ccd8 <UART_SetConfig+0x2ac>
 800cc4a:	4b21      	ldr	r3, [pc, #132]	@ (800ccd0 <UART_SetConfig+0x2a4>)
 800cc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc50:	f003 030c 	and.w	r3, r3, #12
 800cc54:	2b0c      	cmp	r3, #12
 800cc56:	d82d      	bhi.n	800ccb4 <UART_SetConfig+0x288>
 800cc58:	a201      	add	r2, pc, #4	@ (adr r2, 800cc60 <UART_SetConfig+0x234>)
 800cc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5e:	bf00      	nop
 800cc60:	0800cc95 	.word	0x0800cc95
 800cc64:	0800ccb5 	.word	0x0800ccb5
 800cc68:	0800ccb5 	.word	0x0800ccb5
 800cc6c:	0800ccb5 	.word	0x0800ccb5
 800cc70:	0800cca5 	.word	0x0800cca5
 800cc74:	0800ccb5 	.word	0x0800ccb5
 800cc78:	0800ccb5 	.word	0x0800ccb5
 800cc7c:	0800ccb5 	.word	0x0800ccb5
 800cc80:	0800cc9d 	.word	0x0800cc9d
 800cc84:	0800ccb5 	.word	0x0800ccb5
 800cc88:	0800ccb5 	.word	0x0800ccb5
 800cc8c:	0800ccb5 	.word	0x0800ccb5
 800cc90:	0800ccad 	.word	0x0800ccad
 800cc94:	2300      	movs	r3, #0
 800cc96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cc9a:	e0d6      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cca2:	e0d2      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cca4:	2304      	movs	r3, #4
 800cca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ccaa:	e0ce      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ccac:	2308      	movs	r3, #8
 800ccae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ccb2:	e0ca      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ccb4:	2310      	movs	r3, #16
 800ccb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ccba:	e0c6      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ccbc:	00989680 	.word	0x00989680
 800ccc0:	0800f090 	.word	0x0800f090
 800ccc4:	40008000 	.word	0x40008000
 800ccc8:	efff69f3 	.word	0xefff69f3
 800cccc:	40013800 	.word	0x40013800
 800ccd0:	40021000 	.word	0x40021000
 800ccd4:	40004400 	.word	0x40004400
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4aae      	ldr	r2, [pc, #696]	@ (800cf98 <UART_SetConfig+0x56c>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d125      	bne.n	800cd2e <UART_SetConfig+0x302>
 800cce2:	4bae      	ldr	r3, [pc, #696]	@ (800cf9c <UART_SetConfig+0x570>)
 800cce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cce8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ccec:	2b30      	cmp	r3, #48	@ 0x30
 800ccee:	d016      	beq.n	800cd1e <UART_SetConfig+0x2f2>
 800ccf0:	2b30      	cmp	r3, #48	@ 0x30
 800ccf2:	d818      	bhi.n	800cd26 <UART_SetConfig+0x2fa>
 800ccf4:	2b20      	cmp	r3, #32
 800ccf6:	d00a      	beq.n	800cd0e <UART_SetConfig+0x2e2>
 800ccf8:	2b20      	cmp	r3, #32
 800ccfa:	d814      	bhi.n	800cd26 <UART_SetConfig+0x2fa>
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <UART_SetConfig+0x2da>
 800cd00:	2b10      	cmp	r3, #16
 800cd02:	d008      	beq.n	800cd16 <UART_SetConfig+0x2ea>
 800cd04:	e00f      	b.n	800cd26 <UART_SetConfig+0x2fa>
 800cd06:	2300      	movs	r3, #0
 800cd08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd0c:	e09d      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd14:	e099      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd16:	2304      	movs	r3, #4
 800cd18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd1c:	e095      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd1e:	2308      	movs	r3, #8
 800cd20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd24:	e091      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd26:	2310      	movs	r3, #16
 800cd28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd2c:	e08d      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a9b      	ldr	r2, [pc, #620]	@ (800cfa0 <UART_SetConfig+0x574>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d125      	bne.n	800cd84 <UART_SetConfig+0x358>
 800cd38:	4b98      	ldr	r3, [pc, #608]	@ (800cf9c <UART_SetConfig+0x570>)
 800cd3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cd42:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd44:	d016      	beq.n	800cd74 <UART_SetConfig+0x348>
 800cd46:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd48:	d818      	bhi.n	800cd7c <UART_SetConfig+0x350>
 800cd4a:	2b80      	cmp	r3, #128	@ 0x80
 800cd4c:	d00a      	beq.n	800cd64 <UART_SetConfig+0x338>
 800cd4e:	2b80      	cmp	r3, #128	@ 0x80
 800cd50:	d814      	bhi.n	800cd7c <UART_SetConfig+0x350>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <UART_SetConfig+0x330>
 800cd56:	2b40      	cmp	r3, #64	@ 0x40
 800cd58:	d008      	beq.n	800cd6c <UART_SetConfig+0x340>
 800cd5a:	e00f      	b.n	800cd7c <UART_SetConfig+0x350>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd62:	e072      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd64:	2302      	movs	r3, #2
 800cd66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd6a:	e06e      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd72:	e06a      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd74:	2308      	movs	r3, #8
 800cd76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd7a:	e066      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd82:	e062      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a86      	ldr	r2, [pc, #536]	@ (800cfa4 <UART_SetConfig+0x578>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d12a      	bne.n	800cde4 <UART_SetConfig+0x3b8>
 800cd8e:	4b83      	ldr	r3, [pc, #524]	@ (800cf9c <UART_SetConfig+0x570>)
 800cd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd9c:	d01a      	beq.n	800cdd4 <UART_SetConfig+0x3a8>
 800cd9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cda2:	d81b      	bhi.n	800cddc <UART_SetConfig+0x3b0>
 800cda4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cda8:	d00c      	beq.n	800cdc4 <UART_SetConfig+0x398>
 800cdaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdae:	d815      	bhi.n	800cddc <UART_SetConfig+0x3b0>
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <UART_SetConfig+0x390>
 800cdb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdb8:	d008      	beq.n	800cdcc <UART_SetConfig+0x3a0>
 800cdba:	e00f      	b.n	800cddc <UART_SetConfig+0x3b0>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cdc2:	e042      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cdca:	e03e      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cdcc:	2304      	movs	r3, #4
 800cdce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cdd2:	e03a      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cdd4:	2308      	movs	r3, #8
 800cdd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cdda:	e036      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cddc:	2310      	movs	r3, #16
 800cdde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cde2:	e032      	b.n	800ce4a <UART_SetConfig+0x41e>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a6f      	ldr	r2, [pc, #444]	@ (800cfa8 <UART_SetConfig+0x57c>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d12a      	bne.n	800ce44 <UART_SetConfig+0x418>
 800cdee:	4b6b      	ldr	r3, [pc, #428]	@ (800cf9c <UART_SetConfig+0x570>)
 800cdf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cdf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cdfc:	d01a      	beq.n	800ce34 <UART_SetConfig+0x408>
 800cdfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce02:	d81b      	bhi.n	800ce3c <UART_SetConfig+0x410>
 800ce04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce08:	d00c      	beq.n	800ce24 <UART_SetConfig+0x3f8>
 800ce0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce0e:	d815      	bhi.n	800ce3c <UART_SetConfig+0x410>
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d003      	beq.n	800ce1c <UART_SetConfig+0x3f0>
 800ce14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce18:	d008      	beq.n	800ce2c <UART_SetConfig+0x400>
 800ce1a:	e00f      	b.n	800ce3c <UART_SetConfig+0x410>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ce22:	e012      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ce24:	2302      	movs	r3, #2
 800ce26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ce2a:	e00e      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ce2c:	2304      	movs	r3, #4
 800ce2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ce32:	e00a      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ce34:	2308      	movs	r3, #8
 800ce36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ce3a:	e006      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ce3c:	2310      	movs	r3, #16
 800ce3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ce42:	e002      	b.n	800ce4a <UART_SetConfig+0x41e>
 800ce44:	2310      	movs	r3, #16
 800ce46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a56      	ldr	r2, [pc, #344]	@ (800cfa8 <UART_SetConfig+0x57c>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d17a      	bne.n	800cf4a <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ce58:	2b08      	cmp	r3, #8
 800ce5a:	d824      	bhi.n	800cea6 <UART_SetConfig+0x47a>
 800ce5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce64 <UART_SetConfig+0x438>)
 800ce5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce62:	bf00      	nop
 800ce64:	0800ce89 	.word	0x0800ce89
 800ce68:	0800cea7 	.word	0x0800cea7
 800ce6c:	0800ce91 	.word	0x0800ce91
 800ce70:	0800cea7 	.word	0x0800cea7
 800ce74:	0800ce97 	.word	0x0800ce97
 800ce78:	0800cea7 	.word	0x0800cea7
 800ce7c:	0800cea7 	.word	0x0800cea7
 800ce80:	0800cea7 	.word	0x0800cea7
 800ce84:	0800ce9f 	.word	0x0800ce9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce88:	f7fa fd5c 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 800ce8c:	61f8      	str	r0, [r7, #28]
        break;
 800ce8e:	e010      	b.n	800ceb2 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce90:	4b46      	ldr	r3, [pc, #280]	@ (800cfac <UART_SetConfig+0x580>)
 800ce92:	61fb      	str	r3, [r7, #28]
        break;
 800ce94:	e00d      	b.n	800ceb2 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce96:	f7fa fcbd 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 800ce9a:	61f8      	str	r0, [r7, #28]
        break;
 800ce9c:	e009      	b.n	800ceb2 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cea2:	61fb      	str	r3, [r7, #28]
        break;
 800cea4:	e005      	b.n	800ceb2 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800cea6:	2300      	movs	r3, #0
 800cea8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ceb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 8107 	beq.w	800d0c8 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	4613      	mov	r3, r2
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	69fa      	ldr	r2, [r7, #28]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d305      	bcc.n	800ced6 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ced0:	69fa      	ldr	r2, [r7, #28]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d903      	bls.n	800cede <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cedc:	e0f4      	b.n	800d0c8 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	2200      	movs	r2, #0
 800cee2:	461c      	mov	r4, r3
 800cee4:	4615      	mov	r5, r2
 800cee6:	f04f 0200 	mov.w	r2, #0
 800ceea:	f04f 0300 	mov.w	r3, #0
 800ceee:	022b      	lsls	r3, r5, #8
 800cef0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cef4:	0222      	lsls	r2, r4, #8
 800cef6:	68f9      	ldr	r1, [r7, #12]
 800cef8:	6849      	ldr	r1, [r1, #4]
 800cefa:	0849      	lsrs	r1, r1, #1
 800cefc:	2000      	movs	r0, #0
 800cefe:	4688      	mov	r8, r1
 800cf00:	4681      	mov	r9, r0
 800cf02:	eb12 0a08 	adds.w	sl, r2, r8
 800cf06:	eb43 0b09 	adc.w	fp, r3, r9
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	603b      	str	r3, [r7, #0]
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf18:	4650      	mov	r0, sl
 800cf1a:	4659      	mov	r1, fp
 800cf1c:	f7f3 f9a8 	bl	8000270 <__aeabi_uldivmod>
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4613      	mov	r3, r2
 800cf26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf2e:	d308      	bcc.n	800cf42 <UART_SetConfig+0x516>
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf36:	d204      	bcs.n	800cf42 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	60da      	str	r2, [r3, #12]
 800cf40:	e0c2      	b.n	800d0c8 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cf48:	e0be      	b.n	800d0c8 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf52:	d16a      	bne.n	800d02a <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800cf54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d834      	bhi.n	800cfc6 <UART_SetConfig+0x59a>
 800cf5c:	a201      	add	r2, pc, #4	@ (adr r2, 800cf64 <UART_SetConfig+0x538>)
 800cf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf62:	bf00      	nop
 800cf64:	0800cf89 	.word	0x0800cf89
 800cf68:	0800cf91 	.word	0x0800cf91
 800cf6c:	0800cfb1 	.word	0x0800cfb1
 800cf70:	0800cfc7 	.word	0x0800cfc7
 800cf74:	0800cfb7 	.word	0x0800cfb7
 800cf78:	0800cfc7 	.word	0x0800cfc7
 800cf7c:	0800cfc7 	.word	0x0800cfc7
 800cf80:	0800cfc7 	.word	0x0800cfc7
 800cf84:	0800cfbf 	.word	0x0800cfbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf88:	f7fa fcdc 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 800cf8c:	61f8      	str	r0, [r7, #28]
        break;
 800cf8e:	e020      	b.n	800cfd2 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf90:	f7fa fcee 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 800cf94:	61f8      	str	r0, [r7, #28]
        break;
 800cf96:	e01c      	b.n	800cfd2 <UART_SetConfig+0x5a6>
 800cf98:	40004800 	.word	0x40004800
 800cf9c:	40021000 	.word	0x40021000
 800cfa0:	40004c00 	.word	0x40004c00
 800cfa4:	40005000 	.word	0x40005000
 800cfa8:	40008000 	.word	0x40008000
 800cfac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfb0:	4b4c      	ldr	r3, [pc, #304]	@ (800d0e4 <UART_SetConfig+0x6b8>)
 800cfb2:	61fb      	str	r3, [r7, #28]
        break;
 800cfb4:	e00d      	b.n	800cfd2 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfb6:	f7fa fc2d 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 800cfba:	61f8      	str	r0, [r7, #28]
        break;
 800cfbc:	e009      	b.n	800cfd2 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfc2:	61fb      	str	r3, [r7, #28]
        break;
 800cfc4:	e005      	b.n	800cfd2 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cfd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d077      	beq.n	800d0c8 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	005a      	lsls	r2, r3, #1
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	085b      	lsrs	r3, r3, #1
 800cfe2:	441a      	add	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	2b0f      	cmp	r3, #15
 800cff2:	d916      	bls.n	800d022 <UART_SetConfig+0x5f6>
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cffa:	d212      	bcs.n	800d022 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	f023 030f 	bic.w	r3, r3, #15
 800d004:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	085b      	lsrs	r3, r3, #1
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	f003 0307 	and.w	r3, r3, #7
 800d010:	b29a      	uxth	r2, r3
 800d012:	8afb      	ldrh	r3, [r7, #22]
 800d014:	4313      	orrs	r3, r2
 800d016:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	8afa      	ldrh	r2, [r7, #22]
 800d01e:	60da      	str	r2, [r3, #12]
 800d020:	e052      	b.n	800d0c8 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d028:	e04e      	b.n	800d0c8 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d02a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d02e:	2b08      	cmp	r3, #8
 800d030:	d827      	bhi.n	800d082 <UART_SetConfig+0x656>
 800d032:	a201      	add	r2, pc, #4	@ (adr r2, 800d038 <UART_SetConfig+0x60c>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d065 	.word	0x0800d065
 800d040:	0800d06d 	.word	0x0800d06d
 800d044:	0800d083 	.word	0x0800d083
 800d048:	0800d073 	.word	0x0800d073
 800d04c:	0800d083 	.word	0x0800d083
 800d050:	0800d083 	.word	0x0800d083
 800d054:	0800d083 	.word	0x0800d083
 800d058:	0800d07b 	.word	0x0800d07b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d05c:	f7fa fc72 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 800d060:	61f8      	str	r0, [r7, #28]
        break;
 800d062:	e014      	b.n	800d08e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d064:	f7fa fc84 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 800d068:	61f8      	str	r0, [r7, #28]
        break;
 800d06a:	e010      	b.n	800d08e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d06c:	4b1d      	ldr	r3, [pc, #116]	@ (800d0e4 <UART_SetConfig+0x6b8>)
 800d06e:	61fb      	str	r3, [r7, #28]
        break;
 800d070:	e00d      	b.n	800d08e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d072:	f7fa fbcf 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 800d076:	61f8      	str	r0, [r7, #28]
        break;
 800d078:	e009      	b.n	800d08e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d07a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d07e:	61fb      	str	r3, [r7, #28]
        break;
 800d080:	e005      	b.n	800d08e <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d08c:	bf00      	nop
    }

    if (pclk != 0U)
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d019      	beq.n	800d0c8 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	085a      	lsrs	r2, r3, #1
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	441a      	add	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	2b0f      	cmp	r3, #15
 800d0ac:	d909      	bls.n	800d0c2 <UART_SetConfig+0x696>
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0b4:	d205      	bcs.n	800d0c2 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	60da      	str	r2, [r3, #12]
 800d0c0:	e002      	b.n	800d0c8 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d0d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3728      	adds	r7, #40	@ 0x28
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0e2:	bf00      	nop
 800d0e4:	00f42400 	.word	0x00f42400

0800d0e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f4:	2bff      	cmp	r3, #255	@ 0xff
 800d0f6:	d904      	bls.n	800d102 <UART_AdvFeatureConfig+0x1a>
 800d0f8:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800d0fc:	4891      	ldr	r0, [pc, #580]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d0fe:	f7f7 f9c3 	bl	8004488 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d106:	f003 0308 	and.w	r3, r3, #8
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d018      	beq.n	800d140 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d112:	2b00      	cmp	r3, #0
 800d114:	d009      	beq.n	800d12a <UART_AdvFeatureConfig+0x42>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d11a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d11e:	d004      	beq.n	800d12a <UART_AdvFeatureConfig+0x42>
 800d120:	f640 5152 	movw	r1, #3410	@ 0xd52
 800d124:	4887      	ldr	r0, [pc, #540]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d126:	f7f7 f9af 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	430a      	orrs	r2, r1
 800d13e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d144:	f003 0301 	and.w	r3, r3, #1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d018      	beq.n	800d17e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d150:	2b00      	cmp	r3, #0
 800d152:	d009      	beq.n	800d168 <UART_AdvFeatureConfig+0x80>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d15c:	d004      	beq.n	800d168 <UART_AdvFeatureConfig+0x80>
 800d15e:	f640 5159 	movw	r1, #3417	@ 0xd59
 800d162:	4878      	ldr	r0, [pc, #480]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d164:	f7f7 f990 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d182:	f003 0302 	and.w	r3, r3, #2
 800d186:	2b00      	cmp	r3, #0
 800d188:	d018      	beq.n	800d1bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d009      	beq.n	800d1a6 <UART_AdvFeatureConfig+0xbe>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d19a:	d004      	beq.n	800d1a6 <UART_AdvFeatureConfig+0xbe>
 800d19c:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800d1a0:	4868      	ldr	r0, [pc, #416]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d1a2:	f7f7 f971 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	430a      	orrs	r2, r1
 800d1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c0:	f003 0304 	and.w	r3, r3, #4
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d018      	beq.n	800d1fa <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d009      	beq.n	800d1e4 <UART_AdvFeatureConfig+0xfc>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1d8:	d004      	beq.n	800d1e4 <UART_AdvFeatureConfig+0xfc>
 800d1da:	f640 5167 	movw	r1, #3431	@ 0xd67
 800d1de:	4859      	ldr	r0, [pc, #356]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d1e0:	f7f7 f952 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1fe:	f003 0310 	and.w	r3, r3, #16
 800d202:	2b00      	cmp	r3, #0
 800d204:	d018      	beq.n	800d238 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d009      	beq.n	800d222 <UART_AdvFeatureConfig+0x13a>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d216:	d004      	beq.n	800d222 <UART_AdvFeatureConfig+0x13a>
 800d218:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800d21c:	4849      	ldr	r0, [pc, #292]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d21e:	f7f7 f933 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	430a      	orrs	r2, r1
 800d236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23c:	f003 0320 	and.w	r3, r3, #32
 800d240:	2b00      	cmp	r3, #0
 800d242:	d018      	beq.n	800d276 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <UART_AdvFeatureConfig+0x178>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d254:	d004      	beq.n	800d260 <UART_AdvFeatureConfig+0x178>
 800d256:	f640 5175 	movw	r1, #3445	@ 0xd75
 800d25a:	483a      	ldr	r0, [pc, #232]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d25c:	f7f7 f914 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	430a      	orrs	r2, r1
 800d274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d06c      	beq.n	800d35c <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a30      	ldr	r2, [pc, #192]	@ (800d348 <UART_AdvFeatureConfig+0x260>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d018      	beq.n	800d2be <UART_AdvFeatureConfig+0x1d6>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a2e      	ldr	r2, [pc, #184]	@ (800d34c <UART_AdvFeatureConfig+0x264>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d013      	beq.n	800d2be <UART_AdvFeatureConfig+0x1d6>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a2d      	ldr	r2, [pc, #180]	@ (800d350 <UART_AdvFeatureConfig+0x268>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d00e      	beq.n	800d2be <UART_AdvFeatureConfig+0x1d6>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a2b      	ldr	r2, [pc, #172]	@ (800d354 <UART_AdvFeatureConfig+0x26c>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d009      	beq.n	800d2be <UART_AdvFeatureConfig+0x1d6>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d358 <UART_AdvFeatureConfig+0x270>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d004      	beq.n	800d2be <UART_AdvFeatureConfig+0x1d6>
 800d2b4:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800d2b8:	4822      	ldr	r0, [pc, #136]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d2ba:	f7f7 f8e5 	bl	8004488 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d009      	beq.n	800d2da <UART_AdvFeatureConfig+0x1f2>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d2ce:	d004      	beq.n	800d2da <UART_AdvFeatureConfig+0x1f2>
 800d2d0:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800d2d4:	481b      	ldr	r0, [pc, #108]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d2d6:	f7f7 f8d7 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d2f8:	d130      	bne.n	800d35c <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d013      	beq.n	800d32a <UART_AdvFeatureConfig+0x242>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d306:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d30a:	d00e      	beq.n	800d32a <UART_AdvFeatureConfig+0x242>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d314:	d009      	beq.n	800d32a <UART_AdvFeatureConfig+0x242>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d31e:	d004      	beq.n	800d32a <UART_AdvFeatureConfig+0x242>
 800d320:	f640 5182 	movw	r1, #3458	@ 0xd82
 800d324:	4807      	ldr	r0, [pc, #28]	@ (800d344 <UART_AdvFeatureConfig+0x25c>)
 800d326:	f7f7 f8af 	bl	8004488 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	430a      	orrs	r2, r1
 800d33e:	605a      	str	r2, [r3, #4]
 800d340:	e00c      	b.n	800d35c <UART_AdvFeatureConfig+0x274>
 800d342:	bf00      	nop
 800d344:	0800f090 	.word	0x0800f090
 800d348:	40013800 	.word	0x40013800
 800d34c:	40004400 	.word	0x40004400
 800d350:	40004800 	.word	0x40004800
 800d354:	40004c00 	.word	0x40004c00
 800d358:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d364:	2b00      	cmp	r3, #0
 800d366:	d018      	beq.n	800d39a <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d009      	beq.n	800d384 <UART_AdvFeatureConfig+0x29c>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d374:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d378:	d004      	beq.n	800d384 <UART_AdvFeatureConfig+0x29c>
 800d37a:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800d37e:	4809      	ldr	r0, [pc, #36]	@ (800d3a4 <UART_AdvFeatureConfig+0x2bc>)
 800d380:	f7f7 f882 	bl	8004488 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	605a      	str	r2, [r3, #4]
  }
}
 800d39a:	bf00      	nop
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	0800f090 	.word	0x0800f090

0800d3a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b098      	sub	sp, #96	@ 0x60
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3b8:	f7f7 fe90 	bl	80050dc <HAL_GetTick>
 800d3bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0308 	and.w	r3, r3, #8
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d12e      	bne.n	800d42a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 f88c 	bl	800d4f8 <UART_WaitOnFlagUntilTimeout>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d021      	beq.n	800d42a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d404:	647b      	str	r3, [r7, #68]	@ 0x44
 800d406:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d40a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e6      	bne.n	800d3e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2220      	movs	r2, #32
 800d41c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e062      	b.n	800d4f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	2b04      	cmp	r3, #4
 800d436:	d149      	bne.n	800d4cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d438:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d440:	2200      	movs	r2, #0
 800d442:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f856 	bl	800d4f8 <UART_WaitOnFlagUntilTimeout>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d03c      	beq.n	800d4cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45a:	e853 3f00 	ldrex	r3, [r3]
 800d45e:	623b      	str	r3, [r7, #32]
   return(result);
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d470:	633b      	str	r3, [r7, #48]	@ 0x30
 800d472:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d474:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d478:	e841 2300 	strex	r3, r2, [r1]
 800d47c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1e6      	bne.n	800d452 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3308      	adds	r3, #8
 800d48a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	e853 3f00 	ldrex	r3, [r3]
 800d492:	60fb      	str	r3, [r7, #12]
   return(result);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f023 0301 	bic.w	r3, r3, #1
 800d49a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4a4:	61fa      	str	r2, [r7, #28]
 800d4a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a8:	69b9      	ldr	r1, [r7, #24]
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	e841 2300 	strex	r3, r2, [r1]
 800d4b0:	617b      	str	r3, [r7, #20]
   return(result);
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1e5      	bne.n	800d484 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e011      	b.n	800d4f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2220      	movs	r2, #32
 800d4d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2220      	movs	r2, #32
 800d4d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3758      	adds	r7, #88	@ 0x58
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	603b      	str	r3, [r7, #0]
 800d504:	4613      	mov	r3, r2
 800d506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d508:	e04f      	b.n	800d5aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d510:	d04b      	beq.n	800d5aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d512:	f7f7 fde3 	bl	80050dc <HAL_GetTick>
 800d516:	4602      	mov	r2, r0
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d302      	bcc.n	800d528 <UART_WaitOnFlagUntilTimeout+0x30>
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d528:	2303      	movs	r3, #3
 800d52a:	e04e      	b.n	800d5ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f003 0304 	and.w	r3, r3, #4
 800d536:	2b00      	cmp	r3, #0
 800d538:	d037      	beq.n	800d5aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	2b80      	cmp	r3, #128	@ 0x80
 800d53e:	d034      	beq.n	800d5aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2b40      	cmp	r3, #64	@ 0x40
 800d544:	d031      	beq.n	800d5aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	f003 0308 	and.w	r3, r3, #8
 800d550:	2b08      	cmp	r3, #8
 800d552:	d110      	bne.n	800d576 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2208      	movs	r2, #8
 800d55a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f000 f838 	bl	800d5d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2208      	movs	r2, #8
 800d566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e029      	b.n	800d5ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	69db      	ldr	r3, [r3, #28]
 800d57c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d584:	d111      	bne.n	800d5aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d58e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f000 f81e 	bl	800d5d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2220      	movs	r2, #32
 800d59a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d5a6:	2303      	movs	r3, #3
 800d5a8:	e00f      	b.n	800d5ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	69da      	ldr	r2, [r3, #28]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	bf0c      	ite	eq
 800d5ba:	2301      	moveq	r3, #1
 800d5bc:	2300      	movne	r3, #0
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d0a0      	beq.n	800d50a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b095      	sub	sp, #84	@ 0x54
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e2:	e853 3f00 	ldrex	r3, [r3]
 800d5e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d600:	e841 2300 	strex	r3, r2, [r1]
 800d604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1e6      	bne.n	800d5da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3308      	adds	r3, #8
 800d612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	e853 3f00 	ldrex	r3, [r3]
 800d61a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	f023 0301 	bic.w	r3, r3, #1
 800d622:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3308      	adds	r3, #8
 800d62a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d62c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d62e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d634:	e841 2300 	strex	r3, r2, [r1]
 800d638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e5      	bne.n	800d60c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d644:	2b01      	cmp	r3, #1
 800d646:	d118      	bne.n	800d67a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	60bb      	str	r3, [r7, #8]
   return(result);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	f023 0310 	bic.w	r3, r3, #16
 800d65c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d666:	61bb      	str	r3, [r7, #24]
 800d668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	6979      	ldr	r1, [r7, #20]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	e841 2300 	strex	r3, r2, [r1]
 800d672:	613b      	str	r3, [r7, #16]
   return(result);
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e6      	bne.n	800d648 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d68e:	bf00      	nop
 800d690:	3754      	adds	r7, #84	@ 0x54
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
	...

0800d69c <calloc>:
 800d69c:	4b02      	ldr	r3, [pc, #8]	@ (800d6a8 <calloc+0xc>)
 800d69e:	460a      	mov	r2, r1
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	6818      	ldr	r0, [r3, #0]
 800d6a4:	f000 b802 	b.w	800d6ac <_calloc_r>
 800d6a8:	2000002c 	.word	0x2000002c

0800d6ac <_calloc_r>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	fba1 5402 	umull	r5, r4, r1, r2
 800d6b2:	b934      	cbnz	r4, 800d6c2 <_calloc_r+0x16>
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	f000 f83f 	bl	800d738 <_malloc_r>
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	b928      	cbnz	r0, 800d6ca <_calloc_r+0x1e>
 800d6be:	4630      	mov	r0, r6
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	220c      	movs	r2, #12
 800d6c4:	6002      	str	r2, [r0, #0]
 800d6c6:	2600      	movs	r6, #0
 800d6c8:	e7f9      	b.n	800d6be <_calloc_r+0x12>
 800d6ca:	462a      	mov	r2, r5
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	f000 fac7 	bl	800dc60 <memset>
 800d6d2:	e7f4      	b.n	800d6be <_calloc_r+0x12>

0800d6d4 <malloc>:
 800d6d4:	4b02      	ldr	r3, [pc, #8]	@ (800d6e0 <malloc+0xc>)
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	6818      	ldr	r0, [r3, #0]
 800d6da:	f000 b82d 	b.w	800d738 <_malloc_r>
 800d6de:	bf00      	nop
 800d6e0:	2000002c 	.word	0x2000002c

0800d6e4 <free>:
 800d6e4:	4b02      	ldr	r3, [pc, #8]	@ (800d6f0 <free+0xc>)
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	6818      	ldr	r0, [r3, #0]
 800d6ea:	f000 bb53 	b.w	800dd94 <_free_r>
 800d6ee:	bf00      	nop
 800d6f0:	2000002c 	.word	0x2000002c

0800d6f4 <sbrk_aligned>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	4e0f      	ldr	r6, [pc, #60]	@ (800d734 <sbrk_aligned+0x40>)
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	6831      	ldr	r1, [r6, #0]
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	b911      	cbnz	r1, 800d706 <sbrk_aligned+0x12>
 800d700:	f000 faea 	bl	800dcd8 <_sbrk_r>
 800d704:	6030      	str	r0, [r6, #0]
 800d706:	4621      	mov	r1, r4
 800d708:	4628      	mov	r0, r5
 800d70a:	f000 fae5 	bl	800dcd8 <_sbrk_r>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d103      	bne.n	800d71a <sbrk_aligned+0x26>
 800d712:	f04f 34ff 	mov.w	r4, #4294967295
 800d716:	4620      	mov	r0, r4
 800d718:	bd70      	pop	{r4, r5, r6, pc}
 800d71a:	1cc4      	adds	r4, r0, #3
 800d71c:	f024 0403 	bic.w	r4, r4, #3
 800d720:	42a0      	cmp	r0, r4
 800d722:	d0f8      	beq.n	800d716 <sbrk_aligned+0x22>
 800d724:	1a21      	subs	r1, r4, r0
 800d726:	4628      	mov	r0, r5
 800d728:	f000 fad6 	bl	800dcd8 <_sbrk_r>
 800d72c:	3001      	adds	r0, #1
 800d72e:	d1f2      	bne.n	800d716 <sbrk_aligned+0x22>
 800d730:	e7ef      	b.n	800d712 <sbrk_aligned+0x1e>
 800d732:	bf00      	nop
 800d734:	20001084 	.word	0x20001084

0800d738 <_malloc_r>:
 800d738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d73c:	1ccd      	adds	r5, r1, #3
 800d73e:	f025 0503 	bic.w	r5, r5, #3
 800d742:	3508      	adds	r5, #8
 800d744:	2d0c      	cmp	r5, #12
 800d746:	bf38      	it	cc
 800d748:	250c      	movcc	r5, #12
 800d74a:	2d00      	cmp	r5, #0
 800d74c:	4606      	mov	r6, r0
 800d74e:	db01      	blt.n	800d754 <_malloc_r+0x1c>
 800d750:	42a9      	cmp	r1, r5
 800d752:	d904      	bls.n	800d75e <_malloc_r+0x26>
 800d754:	230c      	movs	r3, #12
 800d756:	6033      	str	r3, [r6, #0]
 800d758:	2000      	movs	r0, #0
 800d75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d75e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d834 <_malloc_r+0xfc>
 800d762:	f000 f869 	bl	800d838 <__malloc_lock>
 800d766:	f8d8 3000 	ldr.w	r3, [r8]
 800d76a:	461c      	mov	r4, r3
 800d76c:	bb44      	cbnz	r4, 800d7c0 <_malloc_r+0x88>
 800d76e:	4629      	mov	r1, r5
 800d770:	4630      	mov	r0, r6
 800d772:	f7ff ffbf 	bl	800d6f4 <sbrk_aligned>
 800d776:	1c43      	adds	r3, r0, #1
 800d778:	4604      	mov	r4, r0
 800d77a:	d158      	bne.n	800d82e <_malloc_r+0xf6>
 800d77c:	f8d8 4000 	ldr.w	r4, [r8]
 800d780:	4627      	mov	r7, r4
 800d782:	2f00      	cmp	r7, #0
 800d784:	d143      	bne.n	800d80e <_malloc_r+0xd6>
 800d786:	2c00      	cmp	r4, #0
 800d788:	d04b      	beq.n	800d822 <_malloc_r+0xea>
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	4639      	mov	r1, r7
 800d78e:	4630      	mov	r0, r6
 800d790:	eb04 0903 	add.w	r9, r4, r3
 800d794:	f000 faa0 	bl	800dcd8 <_sbrk_r>
 800d798:	4581      	cmp	r9, r0
 800d79a:	d142      	bne.n	800d822 <_malloc_r+0xea>
 800d79c:	6821      	ldr	r1, [r4, #0]
 800d79e:	1a6d      	subs	r5, r5, r1
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ffa6 	bl	800d6f4 <sbrk_aligned>
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d03a      	beq.n	800d822 <_malloc_r+0xea>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	442b      	add	r3, r5
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	bb62      	cbnz	r2, 800d814 <_malloc_r+0xdc>
 800d7ba:	f8c8 7000 	str.w	r7, [r8]
 800d7be:	e00f      	b.n	800d7e0 <_malloc_r+0xa8>
 800d7c0:	6822      	ldr	r2, [r4, #0]
 800d7c2:	1b52      	subs	r2, r2, r5
 800d7c4:	d420      	bmi.n	800d808 <_malloc_r+0xd0>
 800d7c6:	2a0b      	cmp	r2, #11
 800d7c8:	d917      	bls.n	800d7fa <_malloc_r+0xc2>
 800d7ca:	1961      	adds	r1, r4, r5
 800d7cc:	42a3      	cmp	r3, r4
 800d7ce:	6025      	str	r5, [r4, #0]
 800d7d0:	bf18      	it	ne
 800d7d2:	6059      	strne	r1, [r3, #4]
 800d7d4:	6863      	ldr	r3, [r4, #4]
 800d7d6:	bf08      	it	eq
 800d7d8:	f8c8 1000 	streq.w	r1, [r8]
 800d7dc:	5162      	str	r2, [r4, r5]
 800d7de:	604b      	str	r3, [r1, #4]
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f000 f82f 	bl	800d844 <__malloc_unlock>
 800d7e6:	f104 000b 	add.w	r0, r4, #11
 800d7ea:	1d23      	adds	r3, r4, #4
 800d7ec:	f020 0007 	bic.w	r0, r0, #7
 800d7f0:	1ac2      	subs	r2, r0, r3
 800d7f2:	bf1c      	itt	ne
 800d7f4:	1a1b      	subne	r3, r3, r0
 800d7f6:	50a3      	strne	r3, [r4, r2]
 800d7f8:	e7af      	b.n	800d75a <_malloc_r+0x22>
 800d7fa:	6862      	ldr	r2, [r4, #4]
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	bf0c      	ite	eq
 800d800:	f8c8 2000 	streq.w	r2, [r8]
 800d804:	605a      	strne	r2, [r3, #4]
 800d806:	e7eb      	b.n	800d7e0 <_malloc_r+0xa8>
 800d808:	4623      	mov	r3, r4
 800d80a:	6864      	ldr	r4, [r4, #4]
 800d80c:	e7ae      	b.n	800d76c <_malloc_r+0x34>
 800d80e:	463c      	mov	r4, r7
 800d810:	687f      	ldr	r7, [r7, #4]
 800d812:	e7b6      	b.n	800d782 <_malloc_r+0x4a>
 800d814:	461a      	mov	r2, r3
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	42a3      	cmp	r3, r4
 800d81a:	d1fb      	bne.n	800d814 <_malloc_r+0xdc>
 800d81c:	2300      	movs	r3, #0
 800d81e:	6053      	str	r3, [r2, #4]
 800d820:	e7de      	b.n	800d7e0 <_malloc_r+0xa8>
 800d822:	230c      	movs	r3, #12
 800d824:	6033      	str	r3, [r6, #0]
 800d826:	4630      	mov	r0, r6
 800d828:	f000 f80c 	bl	800d844 <__malloc_unlock>
 800d82c:	e794      	b.n	800d758 <_malloc_r+0x20>
 800d82e:	6005      	str	r5, [r0, #0]
 800d830:	e7d6      	b.n	800d7e0 <_malloc_r+0xa8>
 800d832:	bf00      	nop
 800d834:	20001088 	.word	0x20001088

0800d838 <__malloc_lock>:
 800d838:	4801      	ldr	r0, [pc, #4]	@ (800d840 <__malloc_lock+0x8>)
 800d83a:	f000 ba9a 	b.w	800dd72 <__retarget_lock_acquire_recursive>
 800d83e:	bf00      	nop
 800d840:	200011cc 	.word	0x200011cc

0800d844 <__malloc_unlock>:
 800d844:	4801      	ldr	r0, [pc, #4]	@ (800d84c <__malloc_unlock+0x8>)
 800d846:	f000 ba95 	b.w	800dd74 <__retarget_lock_release_recursive>
 800d84a:	bf00      	nop
 800d84c:	200011cc 	.word	0x200011cc

0800d850 <std>:
 800d850:	2300      	movs	r3, #0
 800d852:	b510      	push	{r4, lr}
 800d854:	4604      	mov	r4, r0
 800d856:	e9c0 3300 	strd	r3, r3, [r0]
 800d85a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d85e:	6083      	str	r3, [r0, #8]
 800d860:	8181      	strh	r1, [r0, #12]
 800d862:	6643      	str	r3, [r0, #100]	@ 0x64
 800d864:	81c2      	strh	r2, [r0, #14]
 800d866:	6183      	str	r3, [r0, #24]
 800d868:	4619      	mov	r1, r3
 800d86a:	2208      	movs	r2, #8
 800d86c:	305c      	adds	r0, #92	@ 0x5c
 800d86e:	f000 f9f7 	bl	800dc60 <memset>
 800d872:	4b0d      	ldr	r3, [pc, #52]	@ (800d8a8 <std+0x58>)
 800d874:	6263      	str	r3, [r4, #36]	@ 0x24
 800d876:	4b0d      	ldr	r3, [pc, #52]	@ (800d8ac <std+0x5c>)
 800d878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d87a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b0 <std+0x60>)
 800d87c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d87e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b4 <std+0x64>)
 800d880:	6323      	str	r3, [r4, #48]	@ 0x30
 800d882:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b8 <std+0x68>)
 800d884:	6224      	str	r4, [r4, #32]
 800d886:	429c      	cmp	r4, r3
 800d888:	d006      	beq.n	800d898 <std+0x48>
 800d88a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d88e:	4294      	cmp	r4, r2
 800d890:	d002      	beq.n	800d898 <std+0x48>
 800d892:	33d0      	adds	r3, #208	@ 0xd0
 800d894:	429c      	cmp	r4, r3
 800d896:	d105      	bne.n	800d8a4 <std+0x54>
 800d898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8a0:	f000 ba66 	b.w	800dd70 <__retarget_lock_init_recursive>
 800d8a4:	bd10      	pop	{r4, pc}
 800d8a6:	bf00      	nop
 800d8a8:	0800db61 	.word	0x0800db61
 800d8ac:	0800db83 	.word	0x0800db83
 800d8b0:	0800dbbb 	.word	0x0800dbbb
 800d8b4:	0800dbdf 	.word	0x0800dbdf
 800d8b8:	2000108c 	.word	0x2000108c

0800d8bc <stdio_exit_handler>:
 800d8bc:	4a02      	ldr	r2, [pc, #8]	@ (800d8c8 <stdio_exit_handler+0xc>)
 800d8be:	4903      	ldr	r1, [pc, #12]	@ (800d8cc <stdio_exit_handler+0x10>)
 800d8c0:	4803      	ldr	r0, [pc, #12]	@ (800d8d0 <stdio_exit_handler+0x14>)
 800d8c2:	f000 b869 	b.w	800d998 <_fwalk_sglue>
 800d8c6:	bf00      	nop
 800d8c8:	20000020 	.word	0x20000020
 800d8cc:	0800e77d 	.word	0x0800e77d
 800d8d0:	20000030 	.word	0x20000030

0800d8d4 <cleanup_stdio>:
 800d8d4:	6841      	ldr	r1, [r0, #4]
 800d8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d908 <cleanup_stdio+0x34>)
 800d8d8:	4299      	cmp	r1, r3
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	4604      	mov	r4, r0
 800d8de:	d001      	beq.n	800d8e4 <cleanup_stdio+0x10>
 800d8e0:	f000 ff4c 	bl	800e77c <_fflush_r>
 800d8e4:	68a1      	ldr	r1, [r4, #8]
 800d8e6:	4b09      	ldr	r3, [pc, #36]	@ (800d90c <cleanup_stdio+0x38>)
 800d8e8:	4299      	cmp	r1, r3
 800d8ea:	d002      	beq.n	800d8f2 <cleanup_stdio+0x1e>
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f000 ff45 	bl	800e77c <_fflush_r>
 800d8f2:	68e1      	ldr	r1, [r4, #12]
 800d8f4:	4b06      	ldr	r3, [pc, #24]	@ (800d910 <cleanup_stdio+0x3c>)
 800d8f6:	4299      	cmp	r1, r3
 800d8f8:	d004      	beq.n	800d904 <cleanup_stdio+0x30>
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d900:	f000 bf3c 	b.w	800e77c <_fflush_r>
 800d904:	bd10      	pop	{r4, pc}
 800d906:	bf00      	nop
 800d908:	2000108c 	.word	0x2000108c
 800d90c:	200010f4 	.word	0x200010f4
 800d910:	2000115c 	.word	0x2000115c

0800d914 <global_stdio_init.part.0>:
 800d914:	b510      	push	{r4, lr}
 800d916:	4b0b      	ldr	r3, [pc, #44]	@ (800d944 <global_stdio_init.part.0+0x30>)
 800d918:	4c0b      	ldr	r4, [pc, #44]	@ (800d948 <global_stdio_init.part.0+0x34>)
 800d91a:	4a0c      	ldr	r2, [pc, #48]	@ (800d94c <global_stdio_init.part.0+0x38>)
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	4620      	mov	r0, r4
 800d920:	2200      	movs	r2, #0
 800d922:	2104      	movs	r1, #4
 800d924:	f7ff ff94 	bl	800d850 <std>
 800d928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d92c:	2201      	movs	r2, #1
 800d92e:	2109      	movs	r1, #9
 800d930:	f7ff ff8e 	bl	800d850 <std>
 800d934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d938:	2202      	movs	r2, #2
 800d93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d93e:	2112      	movs	r1, #18
 800d940:	f7ff bf86 	b.w	800d850 <std>
 800d944:	200011c4 	.word	0x200011c4
 800d948:	2000108c 	.word	0x2000108c
 800d94c:	0800d8bd 	.word	0x0800d8bd

0800d950 <__sfp_lock_acquire>:
 800d950:	4801      	ldr	r0, [pc, #4]	@ (800d958 <__sfp_lock_acquire+0x8>)
 800d952:	f000 ba0e 	b.w	800dd72 <__retarget_lock_acquire_recursive>
 800d956:	bf00      	nop
 800d958:	200011cd 	.word	0x200011cd

0800d95c <__sfp_lock_release>:
 800d95c:	4801      	ldr	r0, [pc, #4]	@ (800d964 <__sfp_lock_release+0x8>)
 800d95e:	f000 ba09 	b.w	800dd74 <__retarget_lock_release_recursive>
 800d962:	bf00      	nop
 800d964:	200011cd 	.word	0x200011cd

0800d968 <__sinit>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	4604      	mov	r4, r0
 800d96c:	f7ff fff0 	bl	800d950 <__sfp_lock_acquire>
 800d970:	6a23      	ldr	r3, [r4, #32]
 800d972:	b11b      	cbz	r3, 800d97c <__sinit+0x14>
 800d974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d978:	f7ff bff0 	b.w	800d95c <__sfp_lock_release>
 800d97c:	4b04      	ldr	r3, [pc, #16]	@ (800d990 <__sinit+0x28>)
 800d97e:	6223      	str	r3, [r4, #32]
 800d980:	4b04      	ldr	r3, [pc, #16]	@ (800d994 <__sinit+0x2c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1f5      	bne.n	800d974 <__sinit+0xc>
 800d988:	f7ff ffc4 	bl	800d914 <global_stdio_init.part.0>
 800d98c:	e7f2      	b.n	800d974 <__sinit+0xc>
 800d98e:	bf00      	nop
 800d990:	0800d8d5 	.word	0x0800d8d5
 800d994:	200011c4 	.word	0x200011c4

0800d998 <_fwalk_sglue>:
 800d998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d99c:	4607      	mov	r7, r0
 800d99e:	4688      	mov	r8, r1
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	2600      	movs	r6, #0
 800d9a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9a8:	f1b9 0901 	subs.w	r9, r9, #1
 800d9ac:	d505      	bpl.n	800d9ba <_fwalk_sglue+0x22>
 800d9ae:	6824      	ldr	r4, [r4, #0]
 800d9b0:	2c00      	cmp	r4, #0
 800d9b2:	d1f7      	bne.n	800d9a4 <_fwalk_sglue+0xc>
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ba:	89ab      	ldrh	r3, [r5, #12]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d907      	bls.n	800d9d0 <_fwalk_sglue+0x38>
 800d9c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	d003      	beq.n	800d9d0 <_fwalk_sglue+0x38>
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	47c0      	blx	r8
 800d9ce:	4306      	orrs	r6, r0
 800d9d0:	3568      	adds	r5, #104	@ 0x68
 800d9d2:	e7e9      	b.n	800d9a8 <_fwalk_sglue+0x10>

0800d9d4 <iprintf>:
 800d9d4:	b40f      	push	{r0, r1, r2, r3}
 800d9d6:	b507      	push	{r0, r1, r2, lr}
 800d9d8:	4906      	ldr	r1, [pc, #24]	@ (800d9f4 <iprintf+0x20>)
 800d9da:	ab04      	add	r3, sp, #16
 800d9dc:	6808      	ldr	r0, [r1, #0]
 800d9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9e2:	6881      	ldr	r1, [r0, #8]
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	f000 fba1 	bl	800e12c <_vfiprintf_r>
 800d9ea:	b003      	add	sp, #12
 800d9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9f0:	b004      	add	sp, #16
 800d9f2:	4770      	bx	lr
 800d9f4:	2000002c 	.word	0x2000002c

0800d9f8 <setvbuf>:
 800d9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9fc:	461d      	mov	r5, r3
 800d9fe:	4b57      	ldr	r3, [pc, #348]	@ (800db5c <setvbuf+0x164>)
 800da00:	681f      	ldr	r7, [r3, #0]
 800da02:	4604      	mov	r4, r0
 800da04:	460e      	mov	r6, r1
 800da06:	4690      	mov	r8, r2
 800da08:	b127      	cbz	r7, 800da14 <setvbuf+0x1c>
 800da0a:	6a3b      	ldr	r3, [r7, #32]
 800da0c:	b913      	cbnz	r3, 800da14 <setvbuf+0x1c>
 800da0e:	4638      	mov	r0, r7
 800da10:	f7ff ffaa 	bl	800d968 <__sinit>
 800da14:	f1b8 0f02 	cmp.w	r8, #2
 800da18:	d006      	beq.n	800da28 <setvbuf+0x30>
 800da1a:	f1b8 0f01 	cmp.w	r8, #1
 800da1e:	f200 809a 	bhi.w	800db56 <setvbuf+0x15e>
 800da22:	2d00      	cmp	r5, #0
 800da24:	f2c0 8097 	blt.w	800db56 <setvbuf+0x15e>
 800da28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da2a:	07d9      	lsls	r1, r3, #31
 800da2c:	d405      	bmi.n	800da3a <setvbuf+0x42>
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	059a      	lsls	r2, r3, #22
 800da32:	d402      	bmi.n	800da3a <setvbuf+0x42>
 800da34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da36:	f000 f99c 	bl	800dd72 <__retarget_lock_acquire_recursive>
 800da3a:	4621      	mov	r1, r4
 800da3c:	4638      	mov	r0, r7
 800da3e:	f000 fe9d 	bl	800e77c <_fflush_r>
 800da42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da44:	b141      	cbz	r1, 800da58 <setvbuf+0x60>
 800da46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da4a:	4299      	cmp	r1, r3
 800da4c:	d002      	beq.n	800da54 <setvbuf+0x5c>
 800da4e:	4638      	mov	r0, r7
 800da50:	f000 f9a0 	bl	800dd94 <_free_r>
 800da54:	2300      	movs	r3, #0
 800da56:	6363      	str	r3, [r4, #52]	@ 0x34
 800da58:	2300      	movs	r3, #0
 800da5a:	61a3      	str	r3, [r4, #24]
 800da5c:	6063      	str	r3, [r4, #4]
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	061b      	lsls	r3, r3, #24
 800da62:	d503      	bpl.n	800da6c <setvbuf+0x74>
 800da64:	6921      	ldr	r1, [r4, #16]
 800da66:	4638      	mov	r0, r7
 800da68:	f000 f994 	bl	800dd94 <_free_r>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	f1b8 0f02 	cmp.w	r8, #2
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	d061      	beq.n	800db42 <setvbuf+0x14a>
 800da7e:	ab01      	add	r3, sp, #4
 800da80:	466a      	mov	r2, sp
 800da82:	4621      	mov	r1, r4
 800da84:	4638      	mov	r0, r7
 800da86:	f000 fea1 	bl	800e7cc <__swhatbuf_r>
 800da8a:	89a3      	ldrh	r3, [r4, #12]
 800da8c:	4318      	orrs	r0, r3
 800da8e:	81a0      	strh	r0, [r4, #12]
 800da90:	bb2d      	cbnz	r5, 800dade <setvbuf+0xe6>
 800da92:	9d00      	ldr	r5, [sp, #0]
 800da94:	4628      	mov	r0, r5
 800da96:	f7ff fe1d 	bl	800d6d4 <malloc>
 800da9a:	4606      	mov	r6, r0
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d152      	bne.n	800db46 <setvbuf+0x14e>
 800daa0:	f8dd 9000 	ldr.w	r9, [sp]
 800daa4:	45a9      	cmp	r9, r5
 800daa6:	d140      	bne.n	800db2a <setvbuf+0x132>
 800daa8:	f04f 35ff 	mov.w	r5, #4294967295
 800daac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dab0:	f043 0202 	orr.w	r2, r3, #2
 800dab4:	81a2      	strh	r2, [r4, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	60a2      	str	r2, [r4, #8]
 800daba:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800dabe:	6022      	str	r2, [r4, #0]
 800dac0:	6122      	str	r2, [r4, #16]
 800dac2:	2201      	movs	r2, #1
 800dac4:	6162      	str	r2, [r4, #20]
 800dac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dac8:	07d6      	lsls	r6, r2, #31
 800daca:	d404      	bmi.n	800dad6 <setvbuf+0xde>
 800dacc:	0598      	lsls	r0, r3, #22
 800dace:	d402      	bmi.n	800dad6 <setvbuf+0xde>
 800dad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dad2:	f000 f94f 	bl	800dd74 <__retarget_lock_release_recursive>
 800dad6:	4628      	mov	r0, r5
 800dad8:	b003      	add	sp, #12
 800dada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dade:	2e00      	cmp	r6, #0
 800dae0:	d0d8      	beq.n	800da94 <setvbuf+0x9c>
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	b913      	cbnz	r3, 800daec <setvbuf+0xf4>
 800dae6:	4638      	mov	r0, r7
 800dae8:	f7ff ff3e 	bl	800d968 <__sinit>
 800daec:	f1b8 0f01 	cmp.w	r8, #1
 800daf0:	bf08      	it	eq
 800daf2:	89a3      	ldrheq	r3, [r4, #12]
 800daf4:	6026      	str	r6, [r4, #0]
 800daf6:	bf04      	itt	eq
 800daf8:	f043 0301 	orreq.w	r3, r3, #1
 800dafc:	81a3      	strheq	r3, [r4, #12]
 800dafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db02:	f013 0208 	ands.w	r2, r3, #8
 800db06:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800db0a:	d01e      	beq.n	800db4a <setvbuf+0x152>
 800db0c:	07d9      	lsls	r1, r3, #31
 800db0e:	bf41      	itttt	mi
 800db10:	2200      	movmi	r2, #0
 800db12:	426d      	negmi	r5, r5
 800db14:	60a2      	strmi	r2, [r4, #8]
 800db16:	61a5      	strmi	r5, [r4, #24]
 800db18:	bf58      	it	pl
 800db1a:	60a5      	strpl	r5, [r4, #8]
 800db1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db1e:	07d2      	lsls	r2, r2, #31
 800db20:	d401      	bmi.n	800db26 <setvbuf+0x12e>
 800db22:	059b      	lsls	r3, r3, #22
 800db24:	d513      	bpl.n	800db4e <setvbuf+0x156>
 800db26:	2500      	movs	r5, #0
 800db28:	e7d5      	b.n	800dad6 <setvbuf+0xde>
 800db2a:	4648      	mov	r0, r9
 800db2c:	f7ff fdd2 	bl	800d6d4 <malloc>
 800db30:	4606      	mov	r6, r0
 800db32:	2800      	cmp	r0, #0
 800db34:	d0b8      	beq.n	800daa8 <setvbuf+0xb0>
 800db36:	89a3      	ldrh	r3, [r4, #12]
 800db38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db3c:	81a3      	strh	r3, [r4, #12]
 800db3e:	464d      	mov	r5, r9
 800db40:	e7cf      	b.n	800dae2 <setvbuf+0xea>
 800db42:	2500      	movs	r5, #0
 800db44:	e7b2      	b.n	800daac <setvbuf+0xb4>
 800db46:	46a9      	mov	r9, r5
 800db48:	e7f5      	b.n	800db36 <setvbuf+0x13e>
 800db4a:	60a2      	str	r2, [r4, #8]
 800db4c:	e7e6      	b.n	800db1c <setvbuf+0x124>
 800db4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db50:	f000 f910 	bl	800dd74 <__retarget_lock_release_recursive>
 800db54:	e7e7      	b.n	800db26 <setvbuf+0x12e>
 800db56:	f04f 35ff 	mov.w	r5, #4294967295
 800db5a:	e7bc      	b.n	800dad6 <setvbuf+0xde>
 800db5c:	2000002c 	.word	0x2000002c

0800db60 <__sread>:
 800db60:	b510      	push	{r4, lr}
 800db62:	460c      	mov	r4, r1
 800db64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db68:	f000 f8a4 	bl	800dcb4 <_read_r>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	bfab      	itete	ge
 800db70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db72:	89a3      	ldrhlt	r3, [r4, #12]
 800db74:	181b      	addge	r3, r3, r0
 800db76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db7a:	bfac      	ite	ge
 800db7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db7e:	81a3      	strhlt	r3, [r4, #12]
 800db80:	bd10      	pop	{r4, pc}

0800db82 <__swrite>:
 800db82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db86:	461f      	mov	r7, r3
 800db88:	898b      	ldrh	r3, [r1, #12]
 800db8a:	05db      	lsls	r3, r3, #23
 800db8c:	4605      	mov	r5, r0
 800db8e:	460c      	mov	r4, r1
 800db90:	4616      	mov	r6, r2
 800db92:	d505      	bpl.n	800dba0 <__swrite+0x1e>
 800db94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db98:	2302      	movs	r3, #2
 800db9a:	2200      	movs	r2, #0
 800db9c:	f000 f878 	bl	800dc90 <_lseek_r>
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbaa:	81a3      	strh	r3, [r4, #12]
 800dbac:	4632      	mov	r2, r6
 800dbae:	463b      	mov	r3, r7
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb6:	f000 b89f 	b.w	800dcf8 <_write_r>

0800dbba <__sseek>:
 800dbba:	b510      	push	{r4, lr}
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc2:	f000 f865 	bl	800dc90 <_lseek_r>
 800dbc6:	1c43      	adds	r3, r0, #1
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	bf15      	itete	ne
 800dbcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbd6:	81a3      	strheq	r3, [r4, #12]
 800dbd8:	bf18      	it	ne
 800dbda:	81a3      	strhne	r3, [r4, #12]
 800dbdc:	bd10      	pop	{r4, pc}

0800dbde <__sclose>:
 800dbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe2:	f000 b845 	b.w	800dc70 <_close_r>

0800dbe6 <_vsniprintf_r>:
 800dbe6:	b530      	push	{r4, r5, lr}
 800dbe8:	4614      	mov	r4, r2
 800dbea:	2c00      	cmp	r4, #0
 800dbec:	b09b      	sub	sp, #108	@ 0x6c
 800dbee:	4605      	mov	r5, r0
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	da05      	bge.n	800dc00 <_vsniprintf_r+0x1a>
 800dbf4:	238b      	movs	r3, #139	@ 0x8b
 800dbf6:	6003      	str	r3, [r0, #0]
 800dbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbfc:	b01b      	add	sp, #108	@ 0x6c
 800dbfe:	bd30      	pop	{r4, r5, pc}
 800dc00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc04:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dc08:	f04f 0300 	mov.w	r3, #0
 800dc0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc0e:	bf14      	ite	ne
 800dc10:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc14:	4623      	moveq	r3, r4
 800dc16:	9302      	str	r3, [sp, #8]
 800dc18:	9305      	str	r3, [sp, #20]
 800dc1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc1e:	9100      	str	r1, [sp, #0]
 800dc20:	9104      	str	r1, [sp, #16]
 800dc22:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dc26:	4669      	mov	r1, sp
 800dc28:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dc2a:	f000 f959 	bl	800dee0 <_svfiprintf_r>
 800dc2e:	1c43      	adds	r3, r0, #1
 800dc30:	bfbc      	itt	lt
 800dc32:	238b      	movlt	r3, #139	@ 0x8b
 800dc34:	602b      	strlt	r3, [r5, #0]
 800dc36:	2c00      	cmp	r4, #0
 800dc38:	d0e0      	beq.n	800dbfc <_vsniprintf_r+0x16>
 800dc3a:	9b00      	ldr	r3, [sp, #0]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	e7dc      	b.n	800dbfc <_vsniprintf_r+0x16>
	...

0800dc44 <vsniprintf>:
 800dc44:	b507      	push	{r0, r1, r2, lr}
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	460a      	mov	r2, r1
 800dc4c:	4601      	mov	r1, r0
 800dc4e:	4803      	ldr	r0, [pc, #12]	@ (800dc5c <vsniprintf+0x18>)
 800dc50:	6800      	ldr	r0, [r0, #0]
 800dc52:	f7ff ffc8 	bl	800dbe6 <_vsniprintf_r>
 800dc56:	b003      	add	sp, #12
 800dc58:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc5c:	2000002c 	.word	0x2000002c

0800dc60 <memset>:
 800dc60:	4402      	add	r2, r0
 800dc62:	4603      	mov	r3, r0
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d100      	bne.n	800dc6a <memset+0xa>
 800dc68:	4770      	bx	lr
 800dc6a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc6e:	e7f9      	b.n	800dc64 <memset+0x4>

0800dc70 <_close_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4d06      	ldr	r5, [pc, #24]	@ (800dc8c <_close_r+0x1c>)
 800dc74:	2300      	movs	r3, #0
 800dc76:	4604      	mov	r4, r0
 800dc78:	4608      	mov	r0, r1
 800dc7a:	602b      	str	r3, [r5, #0]
 800dc7c:	f7f6 fdb8 	bl	80047f0 <_close>
 800dc80:	1c43      	adds	r3, r0, #1
 800dc82:	d102      	bne.n	800dc8a <_close_r+0x1a>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	b103      	cbz	r3, 800dc8a <_close_r+0x1a>
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	bd38      	pop	{r3, r4, r5, pc}
 800dc8c:	200011c8 	.word	0x200011c8

0800dc90 <_lseek_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4d07      	ldr	r5, [pc, #28]	@ (800dcb0 <_lseek_r+0x20>)
 800dc94:	4604      	mov	r4, r0
 800dc96:	4608      	mov	r0, r1
 800dc98:	4611      	mov	r1, r2
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	602a      	str	r2, [r5, #0]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	f7f6 fdcd 	bl	800483e <_lseek>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d102      	bne.n	800dcae <_lseek_r+0x1e>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	b103      	cbz	r3, 800dcae <_lseek_r+0x1e>
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	200011c8 	.word	0x200011c8

0800dcb4 <_read_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d07      	ldr	r5, [pc, #28]	@ (800dcd4 <_read_r+0x20>)
 800dcb8:	4604      	mov	r4, r0
 800dcba:	4608      	mov	r0, r1
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	602a      	str	r2, [r5, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f7f6 fd77 	bl	80047b6 <_read>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_read_r+0x1e>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_read_r+0x1e>
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	200011c8 	.word	0x200011c8

0800dcd8 <_sbrk_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	4d06      	ldr	r5, [pc, #24]	@ (800dcf4 <_sbrk_r+0x1c>)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4604      	mov	r4, r0
 800dce0:	4608      	mov	r0, r1
 800dce2:	602b      	str	r3, [r5, #0]
 800dce4:	f7f6 fdb8 	bl	8004858 <_sbrk>
 800dce8:	1c43      	adds	r3, r0, #1
 800dcea:	d102      	bne.n	800dcf2 <_sbrk_r+0x1a>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	b103      	cbz	r3, 800dcf2 <_sbrk_r+0x1a>
 800dcf0:	6023      	str	r3, [r4, #0]
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
 800dcf4:	200011c8 	.word	0x200011c8

0800dcf8 <_write_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d07      	ldr	r5, [pc, #28]	@ (800dd18 <_write_r+0x20>)
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	4608      	mov	r0, r1
 800dd00:	4611      	mov	r1, r2
 800dd02:	2200      	movs	r2, #0
 800dd04:	602a      	str	r2, [r5, #0]
 800dd06:	461a      	mov	r2, r3
 800dd08:	f7f4 f8d4 	bl	8001eb4 <_write>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d102      	bne.n	800dd16 <_write_r+0x1e>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	b103      	cbz	r3, 800dd16 <_write_r+0x1e>
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	200011c8 	.word	0x200011c8

0800dd1c <__errno>:
 800dd1c:	4b01      	ldr	r3, [pc, #4]	@ (800dd24 <__errno+0x8>)
 800dd1e:	6818      	ldr	r0, [r3, #0]
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	2000002c 	.word	0x2000002c

0800dd28 <__libc_init_array>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4d0d      	ldr	r5, [pc, #52]	@ (800dd60 <__libc_init_array+0x38>)
 800dd2c:	4c0d      	ldr	r4, [pc, #52]	@ (800dd64 <__libc_init_array+0x3c>)
 800dd2e:	1b64      	subs	r4, r4, r5
 800dd30:	10a4      	asrs	r4, r4, #2
 800dd32:	2600      	movs	r6, #0
 800dd34:	42a6      	cmp	r6, r4
 800dd36:	d109      	bne.n	800dd4c <__libc_init_array+0x24>
 800dd38:	4d0b      	ldr	r5, [pc, #44]	@ (800dd68 <__libc_init_array+0x40>)
 800dd3a:	4c0c      	ldr	r4, [pc, #48]	@ (800dd6c <__libc_init_array+0x44>)
 800dd3c:	f000 feae 	bl	800ea9c <_init>
 800dd40:	1b64      	subs	r4, r4, r5
 800dd42:	10a4      	asrs	r4, r4, #2
 800dd44:	2600      	movs	r6, #0
 800dd46:	42a6      	cmp	r6, r4
 800dd48:	d105      	bne.n	800dd56 <__libc_init_array+0x2e>
 800dd4a:	bd70      	pop	{r4, r5, r6, pc}
 800dd4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd50:	4798      	blx	r3
 800dd52:	3601      	adds	r6, #1
 800dd54:	e7ee      	b.n	800dd34 <__libc_init_array+0xc>
 800dd56:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd5a:	4798      	blx	r3
 800dd5c:	3601      	adds	r6, #1
 800dd5e:	e7f2      	b.n	800dd46 <__libc_init_array+0x1e>
 800dd60:	0800f1c4 	.word	0x0800f1c4
 800dd64:	0800f1c4 	.word	0x0800f1c4
 800dd68:	0800f1c4 	.word	0x0800f1c4
 800dd6c:	0800f1c8 	.word	0x0800f1c8

0800dd70 <__retarget_lock_init_recursive>:
 800dd70:	4770      	bx	lr

0800dd72 <__retarget_lock_acquire_recursive>:
 800dd72:	4770      	bx	lr

0800dd74 <__retarget_lock_release_recursive>:
 800dd74:	4770      	bx	lr

0800dd76 <memcpy>:
 800dd76:	440a      	add	r2, r1
 800dd78:	4291      	cmp	r1, r2
 800dd7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd7e:	d100      	bne.n	800dd82 <memcpy+0xc>
 800dd80:	4770      	bx	lr
 800dd82:	b510      	push	{r4, lr}
 800dd84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd8c:	4291      	cmp	r1, r2
 800dd8e:	d1f9      	bne.n	800dd84 <memcpy+0xe>
 800dd90:	bd10      	pop	{r4, pc}
	...

0800dd94 <_free_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	4605      	mov	r5, r0
 800dd98:	2900      	cmp	r1, #0
 800dd9a:	d041      	beq.n	800de20 <_free_r+0x8c>
 800dd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dda0:	1f0c      	subs	r4, r1, #4
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	bfb8      	it	lt
 800dda6:	18e4      	addlt	r4, r4, r3
 800dda8:	f7ff fd46 	bl	800d838 <__malloc_lock>
 800ddac:	4a1d      	ldr	r2, [pc, #116]	@ (800de24 <_free_r+0x90>)
 800ddae:	6813      	ldr	r3, [r2, #0]
 800ddb0:	b933      	cbnz	r3, 800ddc0 <_free_r+0x2c>
 800ddb2:	6063      	str	r3, [r4, #4]
 800ddb4:	6014      	str	r4, [r2, #0]
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddbc:	f7ff bd42 	b.w	800d844 <__malloc_unlock>
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	d908      	bls.n	800ddd6 <_free_r+0x42>
 800ddc4:	6820      	ldr	r0, [r4, #0]
 800ddc6:	1821      	adds	r1, r4, r0
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	bf01      	itttt	eq
 800ddcc:	6819      	ldreq	r1, [r3, #0]
 800ddce:	685b      	ldreq	r3, [r3, #4]
 800ddd0:	1809      	addeq	r1, r1, r0
 800ddd2:	6021      	streq	r1, [r4, #0]
 800ddd4:	e7ed      	b.n	800ddb2 <_free_r+0x1e>
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	b10b      	cbz	r3, 800dde0 <_free_r+0x4c>
 800dddc:	42a3      	cmp	r3, r4
 800ddde:	d9fa      	bls.n	800ddd6 <_free_r+0x42>
 800dde0:	6811      	ldr	r1, [r2, #0]
 800dde2:	1850      	adds	r0, r2, r1
 800dde4:	42a0      	cmp	r0, r4
 800dde6:	d10b      	bne.n	800de00 <_free_r+0x6c>
 800dde8:	6820      	ldr	r0, [r4, #0]
 800ddea:	4401      	add	r1, r0
 800ddec:	1850      	adds	r0, r2, r1
 800ddee:	4283      	cmp	r3, r0
 800ddf0:	6011      	str	r1, [r2, #0]
 800ddf2:	d1e0      	bne.n	800ddb6 <_free_r+0x22>
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	6053      	str	r3, [r2, #4]
 800ddfa:	4408      	add	r0, r1
 800ddfc:	6010      	str	r0, [r2, #0]
 800ddfe:	e7da      	b.n	800ddb6 <_free_r+0x22>
 800de00:	d902      	bls.n	800de08 <_free_r+0x74>
 800de02:	230c      	movs	r3, #12
 800de04:	602b      	str	r3, [r5, #0]
 800de06:	e7d6      	b.n	800ddb6 <_free_r+0x22>
 800de08:	6820      	ldr	r0, [r4, #0]
 800de0a:	1821      	adds	r1, r4, r0
 800de0c:	428b      	cmp	r3, r1
 800de0e:	bf04      	itt	eq
 800de10:	6819      	ldreq	r1, [r3, #0]
 800de12:	685b      	ldreq	r3, [r3, #4]
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	bf04      	itt	eq
 800de18:	1809      	addeq	r1, r1, r0
 800de1a:	6021      	streq	r1, [r4, #0]
 800de1c:	6054      	str	r4, [r2, #4]
 800de1e:	e7ca      	b.n	800ddb6 <_free_r+0x22>
 800de20:	bd38      	pop	{r3, r4, r5, pc}
 800de22:	bf00      	nop
 800de24:	20001088 	.word	0x20001088

0800de28 <__ssputs_r>:
 800de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	688e      	ldr	r6, [r1, #8]
 800de2e:	461f      	mov	r7, r3
 800de30:	42be      	cmp	r6, r7
 800de32:	680b      	ldr	r3, [r1, #0]
 800de34:	4682      	mov	sl, r0
 800de36:	460c      	mov	r4, r1
 800de38:	4690      	mov	r8, r2
 800de3a:	d82d      	bhi.n	800de98 <__ssputs_r+0x70>
 800de3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de44:	d026      	beq.n	800de94 <__ssputs_r+0x6c>
 800de46:	6965      	ldr	r5, [r4, #20]
 800de48:	6909      	ldr	r1, [r1, #16]
 800de4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de4e:	eba3 0901 	sub.w	r9, r3, r1
 800de52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de56:	1c7b      	adds	r3, r7, #1
 800de58:	444b      	add	r3, r9
 800de5a:	106d      	asrs	r5, r5, #1
 800de5c:	429d      	cmp	r5, r3
 800de5e:	bf38      	it	cc
 800de60:	461d      	movcc	r5, r3
 800de62:	0553      	lsls	r3, r2, #21
 800de64:	d527      	bpl.n	800deb6 <__ssputs_r+0x8e>
 800de66:	4629      	mov	r1, r5
 800de68:	f7ff fc66 	bl	800d738 <_malloc_r>
 800de6c:	4606      	mov	r6, r0
 800de6e:	b360      	cbz	r0, 800deca <__ssputs_r+0xa2>
 800de70:	6921      	ldr	r1, [r4, #16]
 800de72:	464a      	mov	r2, r9
 800de74:	f7ff ff7f 	bl	800dd76 <memcpy>
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de82:	81a3      	strh	r3, [r4, #12]
 800de84:	6126      	str	r6, [r4, #16]
 800de86:	6165      	str	r5, [r4, #20]
 800de88:	444e      	add	r6, r9
 800de8a:	eba5 0509 	sub.w	r5, r5, r9
 800de8e:	6026      	str	r6, [r4, #0]
 800de90:	60a5      	str	r5, [r4, #8]
 800de92:	463e      	mov	r6, r7
 800de94:	42be      	cmp	r6, r7
 800de96:	d900      	bls.n	800de9a <__ssputs_r+0x72>
 800de98:	463e      	mov	r6, r7
 800de9a:	6820      	ldr	r0, [r4, #0]
 800de9c:	4632      	mov	r2, r6
 800de9e:	4641      	mov	r1, r8
 800dea0:	f000 fd8a 	bl	800e9b8 <memmove>
 800dea4:	68a3      	ldr	r3, [r4, #8]
 800dea6:	1b9b      	subs	r3, r3, r6
 800dea8:	60a3      	str	r3, [r4, #8]
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	4433      	add	r3, r6
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	2000      	movs	r0, #0
 800deb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb6:	462a      	mov	r2, r5
 800deb8:	f000 fdba 	bl	800ea30 <_realloc_r>
 800debc:	4606      	mov	r6, r0
 800debe:	2800      	cmp	r0, #0
 800dec0:	d1e0      	bne.n	800de84 <__ssputs_r+0x5c>
 800dec2:	6921      	ldr	r1, [r4, #16]
 800dec4:	4650      	mov	r0, sl
 800dec6:	f7ff ff65 	bl	800dd94 <_free_r>
 800deca:	230c      	movs	r3, #12
 800decc:	f8ca 3000 	str.w	r3, [sl]
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	e7e9      	b.n	800deb2 <__ssputs_r+0x8a>
	...

0800dee0 <_svfiprintf_r>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	4698      	mov	r8, r3
 800dee6:	898b      	ldrh	r3, [r1, #12]
 800dee8:	061b      	lsls	r3, r3, #24
 800deea:	b09d      	sub	sp, #116	@ 0x74
 800deec:	4607      	mov	r7, r0
 800deee:	460d      	mov	r5, r1
 800def0:	4614      	mov	r4, r2
 800def2:	d510      	bpl.n	800df16 <_svfiprintf_r+0x36>
 800def4:	690b      	ldr	r3, [r1, #16]
 800def6:	b973      	cbnz	r3, 800df16 <_svfiprintf_r+0x36>
 800def8:	2140      	movs	r1, #64	@ 0x40
 800defa:	f7ff fc1d 	bl	800d738 <_malloc_r>
 800defe:	6028      	str	r0, [r5, #0]
 800df00:	6128      	str	r0, [r5, #16]
 800df02:	b930      	cbnz	r0, 800df12 <_svfiprintf_r+0x32>
 800df04:	230c      	movs	r3, #12
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	f04f 30ff 	mov.w	r0, #4294967295
 800df0c:	b01d      	add	sp, #116	@ 0x74
 800df0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df12:	2340      	movs	r3, #64	@ 0x40
 800df14:	616b      	str	r3, [r5, #20]
 800df16:	2300      	movs	r3, #0
 800df18:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1a:	2320      	movs	r3, #32
 800df1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df20:	f8cd 800c 	str.w	r8, [sp, #12]
 800df24:	2330      	movs	r3, #48	@ 0x30
 800df26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e0c4 <_svfiprintf_r+0x1e4>
 800df2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df2e:	f04f 0901 	mov.w	r9, #1
 800df32:	4623      	mov	r3, r4
 800df34:	469a      	mov	sl, r3
 800df36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df3a:	b10a      	cbz	r2, 800df40 <_svfiprintf_r+0x60>
 800df3c:	2a25      	cmp	r2, #37	@ 0x25
 800df3e:	d1f9      	bne.n	800df34 <_svfiprintf_r+0x54>
 800df40:	ebba 0b04 	subs.w	fp, sl, r4
 800df44:	d00b      	beq.n	800df5e <_svfiprintf_r+0x7e>
 800df46:	465b      	mov	r3, fp
 800df48:	4622      	mov	r2, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	4638      	mov	r0, r7
 800df4e:	f7ff ff6b 	bl	800de28 <__ssputs_r>
 800df52:	3001      	adds	r0, #1
 800df54:	f000 80a7 	beq.w	800e0a6 <_svfiprintf_r+0x1c6>
 800df58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df5a:	445a      	add	r2, fp
 800df5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800df5e:	f89a 3000 	ldrb.w	r3, [sl]
 800df62:	2b00      	cmp	r3, #0
 800df64:	f000 809f 	beq.w	800e0a6 <_svfiprintf_r+0x1c6>
 800df68:	2300      	movs	r3, #0
 800df6a:	f04f 32ff 	mov.w	r2, #4294967295
 800df6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df72:	f10a 0a01 	add.w	sl, sl, #1
 800df76:	9304      	str	r3, [sp, #16]
 800df78:	9307      	str	r3, [sp, #28]
 800df7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800df80:	4654      	mov	r4, sl
 800df82:	2205      	movs	r2, #5
 800df84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df88:	484e      	ldr	r0, [pc, #312]	@ (800e0c4 <_svfiprintf_r+0x1e4>)
 800df8a:	f7f2 f921 	bl	80001d0 <memchr>
 800df8e:	9a04      	ldr	r2, [sp, #16]
 800df90:	b9d8      	cbnz	r0, 800dfca <_svfiprintf_r+0xea>
 800df92:	06d0      	lsls	r0, r2, #27
 800df94:	bf44      	itt	mi
 800df96:	2320      	movmi	r3, #32
 800df98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df9c:	0711      	lsls	r1, r2, #28
 800df9e:	bf44      	itt	mi
 800dfa0:	232b      	movmi	r3, #43	@ 0x2b
 800dfa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfa6:	f89a 3000 	ldrb.w	r3, [sl]
 800dfaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfac:	d015      	beq.n	800dfda <_svfiprintf_r+0xfa>
 800dfae:	9a07      	ldr	r2, [sp, #28]
 800dfb0:	4654      	mov	r4, sl
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	f04f 0c0a 	mov.w	ip, #10
 800dfb8:	4621      	mov	r1, r4
 800dfba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfbe:	3b30      	subs	r3, #48	@ 0x30
 800dfc0:	2b09      	cmp	r3, #9
 800dfc2:	d94b      	bls.n	800e05c <_svfiprintf_r+0x17c>
 800dfc4:	b1b0      	cbz	r0, 800dff4 <_svfiprintf_r+0x114>
 800dfc6:	9207      	str	r2, [sp, #28]
 800dfc8:	e014      	b.n	800dff4 <_svfiprintf_r+0x114>
 800dfca:	eba0 0308 	sub.w	r3, r0, r8
 800dfce:	fa09 f303 	lsl.w	r3, r9, r3
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	9304      	str	r3, [sp, #16]
 800dfd6:	46a2      	mov	sl, r4
 800dfd8:	e7d2      	b.n	800df80 <_svfiprintf_r+0xa0>
 800dfda:	9b03      	ldr	r3, [sp, #12]
 800dfdc:	1d19      	adds	r1, r3, #4
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	9103      	str	r1, [sp, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	bfbb      	ittet	lt
 800dfe6:	425b      	neglt	r3, r3
 800dfe8:	f042 0202 	orrlt.w	r2, r2, #2
 800dfec:	9307      	strge	r3, [sp, #28]
 800dfee:	9307      	strlt	r3, [sp, #28]
 800dff0:	bfb8      	it	lt
 800dff2:	9204      	strlt	r2, [sp, #16]
 800dff4:	7823      	ldrb	r3, [r4, #0]
 800dff6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dff8:	d10a      	bne.n	800e010 <_svfiprintf_r+0x130>
 800dffa:	7863      	ldrb	r3, [r4, #1]
 800dffc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dffe:	d132      	bne.n	800e066 <_svfiprintf_r+0x186>
 800e000:	9b03      	ldr	r3, [sp, #12]
 800e002:	1d1a      	adds	r2, r3, #4
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	9203      	str	r2, [sp, #12]
 800e008:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e00c:	3402      	adds	r4, #2
 800e00e:	9305      	str	r3, [sp, #20]
 800e010:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0d4 <_svfiprintf_r+0x1f4>
 800e014:	7821      	ldrb	r1, [r4, #0]
 800e016:	2203      	movs	r2, #3
 800e018:	4650      	mov	r0, sl
 800e01a:	f7f2 f8d9 	bl	80001d0 <memchr>
 800e01e:	b138      	cbz	r0, 800e030 <_svfiprintf_r+0x150>
 800e020:	9b04      	ldr	r3, [sp, #16]
 800e022:	eba0 000a 	sub.w	r0, r0, sl
 800e026:	2240      	movs	r2, #64	@ 0x40
 800e028:	4082      	lsls	r2, r0
 800e02a:	4313      	orrs	r3, r2
 800e02c:	3401      	adds	r4, #1
 800e02e:	9304      	str	r3, [sp, #16]
 800e030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e034:	4824      	ldr	r0, [pc, #144]	@ (800e0c8 <_svfiprintf_r+0x1e8>)
 800e036:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e03a:	2206      	movs	r2, #6
 800e03c:	f7f2 f8c8 	bl	80001d0 <memchr>
 800e040:	2800      	cmp	r0, #0
 800e042:	d036      	beq.n	800e0b2 <_svfiprintf_r+0x1d2>
 800e044:	4b21      	ldr	r3, [pc, #132]	@ (800e0cc <_svfiprintf_r+0x1ec>)
 800e046:	bb1b      	cbnz	r3, 800e090 <_svfiprintf_r+0x1b0>
 800e048:	9b03      	ldr	r3, [sp, #12]
 800e04a:	3307      	adds	r3, #7
 800e04c:	f023 0307 	bic.w	r3, r3, #7
 800e050:	3308      	adds	r3, #8
 800e052:	9303      	str	r3, [sp, #12]
 800e054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e056:	4433      	add	r3, r6
 800e058:	9309      	str	r3, [sp, #36]	@ 0x24
 800e05a:	e76a      	b.n	800df32 <_svfiprintf_r+0x52>
 800e05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e060:	460c      	mov	r4, r1
 800e062:	2001      	movs	r0, #1
 800e064:	e7a8      	b.n	800dfb8 <_svfiprintf_r+0xd8>
 800e066:	2300      	movs	r3, #0
 800e068:	3401      	adds	r4, #1
 800e06a:	9305      	str	r3, [sp, #20]
 800e06c:	4619      	mov	r1, r3
 800e06e:	f04f 0c0a 	mov.w	ip, #10
 800e072:	4620      	mov	r0, r4
 800e074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e078:	3a30      	subs	r2, #48	@ 0x30
 800e07a:	2a09      	cmp	r2, #9
 800e07c:	d903      	bls.n	800e086 <_svfiprintf_r+0x1a6>
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d0c6      	beq.n	800e010 <_svfiprintf_r+0x130>
 800e082:	9105      	str	r1, [sp, #20]
 800e084:	e7c4      	b.n	800e010 <_svfiprintf_r+0x130>
 800e086:	fb0c 2101 	mla	r1, ip, r1, r2
 800e08a:	4604      	mov	r4, r0
 800e08c:	2301      	movs	r3, #1
 800e08e:	e7f0      	b.n	800e072 <_svfiprintf_r+0x192>
 800e090:	ab03      	add	r3, sp, #12
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	462a      	mov	r2, r5
 800e096:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d0 <_svfiprintf_r+0x1f0>)
 800e098:	a904      	add	r1, sp, #16
 800e09a:	4638      	mov	r0, r7
 800e09c:	f3af 8000 	nop.w
 800e0a0:	1c42      	adds	r2, r0, #1
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	d1d6      	bne.n	800e054 <_svfiprintf_r+0x174>
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	065b      	lsls	r3, r3, #25
 800e0aa:	f53f af2d 	bmi.w	800df08 <_svfiprintf_r+0x28>
 800e0ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0b0:	e72c      	b.n	800df0c <_svfiprintf_r+0x2c>
 800e0b2:	ab03      	add	r3, sp, #12
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	462a      	mov	r2, r5
 800e0b8:	4b05      	ldr	r3, [pc, #20]	@ (800e0d0 <_svfiprintf_r+0x1f0>)
 800e0ba:	a904      	add	r1, sp, #16
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f000 f9bb 	bl	800e438 <_printf_i>
 800e0c2:	e7ed      	b.n	800e0a0 <_svfiprintf_r+0x1c0>
 800e0c4:	0800f188 	.word	0x0800f188
 800e0c8:	0800f192 	.word	0x0800f192
 800e0cc:	00000000 	.word	0x00000000
 800e0d0:	0800de29 	.word	0x0800de29
 800e0d4:	0800f18e 	.word	0x0800f18e

0800e0d8 <__sfputc_r>:
 800e0d8:	6893      	ldr	r3, [r2, #8]
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	b410      	push	{r4}
 800e0e0:	6093      	str	r3, [r2, #8]
 800e0e2:	da08      	bge.n	800e0f6 <__sfputc_r+0x1e>
 800e0e4:	6994      	ldr	r4, [r2, #24]
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	db01      	blt.n	800e0ee <__sfputc_r+0x16>
 800e0ea:	290a      	cmp	r1, #10
 800e0ec:	d103      	bne.n	800e0f6 <__sfputc_r+0x1e>
 800e0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0f2:	f000 bbcd 	b.w	800e890 <__swbuf_r>
 800e0f6:	6813      	ldr	r3, [r2, #0]
 800e0f8:	1c58      	adds	r0, r3, #1
 800e0fa:	6010      	str	r0, [r2, #0]
 800e0fc:	7019      	strb	r1, [r3, #0]
 800e0fe:	4608      	mov	r0, r1
 800e100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <__sfputs_r>:
 800e106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e108:	4606      	mov	r6, r0
 800e10a:	460f      	mov	r7, r1
 800e10c:	4614      	mov	r4, r2
 800e10e:	18d5      	adds	r5, r2, r3
 800e110:	42ac      	cmp	r4, r5
 800e112:	d101      	bne.n	800e118 <__sfputs_r+0x12>
 800e114:	2000      	movs	r0, #0
 800e116:	e007      	b.n	800e128 <__sfputs_r+0x22>
 800e118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11c:	463a      	mov	r2, r7
 800e11e:	4630      	mov	r0, r6
 800e120:	f7ff ffda 	bl	800e0d8 <__sfputc_r>
 800e124:	1c43      	adds	r3, r0, #1
 800e126:	d1f3      	bne.n	800e110 <__sfputs_r+0xa>
 800e128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e12c <_vfiprintf_r>:
 800e12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e130:	460d      	mov	r5, r1
 800e132:	b09d      	sub	sp, #116	@ 0x74
 800e134:	4614      	mov	r4, r2
 800e136:	4698      	mov	r8, r3
 800e138:	4606      	mov	r6, r0
 800e13a:	b118      	cbz	r0, 800e144 <_vfiprintf_r+0x18>
 800e13c:	6a03      	ldr	r3, [r0, #32]
 800e13e:	b90b      	cbnz	r3, 800e144 <_vfiprintf_r+0x18>
 800e140:	f7ff fc12 	bl	800d968 <__sinit>
 800e144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e146:	07d9      	lsls	r1, r3, #31
 800e148:	d405      	bmi.n	800e156 <_vfiprintf_r+0x2a>
 800e14a:	89ab      	ldrh	r3, [r5, #12]
 800e14c:	059a      	lsls	r2, r3, #22
 800e14e:	d402      	bmi.n	800e156 <_vfiprintf_r+0x2a>
 800e150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e152:	f7ff fe0e 	bl	800dd72 <__retarget_lock_acquire_recursive>
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	071b      	lsls	r3, r3, #28
 800e15a:	d501      	bpl.n	800e160 <_vfiprintf_r+0x34>
 800e15c:	692b      	ldr	r3, [r5, #16]
 800e15e:	b99b      	cbnz	r3, 800e188 <_vfiprintf_r+0x5c>
 800e160:	4629      	mov	r1, r5
 800e162:	4630      	mov	r0, r6
 800e164:	f000 fbd2 	bl	800e90c <__swsetup_r>
 800e168:	b170      	cbz	r0, 800e188 <_vfiprintf_r+0x5c>
 800e16a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e16c:	07dc      	lsls	r4, r3, #31
 800e16e:	d504      	bpl.n	800e17a <_vfiprintf_r+0x4e>
 800e170:	f04f 30ff 	mov.w	r0, #4294967295
 800e174:	b01d      	add	sp, #116	@ 0x74
 800e176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17a:	89ab      	ldrh	r3, [r5, #12]
 800e17c:	0598      	lsls	r0, r3, #22
 800e17e:	d4f7      	bmi.n	800e170 <_vfiprintf_r+0x44>
 800e180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e182:	f7ff fdf7 	bl	800dd74 <__retarget_lock_release_recursive>
 800e186:	e7f3      	b.n	800e170 <_vfiprintf_r+0x44>
 800e188:	2300      	movs	r3, #0
 800e18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e18c:	2320      	movs	r3, #32
 800e18e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e192:	f8cd 800c 	str.w	r8, [sp, #12]
 800e196:	2330      	movs	r3, #48	@ 0x30
 800e198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e348 <_vfiprintf_r+0x21c>
 800e19c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1a0:	f04f 0901 	mov.w	r9, #1
 800e1a4:	4623      	mov	r3, r4
 800e1a6:	469a      	mov	sl, r3
 800e1a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ac:	b10a      	cbz	r2, 800e1b2 <_vfiprintf_r+0x86>
 800e1ae:	2a25      	cmp	r2, #37	@ 0x25
 800e1b0:	d1f9      	bne.n	800e1a6 <_vfiprintf_r+0x7a>
 800e1b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e1b6:	d00b      	beq.n	800e1d0 <_vfiprintf_r+0xa4>
 800e1b8:	465b      	mov	r3, fp
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	4629      	mov	r1, r5
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f7ff ffa1 	bl	800e106 <__sfputs_r>
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	f000 80a7 	beq.w	800e318 <_vfiprintf_r+0x1ec>
 800e1ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1cc:	445a      	add	r2, fp
 800e1ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f000 809f 	beq.w	800e318 <_vfiprintf_r+0x1ec>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1e4:	f10a 0a01 	add.w	sl, sl, #1
 800e1e8:	9304      	str	r3, [sp, #16]
 800e1ea:	9307      	str	r3, [sp, #28]
 800e1ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1f2:	4654      	mov	r4, sl
 800e1f4:	2205      	movs	r2, #5
 800e1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1fa:	4853      	ldr	r0, [pc, #332]	@ (800e348 <_vfiprintf_r+0x21c>)
 800e1fc:	f7f1 ffe8 	bl	80001d0 <memchr>
 800e200:	9a04      	ldr	r2, [sp, #16]
 800e202:	b9d8      	cbnz	r0, 800e23c <_vfiprintf_r+0x110>
 800e204:	06d1      	lsls	r1, r2, #27
 800e206:	bf44      	itt	mi
 800e208:	2320      	movmi	r3, #32
 800e20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e20e:	0713      	lsls	r3, r2, #28
 800e210:	bf44      	itt	mi
 800e212:	232b      	movmi	r3, #43	@ 0x2b
 800e214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e218:	f89a 3000 	ldrb.w	r3, [sl]
 800e21c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e21e:	d015      	beq.n	800e24c <_vfiprintf_r+0x120>
 800e220:	9a07      	ldr	r2, [sp, #28]
 800e222:	4654      	mov	r4, sl
 800e224:	2000      	movs	r0, #0
 800e226:	f04f 0c0a 	mov.w	ip, #10
 800e22a:	4621      	mov	r1, r4
 800e22c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e230:	3b30      	subs	r3, #48	@ 0x30
 800e232:	2b09      	cmp	r3, #9
 800e234:	d94b      	bls.n	800e2ce <_vfiprintf_r+0x1a2>
 800e236:	b1b0      	cbz	r0, 800e266 <_vfiprintf_r+0x13a>
 800e238:	9207      	str	r2, [sp, #28]
 800e23a:	e014      	b.n	800e266 <_vfiprintf_r+0x13a>
 800e23c:	eba0 0308 	sub.w	r3, r0, r8
 800e240:	fa09 f303 	lsl.w	r3, r9, r3
 800e244:	4313      	orrs	r3, r2
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	46a2      	mov	sl, r4
 800e24a:	e7d2      	b.n	800e1f2 <_vfiprintf_r+0xc6>
 800e24c:	9b03      	ldr	r3, [sp, #12]
 800e24e:	1d19      	adds	r1, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	9103      	str	r1, [sp, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	bfbb      	ittet	lt
 800e258:	425b      	neglt	r3, r3
 800e25a:	f042 0202 	orrlt.w	r2, r2, #2
 800e25e:	9307      	strge	r3, [sp, #28]
 800e260:	9307      	strlt	r3, [sp, #28]
 800e262:	bfb8      	it	lt
 800e264:	9204      	strlt	r2, [sp, #16]
 800e266:	7823      	ldrb	r3, [r4, #0]
 800e268:	2b2e      	cmp	r3, #46	@ 0x2e
 800e26a:	d10a      	bne.n	800e282 <_vfiprintf_r+0x156>
 800e26c:	7863      	ldrb	r3, [r4, #1]
 800e26e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e270:	d132      	bne.n	800e2d8 <_vfiprintf_r+0x1ac>
 800e272:	9b03      	ldr	r3, [sp, #12]
 800e274:	1d1a      	adds	r2, r3, #4
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	9203      	str	r2, [sp, #12]
 800e27a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e27e:	3402      	adds	r4, #2
 800e280:	9305      	str	r3, [sp, #20]
 800e282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e358 <_vfiprintf_r+0x22c>
 800e286:	7821      	ldrb	r1, [r4, #0]
 800e288:	2203      	movs	r2, #3
 800e28a:	4650      	mov	r0, sl
 800e28c:	f7f1 ffa0 	bl	80001d0 <memchr>
 800e290:	b138      	cbz	r0, 800e2a2 <_vfiprintf_r+0x176>
 800e292:	9b04      	ldr	r3, [sp, #16]
 800e294:	eba0 000a 	sub.w	r0, r0, sl
 800e298:	2240      	movs	r2, #64	@ 0x40
 800e29a:	4082      	lsls	r2, r0
 800e29c:	4313      	orrs	r3, r2
 800e29e:	3401      	adds	r4, #1
 800e2a0:	9304      	str	r3, [sp, #16]
 800e2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a6:	4829      	ldr	r0, [pc, #164]	@ (800e34c <_vfiprintf_r+0x220>)
 800e2a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2ac:	2206      	movs	r2, #6
 800e2ae:	f7f1 ff8f 	bl	80001d0 <memchr>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d03f      	beq.n	800e336 <_vfiprintf_r+0x20a>
 800e2b6:	4b26      	ldr	r3, [pc, #152]	@ (800e350 <_vfiprintf_r+0x224>)
 800e2b8:	bb1b      	cbnz	r3, 800e302 <_vfiprintf_r+0x1d6>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	3307      	adds	r3, #7
 800e2be:	f023 0307 	bic.w	r3, r3, #7
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	9303      	str	r3, [sp, #12]
 800e2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2c8:	443b      	add	r3, r7
 800e2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2cc:	e76a      	b.n	800e1a4 <_vfiprintf_r+0x78>
 800e2ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	e7a8      	b.n	800e22a <_vfiprintf_r+0xfe>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	3401      	adds	r4, #1
 800e2dc:	9305      	str	r3, [sp, #20]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	f04f 0c0a 	mov.w	ip, #10
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ea:	3a30      	subs	r2, #48	@ 0x30
 800e2ec:	2a09      	cmp	r2, #9
 800e2ee:	d903      	bls.n	800e2f8 <_vfiprintf_r+0x1cc>
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d0c6      	beq.n	800e282 <_vfiprintf_r+0x156>
 800e2f4:	9105      	str	r1, [sp, #20]
 800e2f6:	e7c4      	b.n	800e282 <_vfiprintf_r+0x156>
 800e2f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	2301      	movs	r3, #1
 800e300:	e7f0      	b.n	800e2e4 <_vfiprintf_r+0x1b8>
 800e302:	ab03      	add	r3, sp, #12
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	462a      	mov	r2, r5
 800e308:	4b12      	ldr	r3, [pc, #72]	@ (800e354 <_vfiprintf_r+0x228>)
 800e30a:	a904      	add	r1, sp, #16
 800e30c:	4630      	mov	r0, r6
 800e30e:	f3af 8000 	nop.w
 800e312:	4607      	mov	r7, r0
 800e314:	1c78      	adds	r0, r7, #1
 800e316:	d1d6      	bne.n	800e2c6 <_vfiprintf_r+0x19a>
 800e318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e31a:	07d9      	lsls	r1, r3, #31
 800e31c:	d405      	bmi.n	800e32a <_vfiprintf_r+0x1fe>
 800e31e:	89ab      	ldrh	r3, [r5, #12]
 800e320:	059a      	lsls	r2, r3, #22
 800e322:	d402      	bmi.n	800e32a <_vfiprintf_r+0x1fe>
 800e324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e326:	f7ff fd25 	bl	800dd74 <__retarget_lock_release_recursive>
 800e32a:	89ab      	ldrh	r3, [r5, #12]
 800e32c:	065b      	lsls	r3, r3, #25
 800e32e:	f53f af1f 	bmi.w	800e170 <_vfiprintf_r+0x44>
 800e332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e334:	e71e      	b.n	800e174 <_vfiprintf_r+0x48>
 800e336:	ab03      	add	r3, sp, #12
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	462a      	mov	r2, r5
 800e33c:	4b05      	ldr	r3, [pc, #20]	@ (800e354 <_vfiprintf_r+0x228>)
 800e33e:	a904      	add	r1, sp, #16
 800e340:	4630      	mov	r0, r6
 800e342:	f000 f879 	bl	800e438 <_printf_i>
 800e346:	e7e4      	b.n	800e312 <_vfiprintf_r+0x1e6>
 800e348:	0800f188 	.word	0x0800f188
 800e34c:	0800f192 	.word	0x0800f192
 800e350:	00000000 	.word	0x00000000
 800e354:	0800e107 	.word	0x0800e107
 800e358:	0800f18e 	.word	0x0800f18e

0800e35c <_printf_common>:
 800e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e360:	4616      	mov	r6, r2
 800e362:	4698      	mov	r8, r3
 800e364:	688a      	ldr	r2, [r1, #8]
 800e366:	690b      	ldr	r3, [r1, #16]
 800e368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e36c:	4293      	cmp	r3, r2
 800e36e:	bfb8      	it	lt
 800e370:	4613      	movlt	r3, r2
 800e372:	6033      	str	r3, [r6, #0]
 800e374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e378:	4607      	mov	r7, r0
 800e37a:	460c      	mov	r4, r1
 800e37c:	b10a      	cbz	r2, 800e382 <_printf_common+0x26>
 800e37e:	3301      	adds	r3, #1
 800e380:	6033      	str	r3, [r6, #0]
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	0699      	lsls	r1, r3, #26
 800e386:	bf42      	ittt	mi
 800e388:	6833      	ldrmi	r3, [r6, #0]
 800e38a:	3302      	addmi	r3, #2
 800e38c:	6033      	strmi	r3, [r6, #0]
 800e38e:	6825      	ldr	r5, [r4, #0]
 800e390:	f015 0506 	ands.w	r5, r5, #6
 800e394:	d106      	bne.n	800e3a4 <_printf_common+0x48>
 800e396:	f104 0a19 	add.w	sl, r4, #25
 800e39a:	68e3      	ldr	r3, [r4, #12]
 800e39c:	6832      	ldr	r2, [r6, #0]
 800e39e:	1a9b      	subs	r3, r3, r2
 800e3a0:	42ab      	cmp	r3, r5
 800e3a2:	dc26      	bgt.n	800e3f2 <_printf_common+0x96>
 800e3a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	3b00      	subs	r3, #0
 800e3ac:	bf18      	it	ne
 800e3ae:	2301      	movne	r3, #1
 800e3b0:	0692      	lsls	r2, r2, #26
 800e3b2:	d42b      	bmi.n	800e40c <_printf_common+0xb0>
 800e3b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e3b8:	4641      	mov	r1, r8
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	47c8      	blx	r9
 800e3be:	3001      	adds	r0, #1
 800e3c0:	d01e      	beq.n	800e400 <_printf_common+0xa4>
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	6922      	ldr	r2, [r4, #16]
 800e3c6:	f003 0306 	and.w	r3, r3, #6
 800e3ca:	2b04      	cmp	r3, #4
 800e3cc:	bf02      	ittt	eq
 800e3ce:	68e5      	ldreq	r5, [r4, #12]
 800e3d0:	6833      	ldreq	r3, [r6, #0]
 800e3d2:	1aed      	subeq	r5, r5, r3
 800e3d4:	68a3      	ldr	r3, [r4, #8]
 800e3d6:	bf0c      	ite	eq
 800e3d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3dc:	2500      	movne	r5, #0
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	bfc4      	itt	gt
 800e3e2:	1a9b      	subgt	r3, r3, r2
 800e3e4:	18ed      	addgt	r5, r5, r3
 800e3e6:	2600      	movs	r6, #0
 800e3e8:	341a      	adds	r4, #26
 800e3ea:	42b5      	cmp	r5, r6
 800e3ec:	d11a      	bne.n	800e424 <_printf_common+0xc8>
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	e008      	b.n	800e404 <_printf_common+0xa8>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	4652      	mov	r2, sl
 800e3f6:	4641      	mov	r1, r8
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	47c8      	blx	r9
 800e3fc:	3001      	adds	r0, #1
 800e3fe:	d103      	bne.n	800e408 <_printf_common+0xac>
 800e400:	f04f 30ff 	mov.w	r0, #4294967295
 800e404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e408:	3501      	adds	r5, #1
 800e40a:	e7c6      	b.n	800e39a <_printf_common+0x3e>
 800e40c:	18e1      	adds	r1, r4, r3
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	2030      	movs	r0, #48	@ 0x30
 800e412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e416:	4422      	add	r2, r4
 800e418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e41c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e420:	3302      	adds	r3, #2
 800e422:	e7c7      	b.n	800e3b4 <_printf_common+0x58>
 800e424:	2301      	movs	r3, #1
 800e426:	4622      	mov	r2, r4
 800e428:	4641      	mov	r1, r8
 800e42a:	4638      	mov	r0, r7
 800e42c:	47c8      	blx	r9
 800e42e:	3001      	adds	r0, #1
 800e430:	d0e6      	beq.n	800e400 <_printf_common+0xa4>
 800e432:	3601      	adds	r6, #1
 800e434:	e7d9      	b.n	800e3ea <_printf_common+0x8e>
	...

0800e438 <_printf_i>:
 800e438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e43c:	7e0f      	ldrb	r7, [r1, #24]
 800e43e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e440:	2f78      	cmp	r7, #120	@ 0x78
 800e442:	4691      	mov	r9, r2
 800e444:	4680      	mov	r8, r0
 800e446:	460c      	mov	r4, r1
 800e448:	469a      	mov	sl, r3
 800e44a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e44e:	d807      	bhi.n	800e460 <_printf_i+0x28>
 800e450:	2f62      	cmp	r7, #98	@ 0x62
 800e452:	d80a      	bhi.n	800e46a <_printf_i+0x32>
 800e454:	2f00      	cmp	r7, #0
 800e456:	f000 80d1 	beq.w	800e5fc <_printf_i+0x1c4>
 800e45a:	2f58      	cmp	r7, #88	@ 0x58
 800e45c:	f000 80b8 	beq.w	800e5d0 <_printf_i+0x198>
 800e460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e468:	e03a      	b.n	800e4e0 <_printf_i+0xa8>
 800e46a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e46e:	2b15      	cmp	r3, #21
 800e470:	d8f6      	bhi.n	800e460 <_printf_i+0x28>
 800e472:	a101      	add	r1, pc, #4	@ (adr r1, 800e478 <_printf_i+0x40>)
 800e474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e478:	0800e4d1 	.word	0x0800e4d1
 800e47c:	0800e4e5 	.word	0x0800e4e5
 800e480:	0800e461 	.word	0x0800e461
 800e484:	0800e461 	.word	0x0800e461
 800e488:	0800e461 	.word	0x0800e461
 800e48c:	0800e461 	.word	0x0800e461
 800e490:	0800e4e5 	.word	0x0800e4e5
 800e494:	0800e461 	.word	0x0800e461
 800e498:	0800e461 	.word	0x0800e461
 800e49c:	0800e461 	.word	0x0800e461
 800e4a0:	0800e461 	.word	0x0800e461
 800e4a4:	0800e5e3 	.word	0x0800e5e3
 800e4a8:	0800e50f 	.word	0x0800e50f
 800e4ac:	0800e59d 	.word	0x0800e59d
 800e4b0:	0800e461 	.word	0x0800e461
 800e4b4:	0800e461 	.word	0x0800e461
 800e4b8:	0800e605 	.word	0x0800e605
 800e4bc:	0800e461 	.word	0x0800e461
 800e4c0:	0800e50f 	.word	0x0800e50f
 800e4c4:	0800e461 	.word	0x0800e461
 800e4c8:	0800e461 	.word	0x0800e461
 800e4cc:	0800e5a5 	.word	0x0800e5a5
 800e4d0:	6833      	ldr	r3, [r6, #0]
 800e4d2:	1d1a      	adds	r2, r3, #4
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6032      	str	r2, [r6, #0]
 800e4d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	e09c      	b.n	800e61e <_printf_i+0x1e6>
 800e4e4:	6833      	ldr	r3, [r6, #0]
 800e4e6:	6820      	ldr	r0, [r4, #0]
 800e4e8:	1d19      	adds	r1, r3, #4
 800e4ea:	6031      	str	r1, [r6, #0]
 800e4ec:	0606      	lsls	r6, r0, #24
 800e4ee:	d501      	bpl.n	800e4f4 <_printf_i+0xbc>
 800e4f0:	681d      	ldr	r5, [r3, #0]
 800e4f2:	e003      	b.n	800e4fc <_printf_i+0xc4>
 800e4f4:	0645      	lsls	r5, r0, #25
 800e4f6:	d5fb      	bpl.n	800e4f0 <_printf_i+0xb8>
 800e4f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e4fc:	2d00      	cmp	r5, #0
 800e4fe:	da03      	bge.n	800e508 <_printf_i+0xd0>
 800e500:	232d      	movs	r3, #45	@ 0x2d
 800e502:	426d      	negs	r5, r5
 800e504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e508:	4858      	ldr	r0, [pc, #352]	@ (800e66c <_printf_i+0x234>)
 800e50a:	230a      	movs	r3, #10
 800e50c:	e011      	b.n	800e532 <_printf_i+0xfa>
 800e50e:	6821      	ldr	r1, [r4, #0]
 800e510:	6833      	ldr	r3, [r6, #0]
 800e512:	0608      	lsls	r0, r1, #24
 800e514:	f853 5b04 	ldr.w	r5, [r3], #4
 800e518:	d402      	bmi.n	800e520 <_printf_i+0xe8>
 800e51a:	0649      	lsls	r1, r1, #25
 800e51c:	bf48      	it	mi
 800e51e:	b2ad      	uxthmi	r5, r5
 800e520:	2f6f      	cmp	r7, #111	@ 0x6f
 800e522:	4852      	ldr	r0, [pc, #328]	@ (800e66c <_printf_i+0x234>)
 800e524:	6033      	str	r3, [r6, #0]
 800e526:	bf14      	ite	ne
 800e528:	230a      	movne	r3, #10
 800e52a:	2308      	moveq	r3, #8
 800e52c:	2100      	movs	r1, #0
 800e52e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e532:	6866      	ldr	r6, [r4, #4]
 800e534:	60a6      	str	r6, [r4, #8]
 800e536:	2e00      	cmp	r6, #0
 800e538:	db05      	blt.n	800e546 <_printf_i+0x10e>
 800e53a:	6821      	ldr	r1, [r4, #0]
 800e53c:	432e      	orrs	r6, r5
 800e53e:	f021 0104 	bic.w	r1, r1, #4
 800e542:	6021      	str	r1, [r4, #0]
 800e544:	d04b      	beq.n	800e5de <_printf_i+0x1a6>
 800e546:	4616      	mov	r6, r2
 800e548:	fbb5 f1f3 	udiv	r1, r5, r3
 800e54c:	fb03 5711 	mls	r7, r3, r1, r5
 800e550:	5dc7      	ldrb	r7, [r0, r7]
 800e552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e556:	462f      	mov	r7, r5
 800e558:	42bb      	cmp	r3, r7
 800e55a:	460d      	mov	r5, r1
 800e55c:	d9f4      	bls.n	800e548 <_printf_i+0x110>
 800e55e:	2b08      	cmp	r3, #8
 800e560:	d10b      	bne.n	800e57a <_printf_i+0x142>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	07df      	lsls	r7, r3, #31
 800e566:	d508      	bpl.n	800e57a <_printf_i+0x142>
 800e568:	6923      	ldr	r3, [r4, #16]
 800e56a:	6861      	ldr	r1, [r4, #4]
 800e56c:	4299      	cmp	r1, r3
 800e56e:	bfde      	ittt	le
 800e570:	2330      	movle	r3, #48	@ 0x30
 800e572:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e576:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e57a:	1b92      	subs	r2, r2, r6
 800e57c:	6122      	str	r2, [r4, #16]
 800e57e:	f8cd a000 	str.w	sl, [sp]
 800e582:	464b      	mov	r3, r9
 800e584:	aa03      	add	r2, sp, #12
 800e586:	4621      	mov	r1, r4
 800e588:	4640      	mov	r0, r8
 800e58a:	f7ff fee7 	bl	800e35c <_printf_common>
 800e58e:	3001      	adds	r0, #1
 800e590:	d14a      	bne.n	800e628 <_printf_i+0x1f0>
 800e592:	f04f 30ff 	mov.w	r0, #4294967295
 800e596:	b004      	add	sp, #16
 800e598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e59c:	6823      	ldr	r3, [r4, #0]
 800e59e:	f043 0320 	orr.w	r3, r3, #32
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	4832      	ldr	r0, [pc, #200]	@ (800e670 <_printf_i+0x238>)
 800e5a6:	2778      	movs	r7, #120	@ 0x78
 800e5a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	6831      	ldr	r1, [r6, #0]
 800e5b0:	061f      	lsls	r7, r3, #24
 800e5b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e5b6:	d402      	bmi.n	800e5be <_printf_i+0x186>
 800e5b8:	065f      	lsls	r7, r3, #25
 800e5ba:	bf48      	it	mi
 800e5bc:	b2ad      	uxthmi	r5, r5
 800e5be:	6031      	str	r1, [r6, #0]
 800e5c0:	07d9      	lsls	r1, r3, #31
 800e5c2:	bf44      	itt	mi
 800e5c4:	f043 0320 	orrmi.w	r3, r3, #32
 800e5c8:	6023      	strmi	r3, [r4, #0]
 800e5ca:	b11d      	cbz	r5, 800e5d4 <_printf_i+0x19c>
 800e5cc:	2310      	movs	r3, #16
 800e5ce:	e7ad      	b.n	800e52c <_printf_i+0xf4>
 800e5d0:	4826      	ldr	r0, [pc, #152]	@ (800e66c <_printf_i+0x234>)
 800e5d2:	e7e9      	b.n	800e5a8 <_printf_i+0x170>
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	f023 0320 	bic.w	r3, r3, #32
 800e5da:	6023      	str	r3, [r4, #0]
 800e5dc:	e7f6      	b.n	800e5cc <_printf_i+0x194>
 800e5de:	4616      	mov	r6, r2
 800e5e0:	e7bd      	b.n	800e55e <_printf_i+0x126>
 800e5e2:	6833      	ldr	r3, [r6, #0]
 800e5e4:	6825      	ldr	r5, [r4, #0]
 800e5e6:	6961      	ldr	r1, [r4, #20]
 800e5e8:	1d18      	adds	r0, r3, #4
 800e5ea:	6030      	str	r0, [r6, #0]
 800e5ec:	062e      	lsls	r6, r5, #24
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	d501      	bpl.n	800e5f6 <_printf_i+0x1be>
 800e5f2:	6019      	str	r1, [r3, #0]
 800e5f4:	e002      	b.n	800e5fc <_printf_i+0x1c4>
 800e5f6:	0668      	lsls	r0, r5, #25
 800e5f8:	d5fb      	bpl.n	800e5f2 <_printf_i+0x1ba>
 800e5fa:	8019      	strh	r1, [r3, #0]
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	6123      	str	r3, [r4, #16]
 800e600:	4616      	mov	r6, r2
 800e602:	e7bc      	b.n	800e57e <_printf_i+0x146>
 800e604:	6833      	ldr	r3, [r6, #0]
 800e606:	1d1a      	adds	r2, r3, #4
 800e608:	6032      	str	r2, [r6, #0]
 800e60a:	681e      	ldr	r6, [r3, #0]
 800e60c:	6862      	ldr	r2, [r4, #4]
 800e60e:	2100      	movs	r1, #0
 800e610:	4630      	mov	r0, r6
 800e612:	f7f1 fddd 	bl	80001d0 <memchr>
 800e616:	b108      	cbz	r0, 800e61c <_printf_i+0x1e4>
 800e618:	1b80      	subs	r0, r0, r6
 800e61a:	6060      	str	r0, [r4, #4]
 800e61c:	6863      	ldr	r3, [r4, #4]
 800e61e:	6123      	str	r3, [r4, #16]
 800e620:	2300      	movs	r3, #0
 800e622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e626:	e7aa      	b.n	800e57e <_printf_i+0x146>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	4632      	mov	r2, r6
 800e62c:	4649      	mov	r1, r9
 800e62e:	4640      	mov	r0, r8
 800e630:	47d0      	blx	sl
 800e632:	3001      	adds	r0, #1
 800e634:	d0ad      	beq.n	800e592 <_printf_i+0x15a>
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	079b      	lsls	r3, r3, #30
 800e63a:	d413      	bmi.n	800e664 <_printf_i+0x22c>
 800e63c:	68e0      	ldr	r0, [r4, #12]
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	4298      	cmp	r0, r3
 800e642:	bfb8      	it	lt
 800e644:	4618      	movlt	r0, r3
 800e646:	e7a6      	b.n	800e596 <_printf_i+0x15e>
 800e648:	2301      	movs	r3, #1
 800e64a:	4632      	mov	r2, r6
 800e64c:	4649      	mov	r1, r9
 800e64e:	4640      	mov	r0, r8
 800e650:	47d0      	blx	sl
 800e652:	3001      	adds	r0, #1
 800e654:	d09d      	beq.n	800e592 <_printf_i+0x15a>
 800e656:	3501      	adds	r5, #1
 800e658:	68e3      	ldr	r3, [r4, #12]
 800e65a:	9903      	ldr	r1, [sp, #12]
 800e65c:	1a5b      	subs	r3, r3, r1
 800e65e:	42ab      	cmp	r3, r5
 800e660:	dcf2      	bgt.n	800e648 <_printf_i+0x210>
 800e662:	e7eb      	b.n	800e63c <_printf_i+0x204>
 800e664:	2500      	movs	r5, #0
 800e666:	f104 0619 	add.w	r6, r4, #25
 800e66a:	e7f5      	b.n	800e658 <_printf_i+0x220>
 800e66c:	0800f199 	.word	0x0800f199
 800e670:	0800f1aa 	.word	0x0800f1aa

0800e674 <__sflush_r>:
 800e674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e67c:	0716      	lsls	r6, r2, #28
 800e67e:	4605      	mov	r5, r0
 800e680:	460c      	mov	r4, r1
 800e682:	d454      	bmi.n	800e72e <__sflush_r+0xba>
 800e684:	684b      	ldr	r3, [r1, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	dc02      	bgt.n	800e690 <__sflush_r+0x1c>
 800e68a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dd48      	ble.n	800e722 <__sflush_r+0xae>
 800e690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e692:	2e00      	cmp	r6, #0
 800e694:	d045      	beq.n	800e722 <__sflush_r+0xae>
 800e696:	2300      	movs	r3, #0
 800e698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e69c:	682f      	ldr	r7, [r5, #0]
 800e69e:	6a21      	ldr	r1, [r4, #32]
 800e6a0:	602b      	str	r3, [r5, #0]
 800e6a2:	d030      	beq.n	800e706 <__sflush_r+0x92>
 800e6a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	0759      	lsls	r1, r3, #29
 800e6aa:	d505      	bpl.n	800e6b8 <__sflush_r+0x44>
 800e6ac:	6863      	ldr	r3, [r4, #4]
 800e6ae:	1ad2      	subs	r2, r2, r3
 800e6b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6b2:	b10b      	cbz	r3, 800e6b8 <__sflush_r+0x44>
 800e6b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6b6:	1ad2      	subs	r2, r2, r3
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6bc:	6a21      	ldr	r1, [r4, #32]
 800e6be:	4628      	mov	r0, r5
 800e6c0:	47b0      	blx	r6
 800e6c2:	1c43      	adds	r3, r0, #1
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	d106      	bne.n	800e6d6 <__sflush_r+0x62>
 800e6c8:	6829      	ldr	r1, [r5, #0]
 800e6ca:	291d      	cmp	r1, #29
 800e6cc:	d82b      	bhi.n	800e726 <__sflush_r+0xb2>
 800e6ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e778 <__sflush_r+0x104>)
 800e6d0:	40ca      	lsrs	r2, r1
 800e6d2:	07d6      	lsls	r6, r2, #31
 800e6d4:	d527      	bpl.n	800e726 <__sflush_r+0xb2>
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	6062      	str	r2, [r4, #4]
 800e6da:	04d9      	lsls	r1, r3, #19
 800e6dc:	6922      	ldr	r2, [r4, #16]
 800e6de:	6022      	str	r2, [r4, #0]
 800e6e0:	d504      	bpl.n	800e6ec <__sflush_r+0x78>
 800e6e2:	1c42      	adds	r2, r0, #1
 800e6e4:	d101      	bne.n	800e6ea <__sflush_r+0x76>
 800e6e6:	682b      	ldr	r3, [r5, #0]
 800e6e8:	b903      	cbnz	r3, 800e6ec <__sflush_r+0x78>
 800e6ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800e6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6ee:	602f      	str	r7, [r5, #0]
 800e6f0:	b1b9      	cbz	r1, 800e722 <__sflush_r+0xae>
 800e6f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6f6:	4299      	cmp	r1, r3
 800e6f8:	d002      	beq.n	800e700 <__sflush_r+0x8c>
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f7ff fb4a 	bl	800dd94 <_free_r>
 800e700:	2300      	movs	r3, #0
 800e702:	6363      	str	r3, [r4, #52]	@ 0x34
 800e704:	e00d      	b.n	800e722 <__sflush_r+0xae>
 800e706:	2301      	movs	r3, #1
 800e708:	4628      	mov	r0, r5
 800e70a:	47b0      	blx	r6
 800e70c:	4602      	mov	r2, r0
 800e70e:	1c50      	adds	r0, r2, #1
 800e710:	d1c9      	bne.n	800e6a6 <__sflush_r+0x32>
 800e712:	682b      	ldr	r3, [r5, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d0c6      	beq.n	800e6a6 <__sflush_r+0x32>
 800e718:	2b1d      	cmp	r3, #29
 800e71a:	d001      	beq.n	800e720 <__sflush_r+0xac>
 800e71c:	2b16      	cmp	r3, #22
 800e71e:	d11e      	bne.n	800e75e <__sflush_r+0xea>
 800e720:	602f      	str	r7, [r5, #0]
 800e722:	2000      	movs	r0, #0
 800e724:	e022      	b.n	800e76c <__sflush_r+0xf8>
 800e726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e72a:	b21b      	sxth	r3, r3
 800e72c:	e01b      	b.n	800e766 <__sflush_r+0xf2>
 800e72e:	690f      	ldr	r7, [r1, #16]
 800e730:	2f00      	cmp	r7, #0
 800e732:	d0f6      	beq.n	800e722 <__sflush_r+0xae>
 800e734:	0793      	lsls	r3, r2, #30
 800e736:	680e      	ldr	r6, [r1, #0]
 800e738:	bf08      	it	eq
 800e73a:	694b      	ldreq	r3, [r1, #20]
 800e73c:	600f      	str	r7, [r1, #0]
 800e73e:	bf18      	it	ne
 800e740:	2300      	movne	r3, #0
 800e742:	eba6 0807 	sub.w	r8, r6, r7
 800e746:	608b      	str	r3, [r1, #8]
 800e748:	f1b8 0f00 	cmp.w	r8, #0
 800e74c:	dde9      	ble.n	800e722 <__sflush_r+0xae>
 800e74e:	6a21      	ldr	r1, [r4, #32]
 800e750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e752:	4643      	mov	r3, r8
 800e754:	463a      	mov	r2, r7
 800e756:	4628      	mov	r0, r5
 800e758:	47b0      	blx	r6
 800e75a:	2800      	cmp	r0, #0
 800e75c:	dc08      	bgt.n	800e770 <__sflush_r+0xfc>
 800e75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e766:	81a3      	strh	r3, [r4, #12]
 800e768:	f04f 30ff 	mov.w	r0, #4294967295
 800e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e770:	4407      	add	r7, r0
 800e772:	eba8 0800 	sub.w	r8, r8, r0
 800e776:	e7e7      	b.n	800e748 <__sflush_r+0xd4>
 800e778:	20400001 	.word	0x20400001

0800e77c <_fflush_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	690b      	ldr	r3, [r1, #16]
 800e780:	4605      	mov	r5, r0
 800e782:	460c      	mov	r4, r1
 800e784:	b913      	cbnz	r3, 800e78c <_fflush_r+0x10>
 800e786:	2500      	movs	r5, #0
 800e788:	4628      	mov	r0, r5
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	b118      	cbz	r0, 800e796 <_fflush_r+0x1a>
 800e78e:	6a03      	ldr	r3, [r0, #32]
 800e790:	b90b      	cbnz	r3, 800e796 <_fflush_r+0x1a>
 800e792:	f7ff f8e9 	bl	800d968 <__sinit>
 800e796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d0f3      	beq.n	800e786 <_fflush_r+0xa>
 800e79e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7a0:	07d0      	lsls	r0, r2, #31
 800e7a2:	d404      	bmi.n	800e7ae <_fflush_r+0x32>
 800e7a4:	0599      	lsls	r1, r3, #22
 800e7a6:	d402      	bmi.n	800e7ae <_fflush_r+0x32>
 800e7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7aa:	f7ff fae2 	bl	800dd72 <__retarget_lock_acquire_recursive>
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	f7ff ff5f 	bl	800e674 <__sflush_r>
 800e7b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7b8:	07da      	lsls	r2, r3, #31
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	d4e4      	bmi.n	800e788 <_fflush_r+0xc>
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	059b      	lsls	r3, r3, #22
 800e7c2:	d4e1      	bmi.n	800e788 <_fflush_r+0xc>
 800e7c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7c6:	f7ff fad5 	bl	800dd74 <__retarget_lock_release_recursive>
 800e7ca:	e7dd      	b.n	800e788 <_fflush_r+0xc>

0800e7cc <__swhatbuf_r>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d4:	2900      	cmp	r1, #0
 800e7d6:	b096      	sub	sp, #88	@ 0x58
 800e7d8:	4615      	mov	r5, r2
 800e7da:	461e      	mov	r6, r3
 800e7dc:	da0d      	bge.n	800e7fa <__swhatbuf_r+0x2e>
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7e4:	f04f 0100 	mov.w	r1, #0
 800e7e8:	bf14      	ite	ne
 800e7ea:	2340      	movne	r3, #64	@ 0x40
 800e7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	6031      	str	r1, [r6, #0]
 800e7f4:	602b      	str	r3, [r5, #0]
 800e7f6:	b016      	add	sp, #88	@ 0x58
 800e7f8:	bd70      	pop	{r4, r5, r6, pc}
 800e7fa:	466a      	mov	r2, sp
 800e7fc:	f000 f8f6 	bl	800e9ec <_fstat_r>
 800e800:	2800      	cmp	r0, #0
 800e802:	dbec      	blt.n	800e7de <__swhatbuf_r+0x12>
 800e804:	9901      	ldr	r1, [sp, #4]
 800e806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e80e:	4259      	negs	r1, r3
 800e810:	4159      	adcs	r1, r3
 800e812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e816:	e7eb      	b.n	800e7f0 <__swhatbuf_r+0x24>

0800e818 <__smakebuf_r>:
 800e818:	898b      	ldrh	r3, [r1, #12]
 800e81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e81c:	079d      	lsls	r5, r3, #30
 800e81e:	4606      	mov	r6, r0
 800e820:	460c      	mov	r4, r1
 800e822:	d507      	bpl.n	800e834 <__smakebuf_r+0x1c>
 800e824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	2301      	movs	r3, #1
 800e82e:	6163      	str	r3, [r4, #20]
 800e830:	b003      	add	sp, #12
 800e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e834:	ab01      	add	r3, sp, #4
 800e836:	466a      	mov	r2, sp
 800e838:	f7ff ffc8 	bl	800e7cc <__swhatbuf_r>
 800e83c:	9f00      	ldr	r7, [sp, #0]
 800e83e:	4605      	mov	r5, r0
 800e840:	4639      	mov	r1, r7
 800e842:	4630      	mov	r0, r6
 800e844:	f7fe ff78 	bl	800d738 <_malloc_r>
 800e848:	b948      	cbnz	r0, 800e85e <__smakebuf_r+0x46>
 800e84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e84e:	059a      	lsls	r2, r3, #22
 800e850:	d4ee      	bmi.n	800e830 <__smakebuf_r+0x18>
 800e852:	f023 0303 	bic.w	r3, r3, #3
 800e856:	f043 0302 	orr.w	r3, r3, #2
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	e7e2      	b.n	800e824 <__smakebuf_r+0xc>
 800e85e:	89a3      	ldrh	r3, [r4, #12]
 800e860:	6020      	str	r0, [r4, #0]
 800e862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e866:	81a3      	strh	r3, [r4, #12]
 800e868:	9b01      	ldr	r3, [sp, #4]
 800e86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e86e:	b15b      	cbz	r3, 800e888 <__smakebuf_r+0x70>
 800e870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e874:	4630      	mov	r0, r6
 800e876:	f000 f8cb 	bl	800ea10 <_isatty_r>
 800e87a:	b128      	cbz	r0, 800e888 <__smakebuf_r+0x70>
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	f023 0303 	bic.w	r3, r3, #3
 800e882:	f043 0301 	orr.w	r3, r3, #1
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	89a3      	ldrh	r3, [r4, #12]
 800e88a:	431d      	orrs	r5, r3
 800e88c:	81a5      	strh	r5, [r4, #12]
 800e88e:	e7cf      	b.n	800e830 <__smakebuf_r+0x18>

0800e890 <__swbuf_r>:
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e892:	460e      	mov	r6, r1
 800e894:	4614      	mov	r4, r2
 800e896:	4605      	mov	r5, r0
 800e898:	b118      	cbz	r0, 800e8a2 <__swbuf_r+0x12>
 800e89a:	6a03      	ldr	r3, [r0, #32]
 800e89c:	b90b      	cbnz	r3, 800e8a2 <__swbuf_r+0x12>
 800e89e:	f7ff f863 	bl	800d968 <__sinit>
 800e8a2:	69a3      	ldr	r3, [r4, #24]
 800e8a4:	60a3      	str	r3, [r4, #8]
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	071a      	lsls	r2, r3, #28
 800e8aa:	d501      	bpl.n	800e8b0 <__swbuf_r+0x20>
 800e8ac:	6923      	ldr	r3, [r4, #16]
 800e8ae:	b943      	cbnz	r3, 800e8c2 <__swbuf_r+0x32>
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	f000 f82a 	bl	800e90c <__swsetup_r>
 800e8b8:	b118      	cbz	r0, 800e8c2 <__swbuf_r+0x32>
 800e8ba:	f04f 37ff 	mov.w	r7, #4294967295
 800e8be:	4638      	mov	r0, r7
 800e8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	6922      	ldr	r2, [r4, #16]
 800e8c6:	1a98      	subs	r0, r3, r2
 800e8c8:	6963      	ldr	r3, [r4, #20]
 800e8ca:	b2f6      	uxtb	r6, r6
 800e8cc:	4283      	cmp	r3, r0
 800e8ce:	4637      	mov	r7, r6
 800e8d0:	dc05      	bgt.n	800e8de <__swbuf_r+0x4e>
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	f7ff ff51 	bl	800e77c <_fflush_r>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d1ed      	bne.n	800e8ba <__swbuf_r+0x2a>
 800e8de:	68a3      	ldr	r3, [r4, #8]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	60a3      	str	r3, [r4, #8]
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	1c5a      	adds	r2, r3, #1
 800e8e8:	6022      	str	r2, [r4, #0]
 800e8ea:	701e      	strb	r6, [r3, #0]
 800e8ec:	6962      	ldr	r2, [r4, #20]
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d004      	beq.n	800e8fe <__swbuf_r+0x6e>
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	07db      	lsls	r3, r3, #31
 800e8f8:	d5e1      	bpl.n	800e8be <__swbuf_r+0x2e>
 800e8fa:	2e0a      	cmp	r6, #10
 800e8fc:	d1df      	bne.n	800e8be <__swbuf_r+0x2e>
 800e8fe:	4621      	mov	r1, r4
 800e900:	4628      	mov	r0, r5
 800e902:	f7ff ff3b 	bl	800e77c <_fflush_r>
 800e906:	2800      	cmp	r0, #0
 800e908:	d0d9      	beq.n	800e8be <__swbuf_r+0x2e>
 800e90a:	e7d6      	b.n	800e8ba <__swbuf_r+0x2a>

0800e90c <__swsetup_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4b29      	ldr	r3, [pc, #164]	@ (800e9b4 <__swsetup_r+0xa8>)
 800e910:	4605      	mov	r5, r0
 800e912:	6818      	ldr	r0, [r3, #0]
 800e914:	460c      	mov	r4, r1
 800e916:	b118      	cbz	r0, 800e920 <__swsetup_r+0x14>
 800e918:	6a03      	ldr	r3, [r0, #32]
 800e91a:	b90b      	cbnz	r3, 800e920 <__swsetup_r+0x14>
 800e91c:	f7ff f824 	bl	800d968 <__sinit>
 800e920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e924:	0719      	lsls	r1, r3, #28
 800e926:	d422      	bmi.n	800e96e <__swsetup_r+0x62>
 800e928:	06da      	lsls	r2, r3, #27
 800e92a:	d407      	bmi.n	800e93c <__swsetup_r+0x30>
 800e92c:	2209      	movs	r2, #9
 800e92e:	602a      	str	r2, [r5, #0]
 800e930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e934:	81a3      	strh	r3, [r4, #12]
 800e936:	f04f 30ff 	mov.w	r0, #4294967295
 800e93a:	e033      	b.n	800e9a4 <__swsetup_r+0x98>
 800e93c:	0758      	lsls	r0, r3, #29
 800e93e:	d512      	bpl.n	800e966 <__swsetup_r+0x5a>
 800e940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e942:	b141      	cbz	r1, 800e956 <__swsetup_r+0x4a>
 800e944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e948:	4299      	cmp	r1, r3
 800e94a:	d002      	beq.n	800e952 <__swsetup_r+0x46>
 800e94c:	4628      	mov	r0, r5
 800e94e:	f7ff fa21 	bl	800dd94 <_free_r>
 800e952:	2300      	movs	r3, #0
 800e954:	6363      	str	r3, [r4, #52]	@ 0x34
 800e956:	89a3      	ldrh	r3, [r4, #12]
 800e958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e95c:	81a3      	strh	r3, [r4, #12]
 800e95e:	2300      	movs	r3, #0
 800e960:	6063      	str	r3, [r4, #4]
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	f043 0308 	orr.w	r3, r3, #8
 800e96c:	81a3      	strh	r3, [r4, #12]
 800e96e:	6923      	ldr	r3, [r4, #16]
 800e970:	b94b      	cbnz	r3, 800e986 <__swsetup_r+0x7a>
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e97c:	d003      	beq.n	800e986 <__swsetup_r+0x7a>
 800e97e:	4621      	mov	r1, r4
 800e980:	4628      	mov	r0, r5
 800e982:	f7ff ff49 	bl	800e818 <__smakebuf_r>
 800e986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e98a:	f013 0201 	ands.w	r2, r3, #1
 800e98e:	d00a      	beq.n	800e9a6 <__swsetup_r+0x9a>
 800e990:	2200      	movs	r2, #0
 800e992:	60a2      	str	r2, [r4, #8]
 800e994:	6962      	ldr	r2, [r4, #20]
 800e996:	4252      	negs	r2, r2
 800e998:	61a2      	str	r2, [r4, #24]
 800e99a:	6922      	ldr	r2, [r4, #16]
 800e99c:	b942      	cbnz	r2, 800e9b0 <__swsetup_r+0xa4>
 800e99e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e9a2:	d1c5      	bne.n	800e930 <__swsetup_r+0x24>
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	0799      	lsls	r1, r3, #30
 800e9a8:	bf58      	it	pl
 800e9aa:	6962      	ldrpl	r2, [r4, #20]
 800e9ac:	60a2      	str	r2, [r4, #8]
 800e9ae:	e7f4      	b.n	800e99a <__swsetup_r+0x8e>
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	e7f7      	b.n	800e9a4 <__swsetup_r+0x98>
 800e9b4:	2000002c 	.word	0x2000002c

0800e9b8 <memmove>:
 800e9b8:	4288      	cmp	r0, r1
 800e9ba:	b510      	push	{r4, lr}
 800e9bc:	eb01 0402 	add.w	r4, r1, r2
 800e9c0:	d902      	bls.n	800e9c8 <memmove+0x10>
 800e9c2:	4284      	cmp	r4, r0
 800e9c4:	4623      	mov	r3, r4
 800e9c6:	d807      	bhi.n	800e9d8 <memmove+0x20>
 800e9c8:	1e43      	subs	r3, r0, #1
 800e9ca:	42a1      	cmp	r1, r4
 800e9cc:	d008      	beq.n	800e9e0 <memmove+0x28>
 800e9ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9d6:	e7f8      	b.n	800e9ca <memmove+0x12>
 800e9d8:	4402      	add	r2, r0
 800e9da:	4601      	mov	r1, r0
 800e9dc:	428a      	cmp	r2, r1
 800e9de:	d100      	bne.n	800e9e2 <memmove+0x2a>
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9ea:	e7f7      	b.n	800e9dc <memmove+0x24>

0800e9ec <_fstat_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d07      	ldr	r5, [pc, #28]	@ (800ea0c <_fstat_r+0x20>)
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	602b      	str	r3, [r5, #0]
 800e9fa:	f7f5 ff05 	bl	8004808 <_fstat>
 800e9fe:	1c43      	adds	r3, r0, #1
 800ea00:	d102      	bne.n	800ea08 <_fstat_r+0x1c>
 800ea02:	682b      	ldr	r3, [r5, #0]
 800ea04:	b103      	cbz	r3, 800ea08 <_fstat_r+0x1c>
 800ea06:	6023      	str	r3, [r4, #0]
 800ea08:	bd38      	pop	{r3, r4, r5, pc}
 800ea0a:	bf00      	nop
 800ea0c:	200011c8 	.word	0x200011c8

0800ea10 <_isatty_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d06      	ldr	r5, [pc, #24]	@ (800ea2c <_isatty_r+0x1c>)
 800ea14:	2300      	movs	r3, #0
 800ea16:	4604      	mov	r4, r0
 800ea18:	4608      	mov	r0, r1
 800ea1a:	602b      	str	r3, [r5, #0]
 800ea1c:	f7f5 ff04 	bl	8004828 <_isatty>
 800ea20:	1c43      	adds	r3, r0, #1
 800ea22:	d102      	bne.n	800ea2a <_isatty_r+0x1a>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	b103      	cbz	r3, 800ea2a <_isatty_r+0x1a>
 800ea28:	6023      	str	r3, [r4, #0]
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	200011c8 	.word	0x200011c8

0800ea30 <_realloc_r>:
 800ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea34:	4607      	mov	r7, r0
 800ea36:	4614      	mov	r4, r2
 800ea38:	460d      	mov	r5, r1
 800ea3a:	b921      	cbnz	r1, 800ea46 <_realloc_r+0x16>
 800ea3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	4611      	mov	r1, r2
 800ea42:	f7fe be79 	b.w	800d738 <_malloc_r>
 800ea46:	b92a      	cbnz	r2, 800ea54 <_realloc_r+0x24>
 800ea48:	f7ff f9a4 	bl	800dd94 <_free_r>
 800ea4c:	4625      	mov	r5, r4
 800ea4e:	4628      	mov	r0, r5
 800ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea54:	f000 f81a 	bl	800ea8c <_malloc_usable_size_r>
 800ea58:	4284      	cmp	r4, r0
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	d802      	bhi.n	800ea64 <_realloc_r+0x34>
 800ea5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea62:	d8f4      	bhi.n	800ea4e <_realloc_r+0x1e>
 800ea64:	4621      	mov	r1, r4
 800ea66:	4638      	mov	r0, r7
 800ea68:	f7fe fe66 	bl	800d738 <_malloc_r>
 800ea6c:	4680      	mov	r8, r0
 800ea6e:	b908      	cbnz	r0, 800ea74 <_realloc_r+0x44>
 800ea70:	4645      	mov	r5, r8
 800ea72:	e7ec      	b.n	800ea4e <_realloc_r+0x1e>
 800ea74:	42b4      	cmp	r4, r6
 800ea76:	4622      	mov	r2, r4
 800ea78:	4629      	mov	r1, r5
 800ea7a:	bf28      	it	cs
 800ea7c:	4632      	movcs	r2, r6
 800ea7e:	f7ff f97a 	bl	800dd76 <memcpy>
 800ea82:	4629      	mov	r1, r5
 800ea84:	4638      	mov	r0, r7
 800ea86:	f7ff f985 	bl	800dd94 <_free_r>
 800ea8a:	e7f1      	b.n	800ea70 <_realloc_r+0x40>

0800ea8c <_malloc_usable_size_r>:
 800ea8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea90:	1f18      	subs	r0, r3, #4
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	bfbc      	itt	lt
 800ea96:	580b      	ldrlt	r3, [r1, r0]
 800ea98:	18c0      	addlt	r0, r0, r3
 800ea9a:	4770      	bx	lr

0800ea9c <_init>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	bf00      	nop
 800eaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa2:	bc08      	pop	{r3}
 800eaa4:	469e      	mov	lr, r3
 800eaa6:	4770      	bx	lr

0800eaa8 <_fini>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	bf00      	nop
 800eaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaae:	bc08      	pop	{r3}
 800eab0:	469e      	mov	lr, r3
 800eab2:	4770      	bx	lr
