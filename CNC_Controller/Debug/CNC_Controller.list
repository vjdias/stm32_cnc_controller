
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  08010458  08010458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010db8  08010db8  0001207c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010db8  08010db8  00011db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dc0  08010dc0  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dc0  08010dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010dc4  08010dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010dc8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000080  08010e44  00012080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000128c  08010e44  0001228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022606  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ea8  00000000  00000000  000346b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0003a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180f  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae11  00000000  00000000  0003dd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa5d  00000000  00000000  00068b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae54  00000000  00000000  00093595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e3e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a60  00000000  00000000  0018e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00196e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010440 	.word	0x08010440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08010440 	.word	0x08010440

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9d3 	b.w	8000638 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	4611      	mov	r1, r2
 8000648:	461a      	mov	r2, r3
 800064a:	460b      	mov	r3, r1
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	4613      	mov	r3, r2
 8000650:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d011      	beq.n	800067c <has_header_tail+0x40>
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d90e      	bls.n	800067c <has_header_tail+0x40>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	429a      	cmp	r2, r3
 8000666:	d109      	bne.n	800067c <has_header_tail+0x40>
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3b01      	subs	r3, #1
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	429a      	cmp	r2, r3
 8000676:	d101      	bne.n	800067c <has_header_tail+0x40>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <has_header_tail+0x42>
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <frame_expect_req+0x1e>
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d202      	bcs.n	80006ae <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	e012      	b.n	80006d4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80006ae:	2355      	movs	r3, #85	@ 0x55
 80006b0:	22aa      	movs	r2, #170	@ 0xaa
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff ffc1 	bl	800063c <has_header_tail>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d002      	beq.n	80006d2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	e000      	b.n	80006d4 <frame_expect_req+0x4a>
	return PROTO_OK;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <encoder_status_req_decoder>:
#include "Protocol/Requests/encoder_status_request.h"

int encoder_status_req_decoder(const uint8_t *raw, uint32_t len, encoder_status_req_t *out) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <encoder_status_req_decoder+0x18>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <encoder_status_req_decoder+0x1e>
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	e011      	b.n	800071e <encoder_status_req_decoder+0x42>
    int st = frame_expect_req(raw, len, REQ_ENCODER_STATUS, 4);
 80006fa:	2304      	movs	r3, #4
 80006fc:	2225      	movs	r2, #37	@ 0x25
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ffc2 	bl	800068a <frame_expect_req>
 8000706:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <encoder_status_req_decoder+0x36>
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	e005      	b.n	800071e <encoder_status_req_decoder+0x42>
    out->frameId = raw[2];
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3302      	adds	r3, #2
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	701a      	strb	r2, [r3, #0]
    return PROTO_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	4611      	mov	r1, r2
 8000732:	461a      	mov	r2, r3
 8000734:	460b      	mov	r3, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d011      	beq.n	8000766 <has_header_tail+0x40>
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d90e      	bls.n	8000766 <has_header_tail+0x40>
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	429a      	cmp	r2, r3
 8000750:	d109      	bne.n	8000766 <has_header_tail+0x40>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3b01      	subs	r3, #1
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d101      	bne.n	8000766 <has_header_tail+0x40>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <has_header_tail+0x42>
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b21b      	sxth	r3, r3
 8000782:	021b      	lsls	r3, r3, #8
 8000784:	b21a      	sxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3301      	adds	r3, #1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b21b      	sxth	r3, r3
 8000792:	b29b      	uxth	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <frame_expect_req+0x1e>
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d202      	bcs.n	80007c4 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e012      	b.n	80007ea <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80007c4:	2355      	movs	r3, #85	@ 0x55
 80007c6:	22aa      	movs	r2, #170	@ 0xaa
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f7ff ffab 	bl	8000726 <has_header_tail>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d002      	beq.n	80007e8 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80007e2:	f06f 0301 	mvn.w	r3, #1
 80007e6:	e000      	b.n	80007ea <frame_expect_req+0x4a>
	return PROTO_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <led_ctrl_req_decoder+0x18>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e02a      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b2a      	cmp	r3, #42	@ 0x2a
 8000814:	d902      	bls.n	800081c <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 8000816:	f06f 0303 	mvn.w	r3, #3
 800081a:	e024      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 800081c:	2309      	movs	r3, #9
 800081e:	2207      	movs	r2, #7
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff ffbc 	bl	80007a0 <frame_expect_req>
 8000828:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <led_ctrl_req_decoder+0x42>
        return st;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	e018      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3302      	adds	r3, #2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3303      	adds	r3, #3
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3304      	adds	r3, #4
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3305      	adds	r3, #5
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff8c 	bl	8000774 <be16_read>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <has_header_tail>:
		uint8_t header, uint8_t tail) {
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	4611      	mov	r1, r2
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d011      	beq.n	80008ae <has_header_tail+0x40>
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d90e      	bls.n	80008ae <has_header_tail+0x40>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	429a      	cmp	r2, r3
 8000898:	d109      	bne.n	80008ae <has_header_tail+0x40>
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3b01      	subs	r3, #1
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d101      	bne.n	80008ae <has_header_tail+0x40>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <has_header_tail+0x42>
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <frame_expect_req+0x1e>
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d202      	bcs.n	80008e0 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e012      	b.n	8000906 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008e0:	2355      	movs	r3, #85	@ 0x55
 80008e2:	22aa      	movs	r2, #170	@ 0xaa
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff ffc1 	bl	800086e <has_header_tail>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d002      	beq.n	8000904 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008fe:	f06f 0301 	mvn.w	r3, #1
 8000902:	e000      	b.n	8000906 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <move_end_req_decoder+0x18>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e011      	b.n	8000950 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 800092c:	2304      	movs	r3, #4
 800092e:	2206      	movs	r2, #6
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff ffc2 	bl	80008bc <frame_expect_req>
 8000938:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <move_end_req_decoder+0x36>
		return st;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	e005      	b.n	8000950 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3302      	adds	r3, #2
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	4611      	mov	r1, r2
 8000964:	461a      	mov	r2, r3
 8000966:	460b      	mov	r3, r1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	4613      	mov	r3, r2
 800096c:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d011      	beq.n	8000998 <has_header_tail+0x40>
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d90e      	bls.n	8000998 <has_header_tail+0x40>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d109      	bne.n	8000998 <has_header_tail+0x40>
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3b01      	subs	r3, #1
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	429a      	cmp	r2, r3
 8000992:	d101      	bne.n	8000998 <has_header_tail+0x40>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <has_header_tail+0x42>
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b21a      	sxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	b29b      	uxth	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	061a      	lsls	r2, r3, #24
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3302      	adds	r3, #2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	4313      	orrs	r3, r2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	3203      	adds	r2, #3
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <frame_expect_req+0x1e>
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d202      	bcs.n	8000a2c <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e012      	b.n	8000a52 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a2c:	2355      	movs	r3, #85	@ 0x55
 8000a2e:	22aa      	movs	r2, #170	@ 0xaa
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff90 	bl	8000958 <has_header_tail>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d002      	beq.n	8000a50 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000a4a:	f06f 0301 	mvn.w	r3, #1
 8000a4e:	e000      	b.n	8000a52 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <move_queue_add_req_decoder+0x18>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e09a      	b.n	8000bae <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 8000a78:	232a      	movs	r3, #42	@ 0x2a
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ffc2 	bl	8000a08 <frame_expect_req>
 8000a84:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <move_queue_add_req_decoder+0x36>
		return st;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	e08e      	b.n	8000bae <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3302      	adds	r3, #2
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3303      	adds	r3, #3
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff7c 	bl	80009a6 <be16_read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3306      	adds	r3, #6
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff89 	bl	80009d2 <be32_read>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	330a      	adds	r3, #10
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff6b 	bl	80009a6 <be16_read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	330c      	adds	r3, #12
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff78 	bl	80009d2 <be32_read>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3310      	adds	r3, #16
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5a 	bl	80009a6 <be16_read>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3312      	adds	r3, #18
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff67 	bl	80009d2 <be32_read>
 8000b04:	4602      	mov	r2, r0
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3316      	adds	r3, #22
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff49 	bl	80009a6 <be16_read>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3318      	adds	r3, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff40 	bl	80009a6 <be16_read>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	331a      	adds	r3, #26
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff37 	bl	80009a6 <be16_read>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	331c      	adds	r3, #28
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff2e 	bl	80009a6 <be16_read>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	331e      	adds	r3, #30
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff25 	bl	80009a6 <be16_read>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3320      	adds	r3, #32
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff1c 	bl	80009a6 <be16_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3322      	adds	r3, #34	@ 0x22
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff13 	bl	80009a6 <be16_read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3324      	adds	r3, #36	@ 0x24
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff0a 	bl	80009a6 <be16_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3326      	adds	r3, #38	@ 0x26
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff01 	bl	80009a6 <be16_read>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d011      	beq.n	8000bf6 <has_header_tail+0x40>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d90e      	bls.n	8000bf6 <has_header_tail+0x40>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d109      	bne.n	8000bf6 <has_header_tail+0x40>
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d101      	bne.n	8000bf6 <has_header_tail+0x40>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <has_header_tail+0x42>
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <frame_expect_req+0x1e>
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d202      	bcs.n	8000c28 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e012      	b.n	8000c4e <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000c28:	2355      	movs	r3, #85	@ 0x55
 8000c2a:	22aa      	movs	r2, #170	@ 0xaa
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ffc1 	bl	8000bb6 <has_header_tail>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d002      	beq.n	8000c4c <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000c46:	f06f 0301 	mvn.w	r3, #1
 8000c4a:	e000      	b.n	8000c4e <frame_expect_req+0x4a>
	return PROTO_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <move_queue_status_req_decoder+0x18>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e011      	b.n	8000c98 <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000c74:	2304      	movs	r3, #4
 8000c76:	2202      	movs	r2, #2
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff ffc2 	bl	8000c04 <frame_expect_req>
 8000c80:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <move_queue_status_req_decoder+0x36>
		return st;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	e005      	b.n	8000c98 <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d011      	beq.n	8000ce0 <has_header_tail+0x40>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d90e      	bls.n	8000ce0 <has_header_tail+0x40>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d109      	bne.n	8000ce0 <has_header_tail+0x40>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d101      	bne.n	8000ce0 <has_header_tail+0x40>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <has_header_tail+0x42>
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <frame_expect_req+0x1e>
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d202      	bcs.n	8000d12 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	e012      	b.n	8000d38 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000d12:	2355      	movs	r3, #85	@ 0x55
 8000d14:	22aa      	movs	r2, #170	@ 0xaa
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff ffc1 	bl	8000ca0 <has_header_tail>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d002      	beq.n	8000d36 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000d30:	f06f 0301 	mvn.w	r3, #1
 8000d34:	e000      	b.n	8000d38 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <set_microsteps_req_decoder>:
#include "Protocol/Requests/set_microsteps_request.h"

int set_microsteps_req_decoder(const uint8_t *raw, uint32_t len, set_microsteps_req_t *out) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <set_microsteps_req_decoder+0x18>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <set_microsteps_req_decoder+0x1e>
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	e017      	b.n	8000d8e <set_microsteps_req_decoder+0x4e>
    int st = frame_expect_req(raw, len, REQ_SET_MICROSTEPS, 5);
 8000d5e:	2305      	movs	r3, #5
 8000d60:	2226      	movs	r2, #38	@ 0x26
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ffc2 	bl	8000cee <frame_expect_req>
 8000d6a:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <set_microsteps_req_decoder+0x36>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	e00b      	b.n	8000d8e <set_microsteps_req_decoder+0x4e>
    out->frameId = raw[2];
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	701a      	strb	r2, [r3, #0]
    out->microsteps = (uint16_t)raw[3];
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3303      	adds	r3, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	805a      	strh	r2, [r3, #2]
    return PROTO_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	4611      	mov	r1, r2
 8000da2:	461a      	mov	r2, r3
 8000da4:	460b      	mov	r3, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d011      	beq.n	8000dd6 <has_header_tail+0x40>
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d90e      	bls.n	8000dd6 <has_header_tail+0x40>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d109      	bne.n	8000dd6 <has_header_tail+0x40>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d101      	bne.n	8000dd6 <has_header_tail+0x40>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <has_header_tail+0x42>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <frame_expect_req+0x1e>
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d202      	bcs.n	8000e08 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e012      	b.n	8000e2e <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000e08:	2355      	movs	r3, #85	@ 0x55
 8000e0a:	22aa      	movs	r2, #170	@ 0xaa
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ffc1 	bl	8000d96 <has_header_tail>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d002      	beq.n	8000e2c <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000e26:	f06f 0301 	mvn.w	r3, #1
 8000e2a:	e000      	b.n	8000e2e <frame_expect_req+0x4a>
	return PROTO_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <set_origin_req_decoder>:
#include "Protocol/Requests/set_origin_request.h"

int set_origin_req_decoder(const uint8_t *raw, uint32_t len, set_origin_req_t *out) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <set_origin_req_decoder+0x18>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <set_origin_req_decoder+0x1e>
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e01e      	b.n	8000e92 <set_origin_req_decoder+0x5c>
    int st = frame_expect_req(raw, len, REQ_SET_ORIGIN, 6);
 8000e54:	2306      	movs	r3, #6
 8000e56:	2224      	movs	r2, #36	@ 0x24
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff ffc2 	bl	8000de4 <frame_expect_req>
 8000e60:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <set_origin_req_decoder+0x36>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	e012      	b.n	8000e92 <set_origin_req_decoder+0x5c>
    out->frameId = raw[2];
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	701a      	strb	r2, [r3, #0]
    out->mask = raw[3] & 0x07u;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3303      	adds	r3, #3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	705a      	strb	r2, [r3, #1]
    out->mode = raw[4];
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	709a      	strb	r2, [r3, #2]
    return PROTO_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d011      	beq.n	8000eda <has_header_tail+0x40>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d90e      	bls.n	8000eda <has_header_tail+0x40>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d109      	bne.n	8000eda <has_header_tail+0x40>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d101      	bne.n	8000eda <has_header_tail+0x40>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <has_header_tail+0x42>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <frame_expect_req+0x1e>
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d202      	bcs.n	8000f0c <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e012      	b.n	8000f32 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000f0c:	2355      	movs	r3, #85	@ 0x55
 8000f0e:	22aa      	movs	r2, #170	@ 0xaa
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff ffc1 	bl	8000e9a <has_header_tail>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d002      	beq.n	8000f30 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000f2a:	f06f 0301 	mvn.w	r3, #1
 8000f2e:	e000      	b.n	8000f32 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <start_move_req_decoder+0x18>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e011      	b.n	8000f7c <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000f58:	2304      	movs	r3, #4
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <frame_expect_req>
 8000f64:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <start_move_req_decoder+0x36>
		return st;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	e005      	b.n	8000f7c <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3302      	adds	r3, #2
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <be32_write>:
}
static inline void be16_write(uint8_t *p, uint16_t v) {
	p[0] = (uint8_t) (v >> 8);
	p[1] = (uint8_t) v;
}
static inline void be32_write(uint8_t *p, uint32_t v) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	p[0] = (uint8_t) (v >> 24);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	0e1b      	lsrs	r3, r3, #24
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	701a      	strb	r2, [r3, #0]
	p[1] = (uint8_t) (v >> 16);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
	p[2] = (uint8_t) (v >> 8);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	0a1a      	lsrs	r2, r3, #8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
	p[3] = (uint8_t) v;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	22ab      	movs	r2, #171	@ 0xab
 8000fd6:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2254      	movs	r2, #84	@ 0x54
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <encoder_status_resp_encoder>:
#include "Protocol/Responses/encoder_status_response.h"

int encoder_status_resp_encoder(const encoder_status_resp_t *in, uint8_t *raw, uint32_t len) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    if (!raw || !in || len < 20) return PROTO_ERR_ARG;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <encoder_status_resp_encoder+0x1e>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <encoder_status_resp_encoder+0x1e>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b13      	cmp	r3, #19
 8001028:	d802      	bhi.n	8001030 <encoder_status_resp_encoder+0x24>
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e03b      	b.n	80010a8 <encoder_status_resp_encoder+0x9c>
    resp_init(raw, RESP_ENCODER_STATUS);
 8001030:	2125      	movs	r1, #37	@ 0x25
 8001032:	68b8      	ldr	r0, [r7, #8]
 8001034:	f7ff ffc7 	bl	8000fc6 <resp_init>
    raw[2] = in->frameId;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3302      	adds	r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	701a      	strb	r2, [r3, #0]
    raw[3] = in->pidErrX;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3303      	adds	r3, #3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	7852      	ldrb	r2, [r2, #1]
 800104a:	701a      	strb	r2, [r3, #0]
    raw[4] = in->pidErrY;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3304      	adds	r3, #4
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	7892      	ldrb	r2, [r2, #2]
 8001054:	701a      	strb	r2, [r3, #0]
    raw[5] = in->pidErrZ;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3305      	adds	r3, #5
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	78d2      	ldrb	r2, [r2, #3]
 800105e:	701a      	strb	r2, [r3, #0]
    raw[6] = in->delta;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3306      	adds	r3, #6
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	7912      	ldrb	r2, [r2, #4]
 8001068:	701a      	strb	r2, [r3, #0]
    be32_write(&raw[7],  (uint32_t)in->absX);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1dda      	adds	r2, r3, #7
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f7ff ff85 	bl	8000f84 <be32_write>
    be32_write(&raw[11], (uint32_t)in->absY);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f103 020b 	add.w	r2, r3, #11
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff ff7c 	bl	8000f84 <be32_write>
    be32_write(&raw[15], (uint32_t)in->absZ);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f103 020f 	add.w	r2, r3, #15
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f7ff ff73 	bl	8000f84 <be32_write>
    resp_set_tail(raw, 19);
 800109e:	2113      	movs	r1, #19
 80010a0:	68b8      	ldr	r0, [r7, #8]
 80010a2:	f7ff ffa3 	bl	8000fec <resp_set_tail>
    return PROTO_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <xor_reduce_bytes>:
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e009      	b.n	80010d8 <xor_reduce_bytes+0x28>
		x ^= p[i];
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4053      	eors	r3, r2
 80010d0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3f1      	bcc.n	80010c4 <xor_reduce_bytes+0x14>
	return x;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <set_parity_byte>:
		uint32_t parity_index) {
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	603b      	str	r3, [r7, #0]
	if (!raw)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <set_parity_byte+0x1a>
		return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e00b      	b.n	8001120 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	18d0      	adds	r0, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	18d4      	adds	r4, r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f7ff ffcb 	bl	80010b0 <xor_reduce_bytes>
 800111a:	4603      	mov	r3, r0
 800111c:	7023      	strb	r3, [r4, #0]
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22ab      	movs	r2, #171	@ 0xab
 8001138:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	2254      	movs	r2, #84	@ 0x54
 8001160:	701a      	strb	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	2101      	movs	r1, #1
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ffb4 	bl	80010ee <set_parity_byte>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <led_ctrl_resp_encoder+0x1e>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <led_ctrl_resp_encoder+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d802      	bhi.n	80011b4 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e01c      	b.n	80011ee <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80011b4:	2107      	movs	r1, #7
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff ffb6 	bl	8001128 <resp_init>
	raw[2] = in->frameId;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3302      	adds	r3, #2
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3303      	adds	r3, #3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	7852      	ldrb	r2, [r2, #1]
 80011ce:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3304      	adds	r3, #4
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	7892      	ldrb	r2, [r2, #2]
 80011d8:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 80011da:	2205      	movs	r2, #5
 80011dc:	2104      	movs	r1, #4
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff ffc5 	bl	800116e <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 80011e4:	2106      	movs	r1, #6
 80011e6:	68b8      	ldr	r0, [r7, #8]
 80011e8:	f7ff ffb1 	bl	800114e <resp_set_tail>
	return PROTO_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	22ab      	movs	r2, #171	@ 0xab
 8001206:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <move_end_resp_encoder>:
		return st;
	out->frameId = raw[2];
	out->status  = raw[3];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 5)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <move_end_resp_encoder+0x1e>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <move_end_resp_encoder+0x1e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d802      	bhi.n	8001260 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e012      	b.n	8001286 <move_end_resp_encoder+0x4a>
	resp_init(raw, RESP_MOVE_END);
 8001260:	2106      	movs	r1, #6
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f7ff ffc7 	bl	80011f6 <resp_init>
	raw[2] = in->frameId;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3302      	adds	r3, #2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3303      	adds	r3, #3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	7852      	ldrb	r2, [r2, #1]
 800127a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 4);
 800127c:	2104      	movs	r1, #4
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff ffcc 	bl	800121c <resp_set_tail>
	return PROTO_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e009      	b.n	80012b6 <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4413      	add	r3, r2
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	4053      	eors	r3, r2
 80012ae:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3f1      	bcc.n	80012a2 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	4053      	eors	r3, r2
 80012c8:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4053      	eors	r3, r2
 80012d4:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	4053      	eors	r3, r2
 80012e0:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <set_parity_bit>:
		uint32_t parity_index) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
	if (!raw)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <set_parity_bit+0x1a>
		return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e010      	b.n	8001332 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4413      	add	r3, r2
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffb8 	bl	800128e <xor_bit_reduce_bytes>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	f001 0201 	and.w	r2, r1, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	22ab      	movs	r2, #171	@ 0xab
 800134a:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	78fa      	ldrb	r2, [r7, #3]
 8001352:	701a      	strb	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	2254      	movs	r2, #84	@ 0x54
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	2101      	movs	r1, #1
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff ffaf 	bl	80012f6 <set_parity_bit>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <move_queue_add_ack_resp_encoder+0x1e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <move_queue_add_ack_resp_encoder+0x1e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d802      	bhi.n	80013c6 <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	e017      	b.n	80013f6 <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 80013c6:	2101      	movs	r1, #1
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f7ff ffb6 	bl	800133a <resp_init>
	raw[2] = in->frameId;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3302      	adds	r3, #2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3303      	adds	r3, #3
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	7852      	ldrb	r2, [r2, #1]
 80013e0:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 80013e2:	2204      	movs	r2, #4
 80013e4:	2103      	movs	r1, #3
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f7ff ffca 	bl	8001380 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 80013ec:	2105      	movs	r1, #5
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f7ff ffb6 	bl	8001360 <resp_set_tail>
	return PROTO_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	e009      	b.n	8001426 <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	4053      	eors	r3, r2
 800141e:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3301      	adds	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d3f1      	bcc.n	8001412 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b2da      	uxtb	r2, r3
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	4053      	eors	r3, r2
 8001438:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	4053      	eors	r3, r2
 8001444:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4053      	eors	r3, r2
 8001450:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <set_parity_bit>:
		uint32_t parity_index) {
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	603b      	str	r3, [r7, #0]
	if (!raw)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <set_parity_bit+0x1a>
		return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e010      	b.n	80014a2 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4413      	add	r3, r2
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffb8 	bl	80013fe <xor_bit_reduce_bytes>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	f001 0201 	and.w	r2, r1, #1
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	22ab      	movs	r2, #171	@ 0xab
 80014ba:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	701a      	strb	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	2254      	movs	r2, #84	@ 0x54
 80014e2:	701a      	strb	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <parity_set_bit_1N>:
		uint32_t parity_index) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	2101      	movs	r1, #1
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff ffaf 	bl	8001466 <set_parity_bit>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <move_queue_status_resp_encoder+0x1e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <move_queue_status_resp_encoder+0x1e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0b      	cmp	r3, #11
 800152e:	d802      	bhi.n	8001536 <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	e035      	b.n	80015a2 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 8001536:	2102      	movs	r1, #2
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff ffb6 	bl	80014aa <resp_init>
	raw[2] = in->frameId;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3302      	adds	r3, #2
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	3303      	adds	r3, #3
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	7852      	ldrb	r2, [r2, #1]
 8001550:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3304      	adds	r3, #4
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	7892      	ldrb	r2, [r2, #2]
 800155a:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3305      	adds	r3, #5
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	78d2      	ldrb	r2, [r2, #3]
 8001564:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3306      	adds	r3, #6
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	7912      	ldrb	r2, [r2, #4]
 800156e:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3307      	adds	r3, #7
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	7952      	ldrb	r2, [r2, #5]
 8001578:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3308      	adds	r3, #8
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	7992      	ldrb	r2, [r2, #6]
 8001582:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3309      	adds	r3, #9
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	79d2      	ldrb	r2, [r2, #7]
 800158c:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 800158e:	220a      	movs	r2, #10
 8001590:	2109      	movs	r1, #9
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff ffac 	bl	80014f0 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 8001598:	210b      	movs	r1, #11
 800159a:	68b8      	ldr	r0, [r7, #8]
 800159c:	f7ff ff98 	bl	80014d0 <resp_set_tail>
	return PROTO_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <be32_write>:
static inline void be32_write(uint8_t *p, uint32_t v) {
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	p[0] = (uint8_t) (v >> 24);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0e1b      	lsrs	r3, r3, #24
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	701a      	strb	r2, [r3, #0]
	p[1] = (uint8_t) (v >> 16);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	0c1a      	lsrs	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
	p[2] = (uint8_t) (v >> 8);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	0a1a      	lsrs	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3302      	adds	r3, #2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
	p[3] = (uint8_t) v;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3303      	adds	r3, #3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	22ab      	movs	r2, #171	@ 0xab
 80015fc:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	2254      	movs	r2, #84	@ 0x54
 8001624:	701a      	strb	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <set_origin_resp_encoder>:
#include "Protocol/Responses/set_origin_response.h"

int set_origin_resp_encoder(const set_origin_resp_t *in, uint8_t *raw, uint32_t len) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
    if (!raw || !in || len < 16) return PROTO_ERR_ARG;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <set_origin_resp_encoder+0x1e>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <set_origin_resp_encoder+0x1e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d802      	bhi.n	8001656 <set_origin_resp_encoder+0x24>
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	e026      	b.n	80016a4 <set_origin_resp_encoder+0x72>
    resp_init(raw, RESP_SET_ORIGIN);
 8001656:	2124      	movs	r1, #36	@ 0x24
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f7ff ffc7 	bl	80015ec <resp_init>
    raw[2] = in->frameId;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3302      	adds	r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	701a      	strb	r2, [r3, #0]
    be32_write(&raw[3], (uint32_t)in->x0);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1cda      	adds	r2, r3, #3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7ff ff99 	bl	80015aa <be32_write>
    be32_write(&raw[7], (uint32_t)in->y0);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1dda      	adds	r2, r3, #7
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff ff91 	bl	80015aa <be32_write>
    be32_write(&raw[11], (uint32_t)in->z0);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f103 020b 	add.w	r2, r3, #11
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff ff88 	bl	80015aa <be32_write>
    resp_set_tail(raw, 15);
 800169a:	210f      	movs	r1, #15
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f7ff ffb8 	bl	8001612 <resp_set_tail>
    return PROTO_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	22ab      	movs	r2, #171	@ 0xab
 80016bc:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	701a      	strb	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	2254      	movs	r2, #84	@ 0x54
 80016e4:	701a      	strb	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <start_move_resp_encoder>:
	out->frameId = raw[2];
	out->status = raw[3];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 5)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <start_move_resp_encoder+0x1e>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <start_move_resp_encoder+0x1e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b04      	cmp	r3, #4
 800170e:	d802      	bhi.n	8001716 <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e012      	b.n	800173c <start_move_resp_encoder+0x4a>
	resp_init(raw, RESP_START_MOVE);
 8001716:	2103      	movs	r1, #3
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f7ff ffc7 	bl	80016ac <resp_init>
	raw[2] = in->frameId;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3303      	adds	r3, #3
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	7852      	ldrb	r2, [r2, #1]
 8001730:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 4);
 8001732:	2104      	movs	r1, #4
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f7ff ffcc 	bl	80016d2 <resp_set_tail>
	return PROTO_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001748:	210c      	movs	r1, #12
 800174a:	2001      	movs	r0, #1
 800174c:	f00d fc1a 	bl	800ef84 <calloc>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}

08001756 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <resp_fifo_push+0x1e>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <resp_fifo_push+0x1e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <resp_fifo_push+0x24>
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	e03d      	b.n	80017f6 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 800177a:	200c      	movs	r0, #12
 800177c:	f00d fc1e 	bl	800efbc <malloc>
 8001780:	4603      	mov	r3, r0
 8001782:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <resp_fifo_push+0x3a>
 800178a:	f06f 0302 	mvn.w	r3, #2
 800178e:	e032      	b.n	80017f6 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f00d fc13 	bl	800efbc <malloc>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <resp_fifo_push+0x5c>
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f00d fc10 	bl	800efcc <free>
 80017ac:	f06f 0302 	mvn.w	r3, #2
 80017b0:	e021      	b.n	80017f6 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00e f841 	bl	800f842 <memcpy>
    n->len = len;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <resp_fifo_push+0x88>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	e002      	b.n	80017e4 <resp_fifo_push+0x8e>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
    q->tail = n;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	605a      	str	r2, [r3, #4]
    q->count++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <resp_fifo_pop+0x20>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <resp_fifo_pop+0x20>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <resp_fifo_pop+0x24>
 800181e:	2300      	movs	r3, #0
 8001820:	e02e      	b.n	8001880 <resp_fifo_pop+0x82>
    node_t *n = q->head;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	d202      	bcs.n	8001838 <resp_fifo_pop+0x3a>
 8001832:	f06f 0303 	mvn.w	r3, #3
 8001836:	e023      	b.n	8001880 <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	6819      	ldr	r1, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	461a      	mov	r2, r3
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f00d fffd 	bl	800f842 <memcpy>
    int ret = (int)n->len;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <resp_fifo_pop+0x66>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
    q->count--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	609a      	str	r2, [r3, #8]
    free(n->buf);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f00d fbaa 	bl	800efcc <free>
    free(n);
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f00d fba7 	bl	800efcc <free>
    return ret;
 800187e:	693b      	ldr	r3, [r7, #16]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
    if (!r) return;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01c      	beq.n	80018d4 <router_init+0x4c>
    memset(r, 0, sizeof(*r));
 800189a:	2248      	movs	r2, #72	@ 0x48
 800189c:	2100      	movs	r1, #0
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f00d ff44 	bl	800f72c <memset>
    r->resp = resp_fifo;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80018aa:	2230      	movs	r2, #48	@ 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	480b      	ldr	r0, [pc, #44]	@ (80018dc <router_init+0x54>)
 80018b0:	f00d ff3c 	bl	800f72c <memset>
    if (h) g_handlers = *h;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00d      	beq.n	80018d6 <router_init+0x4e>
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <router_init+0x54>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4614      	mov	r4, r2
 80018c0:	461d      	mov	r5, r3
 80018c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018d2:	e000      	b.n	80018d6 <router_init+0x4e>
    if (!r) return;
 80018d4:	bf00      	nop
}
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bdb0      	pop	{r4, r5, r7, pc}
 80018dc:	2000009c 	.word	0x2000009c

080018e0 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80ee 	beq.w	8001ad0 <dispatch+0x1f0>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80ea 	beq.w	8001ad0 <dispatch+0x1f0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	f240 80e6 	bls.w	8001ad0 <dispatch+0x1f0>
    uint8_t type = f[1];
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b26      	cmp	r3, #38	@ 0x26
 8001910:	dc56      	bgt.n	80019c0 <dispatch+0xe0>
 8001912:	2b00      	cmp	r3, #0
 8001914:	f340 80de 	ble.w	8001ad4 <dispatch+0x1f4>
 8001918:	3b01      	subs	r3, #1
 800191a:	2b25      	cmp	r3, #37	@ 0x25
 800191c:	f200 80da 	bhi.w	8001ad4 <dispatch+0x1f4>
 8001920:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <dispatch+0x48>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	080019c7 	.word	0x080019c7
 800192c:	080019df 	.word	0x080019df
 8001930:	080019f5 	.word	0x080019f5
 8001934:	08001a0b 	.word	0x08001a0b
 8001938:	08001a21 	.word	0x08001a21
 800193c:	08001a37 	.word	0x08001a37
 8001940:	08001a4d 	.word	0x08001a4d
 8001944:	08001ad5 	.word	0x08001ad5
 8001948:	08001ad5 	.word	0x08001ad5
 800194c:	08001ad5 	.word	0x08001ad5
 8001950:	08001ad5 	.word	0x08001ad5
 8001954:	08001ad5 	.word	0x08001ad5
 8001958:	08001ad5 	.word	0x08001ad5
 800195c:	08001ad5 	.word	0x08001ad5
 8001960:	08001ad5 	.word	0x08001ad5
 8001964:	08001ad5 	.word	0x08001ad5
 8001968:	08001ad5 	.word	0x08001ad5
 800196c:	08001ad5 	.word	0x08001ad5
 8001970:	08001ad5 	.word	0x08001ad5
 8001974:	08001ad5 	.word	0x08001ad5
 8001978:	08001ad5 	.word	0x08001ad5
 800197c:	08001ad5 	.word	0x08001ad5
 8001980:	08001ad5 	.word	0x08001ad5
 8001984:	08001ad5 	.word	0x08001ad5
 8001988:	08001ad5 	.word	0x08001ad5
 800198c:	08001ad5 	.word	0x08001ad5
 8001990:	08001ad5 	.word	0x08001ad5
 8001994:	08001ad5 	.word	0x08001ad5
 8001998:	08001ad5 	.word	0x08001ad5
 800199c:	08001ad5 	.word	0x08001ad5
 80019a0:	08001ad5 	.word	0x08001ad5
 80019a4:	08001a63 	.word	0x08001a63
 80019a8:	08001ad5 	.word	0x08001ad5
 80019ac:	08001ad5 	.word	0x08001ad5
 80019b0:	08001ad5 	.word	0x08001ad5
 80019b4:	08001a79 	.word	0x08001a79
 80019b8:	08001a8f 	.word	0x08001a8f
 80019bc:	08001aa5 	.word	0x08001aa5
 80019c0:	2b68      	cmp	r3, #104	@ 0x68
 80019c2:	d07a      	beq.n	8001aba <dispatch+0x1da>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80019c4:	e086      	b.n	8001ad4 <dispatch+0x1f4>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80019c6:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <dispatch+0x22c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8084 	beq.w	8001ad8 <dispatch+0x1f8>
 80019d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b0c <dispatch+0x22c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	4798      	blx	r3
 80019dc:	e07c      	b.n	8001ad8 <dispatch+0x1f8>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80019de:	4b4b      	ldr	r3, [pc, #300]	@ (8001b0c <dispatch+0x22c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d07a      	beq.n	8001adc <dispatch+0x1fc>
 80019e6:	4b49      	ldr	r3, [pc, #292]	@ (8001b0c <dispatch+0x22c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	4798      	blx	r3
 80019f2:	e073      	b.n	8001adc <dispatch+0x1fc>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80019f4:	4b45      	ldr	r3, [pc, #276]	@ (8001b0c <dispatch+0x22c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d071      	beq.n	8001ae0 <dispatch+0x200>
 80019fc:	4b43      	ldr	r3, [pc, #268]	@ (8001b0c <dispatch+0x22c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	4798      	blx	r3
 8001a08:	e06a      	b.n	8001ae0 <dispatch+0x200>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001a0a:	4b40      	ldr	r3, [pc, #256]	@ (8001b0c <dispatch+0x22c>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d068      	beq.n	8001ae4 <dispatch+0x204>
 8001a12:	4b3e      	ldr	r3, [pc, #248]	@ (8001b0c <dispatch+0x22c>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	4798      	blx	r3
 8001a1e:	e061      	b.n	8001ae4 <dispatch+0x204>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	@ (8001b0c <dispatch+0x22c>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d05f      	beq.n	8001ae8 <dispatch+0x208>
 8001a28:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <dispatch+0x22c>)
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	4798      	blx	r3
 8001a34:	e058      	b.n	8001ae8 <dispatch+0x208>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001a36:	4b35      	ldr	r3, [pc, #212]	@ (8001b0c <dispatch+0x22c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d056      	beq.n	8001aec <dispatch+0x20c>
 8001a3e:	4b33      	ldr	r3, [pc, #204]	@ (8001b0c <dispatch+0x22c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	4798      	blx	r3
 8001a4a:	e04f      	b.n	8001aec <dispatch+0x20c>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <dispatch+0x22c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d04d      	beq.n	8001af0 <dispatch+0x210>
 8001a54:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <dispatch+0x22c>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	4798      	blx	r3
 8001a60:	e046      	b.n	8001af0 <dispatch+0x210>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <dispatch+0x22c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d044      	beq.n	8001af4 <dispatch+0x214>
 8001a6a:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <dispatch+0x22c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	4798      	blx	r3
 8001a76:	e03d      	b.n	8001af4 <dispatch+0x214>
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
 8001a78:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <dispatch+0x22c>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03b      	beq.n	8001af8 <dispatch+0x218>
 8001a80:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <dispatch+0x22c>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4798      	blx	r3
 8001a8c:	e034      	b.n	8001af8 <dispatch+0x218>
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <dispatch+0x22c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d032      	beq.n	8001afc <dispatch+0x21c>
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <dispatch+0x22c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	4798      	blx	r3
 8001aa2:	e02b      	b.n	8001afc <dispatch+0x21c>
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <dispatch+0x22c>)
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d029      	beq.n	8001b00 <dispatch+0x220>
 8001aac:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <dispatch+0x22c>)
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	4798      	blx	r3
 8001ab8:	e022      	b.n	8001b00 <dispatch+0x220>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001aba:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <dispatch+0x22c>)
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d020      	beq.n	8001b04 <dispatch+0x224>
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <dispatch+0x22c>)
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	4798      	blx	r3
 8001ace:	e019      	b.n	8001b04 <dispatch+0x224>
    if (!r || !f || len < 4) return;
 8001ad0:	bf00      	nop
 8001ad2:	e018      	b.n	8001b06 <dispatch+0x226>
        default: /* desconhecido */  break;
 8001ad4:	bf00      	nop
 8001ad6:	e016      	b.n	8001b06 <dispatch+0x226>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8001ad8:	bf00      	nop
 8001ada:	e014      	b.n	8001b06 <dispatch+0x226>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8001adc:	bf00      	nop
 8001ade:	e012      	b.n	8001b06 <dispatch+0x226>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001ae0:	bf00      	nop
 8001ae2:	e010      	b.n	8001b06 <dispatch+0x226>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001ae4:	bf00      	nop
 8001ae6:	e00e      	b.n	8001b06 <dispatch+0x226>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8001ae8:	bf00      	nop
 8001aea:	e00c      	b.n	8001b06 <dispatch+0x226>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001aec:	bf00      	nop
 8001aee:	e00a      	b.n	8001b06 <dispatch+0x226>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8001af0:	bf00      	nop
 8001af2:	e008      	b.n	8001b06 <dispatch+0x226>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
 8001af4:	bf00      	nop
 8001af6:	e006      	b.n	8001b06 <dispatch+0x226>
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
 8001af8:	bf00      	nop
 8001afa:	e004      	b.n	8001b06 <dispatch+0x226>
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
 8001afc:	bf00      	nop
 8001afe:	e002      	b.n	8001b06 <dispatch+0x226>
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
 8001b00:	bf00      	nop
 8001b02:	e000      	b.n	8001b06 <dispatch+0x226>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001b04:	bf00      	nop
    }
    #undef CALL
}
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000009c 	.word	0x2000009c

08001b10 <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d016      	beq.n	8001b50 <router_feed_bytes+0x40>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <router_feed_bytes+0x40>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d910      	bls.n	8001b50 <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2baa      	cmp	r3, #170	@ 0xaa
 8001b34:	d10e      	bne.n	8001b54 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b55      	cmp	r3, #85	@ 0x55
 8001b42:	d109      	bne.n	8001b58 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fec9 	bl	80018e0 <dispatch>
 8001b4e:	e004      	b.n	8001b5a <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001b50:	bf00      	nop
 8001b52:	e002      	b.n	8001b5a <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001b58:	bf00      	nop
}
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <home_service_init+0x34>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <home_service_init+0x34>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <home_service_init+0x38>)
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <home_service_init+0x3c>)
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <home_service_init+0x40>)
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <home_service_init+0x44>)
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2003      	movs	r0, #3
 8001b88:	f000 fd3a 	bl	8002600 <log_event_auto>
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000cc 	.word	0x200000cc
 8001b98:	08010458 	.word	0x08010458
 8001b9c:	08010460 	.word	0x08010460
 8001ba0:	08010464 	.word	0x08010464
 8001ba4:	08010468 	.word	0x08010468

08001ba8 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af04      	add	r7, sp, #16
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001bb2:	4a08      	ldr	r2, [pc, #32]	@ (8001bd4 <home_on_move_home+0x2c>)
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <home_on_move_home+0x30>)
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <home_on_move_home+0x34>)
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <home_on_move_home+0x38>)
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f000 fd1a 	bl	8002600 <log_event_auto>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	08010458 	.word	0x08010458
 8001bd8:	08010470 	.word	0x08010470
 8001bdc:	08010464 	.word	0x08010464
 8001be0:	08010480 	.word	0x08010480

08001be4 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    if (!led)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d019      	beq.n	8001c26 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	889b      	ldrh	r3, [r3, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f107 020c 	add.w	r2, r7, #12
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fb62 	bl	80072e8 <HAL_GPIO_Init>
 8001c24:	e000      	b.n	8001c28 <led_gpio_config_output+0x44>
        return;
 8001c26:	bf00      	nop
}
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b088      	sub	sp, #32
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
    if (!led)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01c      	beq.n	8001c76 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f005 fb3a 	bl	80072e8 <HAL_GPIO_Init>
 8001c74:	e000      	b.n	8001c78 <led_gpio_config_pwm+0x4a>
        return;
 8001c76:	bf00      	nop
}
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	733b      	strb	r3, [r7, #12]
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	737b      	strb	r3, [r7, #13]
 8001c9a:	797b      	ldrb	r3, [r7, #5]
 8001c9c:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8001c9e:	f107 0110 	add.w	r1, r7, #16
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fa71 	bl	8001190 <led_ctrl_resp_encoder>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001cb4:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <led_push_response+0x80>)
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <led_push_response+0x84>)
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <led_push_response+0x88>)
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	f06f 0201 	mvn.w	r2, #1
 8001cc4:	2164      	movs	r1, #100	@ 0x64
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f000 fc9a 	bl	8002600 <log_event_auto>
 8001ccc:	e014      	b.n	8001cf8 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2107      	movs	r1, #7
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fc67 	bl	80055a8 <app_resp_push>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <led_push_response+0x80>)
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <led_push_response+0x8c>)
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <led_push_response+0x88>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	f06f 0203 	mvn.w	r2, #3
 8001cf0:	2164      	movs	r1, #100	@ 0x64
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 fc84 	bl	8002600 <log_event_auto>
    }
}
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	0801048c 	.word	0x0801048c
 8001d04:	08010490 	.word	0x08010490
 8001d08:	080104ac 	.word	0x080104ac
 8001d0c:	080104b4 	.word	0x080104b4

08001d10 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 8001d16:	f007 fa9f 	bl	8009258 <HAL_RCC_GetPCLK2Freq>
 8001d1a:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <led_timer_get_clock+0x34>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001d24:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <led_timer_get_clock+0x28>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000

08001d48 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b094      	sub	sp, #80	@ 0x50
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001d54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <led_compute_period_ticks+0x16>
        return 0u;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e066      	b.n	8001e2c <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 8001d5e:	f7ff ffd7 	bl	8001d10 <led_timer_get_clock>
 8001d62:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <led_compute_period_ticks+0xf0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 8001d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <led_compute_period_ticks+0x2e>
        return 0u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e05a      	b.n	8001e2c <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <led_compute_period_ticks+0x42>
        return 0u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e050      	b.n	8001e2c <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4698      	mov	r8, r3
 8001d90:	4691      	mov	r9, r2
 8001d92:	4642      	mov	r2, r8
 8001d94:	464b      	mov	r3, r9
 8001d96:	1891      	adds	r1, r2, r2
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	415b      	adcs	r3, r3
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da2:	eb12 0408 	adds.w	r4, r2, r8
 8001da6:	eb43 0509 	adc.w	r5, r3, r9
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	016b      	lsls	r3, r5, #5
 8001db4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001db8:	0162      	lsls	r2, r4, #5
 8001dba:	eb14 0a02 	adds.w	sl, r4, r2
 8001dbe:	eb45 0b03 	adc.w	fp, r5, r3
 8001dc2:	eb1a 0308 	adds.w	r3, sl, r8
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	eb4b 0309 	adc.w	r3, fp, r9
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001dd2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8001dd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2200      	movs	r2, #0
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	627a      	str	r2, [r7, #36]	@ 0x24
 8001de4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001de8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001dec:	4621      	mov	r1, r4
 8001dee:	1889      	adds	r1, r1, r2
 8001df0:	61b9      	str	r1, [r7, #24]
 8001df2:	4629      	mov	r1, r5
 8001df4:	eb43 0101 	adc.w	r1, r3, r1
 8001df8:	61f9      	str	r1, [r7, #28]
 8001dfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	617a      	str	r2, [r7, #20]
 8001e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e0a:	f7fe fa81 	bl	8000310 <__aeabi_uldivmod>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 8001e16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d305      	bcc.n	8001e2a <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 8001e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3750      	adds	r7, #80	@ 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	20001068 	.word	0x20001068

08001e3c <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <led_apply_pwm+0x14>
        period_ticks = 1u;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d901      	bls.n	8001e5c <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <led_apply_pwm+0x2c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	e000      	b.n	8001e6a <led_apply_pwm+0x2e>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <led_apply_pwm+0x5c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e74:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <led_apply_pwm+0x5c>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <led_apply_pwm+0x5c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001e82:	2101      	movs	r1, #1
 8001e84:	4804      	ldr	r0, [pc, #16]	@ (8001e98 <led_apply_pwm+0x5c>)
 8001e86:	f00a fd59 	bl	800c93c <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 8001e8a:	4a03      	ldr	r2, [pc, #12]	@ (8001e98 <led_apply_pwm+0x5c>)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20001068 	.word	0x20001068

08001e9c <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	6078      	str	r0, [r7, #4]
    if (!led)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d029      	beq.n	8001efe <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8001eaa:	f000 f913 	bl	80020d4 <led_pwm_stop>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001eb8:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <led_force_off+0x6c>)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <led_force_off+0x70>)
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <led_force_off+0x74>)
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	f06f 0203 	mvn.w	r2, #3
 8001ecc:	2164      	movs	r1, #100	@ 0x64
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f000 fb96 	bl	8002600 <log_event_auto>
    }
    led_gpio_config_output(led);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fe85 	bl	8001be4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	889b      	ldrh	r3, [r3, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f005 fcab 	bl	8007840 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	735a      	strb	r2, [r3, #13]
 8001efc:	e000      	b.n	8001f00 <led_force_off+0x64>
        return;
 8001efe:	bf00      	nop
}
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0801048c 	.word	0x0801048c
 8001f0c:	080104cc 	.word	0x080104cc
 8001f10:	080104f0 	.word	0x080104f0

08001f14 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af04      	add	r7, sp, #16
 8001f1a:	6078      	str	r0, [r7, #4]
    if (!led)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d029      	beq.n	8001f76 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8001f22:	f000 f8d7 	bl	80020d4 <led_pwm_stop>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001f30:	4a13      	ldr	r2, [pc, #76]	@ (8001f80 <led_force_on+0x6c>)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	9302      	str	r3, [sp, #8]
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <led_force_on+0x70>)
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <led_force_on+0x74>)
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	f06f 0203 	mvn.w	r2, #3
 8001f44:	2164      	movs	r1, #100	@ 0x64
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 fb5a 	bl	8002600 <log_event_auto>
    }
    led_gpio_config_output(led);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fe49 	bl	8001be4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	889b      	ldrh	r3, [r3, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f005 fc6f 	bl	8007840 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	735a      	strb	r2, [r3, #13]
 8001f74:	e000      	b.n	8001f78 <led_force_on+0x64>
        return;
 8001f76:	bf00      	nop
}
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	0801048c 	.word	0x0801048c
 8001f84:	080104cc 	.word	0x080104cc
 8001f88:	080104f0 	.word	0x080104f0

08001f8c <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d03c      	beq.n	8002018 <led_force_blink+0x8c>
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d039      	beq.n	8002018 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fece 	bl	8001d48 <led_compute_period_ticks>
 8001fac:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d801      	bhi.n	8001fb8 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fbe:	d902      	bls.n	8001fc6 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc4:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fe2e 	bl	8001c2e <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7ff ff31 	bl	8001e3c <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 8001fda:	f000 f85d 	bl	8002098 <led_pwm_start>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00f      	beq.n	8002004 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <led_force_blink+0x94>)
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <led_force_blink+0x98>)
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <led_force_blink+0x9c>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	f06f 0203 	mvn.w	r2, #3
 8001ff4:	2164      	movs	r1, #100	@ 0x64
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fb02 	bl	8002600 <log_event_auto>
        led_force_off(led);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff4d 	bl	8001e9c <led_force_off>
        return;
 8002002:	e00a      	b.n	800201a <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	735a      	strb	r2, [r3, #13]
 8002016:	e000      	b.n	800201a <led_force_blink+0x8e>
        return;
 8002018:	bf00      	nop
}
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	0801048c 	.word	0x0801048c
 8002024:	080104f8 	.word	0x080104f8
 8002028:	080104f0 	.word	0x080104f0

0800202c <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	803b      	strh	r3, [r7, #0]
    if (!led)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d026      	beq.n	8002090 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8002048:	2300      	movs	r3, #0
 800204a:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204c:	f3ef 8310 	mrs	r3, PRIMASK
 8002050:	60bb      	str	r3, [r7, #8]
  return(result);
 8002052:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8002054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002056:	b672      	cpsid	i
}
 8002058:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d103      	bne.n	8002068 <led_apply_config+0x3c>
        led_force_on(led);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff57 	bl	8001f14 <led_force_on>
 8002066:	e00e      	b.n	8002086 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d108      	bne.n	8002080 <led_apply_config+0x54>
 800206e:	883b      	ldrh	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8002074:	883b      	ldrh	r3, [r7, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff87 	bl	8001f8c <led_force_blink>
 800207e:	e002      	b.n	8002086 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff0b 	bl	8001e9c <led_force_off>
    }

    if (primask == 0u) {
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 800208c:	b662      	cpsie	i
}
 800208e:	e000      	b.n	8002092 <led_apply_config+0x66>
        return;
 8002090:	bf00      	nop
        __enable_irq();
    }
}
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <led_pwm_start+0x34>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <led_pwm_start+0x12>
        return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e00c      	b.n	80020c4 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80020aa:	2100      	movs	r1, #0
 80020ac:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <led_pwm_start+0x38>)
 80020ae:	f009 fb8b 	bl	800b7c8 <HAL_TIM_PWM_Start>
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <led_pwm_start+0x34>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
    }
    return st;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200000ce 	.word	0x200000ce
 80020d0:	20001068 	.word	0x20001068

080020d4 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <led_pwm_stop+0x64>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <led_pwm_stop+0x12>
        return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e024      	b.n	8002130 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80020e6:	2100      	movs	r1, #0
 80020e8:	4814      	ldr	r0, [pc, #80]	@ (800213c <led_pwm_stop+0x68>)
 80020ea:	f009 fd1d 	bl	800bb28 <HAL_TIM_PWM_Stop>
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d11a      	bne.n	800212e <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <led_pwm_stop+0x68>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10f      	bne.n	8002128 <led_pwm_stop+0x54>
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <led_pwm_stop+0x68>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <led_pwm_stop+0x54>
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <led_pwm_stop+0x68>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <led_pwm_stop+0x68>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <led_pwm_stop+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    }
    return st;
 800212e:	79fb      	ldrb	r3, [r7, #7]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200000ce 	.word	0x200000ce
 800213c:	20001068 	.word	0x20001068

08002140 <led_service_init>:

void led_service_init(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	@ 0x28
 8002144:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8002146:	4b42      	ldr	r3, [pc, #264]	@ (8002250 <led_service_init+0x110>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	e02d      	b.n	80021ae <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4a3f      	ldr	r2, [pc, #252]	@ (8002254 <led_service_init+0x114>)
 8002158:	4413      	add	r3, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fd42 	bl	8001be4 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8002160:	4a3c      	ldr	r2, [pc, #240]	@ (8002254 <led_service_init+0x114>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	4a3a      	ldr	r2, [pc, #232]	@ (8002254 <led_service_init+0x114>)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	4619      	mov	r1, r3
 800217a:	f005 fb61 	bl	8007840 <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 800217e:	4a35      	ldr	r2, [pc, #212]	@ (8002254 <led_service_init+0x114>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	330c      	adds	r3, #12
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 800218c:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <led_service_init+0x114>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	4413      	add	r3, r2
 8002194:	330e      	adds	r3, #14
 8002196:	2200      	movs	r2, #0
 8002198:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 800219a:	4a2e      	ldr	r2, [pc, #184]	@ (8002254 <led_service_init+0x114>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	330d      	adds	r3, #13
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ce      	beq.n	8002152 <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 80021b4:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <led_service_init+0x118>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a28      	ldr	r2, [pc, #160]	@ (800225c <led_service_init+0x11c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d001      	beq.n	80021c2 <led_service_init+0x82>
        MX_TIM15_Init();
 80021be:	f004 f91f 	bl	8006400 <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80021c2:	4825      	ldr	r0, [pc, #148]	@ (8002258 <led_service_init+0x118>)
 80021c4:	f009 f9ec 	bl	800b5a0 <HAL_TIM_PWM_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 80021ce:	4a24      	ldr	r2, [pc, #144]	@ (8002260 <led_service_init+0x120>)
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <led_service_init+0x124>)
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <led_service_init+0x128>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	f06f 0203 	mvn.w	r2, #3
 80021de:	2164      	movs	r1, #100	@ 0x64
 80021e0:	2001      	movs	r0, #1
 80021e2:	f000 fa0d 	bl	8002600 <log_event_auto>
        return;
 80021e6:	e02f      	b.n	8002248 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 80021fa:	2360      	movs	r3, #96	@ 0x60
 80021fc:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8002216:	463b      	mov	r3, r7
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	480e      	ldr	r0, [pc, #56]	@ (8002258 <led_service_init+0x118>)
 800221e:	f00a f93f 	bl	800c4a0 <HAL_TIM_PWM_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8002228:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <led_service_init+0x120>)
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <led_service_init+0x12c>)
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <led_service_init+0x128>)
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	f06f 0203 	mvn.w	r2, #3
 8002238:	2164      	movs	r1, #100	@ 0x64
 800223a:	2001      	movs	r0, #1
 800223c:	f000 f9e0 	bl	8002600 <log_event_auto>
        return;
 8002240:	e002      	b.n	8002248 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 8002242:	4804      	ldr	r0, [pc, #16]	@ (8002254 <led_service_init+0x114>)
 8002244:	f7ff fe2a 	bl	8001e9c <led_force_off>
}
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000ce 	.word	0x200000ce
 8002254:	20000000 	.word	0x20000000
 8002258:	20001068 	.word	0x20001068
 800225c:	40014000 	.word	0x40014000
 8002260:	0801048c 	.word	0x0801048c
 8002264:	08010518 	.word	0x08010518
 8002268:	080104f0 	.word	0x080104f0
 800226c:	0801053c 	.word	0x0801053c

08002270 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002272:	b097      	sub	sp, #92	@ 0x5c
 8002274:	af0a      	add	r7, sp, #40	@ 0x28
 8002276:	6178      	str	r0, [r7, #20]
 8002278:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80d2 	beq.w	8002426 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d902      	bls.n	800228e <led_on_led_ctrl+0x1e>
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b2a      	cmp	r3, #42	@ 0x2a
 800228c:	d90e      	bls.n	80022ac <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 800228e:	4a68      	ldr	r2, [pc, #416]	@ (8002430 <led_on_led_ctrl+0x1c0>)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	4b67      	ldr	r3, [pc, #412]	@ (8002434 <led_on_led_ctrl+0x1c4>)
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <led_on_led_ctrl+0x1c8>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	f06f 0203 	mvn.w	r2, #3
 80022a2:	2164      	movs	r1, #100	@ 0x64
 80022a4:	2001      	movs	r0, #1
 80022a6:	f000 f9ab 	bl	8002600 <log_event_auto>
        return;
 80022aa:	e0bd      	b.n	8002428 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	461a      	mov	r2, r3
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f7fe fa9c 	bl	80007f2 <led_ctrl_req_decoder>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 80022c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00f      	beq.n	80022e8 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 80022c8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80022cc:	4958      	ldr	r1, [pc, #352]	@ (8002430 <led_on_led_ctrl+0x1c0>)
 80022ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	4b59      	ldr	r3, [pc, #356]	@ (800243c <led_on_led_ctrl+0x1cc>)
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	4b59      	ldr	r3, [pc, #356]	@ (8002440 <led_on_led_ctrl+0x1d0>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	2164      	movs	r1, #100	@ 0x64
 80022e0:	2001      	movs	r0, #1
 80022e2:	f000 f98d 	bl	8002600 <log_event_auto>
        return;
 80022e6:	e09f      	b.n	8002428 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 80022e8:	7f7b      	ldrb	r3, [r7, #29]
 80022ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8002300:	2300      	movs	r3, #0
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002304:	e02d      	b.n	8002362 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 800230c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01e      	beq.n	800235a <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 800231c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002320:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002324:	4313      	orrs	r3, r2
 8002326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 800232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4a45      	ldr	r2, [pc, #276]	@ (8002444 <led_on_led_ctrl+0x1d4>)
 8002330:	1898      	adds	r0, r3, r2
 8002332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	3320      	adds	r3, #32
 8002338:	f107 0210 	add.w	r2, r7, #16
 800233c:	4413      	add	r3, r2
 800233e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3320      	adds	r3, #32
 8002348:	f107 0210 	add.w	r2, r7, #16
 800234c:	4413      	add	r3, r2
 800234e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff fe6a 	bl	800202c <led_apply_config>
 8002358:	e000      	b.n	800235c <led_on_led_ctrl+0xec>
            continue;
 800235a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 800235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235e:	3301      	adds	r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ce      	beq.n	8002306 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8002368:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800236c:	43db      	mvns	r3, r3
 800236e:	b2da      	uxtb	r2, r3
 8002370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002374:	4013      	ands	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002382:	e00a      	b.n	800239a <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8002384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <led_on_led_ctrl+0x12a>
 800238c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 800239a:	7f3b      	ldrb	r3, [r7, #28]
 800239c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023a0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fc6b 	bl	8001c80 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 80023aa:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80023ae:	4e20      	ldr	r6, [pc, #128]	@ (8002430 <led_on_led_ctrl+0x1c0>)
 80023b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023b4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <led_on_led_ctrl+0x1d4>)
 80023ba:	7b1b      	ldrb	r3, [r3, #12]
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <led_on_led_ctrl+0x1d4>)
 80023c0:	89db      	ldrh	r3, [r3, #14]
 80023c2:	4821      	ldr	r0, [pc, #132]	@ (8002448 <led_on_led_ctrl+0x1d8>)
 80023c4:	fba0 0303 	umull	r0, r3, r0, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <led_on_led_ctrl+0x1d4>)
 80023d0:	89db      	ldrh	r3, [r3, #14]
 80023d2:	481d      	ldr	r0, [pc, #116]	@ (8002448 <led_on_led_ctrl+0x1d8>)
 80023d4:	fba0 5003 	umull	r5, r0, r0, r3
 80023d8:	0940      	lsrs	r0, r0, #5
 80023da:	2564      	movs	r5, #100	@ 0x64
 80023dc:	fb05 f000 	mul.w	r0, r5, r0
 80023e0:	1a1b      	subs	r3, r3, r0
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461d      	mov	r5, r3
 80023e6:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <led_on_led_ctrl+0x1d4>)
 80023e8:	7b5b      	ldrb	r3, [r3, #13]
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	4b17      	ldr	r3, [pc, #92]	@ (800244c <led_on_led_ctrl+0x1dc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	3301      	adds	r3, #1
 80023f4:	4815      	ldr	r0, [pc, #84]	@ (800244c <led_on_led_ctrl+0x1dc>)
 80023f6:	6800      	ldr	r0, [r0, #0]
 80023f8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80023fa:	9009      	str	r0, [sp, #36]	@ 0x24
 80023fc:	9308      	str	r3, [sp, #32]
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	9007      	str	r0, [sp, #28]
 8002402:	9506      	str	r5, [sp, #24]
 8002404:	68b8      	ldr	r0, [r7, #8]
 8002406:	9005      	str	r0, [sp, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	9304      	str	r3, [sp, #16]
 800240c:	9103      	str	r1, [sp, #12]
 800240e:	9202      	str	r2, [sp, #8]
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <led_on_led_ctrl+0x1e0>)
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <led_on_led_ctrl+0x1e4>)
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4633      	mov	r3, r6
 800241a:	4622      	mov	r2, r4
 800241c:	2102      	movs	r1, #2
 800241e:	2001      	movs	r0, #1
 8002420:	f000 f8ee 	bl	8002600 <log_event_auto>
 8002424:	e000      	b.n	8002428 <led_on_led_ctrl+0x1b8>
        return;
 8002426:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
 8002428:	3734      	adds	r7, #52	@ 0x34
 800242a:	46bd      	mov	sp, r7
 800242c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242e:	bf00      	nop
 8002430:	0801048c 	.word	0x0801048c
 8002434:	08010564 	.word	0x08010564
 8002438:	08010580 	.word	0x08010580
 800243c:	08010584 	.word	0x08010584
 8002440:	080105a8 	.word	0x080105a8
 8002444:	20000000 	.word	0x20000000
 8002448:	51eb851f 	.word	0x51eb851f
 800244c:	20001068 	.word	0x20001068
 8002450:	080105b0 	.word	0x080105b0
 8002454:	08010600 	.word	0x08010600

08002458 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002460:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002464:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002474:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002478:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002480:	e000      	b.n	8002484 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002482:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002484:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f9      	beq.n	8002482 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800248e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002498:	687b      	ldr	r3, [r7, #4]
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <log_service_init>:
#include <stdarg.h>
#include <string.h>
#include "usart.h"
#include "stm32l4xx.h"  // ITM_SendChar/CoreDebug/DBGMCU/TPI

void log_service_init(void){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <log_service_init+0x18>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6898      	ldr	r0, [r3, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2202      	movs	r2, #2
 80024b6:	2100      	movs	r1, #0
 80024b8:	f00c ff70 	bl	800f39c <setvbuf>
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000002c 	.word	0x2000002c

080024c4 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	603a      	str	r2, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
 80024d0:	460b      	mov	r3, r1
 80024d2:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80024d4:	79f9      	ldrb	r1, [r7, #7]
 80024d6:	79ba      	ldrb	r2, [r7, #6]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <log_event_ids+0x24>)
 80024dc:	f00c feee 	bl	800f2bc <iprintf>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	08010608 	.word	0x08010608

080024ec <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <log_event_names+0x16>
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <log_event_names+0x40>)
 8002500:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <log_event_names+0x20>
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <log_event_names+0x40>)
 800250a:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <log_event_names+0x2a>
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <log_event_names+0x40>)
 8002514:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	4804      	ldr	r0, [pc, #16]	@ (8002530 <log_event_names+0x44>)
 800251e:	f00c fecd 	bl	800f2bc <iprintf>
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	08010628 	.word	0x08010628
 8002530:	0801062c 	.word	0x0801062c

08002534 <log_swo_enabled>:

// Verifica em tempo de execução se o SWO/ITM está habilitado (porta 0).
static inline int log_swo_enabled(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <log_swo_enabled+0x4c>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <log_swo_enabled+0x40>
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <log_swo_enabled+0x50>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0320 	and.w	r3, r3, #32
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d011      	beq.n	8002574 <log_swo_enabled+0x40>
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8002550:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002554:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002558:	f003 0301 	and.w	r3, r3, #1
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <log_swo_enabled+0x40>
            (ITM->TER & (1UL << 0)));
 8002560:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002564:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002568:	f003 0301 	and.w	r3, r3, #1
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <log_swo_enabled+0x40>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <log_swo_enabled+0x42>
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000edf0 	.word	0xe000edf0
 8002584:	e0042000 	.word	0xe0042000

08002588 <_write>:

// Retarget de printf: usa SWO quando disponível; senão, USART1.
int _write(int fd, char *ptr, int len)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
    if (fd != 1 && fd != 2)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <_write+0x1e>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d002      	beq.n	80025a6 <_write+0x1e>
        return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
 80025a4:	e026      	b.n	80025f4 <_write+0x6c>

    if (log_swo_enabled()) {
 80025a6:	f7ff ffc5 	bl	8002534 <log_swo_enabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <_write+0x4e>
        for (int i = 0; i < len; ++i) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e009      	b.n	80025ca <_write+0x42>
            ITM_SendChar((uint32_t)ptr[i]);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff4a 	bl	8002458 <ITM_SendChar>
        for (int i = 0; i < len; ++i) {
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf1      	blt.n	80025b6 <_write+0x2e>
        }
        return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	e00e      	b.n	80025f4 <_write+0x6c>
    }

    // Fallback: UART1 síncrona
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, HAL_MAX_DELAY) == HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	4806      	ldr	r0, [pc, #24]	@ (80025fc <_write+0x74>)
 80025e2:	f00b fe0d 	bl	800e200 <HAL_UART_Transmit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <_write+0x68>
        return len;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	e001      	b.n	80025f4 <_write+0x6c>
    return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200010b4 	.word	0x200010b4

08002600 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8002600:	b580      	push	{r7, lr}
 8002602:	b0a8      	sub	sp, #160	@ 0xa0
 8002604:	af00      	add	r7, sp, #0
 8002606:	60ba      	str	r2, [r7, #8]
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	460b      	mov	r3, r1
 8002610:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8002612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <log_event_auto+0x3c>
 800261a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8002624:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002628:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 800262a:	f107 0018 	add.w	r0, r7, #24
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	f00c ffd7 	bl	800f5e8 <vsniprintf>
    if(fmt && fmt[0]){
 800263a:	e003      	b.n	8002644 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 800263c:	233f      	movs	r3, #63	@ 0x3f
 800263e:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8002640:	2300      	movs	r3, #0
 8002642:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <log_event_auto+0x4e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	e000      	b.n	8002650 <log_event_auto+0x50>
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <log_event_auto+0x84>)
 8002650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8002654:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <log_event_auto+0x62>
 800265c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002660:	e000      	b.n	8002664 <log_event_auto+0x64>
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <log_event_auto+0x84>)
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002670:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8002674:	4804      	ldr	r0, [pc, #16]	@ (8002688 <log_event_auto+0x88>)
 8002676:	f00c fe21 	bl	800f2bc <iprintf>
}
 800267a:	bf00      	nop
 800267c:	37a0      	adds	r7, #160	@ 0xa0
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	08010628 	.word	0x08010628
 8002688:	0801062c 	.word	0x0801062c

0800268c <gpio_bsrr_set>:
    { GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_2, GPIOD, GPIO_PIN_14,
      MOTION_ENCODER_TYPE_TIM, &htim5, NULL, 32u },
};

static inline void gpio_bsrr_set(GPIO_TypeDef *port, uint16_t pin)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <gpio_bsrr_set+0x1a>
    port->BSRR = pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	e000      	b.n	80026a8 <gpio_bsrr_set+0x1c>
    if (!port) return;
 80026a6:	bf00      	nop
}
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <gpio_bsrr_reset>:
static inline void gpio_bsrr_reset(GPIO_TypeDef *port, uint16_t pin)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <gpio_bsrr_reset+0x1c>
    port->BSRR = ((uint32_t)pin) << 16u;
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	041a      	lsls	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
 80026cc:	e000      	b.n	80026d0 <gpio_bsrr_reset+0x1e>
    if (!port) return;
 80026ce:	bf00      	nop
}
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <motion_hw_init>:

void motion_hw_init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
    // Garante STEP baixo e drivers desabilitados
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80026e2:	2300      	movs	r3, #0
 80026e4:	71fb      	strb	r3, [r7, #7]
 80026e6:	e02b      	b.n	8002740 <motion_hw_init+0x64>
        gpio_bsrr_reset(g_axis[i].step_port, g_axis[i].step_pin);
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	493d      	ldr	r1, [pc, #244]	@ (80027e0 <motion_hw_init+0x104>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	4939      	ldr	r1, [pc, #228]	@ (80027e0 <motion_hw_init+0x104>)
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3304      	adds	r3, #4
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	f7ff ffd1 	bl	80026b2 <gpio_bsrr_reset>
        // Enable ativo em baixo: mantém alto (desabilitado)
        gpio_bsrr_set(g_axis[i].ena_port, g_axis[i].ena_pin);
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	4933      	ldr	r1, [pc, #204]	@ (80027e0 <motion_hw_init+0x104>)
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3310      	adds	r3, #16
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	79fa      	ldrb	r2, [r7, #7]
 8002724:	492e      	ldr	r1, [pc, #184]	@ (80027e0 <motion_hw_init+0x104>)
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3314      	adds	r3, #20
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f7ff ffa9 	bl	800268c <gpio_bsrr_set>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	3301      	adds	r3, #1
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d9d0      	bls.n	80026e8 <motion_hw_init+0xc>
    }

    // Zera contadores e inicia encoders conforme o tipo de periférico
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002746:	2300      	movs	r3, #0
 8002748:	71bb      	strb	r3, [r7, #6]
 800274a:	e034      	b.n	80027b6 <motion_hw_init+0xda>
        const motion_axis_hw_t *axis = &g_axis[i];
 800274c:	79ba      	ldrb	r2, [r7, #6]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4a22      	ldr	r2, [pc, #136]	@ (80027e0 <motion_hw_init+0x104>)
 8002758:	4413      	add	r3, r2
 800275a:	603b      	str	r3, [r7, #0]
        if (axis->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	7d9b      	ldrb	r3, [r3, #22]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d110      	bne.n	8002786 <motion_hw_init+0xaa>
            __HAL_TIM_SET_COUNTER(axis->tim, 0u);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24
            if (HAL_TIM_Encoder_Start(axis->tim, TIM_CHANNEL_ALL) != HAL_OK) {
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	213c      	movs	r1, #60	@ 0x3c
 8002774:	4618      	mov	r0, r3
 8002776:	f009 fccd 	bl	800c114 <HAL_TIM_Encoder_Start>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d017      	beq.n	80027b0 <motion_hw_init+0xd4>
                Error_Handler();
 8002780:	f003 fade 	bl	8005d40 <Error_Handler>
 8002784:	e014      	b.n	80027b0 <motion_hw_init+0xd4>
            }
        } else if (axis->encoder_type == MOTION_ENCODER_TYPE_LPTIM) {
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	7d9b      	ldrb	r3, [r3, #22]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d110      	bne.n	80027b0 <motion_hw_init+0xd4>
            (void)HAL_LPTIM_Encoder_Stop(axis->lptim);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4618      	mov	r0, r3
 8002794:	f005 fb4e 	bl	8007e34 <HAL_LPTIM_Encoder_Stop>
            if (HAL_LPTIM_Encoder_Start(axis->lptim, LPTIM_ENCODER_PERIOD) != HAL_OK) {
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80027a0:	4618      	mov	r0, r3
 80027a2:	f005 fabd 	bl	8007d20 <HAL_LPTIM_Encoder_Start>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <motion_hw_init+0xd4>
                Error_Handler();
 80027ac:	f003 fac8 	bl	8005d40 <Error_Handler>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	3301      	adds	r3, #1
 80027b4:	71bb      	strb	r3, [r7, #6]
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d9c7      	bls.n	800274c <motion_hw_init+0x70>
#endif
        }
    }

    // Mantém os EN dos eixos Y (1) e Z (2) ativados (nível baixo) conforme solicitado
    gpio_bsrr_reset(g_axis[1].ena_port, g_axis[1].ena_pin);
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <motion_hw_init+0x108>)
 80027be:	2220      	movs	r2, #32
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff75 	bl	80026b2 <gpio_bsrr_reset>
    gpio_bsrr_reset(g_axis[2].ena_port, g_axis[2].ena_pin);
 80027c8:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <motion_hw_init+0x10c>)
 80027ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff6e 	bl	80026b2 <gpio_bsrr_reset>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	08010cbc 	.word	0x08010cbc
 80027e4:	48000800 	.word	0x48000800
 80027e8:	48000c00 	.word	0x48000c00

080027ec <motion_hw_set_dir>:

void motion_hw_set_dir(uint8_t axis, uint8_t dir)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	460a      	mov	r2, r1
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d82e      	bhi.n	8002860 <motion_hw_set_dir+0x74>
    if (dir) gpio_bsrr_set(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002802:	79bb      	ldrb	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <motion_hw_set_dir+0x48>
 8002808:	79fa      	ldrb	r2, [r7, #7]
 800280a:	4917      	ldr	r1, [pc, #92]	@ (8002868 <motion_hw_set_dir+0x7c>)
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3308      	adds	r3, #8
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	79fa      	ldrb	r2, [r7, #7]
 800281c:	4912      	ldr	r1, [pc, #72]	@ (8002868 <motion_hw_set_dir+0x7c>)
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	330c      	adds	r3, #12
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f7ff ff2d 	bl	800268c <gpio_bsrr_set>
 8002832:	e016      	b.n	8002862 <motion_hw_set_dir+0x76>
    else     gpio_bsrr_reset(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	490c      	ldr	r1, [pc, #48]	@ (8002868 <motion_hw_set_dir+0x7c>)
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3308      	adds	r3, #8
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	79fa      	ldrb	r2, [r7, #7]
 8002848:	4907      	ldr	r1, [pc, #28]	@ (8002868 <motion_hw_set_dir+0x7c>)
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	330c      	adds	r3, #12
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f7ff ff2a 	bl	80026b2 <gpio_bsrr_reset>
 800285e:	e000      	b.n	8002862 <motion_hw_set_dir+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002860:	bf00      	nop
}
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08010cbc 	.word	0x08010cbc

0800286c <motion_hw_enable>:

void motion_hw_enable(uint8_t axis, uint8_t enable)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	460a      	mov	r2, r1
 8002876:	71fb      	strb	r3, [r7, #7]
 8002878:	4613      	mov	r3, r2
 800287a:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d82e      	bhi.n	80028e0 <motion_hw_enable+0x74>
    // Enable ativo em baixo: enable=1 -> força baixo
    if (enable) gpio_bsrr_reset(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 8002882:	79bb      	ldrb	r3, [r7, #6]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <motion_hw_enable+0x48>
 8002888:	79fa      	ldrb	r2, [r7, #7]
 800288a:	4917      	ldr	r1, [pc, #92]	@ (80028e8 <motion_hw_enable+0x7c>)
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3310      	adds	r3, #16
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	79fa      	ldrb	r2, [r7, #7]
 800289c:	4912      	ldr	r1, [pc, #72]	@ (80028e8 <motion_hw_enable+0x7c>)
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3314      	adds	r3, #20
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7ff ff00 	bl	80026b2 <gpio_bsrr_reset>
 80028b2:	e016      	b.n	80028e2 <motion_hw_enable+0x76>
    else        gpio_bsrr_set(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 80028b4:	79fa      	ldrb	r2, [r7, #7]
 80028b6:	490c      	ldr	r1, [pc, #48]	@ (80028e8 <motion_hw_enable+0x7c>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3310      	adds	r3, #16
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	79fa      	ldrb	r2, [r7, #7]
 80028c8:	4907      	ldr	r1, [pc, #28]	@ (80028e8 <motion_hw_enable+0x7c>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3314      	adds	r3, #20
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	f7ff fed7 	bl	800268c <gpio_bsrr_set>
 80028de:	e000      	b.n	80028e2 <motion_hw_enable+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 80028e0:	bf00      	nop
}
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	08010cbc 	.word	0x08010cbc

080028ec <motion_hw_step_high>:

void motion_hw_step_high(uint8_t axis)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d814      	bhi.n	8002926 <motion_hw_step_high+0x3a>
    gpio_bsrr_set(g_axis[axis].step_port, g_axis[axis].step_pin);
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	490c      	ldr	r1, [pc, #48]	@ (8002930 <motion_hw_step_high+0x44>)
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	4908      	ldr	r1, [pc, #32]	@ (8002930 <motion_hw_step_high+0x44>)
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3304      	adds	r3, #4
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	f7ff feb4 	bl	800268c <gpio_bsrr_set>
 8002924:	e000      	b.n	8002928 <motion_hw_step_high+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002926:	bf00      	nop
}
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08010cbc 	.word	0x08010cbc

08002934 <motion_hw_step_low>:
void motion_hw_step_low(uint8_t axis)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d814      	bhi.n	800296e <motion_hw_step_low+0x3a>
    gpio_bsrr_reset(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002944:	79fa      	ldrb	r2, [r7, #7]
 8002946:	490c      	ldr	r1, [pc, #48]	@ (8002978 <motion_hw_step_low+0x44>)
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	4908      	ldr	r1, [pc, #32]	@ (8002978 <motion_hw_step_low+0x44>)
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3304      	adds	r3, #4
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	f7ff fea3 	bl	80026b2 <gpio_bsrr_reset>
 800296c:	e000      	b.n	8002970 <motion_hw_step_low+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 800296e:	bf00      	nop
}
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	08010cbc 	.word	0x08010cbc

0800297c <motion_hw_encoder_read_raw>:

uint32_t motion_hw_encoder_read_raw(uint8_t axis)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0;
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <motion_hw_encoder_read_raw+0x14>
 800298c:	2300      	movs	r3, #0
 800298e:	e015      	b.n	80029bc <motion_hw_encoder_read_raw+0x40>
    const motion_axis_hw_t *hw = &g_axis[axis];
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <motion_hw_encoder_read_raw+0x4c>)
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
    if (hw->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	7d9b      	ldrb	r3, [r3, #22]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <motion_hw_encoder_read_raw+0x36>
        return (uint32_t)__HAL_TIM_GET_COUNTER(hw->tim);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	e004      	b.n	80029bc <motion_hw_encoder_read_raw+0x40>
    } else {
        return (uint32_t)(hw->lptim->Instance->CNT & 0xFFFFu);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	b29b      	uxth	r3, r3
    }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	08010cbc 	.word	0x08010cbc

080029cc <motion_hw_encoder_bits>:

uint8_t motion_hw_encoder_bits(uint8_t axis)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0u;
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <motion_hw_encoder_bits+0x14>
 80029dc:	2300      	movs	r3, #0
 80029de:	e008      	b.n	80029f2 <motion_hw_encoder_bits+0x26>
    return g_axis[axis].counter_bits;
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	4907      	ldr	r1, [pc, #28]	@ (8002a00 <motion_hw_encoder_bits+0x34>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	3320      	adds	r3, #32
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	08010cbc 	.word	0x08010cbc

08002a04 <dda_steps_per_rev>:
#define STEPS_PER_REV_BASE   400u
#define DDA_STEPS_PER_REV    (STEPS_PER_REV_BASE * MICROSTEP_FACTOR)
/* Encoders por rotação (fornecido): X/Z = 40000, Y = 2500 */
static const uint32_t ENC_COUNTS_PER_REV[3] = { 40000u, 2500u, 40000u };
static volatile uint16_t g_microstep_factor = MICROSTEP_FACTOR;
static inline uint32_t dda_steps_per_rev(void) { return STEPS_PER_REV_BASE * (uint32_t)g_microstep_factor; }
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <dda_steps_per_rev+0x20>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000010 	.word	0x20000010

08002a28 <motion_lock>:
static volatile uint8_t g_demo_speed_idx = 1u;

/* =======================
 *  Helpers de lock
 * ======================= */
static inline uint32_t motion_lock(void) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	603b      	str	r3, [r7, #0]
  return(result);
 8002a34:	683b      	ldr	r3, [r7, #0]
    uint32_t primask = __get_PRIMASK();
 8002a36:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
}
 8002a3a:	bf00      	nop
    __disable_irq();
    return primask;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f383 8810 	msr	PRIMASK, r3
}
 8002a5c:	bf00      	nop
    __set_PRIMASK(primask);
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <motion_total_for_axis>:

/* =======================
 *  Helpers de acesso por eixo
 * ======================= */
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <motion_total_for_axis+0x18>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d003      	beq.n	8002a88 <motion_total_for_axis+0x1e>
 8002a80:	e005      	b.n	8002a8e <motion_total_for_axis+0x24>
        case AXIS_X: return req->sx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	e004      	b.n	8002a92 <motion_total_for_axis+0x28>
        case AXIS_Y: return req->sy;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	e001      	b.n	8002a92 <motion_total_for_axis+0x28>
        case AXIS_Z:
        default:     return req->sz;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
    }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <motion_velocity_for_axis>:

static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <motion_velocity_for_axis+0x18>
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d003      	beq.n	8002abc <motion_velocity_for_axis+0x1e>
 8002ab4:	e005      	b.n	8002ac2 <motion_velocity_for_axis+0x24>
        case AXIS_X: return req->vx;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	885b      	ldrh	r3, [r3, #2]
 8002aba:	e004      	b.n	8002ac6 <motion_velocity_for_axis+0x28>
        case AXIS_Y: return req->vy;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	891b      	ldrh	r3, [r3, #8]
 8002ac0:	e001      	b.n	8002ac6 <motion_velocity_for_axis+0x28>
        case AXIS_Z:
        default:     return req->vz;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8a1b      	ldrh	r3, [r3, #16]
    }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <motion_kp_for_axis>:

static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <motion_kp_for_axis+0x18>
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d003      	beq.n	8002af0 <motion_kp_for_axis+0x1e>
 8002ae8:	e005      	b.n	8002af6 <motion_kp_for_axis+0x24>
        case AXIS_X: return req->kp_x;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8b1b      	ldrh	r3, [r3, #24]
 8002aee:	e004      	b.n	8002afa <motion_kp_for_axis+0x28>
        case AXIS_Y: return req->kp_y;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8bdb      	ldrh	r3, [r3, #30]
 8002af4:	e001      	b.n	8002afa <motion_kp_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kp_z;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <motion_ki_for_axis>:

static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <motion_ki_for_axis+0x18>
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d003      	beq.n	8002b24 <motion_ki_for_axis+0x1e>
 8002b1c:	e005      	b.n	8002b2a <motion_ki_for_axis+0x24>
        case AXIS_X: return req->ki_x;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8b5b      	ldrh	r3, [r3, #26]
 8002b22:	e004      	b.n	8002b2e <motion_ki_for_axis+0x28>
        case AXIS_Y: return req->ki_y;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8c1b      	ldrh	r3, [r3, #32]
 8002b28:	e001      	b.n	8002b2e <motion_ki_for_axis+0x28>
        case AXIS_Z:
        default:     return req->ki_z;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
    }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <motion_kd_for_axis>:

static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <motion_kd_for_axis+0x18>
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d003      	beq.n	8002b58 <motion_kd_for_axis+0x1e>
 8002b50:	e005      	b.n	8002b5e <motion_kd_for_axis+0x24>
        case AXIS_X: return req->kd_x;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8b9b      	ldrh	r3, [r3, #28]
 8002b56:	e004      	b.n	8002b62 <motion_kd_for_axis+0x28>
        case AXIS_Y: return req->kd_y;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002b5c:	e001      	b.n	8002b62 <motion_kd_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kd_z;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <motion_clamp_error>:

static inline int8_t motion_clamp_error(int32_t value) {
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
    if (value > 127)  return 127;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b7a:	dd01      	ble.n	8002b80 <motion_clamp_error+0x12>
 8002b7c:	237f      	movs	r3, #127	@ 0x7f
 8002b7e:	e008      	b.n	8002b92 <motion_clamp_error+0x24>
    if (value < -128) return -128;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002b86:	da02      	bge.n	8002b8e <motion_clamp_error+0x20>
 8002b88:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002b8c:	e001      	b.n	8002b92 <motion_clamp_error+0x24>
    return (int8_t)value;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	b25b      	sxtb	r3, r3
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <motion_remaining_steps_total_for_axis>:

/* Soma restante (em passos) no eixo, incluindo segmento ativo + fila
 * Usado para decidir desaceleração suave no final da lista de movimentos. */
static uint32_t motion_remaining_steps_total_for_axis(uint8_t axis)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
    uint32_t rem = 0u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    if (axis < MOTION_AXIS_COUNT) {
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d815      	bhi.n	8002be0 <motion_remaining_steps_total_for_axis+0x40>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c30 <motion_remaining_steps_total_for_axis+0x90>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
        if (ax->total_steps > ax->emitted_steps)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d907      	bls.n	8002be0 <motion_remaining_steps_total_for_axis+0x40>
            rem += (ax->total_steps - ax->emitted_steps);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]
    }
    for (uint8_t i = 0; i < g_queue_count; ++i) {
 8002be0:	2300      	movs	r3, #0
 8002be2:	76fb      	strb	r3, [r7, #27]
 8002be4:	e01a      	b.n	8002c1c <motion_remaining_steps_total_for_axis+0x7c>
        uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 8002be6:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <motion_remaining_steps_total_for_axis+0x94>)
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	7efb      	ldrb	r3, [r7, #27]
 8002bec:	4413      	add	r3, r2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf4:	74fb      	strb	r3, [r7, #19]
        const move_queue_add_req_t *q = &g_queue[idxq].req;
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	222c      	movs	r2, #44	@ 0x2c
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002c38 <motion_remaining_steps_total_for_axis+0x98>)
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
        rem += motion_total_for_axis(q, axis);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4619      	mov	r1, r3
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff ff2e 	bl	8002a6a <motion_total_for_axis>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < g_queue_count; ++i) {
 8002c16:	7efb      	ldrb	r3, [r7, #27]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	76fb      	strb	r3, [r7, #27]
 8002c1c:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <motion_remaining_steps_total_for_axis+0x9c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	7efa      	ldrb	r2, [r7, #27]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d3df      	bcc.n	8002be6 <motion_remaining_steps_total_for_axis+0x46>
    }
    return rem;
 8002c26:	69fb      	ldr	r3, [r7, #28]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200000d8 	.word	0x200000d8
 8002c34:	20000c6c 	.word	0x20000c6c
 8002c38:	2000016c 	.word	0x2000016c
 8002c3c:	20000c6e 	.word	0x20000c6e

08002c40 <motion_refresh_status_locked>:

/* =======================
 *  Status e fila
 * ======================= */
static void motion_refresh_status_locked(void) {
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	b0ab      	sub	sp, #172	@ 0xac
 8002c46:	af00      	add	r7, sp, #0
    g_status.queue_depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 8002c48:	4bc2      	ldr	r3, [pc, #776]	@ (8002f54 <motion_refresh_status_locked+0x314>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <motion_refresh_status_locked+0x16>
 8002c52:	2201      	movs	r2, #1
 8002c54:	e000      	b.n	8002c58 <motion_refresh_status_locked+0x18>
 8002c56:	2200      	movs	r2, #0
 8002c58:	4bbf      	ldr	r3, [pc, #764]	@ (8002f58 <motion_refresh_status_locked+0x318>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4abe      	ldr	r2, [pc, #760]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002c62:	7053      	strb	r3, [r2, #1]

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002c6a:	e167      	b.n	8002f3c <motion_refresh_status_locked+0x2fc>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002c6c:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4ab9      	ldr	r2, [pc, #740]	@ (8002f60 <motion_refresh_status_locked+0x320>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        uint32_t total = ax->total_steps;
 8002c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint32_t emitted = ax->emitted_steps;
 8002c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        uint8_t pct = 0u;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

        if (g_has_active_segment && total > 0u) {
 8002c9a:	4bae      	ldr	r3, [pc, #696]	@ (8002f54 <motion_refresh_status_locked+0x314>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d04c      	beq.n	8002d3e <motion_refresh_status_locked+0xfe>
 8002ca4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d048      	beq.n	8002d3e <motion_refresh_status_locked+0xfe>
            uint64_t scaled = (uint64_t)emitted * 100u;
 8002cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cb4:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002cba:	1891      	adds	r1, r2, r2
 8002cbc:	6239      	str	r1, [r7, #32]
 8002cbe:	415b      	adcs	r3, r3
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002cc8:	eb12 0801 	adds.w	r8, r2, r1
 8002ccc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002cce:	eb43 0901 	adc.w	r9, r3, r1
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002cde:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002ce2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002ce6:	eb18 0102 	adds.w	r1, r8, r2
 8002cea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cec:	eb49 0303 	adc.w	r3, r9, r3
 8002cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	189b      	adds	r3, r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d00:	460a      	mov	r2, r1
 8002d02:	4153      	adcs	r3, r2
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
            pct = (uint8_t)(scaled / total);
 8002d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d12:	2200      	movs	r2, #0
 8002d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d16:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d1c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d20:	f7fd faf6 	bl	8000310 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
            if (pct > 100u) pct = 100u;
 8002d2e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d95a      	bls.n	8002dec <motion_refresh_status_locked+0x1ac>
 8002d36:	2364      	movs	r3, #100	@ 0x64
 8002d38:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
        if (g_has_active_segment && total > 0u) {
 8002d3c:	e056      	b.n	8002dec <motion_refresh_status_locked+0x1ac>
        } else if (total == 0u && g_has_active_segment) {
 8002d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <motion_refresh_status_locked+0x118>
 8002d46:	4b83      	ldr	r3, [pc, #524]	@ (8002f54 <motion_refresh_status_locked+0x314>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <motion_refresh_status_locked+0x118>
            pct = 100u;
 8002d50:	2364      	movs	r3, #100	@ 0x64
 8002d52:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002d56:	e04a      	b.n	8002dee <motion_refresh_status_locked+0x1ae>
        } else if (!g_has_active_segment && total > 0u) {
 8002d58:	4b7e      	ldr	r3, [pc, #504]	@ (8002f54 <motion_refresh_status_locked+0x314>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d145      	bne.n	8002dee <motion_refresh_status_locked+0x1ae>
 8002d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d041      	beq.n	8002dee <motion_refresh_status_locked+0x1ae>
            pct = (emitted >= total) ? 100u : (uint8_t)(((uint64_t)emitted * 100u) / total);
 8002d6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d236      	bcs.n	8002de4 <motion_refresh_status_locked+0x1a4>
 8002d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	469a      	mov	sl, r3
 8002d7e:	4693      	mov	fp, r2
 8002d80:	4652      	mov	r2, sl
 8002d82:	465b      	mov	r3, fp
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	6139      	str	r1, [r7, #16]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d90:	eb12 040a 	adds.w	r4, r2, sl
 8002d94:	eb43 050b 	adc.w	r5, r3, fp
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	016b      	lsls	r3, r5, #5
 8002da2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002da6:	0162      	lsls	r2, r4, #5
 8002da8:	18a1      	adds	r1, r4, r2
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002db6:	460b      	mov	r3, r1
 8002db8:	eb13 030a 	adds.w	r3, r3, sl
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	eb43 030b 	adc.w	r3, r3, fp
 8002dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dca:	2200      	movs	r2, #0
 8002dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dce:	637a      	str	r2, [r7, #52]	@ 0x34
 8002dd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002dd8:	f7fd fa9a 	bl	8000310 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	b2d3      	uxtb	r3, r2
 8002de2:	e000      	b.n	8002de6 <motion_refresh_status_locked+0x1a6>
 8002de4:	2364      	movs	r3, #100	@ 0x64
 8002de6:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002dea:	e000      	b.n	8002dee <motion_refresh_status_locked+0x1ae>
        if (g_has_active_segment && total > 0u) {
 8002dec:	bf00      	nop

        /* Erro em UNIDADES DE PASSOS (alinhado ao PI de posição)
         * desired_steps = passos emitidos no segmento (target_steps)
         * actual_steps  = encoder_rel convertido para passos DDA
         */
        int64_t enc_rel = g_encoder_position[axis] - g_encoder_origin[axis];
 8002dee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002df2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f64 <motion_refresh_status_locked+0x324>)
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dfc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002e00:	4a59      	ldr	r2, [pc, #356]	@ (8002f68 <motion_refresh_status_locked+0x328>)
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	1a86      	subs	r6, r0, r2
 8002e0c:	603e      	str	r6, [r7, #0]
 8002e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e18:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        if (enc_rel > (int64_t)INT32_MAX) enc_rel = INT32_MAX;
 8002e1c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002e20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002e24:	f173 0300 	sbcs.w	r3, r3, #0
 8002e28:	db06      	blt.n	8002e38 <motion_refresh_status_locked+0x1f8>
 8002e2a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 8002e36:	e00c      	b.n	8002e52 <motion_refresh_status_locked+0x212>
        else if (enc_rel < (int64_t)INT32_MIN) enc_rel = INT32_MIN;
 8002e38:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002e3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002e40:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002e44:	da05      	bge.n	8002e52 <motion_refresh_status_locked+0x212>
 8002e46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        int64_t num = enc_rel * (int64_t)dda_steps_per_rev();
 8002e52:	f7ff fdd7 	bl	8002a04 <dda_steps_per_rev>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e5c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002e66:	4602      	mov	r2, r0
 8002e68:	fb02 f203 	mul.w	r2, r2, r3
 8002e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e70:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	441a      	add	r2, r3
 8002e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e80:	fba3 1301 	umull	r1, r3, r3, r1
 8002e84:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e86:	460b      	mov	r3, r1
 8002e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	18d3      	adds	r3, r2, r3
 8002e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e94:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8002e98:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        int32_t actual_steps = (ENC_COUNTS_PER_REV[axis]
 8002e9c:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002ea0:	4b32      	ldr	r3, [pc, #200]	@ (8002f6c <motion_refresh_status_locked+0x32c>)
 8002ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                ? (int32_t)(num / (int64_t)ENC_COUNTS_PER_REV[axis])
                                : 0);
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <motion_refresh_status_locked+0x28e>
                                ? (int32_t)(num / (int64_t)ENC_COUNTS_PER_REV[axis])
 8002eaa:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002eae:	4b2f      	ldr	r3, [pc, #188]	@ (8002f6c <motion_refresh_status_locked+0x32c>)
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ebe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ec2:	f7fd f9d5 	bl	8000270 <__aeabi_ldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
                                : 0);
 8002eca:	4613      	mov	r3, r2
 8002ecc:	e000      	b.n	8002ed0 <motion_refresh_status_locked+0x290>
 8002ece:	2300      	movs	r3, #0
        int32_t actual_steps = (ENC_COUNTS_PER_REV[axis]
 8002ed0:	677b      	str	r3, [r7, #116]	@ 0x74
        int32_t desired_steps = (int32_t)ax->target_steps;
 8002ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	673b      	str	r3, [r7, #112]	@ 0x70
        int32_t err = desired_steps - actual_steps;
 8002eda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002edc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        int8_t  err8 = motion_clamp_error(err);
 8002ee2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002ee4:	f7ff fe43 	bl	8002b6e <motion_clamp_error>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        switch (axis) {
 8002eee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <motion_refresh_status_locked+0x2bc>
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d009      	beq.n	8002f0e <motion_refresh_status_locked+0x2ce>
 8002efa:	e011      	b.n	8002f20 <motion_refresh_status_locked+0x2e0>
            case AXIS_X: g_status.pctX = pct; g_status.pidErrX = err8; break;
 8002efc:	4a17      	ldr	r2, [pc, #92]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002efe:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f02:	7093      	strb	r3, [r2, #2]
 8002f04:	4a15      	ldr	r2, [pc, #84]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002f06:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f0a:	7153      	strb	r3, [r2, #5]
 8002f0c:	e011      	b.n	8002f32 <motion_refresh_status_locked+0x2f2>
            case AXIS_Y: g_status.pctY = pct; g_status.pidErrY = err8; break;
 8002f0e:	4a13      	ldr	r2, [pc, #76]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002f10:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f14:	70d3      	strb	r3, [r2, #3]
 8002f16:	4a11      	ldr	r2, [pc, #68]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002f18:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f1c:	7193      	strb	r3, [r2, #6]
 8002f1e:	e008      	b.n	8002f32 <motion_refresh_status_locked+0x2f2>
            case AXIS_Z:
            default:     g_status.pctZ = pct; g_status.pidErrZ = err8; break;
 8002f20:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002f22:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f26:	7113      	strb	r3, [r2, #4]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	@ (8002f5c <motion_refresh_status_locked+0x31c>)
 8002f2a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f2e:	71d3      	strb	r3, [r2, #7]
 8002f30:	bf00      	nop
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f32:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002f36:	3301      	adds	r3, #1
 8002f38:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002f3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f67f ae93 	bls.w	8002c6c <motion_refresh_status_locked+0x2c>
        }
    }
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	37ac      	adds	r7, #172	@ 0xac
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f52:	bf00      	nop
 8002f54:	20000168 	.word	0x20000168
 8002f58:	20000c6e 	.word	0x20000c6e
 8002f5c:	200000d0 	.word	0x200000d0
 8002f60:	200000d8 	.word	0x200000d8
 8002f64:	20000c70 	.word	0x20000c70
 8002f68:	20000c98 	.word	0x20000c98
 8002f6c:	08010d28 	.word	0x08010d28

08002f70 <motion_stop_all_axes_locked>:


static void motion_stop_all_axes_locked(void) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	e045      	b.n	8003008 <motion_stop_all_axes_locked+0x98>
        motion_hw_step_low(axis);
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fcd8 	bl	8002934 <motion_hw_step_low>
        motion_hw_enable(axis, 0u);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fc6f 	bl	800286c <motion_hw_enable>

        motion_axis_state_t *ax = &g_axis_state[axis];
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <motion_stop_all_axes_locked+0xa8>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	603b      	str	r3, [r7, #0]
        ax->total_steps       = 0u;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = 0u;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	819a      	strh	r2, [r3, #12]
        ax->kp = 0u; ax->ki = 0u; ax->kd = 0u;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	81da      	strh	r2, [r3, #14]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	821a      	strh	r2, [r3, #16]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	825a      	strh	r2, [r3, #18]

        /* limpa controle de pulso/guardas */
        ax->step_high         = 0u;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = 0u;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = 0u;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* limpa DDA/rampa */
        ax->dda_accum_q16     = 0u;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = 0u;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = 0u;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	3301      	adds	r3, #1
 8003006:	71fb      	strb	r3, [r7, #7]
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d9b6      	bls.n	8002f7c <motion_stop_all_axes_locked+0xc>
    }
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200000d8 	.word	0x200000d8

0800301c <motion_queue_clear_locked>:


static void motion_queue_clear_locked(void) {
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
    g_queue_head = 0u;
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <motion_queue_clear_locked+0x20>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
    g_queue_tail = 0u;
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <motion_queue_clear_locked+0x24>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
    g_queue_count = 0u;
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <motion_queue_clear_locked+0x28>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	20000c6c 	.word	0x20000c6c
 8003040:	20000c6d 	.word	0x20000c6d
 8003044:	20000c6e 	.word	0x20000c6e

08003048 <motion_queue_push_locked>:

static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 8003050:	4b17      	ldr	r3, [pc, #92]	@ (80030b0 <motion_queue_push_locked+0x68>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b3f      	cmp	r3, #63	@ 0x3f
 8003056:	d902      	bls.n	800305e <motion_queue_push_locked+0x16>
        return PROTO_ERR_RANGE;
 8003058:	f06f 0303 	mvn.w	r3, #3
 800305c:	e024      	b.n	80030a8 <motion_queue_push_locked+0x60>
    g_queue[g_queue_tail].req = *req;
 800305e:	4b15      	ldr	r3, [pc, #84]	@ (80030b4 <motion_queue_push_locked+0x6c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	4a14      	ldr	r2, [pc, #80]	@ (80030b8 <motion_queue_push_locked+0x70>)
 8003066:	232c      	movs	r3, #44	@ 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4614      	mov	r4, r2
 8003072:	461d      	mov	r5, r3
 8003074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800307a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800307c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_tail = (uint8_t)((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <motion_queue_push_locked+0x6c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <motion_queue_push_locked+0x6c>)
 8003094:	701a      	strb	r2, [r3, #0]
    ++g_queue_count;
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <motion_queue_push_locked+0x68>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <motion_queue_push_locked+0x68>)
 80030a0:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 80030a2:	f7ff fdcd 	bl	8002c40 <motion_refresh_status_locked>
    return PROTO_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bdb0      	pop	{r4, r5, r7, pc}
 80030b0:	20000c6e 	.word	0x20000c6e
 80030b4:	20000c6d 	.word	0x20000c6d
 80030b8:	2000016c 	.word	0x2000016c

080030bc <motion_queue_pop_locked>:

static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 80030bc:	b4b0      	push	{r4, r5, r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    if (g_queue_count == 0u) return 0;
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <motion_queue_pop_locked+0x6c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <motion_queue_pop_locked+0x14>
 80030cc:	2300      	movs	r3, #0
 80030ce:	e025      	b.n	800311c <motion_queue_pop_locked+0x60>
    if (out) *out = g_queue[g_queue_head].req;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <motion_queue_pop_locked+0x40>
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <motion_queue_pop_locked+0x70>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <motion_queue_pop_locked+0x74>)
 80030e0:	232c      	movs	r3, #44	@ 0x2c
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	460c      	mov	r4, r1
 80030ea:	461d      	mov	r5, r3
 80030ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_head = (uint8_t)((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <motion_queue_pop_locked+0x70>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <motion_queue_pop_locked+0x70>)
 800310c:	701a      	strb	r2, [r3, #0]
    --g_queue_count;
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <motion_queue_pop_locked+0x6c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	3b01      	subs	r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <motion_queue_pop_locked+0x6c>)
 8003118:	701a      	strb	r2, [r3, #0]
    return 1;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bcb0      	pop	{r4, r5, r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000c6e 	.word	0x20000c6e
 800312c:	20000c6c 	.word	0x20000c6c
 8003130:	2000016c 	.word	0x2000016c

08003134 <motion_begin_segment_locked>:

static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 8003134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003138:	b08c      	sub	sp, #48	@ 0x30
 800313a:	af06      	add	r7, sp, #24
 800313c:	6078      	str	r0, [r7, #4]
    if (!seg) return;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80d9 	beq.w	80032f8 <motion_begin_segment_locked+0x1c4>

    g_has_active_segment = 1u;
 8003146:	4b6f      	ldr	r3, [pc, #444]	@ (8003304 <motion_begin_segment_locked+0x1d0>)
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]
 8003150:	e0a3      	b.n	800329a <motion_begin_segment_locked+0x166>
        motion_axis_state_t *ax = &g_axis_state[axis];
 8003152:	7dfa      	ldrb	r2, [r7, #23]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4a6a      	ldr	r2, [pc, #424]	@ (8003308 <motion_begin_segment_locked+0x1d4>)
 800315e:	4413      	add	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        uint32_t total   = motion_total_for_axis(seg, axis);
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fc7f 	bl	8002a6a <motion_total_for_axis>
 800316c:	60f8      	str	r0, [r7, #12]
        uint16_t velTick = motion_velocity_for_axis(seg, axis);
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fc93 	bl	8002a9e <motion_velocity_for_axis>
 8003178:	4603      	mov	r3, r0
 800317a:	817b      	strh	r3, [r7, #10]

        ax->total_steps       = total;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = velTick;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	897a      	ldrh	r2, [r7, #10]
 8003192:	819a      	strh	r2, [r3, #12]
        ax->kp = motion_kp_for_axis(seg, axis);
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fc9a 	bl	8002ad2 <motion_kp_for_axis>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	81da      	strh	r2, [r3, #14]
        ax->ki = motion_ki_for_axis(seg, axis);
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fcab 	bl	8002b06 <motion_ki_for_axis>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	821a      	strh	r2, [r3, #16]
        ax->kd = motion_kd_for_axis(seg, axis);
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fcbc 	bl	8002b3a <motion_kd_for_axis>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	825a      	strh	r2, [r3, #18]

        /* guardas para atender DIR/ENABLE timings do TMC5160 */
        ax->step_high         = 0u;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2200      	movs	r2, #0
 80031ce:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u; 
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2200      	movs	r2, #0
 80031d4:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = (total > 0u) ? MOTION_ENABLE_SETTLE_TICKS : 0u;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <motion_begin_segment_locked+0xac>
 80031dc:	2202      	movs	r2, #2
 80031de:	e000      	b.n	80031e2 <motion_begin_segment_locked+0xae>
 80031e0:	2200      	movs	r2, #0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        ax->dda_accum_q16     = 0u;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2200      	movs	r2, #0
 80031fa:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = ((uint32_t)velTick) * 1000u;  /* steps/s alvo (derivado do seu campo) */
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	621a      	str	r2, [r3, #32]
        if (ax->v_target_sps > MOTION_MAX_SPS) ax->v_target_sps = MOTION_MAX_SPS;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8003212:	4293      	cmp	r3, r2
 8003214:	d903      	bls.n	800321e <motion_begin_segment_locked+0xea>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800321c:	621a      	str	r2, [r3, #32]
        /* Preserva v_actual_sps ao encadear segmentos (rampa só no início da lista) */
        if (g_status.state != MOTION_RUNNING) {
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <motion_begin_segment_locked+0x1d8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d002      	beq.n	800322e <motion_begin_segment_locked+0xfa>
            ax->v_actual_sps  = 0u;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2200      	movs	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
        ax->accel_sps2        = DEMO_ACCEL_SPS2;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a37      	ldr	r2, [pc, #220]	@ (8003310 <motion_begin_segment_locked+0x1dc>)
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28

        motion_hw_step_low(axis);
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fb7c 	bl	8002934 <motion_hw_step_low>
        motion_hw_set_dir(axis, (uint8_t)((seg->dirMask >> axis) & 0x1u));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	461a      	mov	r2, r3
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	fa42 f303 	asr.w	r3, r2, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fac9 	bl	80027ec <motion_hw_set_dir>

        if (total > 0u) motion_hw_enable(axis, 1u);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <motion_begin_segment_locked+0x138>
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fb01 	bl	800286c <motion_hw_enable>
 800326a:	e004      	b.n	8003276 <motion_begin_segment_locked+0x142>
        else            motion_hw_enable(axis, 0u);
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fafb 	bl	800286c <motion_hw_enable>

        /* Não zera origem automaticamente; mantém a referência definida via set_origin */
        g_encoder_delta_tick[axis] = 0;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	4a26      	ldr	r2, [pc, #152]	@ (8003314 <motion_begin_segment_locked+0x1e0>)
 800327a:	2100      	movs	r1, #0
 800327c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_pi_i_accum[axis] = 0;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	4a25      	ldr	r2, [pc, #148]	@ (8003318 <motion_begin_segment_locked+0x1e4>)
 8003284:	2100      	movs	r1, #0
 8003286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_pi_prev_err[axis] = 0;
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	4a23      	ldr	r2, [pc, #140]	@ (800331c <motion_begin_segment_locked+0x1e8>)
 800328e:	2100      	movs	r1, #0
 8003290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	3301      	adds	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b02      	cmp	r3, #2
 800329e:	f67f af58 	bls.w	8003152 <motion_begin_segment_locked+0x1e>
    }
#if MOTION_DEBUG_FLOW
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
           (unsigned)seg->frameId,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	781b      	ldrb	r3, [r3, #0]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032a6:	4698      	mov	r8, r3
           (unsigned)seg->dirMask,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	785b      	ldrb	r3, [r3, #1]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032ac:	4699      	mov	r9, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	885b      	ldrh	r3, [r3, #2]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032b2:	469a      	mov	sl, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	891b      	ldrh	r3, [r3, #8]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032b8:	461e      	mov	r6, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8a1b      	ldrh	r3, [r3, #16]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032be:	603b      	str	r3, [r7, #0]
           (unsigned long)motion_total_for_axis(seg, AXIS_X),
 80032c0:	2100      	movs	r1, #0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fbd1 	bl	8002a6a <motion_total_for_axis>
 80032c8:	4604      	mov	r4, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Y),
 80032ca:	2101      	movs	r1, #1
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fbcc 	bl	8002a6a <motion_total_for_axis>
 80032d2:	4605      	mov	r5, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Z));
 80032d4:	2102      	movs	r1, #2
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fbc7 	bl	8002a6a <motion_total_for_axis>
 80032dc:	4603      	mov	r3, r0
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032de:	9304      	str	r3, [sp, #16]
 80032e0:	9503      	str	r5, [sp, #12]
 80032e2:	9402      	str	r4, [sp, #8]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9600      	str	r6, [sp, #0]
 80032ea:	4653      	mov	r3, sl
 80032ec:	464a      	mov	r2, r9
 80032ee:	4641      	mov	r1, r8
 80032f0:	480b      	ldr	r0, [pc, #44]	@ (8003320 <motion_begin_segment_locked+0x1ec>)
 80032f2:	f00b ffe3 	bl	800f2bc <iprintf>
 80032f6:	e000      	b.n	80032fa <motion_begin_segment_locked+0x1c6>
    if (!seg) return;
 80032f8:	bf00      	nop
#endif
}
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003302:	bf00      	nop
 8003304:	20000168 	.word	0x20000168
 8003308:	200000d8 	.word	0x200000d8
 800330c:	200000d0 	.word	0x200000d0
 8003310:	00030d40 	.word	0x00030d40
 8003314:	20000cb0 	.word	0x20000cb0
 8003318:	20000ce0 	.word	0x20000ce0
 800331c:	20000cec 	.word	0x20000cec
 8003320:	08010658 	.word	0x08010658

08003324 <motion_try_start_next_locked>:

static uint8_t motion_try_start_next_locked(void) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	@ 0x30
 8003328:	af00      	add	r7, sp, #0
    move_queue_add_req_t next;
    if (!motion_queue_pop_locked(&next))
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fec5 	bl	80030bc <motion_queue_pop_locked>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <motion_try_start_next_locked+0x18>
        return 0u;
 8003338:	2300      	movs	r3, #0
 800333a:	e010      	b.n	800335e <motion_try_start_next_locked+0x3a>
    motion_begin_segment_locked(&next);
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fef8 	bl	8003134 <motion_begin_segment_locked>
    g_active_frame_id = next.frameId;
 8003344:	793a      	ldrb	r2, [r7, #4]
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <motion_try_start_next_locked+0x44>)
 8003348:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
    printf("[FLOW pop_next id=%u remaining=%u]\\r\\n", (unsigned)g_active_frame_id, (unsigned)g_queue_count);
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <motion_try_start_next_locked+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4b06      	ldr	r3, [pc, #24]	@ (800336c <motion_try_start_next_locked+0x48>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	4806      	ldr	r0, [pc, #24]	@ (8003370 <motion_try_start_next_locked+0x4c>)
 8003358:	f00b ffb0 	bl	800f2bc <iprintf>
#endif
    return 1u;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	@ 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000c6f 	.word	0x20000c6f
 800336c:	20000c6e 	.word	0x20000c6e
 8003370:	080106b0 	.word	0x080106b0

08003374 <motion_update_encoders>:

/* =======================
 *  Encoders
 * ======================= */
static void motion_update_encoders(void) {
 8003374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003378:	b08e      	sub	sp, #56	@ 0x38
 800337a:	af02      	add	r7, sp, #8
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800337c:	2300      	movs	r3, #0
 800337e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003382:	e0cc      	b.n	800351e <motion_update_encoders+0x1aa>
        uint32_t now = motion_hw_encoder_read_raw(axis);
 8003384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff faf7 	bl	800297c <motion_hw_encoder_read_raw>
 800338e:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t bits = motion_hw_encoder_bits(axis);
 8003390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fb19 	bl	80029cc <motion_hw_encoder_bits>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (bits == 16u) {
 80033a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d15e      	bne.n	8003466 <motion_update_encoders+0xf2>
            uint16_t prev = (uint16_t)g_encoder_last_raw[axis];
 80033a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033ac:	4a61      	ldr	r2, [pc, #388]	@ (8003534 <motion_update_encoders+0x1c0>)
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	82fb      	strh	r3, [r7, #22]
            int16_t delta = (int16_t)((uint16_t)now - prev);
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	8afb      	ldrh	r3, [r7, #22]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	82bb      	strh	r3, [r7, #20]
            g_encoder_last_raw[axis] = (uint16_t)now;
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033c8:	4611      	mov	r1, r2
 80033ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003534 <motion_update_encoders+0x1c0>)
 80033cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_encoder_position[axis] += delta;
 80033d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033d4:	4a58      	ldr	r2, [pc, #352]	@ (8003538 <motion_update_encoders+0x1c4>)
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80033e2:	17c8      	asrs	r0, r1, #31
 80033e4:	460c      	mov	r4, r1
 80033e6:	4605      	mov	r5, r0
 80033e8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80033ec:	eb12 0a04 	adds.w	sl, r2, r4
 80033f0:	eb43 0b05 	adc.w	fp, r3, r5
 80033f4:	4a50      	ldr	r2, [pc, #320]	@ (8003538 <motion_update_encoders+0x1c4>)
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	e9c3 ab00 	strd	sl, fp, [r3]
            g_encoder_delta_tick[axis] = (int32_t)delta;
 80033fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003402:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003406:	494d      	ldr	r1, [pc, #308]	@ (800353c <motion_update_encoders+0x1c8>)
 8003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 800340c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d07f      	beq.n	8003514 <motion_update_encoders+0x1a0>
                long abs = (long)g_encoder_position[axis];
 8003414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003418:	4a47      	ldr	r2, [pc, #284]	@ (8003538 <motion_update_encoders+0x1c4>)
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	4613      	mov	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
                long rel = (long)(g_encoder_position[axis] - g_encoder_origin[axis]);
 8003426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800342a:	4a43      	ldr	r2, [pc, #268]	@ (8003538 <motion_update_encoders+0x1c4>)
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	4611      	mov	r1, r2
 8003436:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800343a:	4a41      	ldr	r2, [pc, #260]	@ (8003540 <motion_update_encoders+0x1cc>)
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	4613      	mov	r3, r2
 8003446:	1acb      	subs	r3, r1, r3
 8003448:	60fb      	str	r3, [r7, #12]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 800344a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800344e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800345e:	4839      	ldr	r0, [pc, #228]	@ (8003544 <motion_update_encoders+0x1d0>)
 8003460:	f00b ff2c 	bl	800f2bc <iprintf>
 8003464:	e056      	b.n	8003514 <motion_update_encoders+0x1a0>
                       abs,
                       rel);
            }
#endif
        } else {
            int32_t delta = (int32_t)(now - g_encoder_last_raw[axis]);
 8003466:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800346a:	4a32      	ldr	r2, [pc, #200]	@ (8003534 <motion_update_encoders+0x1c0>)
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	623b      	str	r3, [r7, #32]
            g_encoder_last_raw[axis] = now;
 8003476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800347a:	492e      	ldr	r1, [pc, #184]	@ (8003534 <motion_update_encoders+0x1c0>)
 800347c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_position[axis] += delta;
 8003482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003486:	4a2c      	ldr	r2, [pc, #176]	@ (8003538 <motion_update_encoders+0x1c4>)
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	17c8      	asrs	r0, r1, #31
 8003494:	4688      	mov	r8, r1
 8003496:	4681      	mov	r9, r0
 8003498:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800349c:	eb12 0008 	adds.w	r0, r2, r8
 80034a0:	6038      	str	r0, [r7, #0]
 80034a2:	eb43 0309 	adc.w	r3, r3, r9
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <motion_update_encoders+0x1c4>)
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034b2:	e9c3 1200 	strd	r1, r2, [r3]
            g_encoder_delta_tick[axis] = delta;
 80034b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ba:	4920      	ldr	r1, [pc, #128]	@ (800353c <motion_update_encoders+0x1c8>)
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d025      	beq.n	8003514 <motion_update_encoders+0x1a0>
                long abs = (long)g_encoder_position[axis];
 80034c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <motion_update_encoders+0x1c4>)
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	4613      	mov	r3, r2
 80034d8:	61fb      	str	r3, [r7, #28]
                long rel = (long)(g_encoder_position[axis] - g_encoder_origin[axis]);
 80034da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034de:	4a16      	ldr	r2, [pc, #88]	@ (8003538 <motion_update_encoders+0x1c4>)
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ee:	4a14      	ldr	r2, [pc, #80]	@ (8003540 <motion_update_encoders+0x1cc>)
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	4613      	mov	r3, r2
 80034fa:	1acb      	subs	r3, r1, r3
 80034fc:	61bb      	str	r3, [r7, #24]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 80034fe:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800350e:	480e      	ldr	r0, [pc, #56]	@ (8003548 <motion_update_encoders+0x1d4>)
 8003510:	f00b fed4 	bl	800f2bc <iprintf>
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003514:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003518:	3301      	adds	r3, #1
 800351a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800351e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003522:	2b02      	cmp	r3, #2
 8003524:	f67f af2e 	bls.w	8003384 <motion_update_encoders+0x10>
                       rel);
            }
#endif
        }
    }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3730      	adds	r7, #48	@ 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003534:	20000c88 	.word	0x20000c88
 8003538:	20000c70 	.word	0x20000c70
 800353c:	20000cb0 	.word	0x20000cb0
 8003540:	20000c98 	.word	0x20000c98
 8003544:	080106d8 	.word	0x080106d8
 8003548:	08010708 	.word	0x08010708

0800354c <motion_send_queue_add_ack>:

/* =======================
 *  Envio de respostas
 * ======================= */
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af02      	add	r7, sp, #8
 8003552:	4603      	mov	r3, r0
 8003554:	460a      	mov	r2, r1
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	4613      	mov	r3, r2
 800355a:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[6];
    move_queue_add_ack_resp_t resp = { frame_id, status };
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	733b      	strb	r3, [r7, #12]
 8003560:	79bb      	ldrb	r3, [r7, #6]
 8003562:	737b      	strb	r3, [r7, #13]
    if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8003564:	f107 0110 	add.w	r1, r7, #16
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	2206      	movs	r2, #6
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd ff17 	bl	80013a2 <move_queue_add_ack_resp_encoder>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <motion_send_queue_add_ack+0x48>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <motion_send_queue_add_ack+0x78>)
 800357c:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <motion_send_queue_add_ack+0x7c>)
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <motion_send_queue_add_ack+0x80>)
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	f06f 0201 	mvn.w	r2, #1
 800358a:	2164      	movs	r1, #100	@ 0x64
 800358c:	2002      	movs	r0, #2
 800358e:	f7ff f837 	bl	8002600 <log_event_auto>
 8003592:	e014      	b.n	80035be <motion_send_queue_add_ack+0x72>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	2106      	movs	r1, #6
 800359a:	4618      	mov	r0, r3
 800359c:	f002 f804 	bl	80055a8 <app_resp_push>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <motion_send_queue_add_ack+0x72>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 80035a6:	4a07      	ldr	r2, [pc, #28]	@ (80035c4 <motion_send_queue_add_ack+0x78>)
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <motion_send_queue_add_ack+0x84>)
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <motion_send_queue_add_ack+0x80>)
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	f06f 0203 	mvn.w	r2, #3
 80035b6:	2164      	movs	r1, #100	@ 0x64
 80035b8:	2002      	movs	r0, #2
 80035ba:	f7ff f821 	bl	8002600 <log_event_auto>
    }
}
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	08010650 	.word	0x08010650
 80035c8:	0801073c 	.word	0x0801073c
 80035cc:	08010748 	.word	0x08010748
 80035d0:	0801074c 	.word	0x0801074c

080035d4 <motion_send_queue_status_response>:

static void motion_send_queue_status_response(uint8_t frame_id) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	@ 0x28
 80035d8:	af02      	add	r7, sp, #8
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[12];
    move_queue_status_resp_t resp = {
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	733b      	strb	r3, [r7, #12]
        .frameId = frame_id,
        .status  = (uint8_t)g_status.state,
 80035e2:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <motion_send_queue_status_response+0xac>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035e8:	737b      	strb	r3, [r7, #13]
        .pidErrX = (uint8_t)g_status.pidErrX,
 80035ea:	4b25      	ldr	r3, [pc, #148]	@ (8003680 <motion_send_queue_status_response+0xac>)
 80035ec:	795b      	ldrb	r3, [r3, #5]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035f2:	73bb      	strb	r3, [r7, #14]
        .pidErrY = (uint8_t)g_status.pidErrY,
 80035f4:	4b22      	ldr	r3, [pc, #136]	@ (8003680 <motion_send_queue_status_response+0xac>)
 80035f6:	799b      	ldrb	r3, [r3, #6]
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035fc:	73fb      	strb	r3, [r7, #15]
        .pidErrZ = (uint8_t)g_status.pidErrZ,
 80035fe:	4b20      	ldr	r3, [pc, #128]	@ (8003680 <motion_send_queue_status_response+0xac>)
 8003600:	79db      	ldrb	r3, [r3, #7]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8003606:	743b      	strb	r3, [r7, #16]
        .pctX    = g_status.pctX,
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <motion_send_queue_status_response+0xac>)
 800360a:	789b      	ldrb	r3, [r3, #2]
 800360c:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 800360e:	747b      	strb	r3, [r7, #17]
        .pctY    = g_status.pctY,
 8003610:	4b1b      	ldr	r3, [pc, #108]	@ (8003680 <motion_send_queue_status_response+0xac>)
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8003616:	74bb      	strb	r3, [r7, #18]
        .pctZ    = g_status.pctZ,
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <motion_send_queue_status_response+0xac>)
 800361a:	791b      	ldrb	r3, [r3, #4]
 800361c:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 800361e:	74fb      	strb	r3, [r7, #19]
    };
    if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8003620:	f107 0114 	add.w	r1, r7, #20
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	220c      	movs	r2, #12
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd ff71 	bl	8001512 <move_queue_status_resp_encoder>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <motion_send_queue_status_response+0x7c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 8003636:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <motion_send_queue_status_response+0xb0>)
 8003638:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <motion_send_queue_status_response+0xb4>)
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	4b13      	ldr	r3, [pc, #76]	@ (800368c <motion_send_queue_status_response+0xb8>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	f06f 0201 	mvn.w	r2, #1
 8003646:	2164      	movs	r1, #100	@ 0x64
 8003648:	2002      	movs	r0, #2
 800364a:	f7fe ffd9 	bl	8002600 <log_event_auto>
 800364e:	e014      	b.n	800367a <motion_send_queue_status_response+0xa6>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	210c      	movs	r1, #12
 8003656:	4618      	mov	r0, r3
 8003658:	f001 ffa6 	bl	80055a8 <app_resp_push>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <motion_send_queue_status_response+0xa6>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <motion_send_queue_status_response+0xb0>)
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <motion_send_queue_status_response+0xbc>)
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <motion_send_queue_status_response+0xb8>)
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	f06f 0203 	mvn.w	r2, #3
 8003672:	2164      	movs	r1, #100	@ 0x64
 8003674:	2002      	movs	r0, #2
 8003676:	f7fe ffc3 	bl	8002600 <log_event_auto>
    }
}
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200000d0 	.word	0x200000d0
 8003684:	08010650 	.word	0x08010650
 8003688:	0801073c 	.word	0x0801073c
 800368c:	08010758 	.word	0x08010758
 8003690:	0801074c 	.word	0x0801074c

08003694 <motion_send_start_response>:

static void motion_send_start_response(uint8_t frame_id, uint8_t status) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	4603      	mov	r3, r0
 800369c:	460a      	mov	r2, r1
 800369e:	71fb      	strb	r3, [r7, #7]
 80036a0:	4613      	mov	r3, r2
 80036a2:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[5];
    start_move_resp_t resp; resp.frameId = frame_id; resp.status = status;
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	733b      	strb	r3, [r7, #12]
 80036a8:	79bb      	ldrb	r3, [r7, #6]
 80036aa:	737b      	strb	r3, [r7, #13]
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 80036ac:	f107 0110 	add.w	r1, r7, #16
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	2205      	movs	r2, #5
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f81b 	bl	80016f2 <start_move_resp_encoder>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <motion_send_start_response+0x5a>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 80036c2:	f107 0310 	add.w	r3, r7, #16
 80036c6:	2105      	movs	r1, #5
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 ff6d 	bl	80055a8 <app_resp_push>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <motion_send_start_response+0x5c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 80036d4:	4a08      	ldr	r2, [pc, #32]	@ (80036f8 <motion_send_start_response+0x64>)
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <motion_send_start_response+0x68>)
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <motion_send_start_response+0x6c>)
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	f06f 0203 	mvn.w	r2, #3
 80036e4:	2164      	movs	r1, #100	@ 0x64
 80036e6:	2002      	movs	r0, #2
 80036e8:	f7fe ff8a 	bl	8002600 <log_event_auto>
 80036ec:	e000      	b.n	80036f0 <motion_send_start_response+0x5c>
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 80036ee:	bf00      	nop
    }
}
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	08010650 	.word	0x08010650
 80036fc:	08010760 	.word	0x08010760
 8003700:	08010770 	.word	0x08010770

08003704 <motion_send_move_end_response>:

static void motion_send_move_end_response(uint8_t frame_id, uint8_t status) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	4603      	mov	r3, r0
 800370c:	460a      	mov	r2, r1
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	4613      	mov	r3, r2
 8003712:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[5];
    move_end_resp_t resp; resp.frameId = frame_id; resp.status = status;
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	733b      	strb	r3, [r7, #12]
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	737b      	strb	r3, [r7, #13]
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 800371c:	f107 0110 	add.w	r1, r7, #16
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	2205      	movs	r2, #5
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fd88 	bl	800123c <move_end_resp_encoder>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d115      	bne.n	800375e <motion_send_move_end_response+0x5a>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	2105      	movs	r1, #5
 8003738:	4618      	mov	r0, r3
 800373a:	f001 ff35 	bl	80055a8 <app_resp_push>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <motion_send_move_end_response+0x5c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end", "resp_queue_full");
 8003744:	4a08      	ldr	r2, [pc, #32]	@ (8003768 <motion_send_move_end_response+0x64>)
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <motion_send_move_end_response+0x68>)
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <motion_send_move_end_response+0x6c>)
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	f06f 0203 	mvn.w	r2, #3
 8003754:	2164      	movs	r1, #100	@ 0x64
 8003756:	2002      	movs	r0, #2
 8003758:	f7fe ff52 	bl	8002600 <log_event_auto>
 800375c:	e000      	b.n	8003760 <motion_send_move_end_response+0x5c>
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 800375e:	bf00      	nop
    }
}
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08010650 	.word	0x08010650
 800376c:	08010760 	.word	0x08010760
 8003770:	08010778 	.word	0x08010778

08003774 <motion_service_init>:


/* =======================
 *  Init
 * ======================= */
void motion_service_init(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af04      	add	r7, sp, #16
    uint32_t primask = motion_lock();
 800377a:	f7ff f955 	bl	8002a28 <motion_lock>
 800377e:	60b8      	str	r0, [r7, #8]

    memset(&g_status, 0, sizeof g_status);
 8003780:	2208      	movs	r2, #8
 8003782:	2100      	movs	r1, #0
 8003784:	484b      	ldr	r0, [pc, #300]	@ (80038b4 <motion_service_init+0x140>)
 8003786:	f00b ffd1 	bl	800f72c <memset>
    memset(g_axis_state, 0, sizeof g_axis_state);
 800378a:	2290      	movs	r2, #144	@ 0x90
 800378c:	2100      	movs	r1, #0
 800378e:	484a      	ldr	r0, [pc, #296]	@ (80038b8 <motion_service_init+0x144>)
 8003790:	f00b ffcc 	bl	800f72c <memset>
    memset(g_queue, 0, sizeof g_queue);
 8003794:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 8003798:	2100      	movs	r1, #0
 800379a:	4848      	ldr	r0, [pc, #288]	@ (80038bc <motion_service_init+0x148>)
 800379c:	f00b ffc6 	bl	800f72c <memset>
    memset(g_encoder_position, 0, sizeof g_encoder_position);
 80037a0:	2218      	movs	r2, #24
 80037a2:	2100      	movs	r1, #0
 80037a4:	4846      	ldr	r0, [pc, #280]	@ (80038c0 <motion_service_init+0x14c>)
 80037a6:	f00b ffc1 	bl	800f72c <memset>
    memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 80037aa:	220c      	movs	r2, #12
 80037ac:	2100      	movs	r1, #0
 80037ae:	4845      	ldr	r0, [pc, #276]	@ (80038c4 <motion_service_init+0x150>)
 80037b0:	f00b ffbc 	bl	800f72c <memset>
    memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 80037b4:	2218      	movs	r2, #24
 80037b6:	2100      	movs	r1, #0
 80037b8:	4843      	ldr	r0, [pc, #268]	@ (80038c8 <motion_service_init+0x154>)
 80037ba:	f00b ffb7 	bl	800f72c <memset>
    memset(g_encoder_delta_tick, 0, sizeof g_encoder_delta_tick);
 80037be:	220c      	movs	r2, #12
 80037c0:	2100      	movs	r1, #0
 80037c2:	4842      	ldr	r0, [pc, #264]	@ (80038cc <motion_service_init+0x158>)
 80037c4:	f00b ffb2 	bl	800f72c <memset>
    memset(g_pi_i_accum, 0, sizeof g_pi_i_accum);
 80037c8:	220c      	movs	r2, #12
 80037ca:	2100      	movs	r1, #0
 80037cc:	4840      	ldr	r0, [pc, #256]	@ (80038d0 <motion_service_init+0x15c>)
 80037ce:	f00b ffad 	bl	800f72c <memset>
    memset(g_pi_prev_err, 0, sizeof g_pi_prev_err);
 80037d2:	220c      	movs	r2, #12
 80037d4:	2100      	movs	r1, #0
 80037d6:	483f      	ldr	r0, [pc, #252]	@ (80038d4 <motion_service_init+0x160>)
 80037d8:	f00b ffa8 	bl	800f72c <memset>
    memset(g_origin_base32, 0, sizeof g_origin_base32);
 80037dc:	220c      	movs	r2, #12
 80037de:	2100      	movs	r1, #0
 80037e0:	483d      	ldr	r0, [pc, #244]	@ (80038d8 <motion_service_init+0x164>)
 80037e2:	f00b ffa3 	bl	800f72c <memset>
    memset(g_pi_d_filt, 0, sizeof g_pi_d_filt);
 80037e6:	220c      	movs	r2, #12
 80037e8:	2100      	movs	r1, #0
 80037ea:	483c      	ldr	r0, [pc, #240]	@ (80038dc <motion_service_init+0x168>)
 80037ec:	f00b ff9e 	bl	800f72c <memset>
    memset(g_v_accum, 0, sizeof g_v_accum);
 80037f0:	220c      	movs	r2, #12
 80037f2:	2100      	movs	r1, #0
 80037f4:	483a      	ldr	r0, [pc, #232]	@ (80038e0 <motion_service_init+0x16c>)
 80037f6:	f00b ff99 	bl	800f72c <memset>

    g_status.state = MOTION_IDLE;
 80037fa:	4b2e      	ldr	r3, [pc, #184]	@ (80038b4 <motion_service_init+0x140>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
    g_queue_head = g_queue_tail = g_queue_count = 0u;
 8003800:	4b38      	ldr	r3, [pc, #224]	@ (80038e4 <motion_service_init+0x170>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	4b37      	ldr	r3, [pc, #220]	@ (80038e4 <motion_service_init+0x170>)
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	4b37      	ldr	r3, [pc, #220]	@ (80038e8 <motion_service_init+0x174>)
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <motion_service_init+0x174>)
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	4b36      	ldr	r3, [pc, #216]	@ (80038ec <motion_service_init+0x178>)
 8003814:	701a      	strb	r2, [r3, #0]
    g_has_active_segment = 0u;
 8003816:	4b36      	ldr	r3, [pc, #216]	@ (80038f0 <motion_service_init+0x17c>)
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]

    motion_stop_all_axes_locked();
 800381c:	f7ff fba8 	bl	8002f70 <motion_stop_all_axes_locked>
    motion_refresh_status_locked();
 8003820:	f7ff fa0e 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f7ff f910 	bl	8002a4a <motion_unlock>

    motion_hw_init();
 800382a:	f7fe ff57 	bl	80026dc <motion_hw_init>

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e01a      	b.n	800386a <motion_service_init+0xf6>
        uint32_t raw = motion_hw_encoder_read_raw(axis);
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f8a0 	bl	800297c <motion_hw_encoder_read_raw>
 800383c:	6078      	str	r0, [r7, #4]
        if (motion_hw_encoder_bits(axis) == 16u) {
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f8c3 	bl	80029cc <motion_hw_encoder_bits>
 8003846:	4603      	mov	r3, r0
 8003848:	2b10      	cmp	r3, #16
 800384a:	d106      	bne.n	800385a <motion_service_init+0xe6>
            g_encoder_last_raw[axis] = raw & 0xFFFFu;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	b292      	uxth	r2, r2
 8003852:	491c      	ldr	r1, [pc, #112]	@ (80038c4 <motion_service_init+0x150>)
 8003854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003858:	e004      	b.n	8003864 <motion_service_init+0xf0>
        } else {
            g_encoder_last_raw[axis] = raw;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	4919      	ldr	r1, [pc, #100]	@ (80038c4 <motion_service_init+0x150>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	3301      	adds	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d9e1      	bls.n	8003834 <motion_service_init+0xc0>
        }
    }

    if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) Error_Handler();
 8003870:	4820      	ldr	r0, [pc, #128]	@ (80038f4 <motion_service_init+0x180>)
 8003872:	f007 fd61 	bl	800b338 <HAL_TIM_Base_Start_IT>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <motion_service_init+0x10c>
 800387c:	f002 fa60 	bl	8005d40 <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) Error_Handler();
 8003880:	481d      	ldr	r0, [pc, #116]	@ (80038f8 <motion_service_init+0x184>)
 8003882:	f007 fd59 	bl	800b338 <HAL_TIM_Base_Start_IT>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <motion_service_init+0x11c>
 800388c:	f002 fa58 	bl	8005d40 <Error_Handler>

    LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8003890:	4a1a      	ldr	r2, [pc, #104]	@ (80038fc <motion_service_init+0x188>)
 8003892:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <motion_service_init+0x18c>)
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <motion_service_init+0x190>)
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <motion_service_init+0x194>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	2200      	movs	r2, #0
 80038a2:	2100      	movs	r1, #0
 80038a4:	2002      	movs	r0, #2
 80038a6:	f7fe feab 	bl	8002600 <log_event_auto>
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200000d0 	.word	0x200000d0
 80038b8:	200000d8 	.word	0x200000d8
 80038bc:	2000016c 	.word	0x2000016c
 80038c0:	20000c70 	.word	0x20000c70
 80038c4:	20000c88 	.word	0x20000c88
 80038c8:	20000c98 	.word	0x20000c98
 80038cc:	20000cb0 	.word	0x20000cb0
 80038d0:	20000ce0 	.word	0x20000ce0
 80038d4:	20000cec 	.word	0x20000cec
 80038d8:	20000cbc 	.word	0x20000cbc
 80038dc:	20000cc8 	.word	0x20000cc8
 80038e0:	20000cd4 	.word	0x20000cd4
 80038e4:	20000c6e 	.word	0x20000c6e
 80038e8:	20000c6d 	.word	0x20000c6d
 80038ec:	20000c6c 	.word	0x20000c6c
 80038f0:	20000168 	.word	0x20000168
 80038f4:	20000fd0 	.word	0x20000fd0
 80038f8:	2000101c 	.word	0x2000101c
 80038fc:	08010650 	.word	0x08010650
 8003900:	08010784 	.word	0x08010784
 8003904:	08010794 	.word	0x08010794
 8003908:	08010798 	.word	0x08010798

0800390c <motion_on_tim6_tick>:
 *  - fecha largura de pulso
 *  - DEMO: DDA suave
 *  - Fila: caminho original
 * ======================= */
void motion_on_tim6_tick(void)
{
 800390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390e:	b091      	sub	sp, #68	@ 0x44
 8003910:	af06      	add	r7, sp, #24
    if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 8003912:	4ba1      	ldr	r3, [pc, #644]	@ (8003b98 <motion_on_tim6_tick+0x28c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	f040 8192 	bne.w	8003c42 <motion_on_tim6_tick+0x336>
 800391e:	4b9f      	ldr	r3, [pc, #636]	@ (8003b9c <motion_on_tim6_tick+0x290>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 818c 	beq.w	8003c42 <motion_on_tim6_tick+0x336>
        return;

    /* 1) Fecha pulsos altos pendentes (garante largura do STEP) */
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003930:	e02e      	b.n	8003990 <motion_on_tim6_tick+0x84>
        motion_axis_state_t *ax = &g_axis_state[axis];
 8003932:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4a98      	ldr	r2, [pc, #608]	@ (8003ba0 <motion_on_tim6_tick+0x294>)
 8003940:	4413      	add	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
        if (ax->step_high) {
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	7d1b      	ldrb	r3, [r3, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <motion_on_tim6_tick+0x66>
            if (--ax->step_high == 0u) {
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	7d1b      	ldrb	r3, [r3, #20]
 8003950:	3b01      	subs	r3, #1
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	751a      	strb	r2, [r3, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	7d1b      	ldrb	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d112      	bne.n	8003986 <motion_on_tim6_tick+0x7a>
                motion_hw_step_low(axis);
 8003960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe ffe5 	bl	8002934 <motion_hw_step_low>
                ax->step_low = MOTION_STEP_LOW_TICKS; /* Para voltar ao comportamento anterior, defina MOTION_STEP_LOW_TICKS=0u */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	755a      	strb	r2, [r3, #21]
 8003970:	e009      	b.n	8003986 <motion_on_tim6_tick+0x7a>
            }
        } else if (ax->step_low) {
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	7d5b      	ldrb	r3, [r3, #21]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <motion_on_tim6_tick+0x7a>
            --ax->step_low;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	7d5b      	ldrb	r3, [r3, #21]
 800397e:	3b01      	subs	r3, #1
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	755a      	strb	r2, [r3, #21]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800398a:	3301      	adds	r3, #1
 800398c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003994:	2b02      	cmp	r3, #2
 8003996:	d9cc      	bls.n	8003932 <motion_on_tim6_tick+0x26>
        }
    }

    if (g_demo_continuous) {
 8003998:	4b82      	ldr	r3, [pc, #520]	@ (8003ba4 <motion_on_tim6_tick+0x298>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d065      	beq.n	8003a6e <motion_on_tim6_tick+0x162>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80039a8:	e05c      	b.n	8003a64 <motion_on_tim6_tick+0x158>
            motion_axis_state_t *ax = &g_axis_state[axis];
 80039aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ba0 <motion_on_tim6_tick+0x294>)
 80039b8:	4413      	add	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]

            if (ax->emitted_steps >= ax->total_steps) continue;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d243      	bcs.n	8003a50 <motion_on_tim6_tick+0x144>

            /* guardas de ENABLE e DIR (atendem setup/hold do TMC5160) */
            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <motion_on_tim6_tick+0xd8>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039d8:	3b01      	subs	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80039e2:	e03a      	b.n	8003a5a <motion_on_tim6_tick+0x14e>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <motion_on_tim6_tick+0xf4>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80039fe:	e02c      	b.n	8003a5a <motion_on_tim6_tick+0x14e>

            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	7d1b      	ldrb	r3, [r3, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d125      	bne.n	8003a54 <motion_on_tim6_tick+0x148>
            if (ax->step_low)  continue; 
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	7d5b      	ldrb	r3, [r3, #21]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d123      	bne.n	8003a58 <motion_on_tim6_tick+0x14c>

            /* DDA: acumula fase e emite STEP ao cruzar 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	441a      	add	r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a26:	d318      	bcc.n	8003a5a <motion_on_tim6_tick+0x14e>
                ax->dda_accum_q16 -= Q16_1;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	619a      	str	r2, [r3, #24]

                motion_hw_step_high(axis);
 8003a34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe ff57 	bl	80028ec <motion_hw_step_high>
                ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2201      	movs	r2, #1
 8003a42:	751a      	strb	r2, [r3, #20]
                ++ax->emitted_steps;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	e004      	b.n	8003a5a <motion_on_tim6_tick+0x14e>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003a50:	bf00      	nop
 8003a52:	e002      	b.n	8003a5a <motion_on_tim6_tick+0x14e>
            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <motion_on_tim6_tick+0x14e>
            if (ax->step_low)  continue; 
 8003a58:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d99e      	bls.n	80039aa <motion_on_tim6_tick+0x9e>
 8003a6c:	e06e      	b.n	8003b4c <motion_on_tim6_tick+0x240>
            }
        }
    }
    else {
        /* 3) Caminho original (fila): preservado */
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003a74:	e066      	b.n	8003b44 <motion_on_tim6_tick+0x238>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003a76:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	4a47      	ldr	r2, [pc, #284]	@ (8003ba0 <motion_on_tim6_tick+0x294>)
 8003a84:	4413      	add	r3, r2
 8003a86:	61fb      	str	r3, [r7, #28]

            if (ax->step_high) continue;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	7d1b      	ldrb	r3, [r3, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d14f      	bne.n	8003b30 <motion_on_tim6_tick+0x224>
            if (ax->step_low)  continue; 
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	7d5b      	ldrb	r3, [r3, #21]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d14d      	bne.n	8003b34 <motion_on_tim6_tick+0x228>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d249      	bcs.n	8003b38 <motion_on_tim6_tick+0x22c>

            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <motion_on_tim6_tick+0x1b4>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003abe:	e03c      	b.n	8003b3a <motion_on_tim6_tick+0x22e>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <motion_on_tim6_tick+0x1d0>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003ada:	e02e      	b.n	8003b3a <motion_on_tim6_tick+0x22e>

            /* DDA (fila): acumula fase e emite STEP no cruzamento de 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	441a      	add	r2, r3
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af2:	d322      	bcc.n	8003b3a <motion_on_tim6_tick+0x22e>
                ax->dda_accum_q16 -= Q16_1;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	619a      	str	r2, [r3, #24]
                if (ax->emitted_steps < ax->total_steps) {
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d216      	bcs.n	8003b3a <motion_on_tim6_tick+0x22e>
                    motion_hw_step_high(axis);
 8003b0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe feeb 	bl	80028ec <motion_hw_step_high>
                    ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	751a      	strb	r2, [r3, #20]
                    ++ax->emitted_steps;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	609a      	str	r2, [r3, #8]
                    ax->target_steps = ax->emitted_steps;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e004      	b.n	8003b3a <motion_on_tim6_tick+0x22e>
            if (ax->step_high) continue;
 8003b30:	bf00      	nop
 8003b32:	e002      	b.n	8003b3a <motion_on_tim6_tick+0x22e>
            if (ax->step_low)  continue; 
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <motion_on_tim6_tick+0x22e>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003b38:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003b44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d994      	bls.n	8003a76 <motion_on_tim6_tick+0x16a>
#endif
                }
            }
        }
    }
    uint32_t primask = motion_lock();
 8003b4c:	f7fe ff6c 	bl	8002a28 <motion_lock>
 8003b50:	6178      	str	r0, [r7, #20]
    if (g_has_active_segment) {
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <motion_on_tim6_tick+0x290>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d06e      	beq.n	8003c3a <motion_on_tim6_tick+0x32e>
        uint8_t confirm = 1u;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b68:	e023      	b.n	8003bb2 <motion_on_tim6_tick+0x2a6>
            const motion_axis_state_t *ax = &g_axis_state[axis];
 8003b6a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003b6e:	4613      	mov	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <motion_on_tim6_tick+0x294>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
            if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d303      	bcc.n	8003b90 <motion_on_tim6_tick+0x284>
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	7d1b      	ldrb	r3, [r3, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <motion_on_tim6_tick+0x29c>
                confirm = 0u; break;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003b96:	e010      	b.n	8003bba <motion_on_tim6_tick+0x2ae>
 8003b98:	200000d0 	.word	0x200000d0
 8003b9c:	20000168 	.word	0x20000168
 8003ba0:	200000d8 	.word	0x200000d8
 8003ba4:	20000d10 	.word	0x20000d10
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bac:	3301      	adds	r3, #1
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d9d7      	bls.n	8003b6a <motion_on_tim6_tick+0x25e>
            }
        }
        if (confirm) {
 8003bba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d03b      	beq.n	8003c3a <motion_on_tim6_tick+0x32e>
            if (motion_try_start_next_locked()) {
 8003bc2:	f7ff fbaf 	bl	8003324 <motion_try_start_next_locked>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d006      	beq.n	8003bda <motion_on_tim6_tick+0x2ce>
                g_status.state = MOTION_RUNNING;
 8003bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c4c <motion_on_tim6_tick+0x340>)
 8003bce:	2202      	movs	r2, #2
 8003bd0:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
                printf("[FLOW next_segment started]\r\n");
 8003bd2:	481f      	ldr	r0, [pc, #124]	@ (8003c50 <motion_on_tim6_tick+0x344>)
 8003bd4:	f00b fbda 	bl	800f38c <puts>
 8003bd8:	e02d      	b.n	8003c36 <motion_on_tim6_tick+0x32a>
#endif
            } else {
                g_has_active_segment = 0u;
 8003bda:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <motion_on_tim6_tick+0x348>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
                motion_stop_all_axes_locked();
 8003be0:	f7ff f9c6 	bl	8002f70 <motion_stop_all_axes_locked>
                g_status.state = MOTION_DONE;
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <motion_on_tim6_tick+0x340>)
 8003be6:	2205      	movs	r2, #5
 8003be8:	701a      	strb	r2, [r3, #0]
                motion_send_move_end_response(g_active_frame_id, 0u /* natural_done */);
 8003bea:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <motion_on_tim6_tick+0x34c>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fd87 	bl	8003704 <motion_send_move_end_response>
#if MOTION_DEBUG_ENCODERS
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
                       (long)g_enc_abs32[AXIS_X],
 8003bf6:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <motion_on_tim6_tick+0x350>)
 8003bf8:	681e      	ldr	r6, [r3, #0]
                       (long)g_enc_abs32[AXIS_Y],
 8003bfa:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <motion_on_tim6_tick+0x350>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	607b      	str	r3, [r7, #4]
                       (long)g_enc_abs32[AXIS_Z],
 8003c00:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <motion_on_tim6_tick+0x350>)
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	6039      	str	r1, [r7, #0]
                       (long)g_enc_rel32[AXIS_X],
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <motion_on_tim6_tick+0x354>)
 8003c08:	681b      	ldr	r3, [r3, #0]
                       (long)g_enc_rel32[AXIS_Y],
 8003c0a:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <motion_on_tim6_tick+0x354>)
 8003c0c:	6852      	ldr	r2, [r2, #4]
                       (long)g_enc_rel32[AXIS_Z],
 8003c0e:	4914      	ldr	r1, [pc, #80]	@ (8003c60 <motion_on_tim6_tick+0x354>)
 8003c10:	6889      	ldr	r1, [r1, #8]
                       (unsigned long)g_axis_state[AXIS_X].total_steps,
 8003c12:	4814      	ldr	r0, [pc, #80]	@ (8003c64 <motion_on_tim6_tick+0x358>)
 8003c14:	6800      	ldr	r0, [r0, #0]
                       (unsigned long)g_axis_state[AXIS_Y].total_steps,
 8003c16:	4c13      	ldr	r4, [pc, #76]	@ (8003c64 <motion_on_tim6_tick+0x358>)
 8003c18:	6b24      	ldr	r4, [r4, #48]	@ 0x30
                       (unsigned long)g_axis_state[AXIS_Z].total_steps);
 8003c1a:	4d12      	ldr	r5, [pc, #72]	@ (8003c64 <motion_on_tim6_tick+0x358>)
 8003c1c:	6e2d      	ldr	r5, [r5, #96]	@ 0x60
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
 8003c1e:	9505      	str	r5, [sp, #20]
 8003c20:	9404      	str	r4, [sp, #16]
 8003c22:	9003      	str	r0, [sp, #12]
 8003c24:	9102      	str	r1, [sp, #8]
 8003c26:	9201      	str	r2, [sp, #4]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4631      	mov	r1, r6
 8003c30:	480d      	ldr	r0, [pc, #52]	@ (8003c68 <motion_on_tim6_tick+0x35c>)
 8003c32:	f00b fb43 	bl	800f2bc <iprintf>
#endif
            }
            motion_refresh_status_locked();
 8003c36:	f7ff f803 	bl	8002c40 <motion_refresh_status_locked>
        }
    }
    motion_unlock(primask);
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f7fe ff05 	bl	8002a4a <motion_unlock>
 8003c40:	e000      	b.n	8003c44 <motion_on_tim6_tick+0x338>
        return;
 8003c42:	bf00      	nop
}
 8003c44:	372c      	adds	r7, #44	@ 0x2c
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200000d0 	.word	0x200000d0
 8003c50:	080107a0 	.word	0x080107a0
 8003c54:	20000168 	.word	0x20000168
 8003c58:	20000c6f 	.word	0x20000c6f
 8003c5c:	20000cf8 	.word	0x20000cf8
 8003c60:	20000d04 	.word	0x20000d04
 8003c64:	200000d8 	.word	0x200000d8
 8003c68:	080107c0 	.word	0x080107c0

08003c6c <motion_on_tim7_tick>:
 *  - Atualiza encoders
 *  - DEMO: rampa e dda_inc
 *  - Fila: sua original de target_steps
 * ======================= */
void motion_on_tim7_tick(void)
{
 8003c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c70:	b0b4      	sub	sp, #208	@ 0xd0
 8003c72:	af00      	add	r7, sp, #0
    motion_update_encoders();
 8003c74:	f7ff fb7e 	bl	8003374 <motion_update_encoders>

    // Atualiza sombras 32-bit para SWV/Data Trace (4 bytes por amostra)
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8003c7e:	e027      	b.n	8003cd0 <motion_on_tim7_tick+0x64>
        g_enc_abs32[axis] = (int32_t)g_encoder_position[axis];
 8003c80:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c84:	4ac9      	ldr	r2, [pc, #804]	@ (8003fac <motion_on_tim7_tick+0x340>)
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f897 10cf 	ldrb.w	r1, [r7, #207]	@ 0xcf
 8003c92:	4bc7      	ldr	r3, [pc, #796]	@ (8003fb0 <motion_on_tim7_tick+0x344>)
 8003c94:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        g_enc_rel32[axis] = (int32_t)(g_encoder_position[axis] - g_encoder_origin[axis]);
 8003c98:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c9c:	4ac3      	ldr	r2, [pc, #780]	@ (8003fac <motion_on_tim7_tick+0x340>)
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003cac:	4ac1      	ldr	r2, [pc, #772]	@ (8003fb4 <motion_on_tim7_tick+0x348>)
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	1acb      	subs	r3, r1, r3
 8003cba:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4bbd      	ldr	r3, [pc, #756]	@ (8003fb8 <motion_on_tim7_tick+0x34c>)
 8003cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003cc6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8003cd0:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d9d3      	bls.n	8003c80 <motion_on_tim7_tick+0x14>
    }

    /* DEMO: aplica rampa e calcula incremento do DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && g_demo_continuous) {
 8003cd8:	4bb8      	ldr	r3, [pc, #736]	@ (8003fbc <motion_on_tim7_tick+0x350>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	f040 80c5 	bne.w	8003e6e <motion_on_tim7_tick+0x202>
 8003ce4:	4bb6      	ldr	r3, [pc, #728]	@ (8003fc0 <motion_on_tim7_tick+0x354>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80bf 	beq.w	8003e6e <motion_on_tim7_tick+0x202>
 8003cf0:	4bb4      	ldr	r3, [pc, #720]	@ (8003fc4 <motion_on_tim7_tick+0x358>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80b9 	beq.w	8003e6e <motion_on_tim7_tick+0x202>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8003d02:	e0af      	b.n	8003e64 <motion_on_tim7_tick+0x1f8>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003d04:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	4aad      	ldr	r2, [pc, #692]	@ (8003fc8 <motion_on_tim7_tick+0x35c>)
 8003d12:	4413      	add	r3, r2
 8003d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	f080 8097 	bcs.w	8003e58 <motion_on_tim7_tick+0x1ec>

            /* Aceleração integrada: acumula a/1000 e aplica passos discretos em v */
            g_v_accum[axis] += ax->accel_sps2; /* steps/s^2 * 1ms */
 8003d2a:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d2e:	4ba7      	ldr	r3, [pc, #668]	@ (8003fcc <motion_on_tim7_tick+0x360>)
 8003d30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	f897 10ce 	ldrb.w	r1, [r7, #206]	@ 0xce
 8003d3e:	441a      	add	r2, r3
 8003d40:	4ba2      	ldr	r3, [pc, #648]	@ (8003fcc <motion_on_tim7_tick+0x360>)
 8003d42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            uint32_t steps_avail = 0u;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            while (g_v_accum[axis] >= 1000u) { g_v_accum[axis] -= 1000u; steps_avail++; }
 8003d4c:	e010      	b.n	8003d70 <motion_on_tim7_tick+0x104>
 8003d4e:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d52:	4b9e      	ldr	r3, [pc, #632]	@ (8003fcc <motion_on_tim7_tick+0x360>)
 8003d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d58:	f897 10ce 	ldrb.w	r1, [r7, #206]	@ 0xce
 8003d5c:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003d60:	4b9a      	ldr	r3, [pc, #616]	@ (8003fcc <motion_on_tim7_tick+0x360>)
 8003d62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d70:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d74:	4b95      	ldr	r3, [pc, #596]	@ (8003fcc <motion_on_tim7_tick+0x360>)
 8003d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d7e:	d2e6      	bcs.n	8003d4e <motion_on_tim7_tick+0xe2>
            while (steps_avail--) {
 8003d80:	e03f      	b.n	8003e02 <motion_on_tim7_tick+0x196>
                if (ax->v_actual_sps < ax->v_target_sps) {
 8003d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d215      	bcs.n	8003dbe <motion_on_tim7_tick+0x152>
                    ax->v_actual_sps++;
 8003d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps > ax->v_target_sps) ax->v_actual_sps = ax->v_target_sps;
 8003da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d928      	bls.n	8003e02 <motion_on_tim7_tick+0x196>
 8003db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db4:	6a1a      	ldr	r2, [r3, #32]
 8003db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dbc:	e021      	b.n	8003e02 <motion_on_tim7_tick+0x196>
                } else if (ax->v_actual_sps > ax->v_target_sps) {
 8003dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d919      	bls.n	8003e02 <motion_on_tim7_tick+0x196>
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8003dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <motion_on_tim7_tick+0x17a>
 8003dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps < ax->v_target_sps) ax->v_actual_sps = ax->v_target_sps;
 8003de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d205      	bcs.n	8003e02 <motion_on_tim7_tick+0x196>
 8003df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24
            while (steps_avail--) {
 8003e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e06:	1e53      	subs	r3, r2, #1
 8003e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	d1b8      	bne.n	8003d82 <motion_on_tim7_tick+0x116>
                }
            }
            if (ax->v_actual_sps > MOTION_MAX_SPS) ax->v_actual_sps = MOTION_MAX_SPS;
 8003e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e16:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d904      	bls.n	8003e28 <motion_on_tim7_tick+0x1bc>
 8003e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e22:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8003e26:	6253      	str	r3, [r2, #36]	@ 0x24
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 8003e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	2200      	movs	r2, #0
 8003e30:	461c      	mov	r4, r3
 8003e32:	4615      	mov	r5, r2
 8003e34:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8003e38:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8003e3c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	4640      	mov	r0, r8
 8003e46:	4649      	mov	r1, r9
 8003e48:	f7fc fa62 	bl	8000310 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e54:	61da      	str	r2, [r3, #28]
 8003e56:	e000      	b.n	8003e5a <motion_on_tim7_tick+0x1ee>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003e58:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003e5a:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8003e64:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	f67f af4b 	bls.w	8003d04 <motion_on_tim7_tick+0x98>
        }
    }
    /* Caminho da fila: rampa trapezoidal (acelera/cruza/desacelera) e define incremento DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && !g_demo_continuous) {
 8003e6e:	4b53      	ldr	r3, [pc, #332]	@ (8003fbc <motion_on_tim7_tick+0x350>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	f040 82a5 	bne.w	80043c4 <motion_on_tim7_tick+0x758>
 8003e7a:	4b51      	ldr	r3, [pc, #324]	@ (8003fc0 <motion_on_tim7_tick+0x354>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 829f 	beq.w	80043c4 <motion_on_tim7_tick+0x758>
 8003e86:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc4 <motion_on_tim7_tick+0x358>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8299 	bne.w	80043c4 <motion_on_tim7_tick+0x758>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8003e98:	e28f      	b.n	80043ba <motion_on_tim7_tick+0x74e>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003e9a:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4a48      	ldr	r2, [pc, #288]	@ (8003fc8 <motion_on_tim7_tick+0x35c>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            /* Mesmo que o segmento ativo para este eixo tenha zerado, podemos ter
               passos remanescentes na fila — mantemos a rampa global da lista. */

            uint32_t v_cmd_sps = ((uint32_t)ax->velocity_per_tick) * 1000u; /* alvo/cruzeiro */
 8003eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eb2:	899b      	ldrh	r3, [r3, #12]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            /* PI de posição: ajusta v_cmd_sps com base no erro posicional */
#if MOTION_PI_ENABLE
            if ((ax->kp | ax->ki | ax->kd) != 0u) {
 8003ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ec6:	89da      	ldrh	r2, [r3, #14]
 8003ec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ecc:	8a1b      	ldrh	r3, [r3, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ed6:	8a5b      	ldrh	r3, [r3, #18]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 814d 	beq.w	800417c <motion_on_tim7_tick+0x510>
                /* desired (em passos DDA) vs actual convertido de contagens do encoder para passos DDA */
                int32_t desired = (int32_t)ax->target_steps;
 8003ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                int64_t enc_rel = g_encoder_position[axis] - g_encoder_origin[axis];
 8003eec:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <motion_on_tim7_tick+0x340>)
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003efa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003efe:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb4 <motion_on_tim7_tick+0x348>)
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	1a84      	subs	r4, r0, r2
 8003f0a:	60bc      	str	r4, [r7, #8]
 8003f0c:	eb61 0303 	sbc.w	r3, r1, r3
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f16:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
                /* actual_steps ≈ enc_rel * (DDA_STEPS_PER_REV / ENC_COUNTS_PER_REV) */
                int64_t num = enc_rel * (int64_t)dda_steps_per_rev();
 8003f1a:	f7fe fd73 	bl	8002a04 <dda_steps_per_rev>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2200      	movs	r2, #0
 8003f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f2a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003f2e:	4622      	mov	r2, r4
 8003f30:	fb02 f203 	mul.w	r2, r2, r3
 8003f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f38:	4629      	mov	r1, r5
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	441a      	add	r2, r3
 8003f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f44:	4621      	mov	r1, r4
 8003f46:	fba3 ab01 	umull	sl, fp, r3, r1
 8003f4a:	eb02 030b 	add.w	r3, r2, fp
 8003f4e:	469b      	mov	fp, r3
 8003f50:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8003f54:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
                int32_t actual = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                if (ENC_COUNTS_PER_REV[axis] > 0u) {
 8003f5e:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003f62:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <motion_on_tim7_tick+0x364>)
 8003f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d044      	beq.n	8003ff6 <motion_on_tim7_tick+0x38a>
                    int64_t q = num / (int64_t)ENC_COUNTS_PER_REV[axis];
 8003f6c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003f70:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <motion_on_tim7_tick+0x364>)
 8003f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f76:	2200      	movs	r2, #0
 8003f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f7a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003f80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003f84:	f7fc f974 	bl	8000270 <__aeabi_ldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                    if (q > INT32_MAX) q = INT32_MAX; else if (q < INT32_MIN) q = INT32_MIN;
 8003f90:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003f94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003f98:	f173 0300 	sbcs.w	r3, r3, #0
 8003f9c:	db1a      	blt.n	8003fd4 <motion_on_tim7_tick+0x368>
 8003f9e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 8003faa:	e020      	b.n	8003fee <motion_on_tim7_tick+0x382>
 8003fac:	20000c70 	.word	0x20000c70
 8003fb0:	20000cf8 	.word	0x20000cf8
 8003fb4:	20000c98 	.word	0x20000c98
 8003fb8:	20000d04 	.word	0x20000d04
 8003fbc:	200000d0 	.word	0x200000d0
 8003fc0:	20000168 	.word	0x20000168
 8003fc4:	20000d10 	.word	0x20000d10
 8003fc8:	200000d8 	.word	0x200000d8
 8003fcc:	20000cd4 	.word	0x20000cd4
 8003fd0:	08010d28 	.word	0x08010d28
 8003fd4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003fd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003fdc:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003fe0:	da05      	bge.n	8003fee <motion_on_tim7_tick+0x382>
 8003fe2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                    actual = (int32_t)q;
 8003fee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                }
                int32_t err = desired - actual;
 8003ff6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003ffa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                /* Deadband simples */
                if (err > -((int32_t)MOTION_PI_DEADBAND_STEPS) && err < (int32_t)MOTION_PI_DEADBAND_STEPS) {
 8004004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004008:	2b00      	cmp	r3, #0
 800400a:	db06      	blt.n	800401a <motion_on_tim7_tick+0x3ae>
 800400c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004010:	2b00      	cmp	r3, #0
 8004012:	dc02      	bgt.n	800401a <motion_on_tim7_tick+0x3ae>
                    err = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                }
                /* Integral com anti-windup (em unidades de passos) */
                int32_t iacc = g_pi_i_accum[axis] + err;
 800401a:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 800401e:	4bae      	ldr	r3, [pc, #696]	@ (80042d8 <motion_on_tim7_tick+0x66c>)
 8004020:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004028:	4413      	add	r3, r2
 800402a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                if (iacc > MOTION_PI_I_CLAMP) iacc = MOTION_PI_I_CLAMP;
 800402e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004032:	4baa      	ldr	r3, [pc, #680]	@ (80042dc <motion_on_tim7_tick+0x670>)
 8004034:	429a      	cmp	r2, r3
 8004036:	dd03      	ble.n	8004040 <motion_on_tim7_tick+0x3d4>
 8004038:	4ba8      	ldr	r3, [pc, #672]	@ (80042dc <motion_on_tim7_tick+0x670>)
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800403e:	e007      	b.n	8004050 <motion_on_tim7_tick+0x3e4>
                else if (iacc < -MOTION_PI_I_CLAMP) iacc = -MOTION_PI_I_CLAMP;
 8004040:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004044:	4ba6      	ldr	r3, [pc, #664]	@ (80042e0 <motion_on_tim7_tick+0x674>)
 8004046:	429a      	cmp	r2, r3
 8004048:	da02      	bge.n	8004050 <motion_on_tim7_tick+0x3e4>
 800404a:	4ba5      	ldr	r3, [pc, #660]	@ (80042e0 <motion_on_tim7_tick+0x674>)
 800404c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                int32_t draw = err - g_pi_prev_err[axis];
 8004050:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004054:	4ba3      	ldr	r3, [pc, #652]	@ (80042e4 <motion_on_tim7_tick+0x678>)
 8004056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800405a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	677b      	str	r3, [r7, #116]	@ 0x74
                g_pi_prev_err[axis] = err;
 8004062:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004066:	4a9f      	ldr	r2, [pc, #636]	@ (80042e4 <motion_on_tim7_tick+0x678>)
 8004068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800406c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                /* Derivada filtrada: g_pi_d_filt += (draw - g_pi_d_filt) >> alpha */
                const int32_t alpha = 8; /* filtro leve (1..16) */
 8004070:	2308      	movs	r3, #8
 8004072:	673b      	str	r3, [r7, #112]	@ 0x70
                g_pi_d_filt[axis] = g_pi_d_filt[axis] + ((draw - g_pi_d_filt[axis]) >> alpha);
 8004074:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004078:	4b9b      	ldr	r3, [pc, #620]	@ (80042e8 <motion_on_tim7_tick+0x67c>)
 800407a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800407e:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004082:	4b99      	ldr	r3, [pc, #612]	@ (80042e8 <motion_on_tim7_tick+0x67c>)
 8004084:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800408a:	1a9a      	subs	r2, r3, r2
 800408c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800408e:	fa42 f303 	asr.w	r3, r2, r3
 8004092:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004096:	18c2      	adds	r2, r0, r3
 8004098:	4b93      	ldr	r3, [pc, #588]	@ (80042e8 <motion_on_tim7_tick+0x67c>)
 800409a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                int32_t pterm = ((int32_t)ax->kp * err) >> MOTION_PI_SHIFT;      /* steps/s */
 800409e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040a2:	89db      	ldrh	r3, [r3, #14]
 80040a4:	461a      	mov	r2, r3
 80040a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	121b      	asrs	r3, r3, #8
 80040b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                int32_t iterm = ((int32_t)ax->ki * iacc) >> MOTION_PI_SHIFT;     /* steps/s */
 80040b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040b6:	8a1b      	ldrh	r3, [r3, #16]
 80040b8:	461a      	mov	r2, r3
 80040ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	121b      	asrs	r3, r3, #8
 80040c4:	66bb      	str	r3, [r7, #104]	@ 0x68
                int32_t dterm = (ax->kd != 0u) ? (((int32_t)ax->kd * g_pi_d_filt[axis]) >> MOTION_PI_SHIFT) : 0; /* steps/s */
 80040c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040ca:	8a5b      	ldrh	r3, [r3, #18]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <motion_on_tim7_tick+0x47e>
 80040d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040d4:	8a5b      	ldrh	r3, [r3, #18]
 80040d6:	4619      	mov	r1, r3
 80040d8:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80040dc:	4b82      	ldr	r3, [pc, #520]	@ (80042e8 <motion_on_tim7_tick+0x67c>)
 80040de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	121b      	asrs	r3, r3, #8
 80040e8:	e000      	b.n	80040ec <motion_on_tim7_tick+0x480>
 80040ea:	2300      	movs	r3, #0
 80040ec:	667b      	str	r3, [r7, #100]	@ 0x64
                int32_t corr = pterm + iterm + dterm; /* correção em steps/s */
 80040ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f2:	441a      	add	r2, r3
 80040f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f6:	4413      	add	r3, r2
 80040f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                if (corr > (int32_t)MOTION_PI_CORR_MAX_SPS) corr = (int32_t)MOTION_PI_CORR_MAX_SPS;
 80040fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004100:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004104:	429a      	cmp	r2, r3
 8004106:	dd04      	ble.n	8004112 <motion_on_tim7_tick+0x4a6>
 8004108:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800410c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004110:	e007      	b.n	8004122 <motion_on_tim7_tick+0x4b6>
                else if (corr < -(int32_t)MOTION_PI_CORR_MAX_SPS) corr = -(int32_t)MOTION_PI_CORR_MAX_SPS;
 8004112:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004116:	4b75      	ldr	r3, [pc, #468]	@ (80042ec <motion_on_tim7_tick+0x680>)
 8004118:	429a      	cmp	r2, r3
 800411a:	da02      	bge.n	8004122 <motion_on_tim7_tick+0x4b6>
 800411c:	4b73      	ldr	r3, [pc, #460]	@ (80042ec <motion_on_tim7_tick+0x680>)
 800411e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                int32_t v_adj = (int32_t)v_cmd_sps + corr;
 8004122:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800412a:	4413      	add	r3, r2
 800412c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                if (v_adj < 0) v_adj = 0;
 8004130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004134:	2b00      	cmp	r3, #0
 8004136:	da02      	bge.n	800413e <motion_on_tim7_tick+0x4d2>
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                if (v_adj > (int32_t)MOTION_MAX_SPS) v_adj = (int32_t)MOTION_MAX_SPS; /* limite físico */
 800413e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004142:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004146:	429a      	cmp	r2, r3
 8004148:	dd03      	ble.n	8004152 <motion_on_tim7_tick+0x4e6>
 800414a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                v_cmd_sps = (uint32_t)v_adj;
 8004152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004156:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
                /* Anti-windup por saturação: só aceita a integral quando não saturou */
                if (!(v_adj == 0 || v_adj == (int32_t)MOTION_MAX_SPS)) {
 800415a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <motion_on_tim7_tick+0x510>
 8004162:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004166:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800416a:	429a      	cmp	r2, r3
 800416c:	d006      	beq.n	800417c <motion_on_tim7_tick+0x510>
                    g_pi_i_accum[axis] = iacc;
 800416e:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004172:	4a59      	ldr	r2, [pc, #356]	@ (80042d8 <motion_on_tim7_tick+0x66c>)
 8004174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004178:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                }
            }
#endif
            uint32_t a_sps2    = (ax->accel_sps2 > 0u) ? ax->accel_sps2 : DEMO_ACCEL_SPS2;
 800417c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <motion_on_tim7_tick+0x522>
 8004186:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	e000      	b.n	8004190 <motion_on_tim7_tick+0x524>
 800418e:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <motion_on_tim7_tick+0x670>)
 8004190:	663b      	str	r3, [r7, #96]	@ 0x60

            /* Distância restante total (ativo + fila) em passos */
            uint32_t rem_steps = motion_remaining_steps_total_for_axis(axis);
 8004192:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fd02 	bl	8002ba0 <motion_remaining_steps_total_for_axis>
 800419c:	65f8      	str	r0, [r7, #92]	@ 0x5c

            /* Distância necessária para frear de v para 0: s = v^2 / (2a) */
            uint32_t v_now = ax->v_actual_sps;
 800419e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	65bb      	str	r3, [r7, #88]	@ 0x58
            uint32_t s_brake = 0u;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            if (a_sps2 > 0u && v_now > 0u) {
 80041ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03b      	beq.n	800422a <motion_on_tim7_tick+0x5be>
 80041b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d038      	beq.n	800422a <motion_on_tim7_tick+0x5be>
                uint64_t vv = (uint64_t)v_now * (uint64_t)v_now;
 80041b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ba:	2200      	movs	r2, #0
 80041bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c2:	2200      	movs	r2, #0
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80041c8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80041cc:	462b      	mov	r3, r5
 80041ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041d2:	4642      	mov	r2, r8
 80041d4:	fb02 f203 	mul.w	r2, r2, r3
 80041d8:	464b      	mov	r3, r9
 80041da:	4621      	mov	r1, r4
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	4622      	mov	r2, r4
 80041e4:	4641      	mov	r1, r8
 80041e6:	fba2 1201 	umull	r1, r2, r2, r1
 80041ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80041ec:	460a      	mov	r2, r1
 80041ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80041f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f2:	4413      	add	r3, r2
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80041fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80041fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
                uint64_t denom = (uint64_t)(2u * a_sps2);
 8004202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2200      	movs	r2, #0
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004210:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
                s_brake = (uint32_t)(vv / denom);
 8004214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004218:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800421c:	f7fc f878 	bl	8000310 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

            /* Política de rampa:
             * - Se já estamos perto do final (rem_steps <= s_brake): desacelera.
             * - Caso contrário, acelera até v_cmd_sps; se passou, reduz até v_cmd_sps. */
            /* Aceleração integrada: usa g_v_accum para passos discretos de v */
            g_v_accum[axis] += a_sps2; /* steps/s^2 * 1ms */
 800422a:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 800422e:	4b30      	ldr	r3, [pc, #192]	@ (80042f0 <motion_on_tim7_tick+0x684>)
 8004230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004234:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800423a:	441a      	add	r2, r3
 800423c:	4b2c      	ldr	r3, [pc, #176]	@ (80042f0 <motion_on_tim7_tick+0x684>)
 800423e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            uint32_t steps_avail = 0u;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            while (g_v_accum[axis] >= 1000u) { g_v_accum[axis] -= 1000u; steps_avail++; }
 8004248:	e010      	b.n	800426c <motion_on_tim7_tick+0x600>
 800424a:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 800424e:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <motion_on_tim7_tick+0x684>)
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004258:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800425c:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <motion_on_tim7_tick+0x684>)
 800425e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004266:	3301      	adds	r3, #1
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800426c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004270:	4b1f      	ldr	r3, [pc, #124]	@ (80042f0 <motion_on_tim7_tick+0x684>)
 8004272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004276:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800427a:	d2e6      	bcs.n	800424a <motion_on_tim7_tick+0x5de>
            while (steps_avail--) {
 800427c:	e059      	b.n	8004332 <motion_on_tim7_tick+0x6c6>
                if (rem_steps <= s_brake) {
 800427e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004284:	429a      	cmp	r2, r3
 8004286:	d80c      	bhi.n	80042a2 <motion_on_tim7_tick+0x636>
                    /* Desacelera */
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8004288:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d04f      	beq.n	8004332 <motion_on_tim7_tick+0x6c6>
 8004292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24
 80042a0:	e047      	b.n	8004332 <motion_on_tim7_tick+0x6c6>
                } else if (ax->v_actual_sps < v_cmd_sps) {
 80042a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d921      	bls.n	80042f4 <motion_on_tim7_tick+0x688>
                    ax->v_actual_sps++;
 80042b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps > v_cmd_sps) ax->v_actual_sps = v_cmd_sps;
 80042be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d232      	bcs.n	8004332 <motion_on_tim7_tick+0x6c6>
 80042cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80042d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042d4:	6253      	str	r3, [r2, #36]	@ 0x24
 80042d6:	e02c      	b.n	8004332 <motion_on_tim7_tick+0x6c6>
 80042d8:	20000ce0 	.word	0x20000ce0
 80042dc:	00030d40 	.word	0x00030d40
 80042e0:	fffcf2c0 	.word	0xfffcf2c0
 80042e4:	20000cec 	.word	0x20000cec
 80042e8:	20000cc8 	.word	0x20000cc8
 80042ec:	ffff9e58 	.word	0xffff9e58
 80042f0:	20000cd4 	.word	0x20000cd4
                } else if (ax->v_actual_sps > v_cmd_sps) {
 80042f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042fe:	4293      	cmp	r3, r2
 8004300:	d217      	bcs.n	8004332 <motion_on_tim7_tick+0x6c6>
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8004302:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d006      	beq.n	800431a <motion_on_tim7_tick+0x6ae>
 800430c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps < v_cmd_sps) ax->v_actual_sps = v_cmd_sps;
 800431a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800431e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004324:	4293      	cmp	r3, r2
 8004326:	d904      	bls.n	8004332 <motion_on_tim7_tick+0x6c6>
 8004328:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800432c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004330:	6253      	str	r3, [r2, #36]	@ 0x24
            while (steps_avail--) {
 8004332:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004336:	1e53      	subs	r3, r2, #1
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800433c:	2a00      	cmp	r2, #0
 800433e:	d19e      	bne.n	800427e <motion_on_tim7_tick+0x612>
                }
            }

            /* Se não há mais nada a emitir neste eixo, força zero */
            if (rem_steps == 0u) ax->v_actual_sps = 0u;
 8004340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <motion_on_tim7_tick+0x6e2>
 8004346:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800434a:	2300      	movs	r3, #0
 800434c:	6253      	str	r3, [r2, #36]	@ 0x24
            if (v_cmd_sps > MOTION_MAX_SPS) v_cmd_sps = MOTION_MAX_SPS;
 800434e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004352:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004356:	429a      	cmp	r2, r3
 8004358:	d903      	bls.n	8004362 <motion_on_tim7_tick+0x6f6>
 800435a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800435e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            if (ax->v_actual_sps > MOTION_MAX_SPS) ax->v_actual_sps = MOTION_MAX_SPS;
 8004362:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004368:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800436c:	429a      	cmp	r2, r3
 800436e:	d904      	bls.n	800437a <motion_on_tim7_tick+0x70e>
 8004370:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004374:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004378:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Incremento do DDA a 50 kHz */
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 800437a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	2200      	movs	r2, #0
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800438a:	460b      	mov	r3, r1
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	460b      	mov	r3, r1
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043a2:	f7fb ffb5 	bl	8000310 <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ae:	61da      	str	r2, [r3, #28]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80043b0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80043b4:	3301      	adds	r3, #1
 80043b6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 80043ba:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80043be:	2b02      	cmp	r3, #2
 80043c0:	f67f ad6b 	bls.w	8003e9a <motion_on_tim7_tick+0x22e>
        }
    }

}
 80043c4:	bf00      	nop
 80043c6:	37d0      	adds	r7, #208	@ 0xd0
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ce:	bf00      	nop

080043d0 <motion_on_move_queue_add>:

/* =======================
 *  Handlers de protocolo
 * ======================= */
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	b097      	sub	sp, #92	@ 0x5c
 80043d4:	af06      	add	r7, sp, #24
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

    move_queue_add_req_t req;
    uint8_t ack_status = MOTION_ACK_INVALID;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t frame_id = 0u;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!frame) return;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a3 	beq.w	8004534 <motion_on_move_queue_add+0x164>
    proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 80043ee:	f107 0308 	add.w	r3, r7, #8
 80043f2:	461a      	mov	r2, r3
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fb2f 	bl	8000a5a <move_queue_add_req_decoder>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (decode_status != PROTO_OK) {
 8004402:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <motion_on_move_queue_add+0x64>
        motion_send_queue_add_ack(frame_id, ack_status);
 800440a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800440e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff f899 	bl	800354c <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 800441a:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 800441e:	4947      	ldr	r1, [pc, #284]	@ (800453c <motion_on_move_queue_add+0x16c>)
 8004420:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <motion_on_move_queue_add+0x170>)
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <motion_on_move_queue_add+0x174>)
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	460b      	mov	r3, r1
 800442a:	2164      	movs	r1, #100	@ 0x64
 800442c:	2002      	movs	r0, #2
 800442e:	f7fe f8e7 	bl	8002600 <log_event_auto>
        return;
 8004432:	e080      	b.n	8004536 <motion_on_move_queue_add+0x166>
    }
    frame_id = req.frameId;
 8004434:	7a3b      	ldrb	r3, [r7, #8]
 8004436:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!safety_is_safe()) {
 800443a:	f000 fe3d 	bl	80050b8 <safety_is_safe>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d114      	bne.n	800446e <motion_on_move_queue_add+0x9e>
        motion_send_queue_add_ack(frame_id, ack_status);
 8004444:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004448:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f87c 	bl	800354c <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "queue_add", "blocked_safety");
 8004454:	4a39      	ldr	r2, [pc, #228]	@ (800453c <motion_on_move_queue_add+0x16c>)
 8004456:	4b3c      	ldr	r3, [pc, #240]	@ (8004548 <motion_on_move_queue_add+0x178>)
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	4b3a      	ldr	r3, [pc, #232]	@ (8004544 <motion_on_move_queue_add+0x174>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	f06f 0203 	mvn.w	r2, #3
 8004464:	2164      	movs	r1, #100	@ 0x64
 8004466:	2002      	movs	r0, #2
 8004468:	f7fe f8ca 	bl	8002600 <log_event_auto>
        return;
 800446c:	e063      	b.n	8004536 <motion_on_move_queue_add+0x166>
    }

    uint32_t primask = motion_lock();
 800446e:	f7fe fadb 	bl	8002a28 <motion_lock>
 8004472:	63b8      	str	r0, [r7, #56]	@ 0x38
    proto_result_t push_status = motion_queue_push_locked(&req);
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fde5 	bl	8003048 <motion_queue_push_locked>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (push_status == PROTO_OK) {
 8004484:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004488:	2b00      	cmp	r3, #0
 800448a:	d12e      	bne.n	80044ea <motion_on_move_queue_add+0x11a>
        ack_status = MOTION_ACK_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 8004492:	4b2e      	ldr	r3, [pc, #184]	@ (800454c <motion_on_move_queue_add+0x17c>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <motion_on_move_queue_add+0xd6>
 800449c:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <motion_on_move_queue_add+0x17c>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d102      	bne.n	80044ac <motion_on_move_queue_add+0xdc>
            g_status.state = MOTION_QUEUED;
 80044a6:	4b29      	ldr	r3, [pc, #164]	@ (800454c <motion_on_move_queue_add+0x17c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 80044ac:	f7fe fbc8 	bl	8002c40 <motion_refresh_status_locked>
#if MOTION_DEBUG_FLOW
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044b0:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
               (unsigned)frame_id,
               (unsigned)req.dirMask,
 80044b4:	7a7b      	ldrb	r3, [r7, #9]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044b6:	469c      	mov	ip, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80044b8:	897b      	ldrh	r3, [r7, #10]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044ba:	469e      	mov	lr, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80044bc:	8a3b      	ldrh	r3, [r7, #16]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044be:	461d      	mov	r5, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80044c0:	8b3b      	ldrh	r3, [r7, #24]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044c2:	461e      	mov	r6, r3
               (unsigned long)req.sx, (unsigned long)req.sy, (unsigned long)req.sz,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	69f9      	ldr	r1, [r7, #28]
               (unsigned)g_status.queue_depth);
 80044ca:	4c20      	ldr	r4, [pc, #128]	@ (800454c <motion_on_move_queue_add+0x17c>)
 80044cc:	7864      	ldrb	r4, [r4, #1]
 80044ce:	b2e4      	uxtb	r4, r4
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044d0:	9405      	str	r4, [sp, #20]
 80044d2:	9104      	str	r1, [sp, #16]
 80044d4:	9203      	str	r2, [sp, #12]
 80044d6:	9302      	str	r3, [sp, #8]
 80044d8:	9601      	str	r6, [sp, #4]
 80044da:	9500      	str	r5, [sp, #0]
 80044dc:	4673      	mov	r3, lr
 80044de:	4662      	mov	r2, ip
 80044e0:	4601      	mov	r1, r0
 80044e2:	481b      	ldr	r0, [pc, #108]	@ (8004550 <motion_on_move_queue_add+0x180>)
 80044e4:	f00a feea 	bl	800f2bc <iprintf>
 80044e8:	e002      	b.n	80044f0 <motion_on_move_queue_add+0x120>
#endif
    } else {
        ack_status = MOTION_ACK_QUEUE_FULL;
 80044ea:	2302      	movs	r3, #2
 80044ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    motion_unlock(primask);
 80044f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044f2:	f7fe faaa 	bl	8002a4a <motion_unlock>

    motion_send_queue_add_ack(frame_id, ack_status);
 80044f6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80044fa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f823 	bl	800354c <motion_send_queue_add_ack>
    LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 8004506:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800450a:	480c      	ldr	r0, [pc, #48]	@ (800453c <motion_on_move_queue_add+0x16c>)
 800450c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004510:	7a79      	ldrb	r1, [r7, #9]
 8004512:	460c      	mov	r4, r1
 8004514:	490d      	ldr	r1, [pc, #52]	@ (800454c <motion_on_move_queue_add+0x17c>)
 8004516:	7849      	ldrb	r1, [r1, #1]
 8004518:	b2c9      	uxtb	r1, r1
 800451a:	9104      	str	r1, [sp, #16]
 800451c:	9403      	str	r4, [sp, #12]
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <motion_on_move_queue_add+0x184>)
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <motion_on_move_queue_add+0x174>)
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4603      	mov	r3, r0
 800452a:	2101      	movs	r1, #1
 800452c:	2002      	movs	r0, #2
 800452e:	f7fe f867 	bl	8002600 <log_event_auto>
 8004532:	e000      	b.n	8004536 <motion_on_move_queue_add+0x166>
    if (!frame) return;
 8004534:	bf00      	nop
              "frame=%u dirMask=0x%02X queue=%u",
              (unsigned)frame_id, (unsigned)req.dirMask, (unsigned)g_status.queue_depth);
}
 8004536:	3744      	adds	r7, #68	@ 0x44
 8004538:	46bd      	mov	sp, r7
 800453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453c:	08010650 	.word	0x08010650
 8004540:	08010808 	.word	0x08010808
 8004544:	08010814 	.word	0x08010814
 8004548:	08010820 	.word	0x08010820
 800454c:	200000d0 	.word	0x200000d0
 8004550:	08010830 	.word	0x08010830
 8004554:	08010880 	.word	0x08010880

08004558 <motion_on_move_queue_status>:

void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8004558:	b5b0      	push	{r4, r5, r7, lr}
 800455a:	b08c      	sub	sp, #48	@ 0x30
 800455c:	af08      	add	r7, sp, #32
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
    move_queue_status_req_t req;
    if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8004562:	f107 0308 	add.w	r3, r7, #8
 8004566:	461a      	mov	r2, r3
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fb73 	bl	8000c56 <move_queue_status_req_decoder>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <motion_on_move_queue_status+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status", "decode_fail");
 8004576:	4a1f      	ldr	r2, [pc, #124]	@ (80045f4 <motion_on_move_queue_status+0x9c>)
 8004578:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <motion_on_move_queue_status+0xa0>)
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <motion_on_move_queue_status+0xa4>)
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	f06f 0201 	mvn.w	r2, #1
 8004586:	2164      	movs	r1, #100	@ 0x64
 8004588:	2002      	movs	r0, #2
 800458a:	f7fe f839 	bl	8002600 <log_event_auto>
 800458e:	e02e      	b.n	80045ee <motion_on_move_queue_status+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 8004590:	f7fe fa4a 	bl	8002a28 <motion_lock>
 8004594:	60f8      	str	r0, [r7, #12]
    motion_refresh_status_locked();
 8004596:	f7fe fb53 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7fe fa55 	bl	8002a4a <motion_unlock>

    motion_send_queue_status_response(req.frameId);
 80045a0:	7a3b      	ldrb	r3, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f816 	bl	80035d4 <motion_send_queue_status_response>
    LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 80045a8:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <motion_on_move_queue_status+0x9c>)
 80045aa:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <motion_on_move_queue_status+0xa8>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	4619      	mov	r1, r3
 80045b2:	4b13      	ldr	r3, [pc, #76]	@ (8004600 <motion_on_move_queue_status+0xa8>)
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <motion_on_move_queue_status+0xa8>)
 80045bc:	789b      	ldrb	r3, [r3, #2]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461c      	mov	r4, r3
 80045c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <motion_on_move_queue_status+0xa8>)
 80045c4:	78db      	ldrb	r3, [r3, #3]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461d      	mov	r5, r3
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <motion_on_move_queue_status+0xa8>)
 80045cc:	791b      	ldrb	r3, [r3, #4]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	9306      	str	r3, [sp, #24]
 80045d2:	9505      	str	r5, [sp, #20]
 80045d4:	9404      	str	r4, [sp, #16]
 80045d6:	9003      	str	r0, [sp, #12]
 80045d8:	9102      	str	r1, [sp, #8]
 80045da:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <motion_on_move_queue_status+0xac>)
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <motion_on_move_queue_status+0xa4>)
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	2200      	movs	r2, #0
 80045e6:	2101      	movs	r1, #1
 80045e8:	2002      	movs	r0, #2
 80045ea:	f7fe f809 	bl	8002600 <log_event_auto>
              "state=%u depth=%u pct=(%u,%u,%u)",
              (unsigned)g_status.state, (unsigned)g_status.queue_depth,
              (unsigned)g_status.pctX, (unsigned)g_status.pctY, (unsigned)g_status.pctZ);
}
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bdb0      	pop	{r4, r5, r7, pc}
 80045f4:	08010650 	.word	0x08010650
 80045f8:	08010808 	.word	0x08010808
 80045fc:	080108a4 	.word	0x080108a4
 8004600:	200000d0 	.word	0x200000d0
 8004604:	080108b4 	.word	0x080108b4

08004608 <motion_on_start_move>:

void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
    start_move_req_t req;
    if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	461a      	mov	r2, r3
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fc8d 	bl	8000f3a <start_move_req_decoder>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <motion_on_start_move+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move", "decode_fail");
 8004626:	4a4e      	ldr	r2, [pc, #312]	@ (8004760 <motion_on_start_move+0x158>)
 8004628:	4b4e      	ldr	r3, [pc, #312]	@ (8004764 <motion_on_start_move+0x15c>)
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	4b4e      	ldr	r3, [pc, #312]	@ (8004768 <motion_on_start_move+0x160>)
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	f06f 0201 	mvn.w	r2, #1
 8004636:	2164      	movs	r1, #100	@ 0x64
 8004638:	2002      	movs	r0, #2
 800463a:	f7fd ffe1 	bl	8002600 <log_event_auto>
 800463e:	e08c      	b.n	800475a <motion_on_start_move+0x152>
        return;
    }
    uint8_t started = 0u;
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
    uint32_t primask = motion_lock();
 8004644:	f7fe f9f0 	bl	8002a28 <motion_lock>
 8004648:	61b8      	str	r0, [r7, #24]

#if MOTION_DEBUG_FLOW
    {
        uint8_t depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 800464a:	4b48      	ldr	r3, [pc, #288]	@ (800476c <motion_on_start_move+0x164>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <motion_on_start_move+0x50>
 8004654:	2201      	movs	r2, #1
 8004656:	e000      	b.n	800465a <motion_on_start_move+0x52>
 8004658:	2200      	movs	r2, #0
 800465a:	4b45      	ldr	r3, [pc, #276]	@ (8004770 <motion_on_start_move+0x168>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	4413      	add	r3, r2
 8004660:	75fb      	strb	r3, [r7, #23]
        printf("[FLOW start_move request depth=%u active=%u ids=(",
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	4a43      	ldr	r2, [pc, #268]	@ (8004774 <motion_on_start_move+0x16c>)
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	4843      	ldr	r0, [pc, #268]	@ (8004778 <motion_on_start_move+0x170>)
 800466c:	f00a fe26 	bl	800f2bc <iprintf>
               (unsigned)depth, (unsigned)g_active_frame_id);
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 8004670:	2300      	movs	r3, #0
 8004672:	77bb      	strb	r3, [r7, #30]
 8004674:	e01c      	b.n	80046b0 <motion_on_start_move+0xa8>
            uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 8004676:	4b41      	ldr	r3, [pc, #260]	@ (800477c <motion_on_start_move+0x174>)
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	7fbb      	ldrb	r3, [r7, #30]
 800467c:	4413      	add	r3, r2
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004684:	75bb      	strb	r3, [r7, #22]
            unsigned id = (unsigned)g_queue[idxq].req.frameId;
 8004686:	7dbb      	ldrb	r3, [r7, #22]
 8004688:	4a3d      	ldr	r2, [pc, #244]	@ (8004780 <motion_on_start_move+0x178>)
 800468a:	212c      	movs	r1, #44	@ 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	613b      	str	r3, [r7, #16]
            printf(i ? ",%u" : "%u", id);
 8004696:	7fbb      	ldrb	r3, [r7, #30]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <motion_on_start_move+0x98>
 800469c:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <motion_on_start_move+0x17c>)
 800469e:	e000      	b.n	80046a2 <motion_on_start_move+0x9a>
 80046a0:	4b39      	ldr	r3, [pc, #228]	@ (8004788 <motion_on_start_move+0x180>)
 80046a2:	6939      	ldr	r1, [r7, #16]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f00a fe09 	bl	800f2bc <iprintf>
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 80046aa:	7fbb      	ldrb	r3, [r7, #30]
 80046ac:	3301      	adds	r3, #1
 80046ae:	77bb      	strb	r3, [r7, #30]
 80046b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <motion_on_start_move+0x168>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	7fba      	ldrb	r2, [r7, #30]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3dd      	bcc.n	8004676 <motion_on_start_move+0x6e>
        }
        printf(") ]\r\n");
 80046ba:	4834      	ldr	r0, [pc, #208]	@ (800478c <motion_on_start_move+0x184>)
 80046bc:	f00a fe66 	bl	800f38c <puts>
    }
#endif

    if (!safety_is_safe()) {
 80046c0:	f000 fcfa 	bl	80050b8 <safety_is_safe>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <motion_on_start_move+0xc8>
        started = 0u;
 80046ca:	2300      	movs	r3, #0
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e014      	b.n	80046fa <motion_on_start_move+0xf2>
    } else if (!g_has_active_segment) {
 80046d0:	4b26      	ldr	r3, [pc, #152]	@ (800476c <motion_on_start_move+0x164>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <motion_on_start_move+0xe8>
        if (motion_try_start_next_locked()) {
 80046da:	f7fe fe23 	bl	8003324 <motion_try_start_next_locked>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <motion_on_start_move+0xf2>
            g_status.state = MOTION_RUNNING;
 80046e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <motion_on_start_move+0x188>)
 80046e6:	2202      	movs	r2, #2
 80046e8:	701a      	strb	r2, [r3, #0]
            started = 1u;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e004      	b.n	80046fa <motion_on_start_move+0xf2>
        }
    } else {
        g_status.state = MOTION_RUNNING;
 80046f0:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <motion_on_start_move+0x188>)
 80046f2:	2202      	movs	r2, #2
 80046f4:	701a      	strb	r2, [r3, #0]
        started = 1u;
 80046f6:	2301      	movs	r3, #1
 80046f8:	77fb      	strb	r3, [r7, #31]
    }

    motion_refresh_status_locked();
 80046fa:	f7fe faa1 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 80046fe:	69b8      	ldr	r0, [r7, #24]
 8004700:	f7fe f9a3 	bl	8002a4a <motion_unlock>

    (void)HAL_TIM_Base_Start_IT(&htim6);
 8004704:	4823      	ldr	r0, [pc, #140]	@ (8004794 <motion_on_start_move+0x18c>)
 8004706:	f006 fe17 	bl	800b338 <HAL_TIM_Base_Start_IT>
    (void)HAL_TIM_Base_Start_IT(&htim7);
 800470a:	4823      	ldr	r0, [pc, #140]	@ (8004798 <motion_on_start_move+0x190>)
 800470c:	f006 fe14 	bl	800b338 <HAL_TIM_Base_Start_IT>

    motion_send_start_response(req.frameId, started ? 0u : 1u);
 8004710:	7b3a      	ldrb	r2, [r7, #12]
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fe ffb7 	bl	8003694 <motion_send_start_response>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", started ? "running" : "ignored");
 8004726:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <motion_on_start_move+0x158>)
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <motion_on_start_move+0x12a>
 800472e:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <motion_on_start_move+0x194>)
 8004730:	e000      	b.n	8004734 <motion_on_start_move+0x12c>
 8004732:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <motion_on_start_move+0x198>)
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	4b0c      	ldr	r3, [pc, #48]	@ (8004768 <motion_on_start_move+0x160>)
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	2200      	movs	r2, #0
 800473e:	2102      	movs	r1, #2
 8004740:	2002      	movs	r0, #2
 8004742:	f7fd ff5d 	bl	8002600 <log_event_auto>
#if MOTION_DEBUG_FLOW
    printf("[FLOW start_move %s]\r\n", started ? "running" : "ignored");
 8004746:	7ffb      	ldrb	r3, [r7, #31]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <motion_on_start_move+0x148>
 800474c:	4b13      	ldr	r3, [pc, #76]	@ (800479c <motion_on_start_move+0x194>)
 800474e:	e000      	b.n	8004752 <motion_on_start_move+0x14a>
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <motion_on_start_move+0x198>)
 8004752:	4619      	mov	r1, r3
 8004754:	4813      	ldr	r0, [pc, #76]	@ (80047a4 <motion_on_start_move+0x19c>)
 8004756:	f00a fdb1 	bl	800f2bc <iprintf>
#endif
}
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08010650 	.word	0x08010650
 8004764:	08010808 	.word	0x08010808
 8004768:	080108d8 	.word	0x080108d8
 800476c:	20000168 	.word	0x20000168
 8004770:	20000c6e 	.word	0x20000c6e
 8004774:	20000c6f 	.word	0x20000c6f
 8004778:	080108e4 	.word	0x080108e4
 800477c:	20000c6c 	.word	0x20000c6c
 8004780:	2000016c 	.word	0x2000016c
 8004784:	08010918 	.word	0x08010918
 8004788:	0801091c 	.word	0x0801091c
 800478c:	08010920 	.word	0x08010920
 8004790:	200000d0 	.word	0x200000d0
 8004794:	20000fd0 	.word	0x20000fd0
 8004798:	2000101c 	.word	0x2000101c
 800479c:	08010928 	.word	0x08010928
 80047a0:	08010930 	.word	0x08010930
 80047a4:	08010938 	.word	0x08010938

080047a8 <motion_on_move_end>:

void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    move_end_req_t req;
    if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 80047b2:	f107 0308 	add.w	r3, r7, #8
 80047b6:	461a      	mov	r2, r3
 80047b8:	6839      	ldr	r1, [r7, #0]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc f8a7 	bl	800090e <move_end_req_decoder>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <motion_on_move_end+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 80047c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004844 <motion_on_move_end+0x9c>)
 80047c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <motion_on_move_end+0xa0>)
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	4b1f      	ldr	r3, [pc, #124]	@ (800484c <motion_on_move_end+0xa4>)
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	f06f 0201 	mvn.w	r2, #1
 80047d6:	2164      	movs	r1, #100	@ 0x64
 80047d8:	2002      	movs	r0, #2
 80047da:	f7fd ff11 	bl	8002600 <log_event_auto>
 80047de:	e02e      	b.n	800483e <motion_on_move_end+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 80047e0:	f7fe f922 	bl	8002a28 <motion_lock>
 80047e4:	60f8      	str	r0, [r7, #12]
    motion_stop_all_axes_locked();
 80047e6:	f7fe fbc3 	bl	8002f70 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 80047ea:	f7fe fc17 	bl	800301c <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 80047ee:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <motion_on_move_end+0xa8>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
    g_status.state = MOTION_STOPPING;
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <motion_on_move_end+0xac>)
 80047f6:	2204      	movs	r2, #4
 80047f8:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 80047fa:	f7fe fa21 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7fe f923 	bl	8002a4a <motion_unlock>

    motion_send_move_end_response(req.frameId, 1u /* stopped by host */);
 8004804:	7a3b      	ldrb	r3, [r7, #8]
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe ff7b 	bl	8003704 <motion_send_move_end_response>

    primask = motion_lock();
 800480e:	f7fe f90b 	bl	8002a28 <motion_lock>
 8004812:	60f8      	str	r0, [r7, #12]
    g_status.state = MOTION_IDLE;
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <motion_on_move_end+0xac>)
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 800481a:	f7fe fa11 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7fe f913 	bl	8002a4a <motion_unlock>

    LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 8004824:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <motion_on_move_end+0x9c>)
 8004826:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <motion_on_move_end+0xb0>)
 8004828:	9302      	str	r3, [sp, #8]
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <motion_on_move_end+0xb4>)
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	4b07      	ldr	r3, [pc, #28]	@ (800484c <motion_on_move_end+0xa4>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	2200      	movs	r2, #0
 8004836:	2102      	movs	r1, #2
 8004838:	2002      	movs	r0, #2
 800483a:	f7fd fee1 	bl	8002600 <log_event_auto>
}
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	08010650 	.word	0x08010650
 8004848:	08010808 	.word	0x08010808
 800484c:	08010778 	.word	0x08010778
 8004850:	20000168 	.word	0x20000168
 8004854:	200000d0 	.word	0x200000d0
 8004858:	08010950 	.word	0x08010950
 800485c:	08010794 	.word	0x08010794

08004860 <motion_on_set_origin>:

/* =======================
 *  set_origin e encoder_status (telemetria)
 * ======================= */
void motion_on_set_origin(const uint8_t *frame, uint32_t len) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b094      	sub	sp, #80	@ 0x50
 8004864:	af04      	add	r7, sp, #16
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
    set_origin_req_t req;
    if (set_origin_req_decoder(frame, len, &req) != PROTO_OK) {
 800486a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800486e:	461a      	mov	r2, r3
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fadf 	bl	8000e36 <set_origin_req_decoder>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <motion_on_set_origin+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "set_origin", "decode_fail");
 800487e:	4a49      	ldr	r2, [pc, #292]	@ (80049a4 <motion_on_set_origin+0x144>)
 8004880:	4b49      	ldr	r3, [pc, #292]	@ (80049a8 <motion_on_set_origin+0x148>)
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	4b49      	ldr	r3, [pc, #292]	@ (80049ac <motion_on_set_origin+0x14c>)
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	f06f 0201 	mvn.w	r2, #1
 800488e:	2164      	movs	r1, #100	@ 0x64
 8004890:	2002      	movs	r0, #2
 8004892:	f7fd feb5 	bl	8002600 <log_event_auto>
 8004896:	e082      	b.n	800499e <motion_on_set_origin+0x13e>
        return;
    }
    uint8_t m = req.mask & 0x07u;
 8004898:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80048aa:	e046      	b.n	800493a <motion_on_set_origin+0xda>
        if (m & (1u << axis)) {
 80048ac:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80048b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d037      	beq.n	8004930 <motion_on_set_origin+0xd0>
            /* Define base externa como a posição absoluta atual e zera relativo */
            int64_t pos = g_encoder_position[axis];
 80048c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048c4:	4a3a      	ldr	r2, [pc, #232]	@ (80049b0 <motion_on_set_origin+0x150>)
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            if (pos > INT32_MAX) pos = INT32_MAX; else if (pos < INT32_MIN) pos = INT32_MIN;
 80048d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048d6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80048da:	f173 0300 	sbcs.w	r3, r3, #0
 80048de:	db06      	blt.n	80048ee <motion_on_set_origin+0x8e>
 80048e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80048ec:	e00c      	b.n	8004908 <motion_on_set_origin+0xa8>
 80048ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048f2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80048f6:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80048fa:	da05      	bge.n	8004908 <motion_on_set_origin+0xa8>
 80048fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            g_origin_base32[axis] = (int32_t)pos;
 8004908:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800490c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490e:	4929      	ldr	r1, [pc, #164]	@ (80049b4 <motion_on_set_origin+0x154>)
 8004910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_origin[axis] = g_encoder_position[axis];
 8004914:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004918:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800491c:	4a24      	ldr	r2, [pc, #144]	@ (80049b0 <motion_on_set_origin+0x150>)
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	4824      	ldr	r0, [pc, #144]	@ (80049b8 <motion_on_set_origin+0x158>)
 8004928:	00c9      	lsls	r1, r1, #3
 800492a:	4401      	add	r1, r0
 800492c:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004930:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004934:	3301      	adds	r3, #1
 8004936:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800493a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800493e:	2b02      	cmp	r3, #2
 8004940:	d9b4      	bls.n	80048ac <motion_on_set_origin+0x4c>
        }
    }
    set_origin_resp_t resp;
    resp.frameId = req.frameId;
 8004942:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004946:	773b      	strb	r3, [r7, #28]
    resp.x0 = g_origin_base32[AXIS_X];
 8004948:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <motion_on_set_origin+0x154>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	623b      	str	r3, [r7, #32]
    resp.y0 = g_origin_base32[AXIS_Y];
 800494e:	4b19      	ldr	r3, [pc, #100]	@ (80049b4 <motion_on_set_origin+0x154>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
    resp.z0 = g_origin_base32[AXIS_Z];
 8004954:	4b17      	ldr	r3, [pc, #92]	@ (80049b4 <motion_on_set_origin+0x154>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t raw[16];
    if (set_origin_resp_encoder(&resp, raw, sizeof raw) == PROTO_OK) {
 800495a:	f107 010c 	add.w	r1, r7, #12
 800495e:	f107 031c 	add.w	r3, r7, #28
 8004962:	2210      	movs	r2, #16
 8004964:	4618      	mov	r0, r3
 8004966:	f7fc fe64 	bl	8001632 <set_origin_resp_encoder>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <motion_on_set_origin+0x11c>
        (void)app_resp_push(raw, (uint32_t)sizeof raw);
 8004970:	f107 030c 	add.w	r3, r7, #12
 8004974:	2110      	movs	r1, #16
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fe16 	bl	80055a8 <app_resp_push>
    }
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "set_origin", "mask=0x%02X mode=%u", (unsigned)req.mask, (unsigned)req.mode);
 800497c:	4a09      	ldr	r2, [pc, #36]	@ (80049a4 <motion_on_set_origin+0x144>)
 800497e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004982:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <motion_on_set_origin+0x15c>)
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <motion_on_set_origin+0x14c>)
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	2200      	movs	r2, #0
 8004996:	2102      	movs	r1, #2
 8004998:	2002      	movs	r0, #2
 800499a:	f7fd fe31 	bl	8002600 <log_event_auto>
}
 800499e:	3740      	adds	r7, #64	@ 0x40
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	08010650 	.word	0x08010650
 80049a8:	08010808 	.word	0x08010808
 80049ac:	08010958 	.word	0x08010958
 80049b0:	20000c70 	.word	0x20000c70
 80049b4:	20000cbc 	.word	0x20000cbc
 80049b8:	20000c98 	.word	0x20000c98
 80049bc:	08010964 	.word	0x08010964

080049c0 <motion_on_encoder_status>:

void motion_on_encoder_status(const uint8_t *frame, uint32_t len) {
 80049c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c4:	b09e      	sub	sp, #120	@ 0x78
 80049c6:	af02      	add	r7, sp, #8
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
    encoder_status_req_t req;
    if (encoder_status_req_decoder(frame, len, &req) != PROTO_OK) {
 80049cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80049d0:	461a      	mov	r2, r3
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7fb fe81 	bl	80006dc <encoder_status_req_decoder>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <motion_on_encoder_status+0x3a>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "enc_status", "decode_fail");
 80049e0:	4a65      	ldr	r2, [pc, #404]	@ (8004b78 <motion_on_encoder_status+0x1b8>)
 80049e2:	4b66      	ldr	r3, [pc, #408]	@ (8004b7c <motion_on_encoder_status+0x1bc>)
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	4b66      	ldr	r3, [pc, #408]	@ (8004b80 <motion_on_encoder_status+0x1c0>)
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	f06f 0201 	mvn.w	r2, #1
 80049f0:	2164      	movs	r1, #100	@ 0x64
 80049f2:	2002      	movs	r0, #2
 80049f4:	f7fd fe04 	bl	8002600 <log_event_auto>
 80049f8:	e0b9      	b.n	8004b6e <motion_on_encoder_status+0x1ae>
        return;
    }
    /* posição_rel = position - origin; posição_abs = origin_base + posição_rel */
    int32_t rel[3];
    int32_t abs[3];
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004a00:	e080      	b.n	8004b04 <motion_on_encoder_status+0x144>
        int64_t r = g_encoder_position[axis] - g_encoder_origin[axis];
 8004a02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a06:	4a5f      	ldr	r2, [pc, #380]	@ (8004b84 <motion_on_encoder_status+0x1c4>)
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a14:	4a5c      	ldr	r2, [pc, #368]	@ (8004b88 <motion_on_encoder_status+0x1c8>)
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	ebb0 0a02 	subs.w	sl, r0, r2
 8004a22:	eb61 0b03 	sbc.w	fp, r1, r3
 8004a26:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
        if (r > INT32_MAX) r = INT32_MAX; else if (r < INT32_MIN) r = INT32_MIN;
 8004a2a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004a2e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a32:	f173 0300 	sbcs.w	r3, r3, #0
 8004a36:	db06      	blt.n	8004a46 <motion_on_encoder_status+0x86>
 8004a38:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8004a44:	e00c      	b.n	8004a60 <motion_on_encoder_status+0xa0>
 8004a46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004a4a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a4e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004a52:	da05      	bge.n	8004a60 <motion_on_encoder_status+0xa0>
 8004a54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        rel[axis] = (int32_t)r;
 8004a60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3368      	adds	r3, #104	@ 0x68
 8004a6a:	f107 0108 	add.w	r1, r7, #8
 8004a6e:	440b      	add	r3, r1
 8004a70:	f843 2c28 	str.w	r2, [r3, #-40]
        int64_t a = (int64_t)g_origin_base32[axis] + (int64_t)rel[axis];
 8004a74:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a78:	4a44      	ldr	r2, [pc, #272]	@ (8004b8c <motion_on_encoder_status+0x1cc>)
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	17da      	asrs	r2, r3, #31
 8004a80:	461c      	mov	r4, r3
 8004a82:	4615      	mov	r5, r2
 8004a84:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	3368      	adds	r3, #104	@ 0x68
 8004a8c:	f107 0208 	add.w	r2, r7, #8
 8004a90:	4413      	add	r3, r2
 8004a92:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004a96:	17da      	asrs	r2, r3, #31
 8004a98:	4698      	mov	r8, r3
 8004a9a:	4691      	mov	r9, r2
 8004a9c:	eb14 0308 	adds.w	r3, r4, r8
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	eb45 0309 	adc.w	r3, r5, r9
 8004aa6:	607b      	str	r3, [r7, #4]
 8004aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aac:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        if (a > INT32_MAX) a = INT32_MAX; else if (a < INT32_MIN) a = INT32_MIN;
 8004ab0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004ab8:	f173 0300 	sbcs.w	r3, r3, #0
 8004abc:	db06      	blt.n	8004acc <motion_on_encoder_status+0x10c>
 8004abe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8004aca:	e00c      	b.n	8004ae6 <motion_on_encoder_status+0x126>
 8004acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004ad4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004ad8:	da05      	bge.n	8004ae6 <motion_on_encoder_status+0x126>
 8004ada:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        abs[axis] = (int32_t)a;
 8004ae6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	3368      	adds	r3, #104	@ 0x68
 8004af0:	f107 0108 	add.w	r1, r7, #8
 8004af4:	440b      	add	r3, r1
 8004af6:	f843 2c34 	str.w	r2, [r3, #-52]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004afa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004afe:	3301      	adds	r3, #1
 8004b00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004b04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f67f af7a 	bls.w	8004a02 <motion_on_encoder_status+0x42>
    }
    encoder_status_resp_t resp;
    resp.frameId = req.frameId;
 8004b0e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004b12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    resp.pidErrX = (uint8_t)g_status.pidErrX;
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <motion_on_encoder_status+0x1d0>)
 8004b18:	795b      	ldrb	r3, [r3, #5]
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    resp.pidErrY = (uint8_t)g_status.pidErrY;
 8004b22:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <motion_on_encoder_status+0x1d0>)
 8004b24:	799b      	ldrb	r3, [r3, #6]
 8004b26:	b25b      	sxtb	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    resp.pidErrZ = (uint8_t)g_status.pidErrZ;
 8004b2e:	4b18      	ldr	r3, [pc, #96]	@ (8004b90 <motion_on_encoder_status+0x1d0>)
 8004b30:	79db      	ldrb	r3, [r3, #7]
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    resp.delta = 0; /* opcional */
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    resp.absX = abs[AXIS_X];
 8004b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b42:	633b      	str	r3, [r7, #48]	@ 0x30
    resp.absY = abs[AXIS_Y];
 8004b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
    resp.absZ = abs[AXIS_Z];
 8004b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t raw[20];
    if (encoder_status_resp_encoder(&resp, raw, sizeof raw) == PROTO_OK) {
 8004b4c:	f107 0114 	add.w	r1, r7, #20
 8004b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b54:	2214      	movs	r2, #20
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc fa58 	bl	800100c <encoder_status_resp_encoder>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <motion_on_encoder_status+0x1ae>
        (void)app_resp_push(raw, (uint32_t)sizeof raw);
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	2114      	movs	r1, #20
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fd1d 	bl	80055a8 <app_resp_push>
    }
}
 8004b6e:	3770      	adds	r7, #112	@ 0x70
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	08010650 	.word	0x08010650
 8004b7c:	08010808 	.word	0x08010808
 8004b80:	08010978 	.word	0x08010978
 8004b84:	20000c70 	.word	0x20000c70
 8004b88:	20000c98 	.word	0x20000c98
 8004b8c:	20000cbc 	.word	0x20000cbc
 8004b90:	200000d0 	.word	0x200000d0

08004b94 <motion_on_set_microsteps>:

void motion_on_set_microsteps(const uint8_t *frame, uint32_t len) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af04      	add	r7, sp, #16
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
    set_microsteps_req_t req;
    if (set_microsteps_req_decoder(frame, len, &req) != PROTO_OK) {
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc f8ca 	bl	8000d40 <set_microsteps_req_decoder>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <motion_on_set_microsteps+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "set_microsteps", "decode_fail");
 8004bb2:	4a20      	ldr	r2, [pc, #128]	@ (8004c34 <motion_on_set_microsteps+0xa0>)
 8004bb4:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <motion_on_set_microsteps+0xa4>)
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <motion_on_set_microsteps+0xa8>)
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	f06f 0201 	mvn.w	r2, #1
 8004bc2:	2164      	movs	r1, #100	@ 0x64
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	f7fd fd1b 	bl	8002600 <log_event_auto>
        return;
 8004bca:	e02f      	b.n	8004c2c <motion_on_set_microsteps+0x98>
    }
    if (g_status.state == MOTION_RUNNING) {
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8004c40 <motion_on_set_microsteps+0xac>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d10c      	bne.n	8004bf0 <motion_on_set_microsteps+0x5c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "set_microsteps", "busy_running");
 8004bd6:	4a17      	ldr	r2, [pc, #92]	@ (8004c34 <motion_on_set_microsteps+0xa0>)
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <motion_on_set_microsteps+0xb0>)
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <motion_on_set_microsteps+0xa8>)
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	f06f 0203 	mvn.w	r2, #3
 8004be6:	2164      	movs	r1, #100	@ 0x64
 8004be8:	2002      	movs	r0, #2
 8004bea:	f7fd fd09 	bl	8002600 <log_event_auto>
        return;
 8004bee:	e01d      	b.n	8004c2c <motion_on_set_microsteps+0x98>
    }
    uint16_t ms = (req.microsteps == 0u) ? 1u : req.microsteps;
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <motion_on_set_microsteps+0x66>
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	e000      	b.n	8004bfc <motion_on_set_microsteps+0x68>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	81fb      	strh	r3, [r7, #14]
    if (ms > 256u) ms = 256u;
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c04:	d902      	bls.n	8004c0c <motion_on_set_microsteps+0x78>
 8004c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c0a:	81fb      	strh	r3, [r7, #14]
    g_microstep_factor = ms;
 8004c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c48 <motion_on_set_microsteps+0xb4>)
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	8013      	strh	r3, [r2, #0]
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "set_microsteps", "ms=%u", (unsigned)ms);
 8004c12:	4a08      	ldr	r2, [pc, #32]	@ (8004c34 <motion_on_set_microsteps+0xa0>)
 8004c14:	89fb      	ldrh	r3, [r7, #14]
 8004c16:	9302      	str	r3, [sp, #8]
 8004c18:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <motion_on_set_microsteps+0xb8>)
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <motion_on_set_microsteps+0xa8>)
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	2102      	movs	r1, #2
 8004c26:	2002      	movs	r0, #2
 8004c28:	f7fd fcea 	bl	8002600 <log_event_auto>
}
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	08010650 	.word	0x08010650
 8004c38:	08010808 	.word	0x08010808
 8004c3c:	08010984 	.word	0x08010984
 8004c40:	200000d0 	.word	0x200000d0
 8004c44:	08010994 	.word	0x08010994
 8004c48:	20000010 	.word	0x20000010
 8004c4c:	080109a4 	.word	0x080109a4

08004c50 <motion_demo_set_continuous>:
    }
    motion_unlock(primask);
}

void motion_demo_set_continuous(uint8_t enable)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 8004c5a:	f7fd fee5 	bl	8002a28 <motion_lock>
 8004c5e:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <motion_demo_set_continuous+0x1a>
 8004c66:	2201      	movs	r2, #1
 8004c68:	e000      	b.n	8004c6c <motion_demo_set_continuous+0x1c>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4b48      	ldr	r3, [pc, #288]	@ (8004d90 <motion_demo_set_continuous+0x140>)
 8004c6e:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 8004c70:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <motion_demo_set_continuous+0x140>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d077      	beq.n	8004d6a <motion_demo_set_continuous+0x11a>
        g_has_active_segment = 1u;
 8004c7a:	4b46      	ldr	r3, [pc, #280]	@ (8004d94 <motion_demo_set_continuous+0x144>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]

        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]
 8004c84:	e068      	b.n	8004d58 <motion_demo_set_continuous+0x108>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8004c86:	7dfa      	ldrb	r2, [r7, #23]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	4a41      	ldr	r2, [pc, #260]	@ (8004d98 <motion_demo_set_continuous+0x148>)
 8004c92:	4413      	add	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

            ax->total_steps       = 0xFFFFFFFFu; 
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	601a      	str	r2, [r3, #0]
            ax->target_steps      = 0u;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]
            ax->emitted_steps     = 0u;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	609a      	str	r2, [r3, #8]

            /* tabela em "k steps/s" (~1 kHz) -> converte para steps/s */
            uint16_t vtab         = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8004caa:	4b3c      	ldr	r3, [pc, #240]	@ (8004d9c <motion_demo_set_continuous+0x14c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8004da0 <motion_demo_set_continuous+0x150>)
 8004cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cba:	817b      	strh	r3, [r7, #10]
            ax->velocity_per_tick = vtab;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	897a      	ldrh	r2, [r7, #10]
 8004cc0:	819a      	strh	r2, [r3, #12]
            ax->v_target_sps      = ((uint32_t)vtab) * 1000u;
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004cc8:	fb03 f202 	mul.w	r2, r3, r2
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	621a      	str	r2, [r3, #32]
            if (ax->v_target_sps > MOTION_MAX_SPS) ax->v_target_sps = MOTION_MAX_SPS;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d903      	bls.n	8004ce4 <motion_demo_set_continuous+0x94>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004ce2:	621a      	str	r2, [r3, #32]
            ax->v_actual_sps      = 0u;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24
            ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <motion_demo_set_continuous+0x154>)
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28

            ax->dda_accum_q16     = 0u;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	619a      	str	r2, [r3, #24]
            ax->dda_inc_q16       = 0u;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	61da      	str	r2, [r3, #28]

            ax->step_high         = 0u;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	751a      	strb	r2, [r3, #20]
            ax->step_low          = 0u;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	755a      	strb	r2, [r3, #21]
            ax->en_settle_ticks   = MOTION_ENABLE_SETTLE_TICKS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

            motion_hw_step_low(axis);
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd fe0a 	bl	8002934 <motion_hw_step_low>
            motion_hw_set_dir(axis, 1u);     /* forward */
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2101      	movs	r1, #1
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fd61 	bl	80027ec <motion_hw_set_dir>
            motion_hw_enable(axis, 1u);      /* ativo em baixo no TMC5160 */
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd fd9c 	bl	800286c <motion_hw_enable>
            /* Não zera origem automaticamente; mantém a referência definida via set_origin */
            g_encoder_delta_tick[axis] = 0;
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	4a1c      	ldr	r2, [pc, #112]	@ (8004da8 <motion_demo_set_continuous+0x158>)
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pi_i_accum[axis] = 0;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	4a1a      	ldr	r2, [pc, #104]	@ (8004dac <motion_demo_set_continuous+0x15c>)
 8004d42:	2100      	movs	r1, #0
 8004d44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pi_prev_err[axis] = 0;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <motion_demo_set_continuous+0x160>)
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	3301      	adds	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d993      	bls.n	8004c86 <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <motion_demo_set_continuous+0x164>)
 8004d60:	2202      	movs	r2, #2
 8004d62:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8004d64:	f7fd ff6c 	bl	8002c40 <motion_refresh_status_locked>
 8004d68:	e00b      	b.n	8004d82 <motion_demo_set_continuous+0x132>
    } else {
        motion_stop_all_axes_locked();
 8004d6a:	f7fe f901 	bl	8002f70 <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 8004d6e:	f7fe f955 	bl	800301c <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <motion_demo_set_continuous+0x144>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 8004d78:	4b0e      	ldr	r3, [pc, #56]	@ (8004db4 <motion_demo_set_continuous+0x164>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8004d7e:	f7fd ff5f 	bl	8002c40 <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 8004d82:	6938      	ldr	r0, [r7, #16]
 8004d84:	f7fd fe61 	bl	8002a4a <motion_unlock>
}
 8004d88:	bf00      	nop
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000d10 	.word	0x20000d10
 8004d94:	20000168 	.word	0x20000168
 8004d98:	200000d8 	.word	0x200000d8
 8004d9c:	20000012 	.word	0x20000012
 8004da0:	08010d34 	.word	0x08010d34
 8004da4:	00030d40 	.word	0x00030d40
 8004da8:	20000cb0 	.word	0x20000cb0
 8004dac:	20000ce0 	.word	0x20000ce0
 8004db0:	20000cec 	.word	0x20000cec
 8004db4:	200000d0 	.word	0x200000d0

08004db8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
    if (!htim) return;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00f      	beq.n	8004de6 <HAL_TIM_PeriodElapsedCallback+0x2e>
    if (htim->Instance == TIM6) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d102      	bne.n	8004dd6 <HAL_TIM_PeriodElapsedCallback+0x1e>
        motion_on_tim6_tick();
 8004dd0:	f7fe fd9c 	bl	800390c <motion_on_tim6_tick>
 8004dd4:	e008      	b.n	8004de8 <HAL_TIM_PeriodElapsedCallback+0x30>
    } else if (htim->Instance == TIM7) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a06      	ldr	r2, [pc, #24]	@ (8004df4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d103      	bne.n	8004de8 <HAL_TIM_PeriodElapsedCallback+0x30>
        motion_on_tim7_tick();
 8004de0:	f7fe ff44 	bl	8003c6c <motion_on_tim7_tick>
 8004de4:	e000      	b.n	8004de8 <HAL_TIM_PeriodElapsedCallback+0x30>
    if (!htim) return;
 8004de6:	bf00      	nop
    } else {
        (void)htim;
    }
}
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40001000 	.word	0x40001000
 8004df4:	40001400 	.word	0x40001400

08004df8 <motion_emergency_stop>:

void motion_emergency_stop(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
    uint32_t primask = motion_lock();
 8004dfe:	f7fd fe13 	bl	8002a28 <motion_lock>
 8004e02:	6078      	str	r0, [r7, #4]

    g_demo_continuous = 0u;
 8004e04:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <motion_emergency_stop+0x64>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
    motion_stop_all_axes_locked();
 8004e0a:	f7fe f8b1 	bl	8002f70 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8004e0e:	f7fe f905 	bl	800301c <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 8004e12:	4b13      	ldr	r3, [pc, #76]	@ (8004e60 <motion_emergency_stop+0x68>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]

    g_status.state = MOTION_STOPPING;
 8004e18:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <motion_emergency_stop+0x6c>)
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004e1e:	f7fd ff0f 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fe11 	bl	8002a4a <motion_unlock>

    primask = motion_lock();
 8004e28:	f7fd fdfe 	bl	8002a28 <motion_lock>
 8004e2c:	6078      	str	r0, [r7, #4]
    g_status.state = MOTION_IDLE;
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <motion_emergency_stop+0x6c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004e34:	f7fd ff04 	bl	8002c40 <motion_refresh_status_locked>
    motion_unlock(primask);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fd fe06 	bl	8002a4a <motion_unlock>
    /* Notifica término por emergência (se houver frame ativo) */
    if (g_active_frame_id) {
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <motion_emergency_stop+0x70>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <motion_emergency_stop+0x5a>
        motion_send_move_end_response(g_active_frame_id, 2u /* emergency */);
 8004e46:	4b08      	ldr	r3, [pc, #32]	@ (8004e68 <motion_emergency_stop+0x70>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fc59 	bl	8003704 <motion_send_move_end_response>
    }
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000d10 	.word	0x20000d10
 8004e60:	20000168 	.word	0x20000168
 8004e64:	200000d0 	.word	0x200000d0
 8004e68:	20000c6f 	.word	0x20000c6f

08004e6c <motion_demo_is_active>:

uint8_t motion_demo_is_active(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
    return g_demo_continuous ? 1u : 0u;
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <motion_demo_is_active+0x20>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <motion_demo_is_active+0x12>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <motion_demo_is_active+0x14>
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000d10 	.word	0x20000d10

08004e90 <motion_demo_cycle_speed>:

void motion_demo_cycle_speed(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
    g_demo_speed_idx = (uint8_t)((g_demo_speed_idx + 1u) & 0x3u);
 8004e96:	4b2d      	ldr	r3, [pc, #180]	@ (8004f4c <motion_demo_cycle_speed+0xbc>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <motion_demo_cycle_speed+0xbc>)
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Se demo  ativo, atualiza v_target_sps imediatamente (rampa cuida do resto) */
    if (g_demo_continuous) {
 8004eaa:	4b29      	ldr	r3, [pc, #164]	@ (8004f50 <motion_demo_cycle_speed+0xc0>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d047      	beq.n	8004f44 <motion_demo_cycle_speed+0xb4>
        uint16_t vtab = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8004eb4:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <motion_demo_cycle_speed+0xbc>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	4a25      	ldr	r2, [pc, #148]	@ (8004f54 <motion_demo_cycle_speed+0xc4>)
 8004ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec4:	80bb      	strh	r3, [r7, #4]
        uint32_t primask = motion_lock();
 8004ec6:	f7fd fdaf 	bl	8002a28 <motion_lock>
 8004eca:	6038      	str	r0, [r7, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004ecc:	2300      	movs	r3, #0
 8004ece:	71fb      	strb	r3, [r7, #7]
 8004ed0:	e032      	b.n	8004f38 <motion_demo_cycle_speed+0xa8>
            g_axis_state[axis].velocity_per_tick = vtab;
 8004ed2:	79fa      	ldrb	r2, [r7, #7]
 8004ed4:	4920      	ldr	r1, [pc, #128]	@ (8004f58 <motion_demo_cycle_speed+0xc8>)
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	440b      	add	r3, r1
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	88ba      	ldrh	r2, [r7, #4]
 8004ee4:	801a      	strh	r2, [r3, #0]
            g_axis_state[axis].v_target_sps      = ((uint32_t)vtab) * 1000u;
 8004ee6:	88bb      	ldrh	r3, [r7, #4]
 8004ee8:	79fa      	ldrb	r2, [r7, #7]
 8004eea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004eee:	fb03 f101 	mul.w	r1, r3, r1
 8004ef2:	4819      	ldr	r0, [pc, #100]	@ (8004f58 <motion_demo_cycle_speed+0xc8>)
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	4403      	add	r3, r0
 8004efe:	3320      	adds	r3, #32
 8004f00:	6019      	str	r1, [r3, #0]
            if (g_axis_state[axis].v_target_sps > MOTION_MAX_SPS) g_axis_state[axis].v_target_sps = MOTION_MAX_SPS;
 8004f02:	79fa      	ldrb	r2, [r7, #7]
 8004f04:	4914      	ldr	r1, [pc, #80]	@ (8004f58 <motion_demo_cycle_speed+0xc8>)
 8004f06:	4613      	mov	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	440b      	add	r3, r1
 8004f10:	3320      	adds	r3, #32
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d90a      	bls.n	8004f32 <motion_demo_cycle_speed+0xa2>
 8004f1c:	79fa      	ldrb	r2, [r7, #7]
 8004f1e:	490e      	ldr	r1, [pc, #56]	@ (8004f58 <motion_demo_cycle_speed+0xc8>)
 8004f20:	4613      	mov	r3, r2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	440b      	add	r3, r1
 8004f2a:	3320      	adds	r3, #32
 8004f2c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004f30:	601a      	str	r2, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	3301      	adds	r3, #1
 8004f36:	71fb      	strb	r3, [r7, #7]
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d9c9      	bls.n	8004ed2 <motion_demo_cycle_speed+0x42>
        }
        motion_unlock(primask);
 8004f3e:	6838      	ldr	r0, [r7, #0]
 8004f40:	f7fd fd83 	bl	8002a4a <motion_unlock>
    }
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000012 	.word	0x20000012
 8004f50:	20000d10 	.word	0x20000d10
 8004f54:	08010d34 	.word	0x08010d34
 8004f58:	200000d8 	.word	0x200000d8

08004f5c <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 8004f62:	4b0e      	ldr	r3, [pc, #56]	@ (8004f9c <probe_service_init+0x40>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <probe_service_init+0x40>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <probe_service_init+0x40>)
 8004f72:	60d3      	str	r3, [r2, #12]
 8004f74:	4a09      	ldr	r2, [pc, #36]	@ (8004f9c <probe_service_init+0x40>)
 8004f76:	6093      	str	r3, [r2, #8]
 8004f78:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <probe_service_init+0x40>)
 8004f7a:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8004f7c:	4a08      	ldr	r2, [pc, #32]	@ (8004fa0 <probe_service_init+0x44>)
 8004f7e:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <probe_service_init+0x48>)
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <probe_service_init+0x4c>)
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <probe_service_init+0x50>)
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2100      	movs	r1, #0
 8004f90:	2004      	movs	r0, #4
 8004f92:	f7fd fb35 	bl	8002600 <log_event_auto>
}
 8004f96:	bf00      	nop
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000d14 	.word	0x20000d14
 8004fa0:	080109ac 	.word	0x080109ac
 8004fa4:	080109b4 	.word	0x080109b4
 8004fa8:	080109b8 	.word	0x080109b8
 8004fac:	080109bc 	.word	0x080109bc

08004fb0 <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af04      	add	r7, sp, #16
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8004fba:	4a08      	ldr	r2, [pc, #32]	@ (8004fdc <probe_on_move_probe_level+0x2c>)
 8004fbc:	4b08      	ldr	r3, [pc, #32]	@ (8004fe0 <probe_on_move_probe_level+0x30>)
 8004fbe:	9302      	str	r3, [sp, #8]
 8004fc0:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <probe_on_move_probe_level+0x34>)
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	4b08      	ldr	r3, [pc, #32]	@ (8004fe8 <probe_on_move_probe_level+0x38>)
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2101      	movs	r1, #1
 8004fce:	2004      	movs	r0, #4
 8004fd0:	f7fd fb16 	bl	8002600 <log_event_auto>
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080109ac 	.word	0x080109ac
 8004fe0:	080109c4 	.word	0x080109c4
 8004fe4:	080109b8 	.word	0x080109b8
 8004fe8:	080109d4 	.word	0x080109d4

08004fec <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 8004ff2:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <safety_service_init+0x2c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 8004ff8:	4a08      	ldr	r2, [pc, #32]	@ (800501c <safety_service_init+0x30>)
 8004ffa:	4b09      	ldr	r3, [pc, #36]	@ (8005020 <safety_service_init+0x34>)
 8004ffc:	9302      	str	r3, [sp, #8]
 8004ffe:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <safety_service_init+0x38>)
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <safety_service_init+0x3c>)
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	4613      	mov	r3, r2
 8005008:	2200      	movs	r2, #0
 800500a:	2100      	movs	r1, #0
 800500c:	2005      	movs	r0, #5
 800500e:	f7fd faf7 	bl	8002600 <log_event_auto>
}
 8005012:	bf00      	nop
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000d24 	.word	0x20000d24
 800501c:	080109e8 	.word	0x080109e8
 8005020:	080109f0 	.word	0x080109f0
 8005024:	080109f8 	.word	0x080109f8
 8005028:	080109fc 	.word	0x080109fc

0800502c <safety_estop_assert>:
void safety_estop_assert(void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af04      	add	r7, sp, #16
	g_state = SAFETY_ESTOP;
 8005032:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <safety_estop_assert+0x2c>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_ASSERT, PROTO_OK, "estop", "assert");
 8005038:	4a08      	ldr	r2, [pc, #32]	@ (800505c <safety_estop_assert+0x30>)
 800503a:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <safety_estop_assert+0x34>)
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <safety_estop_assert+0x38>)
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	4b09      	ldr	r3, [pc, #36]	@ (8005068 <safety_estop_assert+0x3c>)
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	2200      	movs	r2, #0
 800504a:	210a      	movs	r1, #10
 800504c:	2005      	movs	r0, #5
 800504e:	f7fd fad7 	bl	8002600 <log_event_auto>
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000d24 	.word	0x20000d24
 800505c:	080109e8 	.word	0x080109e8
 8005060:	08010a04 	.word	0x08010a04
 8005064:	080109f8 	.word	0x080109f8
 8005068:	08010a0c 	.word	0x08010a0c

0800506c <safety_estop_release>:
void safety_estop_release(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af04      	add	r7, sp, #16
	if (g_state == SAFETY_ESTOP)
 8005072:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <safety_estop_release+0x38>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d102      	bne.n	8005082 <safety_estop_release+0x16>
		g_state = SAFETY_RECOVERY_WAIT;
 800507c:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <safety_estop_release+0x38>)
 800507e:	2202      	movs	r2, #2
 8005080:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_RELEASE, PROTO_OK, "estop", "release");
 8005082:	4a09      	ldr	r2, [pc, #36]	@ (80050a8 <safety_estop_release+0x3c>)
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <safety_estop_release+0x40>)
 8005086:	9302      	str	r3, [sp, #8]
 8005088:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <safety_estop_release+0x44>)
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	4b09      	ldr	r3, [pc, #36]	@ (80050b4 <safety_estop_release+0x48>)
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	2200      	movs	r2, #0
 8005094:	210b      	movs	r1, #11
 8005096:	2005      	movs	r0, #5
 8005098:	f7fd fab2 	bl	8002600 <log_event_auto>
}
 800509c:	bf00      	nop
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000d24 	.word	0x20000d24
 80050a8:	080109e8 	.word	0x080109e8
 80050ac:	08010a14 	.word	0x08010a14
 80050b0:	080109f8 	.word	0x080109f8
 80050b4:	08010a0c 	.word	0x08010a0c

080050b8 <safety_is_safe>:
int safety_is_safe(void) {
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
	return g_state == SAFETY_NORMAL;
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <safety_is_safe+0x20>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000d24 	.word	0x20000d24

080050dc <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f7ff f970 	bl	80043d0 <motion_on_move_queue_add>
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f7ff fa26 	bl	8004558 <motion_on_move_queue_status>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7ff fa70 	bl	8004608 <motion_on_start_move>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68b8      	ldr	r0, [r7, #8]
 8005140:	f7fc fd32 	bl	8001ba8 <home_on_move_home>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	f7ff ff28 	bl	8004fb0 <probe_on_move_probe_level>
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff fb16 	bl	80047a8 <motion_on_move_end>
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	68b8      	ldr	r0, [r7, #8]
 8005194:	f7fd f86c 	bl	8002270 <led_on_led_ctrl>
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
    (void) r;
    (void) f;
    (void) l; /* opcional */
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <h_set_origin>:

// Novos serviços: set_origin e encoder_status (telemetria)
static void h_set_origin(router_t *r, const uint8_t *f, uint32_t l) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_set_origin(f, l);
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68b8      	ldr	r0, [r7, #8]
 80051c8:	f7ff fb4a 	bl	8004860 <motion_on_set_origin>
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <h_encoder_status>:
static void h_encoder_status(router_t *r, const uint8_t *f, uint32_t l) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_encoder_status(f, l);
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f7ff fbec 	bl	80049c0 <motion_on_encoder_status>
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <h_set_microsteps>:
static void h_set_microsteps(router_t *r, const uint8_t *f, uint32_t l) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_set_microsteps(f, l);
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff fcc8 	bl	8004b94 <motion_on_set_microsteps>
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	if (!h)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d024      	beq.n	800527c <services_register_handlers+0x58>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a14      	ldr	r2, [pc, #80]	@ (8005288 <services_register_handlers+0x64>)
 8005236:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a14      	ldr	r2, [pc, #80]	@ (800528c <services_register_handlers+0x68>)
 800523c:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a13      	ldr	r2, [pc, #76]	@ (8005290 <services_register_handlers+0x6c>)
 8005242:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a13      	ldr	r2, [pc, #76]	@ (8005294 <services_register_handlers+0x70>)
 8005248:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a12      	ldr	r2, [pc, #72]	@ (8005298 <services_register_handlers+0x74>)
 800524e:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a12      	ldr	r2, [pc, #72]	@ (800529c <services_register_handlers+0x78>)
 8005254:	615a      	str	r2, [r3, #20]
    h->on_led_ctrl = h_led_ctrl;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a11      	ldr	r2, [pc, #68]	@ (80052a0 <services_register_handlers+0x7c>)
 800525a:	619a      	str	r2, [r3, #24]
    h->on_fpga_status = h_fpga_status;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a11      	ldr	r2, [pc, #68]	@ (80052a4 <services_register_handlers+0x80>)
 8005260:	61da      	str	r2, [r3, #28]
    h->on_set_origin = h_set_origin;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a10      	ldr	r2, [pc, #64]	@ (80052a8 <services_register_handlers+0x84>)
 8005266:	621a      	str	r2, [r3, #32]
    h->on_encoder_status = h_encoder_status;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a10      	ldr	r2, [pc, #64]	@ (80052ac <services_register_handlers+0x88>)
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24
    h->on_set_microsteps = h_set_microsteps;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a0f      	ldr	r2, [pc, #60]	@ (80052b0 <services_register_handlers+0x8c>)
 8005272:	629a      	str	r2, [r3, #40]	@ 0x28
    h->on_test_hello = h_test_hello;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a0f      	ldr	r2, [pc, #60]	@ (80052b4 <services_register_handlers+0x90>)
 8005278:	62da      	str	r2, [r3, #44]	@ 0x2c
 800527a:	e000      	b.n	800527e <services_register_handlers+0x5a>
		return;
 800527c:	bf00      	nop
}
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	080050dd 	.word	0x080050dd
 800528c:	080050f9 	.word	0x080050f9
 8005290:	08005115 	.word	0x08005115
 8005294:	08005131 	.word	0x08005131
 8005298:	0800514d 	.word	0x0800514d
 800529c:	08005169 	.word	0x08005169
 80052a0:	08005185 	.word	0x08005185
 80052a4:	080051a1 	.word	0x080051a1
 80052a8:	080051b9 	.word	0x080051b9
 80052ac:	080051d5 	.word	0x080051d5
 80052b0:	080051f1 	.word	0x080051f1
 80052b4:	0800520d 	.word	0x0800520d

080052b8 <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 80052c0:	2216      	movs	r2, #22
 80052c2:	2100      	movs	r1, #0
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f00a fa31 	bl	800f72c <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3316      	adds	r3, #22
 80052ce:	2214      	movs	r2, #20
 80052d0:	21a5      	movs	r1, #165	@ 0xa5
 80052d2:	4618      	mov	r0, r3
 80052d4:	f00a fa2a 	bl	800f72c <memset>
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e00b      	b.n	800530a <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <is_fill42+0x24>
 8005300:	2300      	movs	r3, #0
 8005302:	e006      	b.n	8005312 <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b29      	cmp	r3, #41	@ 0x29
 800530e:	d9f0      	bls.n	80052f2 <is_fill42+0x12>
    return 1;
 8005310:	2301      	movs	r3, #1
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 800531e:	b480      	push	{r7}
 8005320:	b087      	sub	sp, #28
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 800532e:	e002      	b.n	8005336 <find_frame+0x18>
 8005330:	8afb      	ldrh	r3, [r7, #22]
 8005332:	3301      	adds	r3, #1
 8005334:	82fb      	strh	r3, [r7, #22]
 8005336:	8afb      	ldrh	r3, [r7, #22]
 8005338:	2b29      	cmp	r3, #41	@ 0x29
 800533a:	d805      	bhi.n	8005348 <find_frame+0x2a>
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2baa      	cmp	r3, #170	@ 0xaa
 8005346:	d1f3      	bne.n	8005330 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 8005348:	8afb      	ldrh	r3, [r7, #22]
 800534a:	2b29      	cmp	r3, #41	@ 0x29
 800534c:	d901      	bls.n	8005352 <find_frame+0x34>
 800534e:	2300      	movs	r3, #0
 8005350:	e01d      	b.n	800538e <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	3301      	adds	r3, #1
 8005356:	82bb      	strh	r3, [r7, #20]
 8005358:	e015      	b.n	8005386 <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 800535a:	8abb      	ldrh	r3, [r7, #20]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b55      	cmp	r3, #85	@ 0x55
 8005364:	d10c      	bne.n	8005380 <find_frame+0x62>
            *off = i;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	8afa      	ldrh	r2, [r7, #22]
 800536a:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 800536c:	8aba      	ldrh	r2, [r7, #20]
 800536e:	8afb      	ldrh	r3, [r7, #22]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	b29b      	uxth	r3, r3
 8005374:	3301      	adds	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	801a      	strh	r2, [r3, #0]
            return 1;
 800537c:	2301      	movs	r3, #1
 800537e:	e006      	b.n	800538e <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8005380:	8abb      	ldrh	r3, [r7, #20]
 8005382:	3301      	adds	r3, #1
 8005384:	82bb      	strh	r3, [r7, #20]
 8005386:	8abb      	ldrh	r3, [r7, #20]
 8005388:	2b29      	cmp	r3, #41	@ 0x29
 800538a:	d9e6      	bls.n	800535a <find_frame+0x3c>
        }
    }
    return 0;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08e      	sub	sp, #56	@ 0x38
 80053a0:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 80053a6:	4b21      	ldr	r3, [pc, #132]	@ (800542c <prepare_next_tx+0x90>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80053ae:	4820      	ldr	r0, [pc, #128]	@ (8005430 <prepare_next_tx+0x94>)
 80053b0:	f7ff ff82 	bl	80052b8 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 80053b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <prepare_next_tx+0x98>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e034      	b.n	8005426 <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 80053bc:	4b1b      	ldr	r3, [pc, #108]	@ (800542c <prepare_next_tx+0x90>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	1d39      	adds	r1, r7, #4
 80053c2:	222a      	movs	r2, #42	@ 0x2a
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fc fa1a 	bl	80017fe <resp_fifo_pop>
 80053ca:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 80053cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd23      	ble.n	800541a <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 80053d2:	222a      	movs	r2, #42	@ 0x2a
 80053d4:	2100      	movs	r1, #0
 80053d6:	4816      	ldr	r0, [pc, #88]	@ (8005430 <prepare_next_tx+0x94>)
 80053d8:	f00a f9a8 	bl	800f72c <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 80053dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053de:	2b14      	cmp	r3, #20
 80053e0:	dc02      	bgt.n	80053e8 <prepare_next_tx+0x4c>
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	e000      	b.n	80053ea <prepare_next_tx+0x4e>
 80053e8:	2314      	movs	r3, #20
 80053ea:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 80053ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80053ee:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80053f2:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 80053f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 80053fe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005400:	4a0b      	ldr	r2, [pc, #44]	@ (8005430 <prepare_next_tx+0x94>)
 8005402:	1898      	adds	r0, r3, r2
 8005404:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005406:	1d3a      	adds	r2, r7, #4
 8005408:	4413      	add	r3, r2
 800540a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800540c:	4619      	mov	r1, r3
 800540e:	f00a fa18 	bl	800f842 <memcpy>
        g_state = APP_SPI_PENDING;
 8005412:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <prepare_next_tx+0x98>)
 8005414:	2202      	movs	r2, #2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e005      	b.n	8005426 <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 800541a:	4805      	ldr	r0, [pc, #20]	@ (8005430 <prepare_next_tx+0x94>)
 800541c:	f7ff ff4c 	bl	80052b8 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8005420:	4b04      	ldr	r3, [pc, #16]	@ (8005434 <prepare_next_tx+0x98>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
    }
}
 8005426:	3738      	adds	r7, #56	@ 0x38
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000da0 	.word	0x20000da0
 8005430:	20000dd0 	.word	0x20000dd0
 8005434:	20000dfc 	.word	0x20000dfc

08005438 <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 800543c:	480d      	ldr	r0, [pc, #52]	@ (8005474 <restart_spi_dma+0x3c>)
 800543e:	f005 fbb9 	bl	800abb4 <HAL_SPI_GetState>
 8005442:	4603      	mov	r3, r0
 8005444:	2b01      	cmp	r3, #1
 8005446:	d003      	beq.n	8005450 <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <restart_spi_dma+0x40>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
        return;
 800544e:	e00f      	b.n	8005470 <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi2,
 8005450:	232a      	movs	r3, #42	@ 0x2a
 8005452:	4a0a      	ldr	r2, [pc, #40]	@ (800547c <restart_spi_dma+0x44>)
 8005454:	490a      	ldr	r1, [pc, #40]	@ (8005480 <restart_spi_dma+0x48>)
 8005456:	4807      	ldr	r0, [pc, #28]	@ (8005474 <restart_spi_dma+0x3c>)
 8005458:	f005 f8ea 	bl	800a630 <HAL_SPI_TransmitReceive_DMA>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8005462:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <restart_spi_dma+0x40>)
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
        return;
 8005468:	e002      	b.n	8005470 <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <restart_spi_dma+0x4c>)
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
}
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000e40 	.word	0x20000e40
 8005478:	20000dfb 	.word	0x20000dfb
 800547c:	20000da4 	.word	0x20000da4
 8005480:	20000dd0 	.word	0x20000dd0
 8005484:	20000dfc 	.word	0x20000dfc

08005488 <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 800548c:	2230      	movs	r2, #48	@ 0x30
 800548e:	2100      	movs	r1, #0
 8005490:	4813      	ldr	r0, [pc, #76]	@ (80054e0 <app_init+0x58>)
 8005492:	f00a f94b 	bl	800f72c <memset>
    services_register_handlers(&g_handlers);
 8005496:	4812      	ldr	r0, [pc, #72]	@ (80054e0 <app_init+0x58>)
 8005498:	f7ff fec4 	bl	8005224 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 800549c:	f7fd f804 	bl	80024a8 <log_service_init>
#endif
    safety_service_init();
 80054a0:	f7ff fda4 	bl	8004fec <safety_service_init>
    led_service_init();
 80054a4:	f7fc fe4c 	bl	8002140 <led_service_init>
    home_service_init();
 80054a8:	f7fc fb5a 	bl	8001b60 <home_service_init>
    probe_service_init();
 80054ac:	f7ff fd56 	bl	8004f5c <probe_service_init>
    motion_service_init();
 80054b0:	f7fe f960 	bl	8003774 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 80054b4:	f7fc f946 	bl	8001744 <resp_fifo_create>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4a0a      	ldr	r2, [pc, #40]	@ (80054e4 <app_init+0x5c>)
 80054bc:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 80054be:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <app_init+0x5c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a07      	ldr	r2, [pc, #28]	@ (80054e0 <app_init+0x58>)
 80054c4:	4619      	mov	r1, r3
 80054c6:	4808      	ldr	r0, [pc, #32]	@ (80054e8 <app_init+0x60>)
 80054c8:	f7fc f9de 	bl	8001888 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80054cc:	4807      	ldr	r0, [pc, #28]	@ (80054ec <app_init+0x64>)
 80054ce:	f7ff fef3 	bl	80052b8 <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 80054d2:	f7ff ffb1 	bl	8005438 <restart_spi_dma>
    g_state = APP_SPI_READY;
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <app_init+0x68>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000d70 	.word	0x20000d70
 80054e4:	20000da0 	.word	0x20000da0
 80054e8:	20000d28 	.word	0x20000d28
 80054ec:	20000dd0 	.word	0x20000dd0
 80054f0:	20000dfc 	.word	0x20000dfc

080054f4 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 80054fa:	4b19      	ldr	r3, [pc, #100]	@ (8005560 <app_poll+0x6c>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d028      	beq.n	8005556 <app_poll+0x62>
    g_spi_round_done = 0u;
 8005504:	4b16      	ldr	r3, [pc, #88]	@ (8005560 <app_poll+0x6c>)
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 800550a:	213c      	movs	r1, #60	@ 0x3c
 800550c:	4815      	ldr	r0, [pc, #84]	@ (8005564 <app_poll+0x70>)
 800550e:	f7ff fee7 	bl	80052e0 <is_fill42>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d119      	bne.n	800554c <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	80fb      	strh	r3, [r7, #6]
 800551c:	2300      	movs	r3, #0
 800551e:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 8005520:	1d3a      	adds	r2, r7, #4
 8005522:	1dbb      	adds	r3, r7, #6
 8005524:	4619      	mov	r1, r3
 8005526:	480f      	ldr	r0, [pc, #60]	@ (8005564 <app_poll+0x70>)
 8005528:	f7ff fef9 	bl	800531e <find_frame>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	461a      	mov	r2, r3
 8005536:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <app_poll+0x70>)
 8005538:	4413      	add	r3, r2
 800553a:	88ba      	ldrh	r2, [r7, #4]
 800553c:	4619      	mov	r1, r3
 800553e:	480a      	ldr	r0, [pc, #40]	@ (8005568 <app_poll+0x74>)
 8005540:	f7fc fae6 	bl	8001b10 <router_feed_bytes>
 8005544:	e002      	b.n	800554c <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 8005546:	4b09      	ldr	r3, [pc, #36]	@ (800556c <app_poll+0x78>)
 8005548:	2201      	movs	r2, #1
 800554a:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 800554c:	f7ff ff26 	bl	800539c <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 8005550:	f7ff ff72 	bl	8005438 <restart_spi_dma>
 8005554:	e000      	b.n	8005558 <app_poll+0x64>
    if (!g_spi_round_done) return;
 8005556:	bf00      	nop
}
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000dfa 	.word	0x20000dfa
 8005564:	20000da4 	.word	0x20000da4
 8005568:	20000d28 	.word	0x20000d28
 800556c:	20000dfb 	.word	0x20000dfb

08005570 <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a07      	ldr	r2, [pc, #28]	@ (80055a0 <app_spi_isr_txrx_done+0x30>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d105      	bne.n	8005594 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 8005588:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <app_spi_isr_txrx_done+0x34>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e002      	b.n	8005596 <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005594:	bf00      	nop
}
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40003800 	.word	0x40003800
 80055a4:	20000dfa 	.word	0x20000dfa

080055a8 <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 80055b2:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <app_resp_push+0x48>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <app_resp_push+0x1e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <app_resp_push+0x1e>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ca:	e00d      	b.n	80055e8 <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b14      	cmp	r3, #20
 80055d0:	d902      	bls.n	80055d8 <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 80055d2:	f06f 0303 	mvn.w	r3, #3
 80055d6:	e007      	b.n	80055e8 <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 80055d8:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <app_resp_push+0x48>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fc f8b8 	bl	8001756 <resp_fifo_push>
 80055e6:	4603      	mov	r3, r0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000da0 	.word	0x20000da0

080055f4 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08e      	sub	sp, #56	@ 0x38
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	2224      	movs	r2, #36	@ 0x24
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f00a f891 	bl	800f72c <memset>
    TIM_MasterConfigTypeDef master = {0};
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8005616:	2303      	movs	r3, #3
 8005618:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 800561a:	2300      	movs	r3, #0
 800561c:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8005622:	2300      	movs	r3, #0
 8005624:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 800562a:	2300      	movs	r3, #0
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800562e:	2301      	movs	r3, #1
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8005632:	2300      	movs	r3, #0
 8005634:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 800563a:	f107 0314 	add.w	r3, r7, #20
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f006 fba5 	bl	800bd90 <HAL_TIM_Encoder_Init>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 800564c:	f000 fb78 	bl	8005d40 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f008 fa7a 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 800566a:	f000 fb69 	bl	8005d40 <Error_Handler>
    }
}
 800566e:	bf00      	nop
 8005670:	3738      	adds	r7, #56	@ 0x38
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b08a      	sub	sp, #40	@ 0x28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8005682:	f107 0314 	add.w	r3, r7, #20
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	609a      	str	r2, [r3, #8]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8005696:	2301      	movs	r3, #1
 8005698:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 80056a2:	f107 0314 	add.w	r3, r7, #20
 80056a6:	4619      	mov	r1, r3
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f001 fe1d 	bl	80072e8 <HAL_GPIO_Init>
}
 80056ae:	bf00      	nop
 80056b0:	3728      	adds	r7, #40	@ 0x28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 80056cc:	2203      	movs	r2, #3
 80056ce:	2113      	movs	r1, #19
 80056d0:	4825      	ldr	r0, [pc, #148]	@ (8005768 <board_config_apply_motion_gpio+0xb0>)
 80056d2:	f7ff ffd0 	bl	8005676 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80056d6:	2203      	movs	r2, #3
 80056d8:	2104      	movs	r1, #4
 80056da:	4823      	ldr	r0, [pc, #140]	@ (8005768 <board_config_apply_motion_gpio+0xb0>)
 80056dc:	f7ff ffcb 	bl	8005676 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80056e0:	2203      	movs	r2, #3
 80056e2:	210c      	movs	r1, #12
 80056e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056e8:	f7ff ffc5 	bl	8005676 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 80056ec:	2200      	movs	r2, #0
 80056ee:	2130      	movs	r1, #48	@ 0x30
 80056f0:	481e      	ldr	r0, [pc, #120]	@ (800576c <board_config_apply_motion_gpio+0xb4>)
 80056f2:	f7ff ffc0 	bl	8005676 <configure_output>
    configure_output(GPIOD, GPIO_PIN_14, GPIO_SPEED_FREQ_LOW);
 80056f6:	2200      	movs	r2, #0
 80056f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056fc:	481c      	ldr	r0, [pc, #112]	@ (8005770 <board_config_apply_motion_gpio+0xb8>)
 80056fe:	f7ff ffba 	bl	8005676 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8005702:	2200      	movs	r2, #0
 8005704:	2117      	movs	r1, #23
 8005706:	4818      	ldr	r0, [pc, #96]	@ (8005768 <board_config_apply_motion_gpio+0xb0>)
 8005708:	f002 f89a 	bl	8007840 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
 800570e:	210c      	movs	r1, #12
 8005710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005714:	f002 f894 	bl	8007840 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);     /* EN_X desabilitado (alto) */
 8005718:	2201      	movs	r2, #1
 800571a:	2110      	movs	r1, #16
 800571c:	4813      	ldr	r0, [pc, #76]	@ (800576c <board_config_apply_motion_gpio+0xb4>)
 800571e:	f002 f88f 	bl	8007840 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);   /* EN_Y habilitado (baixo) */
 8005722:	2200      	movs	r2, #0
 8005724:	2120      	movs	r1, #32
 8005726:	4811      	ldr	r0, [pc, #68]	@ (800576c <board_config_apply_motion_gpio+0xb4>)
 8005728:	f002 f88a 	bl	8007840 <HAL_GPIO_WritePin>
    // EN_Z (PD14) ativo em nível baixo por solicitação: inicia habilitado
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800572c:	2200      	movs	r2, #0
 800572e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005732:	480f      	ldr	r0, [pc, #60]	@ (8005770 <board_config_apply_motion_gpio+0xb8>)
 8005734:	f002 f884 	bl	8007840 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005738:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800573c:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 800573e:	2301      	movs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
     */
#if 0
    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;  /* PC0/PC1/PC2 como EXTI */
    HAL_GPIO_Init(GPIOC, &init);
#else
    init.Pin = GPIO_PIN_1;                             /* Somente PC1 como EXTI */
 8005742:	2302      	movs	r3, #2
 8005744:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4808      	ldr	r0, [pc, #32]	@ (800576c <board_config_apply_motion_gpio+0xb4>)
 800574c:	f001 fdcc 	bl	80072e8 <HAL_GPIO_Init>
#endif

    init.Pin = GPIO_PIN_13;                            /* EXTI do PC13 permanece */
 8005750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005754:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4804      	ldr	r0, [pc, #16]	@ (800576c <board_config_apply_motion_gpio+0xb4>)
 800575c:	f001 fdc4 	bl	80072e8 <HAL_GPIO_Init>
}
 8005760:	bf00      	nop
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	48000400 	.word	0x48000400
 800576c:	48000800 	.word	0x48000800
 8005770:	48000c00 	.word	0x48000c00

08005774 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim3);
 8005778:	4803      	ldr	r0, [pc, #12]	@ (8005788 <board_config_force_encoder_quadrature+0x14>)
 800577a:	f7ff ff3b 	bl	80055f4 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 800577e:	4803      	ldr	r0, [pc, #12]	@ (800578c <board_config_force_encoder_quadrature+0x18>)
 8005780:	f7ff ff38 	bl	80055f4 <configure_encoder_timer>
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000f38 	.word	0x20000f38
 800578c:	20000f84 	.word	0x20000f84

08005790 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005794:	2200      	movs	r2, #0
 8005796:	2100      	movs	r1, #0
 8005798:	2006      	movs	r0, #6
 800579a:	f001 fa0f 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800579e:	2006      	movs	r0, #6
 80057a0:	f001 fa38 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80057a4:	2200      	movs	r2, #0
 80057a6:	2100      	movs	r1, #0
 80057a8:	2007      	movs	r0, #7
 80057aa:	f001 fa07 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80057ae:	2007      	movs	r0, #7
 80057b0:	f001 fa30 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	2008      	movs	r0, #8
 80057ba:	f001 f9ff 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80057be:	2008      	movs	r0, #8
 80057c0:	f001 fa28 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80057c4:	2200      	movs	r2, #0
 80057c6:	2100      	movs	r1, #0
 80057c8:	2028      	movs	r0, #40	@ 0x28
 80057ca:	f001 f9f7 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057ce:	2028      	movs	r0, #40	@ 0x28
 80057d0:	f001 fa20 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80057d4:	2200      	movs	r2, #0
 80057d6:	2101      	movs	r1, #1
 80057d8:	2036      	movs	r0, #54	@ 0x36
 80057da:	f001 f9ef 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057de:	2036      	movs	r0, #54	@ 0x36
 80057e0:	f001 fa18 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	2102      	movs	r1, #2
 80057e8:	200e      	movs	r0, #14
 80057ea:	f001 f9e7 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80057ee:	200e      	movs	r0, #14
 80057f0:	f001 fa10 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80057f4:	2200      	movs	r2, #0
 80057f6:	2102      	movs	r1, #2
 80057f8:	200f      	movs	r0, #15
 80057fa:	f001 f9df 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80057fe:	200f      	movs	r0, #15
 8005800:	f001 fa08 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8005804:	2200      	movs	r2, #0
 8005806:	2103      	movs	r1, #3
 8005808:	2037      	movs	r0, #55	@ 0x37
 800580a:	f001 f9d7 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800580e:	2037      	movs	r0, #55	@ 0x37
 8005810:	f001 fa00 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	2104      	movs	r1, #4
 8005818:	2025      	movs	r0, #37	@ 0x25
 800581a:	f001 f9cf 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800581e:	2025      	movs	r0, #37	@ 0x25
 8005820:	f001 f9f8 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	2105      	movs	r1, #5
 8005828:	2024      	movs	r0, #36	@ 0x24
 800582a:	f001 f9c7 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800582e:	2024      	movs	r0, #36	@ 0x24
 8005830:	f001 f9f0 	bl	8006c14 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8005834:	2200      	movs	r2, #0
 8005836:	2106      	movs	r1, #6
 8005838:	2018      	movs	r0, #24
 800583a:	f001 f9bf 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800583e:	2018      	movs	r0, #24
 8005840:	f001 f9e8 	bl	8006c14 <HAL_NVIC_EnableIRQ>
}
 8005844:	bf00      	nop
 8005846:	bd80      	pop	{r7, pc}

08005848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800584e:	4b10      	ldr	r3, [pc, #64]	@ (8005890 <MX_DMA_Init+0x48>)
 8005850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005852:	4a0f      	ldr	r2, [pc, #60]	@ (8005890 <MX_DMA_Init+0x48>)
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	6493      	str	r3, [r2, #72]	@ 0x48
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <MX_DMA_Init+0x48>)
 800585c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	607b      	str	r3, [r7, #4]
 8005864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005866:	2200      	movs	r2, #0
 8005868:	2100      	movs	r1, #0
 800586a:	200e      	movs	r0, #14
 800586c:	f001 f9a6 	bl	8006bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005870:	200e      	movs	r0, #14
 8005872:	f001 f9cf 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	200f      	movs	r0, #15
 800587c:	f001 f99e 	bl	8006bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005880:	200f      	movs	r0, #15
 8005882:	f001 f9c7 	bl	8006c14 <HAL_NVIC_EnableIRQ>

}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000

08005894 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	@ 0x30
 8005898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800589a:	f107 031c 	add.w	r3, r7, #28
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058aa:	4b4d      	ldr	r3, [pc, #308]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	4a4c      	ldr	r2, [pc, #304]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058b0:	f043 0310 	orr.w	r3, r3, #16
 80058b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058b6:	4b4a      	ldr	r3, [pc, #296]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058c2:	4b47      	ldr	r3, [pc, #284]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c6:	4a46      	ldr	r2, [pc, #280]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058ce:	4b44      	ldr	r3, [pc, #272]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058da:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058de:	4a40      	ldr	r2, [pc, #256]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e6:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f2:	4b3b      	ldr	r3, [pc, #236]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f6:	4a3a      	ldr	r2, [pc, #232]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058fe:	4b38      	ldr	r3, [pc, #224]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 8005900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800590a:	4b35      	ldr	r3, [pc, #212]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 800590c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590e:	4a34      	ldr	r2, [pc, #208]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005916:	4b32      	ldr	r3, [pc, #200]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 8005918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005922:	4b2f      	ldr	r3, [pc, #188]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 8005924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005926:	4a2e      	ldr	r2, [pc, #184]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800592e:	4b2c      	ldr	r3, [pc, #176]	@ (80059e0 <MX_GPIO_Init+0x14c>)
 8005930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800593a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800593e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005940:	2303      	movs	r3, #3
 8005942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005948:	f107 031c 	add.w	r3, r7, #28
 800594c:	4619      	mov	r1, r3
 800594e:	4825      	ldr	r0, [pc, #148]	@ (80059e4 <MX_GPIO_Init+0x150>)
 8005950:	f001 fcca 	bl	80072e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8005954:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 8005958:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800595a:	2303      	movs	r3, #3
 800595c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595e:	2300      	movs	r3, #0
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005962:	f107 031c 	add.w	r3, r7, #28
 8005966:	4619      	mov	r1, r3
 8005968:	481f      	ldr	r0, [pc, #124]	@ (80059e8 <MX_GPIO_Init+0x154>)
 800596a:	f001 fcbd 	bl	80072e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800596e:	2303      	movs	r3, #3
 8005970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005972:	2303      	movs	r3, #3
 8005974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005976:	2300      	movs	r3, #0
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800597a:	f107 031c 	add.w	r3, r7, #28
 800597e:	4619      	mov	r1, r3
 8005980:	481a      	ldr	r0, [pc, #104]	@ (80059ec <MX_GPIO_Init+0x158>)
 8005982:	f001 fcb1 	bl	80072e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8005986:	f649 7338 	movw	r3, #40760	@ 0x9f38
 800598a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800598c:	2303      	movs	r3, #3
 800598e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005990:	2300      	movs	r3, #0
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005994:	f107 031c 	add.w	r3, r7, #28
 8005998:	4619      	mov	r1, r3
 800599a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800599e:	f001 fca3 	bl	80072e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80059a2:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 80059a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059a8:	2303      	movs	r3, #3
 80059aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059b0:	f107 031c 	add.w	r3, r7, #28
 80059b4:	4619      	mov	r1, r3
 80059b6:	480e      	ldr	r0, [pc, #56]	@ (80059f0 <MX_GPIO_Init+0x15c>)
 80059b8:	f001 fc96 	bl	80072e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80059bc:	f64f 73e4 	movw	r3, #65508	@ 0xffe4
 80059c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059c2:	2303      	movs	r3, #3
 80059c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059ca:	f107 031c 	add.w	r3, r7, #28
 80059ce:	4619      	mov	r1, r3
 80059d0:	4808      	ldr	r0, [pc, #32]	@ (80059f4 <MX_GPIO_Init+0x160>)
 80059d2:	f001 fc89 	bl	80072e8 <HAL_GPIO_Init>

}
 80059d6:	bf00      	nop
 80059d8:	3730      	adds	r7, #48	@ 0x30
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000
 80059e4:	48001000 	.word	0x48001000
 80059e8:	48000800 	.word	0x48000800
 80059ec:	48001c00 	.word	0x48001c00
 80059f0:	48000400 	.word	0x48000400
 80059f4:	48000c00 	.word	0x48000c00

080059f8 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80059fc:	4b16      	ldr	r3, [pc, #88]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 80059fe:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <MX_LPTIM1_Init+0x64>)
 8005a00:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005a02:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8005a08:	4b13      	ldr	r3, [pc, #76]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8005a0e:	4b12      	ldr	r3, [pc, #72]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a20:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8005a28:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a34:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8005a36:	4b08      	ldr	r3, [pc, #32]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005a3c:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8005a42:	4805      	ldr	r0, [pc, #20]	@ (8005a58 <MX_LPTIM1_Init+0x60>)
 8005a44:	f001 ff62 	bl	800790c <HAL_LPTIM_Init>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8005a4e:	f000 f977 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8005a52:	bf00      	nop
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000e00 	.word	0x20000e00
 8005a5c:	40007c00 	.word	0x40007c00

08005a60 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b0ac      	sub	sp, #176	@ 0xb0
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	2288      	movs	r2, #136	@ 0x88
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f009 fe53 	bl	800f72c <memset>
  if(lptimHandle->Instance==LPTIM1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a25      	ldr	r2, [pc, #148]	@ (8005b20 <HAL_LPTIM_MspInit+0xc0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d143      	bne.n	8005b18 <HAL_LPTIM_MspInit+0xb8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8005a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a94:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 fc50 	bl	8009344 <HAL_RCCEx_PeriphCLKConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8005aaa:	f000 f949 	bl	8005d40 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005aae:	4b1d      	ldr	r3, [pc, #116]	@ (8005b24 <HAL_LPTIM_MspInit+0xc4>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b24 <HAL_LPTIM_MspInit+0xc4>)
 8005ab4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aba:	4b1a      	ldr	r3, [pc, #104]	@ (8005b24 <HAL_LPTIM_MspInit+0xc4>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ac6:	4b17      	ldr	r3, [pc, #92]	@ (8005b24 <HAL_LPTIM_MspInit+0xc4>)
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aca:	4a16      	ldr	r2, [pc, #88]	@ (8005b24 <HAL_LPTIM_MspInit+0xc4>)
 8005acc:	f043 0304 	orr.w	r3, r3, #4
 8005ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ad2:	4b14      	ldr	r3, [pc, #80]	@ (8005b24 <HAL_LPTIM_MspInit+0xc4>)
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8005ade:	2305      	movs	r3, #5
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005afc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005b00:	4619      	mov	r1, r3
 8005b02:	4809      	ldr	r0, [pc, #36]	@ (8005b28 <HAL_LPTIM_MspInit+0xc8>)
 8005b04:	f001 fbf0 	bl	80072e8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	2041      	movs	r0, #65	@ 0x41
 8005b0e:	f001 f855 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8005b12:	2041      	movs	r0, #65	@ 0x41
 8005b14:	f001 f87e 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8005b18:	bf00      	nop
 8005b1a:	37b0      	adds	r7, #176	@ 0xb0
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40007c00 	.word	0x40007c00
 8005b24:	40021000 	.word	0x40021000
 8005b28:	48000800 	.word	0x48000800

08005b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b30:	f000 fedf 	bl	80068f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b34:	f000 f82a 	bl	8005b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b38:	f7ff feac 	bl	8005894 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b3c:	f7ff fe84 	bl	8005848 <MX_DMA_Init>
  MX_SPI2_Init();
 8005b40:	f000 f922 	bl	8005d88 <MX_SPI2_Init>
  MX_TIM6_Init();
 8005b44:	f000 fbf0 	bl	8006328 <MX_TIM6_Init>
  MX_TIM5_Init();
 8005b48:	f000 fb98 	bl	800627c <MX_TIM5_Init>
  MX_TIM7_Init();
 8005b4c:	f000 fc22 	bl	8006394 <MX_TIM7_Init>
  MX_TIM3_Init();
 8005b50:	f000 fb3e 	bl	80061d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8005b54:	f000 fe16 	bl	8006784 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8005b58:	f000 fc52 	bl	8006400 <MX_TIM15_Init>
  MX_LPTIM1_Init();
 8005b5c:	f7ff ff4c 	bl	80059f8 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8005b60:	f7ff fdaa 	bl	80056b8 <board_config_apply_motion_gpio>
    board_config_force_encoder_quadrature();
 8005b64:	f7ff fe06 	bl	8005774 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8005b68:	f7ff fe12 	bl	8005790 <board_config_apply_interrupt_priorities>
    app_init();
 8005b6c:	f7ff fc8c 	bl	8005488 <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 8005b70:	4804      	ldr	r0, [pc, #16]	@ (8005b84 <main+0x58>)
 8005b72:	f005 fbe1 	bl	800b338 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8005b76:	4804      	ldr	r0, [pc, #16]	@ (8005b88 <main+0x5c>)
 8005b78:	f005 fbde 	bl	800b338 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8005b7c:	f7ff fcba 	bl	80054f4 <app_poll>
 8005b80:	e7fc      	b.n	8005b7c <main+0x50>
 8005b82:	bf00      	nop
 8005b84:	20000fd0 	.word	0x20000fd0
 8005b88:	2000101c 	.word	0x2000101c

08005b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b096      	sub	sp, #88	@ 0x58
 8005b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	2244      	movs	r2, #68	@ 0x44
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f009 fdc6 	bl	800f72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	605a      	str	r2, [r3, #4]
 8005ba8:	609a      	str	r2, [r3, #8]
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005bae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005bb2:	f002 fb9f 	bl	80082f4 <HAL_PWREx_ControlVoltageScaling>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005bbc:	f000 f8c0 	bl	8005d40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005bcc:	2360      	movs	r3, #96	@ 0x60
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005bdc:	2328      	movs	r3, #40	@ 0x28
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005be0:	2307      	movs	r3, #7
 8005be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005be4:	2302      	movs	r3, #2
 8005be6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005be8:	2302      	movs	r3, #2
 8005bea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f002 fbe1 	bl	80083b8 <HAL_RCC_OscConfig>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005bfc:	f000 f8a0 	bl	8005d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c00:	230f      	movs	r3, #15
 8005c02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c04:	2303      	movs	r3, #3
 8005c06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005c16:	463b      	mov	r3, r7
 8005c18:	2104      	movs	r1, #4
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f003 f8ce 	bl	8008dbc <HAL_RCC_ClockConfig>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005c26:	f000 f88b 	bl	8005d40 <Error_Handler>
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3758      	adds	r7, #88	@ 0x58
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fc98 	bl	8005570 <app_spi_isr_txrx_done>
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
    if (hspi == NULL) return;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <HAL_SPI_ErrorCallback+0x36>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c8c <HAL_SPI_ErrorCallback+0x44>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d110      	bne.n	8005c82 <HAL_SPI_ErrorCallback+0x3a>

    g_spi_last_error = hspi->ErrorCode;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c64:	4a0a      	ldr	r2, [pc, #40]	@ (8005c90 <HAL_SPI_ErrorCallback+0x48>)
 8005c66:	6013      	str	r3, [r2, #0]
    g_spi_error_count++;
 8005c68:	4b0a      	ldr	r3, [pc, #40]	@ (8005c94 <HAL_SPI_ErrorCallback+0x4c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a09      	ldr	r2, [pc, #36]	@ (8005c94 <HAL_SPI_ErrorCallback+0x4c>)
 8005c70:	6013      	str	r3, [r2, #0]

    /* Indicação visual simples para diagnóstico */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8005c72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c76:	4808      	ldr	r0, [pc, #32]	@ (8005c98 <HAL_SPI_ErrorCallback+0x50>)
 8005c78:	f001 fe0e 	bl	8007898 <HAL_GPIO_TogglePin>
 8005c7c:	e002      	b.n	8005c84 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi == NULL) return;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005c82:	bf00      	nop
}
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40003800 	.word	0x40003800
 8005c90:	20000e3c 	.word	0x20000e3c
 8005c94:	20000e38 	.word	0x20000e38
 8005c98:	48000400 	.word	0x48000400

08005c9c <HAL_GPIO_EXTI_Callback>:
/* Botões de segurança (EXTI):
 * - B1 (PC13): E-STOP imediato (pressionado = nível baixo)
 * - B2 (PC0): Release/recover + funções extras do demo (pressionado = baixo)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d019      	beq.n	8005ce0 <HAL_GPIO_EXTI_Callback+0x44>
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb0:	d135      	bne.n	8005d1e <HAL_GPIO_EXTI_Callback+0x82>
    case GPIO_PIN_13: /* B1 - E-STOP */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8005cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cb6:	481e      	ldr	r0, [pc, #120]	@ (8005d30 <HAL_GPIO_EXTI_Callback+0x94>)
 8005cb8:	f001 fda2 	bl	8007800 <HAL_GPIO_ReadPin>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d12f      	bne.n	8005d22 <HAL_GPIO_EXTI_Callback+0x86>
            /* Pressionado: aciona E-STOP e para tudo agora */
            safety_estop_assert();
 8005cc2:	f7ff f9b3 	bl	800502c <safety_estop_assert>
            motion_emergency_stop();
 8005cc6:	f7ff f897 	bl	8004df8 <motion_emergency_stop>
            /* Opcionalmente interrompe os timers para cessar qualquer atividade em ISR */
            HAL_TIM_Base_Stop_IT(&htim6);
 8005cca:	481a      	ldr	r0, [pc, #104]	@ (8005d34 <HAL_GPIO_EXTI_Callback+0x98>)
 8005ccc:	f005 fbe8 	bl	800b4a0 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim7);
 8005cd0:	4819      	ldr	r0, [pc, #100]	@ (8005d38 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005cd2:	f005 fbe5 	bl	800b4a0 <HAL_TIM_Base_Stop_IT>
            /* Se houver PWM em TIM15 (LED/auxiliar), pare também */
            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4818      	ldr	r0, [pc, #96]	@ (8005d3c <HAL_GPIO_EXTI_Callback+0xa0>)
 8005cda:	f005 ff25 	bl	800bb28 <HAL_TIM_PWM_Stop>
        }
        break;
 8005cde:	e020      	b.n	8005d22 <HAL_GPIO_EXTI_Callback+0x86>
    case GPIO_PIN_0:  /* B2 - Release/Resume + demo speed step */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4813      	ldr	r0, [pc, #76]	@ (8005d30 <HAL_GPIO_EXTI_Callback+0x94>)
 8005ce4:	f001 fd8c 	bl	8007800 <HAL_GPIO_ReadPin>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11b      	bne.n	8005d26 <HAL_GPIO_EXTI_Callback+0x8a>
            /* Libera segurança */
            safety_estop_release();
 8005cee:	f7ff f9bd 	bl	800506c <safety_estop_release>
            /* Garante que os timers base voltem a rodar */
            HAL_TIM_Base_Start_IT(&htim6);
 8005cf2:	4810      	ldr	r0, [pc, #64]	@ (8005d34 <HAL_GPIO_EXTI_Callback+0x98>)
 8005cf4:	f005 fb20 	bl	800b338 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim7);
 8005cf8:	480f      	ldr	r0, [pc, #60]	@ (8005d38 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005cfa:	f005 fb1d 	bl	800b338 <HAL_TIM_Base_Start_IT>
            /* Reativa movimentos conforme contexto */
            if (motion_demo_is_active()) {
 8005cfe:	f7ff f8b5 	bl	8004e6c <motion_demo_is_active>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_GPIO_EXTI_Callback+0x72>
                /* Cicla velocidade no modo demo contínuo */
                motion_demo_cycle_speed();
 8005d08:	f7ff f8c2 	bl	8004e90 <motion_demo_cycle_speed>
                motion_demo_set_continuous(1);
                /* Se usa PWM em TIM15 para indicação, retome */
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
            }
        }
        break;
 8005d0c:	e00b      	b.n	8005d26 <HAL_GPIO_EXTI_Callback+0x8a>
                motion_demo_set_continuous(1);
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7fe ff9e 	bl	8004c50 <motion_demo_set_continuous>
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8005d14:	2100      	movs	r1, #0
 8005d16:	4809      	ldr	r0, [pc, #36]	@ (8005d3c <HAL_GPIO_EXTI_Callback+0xa0>)
 8005d18:	f005 fd56 	bl	800b7c8 <HAL_TIM_PWM_Start>
        break;
 8005d1c:	e003      	b.n	8005d26 <HAL_GPIO_EXTI_Callback+0x8a>
    case GPIO_PIN_1:
    case GPIO_PIN_2:
    default:
        /* Reservado para sensores PROX/limites; sem ação específica aqui */
        break;
 8005d1e:	bf00      	nop
 8005d20:	e002      	b.n	8005d28 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8005d26:	bf00      	nop
    }
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	48000800 	.word	0x48000800
 8005d34:	20000fd0 	.word	0x20000fd0
 8005d38:	2000101c 	.word	0x2000101c
 8005d3c:	20001068 	.word	0x20001068

08005d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	2164      	movs	r1, #100	@ 0x64
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fc fbba 	bl	80024c4 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8005d50:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <Error_Handler+0x24>)
 8005d52:	4905      	ldr	r1, [pc, #20]	@ (8005d68 <Error_Handler+0x28>)
 8005d54:	4805      	ldr	r0, [pc, #20]	@ (8005d6c <Error_Handler+0x2c>)
 8005d56:	f7fc fbc9 	bl	80024ec <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8005d5a:	b672      	cpsid	i
}
 8005d5c:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <Error_Handler+0x1e>
 8005d62:	bf00      	nop
 8005d64:	08010a1c 	.word	0x08010a1c
 8005d68:	08010a2c 	.word	0x08010a2c
 8005d6c:	08010a34 	.word	0x08010a34

08005d70 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005d8e:	4a19      	ldr	r2, [pc, #100]	@ (8005df4 <MX_SPI2_Init+0x6c>)
 8005d90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005d92:	4b17      	ldr	r3, [pc, #92]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005d98:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d9e:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005da0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005da4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005da8:	2202      	movs	r2, #2
 8005daa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005dac:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8005db2:	4b0f      	ldr	r3, [pc, #60]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005db8:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005dca:	4b09      	ldr	r3, [pc, #36]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dcc:	2207      	movs	r2, #7
 8005dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005dd6:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ddc:	4804      	ldr	r0, [pc, #16]	@ (8005df0 <MX_SPI2_Init+0x68>)
 8005dde:	f004 fa39 	bl	800a254 <HAL_SPI_Init>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8005de8:	f7ff ffaa 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000e40 	.word	0x20000e40
 8005df4:	40003800 	.word	0x40003800

08005df8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	@ 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a44      	ldr	r2, [pc, #272]	@ (8005f28 <HAL_SPI_MspInit+0x130>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	f040 8082 	bne.w	8005f20 <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e1c:	4b43      	ldr	r3, [pc, #268]	@ (8005f2c <HAL_SPI_MspInit+0x134>)
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e20:	4a42      	ldr	r2, [pc, #264]	@ (8005f2c <HAL_SPI_MspInit+0x134>)
 8005e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e28:	4b40      	ldr	r3, [pc, #256]	@ (8005f2c <HAL_SPI_MspInit+0x134>)
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e34:	4b3d      	ldr	r3, [pc, #244]	@ (8005f2c <HAL_SPI_MspInit+0x134>)
 8005e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e38:	4a3c      	ldr	r2, [pc, #240]	@ (8005f2c <HAL_SPI_MspInit+0x134>)
 8005e3a:	f043 0308 	orr.w	r3, r3, #8
 8005e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e40:	4b3a      	ldr	r3, [pc, #232]	@ (8005f2c <HAL_SPI_MspInit+0x134>)
 8005e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> SPI2_NSS
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8005e4c:	231b      	movs	r3, #27
 8005e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e50:	2302      	movs	r3, #2
 8005e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e5c:	2305      	movs	r3, #5
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	4619      	mov	r1, r3
 8005e66:	4832      	ldr	r0, [pc, #200]	@ (8005f30 <HAL_SPI_MspInit+0x138>)
 8005e68:	f001 fa3e 	bl	80072e8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005e6c:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e6e:	4a32      	ldr	r2, [pc, #200]	@ (8005f38 <HAL_SPI_MspInit+0x140>)
 8005e70:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005e72:	4b30      	ldr	r3, [pc, #192]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e78:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e84:	4b2b      	ldr	r3, [pc, #172]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e86:	2280      	movs	r2, #128	@ 0x80
 8005e88:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e90:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005e96:	4b27      	ldr	r3, [pc, #156]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e98:	2220      	movs	r2, #32
 8005e9a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e9c:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005ea2:	4824      	ldr	r0, [pc, #144]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005ea4:	f000 feda 	bl	8006c5c <HAL_DMA_Init>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8005eae:	f7ff ff47 	bl	8005d40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005eb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f34 <HAL_SPI_MspInit+0x13c>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f40 <HAL_SPI_MspInit+0x148>)
 8005ec2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eca:	4b1c      	ldr	r3, [pc, #112]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ecc:	2210      	movs	r2, #16
 8005ece:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed6:	4b19      	ldr	r3, [pc, #100]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ed8:	2280      	movs	r2, #128	@ 0x80
 8005eda:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005edc:	4b17      	ldr	r3, [pc, #92]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ee2:	4b16      	ldr	r3, [pc, #88]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005eea:	2220      	movs	r2, #32
 8005eec:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eee:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005ef4:	4811      	ldr	r0, [pc, #68]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005ef6:	f000 feb1 	bl	8006c5c <HAL_DMA_Init>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8005f00:	f7ff ff1e 	bl	8005d40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a0d      	ldr	r2, [pc, #52]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005f08:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f3c <HAL_SPI_MspInit+0x144>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005f10:	2200      	movs	r2, #0
 8005f12:	2100      	movs	r1, #0
 8005f14:	2024      	movs	r0, #36	@ 0x24
 8005f16:	f000 fe51 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005f1a:	2024      	movs	r0, #36	@ 0x24
 8005f1c:	f000 fe7a 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005f20:	bf00      	nop
 8005f22:	3728      	adds	r7, #40	@ 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40003800 	.word	0x40003800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	48000c00 	.word	0x48000c00
 8005f34:	20000ea4 	.word	0x20000ea4
 8005f38:	40020044 	.word	0x40020044
 8005f3c:	20000eec 	.word	0x20000eec
 8005f40:	40020058 	.word	0x40020058

08005f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f88 <HAL_MspInit+0x44>)
 8005f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f88 <HAL_MspInit+0x44>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f56:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <HAL_MspInit+0x44>)
 8005f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <HAL_MspInit+0x44>)
 8005f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f66:	4a08      	ldr	r2, [pc, #32]	@ (8005f88 <HAL_MspInit+0x44>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_MspInit+0x44>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000

08005f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005f90:	bf00      	nop
 8005f92:	e7fd      	b.n	8005f90 <NMI_Handler+0x4>

08005f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <HardFault_Handler+0x4>

08005f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <MemManage_Handler+0x4>

08005fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <BusFault_Handler+0x4>

08005fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <UsageFault_Handler+0x4>

08005fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fb8:	bf00      	nop
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fc6:	bf00      	nop
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fe2:	f000 fcdb 	bl	800699c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005ff0:	4802      	ldr	r0, [pc, #8]	@ (8005ffc <DMA1_Channel4_IRQHandler+0x10>)
 8005ff2:	f001 f89a 	bl	800712a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005ff6:	bf00      	nop
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000ea4 	.word	0x20000ea4

08006000 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006004:	4802      	ldr	r0, [pc, #8]	@ (8006010 <DMA1_Channel5_IRQHandler+0x10>)
 8006006:	f001 f890 	bl	800712a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800600a:	bf00      	nop
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000eec 	.word	0x20000eec

08006014 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006018:	4802      	ldr	r0, [pc, #8]	@ (8006024 <SPI2_IRQHandler+0x10>)
 800601a:	f004 fcad 	bl	800a978 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800601e:	bf00      	nop
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000e40 	.word	0x20000e40

08006028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800602c:	4802      	ldr	r0, [pc, #8]	@ (8006038 <TIM6_DAC_IRQHandler+0x10>)
 800602e:	f006 f92f 	bl	800c290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000fd0 	.word	0x20000fd0

0800603c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006040:	4802      	ldr	r0, [pc, #8]	@ (800604c <TIM7_IRQHandler+0x10>)
 8006042:	f006 f925 	bl	800c290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2000101c 	.word	0x2000101c

08006050 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8006054:	4802      	ldr	r0, [pc, #8]	@ (8006060 <LPTIM1_IRQHandler+0x10>)
 8006056:	f001 ff1f 	bl	8007e98 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000e00 	.word	0x20000e00

08006064 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006068:	2001      	movs	r0, #1
 800606a:	f001 fc37 	bl	80078dc <HAL_GPIO_EXTI_IRQHandler>
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}

08006072 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006076:	2002      	movs	r0, #2
 8006078:	f001 fc30 	bl	80078dc <HAL_GPIO_EXTI_IRQHandler>
}
 800607c:	bf00      	nop
 800607e:	bd80      	pop	{r7, pc}

08006080 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006084:	2004      	movs	r0, #4
 8006086:	f001 fc29 	bl	80078dc <HAL_GPIO_EXTI_IRQHandler>
}
 800608a:	bf00      	nop
 800608c:	bd80      	pop	{r7, pc}

0800608e <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006092:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006096:	f001 fc21 	bl	80078dc <HAL_GPIO_EXTI_IRQHandler>
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}

0800609e <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e00a      	b.n	80060c6 <_read+0x28>
		*ptr++ = __io_getchar();
 80060b0:	f3af 8000 	nop.w
 80060b4:	4601      	mov	r1, r0
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	60ba      	str	r2, [r7, #8]
 80060bc:	b2ca      	uxtb	r2, r1
 80060be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	3301      	adds	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	dbf0      	blt.n	80060b0 <_read+0x12>
	}

	return len;
 80060ce:	687b      	ldr	r3, [r7, #4]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <_fstat>:

int _fstat(int file, struct stat *st) {
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006100:	605a      	str	r2, [r3, #4]
	return 0;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <_isatty>:

int _isatty(int file) {
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8006118:	2301      	movs	r3, #1
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800614a:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006154:	4b13      	ldr	r3, [pc, #76]	@ (80061a4 <_sbrk+0x64>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800615c:	4b11      	ldr	r3, [pc, #68]	@ (80061a4 <_sbrk+0x64>)
 800615e:	4a12      	ldr	r2, [pc, #72]	@ (80061a8 <_sbrk+0x68>)
 8006160:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <_sbrk+0x64>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	429a      	cmp	r2, r3
 800616e:	d207      	bcs.n	8006180 <_sbrk+0x40>
		errno = ENOMEM;
 8006170:	f009 fb3a 	bl	800f7e8 <__errno>
 8006174:	4603      	mov	r3, r0
 8006176:	220c      	movs	r2, #12
 8006178:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	e009      	b.n	8006194 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8006180:	4b08      	ldr	r3, [pc, #32]	@ (80061a4 <_sbrk+0x64>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8006186:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <_sbrk+0x64>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	4a05      	ldr	r2, [pc, #20]	@ (80061a4 <_sbrk+0x64>)
 8006190:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20018000 	.word	0x20018000
 80061a0:	00000400 	.word	0x00000400
 80061a4:	20000f34 	.word	0x20000f34
 80061a8:	20001290 	.word	0x20001290

080061ac <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80061b0:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <SystemInit+0x20>)
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b6:	4a05      	ldr	r2, [pc, #20]	@ (80061cc <SystemInit+0x20>)
 80061b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80061c0:	bf00      	nop
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	e000ed00 	.word	0xe000ed00

080061d0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08c      	sub	sp, #48	@ 0x30
 80061d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	2224      	movs	r2, #36	@ 0x24
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f009 faa4 	bl	800f72c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061e4:	463b      	mov	r3, r7
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80061ee:	4b21      	ldr	r3, [pc, #132]	@ (8006274 <MX_TIM3_Init+0xa4>)
 80061f0:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <MX_TIM3_Init+0xa8>)
 80061f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80061f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006274 <MX_TIM3_Init+0xa4>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006274 <MX_TIM3_Init+0xa4>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006200:	4b1c      	ldr	r3, [pc, #112]	@ (8006274 <MX_TIM3_Init+0xa4>)
 8006202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006208:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <MX_TIM3_Init+0xa4>)
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800620e:	4b19      	ldr	r3, [pc, #100]	@ (8006274 <MX_TIM3_Init+0xa4>)
 8006210:	2200      	movs	r2, #0
 8006212:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006214:	2301      	movs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006220:	2300      	movs	r3, #0
 8006222:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006228:	2300      	movs	r3, #0
 800622a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800622c:	2301      	movs	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006230:	2300      	movs	r3, #0
 8006232:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4619      	mov	r1, r3
 800623e:	480d      	ldr	r0, [pc, #52]	@ (8006274 <MX_TIM3_Init+0xa4>)
 8006240:	f005 fda6 	bl	800bd90 <HAL_TIM_Encoder_Init>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800624a:	f7ff fd79 	bl	8005d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006256:	463b      	mov	r3, r7
 8006258:	4619      	mov	r1, r3
 800625a:	4806      	ldr	r0, [pc, #24]	@ (8006274 <MX_TIM3_Init+0xa4>)
 800625c:	f007 fc7c 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006266:	f7ff fd6b 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800626a:	bf00      	nop
 800626c:	3730      	adds	r7, #48	@ 0x30
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000f38 	.word	0x20000f38
 8006278:	40000400 	.word	0x40000400

0800627c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	@ 0x30
 8006280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006282:	f107 030c 	add.w	r3, r7, #12
 8006286:	2224      	movs	r2, #36	@ 0x24
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f009 fa4e 	bl	800f72c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006290:	463b      	mov	r3, r7
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800629a:	4b21      	ldr	r3, [pc, #132]	@ (8006320 <MX_TIM5_Init+0xa4>)
 800629c:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <MX_TIM5_Init+0xa8>)
 800629e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80062a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006320 <MX_TIM5_Init+0xa4>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006320 <MX_TIM5_Init+0xa4>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80062ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006320 <MX_TIM5_Init+0xa4>)
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006320 <MX_TIM5_Init+0xa4>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ba:	4b19      	ldr	r3, [pc, #100]	@ (8006320 <MX_TIM5_Init+0xa4>)
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80062c0:	2301      	movs	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80062c8:	2301      	movs	r3, #1
 80062ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80062d4:	2300      	movs	r3, #0
 80062d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80062d8:	2301      	movs	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80062dc:	2300      	movs	r3, #0
 80062de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4619      	mov	r1, r3
 80062ea:	480d      	ldr	r0, [pc, #52]	@ (8006320 <MX_TIM5_Init+0xa4>)
 80062ec:	f005 fd50 	bl	800bd90 <HAL_TIM_Encoder_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80062f6:	f7ff fd23 	bl	8005d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062fa:	2300      	movs	r3, #0
 80062fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006302:	463b      	mov	r3, r7
 8006304:	4619      	mov	r1, r3
 8006306:	4806      	ldr	r0, [pc, #24]	@ (8006320 <MX_TIM5_Init+0xa4>)
 8006308:	f007 fc26 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8006312:	f7ff fd15 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006316:	bf00      	nop
 8006318:	3730      	adds	r7, #48	@ 0x30
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000f84 	.word	0x20000f84
 8006324:	40000c00 	.word	0x40000c00

08006328 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006338:	4b14      	ldr	r3, [pc, #80]	@ (800638c <MX_TIM6_Init+0x64>)
 800633a:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <MX_TIM6_Init+0x68>)
 800633c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800633e:	4b13      	ldr	r3, [pc, #76]	@ (800638c <MX_TIM6_Init+0x64>)
 8006340:	224f      	movs	r2, #79	@ 0x4f
 8006342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006344:	4b11      	ldr	r3, [pc, #68]	@ (800638c <MX_TIM6_Init+0x64>)
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 800634a:	4b10      	ldr	r3, [pc, #64]	@ (800638c <MX_TIM6_Init+0x64>)
 800634c:	2213      	movs	r2, #19
 800634e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006350:	4b0e      	ldr	r3, [pc, #56]	@ (800638c <MX_TIM6_Init+0x64>)
 8006352:	2280      	movs	r2, #128	@ 0x80
 8006354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006356:	480d      	ldr	r0, [pc, #52]	@ (800638c <MX_TIM6_Init+0x64>)
 8006358:	f004 fee4 	bl	800b124 <HAL_TIM_Base_Init>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006362:	f7ff fced 	bl	8005d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006366:	2320      	movs	r3, #32
 8006368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800636e:	1d3b      	adds	r3, r7, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4806      	ldr	r0, [pc, #24]	@ (800638c <MX_TIM6_Init+0x64>)
 8006374:	f007 fbf0 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800637e:	f7ff fcdf 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000fd0 	.word	0x20000fd0
 8006390:	40001000 	.word	0x40001000

08006394 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80063a4:	4b14      	ldr	r3, [pc, #80]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063a6:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <MX_TIM7_Init+0x68>)
 80063a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063ac:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80063b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063b2:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80063b8:	4b0f      	ldr	r3, [pc, #60]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063ba:	2209      	movs	r2, #9
 80063bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063be:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063c0:	2280      	movs	r2, #128	@ 0x80
 80063c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80063c4:	480c      	ldr	r0, [pc, #48]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063c6:	f004 fead 	bl	800b124 <HAL_TIM_Base_Init>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80063d0:	f7ff fcb6 	bl	8005d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063d4:	2300      	movs	r3, #0
 80063d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	4619      	mov	r1, r3
 80063e0:	4805      	ldr	r0, [pc, #20]	@ (80063f8 <MX_TIM7_Init+0x64>)
 80063e2:	f007 fbb9 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80063ec:	f7ff fca8 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	2000101c 	.word	0x2000101c
 80063fc:	40001400 	.word	0x40001400

08006400 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b09a      	sub	sp, #104	@ 0x68
 8006404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006406:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	609a      	str	r2, [r3, #8]
 8006412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006414:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	605a      	str	r2, [r3, #4]
 800641e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006420:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	605a      	str	r2, [r3, #4]
 800642a:	609a      	str	r2, [r3, #8]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	611a      	str	r2, [r3, #16]
 8006430:	615a      	str	r2, [r3, #20]
 8006432:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	222c      	movs	r2, #44	@ 0x2c
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f009 f976 	bl	800f72c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8006440:	4b3e      	ldr	r3, [pc, #248]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006442:	4a3f      	ldr	r2, [pc, #252]	@ (8006540 <MX_TIM15_Init+0x140>)
 8006444:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 8006446:	4b3d      	ldr	r3, [pc, #244]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006448:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 800644c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800644e:	4b3b      	ldr	r3, [pc, #236]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8006454:	4b39      	ldr	r3, [pc, #228]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006456:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800645a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800645c:	4b37      	ldr	r3, [pc, #220]	@ (800653c <MX_TIM15_Init+0x13c>)
 800645e:	2200      	movs	r2, #0
 8006460:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006462:	4b36      	ldr	r3, [pc, #216]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006464:	2200      	movs	r2, #0
 8006466:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006468:	4b34      	ldr	r3, [pc, #208]	@ (800653c <MX_TIM15_Init+0x13c>)
 800646a:	2200      	movs	r2, #0
 800646c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800646e:	4833      	ldr	r0, [pc, #204]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006470:	f004 fe58 	bl	800b124 <HAL_TIM_Base_Init>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800647a:	f7ff fc61 	bl	8005d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800647e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006482:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8006484:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006488:	4619      	mov	r1, r3
 800648a:	482c      	ldr	r0, [pc, #176]	@ (800653c <MX_TIM15_Init+0x13c>)
 800648c:	f006 fada 	bl	800ca44 <HAL_TIM_ConfigClockSource>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8006496:	f7ff fc53 	bl	8005d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800649a:	4828      	ldr	r0, [pc, #160]	@ (800653c <MX_TIM15_Init+0x13c>)
 800649c:	f005 f880 	bl	800b5a0 <HAL_TIM_PWM_Init>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80064a6:	f7ff fc4b 	bl	8005d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064aa:	2300      	movs	r3, #0
 80064ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80064b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80064b6:	4619      	mov	r1, r3
 80064b8:	4820      	ldr	r0, [pc, #128]	@ (800653c <MX_TIM15_Init+0x13c>)
 80064ba:	f007 fb4d 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80064c4:	f7ff fc3c 	bl	8005d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064c8:	2360      	movs	r3, #96	@ 0x60
 80064ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064d4:	2300      	movs	r3, #0
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064d8:	2300      	movs	r3, #0
 80064da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064dc:	2300      	movs	r3, #0
 80064de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064e0:	2300      	movs	r3, #0
 80064e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80064e8:	2200      	movs	r2, #0
 80064ea:	4619      	mov	r1, r3
 80064ec:	4813      	ldr	r0, [pc, #76]	@ (800653c <MX_TIM15_Init+0x13c>)
 80064ee:	f005 ffd7 	bl	800c4a0 <HAL_TIM_PWM_ConfigChannel>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80064f8:	f7ff fc22 	bl	8005d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006500:	2300      	movs	r3, #0
 8006502:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006514:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4807      	ldr	r0, [pc, #28]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006520:	f007 fc70 	bl	800de04 <HAL_TIMEx_ConfigBreakDeadTime>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 800652a:	f7ff fc09 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800652e:	4803      	ldr	r0, [pc, #12]	@ (800653c <MX_TIM15_Init+0x13c>)
 8006530:	f000 f8d2 	bl	80066d8 <HAL_TIM_MspPostInit>

}
 8006534:	bf00      	nop
 8006536:	3768      	adds	r7, #104	@ 0x68
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20001068 	.word	0x20001068
 8006540:	40014000 	.word	0x40014000

08006544 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	@ 0x30
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800654c:	f107 031c 	add.w	r3, r7, #28
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a2f      	ldr	r2, [pc, #188]	@ (8006620 <HAL_TIM_Encoder_MspInit+0xdc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d129      	bne.n	80065ba <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006566:	4b2f      	ldr	r3, [pc, #188]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	4a2e      	ldr	r2, [pc, #184]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 800656c:	f043 0302 	orr.w	r3, r3, #2
 8006570:	6593      	str	r3, [r2, #88]	@ 0x58
 8006572:	4b2c      	ldr	r3, [pc, #176]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657e:	4b29      	ldr	r3, [pc, #164]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006582:	4a28      	ldr	r2, [pc, #160]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800658a:	4b26      	ldr	r3, [pc, #152]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 800658c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006596:	23c0      	movs	r3, #192	@ 0xc0
 8006598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800659a:	2302      	movs	r3, #2
 800659c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a2:	2300      	movs	r3, #0
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065a6:	2302      	movs	r3, #2
 80065a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065aa:	f107 031c 	add.w	r3, r7, #28
 80065ae:	4619      	mov	r1, r3
 80065b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80065b4:	f000 fe98 	bl	80072e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80065b8:	e02d      	b.n	8006616 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM5)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1a      	ldr	r2, [pc, #104]	@ (8006628 <HAL_TIM_Encoder_MspInit+0xe4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d128      	bne.n	8006616 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80065c4:	4b17      	ldr	r3, [pc, #92]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c8:	4a16      	ldr	r2, [pc, #88]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065ca:	f043 0308 	orr.w	r3, r3, #8
 80065ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80065d0:	4b14      	ldr	r3, [pc, #80]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065dc:	4b11      	ldr	r3, [pc, #68]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e0:	4a10      	ldr	r2, [pc, #64]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006624 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065f4:	2303      	movs	r3, #3
 80065f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f8:	2302      	movs	r3, #2
 80065fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006600:	2300      	movs	r3, #0
 8006602:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006604:	2302      	movs	r3, #2
 8006606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006608:	f107 031c 	add.w	r3, r7, #28
 800660c:	4619      	mov	r1, r3
 800660e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006612:	f000 fe69 	bl	80072e8 <HAL_GPIO_Init>
}
 8006616:	bf00      	nop
 8006618:	3730      	adds	r7, #48	@ 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40000400 	.word	0x40000400
 8006624:	40021000 	.word	0x40021000
 8006628:	40000c00 	.word	0x40000c00

0800662c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a23      	ldr	r2, [pc, #140]	@ (80066c8 <HAL_TIM_Base_MspInit+0x9c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d114      	bne.n	8006668 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800663e:	4b23      	ldr	r3, [pc, #140]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006642:	4a22      	ldr	r2, [pc, #136]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 8006644:	f043 0310 	orr.w	r3, r3, #16
 8006648:	6593      	str	r3, [r2, #88]	@ 0x58
 800664a:	4b20      	ldr	r3, [pc, #128]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	2036      	movs	r0, #54	@ 0x36
 800665c:	f000 faae 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006660:	2036      	movs	r0, #54	@ 0x36
 8006662:	f000 fad7 	bl	8006c14 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006666:	e02a      	b.n	80066be <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a18      	ldr	r2, [pc, #96]	@ (80066d0 <HAL_TIM_Base_MspInit+0xa4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d114      	bne.n	800669c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006672:	4b16      	ldr	r3, [pc, #88]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006676:	4a15      	ldr	r2, [pc, #84]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 8006678:	f043 0320 	orr.w	r3, r3, #32
 800667c:	6593      	str	r3, [r2, #88]	@ 0x58
 800667e:	4b13      	ldr	r3, [pc, #76]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	2037      	movs	r0, #55	@ 0x37
 8006690:	f000 fa94 	bl	8006bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006694:	2037      	movs	r0, #55	@ 0x37
 8006696:	f000 fabd 	bl	8006c14 <HAL_NVIC_EnableIRQ>
}
 800669a:	e010      	b.n	80066be <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0c      	ldr	r2, [pc, #48]	@ (80066d4 <HAL_TIM_Base_MspInit+0xa8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10b      	bne.n	80066be <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80066a6:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 80066a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066aa:	4a08      	ldr	r2, [pc, #32]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 80066ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80066b2:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_TIM_Base_MspInit+0xa0>)
 80066b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40001000 	.word	0x40001000
 80066cc:	40021000 	.word	0x40021000
 80066d0:	40001400 	.word	0x40001400
 80066d4:	40014000 	.word	0x40014000

080066d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	@ 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	609a      	str	r2, [r3, #8]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a20      	ldr	r2, [pc, #128]	@ (8006778 <HAL_TIM_MspPostInit+0xa0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d139      	bne.n	800676e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066fa:	4b20      	ldr	r3, [pc, #128]	@ (800677c <HAL_TIM_MspPostInit+0xa4>)
 80066fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fe:	4a1f      	ldr	r2, [pc, #124]	@ (800677c <HAL_TIM_MspPostInit+0xa4>)
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006706:	4b1d      	ldr	r3, [pc, #116]	@ (800677c <HAL_TIM_MspPostInit+0xa4>)
 8006708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006712:	4b1a      	ldr	r3, [pc, #104]	@ (800677c <HAL_TIM_MspPostInit+0xa4>)
 8006714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006716:	4a19      	ldr	r2, [pc, #100]	@ (800677c <HAL_TIM_MspPostInit+0xa4>)
 8006718:	f043 0302 	orr.w	r3, r3, #2
 800671c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800671e:	4b17      	ldr	r3, [pc, #92]	@ (800677c <HAL_TIM_MspPostInit+0xa4>)
 8006720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800672a:	2304      	movs	r3, #4
 800672c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672e:	2302      	movs	r3, #2
 8006730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006736:	2300      	movs	r3, #0
 8006738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800673a:	230e      	movs	r3, #14
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800673e:	f107 0314 	add.w	r3, r7, #20
 8006742:	4619      	mov	r1, r3
 8006744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006748:	f000 fdce 	bl	80072e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800674c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006752:	2302      	movs	r3, #2
 8006754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800675a:	2300      	movs	r3, #0
 800675c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800675e:	230e      	movs	r3, #14
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006762:	f107 0314 	add.w	r3, r7, #20
 8006766:	4619      	mov	r1, r3
 8006768:	4805      	ldr	r0, [pc, #20]	@ (8006780 <HAL_TIM_MspPostInit+0xa8>)
 800676a:	f000 fdbd 	bl	80072e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800676e:	bf00      	nop
 8006770:	3728      	adds	r7, #40	@ 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40014000 	.word	0x40014000
 800677c:	40021000 	.word	0x40021000
 8006780:	48000400 	.word	0x48000400

08006784 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006788:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 800678a:	4a15      	ldr	r2, [pc, #84]	@ (80067e0 <MX_USART1_UART_Init+0x5c>)
 800678c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800678e:	4b13      	ldr	r3, [pc, #76]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 8006790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006796:	4b11      	ldr	r3, [pc, #68]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800679c:	4b0f      	ldr	r3, [pc, #60]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 800679e:	2200      	movs	r2, #0
 80067a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067a2:	4b0e      	ldr	r3, [pc, #56]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067a8:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067aa:	220c      	movs	r2, #12
 80067ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067ae:	4b0b      	ldr	r3, [pc, #44]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067b4:	4b09      	ldr	r3, [pc, #36]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ba:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067c0:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067c6:	4805      	ldr	r0, [pc, #20]	@ (80067dc <MX_USART1_UART_Init+0x58>)
 80067c8:	f007 fc72 	bl	800e0b0 <HAL_UART_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80067d2:	f7ff fab5 	bl	8005d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200010b4 	.word	0x200010b4
 80067e0:	40013800 	.word	0x40013800

080067e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b0ac      	sub	sp, #176	@ 0xb0
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	605a      	str	r2, [r3, #4]
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067fc:	f107 0314 	add.w	r3, r7, #20
 8006800:	2288      	movs	r2, #136	@ 0x88
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f008 ff91 	bl	800f72c <memset>
  if(uartHandle->Instance==USART1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a21      	ldr	r2, [pc, #132]	@ (8006894 <HAL_UART_MspInit+0xb0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d13a      	bne.n	800688a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006814:	2301      	movs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006818:	2300      	movs	r3, #0
 800681a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	4618      	mov	r0, r3
 8006822:	f002 fd8f 	bl	8009344 <HAL_RCCEx_PeriphCLKConfig>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800682c:	f7ff fa88 	bl	8005d40 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006830:	4b19      	ldr	r3, [pc, #100]	@ (8006898 <HAL_UART_MspInit+0xb4>)
 8006832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006834:	4a18      	ldr	r2, [pc, #96]	@ (8006898 <HAL_UART_MspInit+0xb4>)
 8006836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800683a:	6613      	str	r3, [r2, #96]	@ 0x60
 800683c:	4b16      	ldr	r3, [pc, #88]	@ (8006898 <HAL_UART_MspInit+0xb4>)
 800683e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006848:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <HAL_UART_MspInit+0xb4>)
 800684a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800684c:	4a12      	ldr	r2, [pc, #72]	@ (8006898 <HAL_UART_MspInit+0xb4>)
 800684e:	f043 0302 	orr.w	r3, r3, #2
 8006852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006854:	4b10      	ldr	r3, [pc, #64]	@ (8006898 <HAL_UART_MspInit+0xb4>)
 8006856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006860:	23c0      	movs	r3, #192	@ 0xc0
 8006862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006866:	2302      	movs	r3, #2
 8006868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686c:	2300      	movs	r3, #0
 800686e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006878:	2307      	movs	r3, #7
 800687a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800687e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006882:	4619      	mov	r1, r3
 8006884:	4805      	ldr	r0, [pc, #20]	@ (800689c <HAL_UART_MspInit+0xb8>)
 8006886:	f000 fd2f 	bl	80072e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800688a:	bf00      	nop
 800688c:	37b0      	adds	r7, #176	@ 0xb0
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40013800 	.word	0x40013800
 8006898:	40021000 	.word	0x40021000
 800689c:	48000400 	.word	0x48000400

080068a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80068a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80068a4:	f7ff fc82 	bl	80061ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068a8:	480c      	ldr	r0, [pc, #48]	@ (80068dc <LoopForever+0x6>)
  ldr r1, =_edata
 80068aa:	490d      	ldr	r1, [pc, #52]	@ (80068e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80068ac:	4a0d      	ldr	r2, [pc, #52]	@ (80068e4 <LoopForever+0xe>)
  movs r3, #0
 80068ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068b0:	e002      	b.n	80068b8 <LoopCopyDataInit>

080068b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068b6:	3304      	adds	r3, #4

080068b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068bc:	d3f9      	bcc.n	80068b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068be:	4a0a      	ldr	r2, [pc, #40]	@ (80068e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80068c0:	4c0a      	ldr	r4, [pc, #40]	@ (80068ec <LoopForever+0x16>)
  movs r3, #0
 80068c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068c4:	e001      	b.n	80068ca <LoopFillZerobss>

080068c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068c8:	3204      	adds	r2, #4

080068ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068cc:	d3fb      	bcc.n	80068c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068ce:	f008 ff91 	bl	800f7f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80068d2:	f7ff f92b 	bl	8005b2c <main>

080068d6 <LoopForever>:

LoopForever:
    b LoopForever
 80068d6:	e7fe      	b.n	80068d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80068d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80068dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068e0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80068e4:	08010dc8 	.word	0x08010dc8
  ldr r2, =_sbss
 80068e8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80068ec:	2000128c 	.word	0x2000128c

080068f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80068f0:	e7fe      	b.n	80068f0 <ADC1_2_IRQHandler>

080068f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068fc:	2003      	movs	r0, #3
 80068fe:	f000 f93d 	bl	8006b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006902:	200f      	movs	r0, #15
 8006904:	f000 f80e 	bl	8006924 <HAL_InitTick>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	71fb      	strb	r3, [r7, #7]
 8006912:	e001      	b.n	8006918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006914:	f7ff fb16 	bl	8005f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006918:	79fb      	ldrb	r3, [r7, #7]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006930:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <HAL_InitTick+0x6c>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d023      	beq.n	8006980 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006938:	4b16      	ldr	r3, [pc, #88]	@ (8006994 <HAL_InitTick+0x70>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <HAL_InitTick+0x6c>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006946:	fbb3 f3f1 	udiv	r3, r3, r1
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f978 	bl	8006c44 <HAL_SYSTICK_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b0f      	cmp	r3, #15
 800695e:	d809      	bhi.n	8006974 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006960:	2200      	movs	r2, #0
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	f000 f928 	bl	8006bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800696c:	4a0a      	ldr	r2, [pc, #40]	@ (8006998 <HAL_InitTick+0x74>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e007      	b.n	8006984 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	e004      	b.n	8006984 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e001      	b.n	8006984 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000001c 	.word	0x2000001c
 8006994:	20000014 	.word	0x20000014
 8006998:	20000018 	.word	0x20000018

0800699c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069a0:	4b06      	ldr	r3, [pc, #24]	@ (80069bc <HAL_IncTick+0x20>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_IncTick+0x24>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4413      	add	r3, r2
 80069ac:	4a04      	ldr	r2, [pc, #16]	@ (80069c0 <HAL_IncTick+0x24>)
 80069ae:	6013      	str	r3, [r2, #0]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	2000001c 	.word	0x2000001c
 80069c0:	2000113c 	.word	0x2000113c

080069c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  return uwTick;
 80069c8:	4b03      	ldr	r3, [pc, #12]	@ (80069d8 <HAL_GetTick+0x14>)
 80069ca:	681b      	ldr	r3, [r3, #0]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2000113c 	.word	0x2000113c

080069dc <__NVIC_SetPriorityGrouping>:
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <__NVIC_SetPriorityGrouping+0x44>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a0e:	4a04      	ldr	r2, [pc, #16]	@ (8006a20 <__NVIC_SetPriorityGrouping+0x44>)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	60d3      	str	r3, [r2, #12]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <__NVIC_GetPriorityGrouping>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a28:	4b04      	ldr	r3, [pc, #16]	@ (8006a3c <__NVIC_GetPriorityGrouping+0x18>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 0307 	and.w	r3, r3, #7
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <__NVIC_EnableIRQ>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db0b      	blt.n	8006a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	f003 021f 	and.w	r2, r3, #31
 8006a58:	4907      	ldr	r1, [pc, #28]	@ (8006a78 <__NVIC_EnableIRQ+0x38>)
 8006a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2001      	movs	r0, #1
 8006a62:	fa00 f202 	lsl.w	r2, r0, r2
 8006a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e000e100 	.word	0xe000e100

08006a7c <__NVIC_SetPriority>:
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	db0a      	blt.n	8006aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	490c      	ldr	r1, [pc, #48]	@ (8006ac8 <__NVIC_SetPriority+0x4c>)
 8006a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9a:	0112      	lsls	r2, r2, #4
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006aa4:	e00a      	b.n	8006abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4908      	ldr	r1, [pc, #32]	@ (8006acc <__NVIC_SetPriority+0x50>)
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	0112      	lsls	r2, r2, #4
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	440b      	add	r3, r1
 8006aba:	761a      	strb	r2, [r3, #24]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	e000e100 	.word	0xe000e100
 8006acc:	e000ed00 	.word	0xe000ed00

08006ad0 <NVIC_EncodePriority>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f1c3 0307 	rsb	r3, r3, #7
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf28      	it	cs
 8006aee:	2304      	movcs	r3, #4
 8006af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3304      	adds	r3, #4
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d902      	bls.n	8006b00 <NVIC_EncodePriority+0x30>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3b03      	subs	r3, #3
 8006afe:	e000      	b.n	8006b02 <NVIC_EncodePriority+0x32>
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b04:	f04f 32ff 	mov.w	r2, #4294967295
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43da      	mvns	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	401a      	ands	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b18:	f04f 31ff 	mov.w	r1, #4294967295
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	43d9      	mvns	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b28:	4313      	orrs	r3, r2
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3724      	adds	r7, #36	@ 0x24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <SysTick_Config>:
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b48:	d301      	bcc.n	8006b4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e00f      	b.n	8006b6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b78 <SysTick_Config+0x40>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b56:	210f      	movs	r1, #15
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	f7ff ff8e 	bl	8006a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <SysTick_Config+0x40>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b66:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <SysTick_Config+0x40>)
 8006b68:	2207      	movs	r2, #7
 8006b6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000e010 	.word	0xe000e010

08006b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b07      	cmp	r3, #7
 8006b88:	d00f      	beq.n	8006baa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	d00c      	beq.n	8006baa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	d009      	beq.n	8006baa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d006      	beq.n	8006baa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d003      	beq.n	8006baa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006ba2:	21a6      	movs	r1, #166	@ 0xa6
 8006ba4:	4804      	ldr	r0, [pc, #16]	@ (8006bb8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8006ba6:	f7ff f8e3 	bl	8005d70 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff16 	bl	80069dc <__NVIC_SetPriorityGrouping>
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08010a38 	.word	0x08010a38

08006bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d903      	bls.n	8006bdc <HAL_NVIC_SetPriority+0x20>
 8006bd4:	21be      	movs	r1, #190	@ 0xbe
 8006bd6:	480e      	ldr	r0, [pc, #56]	@ (8006c10 <HAL_NVIC_SetPriority+0x54>)
 8006bd8:	f7ff f8ca 	bl	8005d70 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d903      	bls.n	8006bea <HAL_NVIC_SetPriority+0x2e>
 8006be2:	21bf      	movs	r1, #191	@ 0xbf
 8006be4:	480a      	ldr	r0, [pc, #40]	@ (8006c10 <HAL_NVIC_SetPriority+0x54>)
 8006be6:	f7ff f8c3 	bl	8005d70 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8006bea:	f7ff ff1b 	bl	8006a24 <__NVIC_GetPriorityGrouping>
 8006bee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	f7ff ff6b 	bl	8006ad0 <NVIC_EncodePriority>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff ff3a 	bl	8006a7c <__NVIC_SetPriority>
}
 8006c08:	bf00      	nop
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	08010a38 	.word	0x08010a38

08006c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	da03      	bge.n	8006c2e <HAL_NVIC_EnableIRQ+0x1a>
 8006c26:	21d2      	movs	r1, #210	@ 0xd2
 8006c28:	4805      	ldr	r0, [pc, #20]	@ (8006c40 <HAL_NVIC_EnableIRQ+0x2c>)
 8006c2a:	f7ff f8a1 	bl	8005d70 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff ff04 	bl	8006a40 <__NVIC_EnableIRQ>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08010a38 	.word	0x08010a38

08006c44 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff ff73 	bl	8006b38 <SysTick_Config>
 8006c52:	4603      	mov	r3, r0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e19d      	b.n	8006faa <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a79      	ldr	r2, [pc, #484]	@ (8006e58 <HAL_DMA_Init+0x1fc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d044      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a77      	ldr	r2, [pc, #476]	@ (8006e5c <HAL_DMA_Init+0x200>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d03f      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a76      	ldr	r2, [pc, #472]	@ (8006e60 <HAL_DMA_Init+0x204>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d03a      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a74      	ldr	r2, [pc, #464]	@ (8006e64 <HAL_DMA_Init+0x208>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d035      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a73      	ldr	r2, [pc, #460]	@ (8006e68 <HAL_DMA_Init+0x20c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d030      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a71      	ldr	r2, [pc, #452]	@ (8006e6c <HAL_DMA_Init+0x210>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d02b      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a70      	ldr	r2, [pc, #448]	@ (8006e70 <HAL_DMA_Init+0x214>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d026      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8006e74 <HAL_DMA_Init+0x218>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d021      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6d      	ldr	r2, [pc, #436]	@ (8006e78 <HAL_DMA_Init+0x21c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d01c      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8006e7c <HAL_DMA_Init+0x220>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d017      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8006e80 <HAL_DMA_Init+0x224>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d012      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a68      	ldr	r2, [pc, #416]	@ (8006e84 <HAL_DMA_Init+0x228>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00d      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a67      	ldr	r2, [pc, #412]	@ (8006e88 <HAL_DMA_Init+0x22c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d008      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a65      	ldr	r2, [pc, #404]	@ (8006e8c <HAL_DMA_Init+0x230>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d003      	beq.n	8006d02 <HAL_DMA_Init+0xa6>
 8006cfa:	21a5      	movs	r1, #165	@ 0xa5
 8006cfc:	4864      	ldr	r0, [pc, #400]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006cfe:	f7ff f837 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <HAL_DMA_Init+0xc8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d008      	beq.n	8006d24 <HAL_DMA_Init+0xc8>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d1a:	d003      	beq.n	8006d24 <HAL_DMA_Init+0xc8>
 8006d1c:	21a6      	movs	r1, #166	@ 0xa6
 8006d1e:	485c      	ldr	r0, [pc, #368]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006d20:	f7ff f826 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d007      	beq.n	8006d3c <HAL_DMA_Init+0xe0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_DMA_Init+0xe0>
 8006d34:	21a7      	movs	r1, #167	@ 0xa7
 8006d36:	4856      	ldr	r0, [pc, #344]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006d38:	f7ff f81a 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b80      	cmp	r3, #128	@ 0x80
 8006d42:	d007      	beq.n	8006d54 <HAL_DMA_Init+0xf8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_DMA_Init+0xf8>
 8006d4c:	21a8      	movs	r1, #168	@ 0xa8
 8006d4e:	4850      	ldr	r0, [pc, #320]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006d50:	f7ff f80e 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <HAL_DMA_Init+0x11c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d64:	d008      	beq.n	8006d78 <HAL_DMA_Init+0x11c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6e:	d003      	beq.n	8006d78 <HAL_DMA_Init+0x11c>
 8006d70:	21a9      	movs	r1, #169	@ 0xa9
 8006d72:	4847      	ldr	r0, [pc, #284]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006d74:	f7fe fffc 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00d      	beq.n	8006d9c <HAL_DMA_Init+0x140>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d88:	d008      	beq.n	8006d9c <HAL_DMA_Init+0x140>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d92:	d003      	beq.n	8006d9c <HAL_DMA_Init+0x140>
 8006d94:	21aa      	movs	r1, #170	@ 0xaa
 8006d96:	483e      	ldr	r0, [pc, #248]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006d98:	f7fe ffea 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_DMA_Init+0x158>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d003      	beq.n	8006db4 <HAL_DMA_Init+0x158>
 8006dac:	21ab      	movs	r1, #171	@ 0xab
 8006dae:	4838      	ldr	r0, [pc, #224]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006db0:	f7fe ffde 	bl	8005d70 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d012      	beq.n	8006de2 <HAL_DMA_Init+0x186>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc4:	d00d      	beq.n	8006de2 <HAL_DMA_Init+0x186>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dce:	d008      	beq.n	8006de2 <HAL_DMA_Init+0x186>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dd8:	d003      	beq.n	8006de2 <HAL_DMA_Init+0x186>
 8006dda:	21ac      	movs	r1, #172	@ 0xac
 8006ddc:	482c      	ldr	r0, [pc, #176]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006dde:	f7fe ffc7 	bl	8005d70 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01f      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d01b      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d017      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d00f      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d00b      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b06      	cmp	r3, #6
 8006e18:	d007      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b07      	cmp	r3, #7
 8006e20:	d003      	beq.n	8006e2a <HAL_DMA_Init+0x1ce>
 8006e22:	21ae      	movs	r1, #174	@ 0xae
 8006e24:	481a      	ldr	r0, [pc, #104]	@ (8006e90 <HAL_DMA_Init+0x234>)
 8006e26:	f7fe ffa3 	bl	8005d70 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4b18      	ldr	r3, [pc, #96]	@ (8006e94 <HAL_DMA_Init+0x238>)
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d836      	bhi.n	8006ea4 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4b16      	ldr	r3, [pc, #88]	@ (8006e98 <HAL_DMA_Init+0x23c>)
 8006e3e:	4413      	add	r3, r2
 8006e40:	4a16      	ldr	r2, [pc, #88]	@ (8006e9c <HAL_DMA_Init+0x240>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	091b      	lsrs	r3, r3, #4
 8006e48:	009a      	lsls	r2, r3, #2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a13      	ldr	r2, [pc, #76]	@ (8006ea0 <HAL_DMA_Init+0x244>)
 8006e52:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e54:	e035      	b.n	8006ec2 <HAL_DMA_Init+0x266>
 8006e56:	bf00      	nop
 8006e58:	40020008 	.word	0x40020008
 8006e5c:	4002001c 	.word	0x4002001c
 8006e60:	40020030 	.word	0x40020030
 8006e64:	40020044 	.word	0x40020044
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	4002006c 	.word	0x4002006c
 8006e70:	40020080 	.word	0x40020080
 8006e74:	40020408 	.word	0x40020408
 8006e78:	4002041c 	.word	0x4002041c
 8006e7c:	40020430 	.word	0x40020430
 8006e80:	40020444 	.word	0x40020444
 8006e84:	40020458 	.word	0x40020458
 8006e88:	4002046c 	.word	0x4002046c
 8006e8c:	40020480 	.word	0x40020480
 8006e90:	08010a74 	.word	0x08010a74
 8006e94:	40020407 	.word	0x40020407
 8006e98:	bffdfff8 	.word	0xbffdfff8
 8006e9c:	cccccccd 	.word	0xcccccccd
 8006ea0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b42      	ldr	r3, [pc, #264]	@ (8006fb4 <HAL_DMA_Init+0x358>)
 8006eac:	4413      	add	r3, r2
 8006eae:	4a42      	ldr	r2, [pc, #264]	@ (8006fb8 <HAL_DMA_Init+0x35c>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	009a      	lsls	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8006fbc <HAL_DMA_Init+0x360>)
 8006ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006edc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f1c:	d039      	beq.n	8006f92 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	4a27      	ldr	r2, [pc, #156]	@ (8006fc0 <HAL_DMA_Init+0x364>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d11a      	bne.n	8006f5e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f28:	4b26      	ldr	r3, [pc, #152]	@ (8006fc4 <HAL_DMA_Init+0x368>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f30:	f003 031c 	and.w	r3, r3, #28
 8006f34:	210f      	movs	r1, #15
 8006f36:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3a:	43db      	mvns	r3, r3
 8006f3c:	4921      	ldr	r1, [pc, #132]	@ (8006fc4 <HAL_DMA_Init+0x368>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f42:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <HAL_DMA_Init+0x368>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	f003 031c 	and.w	r3, r3, #28
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	491b      	ldr	r1, [pc, #108]	@ (8006fc4 <HAL_DMA_Init+0x368>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
 8006f5c:	e019      	b.n	8006f92 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc8 <HAL_DMA_Init+0x36c>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f66:	f003 031c 	and.w	r3, r3, #28
 8006f6a:	210f      	movs	r1, #15
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	43db      	mvns	r3, r3
 8006f72:	4915      	ldr	r1, [pc, #84]	@ (8006fc8 <HAL_DMA_Init+0x36c>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <HAL_DMA_Init+0x36c>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f84:	f003 031c 	and.w	r3, r3, #28
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	490e      	ldr	r1, [pc, #56]	@ (8006fc8 <HAL_DMA_Init+0x36c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	bffdfbf8 	.word	0xbffdfbf8
 8006fb8:	cccccccd 	.word	0xcccccccd
 8006fbc:	40020400 	.word	0x40020400
 8006fc0:	40020000 	.word	0x40020000
 8006fc4:	400200a8 	.word	0x400200a8
 8006fc8:	400204a8 	.word	0x400204a8

08006fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_DMA_Start_IT+0x20>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fea:	d304      	bcc.n	8006ff6 <HAL_DMA_Start_IT+0x2a>
 8006fec:	f240 11df 	movw	r1, #479	@ 0x1df
 8006ff0:	482c      	ldr	r0, [pc, #176]	@ (80070a4 <HAL_DMA_Start_IT+0xd8>)
 8006ff2:	f7fe febd 	bl	8005d70 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_DMA_Start_IT+0x38>
 8007000:	2302      	movs	r3, #2
 8007002:	e04b      	b.n	800709c <HAL_DMA_Start_IT+0xd0>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d13a      	bne.n	800708e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f923 	bl	8007288 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 020e 	orr.w	r2, r2, #14
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e00f      	b.n	800707c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0204 	bic.w	r2, r2, #4
 800706a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 020a 	orr.w	r2, r2, #10
 800707a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e005      	b.n	800709a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007096:	2302      	movs	r3, #2
 8007098:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08010a74 	.word	0x08010a74

080070a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d005      	beq.n	80070cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2204      	movs	r2, #4
 80070c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	e029      	b.n	8007120 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 020e 	bic.w	r2, r2, #14
 80070da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f0:	f003 021c 	and.w	r2, r3, #28
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	2101      	movs	r1, #1
 80070fa:	fa01 f202 	lsl.w	r2, r1, r2
 80070fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
    }
  }
  return status;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007146:	f003 031c 	and.w	r3, r3, #28
 800714a:	2204      	movs	r2, #4
 800714c:	409a      	lsls	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d026      	beq.n	80071a4 <HAL_DMA_IRQHandler+0x7a>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d021      	beq.n	80071a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0204 	bic.w	r2, r2, #4
 800717c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007182:	f003 021c 	and.w	r2, r3, #28
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	2104      	movs	r1, #4
 800718c:	fa01 f202 	lsl.w	r2, r1, r2
 8007190:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007196:	2b00      	cmp	r3, #0
 8007198:	d071      	beq.n	800727e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80071a2:	e06c      	b.n	800727e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a8:	f003 031c 	and.w	r3, r3, #28
 80071ac:	2202      	movs	r2, #2
 80071ae:	409a      	lsls	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02e      	beq.n	8007216 <HAL_DMA_IRQHandler+0xec>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d029      	beq.n	8007216 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 020a 	bic.w	r2, r2, #10
 80071de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ec:	f003 021c 	and.w	r2, r3, #28
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f4:	2102      	movs	r1, #2
 80071f6:	fa01 f202 	lsl.w	r2, r1, r2
 80071fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d038      	beq.n	800727e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007214:	e033      	b.n	800727e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	f003 031c 	and.w	r3, r3, #28
 800721e:	2208      	movs	r2, #8
 8007220:	409a      	lsls	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4013      	ands	r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02a      	beq.n	8007280 <HAL_DMA_IRQHandler+0x156>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d025      	beq.n	8007280 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 020e 	bic.w	r2, r2, #14
 8007242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007248:	f003 021c 	and.w	r2, r3, #28
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	2101      	movs	r1, #1
 8007252:	fa01 f202 	lsl.w	r2, r1, r2
 8007256:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800727e:	bf00      	nop
 8007280:	bf00      	nop
}
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729a:	f003 021c 	and.w	r2, r3, #28
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	2101      	movs	r1, #1
 80072a4:	fa01 f202 	lsl.w	r2, r1, r2
 80072a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d108      	bne.n	80072cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80072ca:	e007      	b.n	80072dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	60da      	str	r2, [r3, #12]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80072fc:	d01f      	beq.n	800733e <HAL_GPIO_Init+0x56>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a3c      	ldr	r2, [pc, #240]	@ (80073f4 <HAL_GPIO_Init+0x10c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01b      	beq.n	800733e <HAL_GPIO_Init+0x56>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a3b      	ldr	r2, [pc, #236]	@ (80073f8 <HAL_GPIO_Init+0x110>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d017      	beq.n	800733e <HAL_GPIO_Init+0x56>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a3a      	ldr	r2, [pc, #232]	@ (80073fc <HAL_GPIO_Init+0x114>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_GPIO_Init+0x56>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a39      	ldr	r2, [pc, #228]	@ (8007400 <HAL_GPIO_Init+0x118>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <HAL_GPIO_Init+0x56>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a38      	ldr	r2, [pc, #224]	@ (8007404 <HAL_GPIO_Init+0x11c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00b      	beq.n	800733e <HAL_GPIO_Init+0x56>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a37      	ldr	r2, [pc, #220]	@ (8007408 <HAL_GPIO_Init+0x120>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <HAL_GPIO_Init+0x56>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a36      	ldr	r2, [pc, #216]	@ (800740c <HAL_GPIO_Init+0x124>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <HAL_GPIO_Init+0x56>
 8007336:	21aa      	movs	r1, #170	@ 0xaa
 8007338:	4835      	ldr	r0, [pc, #212]	@ (8007410 <HAL_GPIO_Init+0x128>)
 800733a:	f7fe fd19 	bl	8005d70 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_GPIO_Init+0x6a>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007350:	d303      	bcc.n	800735a <HAL_GPIO_Init+0x72>
 8007352:	21ab      	movs	r1, #171	@ 0xab
 8007354:	482e      	ldr	r0, [pc, #184]	@ (8007410 <HAL_GPIO_Init+0x128>)
 8007356:	f7fe fd0b 	bl	8005d70 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 823d 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b01      	cmp	r3, #1
 800736a:	f000 8238 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b11      	cmp	r3, #17
 8007374:	f000 8233 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b02      	cmp	r3, #2
 800737e:	f000 822e 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b12      	cmp	r3, #18
 8007388:	f000 8229 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8007394:	f000 8223 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80073a0:	f000 821d 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80073ac:	f000 8217 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80073b8:	f000 8211 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80073c4:	f000 820b 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80073d0:	f000 8205 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	f000 8200 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b0b      	cmp	r3, #11
 80073e4:	f000 81fb 	beq.w	80077de <HAL_GPIO_Init+0x4f6>
 80073e8:	21ac      	movs	r1, #172	@ 0xac
 80073ea:	4809      	ldr	r0, [pc, #36]	@ (8007410 <HAL_GPIO_Init+0x128>)
 80073ec:	f7fe fcc0 	bl	8005d70 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073f0:	e1f5      	b.n	80077de <HAL_GPIO_Init+0x4f6>
 80073f2:	bf00      	nop
 80073f4:	48000400 	.word	0x48000400
 80073f8:	48000800 	.word	0x48000800
 80073fc:	48000c00 	.word	0x48000c00
 8007400:	48001000 	.word	0x48001000
 8007404:	48001400 	.word	0x48001400
 8007408:	48001800 	.word	0x48001800
 800740c:	48001c00 	.word	0x48001c00
 8007410:	08010aac 	.word	0x08010aac
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	2101      	movs	r1, #1
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	fa01 f303 	lsl.w	r3, r1, r3
 8007420:	4013      	ands	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 81d6 	beq.w	80077d8 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	2b01      	cmp	r3, #1
 8007436:	d005      	beq.n	8007444 <HAL_GPIO_Init+0x15c>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d144      	bne.n	80074ce <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00f      	beq.n	800746c <HAL_GPIO_Init+0x184>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d00b      	beq.n	800746c <HAL_GPIO_Init+0x184>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d007      	beq.n	800746c <HAL_GPIO_Init+0x184>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d003      	beq.n	800746c <HAL_GPIO_Init+0x184>
 8007464:	21bb      	movs	r1, #187	@ 0xbb
 8007466:	489c      	ldr	r0, [pc, #624]	@ (80076d8 <HAL_GPIO_Init+0x3f0>)
 8007468:	f7fe fc82 	bl	8005d70 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	2203      	movs	r2, #3
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	43db      	mvns	r3, r3
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4013      	ands	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074a2:	2201      	movs	r2, #1
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43db      	mvns	r3, r3
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4013      	ands	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	091b      	lsrs	r3, r3, #4
 80074b8:	f003 0201 	and.w	r2, r3, #1
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d118      	bne.n	800750c <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80074e0:	2201      	movs	r2, #1
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4013      	ands	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	08db      	lsrs	r3, r3, #3
 80074f6:	f003 0201 	and.w	r2, r3, #1
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	2b03      	cmp	r3, #3
 8007516:	d027      	beq.n	8007568 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <HAL_GPIO_Init+0x250>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d007      	beq.n	8007538 <HAL_GPIO_Init+0x250>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b02      	cmp	r3, #2
 800752e:	d003      	beq.n	8007538 <HAL_GPIO_Init+0x250>
 8007530:	21dc      	movs	r1, #220	@ 0xdc
 8007532:	4869      	ldr	r0, [pc, #420]	@ (80076d8 <HAL_GPIO_Init+0x3f0>)
 8007534:	f7fe fc1c 	bl	8005d70 <assert_failed>

        temp = GPIOx->PUPDR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4013      	ands	r3, r2
 800754e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d14f      	bne.n	8007614 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800757a:	d01f      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a57      	ldr	r2, [pc, #348]	@ (80076dc <HAL_GPIO_Init+0x3f4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d01b      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a56      	ldr	r2, [pc, #344]	@ (80076e0 <HAL_GPIO_Init+0x3f8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d017      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a55      	ldr	r2, [pc, #340]	@ (80076e4 <HAL_GPIO_Init+0x3fc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a54      	ldr	r2, [pc, #336]	@ (80076e8 <HAL_GPIO_Init+0x400>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00f      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a53      	ldr	r2, [pc, #332]	@ (80076ec <HAL_GPIO_Init+0x404>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a52      	ldr	r2, [pc, #328]	@ (80076f0 <HAL_GPIO_Init+0x408>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a51      	ldr	r2, [pc, #324]	@ (80076f4 <HAL_GPIO_Init+0x40c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <HAL_GPIO_Init+0x2d4>
 80075b4:	21e8      	movs	r1, #232	@ 0xe8
 80075b6:	4848      	ldr	r0, [pc, #288]	@ (80076d8 <HAL_GPIO_Init+0x3f0>)
 80075b8:	f7fe fbda 	bl	8005d70 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d903      	bls.n	80075cc <HAL_GPIO_Init+0x2e4>
 80075c4:	21e9      	movs	r1, #233	@ 0xe9
 80075c6:	4844      	ldr	r0, [pc, #272]	@ (80076d8 <HAL_GPIO_Init+0x3f0>)
 80075c8:	f7fe fbd2 	bl	8005d70 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	08da      	lsrs	r2, r3, #3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3208      	adds	r2, #8
 80075d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	220f      	movs	r2, #15
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	43db      	mvns	r3, r3
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4013      	ands	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	08da      	lsrs	r2, r3, #3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3208      	adds	r2, #8
 800760e:	6939      	ldr	r1, [r7, #16]
 8007610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	2203      	movs	r2, #3
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4013      	ands	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 0203 	and.w	r2, r3, #3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80c1 	beq.w	80077d8 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007656:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <HAL_GPIO_Init+0x410>)
 8007658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800765a:	4a27      	ldr	r2, [pc, #156]	@ (80076f8 <HAL_GPIO_Init+0x410>)
 800765c:	f043 0301 	orr.w	r3, r3, #1
 8007660:	6613      	str	r3, [r2, #96]	@ 0x60
 8007662:	4b25      	ldr	r3, [pc, #148]	@ (80076f8 <HAL_GPIO_Init+0x410>)
 8007664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	60bb      	str	r3, [r7, #8]
 800766c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800766e:	4a23      	ldr	r2, [pc, #140]	@ (80076fc <HAL_GPIO_Init+0x414>)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	3302      	adds	r3, #2
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	220f      	movs	r2, #15
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	43db      	mvns	r3, r3
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4013      	ands	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007698:	d03a      	beq.n	8007710 <HAL_GPIO_Init+0x428>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a0f      	ldr	r2, [pc, #60]	@ (80076dc <HAL_GPIO_Init+0x3f4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d034      	beq.n	800770c <HAL_GPIO_Init+0x424>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a0e      	ldr	r2, [pc, #56]	@ (80076e0 <HAL_GPIO_Init+0x3f8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d02e      	beq.n	8007708 <HAL_GPIO_Init+0x420>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a0d      	ldr	r2, [pc, #52]	@ (80076e4 <HAL_GPIO_Init+0x3fc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d028      	beq.n	8007704 <HAL_GPIO_Init+0x41c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a0c      	ldr	r2, [pc, #48]	@ (80076e8 <HAL_GPIO_Init+0x400>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_GPIO_Init+0x418>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a0b      	ldr	r2, [pc, #44]	@ (80076ec <HAL_GPIO_Init+0x404>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <HAL_GPIO_Init+0x3ea>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0a      	ldr	r2, [pc, #40]	@ (80076f0 <HAL_GPIO_Init+0x408>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_GPIO_Init+0x3e6>
 80076ca:	2306      	movs	r3, #6
 80076cc:	e021      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 80076ce:	2307      	movs	r3, #7
 80076d0:	e01f      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 80076d2:	2305      	movs	r3, #5
 80076d4:	e01d      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 80076d6:	bf00      	nop
 80076d8:	08010aac 	.word	0x08010aac
 80076dc:	48000400 	.word	0x48000400
 80076e0:	48000800 	.word	0x48000800
 80076e4:	48000c00 	.word	0x48000c00
 80076e8:	48001000 	.word	0x48001000
 80076ec:	48001400 	.word	0x48001400
 80076f0:	48001800 	.word	0x48001800
 80076f4:	48001c00 	.word	0x48001c00
 80076f8:	40021000 	.word	0x40021000
 80076fc:	40010000 	.word	0x40010000
 8007700:	2304      	movs	r3, #4
 8007702:	e006      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 8007704:	2303      	movs	r3, #3
 8007706:	e004      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 8007708:	2302      	movs	r3, #2
 800770a:	e002      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 800770c:	2301      	movs	r3, #1
 800770e:	e000      	b.n	8007712 <HAL_GPIO_Init+0x42a>
 8007710:	2300      	movs	r3, #0
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	f002 0203 	and.w	r2, r2, #3
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	4093      	lsls	r3, r2
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007722:	4935      	ldr	r1, [pc, #212]	@ (80077f8 <HAL_GPIO_Init+0x510>)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	089b      	lsrs	r3, r3, #2
 8007728:	3302      	adds	r3, #2
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007730:	4b32      	ldr	r3, [pc, #200]	@ (80077fc <HAL_GPIO_Init+0x514>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	43db      	mvns	r3, r3
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4013      	ands	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007754:	4a29      	ldr	r2, [pc, #164]	@ (80077fc <HAL_GPIO_Init+0x514>)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800775a:	4b28      	ldr	r3, [pc, #160]	@ (80077fc <HAL_GPIO_Init+0x514>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	43db      	mvns	r3, r3
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4013      	ands	r3, r2
 8007768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800777e:	4a1f      	ldr	r2, [pc, #124]	@ (80077fc <HAL_GPIO_Init+0x514>)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007784:	4b1d      	ldr	r3, [pc, #116]	@ (80077fc <HAL_GPIO_Init+0x514>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	43db      	mvns	r3, r3
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4013      	ands	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80077a8:	4a14      	ldr	r2, [pc, #80]	@ (80077fc <HAL_GPIO_Init+0x514>)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80077ae:	4b13      	ldr	r3, [pc, #76]	@ (80077fc <HAL_GPIO_Init+0x514>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	43db      	mvns	r3, r3
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4013      	ands	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80077d2:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <HAL_GPIO_Init+0x514>)
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3301      	adds	r3, #1
 80077dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f47f ae13 	bne.w	8007414 <HAL_GPIO_Init+0x12c>
  }
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40010000 	.word	0x40010000
 80077fc:	40010400 	.word	0x40010400

08007800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800780c:	887b      	ldrh	r3, [r7, #2]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_GPIO_ReadPin+0x1c>
 8007812:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8007816:	4809      	ldr	r0, [pc, #36]	@ (800783c <HAL_GPIO_ReadPin+0x3c>)
 8007818:	f7fe faaa 	bl	8005d70 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	887b      	ldrh	r3, [r7, #2]
 8007822:	4013      	ands	r3, r2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8007828:	2301      	movs	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	e001      	b.n	8007832 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	08010aac 	.word	0x08010aac

08007840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
 800784c:	4613      	mov	r3, r2
 800784e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_GPIO_WritePin+0x20>
 8007856:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800785a:	480e      	ldr	r0, [pc, #56]	@ (8007894 <HAL_GPIO_WritePin+0x54>)
 800785c:	f7fe fa88 	bl	8005d70 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8007860:	787b      	ldrb	r3, [r7, #1]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_GPIO_WritePin+0x36>
 8007866:	787b      	ldrb	r3, [r7, #1]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d004      	beq.n	8007876 <HAL_GPIO_WritePin+0x36>
 800786c:	f240 11af 	movw	r1, #431	@ 0x1af
 8007870:	4808      	ldr	r0, [pc, #32]	@ (8007894 <HAL_GPIO_WritePin+0x54>)
 8007872:	f7fe fa7d 	bl	8005d70 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8007876:	787b      	ldrb	r3, [r7, #1]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800787c:	887a      	ldrh	r2, [r7, #2]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007882:	e002      	b.n	800788a <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007884:	887a      	ldrh	r2, [r7, #2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	08010aac 	.word	0x08010aac

08007898 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80078a4:	887b      	ldrh	r3, [r7, #2]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <HAL_GPIO_TogglePin+0x1c>
 80078aa:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 80078ae:	480a      	ldr	r0, [pc, #40]	@ (80078d8 <HAL_GPIO_TogglePin+0x40>)
 80078b0:	f7fe fa5e 	bl	8005d70 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80078ba:	887a      	ldrh	r2, [r7, #2]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4013      	ands	r3, r2
 80078c0:	041a      	lsls	r2, r3, #16
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	43d9      	mvns	r1, r3
 80078c6:	887b      	ldrh	r3, [r7, #2]
 80078c8:	400b      	ands	r3, r1
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	619a      	str	r2, [r3, #24]
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	08010aac 	.word	0x08010aac

080078dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80078e6:	4b08      	ldr	r3, [pc, #32]	@ (8007908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d006      	beq.n	8007900 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078f2:	4a05      	ldr	r2, [pc, #20]	@ (8007908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe f9ce 	bl	8005c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40010400 	.word	0x40010400

0800790c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e1f3      	b.n	8007d06 <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a8e      	ldr	r2, [pc, #568]	@ (8007b5c <HAL_LPTIM_Init+0x250>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d008      	beq.n	800793a <HAL_LPTIM_Init+0x2e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a8c      	ldr	r2, [pc, #560]	@ (8007b60 <HAL_LPTIM_Init+0x254>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <HAL_LPTIM_Init+0x2e>
 8007932:	21fc      	movs	r1, #252	@ 0xfc
 8007934:	488b      	ldr	r0, [pc, #556]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007936:	f7fe fa1b 	bl	8005d70 <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d007      	beq.n	8007952 <HAL_LPTIM_Init+0x46>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_LPTIM_Init+0x46>
 800794a:	21fe      	movs	r1, #254	@ 0xfe
 800794c:	4885      	ldr	r0, [pc, #532]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 800794e:	f7fe fa0f 	bl	8005d70 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d026      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007962:	d021      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800796c:	d01c      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007976:	d017      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007980:	d012      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800798a:	d00d      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007994:	d008      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800799e:	d003      	beq.n	80079a8 <HAL_LPTIM_Init+0x9c>
 80079a0:	21ff      	movs	r1, #255	@ 0xff
 80079a2:	4870      	ldr	r0, [pc, #448]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 80079a4:	f7fe f9e4 	bl	8005d70 <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d004      	beq.n	80079ba <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079b8:	d125      	bne.n	8007a06 <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00c      	beq.n	80079dc <HAL_LPTIM_Init+0xd0>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d008      	beq.n	80079dc <HAL_LPTIM_Init+0xd0>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d004      	beq.n	80079dc <HAL_LPTIM_Init+0xd0>
 80079d2:	f240 1103 	movw	r1, #259	@ 0x103
 80079d6:	4863      	ldr	r0, [pc, #396]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 80079d8:	f7fe f9ca 	bl	8005d70 <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d010      	beq.n	8007a06 <HAL_LPTIM_Init+0xfa>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d00c      	beq.n	8007a06 <HAL_LPTIM_Init+0xfa>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d008      	beq.n	8007a06 <HAL_LPTIM_Init+0xfa>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b18      	cmp	r3, #24
 80079fa:	d004      	beq.n	8007a06 <HAL_LPTIM_Init+0xfa>
 80079fc:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8007a00:	4858      	ldr	r0, [pc, #352]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007a02:	f7fe f9b5 	bl	8005d70 <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d02b      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d027      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a22:	d022      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a2c:	d01d      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a36:	d018      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a40:	d013      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a4a:	d00e      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a54:	d009      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8007a5e:	d004      	beq.n	8007a6a <HAL_LPTIM_Init+0x15e>
 8007a60:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8007a64:	483f      	ldr	r0, [pc, #252]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007a66:	f7fe f983 	bl	8005d70 <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d028      	beq.n	8007ac8 <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7e:	d00e      	beq.n	8007a9e <HAL_LPTIM_Init+0x192>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a88:	d009      	beq.n	8007a9e <HAL_LPTIM_Init+0x192>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a92:	d004      	beq.n	8007a9e <HAL_LPTIM_Init+0x192>
 8007a94:	f240 1109 	movw	r1, #265	@ 0x109
 8007a98:	4832      	ldr	r0, [pc, #200]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007a9a:	f7fe f969 	bl	8005d70 <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_LPTIM_Init+0x1bc>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	d00c      	beq.n	8007ac8 <HAL_LPTIM_Init+0x1bc>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	2b80      	cmp	r3, #128	@ 0x80
 8007ab4:	d008      	beq.n	8007ac8 <HAL_LPTIM_Init+0x1bc>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8007abc:	d004      	beq.n	8007ac8 <HAL_LPTIM_Init+0x1bc>
 8007abe:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8007ac2:	4828      	ldr	r0, [pc, #160]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007ac4:	f7fe f954 	bl	8005d70 <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ad0:	d008      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1d8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1d8>
 8007ada:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8007ade:	4821      	ldr	r0, [pc, #132]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007ae0:	f7fe f946 	bl	8005d70 <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <HAL_LPTIM_Init+0x1f4>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007af4:	d004      	beq.n	8007b00 <HAL_LPTIM_Init+0x1f4>
 8007af6:	f240 110d 	movw	r1, #269	@ 0x10d
 8007afa:	481a      	ldr	r0, [pc, #104]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007afc:	f7fe f938 	bl	8005d70 <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <HAL_LPTIM_Init+0x210>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b10:	d004      	beq.n	8007b1c <HAL_LPTIM_Init+0x210>
 8007b12:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8007b16:	4813      	ldr	r0, [pc, #76]	@ (8007b64 <HAL_LPTIM_Init+0x258>)
 8007b18:	f7fe f92a 	bl	8005d70 <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fd ff95 	bl	8005a60 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d00c      	beq.n	8007b68 <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b56:	d10b      	bne.n	8007b70 <HAL_LPTIM_Init+0x264>
 8007b58:	e006      	b.n	8007b68 <HAL_LPTIM_Init+0x25c>
 8007b5a:	bf00      	nop
 8007b5c:	40007c00 	.word	0x40007c00
 8007b60:	40009400 	.word	0x40009400
 8007b64:	08010ae8 	.word	0x08010ae8
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 031e 	bic.w	r3, r3, #30
 8007b6e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d005      	beq.n	8007b88 <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007b82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b86:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4b61      	ldr	r3, [pc, #388]	@ (8007d10 <HAL_LPTIM_Init+0x404>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b98:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007b9e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007ba4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007baa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d107      	bne.n	8007bca <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d004      	beq.n	8007bdc <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bda:	d107      	bne.n	8007bec <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007be4:	4313      	orrs	r3, r2
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00a      	beq.n	8007c0e <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c00:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007c06:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8007d14 <HAL_LPTIM_Init+0x408>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d141      	bne.n	8007ca4 <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a3b      	ldr	r2, [pc, #236]	@ (8007d14 <HAL_LPTIM_Init+0x408>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d107      	bne.n	8007c3a <HAL_LPTIM_Init+0x32e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01d      	beq.n	8007c6e <HAL_LPTIM_Init+0x362>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d019      	beq.n	8007c6e <HAL_LPTIM_Init+0x362>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a36      	ldr	r2, [pc, #216]	@ (8007d18 <HAL_LPTIM_Init+0x40c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d10f      	bne.n	8007c64 <HAL_LPTIM_Init+0x358>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <HAL_LPTIM_Init+0x362>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d00c      	beq.n	8007c6e <HAL_LPTIM_Init+0x362>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d008      	beq.n	8007c6e <HAL_LPTIM_Init+0x362>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d004      	beq.n	8007c6e <HAL_LPTIM_Init+0x362>
 8007c64:	f240 117f 	movw	r1, #383	@ 0x17f
 8007c68:	482c      	ldr	r0, [pc, #176]	@ (8007d1c <HAL_LPTIM_Init+0x410>)
 8007c6a:	f7fe f881 	bl	8005d70 <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a28      	ldr	r2, [pc, #160]	@ (8007d14 <HAL_LPTIM_Init+0x408>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d107      	bne.n	8007c88 <HAL_LPTIM_Init+0x37c>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_LPTIM_Init+0x386>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d004      	beq.n	8007c92 <HAL_LPTIM_Init+0x386>
 8007c88:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007c8c:	4823      	ldr	r0, [pc, #140]	@ (8007d1c <HAL_LPTIM_Init+0x410>)
 8007c8e:	f7fe f86f 	bl	8005d70 <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	621a      	str	r2, [r3, #32]
 8007ca2:	e02b      	b.n	8007cfc <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d14 <HAL_LPTIM_Init+0x408>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d107      	bne.n	8007cbe <HAL_LPTIM_Init+0x3b2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01d      	beq.n	8007cf2 <HAL_LPTIM_Init+0x3e6>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d019      	beq.n	8007cf2 <HAL_LPTIM_Init+0x3e6>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <HAL_LPTIM_Init+0x40c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d10f      	bne.n	8007ce8 <HAL_LPTIM_Init+0x3dc>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d010      	beq.n	8007cf2 <HAL_LPTIM_Init+0x3e6>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_LPTIM_Init+0x3e6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d008      	beq.n	8007cf2 <HAL_LPTIM_Init+0x3e6>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d004      	beq.n	8007cf2 <HAL_LPTIM_Init+0x3e6>
 8007ce8:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8007cec:	480b      	ldr	r0, [pc, #44]	@ (8007d1c <HAL_LPTIM_Init+0x410>)
 8007cee:	f7fe f83f 	bl	8005d70 <assert_failed>

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cfa:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	ff19f1fe 	.word	0xff19f1fe
 8007d14:	40007c00 	.word	0x40007c00
 8007d18:	40009400 	.word	0x40009400
 8007d1c:	08010ae8 	.word	0x08010ae8

08007d20 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t          tmpcfgr;

  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8007e2c <HAL_LPTIM_Encoder_Start+0x10c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_LPTIM_Encoder_Start+0x1e>
 8007d34:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 8007d38:	483d      	ldr	r0, [pc, #244]	@ (8007e30 <HAL_LPTIM_Encoder_Start+0x110>)
 8007d3a:	f7fe f819 	bl	8005d70 <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_LPTIM_Encoder_Start+0x2c>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d4a:	d304      	bcc.n	8007d56 <HAL_LPTIM_Encoder_Start+0x36>
 8007d4c:	f240 41cb 	movw	r1, #1227	@ 0x4cb
 8007d50:	4837      	ldr	r0, [pc, #220]	@ (8007e30 <HAL_LPTIM_Encoder_Start+0x110>)
 8007d52:	f7fe f80d 	bl	8005d70 <assert_failed>
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <HAL_LPTIM_Encoder_Start+0x48>
 8007d5e:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8007d62:	4833      	ldr	r0, [pc, #204]	@ (8007e30 <HAL_LPTIM_Encoder_Start+0x110>)
 8007d64:	f7fe f804 	bl	8005d70 <assert_failed>
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <HAL_LPTIM_Encoder_Start+0x5a>
 8007d70:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 8007d74:	482e      	ldr	r0, [pc, #184]	@ (8007e30 <HAL_LPTIM_Encoder_Start+0x110>)
 8007d76:	f7fd fffb 	bl	8005d70 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <HAL_LPTIM_Encoder_Start+0x7c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d008      	beq.n	8007d9c <HAL_LPTIM_Encoder_Start+0x7c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d004      	beq.n	8007d9c <HAL_LPTIM_Encoder_Start+0x7c>
 8007d92:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8007d96:	4826      	ldr	r0, [pc, #152]	@ (8007e30 <HAL_LPTIM_Encoder_Start+0x110>)
 8007d98:	f7fd ffea 	bl	8005d70 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0306 	bic.w	r3, r3, #6
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007dd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2210      	movs	r2, #16
 8007dec:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007df6:	2110      	movs	r1, #16
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f93d 	bl	8008078 <LPTIM_WaitForFlag>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d101      	bne.n	8007e08 <HAL_LPTIM_Encoder_Start+0xe8>
  {
    return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e00c      	b.n	8007e22 <HAL_LPTIM_Encoder_Start+0x102>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0204 	orr.w	r2, r2, #4
 8007e16:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40007c00 	.word	0x40007c00
 8007e30:	08010ae8 	.word	0x08010ae8

08007e34 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a13      	ldr	r2, [pc, #76]	@ (8007e90 <HAL_LPTIM_Encoder_Stop+0x5c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_LPTIM_Encoder_Stop+0x1c>
 8007e46:	f240 5103 	movw	r1, #1283	@ 0x503
 8007e4a:	4812      	ldr	r0, [pc, #72]	@ (8007e94 <HAL_LPTIM_Encoder_Stop+0x60>)
 8007e4c:	f7fd ff90 	bl	8005d70 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f93d 	bl	80080d8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8fb 	bl	800805a <HAL_LPTIM_GetState>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d101      	bne.n	8007e6e <HAL_LPTIM_Encoder_Stop+0x3a>
  {
    return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e00c      	b.n	8007e88 <HAL_LPTIM_Encoder_Stop+0x54>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007e7c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40007c00 	.word	0x40007c00
 8007e94:	08010ae8 	.word	0x08010ae8

08007e98 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d10d      	bne.n	8007eca <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d106      	bne.n	8007eca <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f882 	bl	8007fce <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d10d      	bne.n	8007ef4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d106      	bne.n	8007ef4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2202      	movs	r2, #2
 8007eec:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f877 	bl	8007fe2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d10d      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d106      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2204      	movs	r2, #4
 8007f16:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f86c 	bl	8007ff6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d10d      	bne.n	8007f48 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d106      	bne.n	8007f48 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2208      	movs	r2, #8
 8007f40:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f861 	bl	800800a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d10d      	bne.n	8007f72 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d106      	bne.n	8007f72 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2210      	movs	r2, #16
 8007f6a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f856 	bl	800801e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d10d      	bne.n	8007f9c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d106      	bne.n	8007f9c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2220      	movs	r2, #32
 8007f94:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f84b 	bl	8008032 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa6:	2b40      	cmp	r3, #64	@ 0x40
 8007fa8:	d10d      	bne.n	8007fc6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb4:	2b40      	cmp	r3, #64	@ 0x40
 8007fb6:	d106      	bne.n	8007fc6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2240      	movs	r2, #64	@ 0x40
 8007fbe:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f840 	bl	8008046 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008068:	b2db      	uxtb	r3, r3
}
 800806a:	4618      	mov	r0, r3
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008086:	4b12      	ldr	r3, [pc, #72]	@ (80080d0 <LPTIM_WaitForFlag+0x58>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a12      	ldr	r2, [pc, #72]	@ (80080d4 <LPTIM_WaitForFlag+0x5c>)
 800808c:	fba2 2303 	umull	r2, r3, r2, r3
 8008090:	0b9b      	lsrs	r3, r3, #14
 8008092:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	3b01      	subs	r3, #1
 80080a0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	4013      	ands	r3, r2
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d002      	beq.n	80080c2 <LPTIM_WaitForFlag+0x4a>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1ec      	bne.n	800809c <LPTIM_WaitForFlag+0x24>

  return result;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000014 	.word	0x20000014
 80080d4:	d1b71759 	.word	0xd1b71759

080080d8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08c      	sub	sp, #48	@ 0x30
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080e4:	f3ef 8310 	mrs	r3, PRIMASK
 80080e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080ea:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80080ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080ee:	2301      	movs	r3, #1
 80080f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f383 8810 	msr	PRIMASK, r3
}
 80080f8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a73      	ldr	r2, [pc, #460]	@ (80082cc <LPTIM_Disable+0x1f4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d003      	beq.n	800810c <LPTIM_Disable+0x34>
 8008104:	4a72      	ldr	r2, [pc, #456]	@ (80082d0 <LPTIM_Disable+0x1f8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d007      	beq.n	800811a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800810a:	e00d      	b.n	8008128 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800810c:	4b71      	ldr	r3, [pc, #452]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008112:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008116:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008118:	e006      	b.n	8008128 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800811a:	4b6e      	ldr	r3, [pc, #440]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008120:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008124:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008126:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a5d      	ldr	r2, [pc, #372]	@ (80082cc <LPTIM_Disable+0x1f4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <LPTIM_Disable+0x8a>
 800815a:	4a5d      	ldr	r2, [pc, #372]	@ (80082d0 <LPTIM_Disable+0x1f8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d00d      	beq.n	800817c <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008160:	e019      	b.n	8008196 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008162:	4b5c      	ldr	r3, [pc, #368]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008166:	4a5b      	ldr	r2, [pc, #364]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800816c:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800816e:	4b59      	ldr	r3, [pc, #356]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008172:	4a58      	ldr	r2, [pc, #352]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008178:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 800817a:	e00c      	b.n	8008196 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800817c:	4b55      	ldr	r3, [pc, #340]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800817e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008180:	4a54      	ldr	r2, [pc, #336]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008182:	f043 0320 	orr.w	r3, r3, #32
 8008186:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008188:	4b52      	ldr	r3, [pc, #328]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800818a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818c:	4a51      	ldr	r2, [pc, #324]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800818e:	f023 0320 	bic.w	r3, r3, #32
 8008192:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8008194:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <LPTIM_Disable+0xca>
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d075      	beq.n	800828e <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a49      	ldr	r2, [pc, #292]	@ (80082cc <LPTIM_Disable+0x1f4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <LPTIM_Disable+0xdc>
 80081ac:	4a48      	ldr	r2, [pc, #288]	@ (80082d0 <LPTIM_Disable+0x1f8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80081b2:	e011      	b.n	80081d8 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80081b4:	4b47      	ldr	r3, [pc, #284]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ba:	4a46      	ldr	r2, [pc, #280]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 80081bc:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80081c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80081c4:	e008      	b.n	80081d8 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80081c6:	4b43      	ldr	r3, [pc, #268]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081cc:	4a41      	ldr	r2, [pc, #260]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 80081ce:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80081d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80081d6:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01a      	beq.n	8008214 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f042 0201 	orr.w	r2, r2, #1
 80081ec:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80081f6:	2108      	movs	r1, #8
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff3d 	bl	8008078 <LPTIM_WaitForFlag>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b03      	cmp	r3, #3
 8008202:	d103      	bne.n	800820c <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2203      	movs	r2, #3
 8008208:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01a      	beq.n	8008250 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0201 	orr.w	r2, r2, #1
 8008228:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008232:	2110      	movs	r1, #16
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ff1f 	bl	8008078 <LPTIM_WaitForFlag>
 800823a:	4603      	mov	r3, r0
 800823c:	2b03      	cmp	r3, #3
 800823e:	d103      	bne.n	8008248 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2203      	movs	r2, #3
 8008244:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2210      	movs	r2, #16
 800824e:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1d      	ldr	r2, [pc, #116]	@ (80082cc <LPTIM_Disable+0x1f4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d003      	beq.n	8008262 <LPTIM_Disable+0x18a>
 800825a:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <LPTIM_Disable+0x1f8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00b      	beq.n	8008278 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008260:	e015      	b.n	800828e <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008262:	4b1c      	ldr	r3, [pc, #112]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008268:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800826c:	4919      	ldr	r1, [pc, #100]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	4313      	orrs	r3, r2
 8008272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8008276:	e00a      	b.n	800828e <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008278:	4b16      	ldr	r3, [pc, #88]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 800827a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800827e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008282:	4914      	ldr	r1, [pc, #80]	@ (80082d4 <LPTIM_Disable+0x1fc>)
 8008284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800828c:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a4:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6a3a      	ldr	r2, [r7, #32]
 80082ac:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	621a      	str	r2, [r3, #32]
 80082b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f383 8810 	msr	PRIMASK, r3
}
 80082c0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80082c2:	bf00      	nop
 80082c4:	3730      	adds	r7, #48	@ 0x30
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40007c00 	.word	0x40007c00
 80082d0:	40009400 	.word	0x40009400
 80082d4:	40021000 	.word	0x40021000

080082d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80082dc:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40007000 	.word	0x40007000

080082f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008302:	d007      	beq.n	8008314 <HAL_PWREx_ControlVoltageScaling+0x20>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800830a:	d003      	beq.n	8008314 <HAL_PWREx_ControlVoltageScaling+0x20>
 800830c:	21a7      	movs	r1, #167	@ 0xa7
 800830e:	4826      	ldr	r0, [pc, #152]	@ (80083a8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8008310:	f7fd fd2e 	bl	8005d70 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800831a:	d130      	bne.n	800837e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800831c:	4b23      	ldr	r3, [pc, #140]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008328:	d038      	beq.n	800839c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800832a:	4b20      	ldr	r3, [pc, #128]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008332:	4a1e      	ldr	r2, [pc, #120]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008338:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800833a:	4b1d      	ldr	r3, [pc, #116]	@ (80083b0 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2232      	movs	r2, #50	@ 0x32
 8008340:	fb02 f303 	mul.w	r3, r2, r3
 8008344:	4a1b      	ldr	r2, [pc, #108]	@ (80083b4 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	0c9b      	lsrs	r3, r3, #18
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008350:	e002      	b.n	8008358 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b01      	subs	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008358:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008364:	d102      	bne.n	800836c <HAL_PWREx_ControlVoltageScaling+0x78>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f2      	bne.n	8008352 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800836c:	4b0f      	ldr	r3, [pc, #60]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008378:	d110      	bne.n	800839c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e00f      	b.n	800839e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800837e:	4b0b      	ldr	r3, [pc, #44]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800838a:	d007      	beq.n	800839c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800838c:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008394:	4a05      	ldr	r2, [pc, #20]	@ (80083ac <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800839a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	08010b24 	.word	0x08010b24
 80083ac:	40007000 	.word	0x40007000
 80083b0:	20000014 	.word	0x20000014
 80083b4:	431bde83 	.word	0x431bde83

080083b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d102      	bne.n	80083cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f000 bcef 	b.w	8008daa <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <HAL_RCC_OscConfig+0x2e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b1f      	cmp	r3, #31
 80083da:	d904      	bls.n	80083e6 <HAL_RCC_OscConfig+0x2e>
 80083dc:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80083e0:	489a      	ldr	r0, [pc, #616]	@ (800864c <HAL_RCC_OscConfig+0x294>)
 80083e2:	f7fd fcc5 	bl	8005d70 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083e6:	4b9a      	ldr	r3, [pc, #616]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083f0:	4b97      	ldr	r3, [pc, #604]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 813d 	beq.w	8008682 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <HAL_RCC_OscConfig+0x6a>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d004      	beq.n	8008422 <HAL_RCC_OscConfig+0x6a>
 8008418:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800841c:	488b      	ldr	r0, [pc, #556]	@ (800864c <HAL_RCC_OscConfig+0x294>)
 800841e:	f7fd fca7 	bl	8005d70 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	2bff      	cmp	r3, #255	@ 0xff
 8008428:	d904      	bls.n	8008434 <HAL_RCC_OscConfig+0x7c>
 800842a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800842e:	4887      	ldr	r0, [pc, #540]	@ (800864c <HAL_RCC_OscConfig+0x294>)
 8008430:	f7fd fc9e 	bl	8005d70 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d030      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	2b10      	cmp	r3, #16
 8008442:	d02c      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	2b20      	cmp	r3, #32
 800844a:	d028      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	2b30      	cmp	r3, #48	@ 0x30
 8008452:	d024      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	2b40      	cmp	r3, #64	@ 0x40
 800845a:	d020      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	2b50      	cmp	r3, #80	@ 0x50
 8008462:	d01c      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	2b60      	cmp	r3, #96	@ 0x60
 800846a:	d018      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	2b70      	cmp	r3, #112	@ 0x70
 8008472:	d014      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	2b80      	cmp	r3, #128	@ 0x80
 800847a:	d010      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	2b90      	cmp	r3, #144	@ 0x90
 8008482:	d00c      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	2ba0      	cmp	r3, #160	@ 0xa0
 800848a:	d008      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	2bb0      	cmp	r3, #176	@ 0xb0
 8008492:	d004      	beq.n	800849e <HAL_RCC_OscConfig+0xe6>
 8008494:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8008498:	486c      	ldr	r0, [pc, #432]	@ (800864c <HAL_RCC_OscConfig+0x294>)
 800849a:	f7fd fc69 	bl	8005d70 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HAL_RCC_OscConfig+0xfc>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b0c      	cmp	r3, #12
 80084a8:	f040 808e 	bne.w	80085c8 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	f040 808a 	bne.w	80085c8 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084b4:	4b66      	ldr	r3, [pc, #408]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d006      	beq.n	80084ce <HAL_RCC_OscConfig+0x116>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f000 bc6e 	b.w	8008daa <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1a      	ldr	r2, [r3, #32]
 80084d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <HAL_RCC_OscConfig+0x130>
 80084de:	4b5c      	ldr	r3, [pc, #368]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084e6:	e005      	b.n	80084f4 <HAL_RCC_OscConfig+0x13c>
 80084e8:	4b59      	ldr	r3, [pc, #356]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80084ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084ee:	091b      	lsrs	r3, r3, #4
 80084f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d224      	bcs.n	8008542 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fec1 	bl	8009284 <RCC_SetFlashLatencyFromMSIRange>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	f000 bc4e 	b.w	8008daa <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800850e:	4b50      	ldr	r3, [pc, #320]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a4f      	ldr	r2, [pc, #316]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	4b4d      	ldr	r3, [pc, #308]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	494a      	ldr	r1, [pc, #296]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008528:	4313      	orrs	r3, r2
 800852a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800852c:	4b48      	ldr	r3, [pc, #288]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	4945      	ldr	r1, [pc, #276]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 800853c:	4313      	orrs	r3, r2
 800853e:	604b      	str	r3, [r1, #4]
 8008540:	e026      	b.n	8008590 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008542:	4b43      	ldr	r3, [pc, #268]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a42      	ldr	r2, [pc, #264]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008548:	f043 0308 	orr.w	r3, r3, #8
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	4b40      	ldr	r3, [pc, #256]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	493d      	ldr	r1, [pc, #244]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 800855c:	4313      	orrs	r3, r2
 800855e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008560:	4b3b      	ldr	r3, [pc, #236]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	021b      	lsls	r3, r3, #8
 800856e:	4938      	ldr	r1, [pc, #224]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008570:	4313      	orrs	r3, r2
 8008572:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fe80 	bl	8009284 <RCC_SetFlashLatencyFromMSIRange>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	f000 bc0d 	b.w	8008daa <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008590:	f000 fdb4 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 8008594:	4602      	mov	r2, r0
 8008596:	4b2e      	ldr	r3, [pc, #184]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	492c      	ldr	r1, [pc, #176]	@ (8008654 <HAL_RCC_OscConfig+0x29c>)
 80085a2:	5ccb      	ldrb	r3, [r1, r3]
 80085a4:	f003 031f 	and.w	r3, r3, #31
 80085a8:	fa22 f303 	lsr.w	r3, r2, r3
 80085ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008658 <HAL_RCC_OscConfig+0x2a0>)
 80085ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80085b0:	4b2a      	ldr	r3, [pc, #168]	@ (800865c <HAL_RCC_OscConfig+0x2a4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe f9b5 	bl	8006924 <HAL_InitTick>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d05d      	beq.n	8008680 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	e3f0      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d032      	beq.n	8008636 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80085d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085dc:	f7fe f9f2 	bl	80069c4 <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085e4:	f7fe f9ee 	bl	80069c4 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e3d9      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085f6:	4b16      	ldr	r3, [pc, #88]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0f0      	beq.n	80085e4 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008602:	4b13      	ldr	r3, [pc, #76]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a12      	ldr	r2, [pc, #72]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008608:	f043 0308 	orr.w	r3, r3, #8
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	4b10      	ldr	r3, [pc, #64]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	490d      	ldr	r1, [pc, #52]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 800861c:	4313      	orrs	r3, r2
 800861e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008620:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	4908      	ldr	r1, [pc, #32]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008630:	4313      	orrs	r3, r2
 8008632:	604b      	str	r3, [r1, #4]
 8008634:	e025      	b.n	8008682 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008636:	4b06      	ldr	r3, [pc, #24]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a05      	ldr	r2, [pc, #20]	@ (8008650 <HAL_RCC_OscConfig+0x298>)
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008642:	f7fe f9bf 	bl	80069c4 <HAL_GetTick>
 8008646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008648:	e013      	b.n	8008672 <HAL_RCC_OscConfig+0x2ba>
 800864a:	bf00      	nop
 800864c:	08010b60 	.word	0x08010b60
 8008650:	40021000 	.word	0x40021000
 8008654:	08010d3c 	.word	0x08010d3c
 8008658:	20000014 	.word	0x20000014
 800865c:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008660:	f7fe f9b0 	bl	80069c4 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e39b      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008672:	4b97      	ldr	r3, [pc, #604]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x2a8>
 800867e:	e000      	b.n	8008682 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008680:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d07e      	beq.n	800878c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <HAL_RCC_OscConfig+0x2fc>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800869e:	d009      	beq.n	80086b4 <HAL_RCC_OscConfig+0x2fc>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086a8:	d004      	beq.n	80086b4 <HAL_RCC_OscConfig+0x2fc>
 80086aa:	f240 2119 	movw	r1, #537	@ 0x219
 80086ae:	4889      	ldr	r0, [pc, #548]	@ (80088d4 <HAL_RCC_OscConfig+0x51c>)
 80086b0:	f7fd fb5e 	bl	8005d70 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d005      	beq.n	80086c6 <HAL_RCC_OscConfig+0x30e>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b0c      	cmp	r3, #12
 80086be:	d10e      	bne.n	80086de <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d10b      	bne.n	80086de <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c6:	4b82      	ldr	r3, [pc, #520]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d05b      	beq.n	800878a <HAL_RCC_OscConfig+0x3d2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d157      	bne.n	800878a <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e365      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086e6:	d106      	bne.n	80086f6 <HAL_RCC_OscConfig+0x33e>
 80086e8:	4b79      	ldr	r3, [pc, #484]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a78      	ldr	r2, [pc, #480]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80086ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	e01d      	b.n	8008732 <HAL_RCC_OscConfig+0x37a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086fe:	d10c      	bne.n	800871a <HAL_RCC_OscConfig+0x362>
 8008700:	4b73      	ldr	r3, [pc, #460]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a72      	ldr	r2, [pc, #456]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008706:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	4b70      	ldr	r3, [pc, #448]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a6f      	ldr	r2, [pc, #444]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	e00b      	b.n	8008732 <HAL_RCC_OscConfig+0x37a>
 800871a:	4b6d      	ldr	r3, [pc, #436]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a6c      	ldr	r2, [pc, #432]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	4b6a      	ldr	r3, [pc, #424]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a69      	ldr	r2, [pc, #420]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 800872c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008730:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d013      	beq.n	8008762 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873a:	f7fe f943 	bl	80069c4 <HAL_GetTick>
 800873e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008742:	f7fe f93f 	bl	80069c4 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b64      	cmp	r3, #100	@ 0x64
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e32a      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008754:	4b5e      	ldr	r3, [pc, #376]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0f0      	beq.n	8008742 <HAL_RCC_OscConfig+0x38a>
 8008760:	e014      	b.n	800878c <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008762:	f7fe f92f 	bl	80069c4 <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800876a:	f7fe f92b 	bl	80069c4 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b64      	cmp	r3, #100	@ 0x64
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e316      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800877c:	4b54      	ldr	r3, [pc, #336]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1f0      	bne.n	800876a <HAL_RCC_OscConfig+0x3b2>
 8008788:	e000      	b.n	800878c <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800878a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d077      	beq.n	8008888 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_RCC_OscConfig+0x3fc>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a8:	d004      	beq.n	80087b4 <HAL_RCC_OscConfig+0x3fc>
 80087aa:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80087ae:	4849      	ldr	r0, [pc, #292]	@ (80088d4 <HAL_RCC_OscConfig+0x51c>)
 80087b0:	f7fd fade 	bl	8005d70 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b1f      	cmp	r3, #31
 80087ba:	d904      	bls.n	80087c6 <HAL_RCC_OscConfig+0x40e>
 80087bc:	f240 214d 	movw	r1, #589	@ 0x24d
 80087c0:	4844      	ldr	r0, [pc, #272]	@ (80088d4 <HAL_RCC_OscConfig+0x51c>)
 80087c2:	f7fd fad5 	bl	8005d70 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d005      	beq.n	80087d8 <HAL_RCC_OscConfig+0x420>
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b0c      	cmp	r3, #12
 80087d0:	d119      	bne.n	8008806 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d116      	bne.n	8008806 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087d8:	4b3d      	ldr	r3, [pc, #244]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_RCC_OscConfig+0x438>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e2dc      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f0:	4b37      	ldr	r3, [pc, #220]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	061b      	lsls	r3, r3, #24
 80087fe:	4934      	ldr	r1, [pc, #208]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008800:	4313      	orrs	r3, r2
 8008802:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008804:	e040      	b.n	8008888 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d023      	beq.n	8008856 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800880e:	4b30      	ldr	r3, [pc, #192]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a2f      	ldr	r2, [pc, #188]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881a:	f7fe f8d3 	bl	80069c4 <HAL_GetTick>
 800881e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008822:	f7fe f8cf 	bl	80069c4 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e2ba      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008834:	4b26      	ldr	r3, [pc, #152]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0f0      	beq.n	8008822 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008840:	4b23      	ldr	r3, [pc, #140]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	061b      	lsls	r3, r3, #24
 800884e:	4920      	ldr	r1, [pc, #128]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008850:	4313      	orrs	r3, r2
 8008852:	604b      	str	r3, [r1, #4]
 8008854:	e018      	b.n	8008888 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008856:	4b1e      	ldr	r3, [pc, #120]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1d      	ldr	r2, [pc, #116]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 800885c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008862:	f7fe f8af 	bl	80069c4 <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800886a:	f7fe f8ab 	bl	80069c4 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e296      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800887c:	4b14      	ldr	r3, [pc, #80]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f0      	bne.n	800886a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b00      	cmp	r3, #0
 8008892:	d04e      	beq.n	8008932 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_RCC_OscConfig+0x4f6>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d004      	beq.n	80088ae <HAL_RCC_OscConfig+0x4f6>
 80088a4:	f240 218d 	movw	r1, #653	@ 0x28d
 80088a8:	480a      	ldr	r0, [pc, #40]	@ (80088d4 <HAL_RCC_OscConfig+0x51c>)
 80088aa:	f7fd fa61 	bl	8005d70 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d021      	beq.n	80088fa <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088b6:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80088b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088bc:	4a04      	ldr	r2, [pc, #16]	@ (80088d0 <HAL_RCC_OscConfig+0x518>)
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c6:	f7fe f87d 	bl	80069c4 <HAL_GetTick>
 80088ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088cc:	e00d      	b.n	80088ea <HAL_RCC_OscConfig+0x532>
 80088ce:	bf00      	nop
 80088d0:	40021000 	.word	0x40021000
 80088d4:	08010b60 	.word	0x08010b60
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088d8:	f7fe f874 	bl	80069c4 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d901      	bls.n	80088ea <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e25f      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088ea:	4b66      	ldr	r3, [pc, #408]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 80088ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0ef      	beq.n	80088d8 <HAL_RCC_OscConfig+0x520>
 80088f8:	e01b      	b.n	8008932 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088fa:	4b62      	ldr	r3, [pc, #392]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 80088fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008900:	4a60      	ldr	r2, [pc, #384]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008902:	f023 0301 	bic.w	r3, r3, #1
 8008906:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890a:	f7fe f85b 	bl	80069c4 <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008910:	e008      	b.n	8008924 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008912:	f7fe f857 	bl	80069c4 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e242      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008924:	4b57      	ldr	r3, [pc, #348]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1ef      	bne.n	8008912 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80b8 	beq.w	8008ab0 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008940:	2300      	movs	r3, #0
 8008942:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00c      	beq.n	8008966 <HAL_RCC_OscConfig+0x5ae>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d008      	beq.n	8008966 <HAL_RCC_OscConfig+0x5ae>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b05      	cmp	r3, #5
 800895a:	d004      	beq.n	8008966 <HAL_RCC_OscConfig+0x5ae>
 800895c:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8008960:	4849      	ldr	r0, [pc, #292]	@ (8008a88 <HAL_RCC_OscConfig+0x6d0>)
 8008962:	f7fd fa05 	bl	8005d70 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008966:	4b47      	ldr	r3, [pc, #284]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10d      	bne.n	800898e <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008972:	4b44      	ldr	r3, [pc, #272]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008976:	4a43      	ldr	r2, [pc, #268]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800897c:	6593      	str	r3, [r2, #88]	@ 0x58
 800897e:	4b41      	ldr	r3, [pc, #260]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008986:	60bb      	str	r3, [r7, #8]
 8008988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800898a:	2301      	movs	r3, #1
 800898c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800898e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a8c <HAL_RCC_OscConfig+0x6d4>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008996:	2b00      	cmp	r3, #0
 8008998:	d118      	bne.n	80089cc <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800899a:	4b3c      	ldr	r3, [pc, #240]	@ (8008a8c <HAL_RCC_OscConfig+0x6d4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a3b      	ldr	r2, [pc, #236]	@ (8008a8c <HAL_RCC_OscConfig+0x6d4>)
 80089a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089a6:	f7fe f80d 	bl	80069c4 <HAL_GetTick>
 80089aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089ac:	e008      	b.n	80089c0 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ae:	f7fe f809 	bl	80069c4 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d901      	bls.n	80089c0 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e1f4      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c0:	4b32      	ldr	r3, [pc, #200]	@ (8008a8c <HAL_RCC_OscConfig+0x6d4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0f0      	beq.n	80089ae <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d108      	bne.n	80089e6 <HAL_RCC_OscConfig+0x62e>
 80089d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 80089d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089da:	4a2a      	ldr	r2, [pc, #168]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089e4:	e024      	b.n	8008a30 <HAL_RCC_OscConfig+0x678>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	2b05      	cmp	r3, #5
 80089ec:	d110      	bne.n	8008a10 <HAL_RCC_OscConfig+0x658>
 80089ee:	4b25      	ldr	r3, [pc, #148]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 80089f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f4:	4a23      	ldr	r2, [pc, #140]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 80089f6:	f043 0304 	orr.w	r3, r3, #4
 80089fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089fe:	4b21      	ldr	r3, [pc, #132]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a04:	4a1f      	ldr	r2, [pc, #124]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a0e:	e00f      	b.n	8008a30 <HAL_RCC_OscConfig+0x678>
 8008a10:	4b1c      	ldr	r3, [pc, #112]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a16:	4a1b      	ldr	r2, [pc, #108]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a20:	4b18      	ldr	r3, [pc, #96]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a26:	4a17      	ldr	r2, [pc, #92]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a28:	f023 0304 	bic.w	r3, r3, #4
 8008a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d016      	beq.n	8008a66 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a38:	f7fd ffc4 	bl	80069c4 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a3e:	e00a      	b.n	8008a56 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a40:	f7fd ffc0 	bl	80069c4 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e1a9      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a56:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <HAL_RCC_OscConfig+0x6cc>)
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0ed      	beq.n	8008a40 <HAL_RCC_OscConfig+0x688>
 8008a64:	e01b      	b.n	8008a9e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a66:	f7fd ffad 	bl	80069c4 <HAL_GetTick>
 8008a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a6c:	e010      	b.n	8008a90 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6e:	f7fd ffa9 	bl	80069c4 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d907      	bls.n	8008a90 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e192      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
 8008a84:	40021000 	.word	0x40021000
 8008a88:	08010b60 	.word	0x08010b60
 8008a8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a90:	4b98      	ldr	r3, [pc, #608]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e7      	bne.n	8008a6e <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a9e:	7ffb      	ldrb	r3, [r7, #31]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa4:	4b93      	ldr	r3, [pc, #588]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa8:	4a92      	ldr	r2, [pc, #584]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00c      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x71a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d008      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x71a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x71a>
 8008ac8:	f240 316e 	movw	r1, #878	@ 0x36e
 8008acc:	488a      	ldr	r0, [pc, #552]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008ace:	f7fd f94f 	bl	8005d70 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8166 	beq.w	8008da8 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f040 813c 	bne.w	8008d5e <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d010      	beq.n	8008b10 <HAL_RCC_OscConfig+0x758>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d00c      	beq.n	8008b10 <HAL_RCC_OscConfig+0x758>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d008      	beq.n	8008b10 <HAL_RCC_OscConfig+0x758>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d004      	beq.n	8008b10 <HAL_RCC_OscConfig+0x758>
 8008b06:	f240 3176 	movw	r1, #886	@ 0x376
 8008b0a:	487b      	ldr	r0, [pc, #492]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008b0c:	f7fd f930 	bl	8005d70 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <HAL_RCC_OscConfig+0x768>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d904      	bls.n	8008b2a <HAL_RCC_OscConfig+0x772>
 8008b20:	f240 3177 	movw	r1, #887	@ 0x377
 8008b24:	4874      	ldr	r0, [pc, #464]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008b26:	f7fd f923 	bl	8005d70 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2e:	2b07      	cmp	r3, #7
 8008b30:	d903      	bls.n	8008b3a <HAL_RCC_OscConfig+0x782>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b36:	2b56      	cmp	r3, #86	@ 0x56
 8008b38:	d904      	bls.n	8008b44 <HAL_RCC_OscConfig+0x78c>
 8008b3a:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8008b3e:	486e      	ldr	r0, [pc, #440]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008b40:	f7fd f916 	bl	8005d70 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b48:	2b07      	cmp	r3, #7
 8008b4a:	d008      	beq.n	8008b5e <HAL_RCC_OscConfig+0x7a6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b50:	2b11      	cmp	r3, #17
 8008b52:	d004      	beq.n	8008b5e <HAL_RCC_OscConfig+0x7a6>
 8008b54:	f240 317a 	movw	r1, #890	@ 0x37a
 8008b58:	4867      	ldr	r0, [pc, #412]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008b5a:	f7fd f909 	bl	8005d70 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d010      	beq.n	8008b88 <HAL_RCC_OscConfig+0x7d0>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d00c      	beq.n	8008b88 <HAL_RCC_OscConfig+0x7d0>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b72:	2b06      	cmp	r3, #6
 8008b74:	d008      	beq.n	8008b88 <HAL_RCC_OscConfig+0x7d0>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d004      	beq.n	8008b88 <HAL_RCC_OscConfig+0x7d0>
 8008b7e:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8008b82:	485d      	ldr	r0, [pc, #372]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008b84:	f7fd f8f4 	bl	8005d70 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d010      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x7fa>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d00c      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x7fa>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9c:	2b06      	cmp	r3, #6
 8008b9e:	d008      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x7fa>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d004      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x7fa>
 8008ba8:	f240 317d 	movw	r1, #893	@ 0x37d
 8008bac:	4852      	ldr	r0, [pc, #328]	@ (8008cf8 <HAL_RCC_OscConfig+0x940>)
 8008bae:	f7fd f8df 	bl	8005d70 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008bb2:	4b50      	ldr	r3, [pc, #320]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f003 0203 	and.w	r2, r3, #3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d130      	bne.n	8008c28 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d127      	bne.n	8008c28 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d11f      	bne.n	8008c28 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008bf2:	2a07      	cmp	r2, #7
 8008bf4:	bf14      	ite	ne
 8008bf6:	2201      	movne	r2, #1
 8008bf8:	2200      	moveq	r2, #0
 8008bfa:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d113      	bne.n	8008c28 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d109      	bne.n	8008c28 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1e:	085b      	lsrs	r3, r3, #1
 8008c20:	3b01      	subs	r3, #1
 8008c22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d074      	beq.n	8008d12 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	2b0c      	cmp	r3, #12
 8008c2c:	d06f      	beq.n	8008d0e <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c2e:	4b31      	ldr	r3, [pc, #196]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e0af      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a29      	ldr	r2, [pc, #164]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008c50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c56:	f7fd feb5 	bl	80069c4 <HAL_GetTick>
 8008c5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c5c:	e008      	b.n	8008c70 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c5e:	f7fd feb1 	bl	80069c4 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e09c      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c70:	4b20      	ldr	r3, [pc, #128]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f0      	bne.n	8008c5e <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	4b1e      	ldr	r3, [pc, #120]	@ (8008cfc <HAL_RCC_OscConfig+0x944>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c8c:	3a01      	subs	r2, #1
 8008c8e:	0112      	lsls	r2, r2, #4
 8008c90:	4311      	orrs	r1, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c96:	0212      	lsls	r2, r2, #8
 8008c98:	4311      	orrs	r1, r2
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c9e:	0852      	lsrs	r2, r2, #1
 8008ca0:	3a01      	subs	r2, #1
 8008ca2:	0552      	lsls	r2, r2, #21
 8008ca4:	4311      	orrs	r1, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008caa:	0852      	lsrs	r2, r2, #1
 8008cac:	3a01      	subs	r2, #1
 8008cae:	0652      	lsls	r2, r2, #25
 8008cb0:	4311      	orrs	r1, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008cb6:	0912      	lsrs	r2, r2, #4
 8008cb8:	0452      	lsls	r2, r2, #17
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	490d      	ldr	r1, [pc, #52]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008cc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ccc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cce:	4b09      	ldr	r3, [pc, #36]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	4a08      	ldr	r2, [pc, #32]	@ (8008cf4 <HAL_RCC_OscConfig+0x93c>)
 8008cd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cd8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cda:	f7fd fe73 	bl	80069c4 <HAL_GetTick>
 8008cde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce0:	e00e      	b.n	8008d00 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ce2:	f7fd fe6f 	bl	80069c4 <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d907      	bls.n	8008d00 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e05a      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	08010b60 	.word	0x08010b60
 8008cfc:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d00:	4b2c      	ldr	r3, [pc, #176]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0ea      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d0c:	e04c      	b.n	8008da8 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e04b      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d12:	4b28      	ldr	r3, [pc, #160]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d144      	bne.n	8008da8 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d1e:	4b25      	ldr	r3, [pc, #148]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a24      	ldr	r2, [pc, #144]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d28:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d2a:	4b22      	ldr	r3, [pc, #136]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	4a21      	ldr	r2, [pc, #132]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d34:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d36:	f7fd fe45 	bl	80069c4 <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d3e:	f7fd fe41 	bl	80069c4 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e02c      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d50:	4b18      	ldr	r3, [pc, #96]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x986>
 8008d5c:	e024      	b.n	8008da8 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b0c      	cmp	r3, #12
 8008d62:	d01f      	beq.n	8008da4 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d64:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a12      	ldr	r2, [pc, #72]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d70:	f7fd fe28 	bl	80069c4 <HAL_GetTick>
 8008d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d78:	f7fd fe24 	bl	80069c4 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e00f      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008d96:	4b07      	ldr	r3, [pc, #28]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	4906      	ldr	r1, [pc, #24]	@ (8008db4 <HAL_RCC_OscConfig+0x9fc>)
 8008d9c:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <HAL_RCC_OscConfig+0xa00>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	60cb      	str	r3, [r1, #12]
 8008da2:	e001      	b.n	8008da8 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40021000 	.word	0x40021000
 8008db8:	feeefffc 	.word	0xfeeefffc

08008dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e186      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x24>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b0f      	cmp	r3, #15
 8008dde:	d904      	bls.n	8008dea <HAL_RCC_ClockConfig+0x2e>
 8008de0:	f240 4159 	movw	r1, #1113	@ 0x459
 8008de4:	4882      	ldr	r0, [pc, #520]	@ (8008ff0 <HAL_RCC_ClockConfig+0x234>)
 8008de6:	f7fc ffc3 	bl	8005d70 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d010      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x56>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d00d      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x56>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d00a      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x56>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d007      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x56>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d004      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x56>
 8008e08:	f240 415a 	movw	r1, #1114	@ 0x45a
 8008e0c:	4878      	ldr	r0, [pc, #480]	@ (8008ff0 <HAL_RCC_ClockConfig+0x234>)
 8008e0e:	f7fc ffaf 	bl	8005d70 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e12:	4b78      	ldr	r3, [pc, #480]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d910      	bls.n	8008e42 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e20:	4b74      	ldr	r3, [pc, #464]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f023 0207 	bic.w	r2, r3, #7
 8008e28:	4972      	ldr	r1, [pc, #456]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e30:	4b70      	ldr	r3, [pc, #448]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d001      	beq.n	8008e42 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e14d      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d039      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d024      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	2b80      	cmp	r3, #128	@ 0x80
 8008e5c:	d020      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2b90      	cmp	r3, #144	@ 0x90
 8008e64:	d01c      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8008e6c:	d018      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2bb0      	cmp	r3, #176	@ 0xb0
 8008e74:	d014      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e7c:	d010      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2bd0      	cmp	r3, #208	@ 0xd0
 8008e84:	d00c      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	2be0      	cmp	r3, #224	@ 0xe0
 8008e8c:	d008      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e94:	d004      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xe4>
 8008e96:	f240 4172 	movw	r1, #1138	@ 0x472
 8008e9a:	4855      	ldr	r0, [pc, #340]	@ (8008ff0 <HAL_RCC_ClockConfig+0x234>)
 8008e9c:	f7fc ff68 	bl	8005d70 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	4b54      	ldr	r3, [pc, #336]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d908      	bls.n	8008ec2 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eb0:	4b51      	ldr	r3, [pc, #324]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	494e      	ldr	r1, [pc, #312]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d061      	beq.n	8008f92 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d010      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x13c>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d00c      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x13c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d008      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x13c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d004      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x13c>
 8008eee:	f240 417d 	movw	r1, #1149	@ 0x47d
 8008ef2:	483f      	ldr	r0, [pc, #252]	@ (8008ff0 <HAL_RCC_ClockConfig+0x234>)
 8008ef4:	f7fc ff3c 	bl	8005d70 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d107      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f00:	4b3d      	ldr	r3, [pc, #244]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d121      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0e6      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d107      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f18:	4b37      	ldr	r3, [pc, #220]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d115      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0da      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f30:	4b31      	ldr	r3, [pc, #196]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d109      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0ce      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f40:	4b2d      	ldr	r3, [pc, #180]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e0c6      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f50:	4b29      	ldr	r3, [pc, #164]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f023 0203 	bic.w	r2, r3, #3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4926      	ldr	r1, [pc, #152]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f62:	f7fd fd2f 	bl	80069c4 <HAL_GetTick>
 8008f66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f68:	e00a      	b.n	8008f80 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f6a:	f7fd fd2b 	bl	80069c4 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d901      	bls.n	8008f80 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e0ae      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 020c 	and.w	r2, r3, #12
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d1eb      	bne.n	8008f6a <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d010      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	4b15      	ldr	r3, [pc, #84]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d208      	bcs.n	8008fc0 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fae:	4b12      	ldr	r3, [pc, #72]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	490f      	ldr	r1, [pc, #60]	@ (8008ff8 <HAL_RCC_ClockConfig+0x23c>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0307 	and.w	r3, r3, #7
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d216      	bcs.n	8008ffc <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fce:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f023 0207 	bic.w	r2, r3, #7
 8008fd6:	4907      	ldr	r1, [pc, #28]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fde:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <HAL_RCC_ClockConfig+0x238>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d007      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e076      	b.n	80090de <HAL_RCC_ClockConfig+0x322>
 8008ff0:	08010b60 	.word	0x08010b60
 8008ff4:	40022000 	.word	0x40022000
 8008ff8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d025      	beq.n	8009054 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d018      	beq.n	8009042 <HAL_RCC_ClockConfig+0x286>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009018:	d013      	beq.n	8009042 <HAL_RCC_ClockConfig+0x286>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009022:	d00e      	beq.n	8009042 <HAL_RCC_ClockConfig+0x286>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800902c:	d009      	beq.n	8009042 <HAL_RCC_ClockConfig+0x286>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009036:	d004      	beq.n	8009042 <HAL_RCC_ClockConfig+0x286>
 8009038:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 800903c:	482a      	ldr	r0, [pc, #168]	@ (80090e8 <HAL_RCC_ClockConfig+0x32c>)
 800903e:	f7fc fe97 	bl	8005d70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009042:	4b2a      	ldr	r3, [pc, #168]	@ (80090ec <HAL_RCC_ClockConfig+0x330>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	4927      	ldr	r1, [pc, #156]	@ (80090ec <HAL_RCC_ClockConfig+0x330>)
 8009050:	4313      	orrs	r3, r2
 8009052:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d026      	beq.n	80090ae <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d018      	beq.n	800909a <HAL_RCC_ClockConfig+0x2de>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009070:	d013      	beq.n	800909a <HAL_RCC_ClockConfig+0x2de>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800907a:	d00e      	beq.n	800909a <HAL_RCC_ClockConfig+0x2de>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009084:	d009      	beq.n	800909a <HAL_RCC_ClockConfig+0x2de>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800908e:	d004      	beq.n	800909a <HAL_RCC_ClockConfig+0x2de>
 8009090:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8009094:	4814      	ldr	r0, [pc, #80]	@ (80090e8 <HAL_RCC_ClockConfig+0x32c>)
 8009096:	f7fc fe6b 	bl	8005d70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800909a:	4b14      	ldr	r3, [pc, #80]	@ (80090ec <HAL_RCC_ClockConfig+0x330>)
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	4910      	ldr	r1, [pc, #64]	@ (80090ec <HAL_RCC_ClockConfig+0x330>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090ae:	f000 f825 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <HAL_RCC_ClockConfig+0x330>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	490c      	ldr	r1, [pc, #48]	@ (80090f0 <HAL_RCC_ClockConfig+0x334>)
 80090c0:	5ccb      	ldrb	r3, [r1, r3]
 80090c2:	f003 031f 	and.w	r3, r3, #31
 80090c6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ca:	4a0a      	ldr	r2, [pc, #40]	@ (80090f4 <HAL_RCC_ClockConfig+0x338>)
 80090cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80090ce:	4b0a      	ldr	r3, [pc, #40]	@ (80090f8 <HAL_RCC_ClockConfig+0x33c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fd fc26 	bl	8006924 <HAL_InitTick>
 80090d8:	4603      	mov	r3, r0
 80090da:	72fb      	strb	r3, [r7, #11]

  return status;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	08010b60 	.word	0x08010b60
 80090ec:	40021000 	.word	0x40021000
 80090f0:	08010d3c 	.word	0x08010d3c
 80090f4:	20000014 	.word	0x20000014
 80090f8:	20000018 	.word	0x20000018

080090fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b089      	sub	sp, #36	@ 0x24
 8009100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	61fb      	str	r3, [r7, #28]
 8009106:	2300      	movs	r3, #0
 8009108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800910a:	4b3e      	ldr	r3, [pc, #248]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 030c 	and.w	r3, r3, #12
 8009112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009114:	4b3b      	ldr	r3, [pc, #236]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0303 	and.w	r3, r3, #3
 800911c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <HAL_RCC_GetSysClockFreq+0x34>
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b0c      	cmp	r3, #12
 8009128:	d121      	bne.n	800916e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d11e      	bne.n	800916e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009130:	4b34      	ldr	r3, [pc, #208]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0308 	and.w	r3, r3, #8
 8009138:	2b00      	cmp	r3, #0
 800913a:	d107      	bne.n	800914c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800913c:	4b31      	ldr	r3, [pc, #196]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 800913e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	e005      	b.n	8009158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800914c:	4b2d      	ldr	r3, [pc, #180]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	091b      	lsrs	r3, r3, #4
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009158:	4a2b      	ldr	r2, [pc, #172]	@ (8009208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10d      	bne.n	8009184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800916c:	e00a      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b04      	cmp	r3, #4
 8009172:	d102      	bne.n	800917a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009174:	4b25      	ldr	r3, [pc, #148]	@ (800920c <HAL_RCC_GetSysClockFreq+0x110>)
 8009176:	61bb      	str	r3, [r7, #24]
 8009178:	e004      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b08      	cmp	r3, #8
 800917e:	d101      	bne.n	8009184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009180:	4b23      	ldr	r3, [pc, #140]	@ (8009210 <HAL_RCC_GetSysClockFreq+0x114>)
 8009182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b0c      	cmp	r3, #12
 8009188:	d134      	bne.n	80091f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800918a:	4b1e      	ldr	r3, [pc, #120]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d003      	beq.n	80091a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b03      	cmp	r3, #3
 800919e:	d003      	beq.n	80091a8 <HAL_RCC_GetSysClockFreq+0xac>
 80091a0:	e005      	b.n	80091ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80091a2:	4b1a      	ldr	r3, [pc, #104]	@ (800920c <HAL_RCC_GetSysClockFreq+0x110>)
 80091a4:	617b      	str	r3, [r7, #20]
      break;
 80091a6:	e005      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80091a8:	4b19      	ldr	r3, [pc, #100]	@ (8009210 <HAL_RCC_GetSysClockFreq+0x114>)
 80091aa:	617b      	str	r3, [r7, #20]
      break;
 80091ac:	e002      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	617b      	str	r3, [r7, #20]
      break;
 80091b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091b4:	4b13      	ldr	r3, [pc, #76]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	091b      	lsrs	r3, r3, #4
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	3301      	adds	r3, #1
 80091c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80091c2:	4b10      	ldr	r3, [pc, #64]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	0a1b      	lsrs	r3, r3, #8
 80091c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	fb03 f202 	mul.w	r2, r3, r2
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091da:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <HAL_RCC_GetSysClockFreq+0x108>)
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	0e5b      	lsrs	r3, r3, #25
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	3301      	adds	r3, #1
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80091f4:	69bb      	ldr	r3, [r7, #24]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3724      	adds	r7, #36	@ 0x24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40021000 	.word	0x40021000
 8009208:	08010d54 	.word	0x08010d54
 800920c:	00f42400 	.word	0x00f42400
 8009210:	007a1200 	.word	0x007a1200

08009214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009214:	b480      	push	{r7}
 8009216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009218:	4b03      	ldr	r3, [pc, #12]	@ (8009228 <HAL_RCC_GetHCLKFreq+0x14>)
 800921a:	681b      	ldr	r3, [r3, #0]
}
 800921c:	4618      	mov	r0, r3
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20000014 	.word	0x20000014

0800922c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009230:	f7ff fff0 	bl	8009214 <HAL_RCC_GetHCLKFreq>
 8009234:	4602      	mov	r2, r0
 8009236:	4b06      	ldr	r3, [pc, #24]	@ (8009250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	0a1b      	lsrs	r3, r3, #8
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	4904      	ldr	r1, [pc, #16]	@ (8009254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009242:	5ccb      	ldrb	r3, [r1, r3]
 8009244:	f003 031f 	and.w	r3, r3, #31
 8009248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800924c:	4618      	mov	r0, r3
 800924e:	bd80      	pop	{r7, pc}
 8009250:	40021000 	.word	0x40021000
 8009254:	08010d4c 	.word	0x08010d4c

08009258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800925c:	f7ff ffda 	bl	8009214 <HAL_RCC_GetHCLKFreq>
 8009260:	4602      	mov	r2, r0
 8009262:	4b06      	ldr	r3, [pc, #24]	@ (800927c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	0adb      	lsrs	r3, r3, #11
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	4904      	ldr	r1, [pc, #16]	@ (8009280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800926e:	5ccb      	ldrb	r3, [r1, r3]
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009278:	4618      	mov	r0, r3
 800927a:	bd80      	pop	{r7, pc}
 800927c:	40021000 	.word	0x40021000
 8009280:	08010d4c 	.word	0x08010d4c

08009284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800928c:	2300      	movs	r3, #0
 800928e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009290:	4b2a      	ldr	r3, [pc, #168]	@ (800933c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800929c:	f7ff f81c 	bl	80082d8 <HAL_PWREx_GetVoltageRange>
 80092a0:	6178      	str	r0, [r7, #20]
 80092a2:	e014      	b.n	80092ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80092a4:	4b25      	ldr	r3, [pc, #148]	@ (800933c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a8:	4a24      	ldr	r2, [pc, #144]	@ (800933c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80092b0:	4b22      	ldr	r3, [pc, #136]	@ (800933c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80092bc:	f7ff f80c 	bl	80082d8 <HAL_PWREx_GetVoltageRange>
 80092c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80092c2:	4b1e      	ldr	r3, [pc, #120]	@ (800933c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c6:	4a1d      	ldr	r2, [pc, #116]	@ (800933c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d4:	d10b      	bne.n	80092ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b80      	cmp	r3, #128	@ 0x80
 80092da:	d919      	bls.n	8009310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2ba0      	cmp	r3, #160	@ 0xa0
 80092e0:	d902      	bls.n	80092e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80092e2:	2302      	movs	r3, #2
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	e013      	b.n	8009310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80092e8:	2301      	movs	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	e010      	b.n	8009310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b80      	cmp	r3, #128	@ 0x80
 80092f2:	d902      	bls.n	80092fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80092f4:	2303      	movs	r3, #3
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	e00a      	b.n	8009310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b80      	cmp	r3, #128	@ 0x80
 80092fe:	d102      	bne.n	8009306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009300:	2302      	movs	r3, #2
 8009302:	613b      	str	r3, [r7, #16]
 8009304:	e004      	b.n	8009310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b70      	cmp	r3, #112	@ 0x70
 800930a:	d101      	bne.n	8009310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800930c:	2301      	movs	r3, #1
 800930e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009310:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f023 0207 	bic.w	r2, r3, #7
 8009318:	4909      	ldr	r1, [pc, #36]	@ (8009340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009320:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	429a      	cmp	r2, r3
 800932c:	d001      	beq.n	8009332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	40021000 	.word	0x40021000
 8009340:	40022000 	.word	0x40022000

08009344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800934c:	2300      	movs	r3, #0
 800934e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009350:	2300      	movs	r3, #0
 8009352:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009368:	d303      	bcc.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800936a:	21c9      	movs	r1, #201	@ 0xc9
 800936c:	4889      	ldr	r0, [pc, #548]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800936e:	f7fc fcff 	bl	8005d70 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800937a:	2b00      	cmp	r3, #0
 800937c:	d058      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009382:	2b00      	cmp	r3, #0
 8009384:	d012      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800938a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800938e:	d00d      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009394:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009398:	d008      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80093a2:	d003      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 80093a4:	21d1      	movs	r1, #209	@ 0xd1
 80093a6:	487b      	ldr	r0, [pc, #492]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80093a8:	f7fc fce2 	bl	8005d70 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80093b4:	d02a      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80093b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80093ba:	d824      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80093bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093c0:	d008      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093c6:	d81e      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80093cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093d0:	d010      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80093d2:	e018      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80093d4:	4b70      	ldr	r3, [pc, #448]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	4a6f      	ldr	r2, [pc, #444]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80093da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093e0:	e015      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3304      	adds	r3, #4
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fc69 	bl	8009cc0 <RCCEx_PLLSAI1_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093f2:	e00c      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3320      	adds	r3, #32
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fde0 	bl	8009fc0 <RCCEx_PLLSAI2_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009404:	e003      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	74fb      	strb	r3, [r7, #19]
      break;
 800940a:	e000      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 800940c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800940e:	7cfb      	ldrb	r3, [r7, #19]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009414:	4b60      	ldr	r3, [pc, #384]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800941a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009422:	495d      	ldr	r1, [pc, #372]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800942a:	e001      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	7cfb      	ldrb	r3, [r7, #19]
 800942e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d059      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009440:	2b00      	cmp	r3, #0
 8009442:	d013      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800944c:	d00e      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x128>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009456:	d009      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800945c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009460:	d004      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8009462:	f240 110f 	movw	r1, #271	@ 0x10f
 8009466:	484b      	ldr	r0, [pc, #300]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009468:	f7fc fc82 	bl	8005d70 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009470:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009474:	d02a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009476:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800947a:	d824      	bhi.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800947c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009480:	d008      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8009482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009486:	d81e      	bhi.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800948c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009490:	d010      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8009492:	e018      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009494:	4b40      	ldr	r3, [pc, #256]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	4a3f      	ldr	r2, [pc, #252]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800949a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800949e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094a0:	e015      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3304      	adds	r3, #4
 80094a6:	2100      	movs	r1, #0
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fc09 	bl	8009cc0 <RCCEx_PLLSAI1_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094b2:	e00c      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3320      	adds	r3, #32
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fd80 	bl	8009fc0 <RCCEx_PLLSAI2_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094c4:	e003      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	74fb      	strb	r3, [r7, #19]
      break;
 80094ca:	e000      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80094cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ce:	7cfb      	ldrb	r3, [r7, #19]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10b      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094d4:	4b30      	ldr	r3, [pc, #192]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e2:	492d      	ldr	r1, [pc, #180]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80094ea:	e001      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ec:	7cfb      	ldrb	r3, [r7, #19]
 80094ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 80c2 	beq.w	8009682 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094fe:	2300      	movs	r3, #0
 8009500:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009508:	2b00      	cmp	r3, #0
 800950a:	d016      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009516:	d010      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800951e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009522:	d00a      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800952a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800952e:	d004      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009530:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8009534:	4817      	ldr	r0, [pc, #92]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009536:	f7fc fc1b 	bl	8005d70 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800953a:	4b17      	ldr	r3, [pc, #92]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800953c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x208>
 800954a:	2300      	movs	r3, #0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00d      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009550:	4b11      	ldr	r3, [pc, #68]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009554:	4a10      	ldr	r2, [pc, #64]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800955a:	6593      	str	r3, [r2, #88]	@ 0x58
 800955c:	4b0e      	ldr	r3, [pc, #56]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800955e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009564:	60bb      	str	r3, [r7, #8]
 8009566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009568:	2301      	movs	r3, #1
 800956a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800956c:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a0a      	ldr	r2, [pc, #40]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009578:	f7fd fa24 	bl	80069c4 <HAL_GetTick>
 800957c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800957e:	e00f      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009580:	f7fd fa20 	bl	80069c4 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b02      	cmp	r3, #2
 800958c:	d908      	bls.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	74fb      	strb	r3, [r7, #19]
        break;
 8009592:	e00b      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009594:	08010b98 	.word	0x08010b98
 8009598:	40021000 	.word	0x40021000
 800959c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095a0:	4b30      	ldr	r3, [pc, #192]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0e9      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 80095ac:	7cfb      	ldrb	r3, [r7, #19]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d15c      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095b2:	4b2d      	ldr	r3, [pc, #180]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01f      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d019      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095d0:	4b25      	ldr	r3, [pc, #148]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095dc:	4b22      	ldr	r3, [pc, #136]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e2:	4a21      	ldr	r2, [pc, #132]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f2:	4a1d      	ldr	r2, [pc, #116]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	d016      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960e:	f7fd f9d9 	bl	80069c4 <HAL_GetTick>
 8009612:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009614:	e00b      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009616:	f7fd f9d5 	bl	80069c4 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009624:	4293      	cmp	r3, r2
 8009626:	d902      	bls.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	74fb      	strb	r3, [r7, #19]
            break;
 800962c:	e006      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800962e:	4b0e      	ldr	r3, [pc, #56]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0ec      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 800963c:	7cfb      	ldrb	r3, [r7, #19]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10c      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009642:	4b09      	ldr	r3, [pc, #36]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009652:	4905      	ldr	r1, [pc, #20]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009654:	4313      	orrs	r3, r2
 8009656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800965a:	e009      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800965c:	7cfb      	ldrb	r3, [r7, #19]
 800965e:	74bb      	strb	r3, [r7, #18]
 8009660:	e006      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8009662:	bf00      	nop
 8009664:	40007000 	.word	0x40007000
 8009668:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	7cfb      	ldrb	r3, [r7, #19]
 800966e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009670:	7c7b      	ldrb	r3, [r7, #17]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d105      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009676:	4b8d      	ldr	r3, [pc, #564]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967a:	4a8c      	ldr	r2, [pc, #560]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800967c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009680:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01f      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d010      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800969a:	2b01      	cmp	r3, #1
 800969c:	d00c      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d008      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d004      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096ae:	f240 1199 	movw	r1, #409	@ 0x199
 80096b2:	487f      	ldr	r0, [pc, #508]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80096b4:	f7fc fb5c 	bl	8005d70 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096b8:	4b7c      	ldr	r3, [pc, #496]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096be:	f023 0203 	bic.w	r2, r3, #3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	4979      	ldr	r1, [pc, #484]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01f      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d010      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d00c      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ee:	2b0c      	cmp	r3, #12
 80096f0:	d008      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f6:	2b08      	cmp	r3, #8
 80096f8:	d004      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80096fa:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80096fe:	486c      	ldr	r0, [pc, #432]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009700:	f7fc fb36 	bl	8005d70 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009704:	4b69      	ldr	r3, [pc, #420]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800970a:	f023 020c 	bic.w	r2, r3, #12
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009712:	4966      	ldr	r1, [pc, #408]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009714:	4313      	orrs	r3, r2
 8009716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b00      	cmp	r3, #0
 8009724:	d01f      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d010      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009732:	2b10      	cmp	r3, #16
 8009734:	d00c      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973a:	2b30      	cmp	r3, #48	@ 0x30
 800973c:	d008      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009742:	2b20      	cmp	r3, #32
 8009744:	d004      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009746:	f240 11af 	movw	r1, #431	@ 0x1af
 800974a:	4859      	ldr	r0, [pc, #356]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800974c:	f7fc fb10 	bl	8005d70 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009750:	4b56      	ldr	r3, [pc, #344]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009756:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975e:	4953      	ldr	r1, [pc, #332]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d01f      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	2b00      	cmp	r3, #0
 8009778:	d010      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977e:	2b40      	cmp	r3, #64	@ 0x40
 8009780:	d00c      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009786:	2bc0      	cmp	r3, #192	@ 0xc0
 8009788:	d008      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800978e:	2b80      	cmp	r3, #128	@ 0x80
 8009790:	d004      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8009792:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8009796:	4846      	ldr	r0, [pc, #280]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009798:	f7fc faea 	bl	8005d70 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800979c:	4b43      	ldr	r3, [pc, #268]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097aa:	4940      	ldr	r1, [pc, #256]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097ac:	4313      	orrs	r3, r2
 80097ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d022      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d013      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ce:	d00e      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097d8:	d009      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097e2:	d004      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097e4:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80097e8:	4831      	ldr	r0, [pc, #196]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80097ea:	f7fc fac1 	bl	8005d70 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80097ee:	4b2f      	ldr	r3, [pc, #188]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097fc:	492b      	ldr	r1, [pc, #172]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b00      	cmp	r3, #0
 800980e:	d022      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d013      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009820:	d00e      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009826:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800982a:	d009      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009834:	d004      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009836:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800983a:	481d      	ldr	r0, [pc, #116]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800983c:	f7fc fa98 	bl	8005d70 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009840:	4b1a      	ldr	r3, [pc, #104]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009846:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984e:	4917      	ldr	r1, [pc, #92]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009850:	4313      	orrs	r3, r2
 8009852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800985e:	2b00      	cmp	r3, #0
 8009860:	d028      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d013      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800986e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009872:	d00e      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009878:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800987c:	d009      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009882:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009886:	d004      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009888:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800988c:	4808      	ldr	r0, [pc, #32]	@ (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800988e:	f7fc fa6f 	bl	8005d70 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009892:	4b06      	ldr	r3, [pc, #24]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009898:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a0:	4902      	ldr	r1, [pc, #8]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80098a8:	e004      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80098aa:	bf00      	nop
 80098ac:	40021000 	.word	0x40021000
 80098b0:	08010b98 	.word	0x08010b98
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d022      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d013      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098d0:	d00e      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098da:	d009      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098e4:	d004      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098e6:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80098ea:	489e      	ldr	r0, [pc, #632]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80098ec:	f7fc fa40 	bl	8005d70 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098f0:	4b9d      	ldr	r3, [pc, #628]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098fe:	499a      	ldr	r1, [pc, #616]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009900:	4313      	orrs	r3, r2
 8009902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d01d      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00e      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800991e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009922:	d009      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800992c:	d004      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800992e:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8009932:	488c      	ldr	r0, [pc, #560]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009934:	f7fc fa1c 	bl	8005d70 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009938:	4b8b      	ldr	r3, [pc, #556]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800993e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009946:	4988      	ldr	r1, [pc, #544]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009948:	4313      	orrs	r3, r2
 800994a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01d      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00e      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800996a:	d009      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009974:	d004      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009976:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800997a:	487a      	ldr	r0, [pc, #488]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800997c:	f7fc f9f8 	bl	8005d70 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009980:	4b79      	ldr	r3, [pc, #484]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009986:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800998e:	4976      	ldr	r1, [pc, #472]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009990:	4313      	orrs	r3, r2
 8009992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01d      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099b2:	d009      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099bc:	d004      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80099be:	f240 2107 	movw	r1, #519	@ 0x207
 80099c2:	4868      	ldr	r0, [pc, #416]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80099c4:	f7fc f9d4 	bl	8005d70 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099c8:	4b67      	ldr	r3, [pc, #412]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d6:	4964      	ldr	r1, [pc, #400]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d040      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80099fa:	d00e      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a04:	d009      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a0a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009a0e:	d004      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a10:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8009a14:	4853      	ldr	r0, [pc, #332]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009a16:	f7fc f9ab 	bl	8005d70 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a1a:	4b53      	ldr	r3, [pc, #332]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a28:	494f      	ldr	r1, [pc, #316]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a38:	d106      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a44:	60d3      	str	r3, [r2, #12]
 8009a46:	e011      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a50:	d10c      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3304      	adds	r3, #4
 8009a56:	2101      	movs	r1, #1
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 f931 	bl	8009cc0 <RCCEx_PLLSAI1_Config>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009a62:	7cfb      	ldrb	r3, [r7, #19]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8009a68:	7cfb      	ldrb	r3, [r7, #19]
 8009a6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d040      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d013      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a88:	d00e      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a92:	d009      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a98:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009a9c:	d004      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a9e:	f240 2141 	movw	r1, #577	@ 0x241
 8009aa2:	4830      	ldr	r0, [pc, #192]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009aa4:	f7fc f964 	bl	8005d70 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab6:	492c      	ldr	r1, [pc, #176]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ac6:	d106      	bne.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ac8:	4b27      	ldr	r3, [pc, #156]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	4a26      	ldr	r2, [pc, #152]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ad2:	60d3      	str	r3, [r2, #12]
 8009ad4:	e011      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ade:	d10c      	bne.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 f8ea 	bl	8009cc0 <RCCEx_PLLSAI1_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8009af6:	7cfb      	ldrb	r3, [r7, #19]
 8009af8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d044      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d013      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b16:	d00e      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b20:	d009      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b26:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009b2a:	d004      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b2c:	f240 2166 	movw	r1, #614	@ 0x266
 8009b30:	480c      	ldr	r0, [pc, #48]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009b32:	f7fc f91d 	bl	8005d70 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b36:	4b0c      	ldr	r3, [pc, #48]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b44:	4908      	ldr	r1, [pc, #32]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b54:	d10a      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b56:	4b04      	ldr	r3, [pc, #16]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	4a03      	ldr	r2, [pc, #12]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b60:	60d3      	str	r3, [r2, #12]
 8009b62:	e015      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009b64:	08010b98 	.word	0x08010b98
 8009b68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b74:	d10c      	bne.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f89f 	bl	8009cc0 <RCCEx_PLLSAI1_Config>
 8009b82:	4603      	mov	r3, r0
 8009b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b86:	7cfb      	ldrb	r3, [r7, #19]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8009b8c:	7cfb      	ldrb	r3, [r7, #19]
 8009b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d047      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d013      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bac:	d00e      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bb6:	d009      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009bc0:	d004      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bc2:	f240 2186 	movw	r1, #646	@ 0x286
 8009bc6:	483c      	ldr	r0, [pc, #240]	@ (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009bc8:	f7fc f8d2 	bl	8005d70 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bda:	4938      	ldr	r1, [pc, #224]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bea:	d10d      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	2102      	movs	r1, #2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f864 	bl	8009cc0 <RCCEx_PLLSAI1_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bfc:	7cfb      	ldrb	r3, [r7, #19]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d014      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8009c02:	7cfb      	ldrb	r3, [r7, #19]
 8009c04:	74bb      	strb	r3, [r7, #18]
 8009c06:	e011      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c10:	d10c      	bne.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3320      	adds	r3, #32
 8009c16:	2102      	movs	r1, #2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 f9d1 	bl	8009fc0 <RCCEx_PLLSAI2_Config>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c22:	7cfb      	ldrb	r3, [r7, #19]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8009c28:	7cfb      	ldrb	r3, [r7, #19]
 8009c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d018      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d009      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c48:	d004      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009c4a:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8009c4e:	481a      	ldr	r0, [pc, #104]	@ (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009c50:	f7fc f88e 	bl	8005d70 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c54:	4b19      	ldr	r3, [pc, #100]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c5a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c62:	4916      	ldr	r1, [pc, #88]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01b      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c8a:	d004      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c8c:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8009c90:	4809      	ldr	r0, [pc, #36]	@ (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009c92:	f7fc f86d 	bl	8005d70 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c96:	4b09      	ldr	r3, [pc, #36]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca6:	4905      	ldr	r1, [pc, #20]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009cae:	7cbb      	ldrb	r3, [r7, #18]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	08010b98 	.word	0x08010b98
 8009cbc:	40021000 	.word	0x40021000

08009cc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d010      	beq.n	8009cf8 <RCCEx_PLLSAI1_Config+0x38>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d00c      	beq.n	8009cf8 <RCCEx_PLLSAI1_Config+0x38>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d008      	beq.n	8009cf8 <RCCEx_PLLSAI1_Config+0x38>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d004      	beq.n	8009cf8 <RCCEx_PLLSAI1_Config+0x38>
 8009cee:	f640 3162 	movw	r1, #2914	@ 0xb62
 8009cf2:	4887      	ldr	r0, [pc, #540]	@ (8009f10 <RCCEx_PLLSAI1_Config+0x250>)
 8009cf4:	f7fc f83c 	bl	8005d70 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <RCCEx_PLLSAI1_Config+0x48>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d904      	bls.n	8009d12 <RCCEx_PLLSAI1_Config+0x52>
 8009d08:	f640 3163 	movw	r1, #2915	@ 0xb63
 8009d0c:	4880      	ldr	r0, [pc, #512]	@ (8009f10 <RCCEx_PLLSAI1_Config+0x250>)
 8009d0e:	f7fc f82f 	bl	8005d70 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b07      	cmp	r3, #7
 8009d18:	d903      	bls.n	8009d22 <RCCEx_PLLSAI1_Config+0x62>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b56      	cmp	r3, #86	@ 0x56
 8009d20:	d904      	bls.n	8009d2c <RCCEx_PLLSAI1_Config+0x6c>
 8009d22:	f640 3164 	movw	r1, #2916	@ 0xb64
 8009d26:	487a      	ldr	r0, [pc, #488]	@ (8009f10 <RCCEx_PLLSAI1_Config+0x250>)
 8009d28:	f7fc f822 	bl	8005d70 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10b      	bne.n	8009d50 <RCCEx_PLLSAI1_Config+0x90>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <RCCEx_PLLSAI1_Config+0x90>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d007      	beq.n	8009d60 <RCCEx_PLLSAI1_Config+0xa0>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8009d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <RCCEx_PLLSAI1_Config+0xaa>
 8009d60:	f640 3165 	movw	r1, #2917	@ 0xb65
 8009d64:	486a      	ldr	r0, [pc, #424]	@ (8009f10 <RCCEx_PLLSAI1_Config+0x250>)
 8009d66:	f7fc f803 	bl	8005d70 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d018      	beq.n	8009da8 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009d76:	4b67      	ldr	r3, [pc, #412]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f003 0203 	and.w	r2, r3, #3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d10d      	bne.n	8009da2 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
       ||
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009d8e:	4b61      	ldr	r3, [pc, #388]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	091b      	lsrs	r3, r3, #4
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d047      	beq.n	8009e32 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
 8009da6:	e044      	b.n	8009e32 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d018      	beq.n	8009de2 <RCCEx_PLLSAI1_Config+0x122>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d825      	bhi.n	8009e00 <RCCEx_PLLSAI1_Config+0x140>
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d002      	beq.n	8009dbe <RCCEx_PLLSAI1_Config+0xfe>
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d009      	beq.n	8009dd0 <RCCEx_PLLSAI1_Config+0x110>
 8009dbc:	e020      	b.n	8009e00 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009dbe:	4b55      	ldr	r3, [pc, #340]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d11d      	bne.n	8009e06 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dce:	e01a      	b.n	8009e06 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009dd0:	4b50      	ldr	r3, [pc, #320]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d116      	bne.n	8009e0a <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009de0:	e013      	b.n	8009e0a <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009de2:	4b4c      	ldr	r3, [pc, #304]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10f      	bne.n	8009e0e <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009dee:	4b49      	ldr	r3, [pc, #292]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d109      	bne.n	8009e0e <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009dfe:	e006      	b.n	8009e0e <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	73fb      	strb	r3, [r7, #15]
      break;
 8009e04:	e004      	b.n	8009e10 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009e06:	bf00      	nop
 8009e08:	e002      	b.n	8009e10 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009e0a:	bf00      	nop
 8009e0c:	e000      	b.n	8009e10 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10d      	bne.n	8009e32 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009e16:	4b3f      	ldr	r3, [pc, #252]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6819      	ldr	r1, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	4939      	ldr	r1, [pc, #228]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 80ba 	bne.w	8009fae <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009e3a:	4b36      	ldr	r3, [pc, #216]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a35      	ldr	r2, [pc, #212]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009e40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e46:	f7fc fdbd 	bl	80069c4 <HAL_GetTick>
 8009e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e4c:	e009      	b.n	8009e62 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e4e:	f7fc fdb9 	bl	80069c4 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d902      	bls.n	8009e62 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	73fb      	strb	r3, [r7, #15]
        break;
 8009e60:	e005      	b.n	8009e6e <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e62:	4b2c      	ldr	r3, [pc, #176]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1ef      	bne.n	8009e4e <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f040 809c 	bne.w	8009fae <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d11e      	bne.n	8009eba <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	d008      	beq.n	8009e96 <RCCEx_PLLSAI1_Config+0x1d6>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b11      	cmp	r3, #17
 8009e8a:	d004      	beq.n	8009e96 <RCCEx_PLLSAI1_Config+0x1d6>
 8009e8c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8009e90:	481f      	ldr	r0, [pc, #124]	@ (8009f10 <RCCEx_PLLSAI1_Config+0x250>)
 8009e92:	f7fb ff6d 	bl	8005d70 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e96:	4b1f      	ldr	r3, [pc, #124]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8009e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6892      	ldr	r2, [r2, #8]
 8009ea6:	0211      	lsls	r1, r2, #8
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	68d2      	ldr	r2, [r2, #12]
 8009eac:	0912      	lsrs	r2, r2, #4
 8009eae:	0452      	lsls	r2, r2, #17
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	4918      	ldr	r1, [pc, #96]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	610b      	str	r3, [r1, #16]
 8009eb8:	e055      	b.n	8009f66 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d12b      	bne.n	8009f18 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d010      	beq.n	8009eea <RCCEx_PLLSAI1_Config+0x22a>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d00c      	beq.n	8009eea <RCCEx_PLLSAI1_Config+0x22a>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	2b06      	cmp	r3, #6
 8009ed6:	d008      	beq.n	8009eea <RCCEx_PLLSAI1_Config+0x22a>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d004      	beq.n	8009eea <RCCEx_PLLSAI1_Config+0x22a>
 8009ee0:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8009ee4:	480a      	ldr	r0, [pc, #40]	@ (8009f10 <RCCEx_PLLSAI1_Config+0x250>)
 8009ee6:	f7fb ff43 	bl	8005d70 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009eea:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009ef2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6892      	ldr	r2, [r2, #8]
 8009efa:	0211      	lsls	r1, r2, #8
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6912      	ldr	r2, [r2, #16]
 8009f00:	0852      	lsrs	r2, r2, #1
 8009f02:	3a01      	subs	r2, #1
 8009f04:	0552      	lsls	r2, r2, #21
 8009f06:	430a      	orrs	r2, r1
 8009f08:	4902      	ldr	r1, [pc, #8]	@ (8009f14 <RCCEx_PLLSAI1_Config+0x254>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	610b      	str	r3, [r1, #16]
 8009f0e:	e02a      	b.n	8009f66 <RCCEx_PLLSAI1_Config+0x2a6>
 8009f10:	08010b98 	.word	0x08010b98
 8009f14:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d010      	beq.n	8009f42 <RCCEx_PLLSAI1_Config+0x282>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d00c      	beq.n	8009f42 <RCCEx_PLLSAI1_Config+0x282>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	2b06      	cmp	r3, #6
 8009f2e:	d008      	beq.n	8009f42 <RCCEx_PLLSAI1_Config+0x282>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d004      	beq.n	8009f42 <RCCEx_PLLSAI1_Config+0x282>
 8009f38:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8009f3c:	481e      	ldr	r0, [pc, #120]	@ (8009fb8 <RCCEx_PLLSAI1_Config+0x2f8>)
 8009f3e:	f7fb ff17 	bl	8005d70 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009f42:	4b1e      	ldr	r3, [pc, #120]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009f4a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6892      	ldr	r2, [r2, #8]
 8009f52:	0211      	lsls	r1, r2, #8
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6952      	ldr	r2, [r2, #20]
 8009f58:	0852      	lsrs	r2, r2, #1
 8009f5a:	3a01      	subs	r2, #1
 8009f5c:	0652      	lsls	r2, r2, #25
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	4916      	ldr	r1, [pc, #88]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009f66:	4b15      	ldr	r3, [pc, #84]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a14      	ldr	r2, [pc, #80]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f72:	f7fc fd27 	bl	80069c4 <HAL_GetTick>
 8009f76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f78:	e009      	b.n	8009f8e <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f7a:	f7fc fd23 	bl	80069c4 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d902      	bls.n	8009f8e <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	73fb      	strb	r3, [r7, #15]
          break;
 8009f8c:	e005      	b.n	8009f9a <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0ef      	beq.n	8009f7a <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d106      	bne.n	8009fae <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009fa0:	4b06      	ldr	r3, [pc, #24]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	4904      	ldr	r1, [pc, #16]	@ (8009fbc <RCCEx_PLLSAI1_Config+0x2fc>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	08010b98 	.word	0x08010b98
 8009fbc:	40021000 	.word	0x40021000

08009fc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d010      	beq.n	8009ff8 <RCCEx_PLLSAI2_Config+0x38>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d00c      	beq.n	8009ff8 <RCCEx_PLLSAI2_Config+0x38>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d008      	beq.n	8009ff8 <RCCEx_PLLSAI2_Config+0x38>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d004      	beq.n	8009ff8 <RCCEx_PLLSAI2_Config+0x38>
 8009fee:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8009ff2:	4896      	ldr	r0, [pc, #600]	@ (800a24c <RCCEx_PLLSAI2_Config+0x28c>)
 8009ff4:	f7fb febc 	bl	8005d70 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <RCCEx_PLLSAI2_Config+0x48>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b08      	cmp	r3, #8
 800a006:	d904      	bls.n	800a012 <RCCEx_PLLSAI2_Config+0x52>
 800a008:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 800a00c:	488f      	ldr	r0, [pc, #572]	@ (800a24c <RCCEx_PLLSAI2_Config+0x28c>)
 800a00e:	f7fb feaf 	bl	8005d70 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2b07      	cmp	r3, #7
 800a018:	d903      	bls.n	800a022 <RCCEx_PLLSAI2_Config+0x62>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	2b56      	cmp	r3, #86	@ 0x56
 800a020:	d904      	bls.n	800a02c <RCCEx_PLLSAI2_Config+0x6c>
 800a022:	f640 4131 	movw	r1, #3121	@ 0xc31
 800a026:	4889      	ldr	r0, [pc, #548]	@ (800a24c <RCCEx_PLLSAI2_Config+0x28c>)
 800a028:	f7fb fea2 	bl	8005d70 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d105      	bne.n	800a044 <RCCEx_PLLSAI2_Config+0x84>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <RCCEx_PLLSAI2_Config+0x94>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a04c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <RCCEx_PLLSAI2_Config+0x9e>
 800a054:	f640 4132 	movw	r1, #3122	@ 0xc32
 800a058:	487c      	ldr	r0, [pc, #496]	@ (800a24c <RCCEx_PLLSAI2_Config+0x28c>)
 800a05a:	f7fb fe89 	bl	8005d70 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a05e:	4b7c      	ldr	r3, [pc, #496]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d018      	beq.n	800a09c <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a06a:	4b79      	ldr	r3, [pc, #484]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f003 0203 	and.w	r2, r3, #3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d10d      	bne.n	800a096 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
       ||
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a082:	4b73      	ldr	r3, [pc, #460]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	091b      	lsrs	r3, r3, #4
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
       ||
 800a092:	429a      	cmp	r2, r3
 800a094:	d047      	beq.n	800a126 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	73fb      	strb	r3, [r7, #15]
 800a09a:	e044      	b.n	800a126 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d018      	beq.n	800a0d6 <RCCEx_PLLSAI2_Config+0x116>
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d825      	bhi.n	800a0f4 <RCCEx_PLLSAI2_Config+0x134>
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d002      	beq.n	800a0b2 <RCCEx_PLLSAI2_Config+0xf2>
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d009      	beq.n	800a0c4 <RCCEx_PLLSAI2_Config+0x104>
 800a0b0:	e020      	b.n	800a0f4 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0b2:	4b67      	ldr	r3, [pc, #412]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d11d      	bne.n	800a0fa <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0c2:	e01a      	b.n	800a0fa <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0c4:	4b62      	ldr	r3, [pc, #392]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d116      	bne.n	800a0fe <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0d4:	e013      	b.n	800a0fe <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10f      	bne.n	800a102 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0e2:	4b5b      	ldr	r3, [pc, #364]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0f2:	e006      	b.n	800a102 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f8:	e004      	b.n	800a104 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a0fa:	bf00      	nop
 800a0fc:	e002      	b.n	800a104 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a0fe:	bf00      	nop
 800a100:	e000      	b.n	800a104 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a102:	bf00      	nop
    }

    if(status == HAL_OK)
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10d      	bne.n	800a126 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a10a:	4b51      	ldr	r3, [pc, #324]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6819      	ldr	r1, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	011b      	lsls	r3, r3, #4
 800a11e:	430b      	orrs	r3, r1
 800a120:	494b      	ldr	r1, [pc, #300]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a122:	4313      	orrs	r3, r2
 800a124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f040 808a 	bne.w	800a242 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a12e:	4b48      	ldr	r3, [pc, #288]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a47      	ldr	r2, [pc, #284]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a13a:	f7fc fc43 	bl	80069c4 <HAL_GetTick>
 800a13e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a140:	e009      	b.n	800a156 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a142:	f7fc fc3f 	bl	80069c4 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d902      	bls.n	800a156 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	73fb      	strb	r3, [r7, #15]
        break;
 800a154:	e005      	b.n	800a162 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a156:	4b3e      	ldr	r3, [pc, #248]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1ef      	bne.n	800a142 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d16c      	bne.n	800a242 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d11e      	bne.n	800a1ac <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	2b07      	cmp	r3, #7
 800a174:	d008      	beq.n	800a188 <RCCEx_PLLSAI2_Config+0x1c8>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	2b11      	cmp	r3, #17
 800a17c:	d004      	beq.n	800a188 <RCCEx_PLLSAI2_Config+0x1c8>
 800a17e:	f640 4185 	movw	r1, #3205	@ 0xc85
 800a182:	4832      	ldr	r0, [pc, #200]	@ (800a24c <RCCEx_PLLSAI2_Config+0x28c>)
 800a184:	f7fb fdf4 	bl	8005d70 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a188:	4b31      	ldr	r3, [pc, #196]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6892      	ldr	r2, [r2, #8]
 800a198:	0211      	lsls	r1, r2, #8
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68d2      	ldr	r2, [r2, #12]
 800a19e:	0912      	lsrs	r2, r2, #4
 800a1a0:	0452      	lsls	r2, r2, #17
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	492a      	ldr	r1, [pc, #168]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	614b      	str	r3, [r1, #20]
 800a1aa:	e026      	b.n	800a1fa <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d010      	beq.n	800a1d6 <RCCEx_PLLSAI2_Config+0x216>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d00c      	beq.n	800a1d6 <RCCEx_PLLSAI2_Config+0x216>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b06      	cmp	r3, #6
 800a1c2:	d008      	beq.n	800a1d6 <RCCEx_PLLSAI2_Config+0x216>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d004      	beq.n	800a1d6 <RCCEx_PLLSAI2_Config+0x216>
 800a1cc:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800a1d0:	481e      	ldr	r0, [pc, #120]	@ (800a24c <RCCEx_PLLSAI2_Config+0x28c>)
 800a1d2:	f7fb fdcd 	bl	8005d70 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a1de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6892      	ldr	r2, [r2, #8]
 800a1e6:	0211      	lsls	r1, r2, #8
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6912      	ldr	r2, [r2, #16]
 800a1ec:	0852      	lsrs	r2, r2, #1
 800a1ee:	3a01      	subs	r2, #1
 800a1f0:	0652      	lsls	r2, r2, #25
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	4916      	ldr	r1, [pc, #88]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a1fa:	4b15      	ldr	r3, [pc, #84]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a14      	ldr	r2, [pc, #80]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a204:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a206:	f7fc fbdd 	bl	80069c4 <HAL_GetTick>
 800a20a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a20c:	e009      	b.n	800a222 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a20e:	f7fc fbd9 	bl	80069c4 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d902      	bls.n	800a222 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	73fb      	strb	r3, [r7, #15]
          break;
 800a220:	e005      	b.n	800a22e <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0ef      	beq.n	800a20e <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a234:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a236:	695a      	ldr	r2, [r3, #20]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	4904      	ldr	r1, [pc, #16]	@ (800a250 <RCCEx_PLLSAI2_Config+0x290>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a242:	7bfb      	ldrb	r3, [r7, #15]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	08010b98 	.word	0x08010b98
 800a250:	40021000 	.word	0x40021000

0800a254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e1dd      	b.n	800a622 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a7b      	ldr	r2, [pc, #492]	@ (800a458 <HAL_SPI_Init+0x204>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00e      	beq.n	800a28e <HAL_SPI_Init+0x3a>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a79      	ldr	r2, [pc, #484]	@ (800a45c <HAL_SPI_Init+0x208>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d009      	beq.n	800a28e <HAL_SPI_Init+0x3a>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a78      	ldr	r2, [pc, #480]	@ (800a460 <HAL_SPI_Init+0x20c>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d004      	beq.n	800a28e <HAL_SPI_Init+0x3a>
 800a284:	f240 1147 	movw	r1, #327	@ 0x147
 800a288:	4876      	ldr	r0, [pc, #472]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a28a:	f7fb fd71 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d009      	beq.n	800a2aa <HAL_SPI_Init+0x56>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a29e:	d004      	beq.n	800a2aa <HAL_SPI_Init+0x56>
 800a2a0:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800a2a4:	486f      	ldr	r0, [pc, #444]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a2a6:	f7fb fd63 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <HAL_SPI_Init+0x7c>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2ba:	d009      	beq.n	800a2d0 <HAL_SPI_Init+0x7c>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2c4:	d004      	beq.n	800a2d0 <HAL_SPI_Init+0x7c>
 800a2c6:	f240 1149 	movw	r1, #329	@ 0x149
 800a2ca:	4866      	ldr	r0, [pc, #408]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a2cc:	f7fb fd50 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a2d8:	d040      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800a2e2:	d03b      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 800a2ec:	d036      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2f6:	d031      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800a300:	d02c      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a30a:	d027      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800a314:	d022      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a31e:	d01d      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a328:	d018      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a332:	d013      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a33c:	d00e      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a346:	d009      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a350:	d004      	beq.n	800a35c <HAL_SPI_Init+0x108>
 800a352:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800a356:	4843      	ldr	r0, [pc, #268]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a358:	f7fb fd0a 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a364:	d00d      	beq.n	800a382 <HAL_SPI_Init+0x12e>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <HAL_SPI_Init+0x12e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a376:	d004      	beq.n	800a382 <HAL_SPI_Init+0x12e>
 800a378:	f240 114b 	movw	r1, #331	@ 0x14b
 800a37c:	4839      	ldr	r0, [pc, #228]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a37e:	f7fb fcf7 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a386:	2b08      	cmp	r3, #8
 800a388:	d008      	beq.n	800a39c <HAL_SPI_Init+0x148>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d004      	beq.n	800a39c <HAL_SPI_Init+0x148>
 800a392:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800a396:	4833      	ldr	r0, [pc, #204]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a398:	f7fb fcea 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d020      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d01c      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d018      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	2b18      	cmp	r3, #24
 800a3ba:	d014      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	2b20      	cmp	r3, #32
 800a3c2:	d010      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	2b28      	cmp	r3, #40	@ 0x28
 800a3ca:	d00c      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	69db      	ldr	r3, [r3, #28]
 800a3d0:	2b30      	cmp	r3, #48	@ 0x30
 800a3d2:	d008      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	2b38      	cmp	r3, #56	@ 0x38
 800a3da:	d004      	beq.n	800a3e6 <HAL_SPI_Init+0x192>
 800a3dc:	f240 114d 	movw	r1, #333	@ 0x14d
 800a3e0:	4820      	ldr	r0, [pc, #128]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a3e2:	f7fb fcc5 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <HAL_SPI_Init+0x1ac>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	2b80      	cmp	r3, #128	@ 0x80
 800a3f4:	d004      	beq.n	800a400 <HAL_SPI_Init+0x1ac>
 800a3f6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800a3fa:	481a      	ldr	r0, [pc, #104]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a3fc:	f7fb fcb8 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d008      	beq.n	800a41a <HAL_SPI_Init+0x1c6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	d004      	beq.n	800a41a <HAL_SPI_Init+0x1c6>
 800a410:	f240 114f 	movw	r1, #335	@ 0x14f
 800a414:	4813      	ldr	r0, [pc, #76]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a416:	f7fb fcab 	bl	8005d70 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d151      	bne.n	800a4c6 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d008      	beq.n	800a43c <HAL_SPI_Init+0x1e8>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d004      	beq.n	800a43c <HAL_SPI_Init+0x1e8>
 800a432:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800a436:	480b      	ldr	r0, [pc, #44]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a438:	f7fb fc9a 	bl	8005d70 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d011      	beq.n	800a468 <HAL_SPI_Init+0x214>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d00d      	beq.n	800a468 <HAL_SPI_Init+0x214>
 800a44c:	f240 1153 	movw	r1, #339	@ 0x153
 800a450:	4804      	ldr	r0, [pc, #16]	@ (800a464 <HAL_SPI_Init+0x210>)
 800a452:	f7fb fc8d 	bl	8005d70 <assert_failed>
 800a456:	e007      	b.n	800a468 <HAL_SPI_Init+0x214>
 800a458:	40013000 	.word	0x40013000
 800a45c:	40003800 	.word	0x40003800
 800a460:	40003c00 	.word	0x40003c00
 800a464:	08010bd4 	.word	0x08010bd4

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a470:	d125      	bne.n	800a4be <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d050      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	2b08      	cmp	r3, #8
 800a480:	d04c      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	2b10      	cmp	r3, #16
 800a488:	d048      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	2b18      	cmp	r3, #24
 800a490:	d044      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	2b20      	cmp	r3, #32
 800a498:	d040      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	2b28      	cmp	r3, #40	@ 0x28
 800a4a0:	d03c      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	2b30      	cmp	r3, #48	@ 0x30
 800a4a8:	d038      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	2b38      	cmp	r3, #56	@ 0x38
 800a4b0:	d034      	beq.n	800a51c <HAL_SPI_Init+0x2c8>
 800a4b2:	f240 1157 	movw	r1, #343	@ 0x157
 800a4b6:	485d      	ldr	r0, [pc, #372]	@ (800a62c <HAL_SPI_Init+0x3d8>)
 800a4b8:	f7fb fc5a 	bl	8005d70 <assert_failed>
 800a4bc:	e02e      	b.n	800a51c <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	61da      	str	r2, [r3, #28]
 800a4c4:	e02a      	b.n	800a51c <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d020      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	2b08      	cmp	r3, #8
 800a4d4:	d01c      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	2b10      	cmp	r3, #16
 800a4dc:	d018      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	2b18      	cmp	r3, #24
 800a4e4:	d014      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d010      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	2b28      	cmp	r3, #40	@ 0x28
 800a4f4:	d00c      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	2b30      	cmp	r3, #48	@ 0x30
 800a4fc:	d008      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	2b38      	cmp	r3, #56	@ 0x38
 800a504:	d004      	beq.n	800a510 <HAL_SPI_Init+0x2bc>
 800a506:	f240 1161 	movw	r1, #353	@ 0x161
 800a50a:	4848      	ldr	r0, [pc, #288]	@ (800a62c <HAL_SPI_Init+0x3d8>)
 800a50c:	f7fb fc30 	bl	8005d70 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fb fc5e 	bl	8005df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a552:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a55c:	d902      	bls.n	800a564 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e002      	b.n	800a56a <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a568:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a572:	d007      	beq.n	800a584 <HAL_SPI_Init+0x330>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a57c:	d002      	beq.n	800a584 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f003 0302 	and.w	r3, r3, #2
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5c6:	ea42 0103 	orr.w	r1, r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	0c1b      	lsrs	r3, r3, #16
 800a5e0:	f003 0204 	and.w	r2, r3, #4
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	f003 0310 	and.w	r3, r3, #16
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5f2:	f003 0308 	and.w	r3, r3, #8
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a600:	ea42 0103 	orr.w	r1, r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	08010bd4 	.word	0x08010bd4

0800a630 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a646:	f640 0172 	movw	r1, #2162	@ 0x872
 800a64a:	487f      	ldr	r0, [pc, #508]	@ (800a848 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a64c:	f7fb fb90 	bl	8005d70 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a654:	2b00      	cmp	r3, #0
 800a656:	d104      	bne.n	800a662 <HAL_SPI_TransmitReceive_DMA+0x32>
 800a658:	f640 0173 	movw	r1, #2163	@ 0x873
 800a65c:	487a      	ldr	r0, [pc, #488]	@ (800a848 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a65e:	f7fb fb87 	bl	8005d70 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <HAL_SPI_TransmitReceive_DMA+0x44>
 800a66a:	f640 0176 	movw	r1, #2166	@ 0x876
 800a66e:	4876      	ldr	r0, [pc, #472]	@ (800a848 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a670:	f7fb fb7e 	bl	8005d70 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a67a:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d00c      	beq.n	800a6a2 <HAL_SPI_TransmitReceive_DMA+0x72>
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a68e:	d106      	bne.n	800a69e <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <HAL_SPI_TransmitReceive_DMA+0x6e>
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d001      	beq.n	800a6a2 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e15f      	b.n	800a962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a6ae:	887b      	ldrh	r3, [r7, #2]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e154      	b.n	800a962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_SPI_TransmitReceive_DMA+0x96>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e14d      	b.n	800a962 <HAL_SPI_TransmitReceive_DMA+0x332>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d003      	beq.n	800a6e2 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2205      	movs	r2, #5
 800a6de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	887a      	ldrh	r2, [r7, #2]
 800a6f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	887a      	ldrh	r2, [r7, #2]
 800a6f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	887a      	ldrh	r2, [r7, #2]
 800a704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	887a      	ldrh	r2, [r7, #2]
 800a70c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800a72a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a734:	d908      	bls.n	800a748 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a744:	605a      	str	r2, [r3, #4]
 800a746:	e06f      	b.n	800a828 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a756:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a762:	d126      	bne.n	800a7b2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10f      	bne.n	800a790 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a77e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a784:	b29b      	uxth	r3, r3
 800a786:	085b      	lsrs	r3, r3, #1
 800a788:	b29a      	uxth	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a78e:	e010      	b.n	800a7b2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a79e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7bc:	d134      	bne.n	800a828 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a7cc:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d111      	bne.n	800a802 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a7ec:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a800:	e012      	b.n	800a828 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a810:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a818:	b29b      	uxth	r3, r3
 800a81a:	085b      	lsrs	r3, r3, #1
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	3301      	adds	r3, #1
 800a820:	b29a      	uxth	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b04      	cmp	r3, #4
 800a832:	d10f      	bne.n	800a854 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a838:	4a04      	ldr	r2, [pc, #16]	@ (800a84c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800a83a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a840:	4a03      	ldr	r2, [pc, #12]	@ (800a850 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800a842:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a844:	e00e      	b.n	800a864 <HAL_SPI_TransmitReceive_DMA+0x234>
 800a846:	bf00      	nop
 800a848:	08010bd4 	.word	0x08010bd4
 800a84c:	0800ad09 	.word	0x0800ad09
 800a850:	0800abd1 	.word	0x0800abd1
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a858:	4a44      	ldr	r2, [pc, #272]	@ (800a96c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800a85a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a860:	4a43      	ldr	r2, [pc, #268]	@ (800a970 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a862:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a868:	4a42      	ldr	r2, [pc, #264]	@ (800a974 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a86a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a870:	2200      	movs	r2, #0
 800a872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	330c      	adds	r3, #12
 800a87e:	4619      	mov	r1, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a884:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a88c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a88e:	f7fc fb9d 	bl	8006fcc <HAL_DMA_Start_IT>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00b      	beq.n	800a8b0 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a89c:	f043 0210 	orr.w	r2, r3, #16
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e058      	b.n	800a962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0201 	orr.w	r2, r2, #1
 800a8be:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8dc:	2200      	movs	r2, #0
 800a8de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	330c      	adds	r3, #12
 800a8f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a8f8:	f7fc fb68 	bl	8006fcc <HAL_DMA_Start_IT>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a906:	f043 0210 	orr.w	r2, r3, #16
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e023      	b.n	800a962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a924:	2b40      	cmp	r3, #64	@ 0x40
 800a926:	d007      	beq.n	800a938 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a936:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 0220 	orr.w	r2, r2, #32
 800a94e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0202 	orr.w	r2, r2, #2
 800a95e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	0800ad25 	.word	0x0800ad25
 800a970:	0800ac79 	.word	0x0800ac79
 800a974:	0800ad41 	.word	0x0800ad41

0800a978 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	099b      	lsrs	r3, r3, #6
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10f      	bne.n	800a9bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	099b      	lsrs	r3, r3, #6
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4798      	blx	r3
    return;
 800a9ba:	e0d7      	b.n	800ab6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	085b      	lsrs	r3, r3, #1
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <HAL_SPI_IRQHandler+0x66>
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	09db      	lsrs	r3, r3, #7
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4798      	blx	r3
    return;
 800a9dc:	e0c6      	b.n	800ab6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	095b      	lsrs	r3, r3, #5
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10c      	bne.n	800aa04 <HAL_SPI_IRQHandler+0x8c>
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	099b      	lsrs	r3, r3, #6
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	0a1b      	lsrs	r3, r3, #8
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 80b4 	beq.w	800ab6c <HAL_SPI_IRQHandler+0x1f4>
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	095b      	lsrs	r3, r3, #5
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 80ad 	beq.w	800ab6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	099b      	lsrs	r3, r3, #6
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d023      	beq.n	800aa66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d011      	beq.n	800aa4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa2e:	f043 0204 	orr.w	r2, r3, #4
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa36:	2300      	movs	r3, #0
 800aa38:	617b      	str	r3, [r7, #20]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	617b      	str	r3, [r7, #20]
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	e00b      	b.n	800aa66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa4e:	2300      	movs	r3, #0
 800aa50:	613b      	str	r3, [r7, #16]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	613b      	str	r3, [r7, #16]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	693b      	ldr	r3, [r7, #16]
        return;
 800aa64:	e082      	b.n	800ab6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	095b      	lsrs	r3, r3, #5
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d014      	beq.n	800aa9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa76:	f043 0201 	orr.w	r2, r3, #1
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaac:	f043 0208 	orr.w	r2, r3, #8
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aab4:	2300      	movs	r3, #0
 800aab6:	60bb      	str	r3, [r7, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	60bb      	str	r3, [r7, #8]
 800aac0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d04f      	beq.n	800ab6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aad8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	f003 0302 	and.w	r3, r3, #2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d104      	bne.n	800aaf6 <HAL_SPI_IRQHandler+0x17e>
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d034      	beq.n	800ab60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0203 	bic.w	r2, r2, #3
 800ab04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d011      	beq.n	800ab32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab12:	4a18      	ldr	r2, [pc, #96]	@ (800ab74 <HAL_SPI_IRQHandler+0x1fc>)
 800ab14:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fc fac4 	bl	80070a8 <HAL_DMA_Abort_IT>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d016      	beq.n	800ab68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ab74 <HAL_SPI_IRQHandler+0x1fc>)
 800ab40:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fc faae 	bl	80070a8 <HAL_DMA_Abort_IT>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800ab5e:	e003      	b.n	800ab68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7fb f871 	bl	8005c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ab66:	e000      	b.n	800ab6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ab68:	bf00      	nop
    return;
 800ab6a:	bf00      	nop
  }
}
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	0800ad81 	.word	0x0800ad81

0800ab78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800abc2:	b2db      	uxtb	r3, r3
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abde:	f7fb fef1 	bl	80069c4 <HAL_GetTick>
 800abe2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d03c      	beq.n	800ac6c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0220 	bic.w	r2, r2, #32
 800ac00:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10d      	bne.n	800ac26 <SPI_DMAReceiveCplt+0x56>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac12:	d108      	bne.n	800ac26 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 0203 	bic.w	r2, r2, #3
 800ac22:	605a      	str	r2, [r3, #4]
 800ac24:	e007      	b.n	800ac36 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f022 0201 	bic.w	r2, r2, #1
 800ac34:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	2164      	movs	r1, #100	@ 0x64
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f9d4 	bl	800afe8 <SPI_EndRxTransaction>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7fa ffef 	bl	8005c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac6a:	e002      	b.n	800ac72 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff ff83 	bl	800ab78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac84:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac86:	f7fb fe9d 	bl	80069c4 <HAL_GetTick>
 800ac8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d030      	beq.n	800acfc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 0220 	bic.w	r2, r2, #32
 800aca8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	2164      	movs	r1, #100	@ 0x64
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 f9f2 	bl	800b098 <SPI_EndRxTxTransaction>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d005      	beq.n	800acc6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acbe:	f043 0220 	orr.w	r2, r3, #32
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0203 	bic.w	r2, r2, #3
 800acd4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d003      	beq.n	800acfc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7fa ffa7 	bl	8005c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800acfa:	e002      	b.n	800ad02 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7fa ff98 	bl	8005c32 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f7ff ff38 	bl	800ab8c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad1c:	bf00      	nop
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff ff34 	bl	800aba0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad38:	bf00      	nop
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f022 0203 	bic.w	r2, r2, #3
 800ad5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad62:	f043 0210 	orr.w	r2, r3, #16
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f7fa ff68 	bl	8005c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7fa ff53 	bl	8005c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ada2:	bf00      	nop
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	4613      	mov	r3, r2
 800adba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800adbc:	f7fb fe02 	bl	80069c4 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	1a9b      	subs	r3, r3, r2
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	4413      	add	r3, r2
 800adca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800adcc:	f7fb fdfa 	bl	80069c4 <HAL_GetTick>
 800add0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800add2:	4b39      	ldr	r3, [pc, #228]	@ (800aeb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	015b      	lsls	r3, r3, #5
 800add8:	0d1b      	lsrs	r3, r3, #20
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	fb02 f303 	mul.w	r3, r2, r3
 800ade0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ade2:	e054      	b.n	800ae8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adea:	d050      	beq.n	800ae8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800adec:	f7fb fdea 	bl	80069c4 <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d902      	bls.n	800ae02 <SPI_WaitFlagStateUntilTimeout+0x56>
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d13d      	bne.n	800ae7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ae10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae1a:	d111      	bne.n	800ae40 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae24:	d004      	beq.n	800ae30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae2e:	d107      	bne.n	800ae40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae48:	d10f      	bne.n	800ae6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e017      	b.n	800aeae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689a      	ldr	r2, [r3, #8]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4013      	ands	r3, r2
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	bf0c      	ite	eq
 800ae9e:	2301      	moveq	r3, #1
 800aea0:	2300      	movne	r3, #0
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d19b      	bne.n	800ade4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3720      	adds	r7, #32
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000014 	.word	0x20000014

0800aebc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08a      	sub	sp, #40	@ 0x28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800aece:	f7fb fd79 	bl	80069c4 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	1a9b      	subs	r3, r3, r2
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	4413      	add	r3, r2
 800aedc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800aede:	f7fb fd71 	bl	80069c4 <HAL_GetTick>
 800aee2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	330c      	adds	r3, #12
 800aeea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aeec:	4b3d      	ldr	r3, [pc, #244]	@ (800afe4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	00da      	lsls	r2, r3, #3
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	0d1b      	lsrs	r3, r3, #20
 800aefc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aefe:	fb02 f303 	mul.w	r3, r2, r3
 800af02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800af04:	e060      	b.n	800afc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800af0c:	d107      	bne.n	800af1e <SPI_WaitFifoStateUntilTimeout+0x62>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d104      	bne.n	800af1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d050      	beq.n	800afc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af26:	f7fb fd4d 	bl	80069c4 <HAL_GetTick>
 800af2a:	4602      	mov	r2, r0
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af32:	429a      	cmp	r2, r3
 800af34:	d902      	bls.n	800af3c <SPI_WaitFifoStateUntilTimeout+0x80>
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d13d      	bne.n	800afb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800af4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af54:	d111      	bne.n	800af7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af5e:	d004      	beq.n	800af6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af68:	d107      	bne.n	800af7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af82:	d10f      	bne.n	800afa4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800afa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e010      	b.n	800afda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	4013      	ands	r3, r2
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d196      	bne.n	800af06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3728      	adds	r7, #40	@ 0x28
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000014 	.word	0x20000014

0800afe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af02      	add	r7, sp, #8
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800affc:	d111      	bne.n	800b022 <SPI_EndRxTransaction+0x3a>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b006:	d004      	beq.n	800b012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b010:	d107      	bne.n	800b022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b020:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2200      	movs	r2, #0
 800b02a:	2180      	movs	r1, #128	@ 0x80
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f7ff febd 	bl	800adac <SPI_WaitFlagStateUntilTimeout>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d007      	beq.n	800b048 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b03c:	f043 0220 	orr.w	r2, r3, #32
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e023      	b.n	800b090 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b050:	d11d      	bne.n	800b08e <SPI_EndRxTransaction+0xa6>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b05a:	d004      	beq.n	800b066 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b064:	d113      	bne.n	800b08e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff ff22 	bl	800aebc <SPI_WaitFifoStateUntilTimeout>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b082:	f043 0220 	orr.w	r2, r3, #32
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e000      	b.n	800b090 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7ff ff03 	bl	800aebc <SPI_WaitFifoStateUntilTimeout>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d007      	beq.n	800b0cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0c0:	f043 0220 	orr.w	r2, r3, #32
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e027      	b.n	800b11c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2180      	movs	r1, #128	@ 0x80
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7ff fe68 	bl	800adac <SPI_WaitFlagStateUntilTimeout>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d007      	beq.n	800b0f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0e6:	f043 0220 	orr.w	r2, r3, #32
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e014      	b.n	800b11c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff fedc 	bl	800aebc <SPI_WaitFifoStateUntilTimeout>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d007      	beq.n	800b11a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b10e:	f043 0220 	orr.w	r2, r3, #32
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e000      	b.n	800b11c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e0e6      	b.n	800b304 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a74      	ldr	r2, [pc, #464]	@ (800b30c <HAL_TIM_Base_Init+0x1e8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d036      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b148:	d031      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a70      	ldr	r2, [pc, #448]	@ (800b310 <HAL_TIM_Base_Init+0x1ec>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d02c      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a6e      	ldr	r2, [pc, #440]	@ (800b314 <HAL_TIM_Base_Init+0x1f0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d027      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a6d      	ldr	r2, [pc, #436]	@ (800b318 <HAL_TIM_Base_Init+0x1f4>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d022      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a6b      	ldr	r2, [pc, #428]	@ (800b31c <HAL_TIM_Base_Init+0x1f8>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d01d      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a6a      	ldr	r2, [pc, #424]	@ (800b320 <HAL_TIM_Base_Init+0x1fc>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d018      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a68      	ldr	r2, [pc, #416]	@ (800b324 <HAL_TIM_Base_Init+0x200>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d013      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a67      	ldr	r2, [pc, #412]	@ (800b328 <HAL_TIM_Base_Init+0x204>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d00e      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a65      	ldr	r2, [pc, #404]	@ (800b32c <HAL_TIM_Base_Init+0x208>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d009      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a64      	ldr	r2, [pc, #400]	@ (800b330 <HAL_TIM_Base_Init+0x20c>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d004      	beq.n	800b1ae <HAL_TIM_Base_Init+0x8a>
 800b1a4:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800b1a8:	4862      	ldr	r0, [pc, #392]	@ (800b334 <HAL_TIM_Base_Init+0x210>)
 800b1aa:	f7fa fde1 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d014      	beq.n	800b1e0 <HAL_TIM_Base_Init+0xbc>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	2b10      	cmp	r3, #16
 800b1bc:	d010      	beq.n	800b1e0 <HAL_TIM_Base_Init+0xbc>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	d00c      	beq.n	800b1e0 <HAL_TIM_Base_Init+0xbc>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	2b40      	cmp	r3, #64	@ 0x40
 800b1cc:	d008      	beq.n	800b1e0 <HAL_TIM_Base_Init+0xbc>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	2b60      	cmp	r3, #96	@ 0x60
 800b1d4:	d004      	beq.n	800b1e0 <HAL_TIM_Base_Init+0xbc>
 800b1d6:	f240 1117 	movw	r1, #279	@ 0x117
 800b1da:	4856      	ldr	r0, [pc, #344]	@ (800b334 <HAL_TIM_Base_Init+0x210>)
 800b1dc:	f7fa fdc8 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00e      	beq.n	800b206 <HAL_TIM_Base_Init+0xe2>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1f0:	d009      	beq.n	800b206 <HAL_TIM_Base_Init+0xe2>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1fa:	d004      	beq.n	800b206 <HAL_TIM_Base_Init+0xe2>
 800b1fc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800b200:	484c      	ldr	r0, [pc, #304]	@ (800b334 <HAL_TIM_Base_Init+0x210>)
 800b202:	f7fa fdb5 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b20e:	d004      	beq.n	800b21a <HAL_TIM_Base_Init+0xf6>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a40      	ldr	r2, [pc, #256]	@ (800b318 <HAL_TIM_Base_Init+0x1f4>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d107      	bne.n	800b22a <HAL_TIM_Base_Init+0x106>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bf14      	ite	ne
 800b222:	2301      	movne	r3, #1
 800b224:	2300      	moveq	r3, #0
 800b226:	b2db      	uxtb	r3, r3
 800b228:	e00e      	b.n	800b248 <HAL_TIM_Base_Init+0x124>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d006      	beq.n	800b240 <HAL_TIM_Base_Init+0x11c>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b23a:	d201      	bcs.n	800b240 <HAL_TIM_Base_Init+0x11c>
 800b23c:	2301      	movs	r3, #1
 800b23e:	e000      	b.n	800b242 <HAL_TIM_Base_Init+0x11e>
 800b240:	2300      	movs	r3, #0
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d104      	bne.n	800b256 <HAL_TIM_Base_Init+0x132>
 800b24c:	f240 1119 	movw	r1, #281	@ 0x119
 800b250:	4838      	ldr	r0, [pc, #224]	@ (800b334 <HAL_TIM_Base_Init+0x210>)
 800b252:	f7fa fd8d 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d008      	beq.n	800b270 <HAL_TIM_Base_Init+0x14c>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	2b80      	cmp	r3, #128	@ 0x80
 800b264:	d004      	beq.n	800b270 <HAL_TIM_Base_Init+0x14c>
 800b266:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800b26a:	4832      	ldr	r0, [pc, #200]	@ (800b334 <HAL_TIM_Base_Init+0x210>)
 800b26c:	f7fa fd80 	bl	8005d70 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7fb f9d1 	bl	800662c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f001 ff43 	bl	800d128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	40012c00 	.word	0x40012c00
 800b310:	40000400 	.word	0x40000400
 800b314:	40000800 	.word	0x40000800
 800b318:	40000c00 	.word	0x40000c00
 800b31c:	40001000 	.word	0x40001000
 800b320:	40001400 	.word	0x40001400
 800b324:	40013400 	.word	0x40013400
 800b328:	40014000 	.word	0x40014000
 800b32c:	40014400 	.word	0x40014400
 800b330:	40014800 	.word	0x40014800
 800b334:	08010c0c 	.word	0x08010c0c

0800b338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a4a      	ldr	r2, [pc, #296]	@ (800b470 <HAL_TIM_Base_Start_IT+0x138>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d036      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b352:	d031      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a46      	ldr	r2, [pc, #280]	@ (800b474 <HAL_TIM_Base_Start_IT+0x13c>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d02c      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a45      	ldr	r2, [pc, #276]	@ (800b478 <HAL_TIM_Base_Start_IT+0x140>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d027      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a43      	ldr	r2, [pc, #268]	@ (800b47c <HAL_TIM_Base_Start_IT+0x144>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d022      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a42      	ldr	r2, [pc, #264]	@ (800b480 <HAL_TIM_Base_Start_IT+0x148>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d01d      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a40      	ldr	r2, [pc, #256]	@ (800b484 <HAL_TIM_Base_Start_IT+0x14c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d018      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a3f      	ldr	r2, [pc, #252]	@ (800b488 <HAL_TIM_Base_Start_IT+0x150>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d013      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a3d      	ldr	r2, [pc, #244]	@ (800b48c <HAL_TIM_Base_Start_IT+0x154>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d00e      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a3c      	ldr	r2, [pc, #240]	@ (800b490 <HAL_TIM_Base_Start_IT+0x158>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d009      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a3a      	ldr	r2, [pc, #232]	@ (800b494 <HAL_TIM_Base_Start_IT+0x15c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d004      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x80>
 800b3ae:	f240 11d3 	movw	r1, #467	@ 0x1d3
 800b3b2:	4839      	ldr	r0, [pc, #228]	@ (800b498 <HAL_TIM_Base_Start_IT+0x160>)
 800b3b4:	f7fa fcdc 	bl	8005d70 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d001      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e04f      	b.n	800b468 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68da      	ldr	r2, [r3, #12]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f042 0201 	orr.w	r2, r2, #1
 800b3de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a22      	ldr	r2, [pc, #136]	@ (800b470 <HAL_TIM_Base_Start_IT+0x138>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d01d      	beq.n	800b426 <HAL_TIM_Base_Start_IT+0xee>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f2:	d018      	beq.n	800b426 <HAL_TIM_Base_Start_IT+0xee>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b474 <HAL_TIM_Base_Start_IT+0x13c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d013      	beq.n	800b426 <HAL_TIM_Base_Start_IT+0xee>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a1d      	ldr	r2, [pc, #116]	@ (800b478 <HAL_TIM_Base_Start_IT+0x140>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d00e      	beq.n	800b426 <HAL_TIM_Base_Start_IT+0xee>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a1b      	ldr	r2, [pc, #108]	@ (800b47c <HAL_TIM_Base_Start_IT+0x144>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d009      	beq.n	800b426 <HAL_TIM_Base_Start_IT+0xee>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a1c      	ldr	r2, [pc, #112]	@ (800b488 <HAL_TIM_Base_Start_IT+0x150>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d004      	beq.n	800b426 <HAL_TIM_Base_Start_IT+0xee>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a1a      	ldr	r2, [pc, #104]	@ (800b48c <HAL_TIM_Base_Start_IT+0x154>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d115      	bne.n	800b452 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	4b1b      	ldr	r3, [pc, #108]	@ (800b49c <HAL_TIM_Base_Start_IT+0x164>)
 800b42e:	4013      	ands	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b06      	cmp	r3, #6
 800b436:	d015      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x12c>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b43e:	d011      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0201 	orr.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b450:	e008      	b.n	800b464 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f042 0201 	orr.w	r2, r2, #1
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	e000      	b.n	800b466 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b464:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	40012c00 	.word	0x40012c00
 800b474:	40000400 	.word	0x40000400
 800b478:	40000800 	.word	0x40000800
 800b47c:	40000c00 	.word	0x40000c00
 800b480:	40001000 	.word	0x40001000
 800b484:	40001400 	.word	0x40001400
 800b488:	40013400 	.word	0x40013400
 800b48c:	40014000 	.word	0x40014000
 800b490:	40014400 	.word	0x40014400
 800b494:	40014800 	.word	0x40014800
 800b498:	08010c0c 	.word	0x08010c0c
 800b49c:	00010007 	.word	0x00010007

0800b4a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a31      	ldr	r2, [pc, #196]	@ (800b574 <HAL_TIM_Base_Stop_IT+0xd4>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d036      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ba:	d031      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b578 <HAL_TIM_Base_Stop_IT+0xd8>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d02c      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a2c      	ldr	r2, [pc, #176]	@ (800b57c <HAL_TIM_Base_Stop_IT+0xdc>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d027      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a2a      	ldr	r2, [pc, #168]	@ (800b580 <HAL_TIM_Base_Stop_IT+0xe0>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d022      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a29      	ldr	r2, [pc, #164]	@ (800b584 <HAL_TIM_Base_Stop_IT+0xe4>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d01d      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a27      	ldr	r2, [pc, #156]	@ (800b588 <HAL_TIM_Base_Stop_IT+0xe8>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d018      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a26      	ldr	r2, [pc, #152]	@ (800b58c <HAL_TIM_Base_Stop_IT+0xec>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d013      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a24      	ldr	r2, [pc, #144]	@ (800b590 <HAL_TIM_Base_Stop_IT+0xf0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00e      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a23      	ldr	r2, [pc, #140]	@ (800b594 <HAL_TIM_Base_Stop_IT+0xf4>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d009      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a21      	ldr	r2, [pc, #132]	@ (800b598 <HAL_TIM_Base_Stop_IT+0xf8>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <HAL_TIM_Base_Stop_IT+0x80>
 800b516:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800b51a:	4820      	ldr	r0, [pc, #128]	@ (800b59c <HAL_TIM_Base_Stop_IT+0xfc>)
 800b51c:	f7fa fc28 	bl	8005d70 <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 0201 	bic.w	r2, r2, #1
 800b52e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6a1a      	ldr	r2, [r3, #32]
 800b536:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b53a:	4013      	ands	r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10f      	bne.n	800b560 <HAL_TIM_Base_Stop_IT+0xc0>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6a1a      	ldr	r2, [r3, #32]
 800b546:	f240 4344 	movw	r3, #1092	@ 0x444
 800b54a:	4013      	ands	r3, r2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d107      	bne.n	800b560 <HAL_TIM_Base_Stop_IT+0xc0>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 0201 	bic.w	r2, r2, #1
 800b55e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40000400 	.word	0x40000400
 800b57c:	40000800 	.word	0x40000800
 800b580:	40000c00 	.word	0x40000c00
 800b584:	40001000 	.word	0x40001000
 800b588:	40001400 	.word	0x40001400
 800b58c:	40013400 	.word	0x40013400
 800b590:	40014000 	.word	0x40014000
 800b594:	40014400 	.word	0x40014400
 800b598:	40014800 	.word	0x40014800
 800b59c:	08010c0c 	.word	0x08010c0c

0800b5a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e0e6      	b.n	800b780 <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a74      	ldr	r2, [pc, #464]	@ (800b788 <HAL_TIM_PWM_Init+0x1e8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d036      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5c4:	d031      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a70      	ldr	r2, [pc, #448]	@ (800b78c <HAL_TIM_PWM_Init+0x1ec>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d02c      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a6e      	ldr	r2, [pc, #440]	@ (800b790 <HAL_TIM_PWM_Init+0x1f0>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d027      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a6d      	ldr	r2, [pc, #436]	@ (800b794 <HAL_TIM_PWM_Init+0x1f4>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d022      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a6b      	ldr	r2, [pc, #428]	@ (800b798 <HAL_TIM_PWM_Init+0x1f8>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d01d      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a6a      	ldr	r2, [pc, #424]	@ (800b79c <HAL_TIM_PWM_Init+0x1fc>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d018      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a68      	ldr	r2, [pc, #416]	@ (800b7a0 <HAL_TIM_PWM_Init+0x200>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d013      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a67      	ldr	r2, [pc, #412]	@ (800b7a4 <HAL_TIM_PWM_Init+0x204>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00e      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a65      	ldr	r2, [pc, #404]	@ (800b7a8 <HAL_TIM_PWM_Init+0x208>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d009      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a64      	ldr	r2, [pc, #400]	@ (800b7ac <HAL_TIM_PWM_Init+0x20c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d004      	beq.n	800b62a <HAL_TIM_PWM_Init+0x8a>
 800b620:	f240 5133 	movw	r1, #1331	@ 0x533
 800b624:	4862      	ldr	r0, [pc, #392]	@ (800b7b0 <HAL_TIM_PWM_Init+0x210>)
 800b626:	f7fa fba3 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d014      	beq.n	800b65c <HAL_TIM_PWM_Init+0xbc>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	2b10      	cmp	r3, #16
 800b638:	d010      	beq.n	800b65c <HAL_TIM_PWM_Init+0xbc>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	2b20      	cmp	r3, #32
 800b640:	d00c      	beq.n	800b65c <HAL_TIM_PWM_Init+0xbc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	2b40      	cmp	r3, #64	@ 0x40
 800b648:	d008      	beq.n	800b65c <HAL_TIM_PWM_Init+0xbc>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	2b60      	cmp	r3, #96	@ 0x60
 800b650:	d004      	beq.n	800b65c <HAL_TIM_PWM_Init+0xbc>
 800b652:	f240 5134 	movw	r1, #1332	@ 0x534
 800b656:	4856      	ldr	r0, [pc, #344]	@ (800b7b0 <HAL_TIM_PWM_Init+0x210>)
 800b658:	f7fa fb8a 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00e      	beq.n	800b682 <HAL_TIM_PWM_Init+0xe2>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b66c:	d009      	beq.n	800b682 <HAL_TIM_PWM_Init+0xe2>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b676:	d004      	beq.n	800b682 <HAL_TIM_PWM_Init+0xe2>
 800b678:	f240 5135 	movw	r1, #1333	@ 0x535
 800b67c:	484c      	ldr	r0, [pc, #304]	@ (800b7b0 <HAL_TIM_PWM_Init+0x210>)
 800b67e:	f7fa fb77 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b68a:	d004      	beq.n	800b696 <HAL_TIM_PWM_Init+0xf6>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a40      	ldr	r2, [pc, #256]	@ (800b794 <HAL_TIM_PWM_Init+0x1f4>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d107      	bne.n	800b6a6 <HAL_TIM_PWM_Init+0x106>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	bf14      	ite	ne
 800b69e:	2301      	movne	r3, #1
 800b6a0:	2300      	moveq	r3, #0
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	e00e      	b.n	800b6c4 <HAL_TIM_PWM_Init+0x124>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d006      	beq.n	800b6bc <HAL_TIM_PWM_Init+0x11c>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b6:	d201      	bcs.n	800b6bc <HAL_TIM_PWM_Init+0x11c>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e000      	b.n	800b6be <HAL_TIM_PWM_Init+0x11e>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d104      	bne.n	800b6d2 <HAL_TIM_PWM_Init+0x132>
 800b6c8:	f240 5136 	movw	r1, #1334	@ 0x536
 800b6cc:	4838      	ldr	r0, [pc, #224]	@ (800b7b0 <HAL_TIM_PWM_Init+0x210>)
 800b6ce:	f7fa fb4f 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d008      	beq.n	800b6ec <HAL_TIM_PWM_Init+0x14c>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	2b80      	cmp	r3, #128	@ 0x80
 800b6e0:	d004      	beq.n	800b6ec <HAL_TIM_PWM_Init+0x14c>
 800b6e2:	f240 5137 	movw	r1, #1335	@ 0x537
 800b6e6:	4832      	ldr	r0, [pc, #200]	@ (800b7b0 <HAL_TIM_PWM_Init+0x210>)
 800b6e8:	f7fa fb42 	bl	8005d70 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d106      	bne.n	800b706 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f857 	bl	800b7b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3304      	adds	r3, #4
 800b716:	4619      	mov	r1, r3
 800b718:	4610      	mov	r0, r2
 800b71a:	f001 fd05 	bl	800d128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	40012c00 	.word	0x40012c00
 800b78c:	40000400 	.word	0x40000400
 800b790:	40000800 	.word	0x40000800
 800b794:	40000c00 	.word	0x40000c00
 800b798:	40001000 	.word	0x40001000
 800b79c:	40001400 	.word	0x40001400
 800b7a0:	40013400 	.word	0x40013400
 800b7a4:	40014000 	.word	0x40014000
 800b7a8:	40014400 	.word	0x40014400
 800b7ac:	40014800 	.word	0x40014800
 800b7b0:	08010c0c 	.word	0x08010c0c

0800b7b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a85      	ldr	r2, [pc, #532]	@ (800b9ec <HAL_TIM_PWM_Start+0x224>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d115      	bne.n	800b808 <HAL_TIM_PWM_Start+0x40>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 808d 	beq.w	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	f000 8089 	beq.w	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b08      	cmp	r3, #8
 800b7f0:	f000 8085 	beq.w	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b0c      	cmp	r3, #12
 800b7f8:	f000 8081 	beq.w	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d07d      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b14      	cmp	r3, #20
 800b806:	d07a      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b810:	d10b      	bne.n	800b82a <HAL_TIM_PWM_Start+0x62>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d072      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d06f      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b08      	cmp	r3, #8
 800b822:	d06c      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2b0c      	cmp	r3, #12
 800b828:	d069      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a70      	ldr	r2, [pc, #448]	@ (800b9f0 <HAL_TIM_PWM_Start+0x228>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d10b      	bne.n	800b84c <HAL_TIM_PWM_Start+0x84>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d061      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d05e      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b08      	cmp	r3, #8
 800b844:	d05b      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b0c      	cmp	r3, #12
 800b84a:	d058      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a68      	ldr	r2, [pc, #416]	@ (800b9f4 <HAL_TIM_PWM_Start+0x22c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d10b      	bne.n	800b86e <HAL_TIM_PWM_Start+0xa6>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d050      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d04d      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b08      	cmp	r3, #8
 800b866:	d04a      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b0c      	cmp	r3, #12
 800b86c:	d047      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a61      	ldr	r2, [pc, #388]	@ (800b9f8 <HAL_TIM_PWM_Start+0x230>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d10b      	bne.n	800b890 <HAL_TIM_PWM_Start+0xc8>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d03f      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2b04      	cmp	r3, #4
 800b882:	d03c      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b08      	cmp	r3, #8
 800b888:	d039      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b0c      	cmp	r3, #12
 800b88e:	d036      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a59      	ldr	r2, [pc, #356]	@ (800b9fc <HAL_TIM_PWM_Start+0x234>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d111      	bne.n	800b8be <HAL_TIM_PWM_Start+0xf6>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d02e      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d02b      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b08      	cmp	r3, #8
 800b8aa:	d028      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2b0c      	cmp	r3, #12
 800b8b0:	d025      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b10      	cmp	r3, #16
 800b8b6:	d022      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2b14      	cmp	r3, #20
 800b8bc:	d01f      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a4f      	ldr	r2, [pc, #316]	@ (800ba00 <HAL_TIM_PWM_Start+0x238>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d105      	bne.n	800b8d4 <HAL_TIM_PWM_Start+0x10c>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d017      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b04      	cmp	r3, #4
 800b8d2:	d014      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a4a      	ldr	r2, [pc, #296]	@ (800ba04 <HAL_TIM_PWM_Start+0x23c>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d102      	bne.n	800b8e4 <HAL_TIM_PWM_Start+0x11c>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00c      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a47      	ldr	r2, [pc, #284]	@ (800ba08 <HAL_TIM_PWM_Start+0x240>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d102      	bne.n	800b8f4 <HAL_TIM_PWM_Start+0x12c>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x136>
 800b8f4:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800b8f8:	4844      	ldr	r0, [pc, #272]	@ (800ba0c <HAL_TIM_PWM_Start+0x244>)
 800b8fa:	f7fa fa39 	bl	8005d70 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d109      	bne.n	800b918 <HAL_TIM_PWM_Start+0x150>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	bf14      	ite	ne
 800b910:	2301      	movne	r3, #1
 800b912:	2300      	moveq	r3, #0
 800b914:	b2db      	uxtb	r3, r3
 800b916:	e03c      	b.n	800b992 <HAL_TIM_PWM_Start+0x1ca>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d109      	bne.n	800b932 <HAL_TIM_PWM_Start+0x16a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b01      	cmp	r3, #1
 800b928:	bf14      	ite	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	2300      	moveq	r3, #0
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	e02f      	b.n	800b992 <HAL_TIM_PWM_Start+0x1ca>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b08      	cmp	r3, #8
 800b936:	d109      	bne.n	800b94c <HAL_TIM_PWM_Start+0x184>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b01      	cmp	r3, #1
 800b942:	bf14      	ite	ne
 800b944:	2301      	movne	r3, #1
 800b946:	2300      	moveq	r3, #0
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	e022      	b.n	800b992 <HAL_TIM_PWM_Start+0x1ca>
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b0c      	cmp	r3, #12
 800b950:	d109      	bne.n	800b966 <HAL_TIM_PWM_Start+0x19e>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	bf14      	ite	ne
 800b95e:	2301      	movne	r3, #1
 800b960:	2300      	moveq	r3, #0
 800b962:	b2db      	uxtb	r3, r3
 800b964:	e015      	b.n	800b992 <HAL_TIM_PWM_Start+0x1ca>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b10      	cmp	r3, #16
 800b96a:	d109      	bne.n	800b980 <HAL_TIM_PWM_Start+0x1b8>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b01      	cmp	r3, #1
 800b976:	bf14      	ite	ne
 800b978:	2301      	movne	r3, #1
 800b97a:	2300      	moveq	r3, #0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	e008      	b.n	800b992 <HAL_TIM_PWM_Start+0x1ca>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b01      	cmp	r3, #1
 800b98a:	bf14      	ite	ne
 800b98c:	2301      	movne	r3, #1
 800b98e:	2300      	moveq	r3, #0
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e0af      	b.n	800bafa <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d104      	bne.n	800b9aa <HAL_TIM_PWM_Start+0x1e2>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9a8:	e036      	b.n	800ba18 <HAL_TIM_PWM_Start+0x250>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d104      	bne.n	800b9ba <HAL_TIM_PWM_Start+0x1f2>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9b8:	e02e      	b.n	800ba18 <HAL_TIM_PWM_Start+0x250>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b08      	cmp	r3, #8
 800b9be:	d104      	bne.n	800b9ca <HAL_TIM_PWM_Start+0x202>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9c8:	e026      	b.n	800ba18 <HAL_TIM_PWM_Start+0x250>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b0c      	cmp	r3, #12
 800b9ce:	d104      	bne.n	800b9da <HAL_TIM_PWM_Start+0x212>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9d8:	e01e      	b.n	800ba18 <HAL_TIM_PWM_Start+0x250>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b10      	cmp	r3, #16
 800b9de:	d117      	bne.n	800ba10 <HAL_TIM_PWM_Start+0x248>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9e8:	e016      	b.n	800ba18 <HAL_TIM_PWM_Start+0x250>
 800b9ea:	bf00      	nop
 800b9ec:	40012c00 	.word	0x40012c00
 800b9f0:	40000400 	.word	0x40000400
 800b9f4:	40000800 	.word	0x40000800
 800b9f8:	40000c00 	.word	0x40000c00
 800b9fc:	40013400 	.word	0x40013400
 800ba00:	40014000 	.word	0x40014000
 800ba04:	40014400 	.word	0x40014400
 800ba08:	40014800 	.word	0x40014800
 800ba0c:	08010c0c 	.word	0x08010c0c
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f002 f821 	bl	800da68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a36      	ldr	r2, [pc, #216]	@ (800bb04 <HAL_TIM_PWM_Start+0x33c>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d013      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x290>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a34      	ldr	r2, [pc, #208]	@ (800bb08 <HAL_TIM_PWM_Start+0x340>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00e      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x290>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a33      	ldr	r2, [pc, #204]	@ (800bb0c <HAL_TIM_PWM_Start+0x344>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d009      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x290>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a31      	ldr	r2, [pc, #196]	@ (800bb10 <HAL_TIM_PWM_Start+0x348>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d004      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x290>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a30      	ldr	r2, [pc, #192]	@ (800bb14 <HAL_TIM_PWM_Start+0x34c>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d101      	bne.n	800ba5c <HAL_TIM_PWM_Start+0x294>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <HAL_TIM_PWM_Start+0x296>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d007      	beq.n	800ba72 <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a23      	ldr	r2, [pc, #140]	@ (800bb04 <HAL_TIM_PWM_Start+0x33c>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d01d      	beq.n	800bab8 <HAL_TIM_PWM_Start+0x2f0>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba84:	d018      	beq.n	800bab8 <HAL_TIM_PWM_Start+0x2f0>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a23      	ldr	r2, [pc, #140]	@ (800bb18 <HAL_TIM_PWM_Start+0x350>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d013      	beq.n	800bab8 <HAL_TIM_PWM_Start+0x2f0>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a21      	ldr	r2, [pc, #132]	@ (800bb1c <HAL_TIM_PWM_Start+0x354>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d00e      	beq.n	800bab8 <HAL_TIM_PWM_Start+0x2f0>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a20      	ldr	r2, [pc, #128]	@ (800bb20 <HAL_TIM_PWM_Start+0x358>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d009      	beq.n	800bab8 <HAL_TIM_PWM_Start+0x2f0>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a17      	ldr	r2, [pc, #92]	@ (800bb08 <HAL_TIM_PWM_Start+0x340>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d004      	beq.n	800bab8 <HAL_TIM_PWM_Start+0x2f0>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a16      	ldr	r2, [pc, #88]	@ (800bb0c <HAL_TIM_PWM_Start+0x344>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d115      	bne.n	800bae4 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	689a      	ldr	r2, [r3, #8]
 800babe:	4b19      	ldr	r3, [pc, #100]	@ (800bb24 <HAL_TIM_PWM_Start+0x35c>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b06      	cmp	r3, #6
 800bac8:	d015      	beq.n	800baf6 <HAL_TIM_PWM_Start+0x32e>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bad0:	d011      	beq.n	800baf6 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0201 	orr.w	r2, r2, #1
 800bae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae2:	e008      	b.n	800baf6 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0201 	orr.w	r2, r2, #1
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	e000      	b.n	800baf8 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	40012c00 	.word	0x40012c00
 800bb08:	40013400 	.word	0x40013400
 800bb0c:	40014000 	.word	0x40014000
 800bb10:	40014400 	.word	0x40014400
 800bb14:	40014800 	.word	0x40014800
 800bb18:	40000400 	.word	0x40000400
 800bb1c:	40000800 	.word	0x40000800
 800bb20:	40000c00 	.word	0x40000c00
 800bb24:	00010007 	.word	0x00010007

0800bb28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a8d      	ldr	r2, [pc, #564]	@ (800bd6c <HAL_TIM_PWM_Stop+0x244>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d115      	bne.n	800bb68 <HAL_TIM_PWM_Stop+0x40>
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 808d 	beq.w	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	f000 8089 	beq.w	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b08      	cmp	r3, #8
 800bb50:	f000 8085 	beq.w	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	2b0c      	cmp	r3, #12
 800bb58:	f000 8081 	beq.w	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b10      	cmp	r3, #16
 800bb60:	d07d      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b14      	cmp	r3, #20
 800bb66:	d07a      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb70:	d10b      	bne.n	800bb8a <HAL_TIM_PWM_Stop+0x62>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d072      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	d06f      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d06c      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b0c      	cmp	r3, #12
 800bb88:	d069      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a78      	ldr	r2, [pc, #480]	@ (800bd70 <HAL_TIM_PWM_Stop+0x248>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d10b      	bne.n	800bbac <HAL_TIM_PWM_Stop+0x84>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d061      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d05e      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b08      	cmp	r3, #8
 800bba4:	d05b      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b0c      	cmp	r3, #12
 800bbaa:	d058      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a70      	ldr	r2, [pc, #448]	@ (800bd74 <HAL_TIM_PWM_Stop+0x24c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d10b      	bne.n	800bbce <HAL_TIM_PWM_Stop+0xa6>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d050      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	d04d      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b08      	cmp	r3, #8
 800bbc6:	d04a      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b0c      	cmp	r3, #12
 800bbcc:	d047      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a69      	ldr	r2, [pc, #420]	@ (800bd78 <HAL_TIM_PWM_Stop+0x250>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d10b      	bne.n	800bbf0 <HAL_TIM_PWM_Stop+0xc8>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d03f      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d03c      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b08      	cmp	r3, #8
 800bbe8:	d039      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b0c      	cmp	r3, #12
 800bbee:	d036      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a61      	ldr	r2, [pc, #388]	@ (800bd7c <HAL_TIM_PWM_Stop+0x254>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d111      	bne.n	800bc1e <HAL_TIM_PWM_Stop+0xf6>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d02e      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d02b      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d028      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b0c      	cmp	r3, #12
 800bc10:	d025      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b10      	cmp	r3, #16
 800bc16:	d022      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2b14      	cmp	r3, #20
 800bc1c:	d01f      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a57      	ldr	r2, [pc, #348]	@ (800bd80 <HAL_TIM_PWM_Stop+0x258>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d105      	bne.n	800bc34 <HAL_TIM_PWM_Stop+0x10c>
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d017      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2b04      	cmp	r3, #4
 800bc32:	d014      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a52      	ldr	r2, [pc, #328]	@ (800bd84 <HAL_TIM_PWM_Stop+0x25c>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d102      	bne.n	800bc44 <HAL_TIM_PWM_Stop+0x11c>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00c      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a4f      	ldr	r2, [pc, #316]	@ (800bd88 <HAL_TIM_PWM_Stop+0x260>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d102      	bne.n	800bc54 <HAL_TIM_PWM_Stop+0x12c>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <HAL_TIM_PWM_Stop+0x136>
 800bc54:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800bc58:	484c      	ldr	r0, [pc, #304]	@ (800bd8c <HAL_TIM_PWM_Stop+0x264>)
 800bc5a:	f7fa f889 	bl	8005d70 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2200      	movs	r2, #0
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 fefe 	bl	800da68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a3e      	ldr	r2, [pc, #248]	@ (800bd6c <HAL_TIM_PWM_Stop+0x244>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d013      	beq.n	800bc9e <HAL_TIM_PWM_Stop+0x176>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a40      	ldr	r2, [pc, #256]	@ (800bd7c <HAL_TIM_PWM_Stop+0x254>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d00e      	beq.n	800bc9e <HAL_TIM_PWM_Stop+0x176>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a3e      	ldr	r2, [pc, #248]	@ (800bd80 <HAL_TIM_PWM_Stop+0x258>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d009      	beq.n	800bc9e <HAL_TIM_PWM_Stop+0x176>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a3d      	ldr	r2, [pc, #244]	@ (800bd84 <HAL_TIM_PWM_Stop+0x25c>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d004      	beq.n	800bc9e <HAL_TIM_PWM_Stop+0x176>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a3b      	ldr	r2, [pc, #236]	@ (800bd88 <HAL_TIM_PWM_Stop+0x260>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d101      	bne.n	800bca2 <HAL_TIM_PWM_Stop+0x17a>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <HAL_TIM_PWM_Stop+0x17c>
 800bca2:	2300      	movs	r3, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d017      	beq.n	800bcd8 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6a1a      	ldr	r2, [r3, #32]
 800bcae:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10f      	bne.n	800bcd8 <HAL_TIM_PWM_Stop+0x1b0>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6a1a      	ldr	r2, [r3, #32]
 800bcbe:	f240 4344 	movw	r3, #1092	@ 0x444
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d107      	bne.n	800bcd8 <HAL_TIM_PWM_Stop+0x1b0>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bcd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6a1a      	ldr	r2, [r3, #32]
 800bcde:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bce2:	4013      	ands	r3, r2
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10f      	bne.n	800bd08 <HAL_TIM_PWM_Stop+0x1e0>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6a1a      	ldr	r2, [r3, #32]
 800bcee:	f240 4344 	movw	r3, #1092	@ 0x444
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d107      	bne.n	800bd08 <HAL_TIM_PWM_Stop+0x1e0>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 0201 	bic.w	r2, r2, #1
 800bd06:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d104      	bne.n	800bd18 <HAL_TIM_PWM_Stop+0x1f0>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd16:	e023      	b.n	800bd60 <HAL_TIM_PWM_Stop+0x238>
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d104      	bne.n	800bd28 <HAL_TIM_PWM_Stop+0x200>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd26:	e01b      	b.n	800bd60 <HAL_TIM_PWM_Stop+0x238>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2b08      	cmp	r3, #8
 800bd2c:	d104      	bne.n	800bd38 <HAL_TIM_PWM_Stop+0x210>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd36:	e013      	b.n	800bd60 <HAL_TIM_PWM_Stop+0x238>
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b0c      	cmp	r3, #12
 800bd3c:	d104      	bne.n	800bd48 <HAL_TIM_PWM_Stop+0x220>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd46:	e00b      	b.n	800bd60 <HAL_TIM_PWM_Stop+0x238>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b10      	cmp	r3, #16
 800bd4c:	d104      	bne.n	800bd58 <HAL_TIM_PWM_Stop+0x230>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd56:	e003      	b.n	800bd60 <HAL_TIM_PWM_Stop+0x238>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	40012c00 	.word	0x40012c00
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40000c00 	.word	0x40000c00
 800bd7c:	40013400 	.word	0x40013400
 800bd80:	40014000 	.word	0x40014000
 800bd84:	40014400 	.word	0x40014400
 800bd88:	40014800 	.word	0x40014800
 800bd8c:	08010c0c 	.word	0x08010c0c

0800bd90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e1b0      	b.n	800c106 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a7f      	ldr	r2, [pc, #508]	@ (800bfa8 <HAL_TIM_Encoder_Init+0x218>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d01d      	beq.n	800bdea <HAL_TIM_Encoder_Init+0x5a>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdb6:	d018      	beq.n	800bdea <HAL_TIM_Encoder_Init+0x5a>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a7b      	ldr	r2, [pc, #492]	@ (800bfac <HAL_TIM_Encoder_Init+0x21c>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d013      	beq.n	800bdea <HAL_TIM_Encoder_Init+0x5a>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a7a      	ldr	r2, [pc, #488]	@ (800bfb0 <HAL_TIM_Encoder_Init+0x220>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d00e      	beq.n	800bdea <HAL_TIM_Encoder_Init+0x5a>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a78      	ldr	r2, [pc, #480]	@ (800bfb4 <HAL_TIM_Encoder_Init+0x224>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d009      	beq.n	800bdea <HAL_TIM_Encoder_Init+0x5a>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a77      	ldr	r2, [pc, #476]	@ (800bfb8 <HAL_TIM_Encoder_Init+0x228>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d004      	beq.n	800bdea <HAL_TIM_Encoder_Init+0x5a>
 800bde0:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800bde4:	4875      	ldr	r0, [pc, #468]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bde6:	f7f9 ffc3 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d014      	beq.n	800be1c <HAL_TIM_Encoder_Init+0x8c>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	2b10      	cmp	r3, #16
 800bdf8:	d010      	beq.n	800be1c <HAL_TIM_Encoder_Init+0x8c>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d00c      	beq.n	800be1c <HAL_TIM_Encoder_Init+0x8c>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	2b40      	cmp	r3, #64	@ 0x40
 800be08:	d008      	beq.n	800be1c <HAL_TIM_Encoder_Init+0x8c>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	2b60      	cmp	r3, #96	@ 0x60
 800be10:	d004      	beq.n	800be1c <HAL_TIM_Encoder_Init+0x8c>
 800be12:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800be16:	4869      	ldr	r0, [pc, #420]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800be18:	f7f9 ffaa 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00e      	beq.n	800be42 <HAL_TIM_Encoder_Init+0xb2>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be2c:	d009      	beq.n	800be42 <HAL_TIM_Encoder_Init+0xb2>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be36:	d004      	beq.n	800be42 <HAL_TIM_Encoder_Init+0xb2>
 800be38:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800be3c:	485f      	ldr	r0, [pc, #380]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800be3e:	f7f9 ff97 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d008      	beq.n	800be5c <HAL_TIM_Encoder_Init+0xcc>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	2b80      	cmp	r3, #128	@ 0x80
 800be50:	d004      	beq.n	800be5c <HAL_TIM_Encoder_Init+0xcc>
 800be52:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800be56:	4859      	ldr	r0, [pc, #356]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800be58:	f7f9 ff8a 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d00c      	beq.n	800be7e <HAL_TIM_Encoder_Init+0xee>
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d008      	beq.n	800be7e <HAL_TIM_Encoder_Init+0xee>
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b03      	cmp	r3, #3
 800be72:	d004      	beq.n	800be7e <HAL_TIM_Encoder_Init+0xee>
 800be74:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800be78:	4850      	ldr	r0, [pc, #320]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800be7a:	f7f9 ff79 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d00c      	beq.n	800bea0 <HAL_TIM_Encoder_Init+0x110>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d008      	beq.n	800bea0 <HAL_TIM_Encoder_Init+0x110>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	2b03      	cmp	r3, #3
 800be94:	d004      	beq.n	800bea0 <HAL_TIM_Encoder_Init+0x110>
 800be96:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800be9a:	4848      	ldr	r0, [pc, #288]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800be9c:	f7f9 ff68 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	699b      	ldr	r3, [r3, #24]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d00c      	beq.n	800bec2 <HAL_TIM_Encoder_Init+0x132>
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d008      	beq.n	800bec2 <HAL_TIM_Encoder_Init+0x132>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	2b03      	cmp	r3, #3
 800beb6:	d004      	beq.n	800bec2 <HAL_TIM_Encoder_Init+0x132>
 800beb8:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800bebc:	483f      	ldr	r0, [pc, #252]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bebe:	f7f9 ff57 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d008      	beq.n	800bedc <HAL_TIM_Encoder_Init+0x14c>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d004      	beq.n	800bedc <HAL_TIM_Encoder_Init+0x14c>
 800bed2:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800bed6:	4839      	ldr	r0, [pc, #228]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bed8:	f7f9 ff4a 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d008      	beq.n	800bef6 <HAL_TIM_Encoder_Init+0x166>
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d004      	beq.n	800bef6 <HAL_TIM_Encoder_Init+0x166>
 800beec:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800bef0:	4832      	ldr	r0, [pc, #200]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bef2:	f7f9 ff3d 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d010      	beq.n	800bf20 <HAL_TIM_Encoder_Init+0x190>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	2b04      	cmp	r3, #4
 800bf04:	d00c      	beq.n	800bf20 <HAL_TIM_Encoder_Init+0x190>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d008      	beq.n	800bf20 <HAL_TIM_Encoder_Init+0x190>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	2b0c      	cmp	r3, #12
 800bf14:	d004      	beq.n	800bf20 <HAL_TIM_Encoder_Init+0x190>
 800bf16:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800bf1a:	4828      	ldr	r0, [pc, #160]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bf1c:	f7f9 ff28 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	69db      	ldr	r3, [r3, #28]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d010      	beq.n	800bf4a <HAL_TIM_Encoder_Init+0x1ba>
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	d00c      	beq.n	800bf4a <HAL_TIM_Encoder_Init+0x1ba>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d008      	beq.n	800bf4a <HAL_TIM_Encoder_Init+0x1ba>
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	2b0c      	cmp	r3, #12
 800bf3e:	d004      	beq.n	800bf4a <HAL_TIM_Encoder_Init+0x1ba>
 800bf40:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800bf44:	481d      	ldr	r0, [pc, #116]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bf46:	f7f9 ff13 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	2b0f      	cmp	r3, #15
 800bf50:	d904      	bls.n	800bf5c <HAL_TIM_Encoder_Init+0x1cc>
 800bf52:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800bf56:	4819      	ldr	r0, [pc, #100]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bf58:	f7f9 ff0a 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	2b0f      	cmp	r3, #15
 800bf62:	d904      	bls.n	800bf6e <HAL_TIM_Encoder_Init+0x1de>
 800bf64:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800bf68:	4814      	ldr	r0, [pc, #80]	@ (800bfbc <HAL_TIM_Encoder_Init+0x22c>)
 800bf6a:	f7f9 ff01 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf76:	d004      	beq.n	800bf82 <HAL_TIM_Encoder_Init+0x1f2>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a0d      	ldr	r2, [pc, #52]	@ (800bfb4 <HAL_TIM_Encoder_Init+0x224>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d107      	bne.n	800bf92 <HAL_TIM_Encoder_Init+0x202>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bf14      	ite	ne
 800bf8a:	2301      	movne	r3, #1
 800bf8c:	2300      	moveq	r3, #0
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	e01a      	b.n	800bfc8 <HAL_TIM_Encoder_Init+0x238>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d012      	beq.n	800bfc0 <HAL_TIM_Encoder_Init+0x230>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfa2:	d20d      	bcs.n	800bfc0 <HAL_TIM_Encoder_Init+0x230>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e00c      	b.n	800bfc2 <HAL_TIM_Encoder_Init+0x232>
 800bfa8:	40012c00 	.word	0x40012c00
 800bfac:	40000400 	.word	0x40000400
 800bfb0:	40000800 	.word	0x40000800
 800bfb4:	40000c00 	.word	0x40000c00
 800bfb8:	40013400 	.word	0x40013400
 800bfbc:	08010c0c 	.word	0x08010c0c
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d104      	bne.n	800bfd6 <HAL_TIM_Encoder_Init+0x246>
 800bfcc:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800bfd0:	484f      	ldr	r0, [pc, #316]	@ (800c110 <HAL_TIM_Encoder_Init+0x380>)
 800bfd2:	f7f9 fecd 	bl	8005d70 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7fa faaa 	bl	8006544 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800c006:	f023 0307 	bic.w	r3, r3, #7
 800c00a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3304      	adds	r3, #4
 800c014:	4619      	mov	r1, r3
 800c016:	4610      	mov	r0, r2
 800c018:	f001 f886 	bl	800d128 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	689a      	ldr	r2, [r3, #8]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	021b      	lsls	r3, r3, #8
 800c054:	4313      	orrs	r3, r2
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4313      	orrs	r3, r2
 800c05a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c062:	f023 030c 	bic.w	r3, r3, #12
 800c066:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c06e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	68da      	ldr	r2, [r3, #12]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	4313      	orrs	r3, r2
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4313      	orrs	r3, r2
 800c084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	011a      	lsls	r2, r3, #4
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	031b      	lsls	r3, r3, #12
 800c092:	4313      	orrs	r3, r2
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	4313      	orrs	r3, r2
 800c098:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c0a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c0a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	08010c0c 	.word	0x08010c0c

0800c114 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c124:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c12c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c134:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c13c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a4d      	ldr	r2, [pc, #308]	@ (800c278 <HAL_TIM_Encoder_Start+0x164>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d01d      	beq.n	800c184 <HAL_TIM_Encoder_Start+0x70>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c150:	d018      	beq.n	800c184 <HAL_TIM_Encoder_Start+0x70>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a49      	ldr	r2, [pc, #292]	@ (800c27c <HAL_TIM_Encoder_Start+0x168>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d013      	beq.n	800c184 <HAL_TIM_Encoder_Start+0x70>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a47      	ldr	r2, [pc, #284]	@ (800c280 <HAL_TIM_Encoder_Start+0x16c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d00e      	beq.n	800c184 <HAL_TIM_Encoder_Start+0x70>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a46      	ldr	r2, [pc, #280]	@ (800c284 <HAL_TIM_Encoder_Start+0x170>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d009      	beq.n	800c184 <HAL_TIM_Encoder_Start+0x70>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a44      	ldr	r2, [pc, #272]	@ (800c288 <HAL_TIM_Encoder_Start+0x174>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d004      	beq.n	800c184 <HAL_TIM_Encoder_Start+0x70>
 800c17a:	f640 41a1 	movw	r1, #3233	@ 0xca1
 800c17e:	4843      	ldr	r0, [pc, #268]	@ (800c28c <HAL_TIM_Encoder_Start+0x178>)
 800c180:	f7f9 fdf6 	bl	8005d70 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d110      	bne.n	800c1ac <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d102      	bne.n	800c196 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c190:	7b7b      	ldrb	r3, [r7, #13]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d001      	beq.n	800c19a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e069      	b.n	800c26e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2202      	movs	r2, #2
 800c19e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1aa:	e031      	b.n	800c210 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d110      	bne.n	800c1d4 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d102      	bne.n	800c1be <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1b8:	7b3b      	ldrb	r3, [r7, #12]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d001      	beq.n	800c1c2 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e055      	b.n	800c26e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1d2:	e01d      	b.n	800c210 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d108      	bne.n	800c1ec <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d105      	bne.n	800c1ec <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1e0:	7b7b      	ldrb	r3, [r7, #13]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d102      	bne.n	800c1ec <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1e6:	7b3b      	ldrb	r3, [r7, #12]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d001      	beq.n	800c1f0 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e03e      	b.n	800c26e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2202      	movs	r2, #2
 800c204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <HAL_TIM_Encoder_Start+0x10a>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b04      	cmp	r3, #4
 800c21a:	d008      	beq.n	800c22e <HAL_TIM_Encoder_Start+0x11a>
 800c21c:	e00f      	b.n	800c23e <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2201      	movs	r2, #1
 800c224:	2100      	movs	r1, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f001 fc1e 	bl	800da68 <TIM_CCxChannelCmd>
      break;
 800c22c:	e016      	b.n	800c25c <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2201      	movs	r2, #1
 800c234:	2104      	movs	r1, #4
 800c236:	4618      	mov	r0, r3
 800c238:	f001 fc16 	bl	800da68 <TIM_CCxChannelCmd>
      break;
 800c23c:	e00e      	b.n	800c25c <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2201      	movs	r2, #1
 800c244:	2100      	movs	r1, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f001 fc0e 	bl	800da68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2201      	movs	r2, #1
 800c252:	2104      	movs	r1, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f001 fc07 	bl	800da68 <TIM_CCxChannelCmd>
      break;
 800c25a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f042 0201 	orr.w	r2, r2, #1
 800c26a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	40012c00 	.word	0x40012c00
 800c27c:	40000400 	.word	0x40000400
 800c280:	40000800 	.word	0x40000800
 800c284:	40000c00 	.word	0x40000c00
 800c288:	40013400 	.word	0x40013400
 800c28c:	08010c0c 	.word	0x08010c0c

0800c290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f003 0302 	and.w	r3, r3, #2
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d020      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f003 0302 	and.w	r3, r3, #2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01b      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f06f 0202 	mvn.w	r2, #2
 800c2c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	f003 0303 	and.w	r3, r3, #3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 ff06 	bl	800d0ec <HAL_TIM_IC_CaptureCallback>
 800c2e0:	e005      	b.n	800c2ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fef8 	bl	800d0d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 ff09 	bl	800d100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f003 0304 	and.w	r3, r3, #4
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d020      	beq.n	800c340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d01b      	beq.n	800c340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f06f 0204 	mvn.w	r2, #4
 800c310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2202      	movs	r2, #2
 800c316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fee0 	bl	800d0ec <HAL_TIM_IC_CaptureCallback>
 800c32c:	e005      	b.n	800c33a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fed2 	bl	800d0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fee3 	bl	800d100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f003 0308 	and.w	r3, r3, #8
 800c346:	2b00      	cmp	r3, #0
 800c348:	d020      	beq.n	800c38c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f003 0308 	and.w	r3, r3, #8
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01b      	beq.n	800c38c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f06f 0208 	mvn.w	r2, #8
 800c35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2204      	movs	r2, #4
 800c362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	f003 0303 	and.w	r3, r3, #3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 feba 	bl	800d0ec <HAL_TIM_IC_CaptureCallback>
 800c378:	e005      	b.n	800c386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 feac 	bl	800d0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 febd 	bl	800d100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	f003 0310 	and.w	r3, r3, #16
 800c392:	2b00      	cmp	r3, #0
 800c394:	d020      	beq.n	800c3d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f003 0310 	and.w	r3, r3, #16
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01b      	beq.n	800c3d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f06f 0210 	mvn.w	r2, #16
 800c3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2208      	movs	r2, #8
 800c3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d003      	beq.n	800c3c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fe94 	bl	800d0ec <HAL_TIM_IC_CaptureCallback>
 800c3c4:	e005      	b.n	800c3d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fe86 	bl	800d0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fe97 	bl	800d100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00c      	beq.n	800c3fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f003 0301 	and.w	r3, r3, #1
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d007      	beq.n	800c3fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f06f 0201 	mvn.w	r2, #1
 800c3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7f8 fcde 	bl	8004db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c402:	2b00      	cmp	r3, #0
 800c404:	d104      	bne.n	800c410 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00c      	beq.n	800c42a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c416:	2b00      	cmp	r3, #0
 800c418:	d007      	beq.n	800c42a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f001 fe2f 	bl	800e088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00c      	beq.n	800c44e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 fe27 	bl	800e09c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00c      	beq.n	800c472 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d007      	beq.n	800c472 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fe51 	bl	800d114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00c      	beq.n	800c496 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	2b00      	cmp	r3, #0
 800c484:	d007      	beq.n	800c496 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f06f 0220 	mvn.w	r2, #32
 800c48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 fdef 	bl	800e074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c496:	bf00      	nop
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d016      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d013      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b08      	cmp	r3, #8
 800c4c0:	d010      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b0c      	cmp	r3, #12
 800c4c6:	d00d      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b10      	cmp	r3, #16
 800c4cc:	d00a      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b14      	cmp	r3, #20
 800c4d2:	d007      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b3c      	cmp	r3, #60	@ 0x3c
 800c4d8:	d004      	beq.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4da:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800c4de:	488b      	ldr	r0, [pc, #556]	@ (800c70c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c4e0:	f7f9 fc46 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b60      	cmp	r3, #96	@ 0x60
 800c4ea:	d01c      	beq.n	800c526 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b70      	cmp	r3, #112	@ 0x70
 800c4f2:	d018      	beq.n	800c526 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a85      	ldr	r2, [pc, #532]	@ (800c710 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d013      	beq.n	800c526 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a84      	ldr	r2, [pc, #528]	@ (800c714 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d00e      	beq.n	800c526 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a82      	ldr	r2, [pc, #520]	@ (800c718 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d009      	beq.n	800c526 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a81      	ldr	r2, [pc, #516]	@ (800c71c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d004      	beq.n	800c526 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c51c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800c520:	487a      	ldr	r0, [pc, #488]	@ (800c70c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c522:	f7f9 fc25 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d004      	beq.n	800c540 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c536:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800c53a:	4874      	ldr	r0, [pc, #464]	@ (800c70c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c53c:	f7f9 fc18 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d008      	beq.n	800c55a <HAL_TIM_PWM_ConfigChannel+0xba>
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	2b04      	cmp	r3, #4
 800c54e:	d004      	beq.n	800c55a <HAL_TIM_PWM_ConfigChannel+0xba>
 800c550:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800c554:	486d      	ldr	r0, [pc, #436]	@ (800c70c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c556:	f7f9 fc0b 	bl	8005d70 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c560:	2b01      	cmp	r3, #1
 800c562:	d101      	bne.n	800c568 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800c564:	2302      	movs	r3, #2
 800c566:	e1d9      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x47c>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b14      	cmp	r3, #20
 800c574:	f200 81ca 	bhi.w	800c90c <HAL_TIM_PWM_ConfigChannel+0x46c>
 800c578:	a201      	add	r2, pc, #4	@ (adr r2, 800c580 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800c57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57e:	bf00      	nop
 800c580:	0800c5d5 	.word	0x0800c5d5
 800c584:	0800c90d 	.word	0x0800c90d
 800c588:	0800c90d 	.word	0x0800c90d
 800c58c:	0800c90d 	.word	0x0800c90d
 800c590:	0800c679 	.word	0x0800c679
 800c594:	0800c90d 	.word	0x0800c90d
 800c598:	0800c90d 	.word	0x0800c90d
 800c59c:	0800c90d 	.word	0x0800c90d
 800c5a0:	0800c741 	.word	0x0800c741
 800c5a4:	0800c90d 	.word	0x0800c90d
 800c5a8:	0800c90d 	.word	0x0800c90d
 800c5ac:	0800c90d 	.word	0x0800c90d
 800c5b0:	0800c7c7 	.word	0x0800c7c7
 800c5b4:	0800c90d 	.word	0x0800c90d
 800c5b8:	0800c90d 	.word	0x0800c90d
 800c5bc:	0800c90d 	.word	0x0800c90d
 800c5c0:	0800c84f 	.word	0x0800c84f
 800c5c4:	0800c90d 	.word	0x0800c90d
 800c5c8:	0800c90d 	.word	0x0800c90d
 800c5cc:	0800c90d 	.word	0x0800c90d
 800c5d0:	0800c8ad 	.word	0x0800c8ad
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a51      	ldr	r2, [pc, #324]	@ (800c720 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d02c      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5e6:	d027      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a4d      	ldr	r2, [pc, #308]	@ (800c724 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d022      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a4c      	ldr	r2, [pc, #304]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d01d      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a4a      	ldr	r2, [pc, #296]	@ (800c72c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d018      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a49      	ldr	r2, [pc, #292]	@ (800c730 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d013      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a47      	ldr	r2, [pc, #284]	@ (800c734 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d00e      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a46      	ldr	r2, [pc, #280]	@ (800c738 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d009      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a44      	ldr	r2, [pc, #272]	@ (800c73c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d004      	beq.n	800c638 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c62e:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800c632:	4836      	ldr	r0, [pc, #216]	@ (800c70c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c634:	f7f9 fb9c 	bl	8005d70 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68b9      	ldr	r1, [r7, #8]
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fe18 	bl	800d274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f042 0208 	orr.w	r2, r2, #8
 800c652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f022 0204 	bic.w	r2, r2, #4
 800c662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6999      	ldr	r1, [r3, #24]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	691a      	ldr	r2, [r3, #16]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	619a      	str	r2, [r3, #24]
      break;
 800c676:	e14c      	b.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a28      	ldr	r2, [pc, #160]	@ (800c720 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d022      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c68a:	d01d      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a24      	ldr	r2, [pc, #144]	@ (800c724 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d018      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a23      	ldr	r2, [pc, #140]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d013      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a21      	ldr	r2, [pc, #132]	@ (800c72c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d00e      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a20      	ldr	r2, [pc, #128]	@ (800c730 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d009      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a1e      	ldr	r2, [pc, #120]	@ (800c734 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d004      	beq.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6be:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800c6c2:	4812      	ldr	r0, [pc, #72]	@ (800c70c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c6c4:	f7f9 fb54 	bl	8005d70 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fe8a 	bl	800d3e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	699a      	ldr	r2, [r3, #24]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6999      	ldr	r1, [r3, #24]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	021a      	lsls	r2, r3, #8
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	430a      	orrs	r2, r1
 800c706:	619a      	str	r2, [r3, #24]
      break;
 800c708:	e103      	b.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x472>
 800c70a:	bf00      	nop
 800c70c:	08010c0c 	.word	0x08010c0c
 800c710:	00010040 	.word	0x00010040
 800c714:	00010050 	.word	0x00010050
 800c718:	00010060 	.word	0x00010060
 800c71c:	00010070 	.word	0x00010070
 800c720:	40012c00 	.word	0x40012c00
 800c724:	40000400 	.word	0x40000400
 800c728:	40000800 	.word	0x40000800
 800c72c:	40000c00 	.word	0x40000c00
 800c730:	40013400 	.word	0x40013400
 800c734:	40014000 	.word	0x40014000
 800c738:	40014400 	.word	0x40014400
 800c73c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a77      	ldr	r2, [pc, #476]	@ (800c924 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d01d      	beq.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c752:	d018      	beq.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a73      	ldr	r2, [pc, #460]	@ (800c928 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d013      	beq.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a72      	ldr	r2, [pc, #456]	@ (800c92c <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00e      	beq.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a70      	ldr	r2, [pc, #448]	@ (800c930 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d009      	beq.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a6f      	ldr	r2, [pc, #444]	@ (800c934 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d004      	beq.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c77c:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800c780:	486d      	ldr	r0, [pc, #436]	@ (800c938 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c782:	f7f9 faf5 	bl	8005d70 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 fedd 	bl	800d54c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	69da      	ldr	r2, [r3, #28]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f042 0208 	orr.w	r2, r2, #8
 800c7a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	69da      	ldr	r2, [r3, #28]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f022 0204 	bic.w	r2, r2, #4
 800c7b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69d9      	ldr	r1, [r3, #28]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	691a      	ldr	r2, [r3, #16]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	61da      	str	r2, [r3, #28]
      break;
 800c7c4:	e0a5      	b.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a56      	ldr	r2, [pc, #344]	@ (800c924 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d01d      	beq.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7d8:	d018      	beq.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a52      	ldr	r2, [pc, #328]	@ (800c928 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d013      	beq.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a50      	ldr	r2, [pc, #320]	@ (800c92c <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00e      	beq.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a4f      	ldr	r2, [pc, #316]	@ (800c930 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d009      	beq.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a4d      	ldr	r2, [pc, #308]	@ (800c934 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d004      	beq.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c802:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800c806:	484c      	ldr	r0, [pc, #304]	@ (800c938 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c808:	f7f9 fab2 	bl	8005d70 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68b9      	ldr	r1, [r7, #8]
 800c812:	4618      	mov	r0, r3
 800c814:	f000 ff4c 	bl	800d6b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	69da      	ldr	r2, [r3, #28]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c826:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69da      	ldr	r2, [r3, #28]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c836:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	69d9      	ldr	r1, [r3, #28]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	021a      	lsls	r2, r3, #8
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	430a      	orrs	r2, r1
 800c84a:	61da      	str	r2, [r3, #28]
      break;
 800c84c:	e061      	b.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a34      	ldr	r2, [pc, #208]	@ (800c924 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d009      	beq.n	800c86c <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a35      	ldr	r2, [pc, #212]	@ (800c934 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d004      	beq.n	800c86c <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800c862:	f241 1104 	movw	r1, #4356	@ 0x1104
 800c866:	4834      	ldr	r0, [pc, #208]	@ (800c938 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c868:	f7f9 fa82 	bl	8005d70 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	68b9      	ldr	r1, [r7, #8]
 800c872:	4618      	mov	r0, r3
 800c874:	f000 ff94 	bl	800d7a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0208 	orr.w	r2, r2, #8
 800c886:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f022 0204 	bic.w	r2, r2, #4
 800c896:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	691a      	ldr	r2, [r3, #16]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c8aa:	e032      	b.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c924 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d009      	beq.n	800c8ca <HAL_TIM_PWM_ConfigChannel+0x42a>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c934 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d004      	beq.n	800c8ca <HAL_TIM_PWM_ConfigChannel+0x42a>
 800c8c0:	f241 1115 	movw	r1, #4373	@ 0x1115
 800c8c4:	481c      	ldr	r0, [pc, #112]	@ (800c938 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c8c6:	f7f9 fa53 	bl	8005d70 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68b9      	ldr	r1, [r7, #8]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 ffc9 	bl	800d868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c8f4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	021a      	lsls	r2, r3, #8
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	430a      	orrs	r2, r1
 800c908:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c90a:	e002      	b.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	75fb      	strb	r3, [r7, #23]
      break;
 800c910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	40012c00 	.word	0x40012c00
 800c928:	40000400 	.word	0x40000400
 800c92c:	40000800 	.word	0x40000800
 800c930:	40000c00 	.word	0x40000c00
 800c934:	40013400 	.word	0x40013400
 800c938:	08010c0c 	.word	0x08010c0c

0800c93c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a33      	ldr	r2, [pc, #204]	@ (800ca18 <HAL_TIM_GenerateEvent+0xdc>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d036      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c958:	d031      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a2f      	ldr	r2, [pc, #188]	@ (800ca1c <HAL_TIM_GenerateEvent+0xe0>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d02c      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a2d      	ldr	r2, [pc, #180]	@ (800ca20 <HAL_TIM_GenerateEvent+0xe4>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d027      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a2c      	ldr	r2, [pc, #176]	@ (800ca24 <HAL_TIM_GenerateEvent+0xe8>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d022      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a2a      	ldr	r2, [pc, #168]	@ (800ca28 <HAL_TIM_GenerateEvent+0xec>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d01d      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a29      	ldr	r2, [pc, #164]	@ (800ca2c <HAL_TIM_GenerateEvent+0xf0>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d018      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a27      	ldr	r2, [pc, #156]	@ (800ca30 <HAL_TIM_GenerateEvent+0xf4>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d013      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a26      	ldr	r2, [pc, #152]	@ (800ca34 <HAL_TIM_GenerateEvent+0xf8>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00e      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a24      	ldr	r2, [pc, #144]	@ (800ca38 <HAL_TIM_GenerateEvent+0xfc>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d009      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a23      	ldr	r2, [pc, #140]	@ (800ca3c <HAL_TIM_GenerateEvent+0x100>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d004      	beq.n	800c9be <HAL_TIM_GenerateEvent+0x82>
 800c9b4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800c9b8:	4821      	ldr	r0, [pc, #132]	@ (800ca40 <HAL_TIM_GenerateEvent+0x104>)
 800c9ba:	f7f9 f9d9 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9c4:	d202      	bcs.n	800c9cc <HAL_TIM_GenerateEvent+0x90>
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <HAL_TIM_GenerateEvent+0x9a>
 800c9cc:	f241 4181 	movw	r1, #5249	@ 0x1481
 800c9d0:	481b      	ldr	r0, [pc, #108]	@ (800ca40 <HAL_TIM_GenerateEvent+0x104>)
 800c9d2:	f7f9 f9cd 	bl	8005d70 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <HAL_TIM_GenerateEvent+0xa8>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e014      	b.n	800ca0e <HAL_TIM_GenerateEvent+0xd2>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	683a      	ldr	r2, [r7, #0]
 800c9fa:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	40012c00 	.word	0x40012c00
 800ca1c:	40000400 	.word	0x40000400
 800ca20:	40000800 	.word	0x40000800
 800ca24:	40000c00 	.word	0x40000c00
 800ca28:	40001000 	.word	0x40001000
 800ca2c:	40001400 	.word	0x40001400
 800ca30:	40013400 	.word	0x40013400
 800ca34:	40014000 	.word	0x40014000
 800ca38:	40014400 	.word	0x40014400
 800ca3c:	40014800 	.word	0x40014800
 800ca40:	08010c0c 	.word	0x08010c0c

0800ca44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d101      	bne.n	800ca60 <HAL_TIM_ConfigClockSource+0x1c>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	e329      	b.n	800d0b4 <HAL_TIM_ConfigClockSource+0x670>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca78:	d029      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b70      	cmp	r3, #112	@ 0x70
 800ca80:	d025      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca8a:	d020      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b40      	cmp	r3, #64	@ 0x40
 800ca92:	d01c      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b50      	cmp	r3, #80	@ 0x50
 800ca9a:	d018      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b60      	cmp	r3, #96	@ 0x60
 800caa2:	d014      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d010      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b10      	cmp	r3, #16
 800cab2:	d00c      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b20      	cmp	r3, #32
 800caba:	d008      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b30      	cmp	r3, #48	@ 0x30
 800cac2:	d004      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x8a>
 800cac4:	f241 5156 	movw	r1, #5462	@ 0x1556
 800cac8:	4888      	ldr	r0, [pc, #544]	@ (800ccec <HAL_TIM_ConfigClockSource+0x2a8>)
 800caca:	f7f9 f951 	bl	8005d70 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cadc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cae0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cae8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cafa:	f000 810d 	beq.w	800cd18 <HAL_TIM_ConfigClockSource+0x2d4>
 800cafe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb02:	f200 82ca 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb0a:	d02d      	beq.n	800cb68 <HAL_TIM_ConfigClockSource+0x124>
 800cb0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb10:	f200 82c3 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb14:	2b70      	cmp	r3, #112	@ 0x70
 800cb16:	d06f      	beq.n	800cbf8 <HAL_TIM_ConfigClockSource+0x1b4>
 800cb18:	2b70      	cmp	r3, #112	@ 0x70
 800cb1a:	f200 82be 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb1e:	2b60      	cmp	r3, #96	@ 0x60
 800cb20:	f000 81d4 	beq.w	800cecc <HAL_TIM_ConfigClockSource+0x488>
 800cb24:	2b60      	cmp	r3, #96	@ 0x60
 800cb26:	f200 82b8 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb2a:	2b50      	cmp	r3, #80	@ 0x50
 800cb2c:	f000 8165 	beq.w	800cdfa <HAL_TIM_ConfigClockSource+0x3b6>
 800cb30:	2b50      	cmp	r3, #80	@ 0x50
 800cb32:	f200 82b2 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb36:	2b40      	cmp	r3, #64	@ 0x40
 800cb38:	f000 8223 	beq.w	800cf82 <HAL_TIM_ConfigClockSource+0x53e>
 800cb3c:	2b40      	cmp	r3, #64	@ 0x40
 800cb3e:	f200 82ac 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb42:	2b30      	cmp	r3, #48	@ 0x30
 800cb44:	f000 8278 	beq.w	800d038 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb48:	2b30      	cmp	r3, #48	@ 0x30
 800cb4a:	f200 82a6 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb4e:	2b20      	cmp	r3, #32
 800cb50:	f000 8272 	beq.w	800d038 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb54:	2b20      	cmp	r3, #32
 800cb56:	f200 82a0 	bhi.w	800d09a <HAL_TIM_ConfigClockSource+0x656>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 826c 	beq.w	800d038 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb60:	2b10      	cmp	r3, #16
 800cb62:	f000 8269 	beq.w	800d038 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb66:	e298      	b.n	800d09a <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a60      	ldr	r2, [pc, #384]	@ (800ccf0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	f000 8296 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb7c:	f000 8290 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a5b      	ldr	r2, [pc, #364]	@ (800ccf4 <HAL_TIM_ConfigClockSource+0x2b0>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	f000 828a 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a59      	ldr	r2, [pc, #356]	@ (800ccf8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	f000 8284 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a57      	ldr	r2, [pc, #348]	@ (800ccfc <HAL_TIM_ConfigClockSource+0x2b8>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	f000 827e 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a55      	ldr	r2, [pc, #340]	@ (800cd00 <HAL_TIM_ConfigClockSource+0x2bc>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	f000 8278 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a53      	ldr	r2, [pc, #332]	@ (800cd04 <HAL_TIM_ConfigClockSource+0x2c0>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	f000 8272 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a51      	ldr	r2, [pc, #324]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2c4>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	f000 826c 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a4f      	ldr	r2, [pc, #316]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x2c8>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	f000 8266 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a4d      	ldr	r2, [pc, #308]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x2cc>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	f000 8260 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a4b      	ldr	r2, [pc, #300]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x2d0>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	f000 825a 	beq.w	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
 800cbec:	f241 5162 	movw	r1, #5474	@ 0x1562
 800cbf0:	483e      	ldr	r0, [pc, #248]	@ (800ccec <HAL_TIM_ConfigClockSource+0x2a8>)
 800cbf2:	f7f9 f8bd 	bl	8005d70 <assert_failed>
      break;
 800cbf6:	e253      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a3c      	ldr	r2, [pc, #240]	@ (800ccf0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d022      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc0a:	d01d      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a38      	ldr	r2, [pc, #224]	@ (800ccf4 <HAL_TIM_ConfigClockSource+0x2b0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d018      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a37      	ldr	r2, [pc, #220]	@ (800ccf8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d013      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a35      	ldr	r2, [pc, #212]	@ (800ccfc <HAL_TIM_ConfigClockSource+0x2b8>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d00e      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a36      	ldr	r2, [pc, #216]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2c4>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d009      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a34      	ldr	r2, [pc, #208]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x2c8>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d004      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x204>
 800cc3e:	f241 5169 	movw	r1, #5481	@ 0x1569
 800cc42:	482a      	ldr	r0, [pc, #168]	@ (800ccec <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc44:	f7f9 f894 	bl	8005d70 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d013      	beq.n	800cc78 <HAL_TIM_ConfigClockSource+0x234>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc58:	d00e      	beq.n	800cc78 <HAL_TIM_ConfigClockSource+0x234>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc62:	d009      	beq.n	800cc78 <HAL_TIM_ConfigClockSource+0x234>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cc6c:	d004      	beq.n	800cc78 <HAL_TIM_ConfigClockSource+0x234>
 800cc6e:	f241 516c 	movw	r1, #5484	@ 0x156c
 800cc72:	481e      	ldr	r0, [pc, #120]	@ (800ccec <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc74:	f7f9 f87c 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc80:	d014      	beq.n	800ccac <HAL_TIM_ConfigClockSource+0x268>
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d010      	beq.n	800ccac <HAL_TIM_ConfigClockSource+0x268>
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00c      	beq.n	800ccac <HAL_TIM_ConfigClockSource+0x268>
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d008      	beq.n	800ccac <HAL_TIM_ConfigClockSource+0x268>
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	2b0a      	cmp	r3, #10
 800cca0:	d004      	beq.n	800ccac <HAL_TIM_ConfigClockSource+0x268>
 800cca2:	f241 516d 	movw	r1, #5485	@ 0x156d
 800cca6:	4811      	ldr	r0, [pc, #68]	@ (800ccec <HAL_TIM_ConfigClockSource+0x2a8>)
 800cca8:	f7f9 f862 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	2b0f      	cmp	r3, #15
 800ccb2:	d904      	bls.n	800ccbe <HAL_TIM_ConfigClockSource+0x27a>
 800ccb4:	f241 516e 	movw	r1, #5486	@ 0x156e
 800ccb8:	480c      	ldr	r0, [pc, #48]	@ (800ccec <HAL_TIM_ConfigClockSource+0x2a8>)
 800ccba:	f7f9 f859 	bl	8005d70 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccce:	f000 feab 	bl	800da28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	609a      	str	r2, [r3, #8]
      break;
 800ccea:	e1da      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
 800ccec:	08010c0c 	.word	0x08010c0c
 800ccf0:	40012c00 	.word	0x40012c00
 800ccf4:	40000400 	.word	0x40000400
 800ccf8:	40000800 	.word	0x40000800
 800ccfc:	40000c00 	.word	0x40000c00
 800cd00:	40001000 	.word	0x40001000
 800cd04:	40001400 	.word	0x40001400
 800cd08:	40013400 	.word	0x40013400
 800cd0c:	40014000 	.word	0x40014000
 800cd10:	40014400 	.word	0x40014400
 800cd14:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a64      	ldr	r2, [pc, #400]	@ (800ceb0 <HAL_TIM_ConfigClockSource+0x46c>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d01d      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0x31a>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd2a:	d018      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0x31a>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a60      	ldr	r2, [pc, #384]	@ (800ceb4 <HAL_TIM_ConfigClockSource+0x470>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d013      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0x31a>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a5f      	ldr	r2, [pc, #380]	@ (800ceb8 <HAL_TIM_ConfigClockSource+0x474>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d00e      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0x31a>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a5d      	ldr	r2, [pc, #372]	@ (800cebc <HAL_TIM_ConfigClockSource+0x478>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d009      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0x31a>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a5c      	ldr	r2, [pc, #368]	@ (800cec0 <HAL_TIM_ConfigClockSource+0x47c>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d004      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0x31a>
 800cd54:	f241 5181 	movw	r1, #5505	@ 0x1581
 800cd58:	485a      	ldr	r0, [pc, #360]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800cd5a:	f7f9 f809 	bl	8005d70 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d013      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x34a>
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd6e:	d00e      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x34a>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd78:	d009      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x34a>
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd82:	d004      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x34a>
 800cd84:	f241 5184 	movw	r1, #5508	@ 0x1584
 800cd88:	484e      	ldr	r0, [pc, #312]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800cd8a:	f7f8 fff1 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd96:	d014      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0x37e>
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d010      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0x37e>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00c      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0x37e>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d008      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0x37e>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b0a      	cmp	r3, #10
 800cdb6:	d004      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0x37e>
 800cdb8:	f241 5185 	movw	r1, #5509	@ 0x1585
 800cdbc:	4841      	ldr	r0, [pc, #260]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800cdbe:	f7f8 ffd7 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	d904      	bls.n	800cdd4 <HAL_TIM_ConfigClockSource+0x390>
 800cdca:	f241 5186 	movw	r1, #5510	@ 0x1586
 800cdce:	483d      	ldr	r0, [pc, #244]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800cdd0:	f7f8 ffce 	bl	8005d70 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cde4:	f000 fe20 	bl	800da28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689a      	ldr	r2, [r3, #8]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdf6:	609a      	str	r2, [r3, #8]
      break;
 800cdf8:	e153      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a2c      	ldr	r2, [pc, #176]	@ (800ceb0 <HAL_TIM_ConfigClockSource+0x46c>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d022      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce0c:	d01d      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a28      	ldr	r2, [pc, #160]	@ (800ceb4 <HAL_TIM_ConfigClockSource+0x470>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d018      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a26      	ldr	r2, [pc, #152]	@ (800ceb8 <HAL_TIM_ConfigClockSource+0x474>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d013      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a25      	ldr	r2, [pc, #148]	@ (800cebc <HAL_TIM_ConfigClockSource+0x478>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d00e      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a23      	ldr	r2, [pc, #140]	@ (800cec0 <HAL_TIM_ConfigClockSource+0x47c>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d009      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a23      	ldr	r2, [pc, #140]	@ (800cec8 <HAL_TIM_ConfigClockSource+0x484>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d004      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0x406>
 800ce40:	f241 5195 	movw	r1, #5525	@ 0x1595
 800ce44:	481f      	ldr	r0, [pc, #124]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800ce46:	f7f8 ff93 	bl	8005d70 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce52:	d014      	beq.n	800ce7e <HAL_TIM_ConfigClockSource+0x43a>
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d010      	beq.n	800ce7e <HAL_TIM_ConfigClockSource+0x43a>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00c      	beq.n	800ce7e <HAL_TIM_ConfigClockSource+0x43a>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d008      	beq.n	800ce7e <HAL_TIM_ConfigClockSource+0x43a>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	2b0a      	cmp	r3, #10
 800ce72:	d004      	beq.n	800ce7e <HAL_TIM_ConfigClockSource+0x43a>
 800ce74:	f241 5198 	movw	r1, #5528	@ 0x1598
 800ce78:	4812      	ldr	r0, [pc, #72]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800ce7a:	f7f8 ff79 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	2b0f      	cmp	r3, #15
 800ce84:	d904      	bls.n	800ce90 <HAL_TIM_ConfigClockSource+0x44c>
 800ce86:	f241 5199 	movw	r1, #5529	@ 0x1599
 800ce8a:	480e      	ldr	r0, [pc, #56]	@ (800cec4 <HAL_TIM_ConfigClockSource+0x480>)
 800ce8c:	f7f8 ff70 	bl	8005d70 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	f000 fd49 	bl	800d934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2150      	movs	r1, #80	@ 0x50
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 fda2 	bl	800d9f2 <TIM_ITRx_SetConfig>
      break;
 800ceae:	e0f8      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
 800ceb0:	40012c00 	.word	0x40012c00
 800ceb4:	40000400 	.word	0x40000400
 800ceb8:	40000800 	.word	0x40000800
 800cebc:	40000c00 	.word	0x40000c00
 800cec0:	40013400 	.word	0x40013400
 800cec4:	08010c0c 	.word	0x08010c0c
 800cec8:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a7a      	ldr	r2, [pc, #488]	@ (800d0bc <HAL_TIM_ConfigClockSource+0x678>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d022      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cede:	d01d      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a76      	ldr	r2, [pc, #472]	@ (800d0c0 <HAL_TIM_ConfigClockSource+0x67c>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d018      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a75      	ldr	r2, [pc, #468]	@ (800d0c4 <HAL_TIM_ConfigClockSource+0x680>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d013      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a73      	ldr	r2, [pc, #460]	@ (800d0c8 <HAL_TIM_ConfigClockSource+0x684>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d00e      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a72      	ldr	r2, [pc, #456]	@ (800d0cc <HAL_TIM_ConfigClockSource+0x688>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d009      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a70      	ldr	r2, [pc, #448]	@ (800d0d0 <HAL_TIM_ConfigClockSource+0x68c>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d004      	beq.n	800cf1c <HAL_TIM_ConfigClockSource+0x4d8>
 800cf12:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800cf16:	486f      	ldr	r0, [pc, #444]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800cf18:	f7f8 ff2a 	bl	8005d70 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf24:	d014      	beq.n	800cf50 <HAL_TIM_ConfigClockSource+0x50c>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d010      	beq.n	800cf50 <HAL_TIM_ConfigClockSource+0x50c>
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00c      	beq.n	800cf50 <HAL_TIM_ConfigClockSource+0x50c>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d008      	beq.n	800cf50 <HAL_TIM_ConfigClockSource+0x50c>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	2b0a      	cmp	r3, #10
 800cf44:	d004      	beq.n	800cf50 <HAL_TIM_ConfigClockSource+0x50c>
 800cf46:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800cf4a:	4862      	ldr	r0, [pc, #392]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800cf4c:	f7f8 ff10 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	2b0f      	cmp	r3, #15
 800cf56:	d904      	bls.n	800cf62 <HAL_TIM_ConfigClockSource+0x51e>
 800cf58:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800cf5c:	485d      	ldr	r0, [pc, #372]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800cf5e:	f7f8 ff07 	bl	8005d70 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf6e:	461a      	mov	r2, r3
 800cf70:	f000 fd0f 	bl	800d992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2160      	movs	r1, #96	@ 0x60
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 fd39 	bl	800d9f2 <TIM_ITRx_SetConfig>
      break;
 800cf80:	e08f      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a4d      	ldr	r2, [pc, #308]	@ (800d0bc <HAL_TIM_ConfigClockSource+0x678>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d022      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf94:	d01d      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a49      	ldr	r2, [pc, #292]	@ (800d0c0 <HAL_TIM_ConfigClockSource+0x67c>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d018      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a47      	ldr	r2, [pc, #284]	@ (800d0c4 <HAL_TIM_ConfigClockSource+0x680>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d013      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a46      	ldr	r2, [pc, #280]	@ (800d0c8 <HAL_TIM_ConfigClockSource+0x684>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d00e      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a44      	ldr	r2, [pc, #272]	@ (800d0cc <HAL_TIM_ConfigClockSource+0x688>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d009      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a43      	ldr	r2, [pc, #268]	@ (800d0d0 <HAL_TIM_ConfigClockSource+0x68c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d004      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x58e>
 800cfc8:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800cfcc:	4841      	ldr	r0, [pc, #260]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800cfce:	f7f8 fecf 	bl	8005d70 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfda:	d014      	beq.n	800d006 <HAL_TIM_ConfigClockSource+0x5c2>
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d010      	beq.n	800d006 <HAL_TIM_ConfigClockSource+0x5c2>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00c      	beq.n	800d006 <HAL_TIM_ConfigClockSource+0x5c2>
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d008      	beq.n	800d006 <HAL_TIM_ConfigClockSource+0x5c2>
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	2b0a      	cmp	r3, #10
 800cffa:	d004      	beq.n	800d006 <HAL_TIM_ConfigClockSource+0x5c2>
 800cffc:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800d000:	4834      	ldr	r0, [pc, #208]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800d002:	f7f8 feb5 	bl	8005d70 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	2b0f      	cmp	r3, #15
 800d00c:	d904      	bls.n	800d018 <HAL_TIM_ConfigClockSource+0x5d4>
 800d00e:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800d012:	4830      	ldr	r0, [pc, #192]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800d014:	f7f8 feac 	bl	8005d70 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d024:	461a      	mov	r2, r3
 800d026:	f000 fc85 	bl	800d934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2140      	movs	r1, #64	@ 0x40
 800d030:	4618      	mov	r0, r3
 800d032:	f000 fcde 	bl	800d9f2 <TIM_ITRx_SetConfig>
      break;
 800d036:	e034      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a1f      	ldr	r2, [pc, #124]	@ (800d0bc <HAL_TIM_ConfigClockSource+0x678>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d022      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d04a:	d01d      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a1b      	ldr	r2, [pc, #108]	@ (800d0c0 <HAL_TIM_ConfigClockSource+0x67c>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d018      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a1a      	ldr	r2, [pc, #104]	@ (800d0c4 <HAL_TIM_ConfigClockSource+0x680>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d013      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a18      	ldr	r2, [pc, #96]	@ (800d0c8 <HAL_TIM_ConfigClockSource+0x684>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d00e      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a17      	ldr	r2, [pc, #92]	@ (800d0cc <HAL_TIM_ConfigClockSource+0x688>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d009      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a15      	ldr	r2, [pc, #84]	@ (800d0d0 <HAL_TIM_ConfigClockSource+0x68c>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d004      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0x644>
 800d07e:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800d082:	4814      	ldr	r0, [pc, #80]	@ (800d0d4 <HAL_TIM_ConfigClockSource+0x690>)
 800d084:	f7f8 fe74 	bl	8005d70 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4619      	mov	r1, r3
 800d092:	4610      	mov	r0, r2
 800d094:	f000 fcad 	bl	800d9f2 <TIM_ITRx_SetConfig>
      break;
 800d098:	e003      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	73fb      	strb	r3, [r7, #15]
      break;
 800d09e:	e000      	b.n	800d0a2 <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800d0a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	40012c00 	.word	0x40012c00
 800d0c0:	40000400 	.word	0x40000400
 800d0c4:	40000800 	.word	0x40000800
 800d0c8:	40000c00 	.word	0x40000c00
 800d0cc:	40013400 	.word	0x40013400
 800d0d0:	40014000 	.word	0x40014000
 800d0d4:	08010c0c 	.word	0x08010c0c

0800d0d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a46      	ldr	r2, [pc, #280]	@ (800d254 <TIM_Base_SetConfig+0x12c>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d013      	beq.n	800d168 <TIM_Base_SetConfig+0x40>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d146:	d00f      	beq.n	800d168 <TIM_Base_SetConfig+0x40>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a43      	ldr	r2, [pc, #268]	@ (800d258 <TIM_Base_SetConfig+0x130>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d00b      	beq.n	800d168 <TIM_Base_SetConfig+0x40>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a42      	ldr	r2, [pc, #264]	@ (800d25c <TIM_Base_SetConfig+0x134>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d007      	beq.n	800d168 <TIM_Base_SetConfig+0x40>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a41      	ldr	r2, [pc, #260]	@ (800d260 <TIM_Base_SetConfig+0x138>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d003      	beq.n	800d168 <TIM_Base_SetConfig+0x40>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a40      	ldr	r2, [pc, #256]	@ (800d264 <TIM_Base_SetConfig+0x13c>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d108      	bne.n	800d17a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d16e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4313      	orrs	r3, r2
 800d178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a35      	ldr	r2, [pc, #212]	@ (800d254 <TIM_Base_SetConfig+0x12c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d01f      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d188:	d01b      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a32      	ldr	r2, [pc, #200]	@ (800d258 <TIM_Base_SetConfig+0x130>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d017      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a31      	ldr	r2, [pc, #196]	@ (800d25c <TIM_Base_SetConfig+0x134>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d013      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4a30      	ldr	r2, [pc, #192]	@ (800d260 <TIM_Base_SetConfig+0x138>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d00f      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a2f      	ldr	r2, [pc, #188]	@ (800d264 <TIM_Base_SetConfig+0x13c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d00b      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4a2e      	ldr	r2, [pc, #184]	@ (800d268 <TIM_Base_SetConfig+0x140>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d007      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4a2d      	ldr	r2, [pc, #180]	@ (800d26c <TIM_Base_SetConfig+0x144>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d003      	beq.n	800d1c2 <TIM_Base_SetConfig+0x9a>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4a2c      	ldr	r2, [pc, #176]	@ (800d270 <TIM_Base_SetConfig+0x148>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d108      	bne.n	800d1d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	689a      	ldr	r2, [r3, #8]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a16      	ldr	r2, [pc, #88]	@ (800d254 <TIM_Base_SetConfig+0x12c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d00f      	beq.n	800d220 <TIM_Base_SetConfig+0xf8>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a18      	ldr	r2, [pc, #96]	@ (800d264 <TIM_Base_SetConfig+0x13c>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d00b      	beq.n	800d220 <TIM_Base_SetConfig+0xf8>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a17      	ldr	r2, [pc, #92]	@ (800d268 <TIM_Base_SetConfig+0x140>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d007      	beq.n	800d220 <TIM_Base_SetConfig+0xf8>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a16      	ldr	r2, [pc, #88]	@ (800d26c <TIM_Base_SetConfig+0x144>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d003      	beq.n	800d220 <TIM_Base_SetConfig+0xf8>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a15      	ldr	r2, [pc, #84]	@ (800d270 <TIM_Base_SetConfig+0x148>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d103      	bne.n	800d228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	691a      	ldr	r2, [r3, #16]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	f003 0301 	and.w	r3, r3, #1
 800d236:	2b01      	cmp	r3, #1
 800d238:	d105      	bne.n	800d246 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	691b      	ldr	r3, [r3, #16]
 800d23e:	f023 0201 	bic.w	r2, r3, #1
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	611a      	str	r2, [r3, #16]
  }
}
 800d246:	bf00      	nop
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	40012c00 	.word	0x40012c00
 800d258:	40000400 	.word	0x40000400
 800d25c:	40000800 	.word	0x40000800
 800d260:	40000c00 	.word	0x40000c00
 800d264:	40013400 	.word	0x40013400
 800d268:	40014000 	.word	0x40014000
 800d26c:	40014400 	.word	0x40014400
 800d270:	40014800 	.word	0x40014800

0800d274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	f023 0201 	bic.w	r2, r3, #1
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f023 0303 	bic.w	r3, r3, #3
 800d2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f023 0302 	bic.w	r3, r3, #2
 800d2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	697a      	ldr	r2, [r7, #20]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a40      	ldr	r2, [pc, #256]	@ (800d3d0 <TIM_OC1_SetConfig+0x15c>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d00f      	beq.n	800d2f4 <TIM_OC1_SetConfig+0x80>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a3f      	ldr	r2, [pc, #252]	@ (800d3d4 <TIM_OC1_SetConfig+0x160>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d00b      	beq.n	800d2f4 <TIM_OC1_SetConfig+0x80>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a3e      	ldr	r2, [pc, #248]	@ (800d3d8 <TIM_OC1_SetConfig+0x164>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d007      	beq.n	800d2f4 <TIM_OC1_SetConfig+0x80>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a3d      	ldr	r2, [pc, #244]	@ (800d3dc <TIM_OC1_SetConfig+0x168>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d003      	beq.n	800d2f4 <TIM_OC1_SetConfig+0x80>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a3c      	ldr	r2, [pc, #240]	@ (800d3e0 <TIM_OC1_SetConfig+0x16c>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d119      	bne.n	800d328 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d008      	beq.n	800d30e <TIM_OC1_SetConfig+0x9a>
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	2b08      	cmp	r3, #8
 800d302:	d004      	beq.n	800d30e <TIM_OC1_SetConfig+0x9a>
 800d304:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800d308:	4836      	ldr	r0, [pc, #216]	@ (800d3e4 <TIM_OC1_SetConfig+0x170>)
 800d30a:	f7f8 fd31 	bl	8005d70 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f023 0308 	bic.w	r3, r3, #8
 800d314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f023 0304 	bic.w	r3, r3, #4
 800d326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a29      	ldr	r2, [pc, #164]	@ (800d3d0 <TIM_OC1_SetConfig+0x15c>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d00f      	beq.n	800d350 <TIM_OC1_SetConfig+0xdc>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a28      	ldr	r2, [pc, #160]	@ (800d3d4 <TIM_OC1_SetConfig+0x160>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d00b      	beq.n	800d350 <TIM_OC1_SetConfig+0xdc>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a27      	ldr	r2, [pc, #156]	@ (800d3d8 <TIM_OC1_SetConfig+0x164>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d007      	beq.n	800d350 <TIM_OC1_SetConfig+0xdc>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a26      	ldr	r2, [pc, #152]	@ (800d3dc <TIM_OC1_SetConfig+0x168>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d003      	beq.n	800d350 <TIM_OC1_SetConfig+0xdc>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a25      	ldr	r2, [pc, #148]	@ (800d3e0 <TIM_OC1_SetConfig+0x16c>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d12d      	bne.n	800d3ac <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d358:	d008      	beq.n	800d36c <TIM_OC1_SetConfig+0xf8>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d004      	beq.n	800d36c <TIM_OC1_SetConfig+0xf8>
 800d362:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800d366:	481f      	ldr	r0, [pc, #124]	@ (800d3e4 <TIM_OC1_SetConfig+0x170>)
 800d368:	f7f8 fd02 	bl	8005d70 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d374:	d008      	beq.n	800d388 <TIM_OC1_SetConfig+0x114>
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d004      	beq.n	800d388 <TIM_OC1_SetConfig+0x114>
 800d37e:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800d382:	4818      	ldr	r0, [pc, #96]	@ (800d3e4 <TIM_OC1_SetConfig+0x170>)
 800d384:	f7f8 fcf4 	bl	8005d70 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d38e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	621a      	str	r2, [r3, #32]
}
 800d3c6:	bf00      	nop
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	40012c00 	.word	0x40012c00
 800d3d4:	40013400 	.word	0x40013400
 800d3d8:	40014000 	.word	0x40014000
 800d3dc:	40014400 	.word	0x40014400
 800d3e0:	40014800 	.word	0x40014800
 800d3e4:	08010c0c 	.word	0x08010c0c

0800d3e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a1b      	ldr	r3, [r3, #32]
 800d3fc:	f023 0210 	bic.w	r2, r3, #16
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	021b      	lsls	r3, r3, #8
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	f023 0320 	bic.w	r3, r3, #32
 800d436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	4313      	orrs	r3, r2
 800d442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a3b      	ldr	r2, [pc, #236]	@ (800d534 <TIM_OC2_SetConfig+0x14c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d003      	beq.n	800d454 <TIM_OC2_SetConfig+0x6c>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a3a      	ldr	r2, [pc, #232]	@ (800d538 <TIM_OC2_SetConfig+0x150>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d11a      	bne.n	800d48a <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d008      	beq.n	800d46e <TIM_OC2_SetConfig+0x86>
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	2b08      	cmp	r3, #8
 800d462:	d004      	beq.n	800d46e <TIM_OC2_SetConfig+0x86>
 800d464:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800d468:	4834      	ldr	r0, [pc, #208]	@ (800d53c <TIM_OC2_SetConfig+0x154>)
 800d46a:	f7f8 fc81 	bl	8005d70 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	4313      	orrs	r3, r2
 800d480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a29      	ldr	r2, [pc, #164]	@ (800d534 <TIM_OC2_SetConfig+0x14c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00f      	beq.n	800d4b2 <TIM_OC2_SetConfig+0xca>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a28      	ldr	r2, [pc, #160]	@ (800d538 <TIM_OC2_SetConfig+0x150>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d00b      	beq.n	800d4b2 <TIM_OC2_SetConfig+0xca>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a28      	ldr	r2, [pc, #160]	@ (800d540 <TIM_OC2_SetConfig+0x158>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d007      	beq.n	800d4b2 <TIM_OC2_SetConfig+0xca>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a27      	ldr	r2, [pc, #156]	@ (800d544 <TIM_OC2_SetConfig+0x15c>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d003      	beq.n	800d4b2 <TIM_OC2_SetConfig+0xca>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a26      	ldr	r2, [pc, #152]	@ (800d548 <TIM_OC2_SetConfig+0x160>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d12f      	bne.n	800d512 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4ba:	d008      	beq.n	800d4ce <TIM_OC2_SetConfig+0xe6>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d004      	beq.n	800d4ce <TIM_OC2_SetConfig+0xe6>
 800d4c4:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800d4c8:	481c      	ldr	r0, [pc, #112]	@ (800d53c <TIM_OC2_SetConfig+0x154>)
 800d4ca:	f7f8 fc51 	bl	8005d70 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4d6:	d008      	beq.n	800d4ea <TIM_OC2_SetConfig+0x102>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <TIM_OC2_SetConfig+0x102>
 800d4e0:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800d4e4:	4815      	ldr	r0, [pc, #84]	@ (800d53c <TIM_OC2_SetConfig+0x154>)
 800d4e6:	f7f8 fc43 	bl	8005d70 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d4f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	4313      	orrs	r3, r2
 800d504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	693a      	ldr	r2, [r7, #16]
 800d50e:	4313      	orrs	r3, r2
 800d510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	621a      	str	r2, [r3, #32]
}
 800d52c:	bf00      	nop
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	40012c00 	.word	0x40012c00
 800d538:	40013400 	.word	0x40013400
 800d53c:	08010c0c 	.word	0x08010c0c
 800d540:	40014000 	.word	0x40014000
 800d544:	40014400 	.word	0x40014400
 800d548:	40014800 	.word	0x40014800

0800d54c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d57a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f023 0303 	bic.w	r3, r3, #3
 800d586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	4313      	orrs	r3, r2
 800d590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	021b      	lsls	r3, r3, #8
 800d5a0:	697a      	ldr	r2, [r7, #20]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a3b      	ldr	r2, [pc, #236]	@ (800d698 <TIM_OC3_SetConfig+0x14c>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d003      	beq.n	800d5b6 <TIM_OC3_SetConfig+0x6a>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a3a      	ldr	r2, [pc, #232]	@ (800d69c <TIM_OC3_SetConfig+0x150>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d11a      	bne.n	800d5ec <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d008      	beq.n	800d5d0 <TIM_OC3_SetConfig+0x84>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	d004      	beq.n	800d5d0 <TIM_OC3_SetConfig+0x84>
 800d5c6:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800d5ca:	4835      	ldr	r0, [pc, #212]	@ (800d6a0 <TIM_OC3_SetConfig+0x154>)
 800d5cc:	f7f8 fbd0 	bl	8005d70 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	021b      	lsls	r3, r3, #8
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d5ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d698 <TIM_OC3_SetConfig+0x14c>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d00f      	beq.n	800d614 <TIM_OC3_SetConfig+0xc8>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	4a29      	ldr	r2, [pc, #164]	@ (800d69c <TIM_OC3_SetConfig+0x150>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d00b      	beq.n	800d614 <TIM_OC3_SetConfig+0xc8>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a29      	ldr	r2, [pc, #164]	@ (800d6a4 <TIM_OC3_SetConfig+0x158>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d007      	beq.n	800d614 <TIM_OC3_SetConfig+0xc8>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a28      	ldr	r2, [pc, #160]	@ (800d6a8 <TIM_OC3_SetConfig+0x15c>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d003      	beq.n	800d614 <TIM_OC3_SetConfig+0xc8>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a27      	ldr	r2, [pc, #156]	@ (800d6ac <TIM_OC3_SetConfig+0x160>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d12f      	bne.n	800d674 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d61c:	d008      	beq.n	800d630 <TIM_OC3_SetConfig+0xe4>
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	699b      	ldr	r3, [r3, #24]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d004      	beq.n	800d630 <TIM_OC3_SetConfig+0xe4>
 800d626:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800d62a:	481d      	ldr	r0, [pc, #116]	@ (800d6a0 <TIM_OC3_SetConfig+0x154>)
 800d62c:	f7f8 fba0 	bl	8005d70 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d638:	d008      	beq.n	800d64c <TIM_OC3_SetConfig+0x100>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <TIM_OC3_SetConfig+0x100>
 800d642:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800d646:	4816      	ldr	r0, [pc, #88]	@ (800d6a0 <TIM_OC3_SetConfig+0x154>)
 800d648:	f7f8 fb92 	bl	8005d70 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d65a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	011b      	lsls	r3, r3, #4
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	4313      	orrs	r3, r2
 800d666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	011b      	lsls	r3, r3, #4
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	4313      	orrs	r3, r2
 800d672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	697a      	ldr	r2, [r7, #20]
 800d68c:	621a      	str	r2, [r3, #32]
}
 800d68e:	bf00      	nop
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	40012c00 	.word	0x40012c00
 800d69c:	40013400 	.word	0x40013400
 800d6a0:	08010c0c 	.word	0x08010c0c
 800d6a4:	40014000 	.word	0x40014000
 800d6a8:	40014400 	.word	0x40014400
 800d6ac:	40014800 	.word	0x40014800

0800d6b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69db      	ldr	r3, [r3, #28]
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d6de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	021b      	lsls	r3, r3, #8
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d6fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	031b      	lsls	r3, r3, #12
 800d706:	693a      	ldr	r2, [r7, #16]
 800d708:	4313      	orrs	r3, r2
 800d70a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a1e      	ldr	r2, [pc, #120]	@ (800d788 <TIM_OC4_SetConfig+0xd8>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d00f      	beq.n	800d734 <TIM_OC4_SetConfig+0x84>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a1d      	ldr	r2, [pc, #116]	@ (800d78c <TIM_OC4_SetConfig+0xdc>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d00b      	beq.n	800d734 <TIM_OC4_SetConfig+0x84>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a1c      	ldr	r2, [pc, #112]	@ (800d790 <TIM_OC4_SetConfig+0xe0>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d007      	beq.n	800d734 <TIM_OC4_SetConfig+0x84>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a1b      	ldr	r2, [pc, #108]	@ (800d794 <TIM_OC4_SetConfig+0xe4>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d003      	beq.n	800d734 <TIM_OC4_SetConfig+0x84>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a1a      	ldr	r2, [pc, #104]	@ (800d798 <TIM_OC4_SetConfig+0xe8>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d117      	bne.n	800d764 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d73c:	d008      	beq.n	800d750 <TIM_OC4_SetConfig+0xa0>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	695b      	ldr	r3, [r3, #20]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d004      	beq.n	800d750 <TIM_OC4_SetConfig+0xa0>
 800d746:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800d74a:	4814      	ldr	r0, [pc, #80]	@ (800d79c <TIM_OC4_SetConfig+0xec>)
 800d74c:	f7f8 fb10 	bl	8005d70 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	019b      	lsls	r3, r3, #6
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	4313      	orrs	r3, r2
 800d762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	621a      	str	r2, [r3, #32]
}
 800d77e:	bf00      	nop
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	40012c00 	.word	0x40012c00
 800d78c:	40013400 	.word	0x40013400
 800d790:	40014000 	.word	0x40014000
 800d794:	40014400 	.word	0x40014400
 800d798:	40014800 	.word	0x40014800
 800d79c:	08010c0c 	.word	0x08010c0c

0800d7a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
 800d7b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d7e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	041b      	lsls	r3, r3, #16
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a17      	ldr	r2, [pc, #92]	@ (800d854 <TIM_OC5_SetConfig+0xb4>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d00f      	beq.n	800d81a <TIM_OC5_SetConfig+0x7a>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a16      	ldr	r2, [pc, #88]	@ (800d858 <TIM_OC5_SetConfig+0xb8>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d00b      	beq.n	800d81a <TIM_OC5_SetConfig+0x7a>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a15      	ldr	r2, [pc, #84]	@ (800d85c <TIM_OC5_SetConfig+0xbc>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d007      	beq.n	800d81a <TIM_OC5_SetConfig+0x7a>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a14      	ldr	r2, [pc, #80]	@ (800d860 <TIM_OC5_SetConfig+0xc0>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d003      	beq.n	800d81a <TIM_OC5_SetConfig+0x7a>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a13      	ldr	r2, [pc, #76]	@ (800d864 <TIM_OC5_SetConfig+0xc4>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d109      	bne.n	800d82e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	021b      	lsls	r3, r3, #8
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	621a      	str	r2, [r3, #32]
}
 800d848:	bf00      	nop
 800d84a:	371c      	adds	r7, #28
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	40012c00 	.word	0x40012c00
 800d858:	40013400 	.word	0x40013400
 800d85c:	40014000 	.word	0x40014000
 800d860:	40014400 	.word	0x40014400
 800d864:	40014800 	.word	0x40014800

0800d868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d868:	b480      	push	{r7}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a1b      	ldr	r3, [r3, #32]
 800d876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a1b      	ldr	r3, [r3, #32]
 800d87c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	021b      	lsls	r3, r3, #8
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d8ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	051b      	lsls	r3, r3, #20
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a18      	ldr	r2, [pc, #96]	@ (800d920 <TIM_OC6_SetConfig+0xb8>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d00f      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x7c>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a17      	ldr	r2, [pc, #92]	@ (800d924 <TIM_OC6_SetConfig+0xbc>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d00b      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x7c>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a16      	ldr	r2, [pc, #88]	@ (800d928 <TIM_OC6_SetConfig+0xc0>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d007      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x7c>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a15      	ldr	r2, [pc, #84]	@ (800d92c <TIM_OC6_SetConfig+0xc4>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d003      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x7c>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a14      	ldr	r2, [pc, #80]	@ (800d930 <TIM_OC6_SetConfig+0xc8>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d109      	bne.n	800d8f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d8ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	029b      	lsls	r3, r3, #10
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	621a      	str	r2, [r3, #32]
}
 800d912:	bf00      	nop
 800d914:	371c      	adds	r7, #28
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	40012c00 	.word	0x40012c00
 800d924:	40013400 	.word	0x40013400
 800d928:	40014000 	.word	0x40014000
 800d92c:	40014400 	.word	0x40014400
 800d930:	40014800 	.word	0x40014800

0800d934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	f023 0201 	bic.w	r2, r3, #1
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d95e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	011b      	lsls	r3, r3, #4
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	4313      	orrs	r3, r2
 800d968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f023 030a 	bic.w	r3, r3, #10
 800d970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	4313      	orrs	r3, r2
 800d978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	621a      	str	r2, [r3, #32]
}
 800d986:	bf00      	nop
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d992:	b480      	push	{r7}
 800d994:	b087      	sub	sp, #28
 800d996:	af00      	add	r7, sp, #0
 800d998:	60f8      	str	r0, [r7, #12]
 800d99a:	60b9      	str	r1, [r7, #8]
 800d99c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6a1b      	ldr	r3, [r3, #32]
 800d9a8:	f023 0210 	bic.w	r2, r3, #16
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d9bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	031b      	lsls	r3, r3, #12
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d9ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	011b      	lsls	r3, r3, #4
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	621a      	str	r2, [r3, #32]
}
 800d9e6:	bf00      	nop
 800d9e8:	371c      	adds	r7, #28
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b085      	sub	sp, #20
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	4313      	orrs	r3, r2
 800da10:	f043 0307 	orr.w	r3, r3, #7
 800da14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	609a      	str	r2, [r3, #8]
}
 800da1c:	bf00      	nop
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da28:	b480      	push	{r7}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	021a      	lsls	r2, r3, #8
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	431a      	orrs	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	4313      	orrs	r3, r2
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	4313      	orrs	r3, r2
 800da54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	609a      	str	r2, [r3, #8]
}
 800da5c:	bf00      	nop
 800da5e:	371c      	adds	r7, #28
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	4a2f      	ldr	r2, [pc, #188]	@ (800db34 <TIM_CCxChannelCmd+0xcc>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d024      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da82:	d020      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	4a2c      	ldr	r2, [pc, #176]	@ (800db38 <TIM_CCxChannelCmd+0xd0>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d01c      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4a2b      	ldr	r2, [pc, #172]	@ (800db3c <TIM_CCxChannelCmd+0xd4>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d018      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4a2a      	ldr	r2, [pc, #168]	@ (800db40 <TIM_CCxChannelCmd+0xd8>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d014      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4a29      	ldr	r2, [pc, #164]	@ (800db44 <TIM_CCxChannelCmd+0xdc>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d010      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	4a28      	ldr	r2, [pc, #160]	@ (800db48 <TIM_CCxChannelCmd+0xe0>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d00c      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	4a27      	ldr	r2, [pc, #156]	@ (800db4c <TIM_CCxChannelCmd+0xe4>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d008      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	4a26      	ldr	r2, [pc, #152]	@ (800db50 <TIM_CCxChannelCmd+0xe8>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d004      	beq.n	800dac6 <TIM_CCxChannelCmd+0x5e>
 800dabc:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800dac0:	4824      	ldr	r0, [pc, #144]	@ (800db54 <TIM_CCxChannelCmd+0xec>)
 800dac2:	f7f8 f955 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d016      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b04      	cmp	r3, #4
 800dad0:	d013      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2b08      	cmp	r3, #8
 800dad6:	d010      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	2b0c      	cmp	r3, #12
 800dadc:	d00d      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	2b10      	cmp	r3, #16
 800dae2:	d00a      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2b14      	cmp	r3, #20
 800dae8:	d007      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	2b3c      	cmp	r3, #60	@ 0x3c
 800daee:	d004      	beq.n	800dafa <TIM_CCxChannelCmd+0x92>
 800daf0:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800daf4:	4817      	ldr	r0, [pc, #92]	@ (800db54 <TIM_CCxChannelCmd+0xec>)
 800daf6:	f7f8 f93b 	bl	8005d70 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	f003 031f 	and.w	r3, r3, #31
 800db00:	2201      	movs	r2, #1
 800db02:	fa02 f303 	lsl.w	r3, r2, r3
 800db06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6a1a      	ldr	r2, [r3, #32]
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	43db      	mvns	r3, r3
 800db10:	401a      	ands	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6a1a      	ldr	r2, [r3, #32]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f003 031f 	and.w	r3, r3, #31
 800db20:	6879      	ldr	r1, [r7, #4]
 800db22:	fa01 f303 	lsl.w	r3, r1, r3
 800db26:	431a      	orrs	r2, r3
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	621a      	str	r2, [r3, #32]
}
 800db2c:	bf00      	nop
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	40012c00 	.word	0x40012c00
 800db38:	40000400 	.word	0x40000400
 800db3c:	40000800 	.word	0x40000800
 800db40:	40000c00 	.word	0x40000c00
 800db44:	40013400 	.word	0x40013400
 800db48:	40014000 	.word	0x40014000
 800db4c:	40014400 	.word	0x40014400
 800db50:	40014800 	.word	0x40014800
 800db54:	08010c0c 	.word	0x08010c0c

0800db58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a34      	ldr	r2, [pc, #208]	@ (800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d02c      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db74:	d027      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a30      	ldr	r2, [pc, #192]	@ (800dc3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d022      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a2e      	ldr	r2, [pc, #184]	@ (800dc40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d01d      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a2d      	ldr	r2, [pc, #180]	@ (800dc44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d018      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a2b      	ldr	r2, [pc, #172]	@ (800dc48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d013      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a2a      	ldr	r2, [pc, #168]	@ (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00e      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a28      	ldr	r2, [pc, #160]	@ (800dc50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d009      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a27      	ldr	r2, [pc, #156]	@ (800dc54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d004      	beq.n	800dbc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbbc:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800dbc0:	4825      	ldr	r0, [pc, #148]	@ (800dc58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbc2:	f7f8 f8d5 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d020      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b10      	cmp	r3, #16
 800dbd4:	d01c      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b20      	cmp	r3, #32
 800dbdc:	d018      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b30      	cmp	r3, #48	@ 0x30
 800dbe4:	d014      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b40      	cmp	r3, #64	@ 0x40
 800dbec:	d010      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b50      	cmp	r3, #80	@ 0x50
 800dbf4:	d00c      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b60      	cmp	r3, #96	@ 0x60
 800dbfc:	d008      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b70      	cmp	r3, #112	@ 0x70
 800dc04:	d004      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc06:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800dc0a:	4813      	ldr	r0, [pc, #76]	@ (800dc58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc0c:	f7f8 f8b0 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	2b80      	cmp	r3, #128	@ 0x80
 800dc16:	d008      	beq.n	800dc2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800dc20:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800dc24:	480c      	ldr	r0, [pc, #48]	@ (800dc58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc26:	f7f8 f8a3 	bl	8005d70 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d113      	bne.n	800dc5c <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800dc34:	2302      	movs	r3, #2
 800dc36:	e0d3      	b.n	800dde0 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800dc38:	40012c00 	.word	0x40012c00
 800dc3c:	40000400 	.word	0x40000400
 800dc40:	40000800 	.word	0x40000800
 800dc44:	40000c00 	.word	0x40000c00
 800dc48:	40001000 	.word	0x40001000
 800dc4c:	40001400 	.word	0x40001400
 800dc50:	40013400 	.word	0x40013400
 800dc54:	40014000 	.word	0x40014000
 800dc58:	08010c44 	.word	0x08010c44
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2202      	movs	r2, #2
 800dc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a59      	ldr	r2, [pc, #356]	@ (800dde8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d004      	beq.n	800dc90 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a58      	ldr	r2, [pc, #352]	@ (800ddec <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d161      	bne.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d054      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dca0:	d04f      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dcaa:	d04a      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dcb4:	d045      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dcbe:	d040      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800dcc8:	d03b      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dcd2:	d036      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dcdc:	d031      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800dce6:	d02c      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dcf0:	d027      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800dcfa:	d022      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dd04:	d01d      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800dd0e:	d018      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dd18:	d013      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800dd22:	d00e      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800dd2c:	d009      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800dd36:	d004      	beq.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd38:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800dd3c:	482c      	ldr	r0, [pc, #176]	@ (800ddf0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800dd3e:	f7f8 f817 	bl	8005d70 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dd48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a1d      	ldr	r2, [pc, #116]	@ (800dde8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d01d      	beq.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd80:	d018      	beq.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a1b      	ldr	r2, [pc, #108]	@ (800ddf4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d013      	beq.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a19      	ldr	r2, [pc, #100]	@ (800ddf8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00e      	beq.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a18      	ldr	r2, [pc, #96]	@ (800ddfc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d009      	beq.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a11      	ldr	r2, [pc, #68]	@ (800ddec <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d004      	beq.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a14      	ldr	r2, [pc, #80]	@ (800de00 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d10c      	bne.n	800ddce <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	40012c00 	.word	0x40012c00
 800ddec:	40013400 	.word	0x40013400
 800ddf0:	08010c44 	.word	0x08010c44
 800ddf4:	40000400 	.word	0x40000400
 800ddf8:	40000800 	.word	0x40000800
 800ddfc:	40000c00 	.word	0x40000c00
 800de00:	40014000 	.word	0x40014000

0800de04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de0e:	2300      	movs	r3, #0
 800de10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a91      	ldr	r2, [pc, #580]	@ (800e05c <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d018      	beq.n	800de4e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a8f      	ldr	r2, [pc, #572]	@ (800e060 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d013      	beq.n	800de4e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a8e      	ldr	r2, [pc, #568]	@ (800e064 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d00e      	beq.n	800de4e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a8c      	ldr	r2, [pc, #560]	@ (800e068 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d009      	beq.n	800de4e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a8b      	ldr	r2, [pc, #556]	@ (800e06c <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d004      	beq.n	800de4e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de44:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800de48:	4889      	ldr	r0, [pc, #548]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de4a:	f7f7 ff91 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de56:	d008      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d004      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800de60:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800de64:	4882      	ldr	r0, [pc, #520]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de66:	f7f7 ff83 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de72:	d008      	beq.n	800de86 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d004      	beq.n	800de86 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800de7c:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800de80:	487b      	ldr	r0, [pc, #492]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de82:	f7f7 ff75 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d013      	beq.n	800deb6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de96:	d00e      	beq.n	800deb6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dea0:	d009      	beq.n	800deb6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800deaa:	d004      	beq.n	800deb6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800deac:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800deb0:	486f      	ldr	r0, [pc, #444]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800deb2:	f7f7 ff5d 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	2bff      	cmp	r3, #255	@ 0xff
 800debc:	d904      	bls.n	800dec8 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800debe:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800dec2:	486b      	ldr	r0, [pc, #428]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dec4:	f7f7 ff54 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ded0:	d008      	beq.n	800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d004      	beq.n	800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800deda:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800dede:	4864      	ldr	r0, [pc, #400]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dee0:	f7f7 ff46 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d009      	beq.n	800df00 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800def4:	d004      	beq.n	800df00 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800def6:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800defa:	485d      	ldr	r0, [pc, #372]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800defc:	f7f7 ff38 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	2b0f      	cmp	r3, #15
 800df06:	d904      	bls.n	800df12 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800df08:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800df0c:	4858      	ldr	r0, [pc, #352]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800df0e:	f7f7 ff2f 	bl	8005d70 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df1a:	d008      	beq.n	800df2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800df24:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800df28:	4851      	ldr	r0, [pc, #324]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800df2a:	f7f7 ff21 	bl	8005d70 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df34:	2b01      	cmp	r3, #1
 800df36:	d101      	bne.n	800df3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800df38:	2302      	movs	r3, #2
 800df3a:	e08a      	b.n	800e052 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	4313      	orrs	r3, r2
 800df50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	4313      	orrs	r3, r2
 800df6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	4313      	orrs	r3, r2
 800df88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	695b      	ldr	r3, [r3, #20]
 800df94:	4313      	orrs	r3, r2
 800df96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	041b      	lsls	r3, r3, #16
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a28      	ldr	r2, [pc, #160]	@ (800e05c <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d004      	beq.n	800dfca <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a26      	ldr	r2, [pc, #152]	@ (800e060 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d13a      	bne.n	800e040 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfd2:	d008      	beq.n	800dfe6 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	69db      	ldr	r3, [r3, #28]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d004      	beq.n	800dfe6 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800dfdc:	f640 0112 	movw	r1, #2066	@ 0x812
 800dfe0:	4823      	ldr	r0, [pc, #140]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dfe2:	f7f7 fec5 	bl	8005d70 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	6a1b      	ldr	r3, [r3, #32]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d009      	beq.n	800e002 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dff6:	d004      	beq.n	800e002 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800dff8:	f640 0113 	movw	r1, #2067	@ 0x813
 800dffc:	481c      	ldr	r0, [pc, #112]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dffe:	f7f7 feb7 	bl	8005d70 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e006:	2b0f      	cmp	r3, #15
 800e008:	d904      	bls.n	800e014 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800e00a:	f640 0114 	movw	r1, #2068	@ 0x814
 800e00e:	4818      	ldr	r0, [pc, #96]	@ (800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800e010:	f7f7 feae 	bl	8005d70 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01e:	051b      	lsls	r3, r3, #20
 800e020:	4313      	orrs	r3, r2
 800e022:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	4313      	orrs	r3, r2
 800e030:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	6a1b      	ldr	r3, [r3, #32]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	40012c00 	.word	0x40012c00
 800e060:	40013400 	.word	0x40013400
 800e064:	40014000 	.word	0x40014000
 800e068:	40014400 	.word	0x40014400
 800e06c:	40014800 	.word	0x40014800
 800e070:	08010c44 	.word	0x08010c44

0800e074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e08b      	b.n	800e1da <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d023      	beq.n	800e112 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a45      	ldr	r2, [pc, #276]	@ (800e1e4 <HAL_UART_Init+0x134>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d041      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a43      	ldr	r2, [pc, #268]	@ (800e1e8 <HAL_UART_Init+0x138>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d03c      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a42      	ldr	r2, [pc, #264]	@ (800e1ec <HAL_UART_Init+0x13c>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d037      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a40      	ldr	r2, [pc, #256]	@ (800e1f0 <HAL_UART_Init+0x140>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d032      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a3f      	ldr	r2, [pc, #252]	@ (800e1f4 <HAL_UART_Init+0x144>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d02d      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a3d      	ldr	r2, [pc, #244]	@ (800e1f8 <HAL_UART_Init+0x148>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d028      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e106:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800e10a:	483c      	ldr	r0, [pc, #240]	@ (800e1fc <HAL_UART_Init+0x14c>)
 800e10c:	f7f7 fe30 	bl	8005d70 <assert_failed>
 800e110:	e022      	b.n	800e158 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a33      	ldr	r2, [pc, #204]	@ (800e1e4 <HAL_UART_Init+0x134>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d01d      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a31      	ldr	r2, [pc, #196]	@ (800e1e8 <HAL_UART_Init+0x138>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d018      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a30      	ldr	r2, [pc, #192]	@ (800e1ec <HAL_UART_Init+0x13c>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d013      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a2e      	ldr	r2, [pc, #184]	@ (800e1f0 <HAL_UART_Init+0x140>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d00e      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a2d      	ldr	r2, [pc, #180]	@ (800e1f4 <HAL_UART_Init+0x144>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d009      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a2b      	ldr	r2, [pc, #172]	@ (800e1f8 <HAL_UART_Init+0x148>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d004      	beq.n	800e158 <HAL_UART_Init+0xa8>
 800e14e:	f240 1157 	movw	r1, #343	@ 0x157
 800e152:	482a      	ldr	r0, [pc, #168]	@ (800e1fc <HAL_UART_Init+0x14c>)
 800e154:	f7f7 fe0c 	bl	8005d70 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d106      	bne.n	800e16e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7f8 fb3b 	bl	80067e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2224      	movs	r2, #36	@ 0x24
 800e172:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f022 0201 	bic.w	r2, r2, #1
 800e182:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fc1f 	bl	800e9d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f8be 	bl	800e314 <UART_SetConfig>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d101      	bne.n	800e1a2 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e01b      	b.n	800e1da <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e1b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	689a      	ldr	r2, [r3, #8]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e1c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f042 0201 	orr.w	r2, r2, #1
 800e1d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 fd5c 	bl	800ec90 <UART_CheckIdleState>
 800e1d8:	4603      	mov	r3, r0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	40013800 	.word	0x40013800
 800e1e8:	40004400 	.word	0x40004400
 800e1ec:	40004800 	.word	0x40004800
 800e1f0:	40004c00 	.word	0x40004c00
 800e1f4:	40005000 	.word	0x40005000
 800e1f8:	40008000 	.word	0x40008000
 800e1fc:	08010c80 	.word	0x08010c80

0800e200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08a      	sub	sp, #40	@ 0x28
 800e204:	af02      	add	r7, sp, #8
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	4613      	mov	r3, r2
 800e20e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e214:	2b20      	cmp	r3, #32
 800e216:	d177      	bne.n	800e308 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <HAL_UART_Transmit+0x24>
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	e070      	b.n	800e30a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2221      	movs	r2, #33	@ 0x21
 800e234:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e236:	f7f8 fbc5 	bl	80069c4 <HAL_GetTick>
 800e23a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	88fa      	ldrh	r2, [r7, #6]
 800e240:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	88fa      	ldrh	r2, [r7, #6]
 800e248:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e254:	d108      	bne.n	800e268 <HAL_UART_Transmit+0x68>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d104      	bne.n	800e268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e25e:	2300      	movs	r3, #0
 800e260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	61bb      	str	r3, [r7, #24]
 800e266:	e003      	b.n	800e270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e270:	e02f      	b.n	800e2d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2200      	movs	r2, #0
 800e27a:	2180      	movs	r1, #128	@ 0x80
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f000 fdaf 	bl	800ede0 <UART_WaitOnFlagUntilTimeout>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d004      	beq.n	800e292 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2220      	movs	r2, #32
 800e28c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e28e:	2303      	movs	r3, #3
 800e290:	e03b      	b.n	800e30a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10b      	bne.n	800e2b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	881a      	ldrh	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	3302      	adds	r3, #2
 800e2ac:	61bb      	str	r3, [r7, #24]
 800e2ae:	e007      	b.n	800e2c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	781a      	ldrb	r2, [r3, #0]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1c9      	bne.n	800e272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2140      	movs	r1, #64	@ 0x40
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 fd79 	bl	800ede0 <UART_WaitOnFlagUntilTimeout>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2220      	movs	r2, #32
 800e2f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	e005      	b.n	800e30a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2220      	movs	r2, #32
 800e302:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	e000      	b.n	800e30a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e308:	2302      	movs	r3, #2
  }
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3720      	adds	r7, #32
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
	...

0800e314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e318:	b08a      	sub	sp, #40	@ 0x28
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	4a9e      	ldr	r2, [pc, #632]	@ (800e5a4 <UART_SetConfig+0x290>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d904      	bls.n	800e338 <UART_SetConfig+0x24>
 800e32e:	f640 4158 	movw	r1, #3160	@ 0xc58
 800e332:	489d      	ldr	r0, [pc, #628]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e334:	f7f7 fd1c 	bl	8005d70 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e340:	d00d      	beq.n	800e35e <UART_SetConfig+0x4a>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d009      	beq.n	800e35e <UART_SetConfig+0x4a>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e352:	d004      	beq.n	800e35e <UART_SetConfig+0x4a>
 800e354:	f640 4159 	movw	r1, #3161	@ 0xc59
 800e358:	4893      	ldr	r0, [pc, #588]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e35a:	f7f7 fd09 	bl	8005d70 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a92      	ldr	r2, [pc, #584]	@ (800e5ac <UART_SetConfig+0x298>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d10e      	bne.n	800e386 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d030      	beq.n	800e3d2 <UART_SetConfig+0xbe>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e378:	d02b      	beq.n	800e3d2 <UART_SetConfig+0xbe>
 800e37a:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800e37e:	488a      	ldr	r0, [pc, #552]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e380:	f7f7 fcf6 	bl	8005d70 <assert_failed>
 800e384:	e025      	b.n	800e3d2 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e38e:	d012      	beq.n	800e3b6 <UART_SetConfig+0xa2>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00e      	beq.n	800e3b6 <UART_SetConfig+0xa2>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e3a0:	d009      	beq.n	800e3b6 <UART_SetConfig+0xa2>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3aa:	d004      	beq.n	800e3b6 <UART_SetConfig+0xa2>
 800e3ac:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800e3b0:	487d      	ldr	r0, [pc, #500]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e3b2:	f7f7 fcdd 	bl	8005d70 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d009      	beq.n	800e3d2 <UART_SetConfig+0xbe>
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6a1b      	ldr	r3, [r3, #32]
 800e3c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3c6:	d004      	beq.n	800e3d2 <UART_SetConfig+0xbe>
 800e3c8:	f640 4161 	movw	r1, #3169	@ 0xc61
 800e3cc:	4876      	ldr	r0, [pc, #472]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e3ce:	f7f7 fccf 	bl	8005d70 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00e      	beq.n	800e3f8 <UART_SetConfig+0xe4>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	691b      	ldr	r3, [r3, #16]
 800e3de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3e2:	d009      	beq.n	800e3f8 <UART_SetConfig+0xe4>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e3ec:	d004      	beq.n	800e3f8 <UART_SetConfig+0xe4>
 800e3ee:	f640 4164 	movw	r1, #3172	@ 0xc64
 800e3f2:	486d      	ldr	r0, [pc, #436]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e3f4:	f7f7 fcbc 	bl	8005d70 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	695b      	ldr	r3, [r3, #20]
 800e3fc:	f023 030c 	bic.w	r3, r3, #12
 800e400:	2b00      	cmp	r3, #0
 800e402:	d103      	bne.n	800e40c <UART_SetConfig+0xf8>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	695b      	ldr	r3, [r3, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d104      	bne.n	800e416 <UART_SetConfig+0x102>
 800e40c:	f640 4165 	movw	r1, #3173	@ 0xc65
 800e410:	4865      	ldr	r0, [pc, #404]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e412:	f7f7 fcad 	bl	8005d70 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d013      	beq.n	800e446 <UART_SetConfig+0x132>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	699b      	ldr	r3, [r3, #24]
 800e422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e426:	d00e      	beq.n	800e446 <UART_SetConfig+0x132>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	699b      	ldr	r3, [r3, #24]
 800e42c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e430:	d009      	beq.n	800e446 <UART_SetConfig+0x132>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e43a:	d004      	beq.n	800e446 <UART_SetConfig+0x132>
 800e43c:	f640 4166 	movw	r1, #3174	@ 0xc66
 800e440:	4859      	ldr	r0, [pc, #356]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e442:	f7f7 fc95 	bl	8005d70 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	69db      	ldr	r3, [r3, #28]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d009      	beq.n	800e462 <UART_SetConfig+0x14e>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	69db      	ldr	r3, [r3, #28]
 800e452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e456:	d004      	beq.n	800e462 <UART_SetConfig+0x14e>
 800e458:	f640 4167 	movw	r1, #3175	@ 0xc67
 800e45c:	4852      	ldr	r0, [pc, #328]	@ (800e5a8 <UART_SetConfig+0x294>)
 800e45e:	f7f7 fc87 	bl	8005d70 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	431a      	orrs	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	695b      	ldr	r3, [r3, #20]
 800e470:	431a      	orrs	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	4313      	orrs	r3, r2
 800e478:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	4b4b      	ldr	r3, [pc, #300]	@ (800e5b0 <UART_SetConfig+0x29c>)
 800e482:	4013      	ands	r3, r2
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	6812      	ldr	r2, [r2, #0]
 800e488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e48a:	430b      	orrs	r3, r1
 800e48c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	68da      	ldr	r2, [r3, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	430a      	orrs	r2, r1
 800e4a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a3f      	ldr	r2, [pc, #252]	@ (800e5ac <UART_SetConfig+0x298>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d004      	beq.n	800e4be <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6a1b      	ldr	r3, [r3, #32]
 800e4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a37      	ldr	r2, [pc, #220]	@ (800e5b4 <UART_SetConfig+0x2a0>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d125      	bne.n	800e528 <UART_SetConfig+0x214>
 800e4dc:	4b36      	ldr	r3, [pc, #216]	@ (800e5b8 <UART_SetConfig+0x2a4>)
 800e4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4e2:	f003 0303 	and.w	r3, r3, #3
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d81a      	bhi.n	800e520 <UART_SetConfig+0x20c>
 800e4ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e4f0 <UART_SetConfig+0x1dc>)
 800e4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f0:	0800e501 	.word	0x0800e501
 800e4f4:	0800e511 	.word	0x0800e511
 800e4f8:	0800e509 	.word	0x0800e509
 800e4fc:	0800e519 	.word	0x0800e519
 800e500:	2301      	movs	r3, #1
 800e502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e506:	e114      	b.n	800e732 <UART_SetConfig+0x41e>
 800e508:	2302      	movs	r3, #2
 800e50a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e50e:	e110      	b.n	800e732 <UART_SetConfig+0x41e>
 800e510:	2304      	movs	r3, #4
 800e512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e516:	e10c      	b.n	800e732 <UART_SetConfig+0x41e>
 800e518:	2308      	movs	r3, #8
 800e51a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e51e:	e108      	b.n	800e732 <UART_SetConfig+0x41e>
 800e520:	2310      	movs	r3, #16
 800e522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e526:	e104      	b.n	800e732 <UART_SetConfig+0x41e>
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a23      	ldr	r2, [pc, #140]	@ (800e5bc <UART_SetConfig+0x2a8>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d146      	bne.n	800e5c0 <UART_SetConfig+0x2ac>
 800e532:	4b21      	ldr	r3, [pc, #132]	@ (800e5b8 <UART_SetConfig+0x2a4>)
 800e534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e538:	f003 030c 	and.w	r3, r3, #12
 800e53c:	2b0c      	cmp	r3, #12
 800e53e:	d82d      	bhi.n	800e59c <UART_SetConfig+0x288>
 800e540:	a201      	add	r2, pc, #4	@ (adr r2, 800e548 <UART_SetConfig+0x234>)
 800e542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e546:	bf00      	nop
 800e548:	0800e57d 	.word	0x0800e57d
 800e54c:	0800e59d 	.word	0x0800e59d
 800e550:	0800e59d 	.word	0x0800e59d
 800e554:	0800e59d 	.word	0x0800e59d
 800e558:	0800e58d 	.word	0x0800e58d
 800e55c:	0800e59d 	.word	0x0800e59d
 800e560:	0800e59d 	.word	0x0800e59d
 800e564:	0800e59d 	.word	0x0800e59d
 800e568:	0800e585 	.word	0x0800e585
 800e56c:	0800e59d 	.word	0x0800e59d
 800e570:	0800e59d 	.word	0x0800e59d
 800e574:	0800e59d 	.word	0x0800e59d
 800e578:	0800e595 	.word	0x0800e595
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e582:	e0d6      	b.n	800e732 <UART_SetConfig+0x41e>
 800e584:	2302      	movs	r3, #2
 800e586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e58a:	e0d2      	b.n	800e732 <UART_SetConfig+0x41e>
 800e58c:	2304      	movs	r3, #4
 800e58e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e592:	e0ce      	b.n	800e732 <UART_SetConfig+0x41e>
 800e594:	2308      	movs	r3, #8
 800e596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e59a:	e0ca      	b.n	800e732 <UART_SetConfig+0x41e>
 800e59c:	2310      	movs	r3, #16
 800e59e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5a2:	e0c6      	b.n	800e732 <UART_SetConfig+0x41e>
 800e5a4:	00989680 	.word	0x00989680
 800e5a8:	08010c80 	.word	0x08010c80
 800e5ac:	40008000 	.word	0x40008000
 800e5b0:	efff69f3 	.word	0xefff69f3
 800e5b4:	40013800 	.word	0x40013800
 800e5b8:	40021000 	.word	0x40021000
 800e5bc:	40004400 	.word	0x40004400
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4aae      	ldr	r2, [pc, #696]	@ (800e880 <UART_SetConfig+0x56c>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d125      	bne.n	800e616 <UART_SetConfig+0x302>
 800e5ca:	4bae      	ldr	r3, [pc, #696]	@ (800e884 <UART_SetConfig+0x570>)
 800e5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e5d4:	2b30      	cmp	r3, #48	@ 0x30
 800e5d6:	d016      	beq.n	800e606 <UART_SetConfig+0x2f2>
 800e5d8:	2b30      	cmp	r3, #48	@ 0x30
 800e5da:	d818      	bhi.n	800e60e <UART_SetConfig+0x2fa>
 800e5dc:	2b20      	cmp	r3, #32
 800e5de:	d00a      	beq.n	800e5f6 <UART_SetConfig+0x2e2>
 800e5e0:	2b20      	cmp	r3, #32
 800e5e2:	d814      	bhi.n	800e60e <UART_SetConfig+0x2fa>
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d002      	beq.n	800e5ee <UART_SetConfig+0x2da>
 800e5e8:	2b10      	cmp	r3, #16
 800e5ea:	d008      	beq.n	800e5fe <UART_SetConfig+0x2ea>
 800e5ec:	e00f      	b.n	800e60e <UART_SetConfig+0x2fa>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5f4:	e09d      	b.n	800e732 <UART_SetConfig+0x41e>
 800e5f6:	2302      	movs	r3, #2
 800e5f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5fc:	e099      	b.n	800e732 <UART_SetConfig+0x41e>
 800e5fe:	2304      	movs	r3, #4
 800e600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e604:	e095      	b.n	800e732 <UART_SetConfig+0x41e>
 800e606:	2308      	movs	r3, #8
 800e608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e60c:	e091      	b.n	800e732 <UART_SetConfig+0x41e>
 800e60e:	2310      	movs	r3, #16
 800e610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e614:	e08d      	b.n	800e732 <UART_SetConfig+0x41e>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a9b      	ldr	r2, [pc, #620]	@ (800e888 <UART_SetConfig+0x574>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d125      	bne.n	800e66c <UART_SetConfig+0x358>
 800e620:	4b98      	ldr	r3, [pc, #608]	@ (800e884 <UART_SetConfig+0x570>)
 800e622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e626:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e62a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e62c:	d016      	beq.n	800e65c <UART_SetConfig+0x348>
 800e62e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e630:	d818      	bhi.n	800e664 <UART_SetConfig+0x350>
 800e632:	2b80      	cmp	r3, #128	@ 0x80
 800e634:	d00a      	beq.n	800e64c <UART_SetConfig+0x338>
 800e636:	2b80      	cmp	r3, #128	@ 0x80
 800e638:	d814      	bhi.n	800e664 <UART_SetConfig+0x350>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d002      	beq.n	800e644 <UART_SetConfig+0x330>
 800e63e:	2b40      	cmp	r3, #64	@ 0x40
 800e640:	d008      	beq.n	800e654 <UART_SetConfig+0x340>
 800e642:	e00f      	b.n	800e664 <UART_SetConfig+0x350>
 800e644:	2300      	movs	r3, #0
 800e646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e64a:	e072      	b.n	800e732 <UART_SetConfig+0x41e>
 800e64c:	2302      	movs	r3, #2
 800e64e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e652:	e06e      	b.n	800e732 <UART_SetConfig+0x41e>
 800e654:	2304      	movs	r3, #4
 800e656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e65a:	e06a      	b.n	800e732 <UART_SetConfig+0x41e>
 800e65c:	2308      	movs	r3, #8
 800e65e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e662:	e066      	b.n	800e732 <UART_SetConfig+0x41e>
 800e664:	2310      	movs	r3, #16
 800e666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e66a:	e062      	b.n	800e732 <UART_SetConfig+0x41e>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a86      	ldr	r2, [pc, #536]	@ (800e88c <UART_SetConfig+0x578>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d12a      	bne.n	800e6cc <UART_SetConfig+0x3b8>
 800e676:	4b83      	ldr	r3, [pc, #524]	@ (800e884 <UART_SetConfig+0x570>)
 800e678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e67c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e680:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e684:	d01a      	beq.n	800e6bc <UART_SetConfig+0x3a8>
 800e686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e68a:	d81b      	bhi.n	800e6c4 <UART_SetConfig+0x3b0>
 800e68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e690:	d00c      	beq.n	800e6ac <UART_SetConfig+0x398>
 800e692:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e696:	d815      	bhi.n	800e6c4 <UART_SetConfig+0x3b0>
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d003      	beq.n	800e6a4 <UART_SetConfig+0x390>
 800e69c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6a0:	d008      	beq.n	800e6b4 <UART_SetConfig+0x3a0>
 800e6a2:	e00f      	b.n	800e6c4 <UART_SetConfig+0x3b0>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6aa:	e042      	b.n	800e732 <UART_SetConfig+0x41e>
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6b2:	e03e      	b.n	800e732 <UART_SetConfig+0x41e>
 800e6b4:	2304      	movs	r3, #4
 800e6b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ba:	e03a      	b.n	800e732 <UART_SetConfig+0x41e>
 800e6bc:	2308      	movs	r3, #8
 800e6be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6c2:	e036      	b.n	800e732 <UART_SetConfig+0x41e>
 800e6c4:	2310      	movs	r3, #16
 800e6c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ca:	e032      	b.n	800e732 <UART_SetConfig+0x41e>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a6f      	ldr	r2, [pc, #444]	@ (800e890 <UART_SetConfig+0x57c>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d12a      	bne.n	800e72c <UART_SetConfig+0x418>
 800e6d6:	4b6b      	ldr	r3, [pc, #428]	@ (800e884 <UART_SetConfig+0x570>)
 800e6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e6e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e6e4:	d01a      	beq.n	800e71c <UART_SetConfig+0x408>
 800e6e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e6ea:	d81b      	bhi.n	800e724 <UART_SetConfig+0x410>
 800e6ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6f0:	d00c      	beq.n	800e70c <UART_SetConfig+0x3f8>
 800e6f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6f6:	d815      	bhi.n	800e724 <UART_SetConfig+0x410>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d003      	beq.n	800e704 <UART_SetConfig+0x3f0>
 800e6fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e700:	d008      	beq.n	800e714 <UART_SetConfig+0x400>
 800e702:	e00f      	b.n	800e724 <UART_SetConfig+0x410>
 800e704:	2300      	movs	r3, #0
 800e706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e70a:	e012      	b.n	800e732 <UART_SetConfig+0x41e>
 800e70c:	2302      	movs	r3, #2
 800e70e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e712:	e00e      	b.n	800e732 <UART_SetConfig+0x41e>
 800e714:	2304      	movs	r3, #4
 800e716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e71a:	e00a      	b.n	800e732 <UART_SetConfig+0x41e>
 800e71c:	2308      	movs	r3, #8
 800e71e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e722:	e006      	b.n	800e732 <UART_SetConfig+0x41e>
 800e724:	2310      	movs	r3, #16
 800e726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e72a:	e002      	b.n	800e732 <UART_SetConfig+0x41e>
 800e72c:	2310      	movs	r3, #16
 800e72e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a56      	ldr	r2, [pc, #344]	@ (800e890 <UART_SetConfig+0x57c>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d17a      	bne.n	800e832 <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e73c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e740:	2b08      	cmp	r3, #8
 800e742:	d824      	bhi.n	800e78e <UART_SetConfig+0x47a>
 800e744:	a201      	add	r2, pc, #4	@ (adr r2, 800e74c <UART_SetConfig+0x438>)
 800e746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74a:	bf00      	nop
 800e74c:	0800e771 	.word	0x0800e771
 800e750:	0800e78f 	.word	0x0800e78f
 800e754:	0800e779 	.word	0x0800e779
 800e758:	0800e78f 	.word	0x0800e78f
 800e75c:	0800e77f 	.word	0x0800e77f
 800e760:	0800e78f 	.word	0x0800e78f
 800e764:	0800e78f 	.word	0x0800e78f
 800e768:	0800e78f 	.word	0x0800e78f
 800e76c:	0800e787 	.word	0x0800e787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e770:	f7fa fd5c 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800e774:	61f8      	str	r0, [r7, #28]
        break;
 800e776:	e010      	b.n	800e79a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e778:	4b46      	ldr	r3, [pc, #280]	@ (800e894 <UART_SetConfig+0x580>)
 800e77a:	61fb      	str	r3, [r7, #28]
        break;
 800e77c:	e00d      	b.n	800e79a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e77e:	f7fa fcbd 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 800e782:	61f8      	str	r0, [r7, #28]
        break;
 800e784:	e009      	b.n	800e79a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e78a:	61fb      	str	r3, [r7, #28]
        break;
 800e78c:	e005      	b.n	800e79a <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800e78e:	2300      	movs	r3, #0
 800e790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 8107 	beq.w	800e9b0 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	005b      	lsls	r3, r3, #1
 800e7aa:	4413      	add	r3, r2
 800e7ac:	69fa      	ldr	r2, [r7, #28]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d305      	bcc.n	800e7be <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7b8:	69fa      	ldr	r2, [r7, #28]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d903      	bls.n	800e7c6 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e7c4:	e0f4      	b.n	800e9b0 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	461c      	mov	r4, r3
 800e7cc:	4615      	mov	r5, r2
 800e7ce:	f04f 0200 	mov.w	r2, #0
 800e7d2:	f04f 0300 	mov.w	r3, #0
 800e7d6:	022b      	lsls	r3, r5, #8
 800e7d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e7dc:	0222      	lsls	r2, r4, #8
 800e7de:	68f9      	ldr	r1, [r7, #12]
 800e7e0:	6849      	ldr	r1, [r1, #4]
 800e7e2:	0849      	lsrs	r1, r1, #1
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	4688      	mov	r8, r1
 800e7e8:	4681      	mov	r9, r0
 800e7ea:	eb12 0a08 	adds.w	sl, r2, r8
 800e7ee:	eb43 0b09 	adc.w	fp, r3, r9
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	603b      	str	r3, [r7, #0]
 800e7fa:	607a      	str	r2, [r7, #4]
 800e7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e800:	4650      	mov	r0, sl
 800e802:	4659      	mov	r1, fp
 800e804:	f7f1 fd84 	bl	8000310 <__aeabi_uldivmod>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4613      	mov	r3, r2
 800e80e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e816:	d308      	bcc.n	800e82a <UART_SetConfig+0x516>
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e81e:	d204      	bcs.n	800e82a <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	69ba      	ldr	r2, [r7, #24]
 800e826:	60da      	str	r2, [r3, #12]
 800e828:	e0c2      	b.n	800e9b0 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e830:	e0be      	b.n	800e9b0 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	69db      	ldr	r3, [r3, #28]
 800e836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e83a:	d16a      	bne.n	800e912 <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800e83c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e840:	2b08      	cmp	r3, #8
 800e842:	d834      	bhi.n	800e8ae <UART_SetConfig+0x59a>
 800e844:	a201      	add	r2, pc, #4	@ (adr r2, 800e84c <UART_SetConfig+0x538>)
 800e846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84a:	bf00      	nop
 800e84c:	0800e871 	.word	0x0800e871
 800e850:	0800e879 	.word	0x0800e879
 800e854:	0800e899 	.word	0x0800e899
 800e858:	0800e8af 	.word	0x0800e8af
 800e85c:	0800e89f 	.word	0x0800e89f
 800e860:	0800e8af 	.word	0x0800e8af
 800e864:	0800e8af 	.word	0x0800e8af
 800e868:	0800e8af 	.word	0x0800e8af
 800e86c:	0800e8a7 	.word	0x0800e8a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e870:	f7fa fcdc 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800e874:	61f8      	str	r0, [r7, #28]
        break;
 800e876:	e020      	b.n	800e8ba <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e878:	f7fa fcee 	bl	8009258 <HAL_RCC_GetPCLK2Freq>
 800e87c:	61f8      	str	r0, [r7, #28]
        break;
 800e87e:	e01c      	b.n	800e8ba <UART_SetConfig+0x5a6>
 800e880:	40004800 	.word	0x40004800
 800e884:	40021000 	.word	0x40021000
 800e888:	40004c00 	.word	0x40004c00
 800e88c:	40005000 	.word	0x40005000
 800e890:	40008000 	.word	0x40008000
 800e894:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e898:	4b4c      	ldr	r3, [pc, #304]	@ (800e9cc <UART_SetConfig+0x6b8>)
 800e89a:	61fb      	str	r3, [r7, #28]
        break;
 800e89c:	e00d      	b.n	800e8ba <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e89e:	f7fa fc2d 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 800e8a2:	61f8      	str	r0, [r7, #28]
        break;
 800e8a4:	e009      	b.n	800e8ba <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e8aa:	61fb      	str	r3, [r7, #28]
        break;
 800e8ac:	e005      	b.n	800e8ba <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e8b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d077      	beq.n	800e9b0 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	005a      	lsls	r2, r3, #1
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	085b      	lsrs	r3, r3, #1
 800e8ca:	441a      	add	r2, r3
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	2b0f      	cmp	r3, #15
 800e8da:	d916      	bls.n	800e90a <UART_SetConfig+0x5f6>
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8e2:	d212      	bcs.n	800e90a <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	f023 030f 	bic.w	r3, r3, #15
 800e8ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	085b      	lsrs	r3, r3, #1
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	f003 0307 	and.w	r3, r3, #7
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	8afb      	ldrh	r3, [r7, #22]
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	8afa      	ldrh	r2, [r7, #22]
 800e906:	60da      	str	r2, [r3, #12]
 800e908:	e052      	b.n	800e9b0 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e910:	e04e      	b.n	800e9b0 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e912:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e916:	2b08      	cmp	r3, #8
 800e918:	d827      	bhi.n	800e96a <UART_SetConfig+0x656>
 800e91a:	a201      	add	r2, pc, #4	@ (adr r2, 800e920 <UART_SetConfig+0x60c>)
 800e91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e920:	0800e945 	.word	0x0800e945
 800e924:	0800e94d 	.word	0x0800e94d
 800e928:	0800e955 	.word	0x0800e955
 800e92c:	0800e96b 	.word	0x0800e96b
 800e930:	0800e95b 	.word	0x0800e95b
 800e934:	0800e96b 	.word	0x0800e96b
 800e938:	0800e96b 	.word	0x0800e96b
 800e93c:	0800e96b 	.word	0x0800e96b
 800e940:	0800e963 	.word	0x0800e963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e944:	f7fa fc72 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800e948:	61f8      	str	r0, [r7, #28]
        break;
 800e94a:	e014      	b.n	800e976 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e94c:	f7fa fc84 	bl	8009258 <HAL_RCC_GetPCLK2Freq>
 800e950:	61f8      	str	r0, [r7, #28]
        break;
 800e952:	e010      	b.n	800e976 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e954:	4b1d      	ldr	r3, [pc, #116]	@ (800e9cc <UART_SetConfig+0x6b8>)
 800e956:	61fb      	str	r3, [r7, #28]
        break;
 800e958:	e00d      	b.n	800e976 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e95a:	f7fa fbcf 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 800e95e:	61f8      	str	r0, [r7, #28]
        break;
 800e960:	e009      	b.n	800e976 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e966:	61fb      	str	r3, [r7, #28]
        break;
 800e968:	e005      	b.n	800e976 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800e96a:	2300      	movs	r3, #0
 800e96c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e974:	bf00      	nop
    }

    if (pclk != 0U)
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d019      	beq.n	800e9b0 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	085a      	lsrs	r2, r3, #1
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	441a      	add	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e98e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	2b0f      	cmp	r3, #15
 800e994:	d909      	bls.n	800e9aa <UART_SetConfig+0x696>
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e99c:	d205      	bcs.n	800e9aa <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60da      	str	r2, [r3, #12]
 800e9a8:	e002      	b.n	800e9b0 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e9bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3728      	adds	r7, #40	@ 0x28
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9ca:	bf00      	nop
 800e9cc:	00f42400 	.word	0x00f42400

0800e9d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9dc:	2bff      	cmp	r3, #255	@ 0xff
 800e9de:	d904      	bls.n	800e9ea <UART_AdvFeatureConfig+0x1a>
 800e9e0:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800e9e4:	4891      	ldr	r0, [pc, #580]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800e9e6:	f7f7 f9c3 	bl	8005d70 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ee:	f003 0308 	and.w	r3, r3, #8
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d018      	beq.n	800ea28 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <UART_AdvFeatureConfig+0x42>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea06:	d004      	beq.n	800ea12 <UART_AdvFeatureConfig+0x42>
 800ea08:	f640 5152 	movw	r1, #3410	@ 0xd52
 800ea0c:	4887      	ldr	r0, [pc, #540]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800ea0e:	f7f7 f9af 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	430a      	orrs	r2, r1
 800ea26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d018      	beq.n	800ea66 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d009      	beq.n	800ea50 <UART_AdvFeatureConfig+0x80>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea44:	d004      	beq.n	800ea50 <UART_AdvFeatureConfig+0x80>
 800ea46:	f640 5159 	movw	r1, #3417	@ 0xd59
 800ea4a:	4878      	ldr	r0, [pc, #480]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800ea4c:	f7f7 f990 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	430a      	orrs	r2, r1
 800ea64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea6a:	f003 0302 	and.w	r3, r3, #2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d018      	beq.n	800eaa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d009      	beq.n	800ea8e <UART_AdvFeatureConfig+0xbe>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea82:	d004      	beq.n	800ea8e <UART_AdvFeatureConfig+0xbe>
 800ea84:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800ea88:	4868      	ldr	r0, [pc, #416]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800ea8a:	f7f7 f971 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	430a      	orrs	r2, r1
 800eaa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaa8:	f003 0304 	and.w	r3, r3, #4
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d018      	beq.n	800eae2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d009      	beq.n	800eacc <UART_AdvFeatureConfig+0xfc>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eabc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eac0:	d004      	beq.n	800eacc <UART_AdvFeatureConfig+0xfc>
 800eac2:	f640 5167 	movw	r1, #3431	@ 0xd67
 800eac6:	4859      	ldr	r0, [pc, #356]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800eac8:	f7f7 f952 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eae6:	f003 0310 	and.w	r3, r3, #16
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d018      	beq.n	800eb20 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d009      	beq.n	800eb0a <UART_AdvFeatureConfig+0x13a>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eafa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eafe:	d004      	beq.n	800eb0a <UART_AdvFeatureConfig+0x13a>
 800eb00:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800eb04:	4849      	ldr	r0, [pc, #292]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800eb06:	f7f7 f933 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	430a      	orrs	r2, r1
 800eb1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb24:	f003 0320 	and.w	r3, r3, #32
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d018      	beq.n	800eb5e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d009      	beq.n	800eb48 <UART_AdvFeatureConfig+0x178>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb3c:	d004      	beq.n	800eb48 <UART_AdvFeatureConfig+0x178>
 800eb3e:	f640 5175 	movw	r1, #3445	@ 0xd75
 800eb42:	483a      	ldr	r0, [pc, #232]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800eb44:	f7f7 f914 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d06c      	beq.n	800ec44 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4a30      	ldr	r2, [pc, #192]	@ (800ec30 <UART_AdvFeatureConfig+0x260>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d018      	beq.n	800eba6 <UART_AdvFeatureConfig+0x1d6>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a2e      	ldr	r2, [pc, #184]	@ (800ec34 <UART_AdvFeatureConfig+0x264>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d013      	beq.n	800eba6 <UART_AdvFeatureConfig+0x1d6>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a2d      	ldr	r2, [pc, #180]	@ (800ec38 <UART_AdvFeatureConfig+0x268>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d00e      	beq.n	800eba6 <UART_AdvFeatureConfig+0x1d6>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a2b      	ldr	r2, [pc, #172]	@ (800ec3c <UART_AdvFeatureConfig+0x26c>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d009      	beq.n	800eba6 <UART_AdvFeatureConfig+0x1d6>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a2a      	ldr	r2, [pc, #168]	@ (800ec40 <UART_AdvFeatureConfig+0x270>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d004      	beq.n	800eba6 <UART_AdvFeatureConfig+0x1d6>
 800eb9c:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800eba0:	4822      	ldr	r0, [pc, #136]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800eba2:	f7f7 f8e5 	bl	8005d70 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d009      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1f2>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebb6:	d004      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1f2>
 800ebb8:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800ebbc:	481b      	ldr	r0, [pc, #108]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800ebbe:	f7f7 f8d7 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	430a      	orrs	r2, r1
 800ebd6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebe0:	d130      	bne.n	800ec44 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d013      	beq.n	800ec12 <UART_AdvFeatureConfig+0x242>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ebf2:	d00e      	beq.n	800ec12 <UART_AdvFeatureConfig+0x242>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ebfc:	d009      	beq.n	800ec12 <UART_AdvFeatureConfig+0x242>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ec06:	d004      	beq.n	800ec12 <UART_AdvFeatureConfig+0x242>
 800ec08:	f640 5182 	movw	r1, #3458	@ 0xd82
 800ec0c:	4807      	ldr	r0, [pc, #28]	@ (800ec2c <UART_AdvFeatureConfig+0x25c>)
 800ec0e:	f7f7 f8af 	bl	8005d70 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	430a      	orrs	r2, r1
 800ec26:	605a      	str	r2, [r3, #4]
 800ec28:	e00c      	b.n	800ec44 <UART_AdvFeatureConfig+0x274>
 800ec2a:	bf00      	nop
 800ec2c:	08010c80 	.word	0x08010c80
 800ec30:	40013800 	.word	0x40013800
 800ec34:	40004400 	.word	0x40004400
 800ec38:	40004800 	.word	0x40004800
 800ec3c:	40004c00 	.word	0x40004c00
 800ec40:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d018      	beq.n	800ec82 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d009      	beq.n	800ec6c <UART_AdvFeatureConfig+0x29c>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ec60:	d004      	beq.n	800ec6c <UART_AdvFeatureConfig+0x29c>
 800ec62:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800ec66:	4809      	ldr	r0, [pc, #36]	@ (800ec8c <UART_AdvFeatureConfig+0x2bc>)
 800ec68:	f7f7 f882 	bl	8005d70 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	430a      	orrs	r2, r1
 800ec80:	605a      	str	r2, [r3, #4]
  }
}
 800ec82:	bf00      	nop
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	08010c80 	.word	0x08010c80

0800ec90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b098      	sub	sp, #96	@ 0x60
 800ec94:	af02      	add	r7, sp, #8
 800ec96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eca0:	f7f7 fe90 	bl	80069c4 <HAL_GetTick>
 800eca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f003 0308 	and.w	r3, r3, #8
 800ecb0:	2b08      	cmp	r3, #8
 800ecb2:	d12e      	bne.n	800ed12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 f88c 	bl	800ede0 <UART_WaitOnFlagUntilTimeout>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d021      	beq.n	800ed12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd6:	e853 3f00 	ldrex	r3, [r3]
 800ecda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ece2:	653b      	str	r3, [r7, #80]	@ 0x50
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	461a      	mov	r2, r3
 800ecea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecec:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecf4:	e841 2300 	strex	r3, r2, [r1]
 800ecf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1e6      	bne.n	800ecce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2220      	movs	r2, #32
 800ed04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e062      	b.n	800edd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f003 0304 	and.w	r3, r3, #4
 800ed1c:	2b04      	cmp	r3, #4
 800ed1e:	d149      	bne.n	800edb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f856 	bl	800ede0 <UART_WaitOnFlagUntilTimeout>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d03c      	beq.n	800edb4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed42:	e853 3f00 	ldrex	r3, [r3]
 800ed46:	623b      	str	r3, [r7, #32]
   return(result);
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed58:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed60:	e841 2300 	strex	r3, r2, [r1]
 800ed64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e6      	bne.n	800ed3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3308      	adds	r3, #8
 800ed72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	e853 3f00 	ldrex	r3, [r3]
 800ed7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f023 0301 	bic.w	r3, r3, #1
 800ed82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3308      	adds	r3, #8
 800ed8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed8c:	61fa      	str	r2, [r7, #28]
 800ed8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed90:	69b9      	ldr	r1, [r7, #24]
 800ed92:	69fa      	ldr	r2, [r7, #28]
 800ed94:	e841 2300 	strex	r3, r2, [r1]
 800ed98:	617b      	str	r3, [r7, #20]
   return(result);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e5      	bne.n	800ed6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2220      	movs	r2, #32
 800eda4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edb0:	2303      	movs	r3, #3
 800edb2:	e011      	b.n	800edd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2220      	movs	r2, #32
 800edb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2220      	movs	r2, #32
 800edbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3758      	adds	r7, #88	@ 0x58
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	603b      	str	r3, [r7, #0]
 800edec:	4613      	mov	r3, r2
 800edee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edf0:	e04f      	b.n	800ee92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf8:	d04b      	beq.n	800ee92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edfa:	f7f7 fde3 	bl	80069c4 <HAL_GetTick>
 800edfe:	4602      	mov	r2, r0
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	69ba      	ldr	r2, [r7, #24]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d302      	bcc.n	800ee10 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e04e      	b.n	800eeb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f003 0304 	and.w	r3, r3, #4
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d037      	beq.n	800ee92 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2b80      	cmp	r3, #128	@ 0x80
 800ee26:	d034      	beq.n	800ee92 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2b40      	cmp	r3, #64	@ 0x40
 800ee2c:	d031      	beq.n	800ee92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	f003 0308 	and.w	r3, r3, #8
 800ee38:	2b08      	cmp	r3, #8
 800ee3a:	d110      	bne.n	800ee5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2208      	movs	r2, #8
 800ee42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f000 f838 	bl	800eeba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2208      	movs	r2, #8
 800ee4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e029      	b.n	800eeb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	69db      	ldr	r3, [r3, #28]
 800ee64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee6c:	d111      	bne.n	800ee92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 f81e 	bl	800eeba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2220      	movs	r2, #32
 800ee82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	e00f      	b.n	800eeb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	69da      	ldr	r2, [r3, #28]
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	bf0c      	ite	eq
 800eea2:	2301      	moveq	r3, #1
 800eea4:	2300      	movne	r3, #0
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	461a      	mov	r2, r3
 800eeaa:	79fb      	ldrb	r3, [r7, #7]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d0a0      	beq.n	800edf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eeba:	b480      	push	{r7}
 800eebc:	b095      	sub	sp, #84	@ 0x54
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeca:	e853 3f00 	ldrex	r3, [r3]
 800eece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	461a      	mov	r2, r3
 800eede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eee0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eee2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eee8:	e841 2300 	strex	r3, r2, [r1]
 800eeec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1e6      	bne.n	800eec2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	3308      	adds	r3, #8
 800eefa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	e853 3f00 	ldrex	r3, [r3]
 800ef02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	f023 0301 	bic.w	r3, r3, #1
 800ef0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3308      	adds	r3, #8
 800ef12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef1c:	e841 2300 	strex	r3, r2, [r1]
 800ef20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1e5      	bne.n	800eef4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d118      	bne.n	800ef62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	e853 3f00 	ldrex	r3, [r3]
 800ef3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f023 0310 	bic.w	r3, r3, #16
 800ef44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef4e:	61bb      	str	r3, [r7, #24]
 800ef50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef52:	6979      	ldr	r1, [r7, #20]
 800ef54:	69ba      	ldr	r2, [r7, #24]
 800ef56:	e841 2300 	strex	r3, r2, [r1]
 800ef5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1e6      	bne.n	800ef30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2220      	movs	r2, #32
 800ef66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ef76:	bf00      	nop
 800ef78:	3754      	adds	r7, #84	@ 0x54
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
	...

0800ef84 <calloc>:
 800ef84:	4b02      	ldr	r3, [pc, #8]	@ (800ef90 <calloc+0xc>)
 800ef86:	460a      	mov	r2, r1
 800ef88:	4601      	mov	r1, r0
 800ef8a:	6818      	ldr	r0, [r3, #0]
 800ef8c:	f000 b802 	b.w	800ef94 <_calloc_r>
 800ef90:	2000002c 	.word	0x2000002c

0800ef94 <_calloc_r>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	fba1 5402 	umull	r5, r4, r1, r2
 800ef9a:	b934      	cbnz	r4, 800efaa <_calloc_r+0x16>
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	f000 f83f 	bl	800f020 <_malloc_r>
 800efa2:	4606      	mov	r6, r0
 800efa4:	b928      	cbnz	r0, 800efb2 <_calloc_r+0x1e>
 800efa6:	4630      	mov	r0, r6
 800efa8:	bd70      	pop	{r4, r5, r6, pc}
 800efaa:	220c      	movs	r2, #12
 800efac:	6002      	str	r2, [r0, #0]
 800efae:	2600      	movs	r6, #0
 800efb0:	e7f9      	b.n	800efa6 <_calloc_r+0x12>
 800efb2:	462a      	mov	r2, r5
 800efb4:	4621      	mov	r1, r4
 800efb6:	f000 fbb9 	bl	800f72c <memset>
 800efba:	e7f4      	b.n	800efa6 <_calloc_r+0x12>

0800efbc <malloc>:
 800efbc:	4b02      	ldr	r3, [pc, #8]	@ (800efc8 <malloc+0xc>)
 800efbe:	4601      	mov	r1, r0
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	f000 b82d 	b.w	800f020 <_malloc_r>
 800efc6:	bf00      	nop
 800efc8:	2000002c 	.word	0x2000002c

0800efcc <free>:
 800efcc:	4b02      	ldr	r3, [pc, #8]	@ (800efd8 <free+0xc>)
 800efce:	4601      	mov	r1, r0
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f000 bc45 	b.w	800f860 <_free_r>
 800efd6:	bf00      	nop
 800efd8:	2000002c 	.word	0x2000002c

0800efdc <sbrk_aligned>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	4e0f      	ldr	r6, [pc, #60]	@ (800f01c <sbrk_aligned+0x40>)
 800efe0:	460c      	mov	r4, r1
 800efe2:	6831      	ldr	r1, [r6, #0]
 800efe4:	4605      	mov	r5, r0
 800efe6:	b911      	cbnz	r1, 800efee <sbrk_aligned+0x12>
 800efe8:	f000 fbdc 	bl	800f7a4 <_sbrk_r>
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	4621      	mov	r1, r4
 800eff0:	4628      	mov	r0, r5
 800eff2:	f000 fbd7 	bl	800f7a4 <_sbrk_r>
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	d103      	bne.n	800f002 <sbrk_aligned+0x26>
 800effa:	f04f 34ff 	mov.w	r4, #4294967295
 800effe:	4620      	mov	r0, r4
 800f000:	bd70      	pop	{r4, r5, r6, pc}
 800f002:	1cc4      	adds	r4, r0, #3
 800f004:	f024 0403 	bic.w	r4, r4, #3
 800f008:	42a0      	cmp	r0, r4
 800f00a:	d0f8      	beq.n	800effe <sbrk_aligned+0x22>
 800f00c:	1a21      	subs	r1, r4, r0
 800f00e:	4628      	mov	r0, r5
 800f010:	f000 fbc8 	bl	800f7a4 <_sbrk_r>
 800f014:	3001      	adds	r0, #1
 800f016:	d1f2      	bne.n	800effe <sbrk_aligned+0x22>
 800f018:	e7ef      	b.n	800effa <sbrk_aligned+0x1e>
 800f01a:	bf00      	nop
 800f01c:	20001140 	.word	0x20001140

0800f020 <_malloc_r>:
 800f020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f024:	1ccd      	adds	r5, r1, #3
 800f026:	f025 0503 	bic.w	r5, r5, #3
 800f02a:	3508      	adds	r5, #8
 800f02c:	2d0c      	cmp	r5, #12
 800f02e:	bf38      	it	cc
 800f030:	250c      	movcc	r5, #12
 800f032:	2d00      	cmp	r5, #0
 800f034:	4606      	mov	r6, r0
 800f036:	db01      	blt.n	800f03c <_malloc_r+0x1c>
 800f038:	42a9      	cmp	r1, r5
 800f03a:	d904      	bls.n	800f046 <_malloc_r+0x26>
 800f03c:	230c      	movs	r3, #12
 800f03e:	6033      	str	r3, [r6, #0]
 800f040:	2000      	movs	r0, #0
 800f042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f11c <_malloc_r+0xfc>
 800f04a:	f000 f869 	bl	800f120 <__malloc_lock>
 800f04e:	f8d8 3000 	ldr.w	r3, [r8]
 800f052:	461c      	mov	r4, r3
 800f054:	bb44      	cbnz	r4, 800f0a8 <_malloc_r+0x88>
 800f056:	4629      	mov	r1, r5
 800f058:	4630      	mov	r0, r6
 800f05a:	f7ff ffbf 	bl	800efdc <sbrk_aligned>
 800f05e:	1c43      	adds	r3, r0, #1
 800f060:	4604      	mov	r4, r0
 800f062:	d158      	bne.n	800f116 <_malloc_r+0xf6>
 800f064:	f8d8 4000 	ldr.w	r4, [r8]
 800f068:	4627      	mov	r7, r4
 800f06a:	2f00      	cmp	r7, #0
 800f06c:	d143      	bne.n	800f0f6 <_malloc_r+0xd6>
 800f06e:	2c00      	cmp	r4, #0
 800f070:	d04b      	beq.n	800f10a <_malloc_r+0xea>
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	4639      	mov	r1, r7
 800f076:	4630      	mov	r0, r6
 800f078:	eb04 0903 	add.w	r9, r4, r3
 800f07c:	f000 fb92 	bl	800f7a4 <_sbrk_r>
 800f080:	4581      	cmp	r9, r0
 800f082:	d142      	bne.n	800f10a <_malloc_r+0xea>
 800f084:	6821      	ldr	r1, [r4, #0]
 800f086:	1a6d      	subs	r5, r5, r1
 800f088:	4629      	mov	r1, r5
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7ff ffa6 	bl	800efdc <sbrk_aligned>
 800f090:	3001      	adds	r0, #1
 800f092:	d03a      	beq.n	800f10a <_malloc_r+0xea>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	442b      	add	r3, r5
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	f8d8 3000 	ldr.w	r3, [r8]
 800f09e:	685a      	ldr	r2, [r3, #4]
 800f0a0:	bb62      	cbnz	r2, 800f0fc <_malloc_r+0xdc>
 800f0a2:	f8c8 7000 	str.w	r7, [r8]
 800f0a6:	e00f      	b.n	800f0c8 <_malloc_r+0xa8>
 800f0a8:	6822      	ldr	r2, [r4, #0]
 800f0aa:	1b52      	subs	r2, r2, r5
 800f0ac:	d420      	bmi.n	800f0f0 <_malloc_r+0xd0>
 800f0ae:	2a0b      	cmp	r2, #11
 800f0b0:	d917      	bls.n	800f0e2 <_malloc_r+0xc2>
 800f0b2:	1961      	adds	r1, r4, r5
 800f0b4:	42a3      	cmp	r3, r4
 800f0b6:	6025      	str	r5, [r4, #0]
 800f0b8:	bf18      	it	ne
 800f0ba:	6059      	strne	r1, [r3, #4]
 800f0bc:	6863      	ldr	r3, [r4, #4]
 800f0be:	bf08      	it	eq
 800f0c0:	f8c8 1000 	streq.w	r1, [r8]
 800f0c4:	5162      	str	r2, [r4, r5]
 800f0c6:	604b      	str	r3, [r1, #4]
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f000 f82f 	bl	800f12c <__malloc_unlock>
 800f0ce:	f104 000b 	add.w	r0, r4, #11
 800f0d2:	1d23      	adds	r3, r4, #4
 800f0d4:	f020 0007 	bic.w	r0, r0, #7
 800f0d8:	1ac2      	subs	r2, r0, r3
 800f0da:	bf1c      	itt	ne
 800f0dc:	1a1b      	subne	r3, r3, r0
 800f0de:	50a3      	strne	r3, [r4, r2]
 800f0e0:	e7af      	b.n	800f042 <_malloc_r+0x22>
 800f0e2:	6862      	ldr	r2, [r4, #4]
 800f0e4:	42a3      	cmp	r3, r4
 800f0e6:	bf0c      	ite	eq
 800f0e8:	f8c8 2000 	streq.w	r2, [r8]
 800f0ec:	605a      	strne	r2, [r3, #4]
 800f0ee:	e7eb      	b.n	800f0c8 <_malloc_r+0xa8>
 800f0f0:	4623      	mov	r3, r4
 800f0f2:	6864      	ldr	r4, [r4, #4]
 800f0f4:	e7ae      	b.n	800f054 <_malloc_r+0x34>
 800f0f6:	463c      	mov	r4, r7
 800f0f8:	687f      	ldr	r7, [r7, #4]
 800f0fa:	e7b6      	b.n	800f06a <_malloc_r+0x4a>
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	42a3      	cmp	r3, r4
 800f102:	d1fb      	bne.n	800f0fc <_malloc_r+0xdc>
 800f104:	2300      	movs	r3, #0
 800f106:	6053      	str	r3, [r2, #4]
 800f108:	e7de      	b.n	800f0c8 <_malloc_r+0xa8>
 800f10a:	230c      	movs	r3, #12
 800f10c:	6033      	str	r3, [r6, #0]
 800f10e:	4630      	mov	r0, r6
 800f110:	f000 f80c 	bl	800f12c <__malloc_unlock>
 800f114:	e794      	b.n	800f040 <_malloc_r+0x20>
 800f116:	6005      	str	r5, [r0, #0]
 800f118:	e7d6      	b.n	800f0c8 <_malloc_r+0xa8>
 800f11a:	bf00      	nop
 800f11c:	20001144 	.word	0x20001144

0800f120 <__malloc_lock>:
 800f120:	4801      	ldr	r0, [pc, #4]	@ (800f128 <__malloc_lock+0x8>)
 800f122:	f000 bb8c 	b.w	800f83e <__retarget_lock_acquire_recursive>
 800f126:	bf00      	nop
 800f128:	20001288 	.word	0x20001288

0800f12c <__malloc_unlock>:
 800f12c:	4801      	ldr	r0, [pc, #4]	@ (800f134 <__malloc_unlock+0x8>)
 800f12e:	f000 bb87 	b.w	800f840 <__retarget_lock_release_recursive>
 800f132:	bf00      	nop
 800f134:	20001288 	.word	0x20001288

0800f138 <std>:
 800f138:	2300      	movs	r3, #0
 800f13a:	b510      	push	{r4, lr}
 800f13c:	4604      	mov	r4, r0
 800f13e:	e9c0 3300 	strd	r3, r3, [r0]
 800f142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f146:	6083      	str	r3, [r0, #8]
 800f148:	8181      	strh	r1, [r0, #12]
 800f14a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f14c:	81c2      	strh	r2, [r0, #14]
 800f14e:	6183      	str	r3, [r0, #24]
 800f150:	4619      	mov	r1, r3
 800f152:	2208      	movs	r2, #8
 800f154:	305c      	adds	r0, #92	@ 0x5c
 800f156:	f000 fae9 	bl	800f72c <memset>
 800f15a:	4b0d      	ldr	r3, [pc, #52]	@ (800f190 <std+0x58>)
 800f15c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f15e:	4b0d      	ldr	r3, [pc, #52]	@ (800f194 <std+0x5c>)
 800f160:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f162:	4b0d      	ldr	r3, [pc, #52]	@ (800f198 <std+0x60>)
 800f164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f166:	4b0d      	ldr	r3, [pc, #52]	@ (800f19c <std+0x64>)
 800f168:	6323      	str	r3, [r4, #48]	@ 0x30
 800f16a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1a0 <std+0x68>)
 800f16c:	6224      	str	r4, [r4, #32]
 800f16e:	429c      	cmp	r4, r3
 800f170:	d006      	beq.n	800f180 <std+0x48>
 800f172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f176:	4294      	cmp	r4, r2
 800f178:	d002      	beq.n	800f180 <std+0x48>
 800f17a:	33d0      	adds	r3, #208	@ 0xd0
 800f17c:	429c      	cmp	r4, r3
 800f17e:	d105      	bne.n	800f18c <std+0x54>
 800f180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f188:	f000 bb58 	b.w	800f83c <__retarget_lock_init_recursive>
 800f18c:	bd10      	pop	{r4, pc}
 800f18e:	bf00      	nop
 800f190:	0800f505 	.word	0x0800f505
 800f194:	0800f527 	.word	0x0800f527
 800f198:	0800f55f 	.word	0x0800f55f
 800f19c:	0800f583 	.word	0x0800f583
 800f1a0:	20001148 	.word	0x20001148

0800f1a4 <stdio_exit_handler>:
 800f1a4:	4a02      	ldr	r2, [pc, #8]	@ (800f1b0 <stdio_exit_handler+0xc>)
 800f1a6:	4903      	ldr	r1, [pc, #12]	@ (800f1b4 <stdio_exit_handler+0x10>)
 800f1a8:	4803      	ldr	r0, [pc, #12]	@ (800f1b8 <stdio_exit_handler+0x14>)
 800f1aa:	f000 b869 	b.w	800f280 <_fwalk_sglue>
 800f1ae:	bf00      	nop
 800f1b0:	20000020 	.word	0x20000020
 800f1b4:	08010249 	.word	0x08010249
 800f1b8:	20000030 	.word	0x20000030

0800f1bc <cleanup_stdio>:
 800f1bc:	6841      	ldr	r1, [r0, #4]
 800f1be:	4b0c      	ldr	r3, [pc, #48]	@ (800f1f0 <cleanup_stdio+0x34>)
 800f1c0:	4299      	cmp	r1, r3
 800f1c2:	b510      	push	{r4, lr}
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	d001      	beq.n	800f1cc <cleanup_stdio+0x10>
 800f1c8:	f001 f83e 	bl	8010248 <_fflush_r>
 800f1cc:	68a1      	ldr	r1, [r4, #8]
 800f1ce:	4b09      	ldr	r3, [pc, #36]	@ (800f1f4 <cleanup_stdio+0x38>)
 800f1d0:	4299      	cmp	r1, r3
 800f1d2:	d002      	beq.n	800f1da <cleanup_stdio+0x1e>
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f001 f837 	bl	8010248 <_fflush_r>
 800f1da:	68e1      	ldr	r1, [r4, #12]
 800f1dc:	4b06      	ldr	r3, [pc, #24]	@ (800f1f8 <cleanup_stdio+0x3c>)
 800f1de:	4299      	cmp	r1, r3
 800f1e0:	d004      	beq.n	800f1ec <cleanup_stdio+0x30>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e8:	f001 b82e 	b.w	8010248 <_fflush_r>
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20001148 	.word	0x20001148
 800f1f4:	200011b0 	.word	0x200011b0
 800f1f8:	20001218 	.word	0x20001218

0800f1fc <global_stdio_init.part.0>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f22c <global_stdio_init.part.0+0x30>)
 800f200:	4c0b      	ldr	r4, [pc, #44]	@ (800f230 <global_stdio_init.part.0+0x34>)
 800f202:	4a0c      	ldr	r2, [pc, #48]	@ (800f234 <global_stdio_init.part.0+0x38>)
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	4620      	mov	r0, r4
 800f208:	2200      	movs	r2, #0
 800f20a:	2104      	movs	r1, #4
 800f20c:	f7ff ff94 	bl	800f138 <std>
 800f210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f214:	2201      	movs	r2, #1
 800f216:	2109      	movs	r1, #9
 800f218:	f7ff ff8e 	bl	800f138 <std>
 800f21c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f220:	2202      	movs	r2, #2
 800f222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f226:	2112      	movs	r1, #18
 800f228:	f7ff bf86 	b.w	800f138 <std>
 800f22c:	20001280 	.word	0x20001280
 800f230:	20001148 	.word	0x20001148
 800f234:	0800f1a5 	.word	0x0800f1a5

0800f238 <__sfp_lock_acquire>:
 800f238:	4801      	ldr	r0, [pc, #4]	@ (800f240 <__sfp_lock_acquire+0x8>)
 800f23a:	f000 bb00 	b.w	800f83e <__retarget_lock_acquire_recursive>
 800f23e:	bf00      	nop
 800f240:	20001289 	.word	0x20001289

0800f244 <__sfp_lock_release>:
 800f244:	4801      	ldr	r0, [pc, #4]	@ (800f24c <__sfp_lock_release+0x8>)
 800f246:	f000 bafb 	b.w	800f840 <__retarget_lock_release_recursive>
 800f24a:	bf00      	nop
 800f24c:	20001289 	.word	0x20001289

0800f250 <__sinit>:
 800f250:	b510      	push	{r4, lr}
 800f252:	4604      	mov	r4, r0
 800f254:	f7ff fff0 	bl	800f238 <__sfp_lock_acquire>
 800f258:	6a23      	ldr	r3, [r4, #32]
 800f25a:	b11b      	cbz	r3, 800f264 <__sinit+0x14>
 800f25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f260:	f7ff bff0 	b.w	800f244 <__sfp_lock_release>
 800f264:	4b04      	ldr	r3, [pc, #16]	@ (800f278 <__sinit+0x28>)
 800f266:	6223      	str	r3, [r4, #32]
 800f268:	4b04      	ldr	r3, [pc, #16]	@ (800f27c <__sinit+0x2c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1f5      	bne.n	800f25c <__sinit+0xc>
 800f270:	f7ff ffc4 	bl	800f1fc <global_stdio_init.part.0>
 800f274:	e7f2      	b.n	800f25c <__sinit+0xc>
 800f276:	bf00      	nop
 800f278:	0800f1bd 	.word	0x0800f1bd
 800f27c:	20001280 	.word	0x20001280

0800f280 <_fwalk_sglue>:
 800f280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f284:	4607      	mov	r7, r0
 800f286:	4688      	mov	r8, r1
 800f288:	4614      	mov	r4, r2
 800f28a:	2600      	movs	r6, #0
 800f28c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f290:	f1b9 0901 	subs.w	r9, r9, #1
 800f294:	d505      	bpl.n	800f2a2 <_fwalk_sglue+0x22>
 800f296:	6824      	ldr	r4, [r4, #0]
 800f298:	2c00      	cmp	r4, #0
 800f29a:	d1f7      	bne.n	800f28c <_fwalk_sglue+0xc>
 800f29c:	4630      	mov	r0, r6
 800f29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2a2:	89ab      	ldrh	r3, [r5, #12]
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d907      	bls.n	800f2b8 <_fwalk_sglue+0x38>
 800f2a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	d003      	beq.n	800f2b8 <_fwalk_sglue+0x38>
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	47c0      	blx	r8
 800f2b6:	4306      	orrs	r6, r0
 800f2b8:	3568      	adds	r5, #104	@ 0x68
 800f2ba:	e7e9      	b.n	800f290 <_fwalk_sglue+0x10>

0800f2bc <iprintf>:
 800f2bc:	b40f      	push	{r0, r1, r2, r3}
 800f2be:	b507      	push	{r0, r1, r2, lr}
 800f2c0:	4906      	ldr	r1, [pc, #24]	@ (800f2dc <iprintf+0x20>)
 800f2c2:	ab04      	add	r3, sp, #16
 800f2c4:	6808      	ldr	r0, [r1, #0]
 800f2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ca:	6881      	ldr	r1, [r0, #8]
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	f000 fc93 	bl	800fbf8 <_vfiprintf_r>
 800f2d2:	b003      	add	sp, #12
 800f2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d8:	b004      	add	sp, #16
 800f2da:	4770      	bx	lr
 800f2dc:	2000002c 	.word	0x2000002c

0800f2e0 <_puts_r>:
 800f2e0:	6a03      	ldr	r3, [r0, #32]
 800f2e2:	b570      	push	{r4, r5, r6, lr}
 800f2e4:	6884      	ldr	r4, [r0, #8]
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	460e      	mov	r6, r1
 800f2ea:	b90b      	cbnz	r3, 800f2f0 <_puts_r+0x10>
 800f2ec:	f7ff ffb0 	bl	800f250 <__sinit>
 800f2f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2f2:	07db      	lsls	r3, r3, #31
 800f2f4:	d405      	bmi.n	800f302 <_puts_r+0x22>
 800f2f6:	89a3      	ldrh	r3, [r4, #12]
 800f2f8:	0598      	lsls	r0, r3, #22
 800f2fa:	d402      	bmi.n	800f302 <_puts_r+0x22>
 800f2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2fe:	f000 fa9e 	bl	800f83e <__retarget_lock_acquire_recursive>
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	0719      	lsls	r1, r3, #28
 800f306:	d502      	bpl.n	800f30e <_puts_r+0x2e>
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d135      	bne.n	800f37a <_puts_r+0x9a>
 800f30e:	4621      	mov	r1, r4
 800f310:	4628      	mov	r0, r5
 800f312:	f000 f9b5 	bl	800f680 <__swsetup_r>
 800f316:	b380      	cbz	r0, 800f37a <_puts_r+0x9a>
 800f318:	f04f 35ff 	mov.w	r5, #4294967295
 800f31c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f31e:	07da      	lsls	r2, r3, #31
 800f320:	d405      	bmi.n	800f32e <_puts_r+0x4e>
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	059b      	lsls	r3, r3, #22
 800f326:	d402      	bmi.n	800f32e <_puts_r+0x4e>
 800f328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f32a:	f000 fa89 	bl	800f840 <__retarget_lock_release_recursive>
 800f32e:	4628      	mov	r0, r5
 800f330:	bd70      	pop	{r4, r5, r6, pc}
 800f332:	2b00      	cmp	r3, #0
 800f334:	da04      	bge.n	800f340 <_puts_r+0x60>
 800f336:	69a2      	ldr	r2, [r4, #24]
 800f338:	429a      	cmp	r2, r3
 800f33a:	dc17      	bgt.n	800f36c <_puts_r+0x8c>
 800f33c:	290a      	cmp	r1, #10
 800f33e:	d015      	beq.n	800f36c <_puts_r+0x8c>
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	6022      	str	r2, [r4, #0]
 800f346:	7019      	strb	r1, [r3, #0]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f34e:	3b01      	subs	r3, #1
 800f350:	60a3      	str	r3, [r4, #8]
 800f352:	2900      	cmp	r1, #0
 800f354:	d1ed      	bne.n	800f332 <_puts_r+0x52>
 800f356:	2b00      	cmp	r3, #0
 800f358:	da11      	bge.n	800f37e <_puts_r+0x9e>
 800f35a:	4622      	mov	r2, r4
 800f35c:	210a      	movs	r1, #10
 800f35e:	4628      	mov	r0, r5
 800f360:	f000 f950 	bl	800f604 <__swbuf_r>
 800f364:	3001      	adds	r0, #1
 800f366:	d0d7      	beq.n	800f318 <_puts_r+0x38>
 800f368:	250a      	movs	r5, #10
 800f36a:	e7d7      	b.n	800f31c <_puts_r+0x3c>
 800f36c:	4622      	mov	r2, r4
 800f36e:	4628      	mov	r0, r5
 800f370:	f000 f948 	bl	800f604 <__swbuf_r>
 800f374:	3001      	adds	r0, #1
 800f376:	d1e7      	bne.n	800f348 <_puts_r+0x68>
 800f378:	e7ce      	b.n	800f318 <_puts_r+0x38>
 800f37a:	3e01      	subs	r6, #1
 800f37c:	e7e4      	b.n	800f348 <_puts_r+0x68>
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	6022      	str	r2, [r4, #0]
 800f384:	220a      	movs	r2, #10
 800f386:	701a      	strb	r2, [r3, #0]
 800f388:	e7ee      	b.n	800f368 <_puts_r+0x88>
	...

0800f38c <puts>:
 800f38c:	4b02      	ldr	r3, [pc, #8]	@ (800f398 <puts+0xc>)
 800f38e:	4601      	mov	r1, r0
 800f390:	6818      	ldr	r0, [r3, #0]
 800f392:	f7ff bfa5 	b.w	800f2e0 <_puts_r>
 800f396:	bf00      	nop
 800f398:	2000002c 	.word	0x2000002c

0800f39c <setvbuf>:
 800f39c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3a0:	461d      	mov	r5, r3
 800f3a2:	4b57      	ldr	r3, [pc, #348]	@ (800f500 <setvbuf+0x164>)
 800f3a4:	681f      	ldr	r7, [r3, #0]
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	460e      	mov	r6, r1
 800f3aa:	4690      	mov	r8, r2
 800f3ac:	b127      	cbz	r7, 800f3b8 <setvbuf+0x1c>
 800f3ae:	6a3b      	ldr	r3, [r7, #32]
 800f3b0:	b913      	cbnz	r3, 800f3b8 <setvbuf+0x1c>
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	f7ff ff4c 	bl	800f250 <__sinit>
 800f3b8:	f1b8 0f02 	cmp.w	r8, #2
 800f3bc:	d006      	beq.n	800f3cc <setvbuf+0x30>
 800f3be:	f1b8 0f01 	cmp.w	r8, #1
 800f3c2:	f200 809a 	bhi.w	800f4fa <setvbuf+0x15e>
 800f3c6:	2d00      	cmp	r5, #0
 800f3c8:	f2c0 8097 	blt.w	800f4fa <setvbuf+0x15e>
 800f3cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3ce:	07d9      	lsls	r1, r3, #31
 800f3d0:	d405      	bmi.n	800f3de <setvbuf+0x42>
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	059a      	lsls	r2, r3, #22
 800f3d6:	d402      	bmi.n	800f3de <setvbuf+0x42>
 800f3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3da:	f000 fa30 	bl	800f83e <__retarget_lock_acquire_recursive>
 800f3de:	4621      	mov	r1, r4
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	f000 ff31 	bl	8010248 <_fflush_r>
 800f3e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3e8:	b141      	cbz	r1, 800f3fc <setvbuf+0x60>
 800f3ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3ee:	4299      	cmp	r1, r3
 800f3f0:	d002      	beq.n	800f3f8 <setvbuf+0x5c>
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	f000 fa34 	bl	800f860 <_free_r>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	61a3      	str	r3, [r4, #24]
 800f400:	6063      	str	r3, [r4, #4]
 800f402:	89a3      	ldrh	r3, [r4, #12]
 800f404:	061b      	lsls	r3, r3, #24
 800f406:	d503      	bpl.n	800f410 <setvbuf+0x74>
 800f408:	6921      	ldr	r1, [r4, #16]
 800f40a:	4638      	mov	r0, r7
 800f40c:	f000 fa28 	bl	800f860 <_free_r>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800f416:	f023 0303 	bic.w	r3, r3, #3
 800f41a:	f1b8 0f02 	cmp.w	r8, #2
 800f41e:	81a3      	strh	r3, [r4, #12]
 800f420:	d061      	beq.n	800f4e6 <setvbuf+0x14a>
 800f422:	ab01      	add	r3, sp, #4
 800f424:	466a      	mov	r2, sp
 800f426:	4621      	mov	r1, r4
 800f428:	4638      	mov	r0, r7
 800f42a:	f000 ff35 	bl	8010298 <__swhatbuf_r>
 800f42e:	89a3      	ldrh	r3, [r4, #12]
 800f430:	4318      	orrs	r0, r3
 800f432:	81a0      	strh	r0, [r4, #12]
 800f434:	bb2d      	cbnz	r5, 800f482 <setvbuf+0xe6>
 800f436:	9d00      	ldr	r5, [sp, #0]
 800f438:	4628      	mov	r0, r5
 800f43a:	f7ff fdbf 	bl	800efbc <malloc>
 800f43e:	4606      	mov	r6, r0
 800f440:	2800      	cmp	r0, #0
 800f442:	d152      	bne.n	800f4ea <setvbuf+0x14e>
 800f444:	f8dd 9000 	ldr.w	r9, [sp]
 800f448:	45a9      	cmp	r9, r5
 800f44a:	d140      	bne.n	800f4ce <setvbuf+0x132>
 800f44c:	f04f 35ff 	mov.w	r5, #4294967295
 800f450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f454:	f043 0202 	orr.w	r2, r3, #2
 800f458:	81a2      	strh	r2, [r4, #12]
 800f45a:	2200      	movs	r2, #0
 800f45c:	60a2      	str	r2, [r4, #8]
 800f45e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800f462:	6022      	str	r2, [r4, #0]
 800f464:	6122      	str	r2, [r4, #16]
 800f466:	2201      	movs	r2, #1
 800f468:	6162      	str	r2, [r4, #20]
 800f46a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f46c:	07d6      	lsls	r6, r2, #31
 800f46e:	d404      	bmi.n	800f47a <setvbuf+0xde>
 800f470:	0598      	lsls	r0, r3, #22
 800f472:	d402      	bmi.n	800f47a <setvbuf+0xde>
 800f474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f476:	f000 f9e3 	bl	800f840 <__retarget_lock_release_recursive>
 800f47a:	4628      	mov	r0, r5
 800f47c:	b003      	add	sp, #12
 800f47e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f482:	2e00      	cmp	r6, #0
 800f484:	d0d8      	beq.n	800f438 <setvbuf+0x9c>
 800f486:	6a3b      	ldr	r3, [r7, #32]
 800f488:	b913      	cbnz	r3, 800f490 <setvbuf+0xf4>
 800f48a:	4638      	mov	r0, r7
 800f48c:	f7ff fee0 	bl	800f250 <__sinit>
 800f490:	f1b8 0f01 	cmp.w	r8, #1
 800f494:	bf08      	it	eq
 800f496:	89a3      	ldrheq	r3, [r4, #12]
 800f498:	6026      	str	r6, [r4, #0]
 800f49a:	bf04      	itt	eq
 800f49c:	f043 0301 	orreq.w	r3, r3, #1
 800f4a0:	81a3      	strheq	r3, [r4, #12]
 800f4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a6:	f013 0208 	ands.w	r2, r3, #8
 800f4aa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f4ae:	d01e      	beq.n	800f4ee <setvbuf+0x152>
 800f4b0:	07d9      	lsls	r1, r3, #31
 800f4b2:	bf41      	itttt	mi
 800f4b4:	2200      	movmi	r2, #0
 800f4b6:	426d      	negmi	r5, r5
 800f4b8:	60a2      	strmi	r2, [r4, #8]
 800f4ba:	61a5      	strmi	r5, [r4, #24]
 800f4bc:	bf58      	it	pl
 800f4be:	60a5      	strpl	r5, [r4, #8]
 800f4c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4c2:	07d2      	lsls	r2, r2, #31
 800f4c4:	d401      	bmi.n	800f4ca <setvbuf+0x12e>
 800f4c6:	059b      	lsls	r3, r3, #22
 800f4c8:	d513      	bpl.n	800f4f2 <setvbuf+0x156>
 800f4ca:	2500      	movs	r5, #0
 800f4cc:	e7d5      	b.n	800f47a <setvbuf+0xde>
 800f4ce:	4648      	mov	r0, r9
 800f4d0:	f7ff fd74 	bl	800efbc <malloc>
 800f4d4:	4606      	mov	r6, r0
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d0b8      	beq.n	800f44c <setvbuf+0xb0>
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4e0:	81a3      	strh	r3, [r4, #12]
 800f4e2:	464d      	mov	r5, r9
 800f4e4:	e7cf      	b.n	800f486 <setvbuf+0xea>
 800f4e6:	2500      	movs	r5, #0
 800f4e8:	e7b2      	b.n	800f450 <setvbuf+0xb4>
 800f4ea:	46a9      	mov	r9, r5
 800f4ec:	e7f5      	b.n	800f4da <setvbuf+0x13e>
 800f4ee:	60a2      	str	r2, [r4, #8]
 800f4f0:	e7e6      	b.n	800f4c0 <setvbuf+0x124>
 800f4f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4f4:	f000 f9a4 	bl	800f840 <__retarget_lock_release_recursive>
 800f4f8:	e7e7      	b.n	800f4ca <setvbuf+0x12e>
 800f4fa:	f04f 35ff 	mov.w	r5, #4294967295
 800f4fe:	e7bc      	b.n	800f47a <setvbuf+0xde>
 800f500:	2000002c 	.word	0x2000002c

0800f504 <__sread>:
 800f504:	b510      	push	{r4, lr}
 800f506:	460c      	mov	r4, r1
 800f508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f50c:	f000 f938 	bl	800f780 <_read_r>
 800f510:	2800      	cmp	r0, #0
 800f512:	bfab      	itete	ge
 800f514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f516:	89a3      	ldrhlt	r3, [r4, #12]
 800f518:	181b      	addge	r3, r3, r0
 800f51a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f51e:	bfac      	ite	ge
 800f520:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f522:	81a3      	strhlt	r3, [r4, #12]
 800f524:	bd10      	pop	{r4, pc}

0800f526 <__swrite>:
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	461f      	mov	r7, r3
 800f52c:	898b      	ldrh	r3, [r1, #12]
 800f52e:	05db      	lsls	r3, r3, #23
 800f530:	4605      	mov	r5, r0
 800f532:	460c      	mov	r4, r1
 800f534:	4616      	mov	r6, r2
 800f536:	d505      	bpl.n	800f544 <__swrite+0x1e>
 800f538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f53c:	2302      	movs	r3, #2
 800f53e:	2200      	movs	r2, #0
 800f540:	f000 f90c 	bl	800f75c <_lseek_r>
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f54a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f54e:	81a3      	strh	r3, [r4, #12]
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	4628      	mov	r0, r5
 800f556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f55a:	f000 b933 	b.w	800f7c4 <_write_r>

0800f55e <__sseek>:
 800f55e:	b510      	push	{r4, lr}
 800f560:	460c      	mov	r4, r1
 800f562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f566:	f000 f8f9 	bl	800f75c <_lseek_r>
 800f56a:	1c43      	adds	r3, r0, #1
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	bf15      	itete	ne
 800f570:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f57a:	81a3      	strheq	r3, [r4, #12]
 800f57c:	bf18      	it	ne
 800f57e:	81a3      	strhne	r3, [r4, #12]
 800f580:	bd10      	pop	{r4, pc}

0800f582 <__sclose>:
 800f582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f586:	f000 b8d9 	b.w	800f73c <_close_r>

0800f58a <_vsniprintf_r>:
 800f58a:	b530      	push	{r4, r5, lr}
 800f58c:	4614      	mov	r4, r2
 800f58e:	2c00      	cmp	r4, #0
 800f590:	b09b      	sub	sp, #108	@ 0x6c
 800f592:	4605      	mov	r5, r0
 800f594:	461a      	mov	r2, r3
 800f596:	da05      	bge.n	800f5a4 <_vsniprintf_r+0x1a>
 800f598:	238b      	movs	r3, #139	@ 0x8b
 800f59a:	6003      	str	r3, [r0, #0]
 800f59c:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a0:	b01b      	add	sp, #108	@ 0x6c
 800f5a2:	bd30      	pop	{r4, r5, pc}
 800f5a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f5a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f5ac:	f04f 0300 	mov.w	r3, #0
 800f5b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f5b2:	bf14      	ite	ne
 800f5b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f5b8:	4623      	moveq	r3, r4
 800f5ba:	9302      	str	r3, [sp, #8]
 800f5bc:	9305      	str	r3, [sp, #20]
 800f5be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5c2:	9100      	str	r1, [sp, #0]
 800f5c4:	9104      	str	r1, [sp, #16]
 800f5c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f5ca:	4669      	mov	r1, sp
 800f5cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f5ce:	f000 f9ed 	bl	800f9ac <_svfiprintf_r>
 800f5d2:	1c43      	adds	r3, r0, #1
 800f5d4:	bfbc      	itt	lt
 800f5d6:	238b      	movlt	r3, #139	@ 0x8b
 800f5d8:	602b      	strlt	r3, [r5, #0]
 800f5da:	2c00      	cmp	r4, #0
 800f5dc:	d0e0      	beq.n	800f5a0 <_vsniprintf_r+0x16>
 800f5de:	9b00      	ldr	r3, [sp, #0]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	701a      	strb	r2, [r3, #0]
 800f5e4:	e7dc      	b.n	800f5a0 <_vsniprintf_r+0x16>
	...

0800f5e8 <vsniprintf>:
 800f5e8:	b507      	push	{r0, r1, r2, lr}
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	460a      	mov	r2, r1
 800f5f0:	4601      	mov	r1, r0
 800f5f2:	4803      	ldr	r0, [pc, #12]	@ (800f600 <vsniprintf+0x18>)
 800f5f4:	6800      	ldr	r0, [r0, #0]
 800f5f6:	f7ff ffc8 	bl	800f58a <_vsniprintf_r>
 800f5fa:	b003      	add	sp, #12
 800f5fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f600:	2000002c 	.word	0x2000002c

0800f604 <__swbuf_r>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	460e      	mov	r6, r1
 800f608:	4614      	mov	r4, r2
 800f60a:	4605      	mov	r5, r0
 800f60c:	b118      	cbz	r0, 800f616 <__swbuf_r+0x12>
 800f60e:	6a03      	ldr	r3, [r0, #32]
 800f610:	b90b      	cbnz	r3, 800f616 <__swbuf_r+0x12>
 800f612:	f7ff fe1d 	bl	800f250 <__sinit>
 800f616:	69a3      	ldr	r3, [r4, #24]
 800f618:	60a3      	str	r3, [r4, #8]
 800f61a:	89a3      	ldrh	r3, [r4, #12]
 800f61c:	071a      	lsls	r2, r3, #28
 800f61e:	d501      	bpl.n	800f624 <__swbuf_r+0x20>
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	b943      	cbnz	r3, 800f636 <__swbuf_r+0x32>
 800f624:	4621      	mov	r1, r4
 800f626:	4628      	mov	r0, r5
 800f628:	f000 f82a 	bl	800f680 <__swsetup_r>
 800f62c:	b118      	cbz	r0, 800f636 <__swbuf_r+0x32>
 800f62e:	f04f 37ff 	mov.w	r7, #4294967295
 800f632:	4638      	mov	r0, r7
 800f634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	6922      	ldr	r2, [r4, #16]
 800f63a:	1a98      	subs	r0, r3, r2
 800f63c:	6963      	ldr	r3, [r4, #20]
 800f63e:	b2f6      	uxtb	r6, r6
 800f640:	4283      	cmp	r3, r0
 800f642:	4637      	mov	r7, r6
 800f644:	dc05      	bgt.n	800f652 <__swbuf_r+0x4e>
 800f646:	4621      	mov	r1, r4
 800f648:	4628      	mov	r0, r5
 800f64a:	f000 fdfd 	bl	8010248 <_fflush_r>
 800f64e:	2800      	cmp	r0, #0
 800f650:	d1ed      	bne.n	800f62e <__swbuf_r+0x2a>
 800f652:	68a3      	ldr	r3, [r4, #8]
 800f654:	3b01      	subs	r3, #1
 800f656:	60a3      	str	r3, [r4, #8]
 800f658:	6823      	ldr	r3, [r4, #0]
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	6022      	str	r2, [r4, #0]
 800f65e:	701e      	strb	r6, [r3, #0]
 800f660:	6962      	ldr	r2, [r4, #20]
 800f662:	1c43      	adds	r3, r0, #1
 800f664:	429a      	cmp	r2, r3
 800f666:	d004      	beq.n	800f672 <__swbuf_r+0x6e>
 800f668:	89a3      	ldrh	r3, [r4, #12]
 800f66a:	07db      	lsls	r3, r3, #31
 800f66c:	d5e1      	bpl.n	800f632 <__swbuf_r+0x2e>
 800f66e:	2e0a      	cmp	r6, #10
 800f670:	d1df      	bne.n	800f632 <__swbuf_r+0x2e>
 800f672:	4621      	mov	r1, r4
 800f674:	4628      	mov	r0, r5
 800f676:	f000 fde7 	bl	8010248 <_fflush_r>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0d9      	beq.n	800f632 <__swbuf_r+0x2e>
 800f67e:	e7d6      	b.n	800f62e <__swbuf_r+0x2a>

0800f680 <__swsetup_r>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4b29      	ldr	r3, [pc, #164]	@ (800f728 <__swsetup_r+0xa8>)
 800f684:	4605      	mov	r5, r0
 800f686:	6818      	ldr	r0, [r3, #0]
 800f688:	460c      	mov	r4, r1
 800f68a:	b118      	cbz	r0, 800f694 <__swsetup_r+0x14>
 800f68c:	6a03      	ldr	r3, [r0, #32]
 800f68e:	b90b      	cbnz	r3, 800f694 <__swsetup_r+0x14>
 800f690:	f7ff fdde 	bl	800f250 <__sinit>
 800f694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f698:	0719      	lsls	r1, r3, #28
 800f69a:	d422      	bmi.n	800f6e2 <__swsetup_r+0x62>
 800f69c:	06da      	lsls	r2, r3, #27
 800f69e:	d407      	bmi.n	800f6b0 <__swsetup_r+0x30>
 800f6a0:	2209      	movs	r2, #9
 800f6a2:	602a      	str	r2, [r5, #0]
 800f6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6a8:	81a3      	strh	r3, [r4, #12]
 800f6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ae:	e033      	b.n	800f718 <__swsetup_r+0x98>
 800f6b0:	0758      	lsls	r0, r3, #29
 800f6b2:	d512      	bpl.n	800f6da <__swsetup_r+0x5a>
 800f6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6b6:	b141      	cbz	r1, 800f6ca <__swsetup_r+0x4a>
 800f6b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6bc:	4299      	cmp	r1, r3
 800f6be:	d002      	beq.n	800f6c6 <__swsetup_r+0x46>
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f000 f8cd 	bl	800f860 <_free_r>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6ca:	89a3      	ldrh	r3, [r4, #12]
 800f6cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f6d0:	81a3      	strh	r3, [r4, #12]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6063      	str	r3, [r4, #4]
 800f6d6:	6923      	ldr	r3, [r4, #16]
 800f6d8:	6023      	str	r3, [r4, #0]
 800f6da:	89a3      	ldrh	r3, [r4, #12]
 800f6dc:	f043 0308 	orr.w	r3, r3, #8
 800f6e0:	81a3      	strh	r3, [r4, #12]
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	b94b      	cbnz	r3, 800f6fa <__swsetup_r+0x7a>
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6f0:	d003      	beq.n	800f6fa <__swsetup_r+0x7a>
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f000 fdf5 	bl	80102e4 <__smakebuf_r>
 800f6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6fe:	f013 0201 	ands.w	r2, r3, #1
 800f702:	d00a      	beq.n	800f71a <__swsetup_r+0x9a>
 800f704:	2200      	movs	r2, #0
 800f706:	60a2      	str	r2, [r4, #8]
 800f708:	6962      	ldr	r2, [r4, #20]
 800f70a:	4252      	negs	r2, r2
 800f70c:	61a2      	str	r2, [r4, #24]
 800f70e:	6922      	ldr	r2, [r4, #16]
 800f710:	b942      	cbnz	r2, 800f724 <__swsetup_r+0xa4>
 800f712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f716:	d1c5      	bne.n	800f6a4 <__swsetup_r+0x24>
 800f718:	bd38      	pop	{r3, r4, r5, pc}
 800f71a:	0799      	lsls	r1, r3, #30
 800f71c:	bf58      	it	pl
 800f71e:	6962      	ldrpl	r2, [r4, #20]
 800f720:	60a2      	str	r2, [r4, #8]
 800f722:	e7f4      	b.n	800f70e <__swsetup_r+0x8e>
 800f724:	2000      	movs	r0, #0
 800f726:	e7f7      	b.n	800f718 <__swsetup_r+0x98>
 800f728:	2000002c 	.word	0x2000002c

0800f72c <memset>:
 800f72c:	4402      	add	r2, r0
 800f72e:	4603      	mov	r3, r0
 800f730:	4293      	cmp	r3, r2
 800f732:	d100      	bne.n	800f736 <memset+0xa>
 800f734:	4770      	bx	lr
 800f736:	f803 1b01 	strb.w	r1, [r3], #1
 800f73a:	e7f9      	b.n	800f730 <memset+0x4>

0800f73c <_close_r>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	4d06      	ldr	r5, [pc, #24]	@ (800f758 <_close_r+0x1c>)
 800f740:	2300      	movs	r3, #0
 800f742:	4604      	mov	r4, r0
 800f744:	4608      	mov	r0, r1
 800f746:	602b      	str	r3, [r5, #0]
 800f748:	f7f6 fcc6 	bl	80060d8 <_close>
 800f74c:	1c43      	adds	r3, r0, #1
 800f74e:	d102      	bne.n	800f756 <_close_r+0x1a>
 800f750:	682b      	ldr	r3, [r5, #0]
 800f752:	b103      	cbz	r3, 800f756 <_close_r+0x1a>
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	20001284 	.word	0x20001284

0800f75c <_lseek_r>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	4d07      	ldr	r5, [pc, #28]	@ (800f77c <_lseek_r+0x20>)
 800f760:	4604      	mov	r4, r0
 800f762:	4608      	mov	r0, r1
 800f764:	4611      	mov	r1, r2
 800f766:	2200      	movs	r2, #0
 800f768:	602a      	str	r2, [r5, #0]
 800f76a:	461a      	mov	r2, r3
 800f76c:	f7f6 fcdb 	bl	8006126 <_lseek>
 800f770:	1c43      	adds	r3, r0, #1
 800f772:	d102      	bne.n	800f77a <_lseek_r+0x1e>
 800f774:	682b      	ldr	r3, [r5, #0]
 800f776:	b103      	cbz	r3, 800f77a <_lseek_r+0x1e>
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	bd38      	pop	{r3, r4, r5, pc}
 800f77c:	20001284 	.word	0x20001284

0800f780 <_read_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4d07      	ldr	r5, [pc, #28]	@ (800f7a0 <_read_r+0x20>)
 800f784:	4604      	mov	r4, r0
 800f786:	4608      	mov	r0, r1
 800f788:	4611      	mov	r1, r2
 800f78a:	2200      	movs	r2, #0
 800f78c:	602a      	str	r2, [r5, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	f7f6 fc85 	bl	800609e <_read>
 800f794:	1c43      	adds	r3, r0, #1
 800f796:	d102      	bne.n	800f79e <_read_r+0x1e>
 800f798:	682b      	ldr	r3, [r5, #0]
 800f79a:	b103      	cbz	r3, 800f79e <_read_r+0x1e>
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	bd38      	pop	{r3, r4, r5, pc}
 800f7a0:	20001284 	.word	0x20001284

0800f7a4 <_sbrk_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4d06      	ldr	r5, [pc, #24]	@ (800f7c0 <_sbrk_r+0x1c>)
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	602b      	str	r3, [r5, #0]
 800f7b0:	f7f6 fcc6 	bl	8006140 <_sbrk>
 800f7b4:	1c43      	adds	r3, r0, #1
 800f7b6:	d102      	bne.n	800f7be <_sbrk_r+0x1a>
 800f7b8:	682b      	ldr	r3, [r5, #0]
 800f7ba:	b103      	cbz	r3, 800f7be <_sbrk_r+0x1a>
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	bd38      	pop	{r3, r4, r5, pc}
 800f7c0:	20001284 	.word	0x20001284

0800f7c4 <_write_r>:
 800f7c4:	b538      	push	{r3, r4, r5, lr}
 800f7c6:	4d07      	ldr	r5, [pc, #28]	@ (800f7e4 <_write_r+0x20>)
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	602a      	str	r2, [r5, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f7f2 fed8 	bl	8002588 <_write>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	d102      	bne.n	800f7e2 <_write_r+0x1e>
 800f7dc:	682b      	ldr	r3, [r5, #0]
 800f7de:	b103      	cbz	r3, 800f7e2 <_write_r+0x1e>
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}
 800f7e4:	20001284 	.word	0x20001284

0800f7e8 <__errno>:
 800f7e8:	4b01      	ldr	r3, [pc, #4]	@ (800f7f0 <__errno+0x8>)
 800f7ea:	6818      	ldr	r0, [r3, #0]
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	2000002c 	.word	0x2000002c

0800f7f4 <__libc_init_array>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	4d0d      	ldr	r5, [pc, #52]	@ (800f82c <__libc_init_array+0x38>)
 800f7f8:	4c0d      	ldr	r4, [pc, #52]	@ (800f830 <__libc_init_array+0x3c>)
 800f7fa:	1b64      	subs	r4, r4, r5
 800f7fc:	10a4      	asrs	r4, r4, #2
 800f7fe:	2600      	movs	r6, #0
 800f800:	42a6      	cmp	r6, r4
 800f802:	d109      	bne.n	800f818 <__libc_init_array+0x24>
 800f804:	4d0b      	ldr	r5, [pc, #44]	@ (800f834 <__libc_init_array+0x40>)
 800f806:	4c0c      	ldr	r4, [pc, #48]	@ (800f838 <__libc_init_array+0x44>)
 800f808:	f000 fe1a 	bl	8010440 <_init>
 800f80c:	1b64      	subs	r4, r4, r5
 800f80e:	10a4      	asrs	r4, r4, #2
 800f810:	2600      	movs	r6, #0
 800f812:	42a6      	cmp	r6, r4
 800f814:	d105      	bne.n	800f822 <__libc_init_array+0x2e>
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81c:	4798      	blx	r3
 800f81e:	3601      	adds	r6, #1
 800f820:	e7ee      	b.n	800f800 <__libc_init_array+0xc>
 800f822:	f855 3b04 	ldr.w	r3, [r5], #4
 800f826:	4798      	blx	r3
 800f828:	3601      	adds	r6, #1
 800f82a:	e7f2      	b.n	800f812 <__libc_init_array+0x1e>
 800f82c:	08010dc0 	.word	0x08010dc0
 800f830:	08010dc0 	.word	0x08010dc0
 800f834:	08010dc0 	.word	0x08010dc0
 800f838:	08010dc4 	.word	0x08010dc4

0800f83c <__retarget_lock_init_recursive>:
 800f83c:	4770      	bx	lr

0800f83e <__retarget_lock_acquire_recursive>:
 800f83e:	4770      	bx	lr

0800f840 <__retarget_lock_release_recursive>:
 800f840:	4770      	bx	lr

0800f842 <memcpy>:
 800f842:	440a      	add	r2, r1
 800f844:	4291      	cmp	r1, r2
 800f846:	f100 33ff 	add.w	r3, r0, #4294967295
 800f84a:	d100      	bne.n	800f84e <memcpy+0xc>
 800f84c:	4770      	bx	lr
 800f84e:	b510      	push	{r4, lr}
 800f850:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f854:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f858:	4291      	cmp	r1, r2
 800f85a:	d1f9      	bne.n	800f850 <memcpy+0xe>
 800f85c:	bd10      	pop	{r4, pc}
	...

0800f860 <_free_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4605      	mov	r5, r0
 800f864:	2900      	cmp	r1, #0
 800f866:	d041      	beq.n	800f8ec <_free_r+0x8c>
 800f868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f86c:	1f0c      	subs	r4, r1, #4
 800f86e:	2b00      	cmp	r3, #0
 800f870:	bfb8      	it	lt
 800f872:	18e4      	addlt	r4, r4, r3
 800f874:	f7ff fc54 	bl	800f120 <__malloc_lock>
 800f878:	4a1d      	ldr	r2, [pc, #116]	@ (800f8f0 <_free_r+0x90>)
 800f87a:	6813      	ldr	r3, [r2, #0]
 800f87c:	b933      	cbnz	r3, 800f88c <_free_r+0x2c>
 800f87e:	6063      	str	r3, [r4, #4]
 800f880:	6014      	str	r4, [r2, #0]
 800f882:	4628      	mov	r0, r5
 800f884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f888:	f7ff bc50 	b.w	800f12c <__malloc_unlock>
 800f88c:	42a3      	cmp	r3, r4
 800f88e:	d908      	bls.n	800f8a2 <_free_r+0x42>
 800f890:	6820      	ldr	r0, [r4, #0]
 800f892:	1821      	adds	r1, r4, r0
 800f894:	428b      	cmp	r3, r1
 800f896:	bf01      	itttt	eq
 800f898:	6819      	ldreq	r1, [r3, #0]
 800f89a:	685b      	ldreq	r3, [r3, #4]
 800f89c:	1809      	addeq	r1, r1, r0
 800f89e:	6021      	streq	r1, [r4, #0]
 800f8a0:	e7ed      	b.n	800f87e <_free_r+0x1e>
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	b10b      	cbz	r3, 800f8ac <_free_r+0x4c>
 800f8a8:	42a3      	cmp	r3, r4
 800f8aa:	d9fa      	bls.n	800f8a2 <_free_r+0x42>
 800f8ac:	6811      	ldr	r1, [r2, #0]
 800f8ae:	1850      	adds	r0, r2, r1
 800f8b0:	42a0      	cmp	r0, r4
 800f8b2:	d10b      	bne.n	800f8cc <_free_r+0x6c>
 800f8b4:	6820      	ldr	r0, [r4, #0]
 800f8b6:	4401      	add	r1, r0
 800f8b8:	1850      	adds	r0, r2, r1
 800f8ba:	4283      	cmp	r3, r0
 800f8bc:	6011      	str	r1, [r2, #0]
 800f8be:	d1e0      	bne.n	800f882 <_free_r+0x22>
 800f8c0:	6818      	ldr	r0, [r3, #0]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	6053      	str	r3, [r2, #4]
 800f8c6:	4408      	add	r0, r1
 800f8c8:	6010      	str	r0, [r2, #0]
 800f8ca:	e7da      	b.n	800f882 <_free_r+0x22>
 800f8cc:	d902      	bls.n	800f8d4 <_free_r+0x74>
 800f8ce:	230c      	movs	r3, #12
 800f8d0:	602b      	str	r3, [r5, #0]
 800f8d2:	e7d6      	b.n	800f882 <_free_r+0x22>
 800f8d4:	6820      	ldr	r0, [r4, #0]
 800f8d6:	1821      	adds	r1, r4, r0
 800f8d8:	428b      	cmp	r3, r1
 800f8da:	bf04      	itt	eq
 800f8dc:	6819      	ldreq	r1, [r3, #0]
 800f8de:	685b      	ldreq	r3, [r3, #4]
 800f8e0:	6063      	str	r3, [r4, #4]
 800f8e2:	bf04      	itt	eq
 800f8e4:	1809      	addeq	r1, r1, r0
 800f8e6:	6021      	streq	r1, [r4, #0]
 800f8e8:	6054      	str	r4, [r2, #4]
 800f8ea:	e7ca      	b.n	800f882 <_free_r+0x22>
 800f8ec:	bd38      	pop	{r3, r4, r5, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20001144 	.word	0x20001144

0800f8f4 <__ssputs_r>:
 800f8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f8:	688e      	ldr	r6, [r1, #8]
 800f8fa:	461f      	mov	r7, r3
 800f8fc:	42be      	cmp	r6, r7
 800f8fe:	680b      	ldr	r3, [r1, #0]
 800f900:	4682      	mov	sl, r0
 800f902:	460c      	mov	r4, r1
 800f904:	4690      	mov	r8, r2
 800f906:	d82d      	bhi.n	800f964 <__ssputs_r+0x70>
 800f908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f90c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f910:	d026      	beq.n	800f960 <__ssputs_r+0x6c>
 800f912:	6965      	ldr	r5, [r4, #20]
 800f914:	6909      	ldr	r1, [r1, #16]
 800f916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f91a:	eba3 0901 	sub.w	r9, r3, r1
 800f91e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f922:	1c7b      	adds	r3, r7, #1
 800f924:	444b      	add	r3, r9
 800f926:	106d      	asrs	r5, r5, #1
 800f928:	429d      	cmp	r5, r3
 800f92a:	bf38      	it	cc
 800f92c:	461d      	movcc	r5, r3
 800f92e:	0553      	lsls	r3, r2, #21
 800f930:	d527      	bpl.n	800f982 <__ssputs_r+0x8e>
 800f932:	4629      	mov	r1, r5
 800f934:	f7ff fb74 	bl	800f020 <_malloc_r>
 800f938:	4606      	mov	r6, r0
 800f93a:	b360      	cbz	r0, 800f996 <__ssputs_r+0xa2>
 800f93c:	6921      	ldr	r1, [r4, #16]
 800f93e:	464a      	mov	r2, r9
 800f940:	f7ff ff7f 	bl	800f842 <memcpy>
 800f944:	89a3      	ldrh	r3, [r4, #12]
 800f946:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f94e:	81a3      	strh	r3, [r4, #12]
 800f950:	6126      	str	r6, [r4, #16]
 800f952:	6165      	str	r5, [r4, #20]
 800f954:	444e      	add	r6, r9
 800f956:	eba5 0509 	sub.w	r5, r5, r9
 800f95a:	6026      	str	r6, [r4, #0]
 800f95c:	60a5      	str	r5, [r4, #8]
 800f95e:	463e      	mov	r6, r7
 800f960:	42be      	cmp	r6, r7
 800f962:	d900      	bls.n	800f966 <__ssputs_r+0x72>
 800f964:	463e      	mov	r6, r7
 800f966:	6820      	ldr	r0, [r4, #0]
 800f968:	4632      	mov	r2, r6
 800f96a:	4641      	mov	r1, r8
 800f96c:	f000 fcf6 	bl	801035c <memmove>
 800f970:	68a3      	ldr	r3, [r4, #8]
 800f972:	1b9b      	subs	r3, r3, r6
 800f974:	60a3      	str	r3, [r4, #8]
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	4433      	add	r3, r6
 800f97a:	6023      	str	r3, [r4, #0]
 800f97c:	2000      	movs	r0, #0
 800f97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f982:	462a      	mov	r2, r5
 800f984:	f000 fd26 	bl	80103d4 <_realloc_r>
 800f988:	4606      	mov	r6, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d1e0      	bne.n	800f950 <__ssputs_r+0x5c>
 800f98e:	6921      	ldr	r1, [r4, #16]
 800f990:	4650      	mov	r0, sl
 800f992:	f7ff ff65 	bl	800f860 <_free_r>
 800f996:	230c      	movs	r3, #12
 800f998:	f8ca 3000 	str.w	r3, [sl]
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a8:	e7e9      	b.n	800f97e <__ssputs_r+0x8a>
	...

0800f9ac <_svfiprintf_r>:
 800f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b0:	4698      	mov	r8, r3
 800f9b2:	898b      	ldrh	r3, [r1, #12]
 800f9b4:	061b      	lsls	r3, r3, #24
 800f9b6:	b09d      	sub	sp, #116	@ 0x74
 800f9b8:	4607      	mov	r7, r0
 800f9ba:	460d      	mov	r5, r1
 800f9bc:	4614      	mov	r4, r2
 800f9be:	d510      	bpl.n	800f9e2 <_svfiprintf_r+0x36>
 800f9c0:	690b      	ldr	r3, [r1, #16]
 800f9c2:	b973      	cbnz	r3, 800f9e2 <_svfiprintf_r+0x36>
 800f9c4:	2140      	movs	r1, #64	@ 0x40
 800f9c6:	f7ff fb2b 	bl	800f020 <_malloc_r>
 800f9ca:	6028      	str	r0, [r5, #0]
 800f9cc:	6128      	str	r0, [r5, #16]
 800f9ce:	b930      	cbnz	r0, 800f9de <_svfiprintf_r+0x32>
 800f9d0:	230c      	movs	r3, #12
 800f9d2:	603b      	str	r3, [r7, #0]
 800f9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d8:	b01d      	add	sp, #116	@ 0x74
 800f9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9de:	2340      	movs	r3, #64	@ 0x40
 800f9e0:	616b      	str	r3, [r5, #20]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9e6:	2320      	movs	r3, #32
 800f9e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9f0:	2330      	movs	r3, #48	@ 0x30
 800f9f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb90 <_svfiprintf_r+0x1e4>
 800f9f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9fa:	f04f 0901 	mov.w	r9, #1
 800f9fe:	4623      	mov	r3, r4
 800fa00:	469a      	mov	sl, r3
 800fa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa06:	b10a      	cbz	r2, 800fa0c <_svfiprintf_r+0x60>
 800fa08:	2a25      	cmp	r2, #37	@ 0x25
 800fa0a:	d1f9      	bne.n	800fa00 <_svfiprintf_r+0x54>
 800fa0c:	ebba 0b04 	subs.w	fp, sl, r4
 800fa10:	d00b      	beq.n	800fa2a <_svfiprintf_r+0x7e>
 800fa12:	465b      	mov	r3, fp
 800fa14:	4622      	mov	r2, r4
 800fa16:	4629      	mov	r1, r5
 800fa18:	4638      	mov	r0, r7
 800fa1a:	f7ff ff6b 	bl	800f8f4 <__ssputs_r>
 800fa1e:	3001      	adds	r0, #1
 800fa20:	f000 80a7 	beq.w	800fb72 <_svfiprintf_r+0x1c6>
 800fa24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa26:	445a      	add	r2, fp
 800fa28:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 809f 	beq.w	800fb72 <_svfiprintf_r+0x1c6>
 800fa34:	2300      	movs	r3, #0
 800fa36:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa3e:	f10a 0a01 	add.w	sl, sl, #1
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	9307      	str	r3, [sp, #28]
 800fa46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa4c:	4654      	mov	r4, sl
 800fa4e:	2205      	movs	r2, #5
 800fa50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa54:	484e      	ldr	r0, [pc, #312]	@ (800fb90 <_svfiprintf_r+0x1e4>)
 800fa56:	f7f0 fbbb 	bl	80001d0 <memchr>
 800fa5a:	9a04      	ldr	r2, [sp, #16]
 800fa5c:	b9d8      	cbnz	r0, 800fa96 <_svfiprintf_r+0xea>
 800fa5e:	06d0      	lsls	r0, r2, #27
 800fa60:	bf44      	itt	mi
 800fa62:	2320      	movmi	r3, #32
 800fa64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa68:	0711      	lsls	r1, r2, #28
 800fa6a:	bf44      	itt	mi
 800fa6c:	232b      	movmi	r3, #43	@ 0x2b
 800fa6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa72:	f89a 3000 	ldrb.w	r3, [sl]
 800fa76:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa78:	d015      	beq.n	800faa6 <_svfiprintf_r+0xfa>
 800fa7a:	9a07      	ldr	r2, [sp, #28]
 800fa7c:	4654      	mov	r4, sl
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f04f 0c0a 	mov.w	ip, #10
 800fa84:	4621      	mov	r1, r4
 800fa86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa8a:	3b30      	subs	r3, #48	@ 0x30
 800fa8c:	2b09      	cmp	r3, #9
 800fa8e:	d94b      	bls.n	800fb28 <_svfiprintf_r+0x17c>
 800fa90:	b1b0      	cbz	r0, 800fac0 <_svfiprintf_r+0x114>
 800fa92:	9207      	str	r2, [sp, #28]
 800fa94:	e014      	b.n	800fac0 <_svfiprintf_r+0x114>
 800fa96:	eba0 0308 	sub.w	r3, r0, r8
 800fa9a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	9304      	str	r3, [sp, #16]
 800faa2:	46a2      	mov	sl, r4
 800faa4:	e7d2      	b.n	800fa4c <_svfiprintf_r+0xa0>
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	1d19      	adds	r1, r3, #4
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	9103      	str	r1, [sp, #12]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	bfbb      	ittet	lt
 800fab2:	425b      	neglt	r3, r3
 800fab4:	f042 0202 	orrlt.w	r2, r2, #2
 800fab8:	9307      	strge	r3, [sp, #28]
 800faba:	9307      	strlt	r3, [sp, #28]
 800fabc:	bfb8      	it	lt
 800fabe:	9204      	strlt	r2, [sp, #16]
 800fac0:	7823      	ldrb	r3, [r4, #0]
 800fac2:	2b2e      	cmp	r3, #46	@ 0x2e
 800fac4:	d10a      	bne.n	800fadc <_svfiprintf_r+0x130>
 800fac6:	7863      	ldrb	r3, [r4, #1]
 800fac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800faca:	d132      	bne.n	800fb32 <_svfiprintf_r+0x186>
 800facc:	9b03      	ldr	r3, [sp, #12]
 800face:	1d1a      	adds	r2, r3, #4
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	9203      	str	r2, [sp, #12]
 800fad4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fad8:	3402      	adds	r4, #2
 800fada:	9305      	str	r3, [sp, #20]
 800fadc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fba0 <_svfiprintf_r+0x1f4>
 800fae0:	7821      	ldrb	r1, [r4, #0]
 800fae2:	2203      	movs	r2, #3
 800fae4:	4650      	mov	r0, sl
 800fae6:	f7f0 fb73 	bl	80001d0 <memchr>
 800faea:	b138      	cbz	r0, 800fafc <_svfiprintf_r+0x150>
 800faec:	9b04      	ldr	r3, [sp, #16]
 800faee:	eba0 000a 	sub.w	r0, r0, sl
 800faf2:	2240      	movs	r2, #64	@ 0x40
 800faf4:	4082      	lsls	r2, r0
 800faf6:	4313      	orrs	r3, r2
 800faf8:	3401      	adds	r4, #1
 800fafa:	9304      	str	r3, [sp, #16]
 800fafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb00:	4824      	ldr	r0, [pc, #144]	@ (800fb94 <_svfiprintf_r+0x1e8>)
 800fb02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb06:	2206      	movs	r2, #6
 800fb08:	f7f0 fb62 	bl	80001d0 <memchr>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d036      	beq.n	800fb7e <_svfiprintf_r+0x1d2>
 800fb10:	4b21      	ldr	r3, [pc, #132]	@ (800fb98 <_svfiprintf_r+0x1ec>)
 800fb12:	bb1b      	cbnz	r3, 800fb5c <_svfiprintf_r+0x1b0>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	3307      	adds	r3, #7
 800fb18:	f023 0307 	bic.w	r3, r3, #7
 800fb1c:	3308      	adds	r3, #8
 800fb1e:	9303      	str	r3, [sp, #12]
 800fb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb22:	4433      	add	r3, r6
 800fb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb26:	e76a      	b.n	800f9fe <_svfiprintf_r+0x52>
 800fb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	2001      	movs	r0, #1
 800fb30:	e7a8      	b.n	800fa84 <_svfiprintf_r+0xd8>
 800fb32:	2300      	movs	r3, #0
 800fb34:	3401      	adds	r4, #1
 800fb36:	9305      	str	r3, [sp, #20]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f04f 0c0a 	mov.w	ip, #10
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb44:	3a30      	subs	r2, #48	@ 0x30
 800fb46:	2a09      	cmp	r2, #9
 800fb48:	d903      	bls.n	800fb52 <_svfiprintf_r+0x1a6>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d0c6      	beq.n	800fadc <_svfiprintf_r+0x130>
 800fb4e:	9105      	str	r1, [sp, #20]
 800fb50:	e7c4      	b.n	800fadc <_svfiprintf_r+0x130>
 800fb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb56:	4604      	mov	r4, r0
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e7f0      	b.n	800fb3e <_svfiprintf_r+0x192>
 800fb5c:	ab03      	add	r3, sp, #12
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	462a      	mov	r2, r5
 800fb62:	4b0e      	ldr	r3, [pc, #56]	@ (800fb9c <_svfiprintf_r+0x1f0>)
 800fb64:	a904      	add	r1, sp, #16
 800fb66:	4638      	mov	r0, r7
 800fb68:	f3af 8000 	nop.w
 800fb6c:	1c42      	adds	r2, r0, #1
 800fb6e:	4606      	mov	r6, r0
 800fb70:	d1d6      	bne.n	800fb20 <_svfiprintf_r+0x174>
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	065b      	lsls	r3, r3, #25
 800fb76:	f53f af2d 	bmi.w	800f9d4 <_svfiprintf_r+0x28>
 800fb7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb7c:	e72c      	b.n	800f9d8 <_svfiprintf_r+0x2c>
 800fb7e:	ab03      	add	r3, sp, #12
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	462a      	mov	r2, r5
 800fb84:	4b05      	ldr	r3, [pc, #20]	@ (800fb9c <_svfiprintf_r+0x1f0>)
 800fb86:	a904      	add	r1, sp, #16
 800fb88:	4638      	mov	r0, r7
 800fb8a:	f000 f9bb 	bl	800ff04 <_printf_i>
 800fb8e:	e7ed      	b.n	800fb6c <_svfiprintf_r+0x1c0>
 800fb90:	08010d84 	.word	0x08010d84
 800fb94:	08010d8e 	.word	0x08010d8e
 800fb98:	00000000 	.word	0x00000000
 800fb9c:	0800f8f5 	.word	0x0800f8f5
 800fba0:	08010d8a 	.word	0x08010d8a

0800fba4 <__sfputc_r>:
 800fba4:	6893      	ldr	r3, [r2, #8]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	b410      	push	{r4}
 800fbac:	6093      	str	r3, [r2, #8]
 800fbae:	da08      	bge.n	800fbc2 <__sfputc_r+0x1e>
 800fbb0:	6994      	ldr	r4, [r2, #24]
 800fbb2:	42a3      	cmp	r3, r4
 800fbb4:	db01      	blt.n	800fbba <__sfputc_r+0x16>
 800fbb6:	290a      	cmp	r1, #10
 800fbb8:	d103      	bne.n	800fbc2 <__sfputc_r+0x1e>
 800fbba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbbe:	f7ff bd21 	b.w	800f604 <__swbuf_r>
 800fbc2:	6813      	ldr	r3, [r2, #0]
 800fbc4:	1c58      	adds	r0, r3, #1
 800fbc6:	6010      	str	r0, [r2, #0]
 800fbc8:	7019      	strb	r1, [r3, #0]
 800fbca:	4608      	mov	r0, r1
 800fbcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <__sfputs_r>:
 800fbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	460f      	mov	r7, r1
 800fbd8:	4614      	mov	r4, r2
 800fbda:	18d5      	adds	r5, r2, r3
 800fbdc:	42ac      	cmp	r4, r5
 800fbde:	d101      	bne.n	800fbe4 <__sfputs_r+0x12>
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	e007      	b.n	800fbf4 <__sfputs_r+0x22>
 800fbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe8:	463a      	mov	r2, r7
 800fbea:	4630      	mov	r0, r6
 800fbec:	f7ff ffda 	bl	800fba4 <__sfputc_r>
 800fbf0:	1c43      	adds	r3, r0, #1
 800fbf2:	d1f3      	bne.n	800fbdc <__sfputs_r+0xa>
 800fbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbf8 <_vfiprintf_r>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	460d      	mov	r5, r1
 800fbfe:	b09d      	sub	sp, #116	@ 0x74
 800fc00:	4614      	mov	r4, r2
 800fc02:	4698      	mov	r8, r3
 800fc04:	4606      	mov	r6, r0
 800fc06:	b118      	cbz	r0, 800fc10 <_vfiprintf_r+0x18>
 800fc08:	6a03      	ldr	r3, [r0, #32]
 800fc0a:	b90b      	cbnz	r3, 800fc10 <_vfiprintf_r+0x18>
 800fc0c:	f7ff fb20 	bl	800f250 <__sinit>
 800fc10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc12:	07d9      	lsls	r1, r3, #31
 800fc14:	d405      	bmi.n	800fc22 <_vfiprintf_r+0x2a>
 800fc16:	89ab      	ldrh	r3, [r5, #12]
 800fc18:	059a      	lsls	r2, r3, #22
 800fc1a:	d402      	bmi.n	800fc22 <_vfiprintf_r+0x2a>
 800fc1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc1e:	f7ff fe0e 	bl	800f83e <__retarget_lock_acquire_recursive>
 800fc22:	89ab      	ldrh	r3, [r5, #12]
 800fc24:	071b      	lsls	r3, r3, #28
 800fc26:	d501      	bpl.n	800fc2c <_vfiprintf_r+0x34>
 800fc28:	692b      	ldr	r3, [r5, #16]
 800fc2a:	b99b      	cbnz	r3, 800fc54 <_vfiprintf_r+0x5c>
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7ff fd26 	bl	800f680 <__swsetup_r>
 800fc34:	b170      	cbz	r0, 800fc54 <_vfiprintf_r+0x5c>
 800fc36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc38:	07dc      	lsls	r4, r3, #31
 800fc3a:	d504      	bpl.n	800fc46 <_vfiprintf_r+0x4e>
 800fc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc40:	b01d      	add	sp, #116	@ 0x74
 800fc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc46:	89ab      	ldrh	r3, [r5, #12]
 800fc48:	0598      	lsls	r0, r3, #22
 800fc4a:	d4f7      	bmi.n	800fc3c <_vfiprintf_r+0x44>
 800fc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc4e:	f7ff fdf7 	bl	800f840 <__retarget_lock_release_recursive>
 800fc52:	e7f3      	b.n	800fc3c <_vfiprintf_r+0x44>
 800fc54:	2300      	movs	r3, #0
 800fc56:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc58:	2320      	movs	r3, #32
 800fc5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc62:	2330      	movs	r3, #48	@ 0x30
 800fc64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe14 <_vfiprintf_r+0x21c>
 800fc68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc6c:	f04f 0901 	mov.w	r9, #1
 800fc70:	4623      	mov	r3, r4
 800fc72:	469a      	mov	sl, r3
 800fc74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc78:	b10a      	cbz	r2, 800fc7e <_vfiprintf_r+0x86>
 800fc7a:	2a25      	cmp	r2, #37	@ 0x25
 800fc7c:	d1f9      	bne.n	800fc72 <_vfiprintf_r+0x7a>
 800fc7e:	ebba 0b04 	subs.w	fp, sl, r4
 800fc82:	d00b      	beq.n	800fc9c <_vfiprintf_r+0xa4>
 800fc84:	465b      	mov	r3, fp
 800fc86:	4622      	mov	r2, r4
 800fc88:	4629      	mov	r1, r5
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f7ff ffa1 	bl	800fbd2 <__sfputs_r>
 800fc90:	3001      	adds	r0, #1
 800fc92:	f000 80a7 	beq.w	800fde4 <_vfiprintf_r+0x1ec>
 800fc96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc98:	445a      	add	r2, fp
 800fc9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc9c:	f89a 3000 	ldrb.w	r3, [sl]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 809f 	beq.w	800fde4 <_vfiprintf_r+0x1ec>
 800fca6:	2300      	movs	r3, #0
 800fca8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcb0:	f10a 0a01 	add.w	sl, sl, #1
 800fcb4:	9304      	str	r3, [sp, #16]
 800fcb6:	9307      	str	r3, [sp, #28]
 800fcb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fcbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcbe:	4654      	mov	r4, sl
 800fcc0:	2205      	movs	r2, #5
 800fcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcc6:	4853      	ldr	r0, [pc, #332]	@ (800fe14 <_vfiprintf_r+0x21c>)
 800fcc8:	f7f0 fa82 	bl	80001d0 <memchr>
 800fccc:	9a04      	ldr	r2, [sp, #16]
 800fcce:	b9d8      	cbnz	r0, 800fd08 <_vfiprintf_r+0x110>
 800fcd0:	06d1      	lsls	r1, r2, #27
 800fcd2:	bf44      	itt	mi
 800fcd4:	2320      	movmi	r3, #32
 800fcd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcda:	0713      	lsls	r3, r2, #28
 800fcdc:	bf44      	itt	mi
 800fcde:	232b      	movmi	r3, #43	@ 0x2b
 800fce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fce4:	f89a 3000 	ldrb.w	r3, [sl]
 800fce8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcea:	d015      	beq.n	800fd18 <_vfiprintf_r+0x120>
 800fcec:	9a07      	ldr	r2, [sp, #28]
 800fcee:	4654      	mov	r4, sl
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	f04f 0c0a 	mov.w	ip, #10
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcfc:	3b30      	subs	r3, #48	@ 0x30
 800fcfe:	2b09      	cmp	r3, #9
 800fd00:	d94b      	bls.n	800fd9a <_vfiprintf_r+0x1a2>
 800fd02:	b1b0      	cbz	r0, 800fd32 <_vfiprintf_r+0x13a>
 800fd04:	9207      	str	r2, [sp, #28]
 800fd06:	e014      	b.n	800fd32 <_vfiprintf_r+0x13a>
 800fd08:	eba0 0308 	sub.w	r3, r0, r8
 800fd0c:	fa09 f303 	lsl.w	r3, r9, r3
 800fd10:	4313      	orrs	r3, r2
 800fd12:	9304      	str	r3, [sp, #16]
 800fd14:	46a2      	mov	sl, r4
 800fd16:	e7d2      	b.n	800fcbe <_vfiprintf_r+0xc6>
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	1d19      	adds	r1, r3, #4
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	9103      	str	r1, [sp, #12]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	bfbb      	ittet	lt
 800fd24:	425b      	neglt	r3, r3
 800fd26:	f042 0202 	orrlt.w	r2, r2, #2
 800fd2a:	9307      	strge	r3, [sp, #28]
 800fd2c:	9307      	strlt	r3, [sp, #28]
 800fd2e:	bfb8      	it	lt
 800fd30:	9204      	strlt	r2, [sp, #16]
 800fd32:	7823      	ldrb	r3, [r4, #0]
 800fd34:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd36:	d10a      	bne.n	800fd4e <_vfiprintf_r+0x156>
 800fd38:	7863      	ldrb	r3, [r4, #1]
 800fd3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd3c:	d132      	bne.n	800fda4 <_vfiprintf_r+0x1ac>
 800fd3e:	9b03      	ldr	r3, [sp, #12]
 800fd40:	1d1a      	adds	r2, r3, #4
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	9203      	str	r2, [sp, #12]
 800fd46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd4a:	3402      	adds	r4, #2
 800fd4c:	9305      	str	r3, [sp, #20]
 800fd4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe24 <_vfiprintf_r+0x22c>
 800fd52:	7821      	ldrb	r1, [r4, #0]
 800fd54:	2203      	movs	r2, #3
 800fd56:	4650      	mov	r0, sl
 800fd58:	f7f0 fa3a 	bl	80001d0 <memchr>
 800fd5c:	b138      	cbz	r0, 800fd6e <_vfiprintf_r+0x176>
 800fd5e:	9b04      	ldr	r3, [sp, #16]
 800fd60:	eba0 000a 	sub.w	r0, r0, sl
 800fd64:	2240      	movs	r2, #64	@ 0x40
 800fd66:	4082      	lsls	r2, r0
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	3401      	adds	r4, #1
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd72:	4829      	ldr	r0, [pc, #164]	@ (800fe18 <_vfiprintf_r+0x220>)
 800fd74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd78:	2206      	movs	r2, #6
 800fd7a:	f7f0 fa29 	bl	80001d0 <memchr>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d03f      	beq.n	800fe02 <_vfiprintf_r+0x20a>
 800fd82:	4b26      	ldr	r3, [pc, #152]	@ (800fe1c <_vfiprintf_r+0x224>)
 800fd84:	bb1b      	cbnz	r3, 800fdce <_vfiprintf_r+0x1d6>
 800fd86:	9b03      	ldr	r3, [sp, #12]
 800fd88:	3307      	adds	r3, #7
 800fd8a:	f023 0307 	bic.w	r3, r3, #7
 800fd8e:	3308      	adds	r3, #8
 800fd90:	9303      	str	r3, [sp, #12]
 800fd92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd94:	443b      	add	r3, r7
 800fd96:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd98:	e76a      	b.n	800fc70 <_vfiprintf_r+0x78>
 800fd9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd9e:	460c      	mov	r4, r1
 800fda0:	2001      	movs	r0, #1
 800fda2:	e7a8      	b.n	800fcf6 <_vfiprintf_r+0xfe>
 800fda4:	2300      	movs	r3, #0
 800fda6:	3401      	adds	r4, #1
 800fda8:	9305      	str	r3, [sp, #20]
 800fdaa:	4619      	mov	r1, r3
 800fdac:	f04f 0c0a 	mov.w	ip, #10
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdb6:	3a30      	subs	r2, #48	@ 0x30
 800fdb8:	2a09      	cmp	r2, #9
 800fdba:	d903      	bls.n	800fdc4 <_vfiprintf_r+0x1cc>
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d0c6      	beq.n	800fd4e <_vfiprintf_r+0x156>
 800fdc0:	9105      	str	r1, [sp, #20]
 800fdc2:	e7c4      	b.n	800fd4e <_vfiprintf_r+0x156>
 800fdc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdc8:	4604      	mov	r4, r0
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e7f0      	b.n	800fdb0 <_vfiprintf_r+0x1b8>
 800fdce:	ab03      	add	r3, sp, #12
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	462a      	mov	r2, r5
 800fdd4:	4b12      	ldr	r3, [pc, #72]	@ (800fe20 <_vfiprintf_r+0x228>)
 800fdd6:	a904      	add	r1, sp, #16
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f3af 8000 	nop.w
 800fdde:	4607      	mov	r7, r0
 800fde0:	1c78      	adds	r0, r7, #1
 800fde2:	d1d6      	bne.n	800fd92 <_vfiprintf_r+0x19a>
 800fde4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fde6:	07d9      	lsls	r1, r3, #31
 800fde8:	d405      	bmi.n	800fdf6 <_vfiprintf_r+0x1fe>
 800fdea:	89ab      	ldrh	r3, [r5, #12]
 800fdec:	059a      	lsls	r2, r3, #22
 800fdee:	d402      	bmi.n	800fdf6 <_vfiprintf_r+0x1fe>
 800fdf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdf2:	f7ff fd25 	bl	800f840 <__retarget_lock_release_recursive>
 800fdf6:	89ab      	ldrh	r3, [r5, #12]
 800fdf8:	065b      	lsls	r3, r3, #25
 800fdfa:	f53f af1f 	bmi.w	800fc3c <_vfiprintf_r+0x44>
 800fdfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe00:	e71e      	b.n	800fc40 <_vfiprintf_r+0x48>
 800fe02:	ab03      	add	r3, sp, #12
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	462a      	mov	r2, r5
 800fe08:	4b05      	ldr	r3, [pc, #20]	@ (800fe20 <_vfiprintf_r+0x228>)
 800fe0a:	a904      	add	r1, sp, #16
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	f000 f879 	bl	800ff04 <_printf_i>
 800fe12:	e7e4      	b.n	800fdde <_vfiprintf_r+0x1e6>
 800fe14:	08010d84 	.word	0x08010d84
 800fe18:	08010d8e 	.word	0x08010d8e
 800fe1c:	00000000 	.word	0x00000000
 800fe20:	0800fbd3 	.word	0x0800fbd3
 800fe24:	08010d8a 	.word	0x08010d8a

0800fe28 <_printf_common>:
 800fe28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe2c:	4616      	mov	r6, r2
 800fe2e:	4698      	mov	r8, r3
 800fe30:	688a      	ldr	r2, [r1, #8]
 800fe32:	690b      	ldr	r3, [r1, #16]
 800fe34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	bfb8      	it	lt
 800fe3c:	4613      	movlt	r3, r2
 800fe3e:	6033      	str	r3, [r6, #0]
 800fe40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe44:	4607      	mov	r7, r0
 800fe46:	460c      	mov	r4, r1
 800fe48:	b10a      	cbz	r2, 800fe4e <_printf_common+0x26>
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	6033      	str	r3, [r6, #0]
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	0699      	lsls	r1, r3, #26
 800fe52:	bf42      	ittt	mi
 800fe54:	6833      	ldrmi	r3, [r6, #0]
 800fe56:	3302      	addmi	r3, #2
 800fe58:	6033      	strmi	r3, [r6, #0]
 800fe5a:	6825      	ldr	r5, [r4, #0]
 800fe5c:	f015 0506 	ands.w	r5, r5, #6
 800fe60:	d106      	bne.n	800fe70 <_printf_common+0x48>
 800fe62:	f104 0a19 	add.w	sl, r4, #25
 800fe66:	68e3      	ldr	r3, [r4, #12]
 800fe68:	6832      	ldr	r2, [r6, #0]
 800fe6a:	1a9b      	subs	r3, r3, r2
 800fe6c:	42ab      	cmp	r3, r5
 800fe6e:	dc26      	bgt.n	800febe <_printf_common+0x96>
 800fe70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe74:	6822      	ldr	r2, [r4, #0]
 800fe76:	3b00      	subs	r3, #0
 800fe78:	bf18      	it	ne
 800fe7a:	2301      	movne	r3, #1
 800fe7c:	0692      	lsls	r2, r2, #26
 800fe7e:	d42b      	bmi.n	800fed8 <_printf_common+0xb0>
 800fe80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe84:	4641      	mov	r1, r8
 800fe86:	4638      	mov	r0, r7
 800fe88:	47c8      	blx	r9
 800fe8a:	3001      	adds	r0, #1
 800fe8c:	d01e      	beq.n	800fecc <_printf_common+0xa4>
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	6922      	ldr	r2, [r4, #16]
 800fe92:	f003 0306 	and.w	r3, r3, #6
 800fe96:	2b04      	cmp	r3, #4
 800fe98:	bf02      	ittt	eq
 800fe9a:	68e5      	ldreq	r5, [r4, #12]
 800fe9c:	6833      	ldreq	r3, [r6, #0]
 800fe9e:	1aed      	subeq	r5, r5, r3
 800fea0:	68a3      	ldr	r3, [r4, #8]
 800fea2:	bf0c      	ite	eq
 800fea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fea8:	2500      	movne	r5, #0
 800feaa:	4293      	cmp	r3, r2
 800feac:	bfc4      	itt	gt
 800feae:	1a9b      	subgt	r3, r3, r2
 800feb0:	18ed      	addgt	r5, r5, r3
 800feb2:	2600      	movs	r6, #0
 800feb4:	341a      	adds	r4, #26
 800feb6:	42b5      	cmp	r5, r6
 800feb8:	d11a      	bne.n	800fef0 <_printf_common+0xc8>
 800feba:	2000      	movs	r0, #0
 800febc:	e008      	b.n	800fed0 <_printf_common+0xa8>
 800febe:	2301      	movs	r3, #1
 800fec0:	4652      	mov	r2, sl
 800fec2:	4641      	mov	r1, r8
 800fec4:	4638      	mov	r0, r7
 800fec6:	47c8      	blx	r9
 800fec8:	3001      	adds	r0, #1
 800feca:	d103      	bne.n	800fed4 <_printf_common+0xac>
 800fecc:	f04f 30ff 	mov.w	r0, #4294967295
 800fed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fed4:	3501      	adds	r5, #1
 800fed6:	e7c6      	b.n	800fe66 <_printf_common+0x3e>
 800fed8:	18e1      	adds	r1, r4, r3
 800feda:	1c5a      	adds	r2, r3, #1
 800fedc:	2030      	movs	r0, #48	@ 0x30
 800fede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fee2:	4422      	add	r2, r4
 800fee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800feec:	3302      	adds	r3, #2
 800feee:	e7c7      	b.n	800fe80 <_printf_common+0x58>
 800fef0:	2301      	movs	r3, #1
 800fef2:	4622      	mov	r2, r4
 800fef4:	4641      	mov	r1, r8
 800fef6:	4638      	mov	r0, r7
 800fef8:	47c8      	blx	r9
 800fefa:	3001      	adds	r0, #1
 800fefc:	d0e6      	beq.n	800fecc <_printf_common+0xa4>
 800fefe:	3601      	adds	r6, #1
 800ff00:	e7d9      	b.n	800feb6 <_printf_common+0x8e>
	...

0800ff04 <_printf_i>:
 800ff04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	7e0f      	ldrb	r7, [r1, #24]
 800ff0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff0c:	2f78      	cmp	r7, #120	@ 0x78
 800ff0e:	4691      	mov	r9, r2
 800ff10:	4680      	mov	r8, r0
 800ff12:	460c      	mov	r4, r1
 800ff14:	469a      	mov	sl, r3
 800ff16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff1a:	d807      	bhi.n	800ff2c <_printf_i+0x28>
 800ff1c:	2f62      	cmp	r7, #98	@ 0x62
 800ff1e:	d80a      	bhi.n	800ff36 <_printf_i+0x32>
 800ff20:	2f00      	cmp	r7, #0
 800ff22:	f000 80d1 	beq.w	80100c8 <_printf_i+0x1c4>
 800ff26:	2f58      	cmp	r7, #88	@ 0x58
 800ff28:	f000 80b8 	beq.w	801009c <_printf_i+0x198>
 800ff2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff34:	e03a      	b.n	800ffac <_printf_i+0xa8>
 800ff36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff3a:	2b15      	cmp	r3, #21
 800ff3c:	d8f6      	bhi.n	800ff2c <_printf_i+0x28>
 800ff3e:	a101      	add	r1, pc, #4	@ (adr r1, 800ff44 <_printf_i+0x40>)
 800ff40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff44:	0800ff9d 	.word	0x0800ff9d
 800ff48:	0800ffb1 	.word	0x0800ffb1
 800ff4c:	0800ff2d 	.word	0x0800ff2d
 800ff50:	0800ff2d 	.word	0x0800ff2d
 800ff54:	0800ff2d 	.word	0x0800ff2d
 800ff58:	0800ff2d 	.word	0x0800ff2d
 800ff5c:	0800ffb1 	.word	0x0800ffb1
 800ff60:	0800ff2d 	.word	0x0800ff2d
 800ff64:	0800ff2d 	.word	0x0800ff2d
 800ff68:	0800ff2d 	.word	0x0800ff2d
 800ff6c:	0800ff2d 	.word	0x0800ff2d
 800ff70:	080100af 	.word	0x080100af
 800ff74:	0800ffdb 	.word	0x0800ffdb
 800ff78:	08010069 	.word	0x08010069
 800ff7c:	0800ff2d 	.word	0x0800ff2d
 800ff80:	0800ff2d 	.word	0x0800ff2d
 800ff84:	080100d1 	.word	0x080100d1
 800ff88:	0800ff2d 	.word	0x0800ff2d
 800ff8c:	0800ffdb 	.word	0x0800ffdb
 800ff90:	0800ff2d 	.word	0x0800ff2d
 800ff94:	0800ff2d 	.word	0x0800ff2d
 800ff98:	08010071 	.word	0x08010071
 800ff9c:	6833      	ldr	r3, [r6, #0]
 800ff9e:	1d1a      	adds	r2, r3, #4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	6032      	str	r2, [r6, #0]
 800ffa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ffac:	2301      	movs	r3, #1
 800ffae:	e09c      	b.n	80100ea <_printf_i+0x1e6>
 800ffb0:	6833      	ldr	r3, [r6, #0]
 800ffb2:	6820      	ldr	r0, [r4, #0]
 800ffb4:	1d19      	adds	r1, r3, #4
 800ffb6:	6031      	str	r1, [r6, #0]
 800ffb8:	0606      	lsls	r6, r0, #24
 800ffba:	d501      	bpl.n	800ffc0 <_printf_i+0xbc>
 800ffbc:	681d      	ldr	r5, [r3, #0]
 800ffbe:	e003      	b.n	800ffc8 <_printf_i+0xc4>
 800ffc0:	0645      	lsls	r5, r0, #25
 800ffc2:	d5fb      	bpl.n	800ffbc <_printf_i+0xb8>
 800ffc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffc8:	2d00      	cmp	r5, #0
 800ffca:	da03      	bge.n	800ffd4 <_printf_i+0xd0>
 800ffcc:	232d      	movs	r3, #45	@ 0x2d
 800ffce:	426d      	negs	r5, r5
 800ffd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffd4:	4858      	ldr	r0, [pc, #352]	@ (8010138 <_printf_i+0x234>)
 800ffd6:	230a      	movs	r3, #10
 800ffd8:	e011      	b.n	800fffe <_printf_i+0xfa>
 800ffda:	6821      	ldr	r1, [r4, #0]
 800ffdc:	6833      	ldr	r3, [r6, #0]
 800ffde:	0608      	lsls	r0, r1, #24
 800ffe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ffe4:	d402      	bmi.n	800ffec <_printf_i+0xe8>
 800ffe6:	0649      	lsls	r1, r1, #25
 800ffe8:	bf48      	it	mi
 800ffea:	b2ad      	uxthmi	r5, r5
 800ffec:	2f6f      	cmp	r7, #111	@ 0x6f
 800ffee:	4852      	ldr	r0, [pc, #328]	@ (8010138 <_printf_i+0x234>)
 800fff0:	6033      	str	r3, [r6, #0]
 800fff2:	bf14      	ite	ne
 800fff4:	230a      	movne	r3, #10
 800fff6:	2308      	moveq	r3, #8
 800fff8:	2100      	movs	r1, #0
 800fffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fffe:	6866      	ldr	r6, [r4, #4]
 8010000:	60a6      	str	r6, [r4, #8]
 8010002:	2e00      	cmp	r6, #0
 8010004:	db05      	blt.n	8010012 <_printf_i+0x10e>
 8010006:	6821      	ldr	r1, [r4, #0]
 8010008:	432e      	orrs	r6, r5
 801000a:	f021 0104 	bic.w	r1, r1, #4
 801000e:	6021      	str	r1, [r4, #0]
 8010010:	d04b      	beq.n	80100aa <_printf_i+0x1a6>
 8010012:	4616      	mov	r6, r2
 8010014:	fbb5 f1f3 	udiv	r1, r5, r3
 8010018:	fb03 5711 	mls	r7, r3, r1, r5
 801001c:	5dc7      	ldrb	r7, [r0, r7]
 801001e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010022:	462f      	mov	r7, r5
 8010024:	42bb      	cmp	r3, r7
 8010026:	460d      	mov	r5, r1
 8010028:	d9f4      	bls.n	8010014 <_printf_i+0x110>
 801002a:	2b08      	cmp	r3, #8
 801002c:	d10b      	bne.n	8010046 <_printf_i+0x142>
 801002e:	6823      	ldr	r3, [r4, #0]
 8010030:	07df      	lsls	r7, r3, #31
 8010032:	d508      	bpl.n	8010046 <_printf_i+0x142>
 8010034:	6923      	ldr	r3, [r4, #16]
 8010036:	6861      	ldr	r1, [r4, #4]
 8010038:	4299      	cmp	r1, r3
 801003a:	bfde      	ittt	le
 801003c:	2330      	movle	r3, #48	@ 0x30
 801003e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010042:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010046:	1b92      	subs	r2, r2, r6
 8010048:	6122      	str	r2, [r4, #16]
 801004a:	f8cd a000 	str.w	sl, [sp]
 801004e:	464b      	mov	r3, r9
 8010050:	aa03      	add	r2, sp, #12
 8010052:	4621      	mov	r1, r4
 8010054:	4640      	mov	r0, r8
 8010056:	f7ff fee7 	bl	800fe28 <_printf_common>
 801005a:	3001      	adds	r0, #1
 801005c:	d14a      	bne.n	80100f4 <_printf_i+0x1f0>
 801005e:	f04f 30ff 	mov.w	r0, #4294967295
 8010062:	b004      	add	sp, #16
 8010064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	f043 0320 	orr.w	r3, r3, #32
 801006e:	6023      	str	r3, [r4, #0]
 8010070:	4832      	ldr	r0, [pc, #200]	@ (801013c <_printf_i+0x238>)
 8010072:	2778      	movs	r7, #120	@ 0x78
 8010074:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	6831      	ldr	r1, [r6, #0]
 801007c:	061f      	lsls	r7, r3, #24
 801007e:	f851 5b04 	ldr.w	r5, [r1], #4
 8010082:	d402      	bmi.n	801008a <_printf_i+0x186>
 8010084:	065f      	lsls	r7, r3, #25
 8010086:	bf48      	it	mi
 8010088:	b2ad      	uxthmi	r5, r5
 801008a:	6031      	str	r1, [r6, #0]
 801008c:	07d9      	lsls	r1, r3, #31
 801008e:	bf44      	itt	mi
 8010090:	f043 0320 	orrmi.w	r3, r3, #32
 8010094:	6023      	strmi	r3, [r4, #0]
 8010096:	b11d      	cbz	r5, 80100a0 <_printf_i+0x19c>
 8010098:	2310      	movs	r3, #16
 801009a:	e7ad      	b.n	800fff8 <_printf_i+0xf4>
 801009c:	4826      	ldr	r0, [pc, #152]	@ (8010138 <_printf_i+0x234>)
 801009e:	e7e9      	b.n	8010074 <_printf_i+0x170>
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	f023 0320 	bic.w	r3, r3, #32
 80100a6:	6023      	str	r3, [r4, #0]
 80100a8:	e7f6      	b.n	8010098 <_printf_i+0x194>
 80100aa:	4616      	mov	r6, r2
 80100ac:	e7bd      	b.n	801002a <_printf_i+0x126>
 80100ae:	6833      	ldr	r3, [r6, #0]
 80100b0:	6825      	ldr	r5, [r4, #0]
 80100b2:	6961      	ldr	r1, [r4, #20]
 80100b4:	1d18      	adds	r0, r3, #4
 80100b6:	6030      	str	r0, [r6, #0]
 80100b8:	062e      	lsls	r6, r5, #24
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	d501      	bpl.n	80100c2 <_printf_i+0x1be>
 80100be:	6019      	str	r1, [r3, #0]
 80100c0:	e002      	b.n	80100c8 <_printf_i+0x1c4>
 80100c2:	0668      	lsls	r0, r5, #25
 80100c4:	d5fb      	bpl.n	80100be <_printf_i+0x1ba>
 80100c6:	8019      	strh	r1, [r3, #0]
 80100c8:	2300      	movs	r3, #0
 80100ca:	6123      	str	r3, [r4, #16]
 80100cc:	4616      	mov	r6, r2
 80100ce:	e7bc      	b.n	801004a <_printf_i+0x146>
 80100d0:	6833      	ldr	r3, [r6, #0]
 80100d2:	1d1a      	adds	r2, r3, #4
 80100d4:	6032      	str	r2, [r6, #0]
 80100d6:	681e      	ldr	r6, [r3, #0]
 80100d8:	6862      	ldr	r2, [r4, #4]
 80100da:	2100      	movs	r1, #0
 80100dc:	4630      	mov	r0, r6
 80100de:	f7f0 f877 	bl	80001d0 <memchr>
 80100e2:	b108      	cbz	r0, 80100e8 <_printf_i+0x1e4>
 80100e4:	1b80      	subs	r0, r0, r6
 80100e6:	6060      	str	r0, [r4, #4]
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	6123      	str	r3, [r4, #16]
 80100ec:	2300      	movs	r3, #0
 80100ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100f2:	e7aa      	b.n	801004a <_printf_i+0x146>
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	4632      	mov	r2, r6
 80100f8:	4649      	mov	r1, r9
 80100fa:	4640      	mov	r0, r8
 80100fc:	47d0      	blx	sl
 80100fe:	3001      	adds	r0, #1
 8010100:	d0ad      	beq.n	801005e <_printf_i+0x15a>
 8010102:	6823      	ldr	r3, [r4, #0]
 8010104:	079b      	lsls	r3, r3, #30
 8010106:	d413      	bmi.n	8010130 <_printf_i+0x22c>
 8010108:	68e0      	ldr	r0, [r4, #12]
 801010a:	9b03      	ldr	r3, [sp, #12]
 801010c:	4298      	cmp	r0, r3
 801010e:	bfb8      	it	lt
 8010110:	4618      	movlt	r0, r3
 8010112:	e7a6      	b.n	8010062 <_printf_i+0x15e>
 8010114:	2301      	movs	r3, #1
 8010116:	4632      	mov	r2, r6
 8010118:	4649      	mov	r1, r9
 801011a:	4640      	mov	r0, r8
 801011c:	47d0      	blx	sl
 801011e:	3001      	adds	r0, #1
 8010120:	d09d      	beq.n	801005e <_printf_i+0x15a>
 8010122:	3501      	adds	r5, #1
 8010124:	68e3      	ldr	r3, [r4, #12]
 8010126:	9903      	ldr	r1, [sp, #12]
 8010128:	1a5b      	subs	r3, r3, r1
 801012a:	42ab      	cmp	r3, r5
 801012c:	dcf2      	bgt.n	8010114 <_printf_i+0x210>
 801012e:	e7eb      	b.n	8010108 <_printf_i+0x204>
 8010130:	2500      	movs	r5, #0
 8010132:	f104 0619 	add.w	r6, r4, #25
 8010136:	e7f5      	b.n	8010124 <_printf_i+0x220>
 8010138:	08010d95 	.word	0x08010d95
 801013c:	08010da6 	.word	0x08010da6

08010140 <__sflush_r>:
 8010140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010148:	0716      	lsls	r6, r2, #28
 801014a:	4605      	mov	r5, r0
 801014c:	460c      	mov	r4, r1
 801014e:	d454      	bmi.n	80101fa <__sflush_r+0xba>
 8010150:	684b      	ldr	r3, [r1, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	dc02      	bgt.n	801015c <__sflush_r+0x1c>
 8010156:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010158:	2b00      	cmp	r3, #0
 801015a:	dd48      	ble.n	80101ee <__sflush_r+0xae>
 801015c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801015e:	2e00      	cmp	r6, #0
 8010160:	d045      	beq.n	80101ee <__sflush_r+0xae>
 8010162:	2300      	movs	r3, #0
 8010164:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010168:	682f      	ldr	r7, [r5, #0]
 801016a:	6a21      	ldr	r1, [r4, #32]
 801016c:	602b      	str	r3, [r5, #0]
 801016e:	d030      	beq.n	80101d2 <__sflush_r+0x92>
 8010170:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010172:	89a3      	ldrh	r3, [r4, #12]
 8010174:	0759      	lsls	r1, r3, #29
 8010176:	d505      	bpl.n	8010184 <__sflush_r+0x44>
 8010178:	6863      	ldr	r3, [r4, #4]
 801017a:	1ad2      	subs	r2, r2, r3
 801017c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801017e:	b10b      	cbz	r3, 8010184 <__sflush_r+0x44>
 8010180:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010182:	1ad2      	subs	r2, r2, r3
 8010184:	2300      	movs	r3, #0
 8010186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010188:	6a21      	ldr	r1, [r4, #32]
 801018a:	4628      	mov	r0, r5
 801018c:	47b0      	blx	r6
 801018e:	1c43      	adds	r3, r0, #1
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	d106      	bne.n	80101a2 <__sflush_r+0x62>
 8010194:	6829      	ldr	r1, [r5, #0]
 8010196:	291d      	cmp	r1, #29
 8010198:	d82b      	bhi.n	80101f2 <__sflush_r+0xb2>
 801019a:	4a2a      	ldr	r2, [pc, #168]	@ (8010244 <__sflush_r+0x104>)
 801019c:	40ca      	lsrs	r2, r1
 801019e:	07d6      	lsls	r6, r2, #31
 80101a0:	d527      	bpl.n	80101f2 <__sflush_r+0xb2>
 80101a2:	2200      	movs	r2, #0
 80101a4:	6062      	str	r2, [r4, #4]
 80101a6:	04d9      	lsls	r1, r3, #19
 80101a8:	6922      	ldr	r2, [r4, #16]
 80101aa:	6022      	str	r2, [r4, #0]
 80101ac:	d504      	bpl.n	80101b8 <__sflush_r+0x78>
 80101ae:	1c42      	adds	r2, r0, #1
 80101b0:	d101      	bne.n	80101b6 <__sflush_r+0x76>
 80101b2:	682b      	ldr	r3, [r5, #0]
 80101b4:	b903      	cbnz	r3, 80101b8 <__sflush_r+0x78>
 80101b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80101b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101ba:	602f      	str	r7, [r5, #0]
 80101bc:	b1b9      	cbz	r1, 80101ee <__sflush_r+0xae>
 80101be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101c2:	4299      	cmp	r1, r3
 80101c4:	d002      	beq.n	80101cc <__sflush_r+0x8c>
 80101c6:	4628      	mov	r0, r5
 80101c8:	f7ff fb4a 	bl	800f860 <_free_r>
 80101cc:	2300      	movs	r3, #0
 80101ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80101d0:	e00d      	b.n	80101ee <__sflush_r+0xae>
 80101d2:	2301      	movs	r3, #1
 80101d4:	4628      	mov	r0, r5
 80101d6:	47b0      	blx	r6
 80101d8:	4602      	mov	r2, r0
 80101da:	1c50      	adds	r0, r2, #1
 80101dc:	d1c9      	bne.n	8010172 <__sflush_r+0x32>
 80101de:	682b      	ldr	r3, [r5, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d0c6      	beq.n	8010172 <__sflush_r+0x32>
 80101e4:	2b1d      	cmp	r3, #29
 80101e6:	d001      	beq.n	80101ec <__sflush_r+0xac>
 80101e8:	2b16      	cmp	r3, #22
 80101ea:	d11e      	bne.n	801022a <__sflush_r+0xea>
 80101ec:	602f      	str	r7, [r5, #0]
 80101ee:	2000      	movs	r0, #0
 80101f0:	e022      	b.n	8010238 <__sflush_r+0xf8>
 80101f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101f6:	b21b      	sxth	r3, r3
 80101f8:	e01b      	b.n	8010232 <__sflush_r+0xf2>
 80101fa:	690f      	ldr	r7, [r1, #16]
 80101fc:	2f00      	cmp	r7, #0
 80101fe:	d0f6      	beq.n	80101ee <__sflush_r+0xae>
 8010200:	0793      	lsls	r3, r2, #30
 8010202:	680e      	ldr	r6, [r1, #0]
 8010204:	bf08      	it	eq
 8010206:	694b      	ldreq	r3, [r1, #20]
 8010208:	600f      	str	r7, [r1, #0]
 801020a:	bf18      	it	ne
 801020c:	2300      	movne	r3, #0
 801020e:	eba6 0807 	sub.w	r8, r6, r7
 8010212:	608b      	str	r3, [r1, #8]
 8010214:	f1b8 0f00 	cmp.w	r8, #0
 8010218:	dde9      	ble.n	80101ee <__sflush_r+0xae>
 801021a:	6a21      	ldr	r1, [r4, #32]
 801021c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801021e:	4643      	mov	r3, r8
 8010220:	463a      	mov	r2, r7
 8010222:	4628      	mov	r0, r5
 8010224:	47b0      	blx	r6
 8010226:	2800      	cmp	r0, #0
 8010228:	dc08      	bgt.n	801023c <__sflush_r+0xfc>
 801022a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801022e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010232:	81a3      	strh	r3, [r4, #12]
 8010234:	f04f 30ff 	mov.w	r0, #4294967295
 8010238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801023c:	4407      	add	r7, r0
 801023e:	eba8 0800 	sub.w	r8, r8, r0
 8010242:	e7e7      	b.n	8010214 <__sflush_r+0xd4>
 8010244:	20400001 	.word	0x20400001

08010248 <_fflush_r>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	690b      	ldr	r3, [r1, #16]
 801024c:	4605      	mov	r5, r0
 801024e:	460c      	mov	r4, r1
 8010250:	b913      	cbnz	r3, 8010258 <_fflush_r+0x10>
 8010252:	2500      	movs	r5, #0
 8010254:	4628      	mov	r0, r5
 8010256:	bd38      	pop	{r3, r4, r5, pc}
 8010258:	b118      	cbz	r0, 8010262 <_fflush_r+0x1a>
 801025a:	6a03      	ldr	r3, [r0, #32]
 801025c:	b90b      	cbnz	r3, 8010262 <_fflush_r+0x1a>
 801025e:	f7fe fff7 	bl	800f250 <__sinit>
 8010262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d0f3      	beq.n	8010252 <_fflush_r+0xa>
 801026a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801026c:	07d0      	lsls	r0, r2, #31
 801026e:	d404      	bmi.n	801027a <_fflush_r+0x32>
 8010270:	0599      	lsls	r1, r3, #22
 8010272:	d402      	bmi.n	801027a <_fflush_r+0x32>
 8010274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010276:	f7ff fae2 	bl	800f83e <__retarget_lock_acquire_recursive>
 801027a:	4628      	mov	r0, r5
 801027c:	4621      	mov	r1, r4
 801027e:	f7ff ff5f 	bl	8010140 <__sflush_r>
 8010282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010284:	07da      	lsls	r2, r3, #31
 8010286:	4605      	mov	r5, r0
 8010288:	d4e4      	bmi.n	8010254 <_fflush_r+0xc>
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	059b      	lsls	r3, r3, #22
 801028e:	d4e1      	bmi.n	8010254 <_fflush_r+0xc>
 8010290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010292:	f7ff fad5 	bl	800f840 <__retarget_lock_release_recursive>
 8010296:	e7dd      	b.n	8010254 <_fflush_r+0xc>

08010298 <__swhatbuf_r>:
 8010298:	b570      	push	{r4, r5, r6, lr}
 801029a:	460c      	mov	r4, r1
 801029c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a0:	2900      	cmp	r1, #0
 80102a2:	b096      	sub	sp, #88	@ 0x58
 80102a4:	4615      	mov	r5, r2
 80102a6:	461e      	mov	r6, r3
 80102a8:	da0d      	bge.n	80102c6 <__swhatbuf_r+0x2e>
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102b0:	f04f 0100 	mov.w	r1, #0
 80102b4:	bf14      	ite	ne
 80102b6:	2340      	movne	r3, #64	@ 0x40
 80102b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80102bc:	2000      	movs	r0, #0
 80102be:	6031      	str	r1, [r6, #0]
 80102c0:	602b      	str	r3, [r5, #0]
 80102c2:	b016      	add	sp, #88	@ 0x58
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
 80102c6:	466a      	mov	r2, sp
 80102c8:	f000 f862 	bl	8010390 <_fstat_r>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	dbec      	blt.n	80102aa <__swhatbuf_r+0x12>
 80102d0:	9901      	ldr	r1, [sp, #4]
 80102d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80102d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80102da:	4259      	negs	r1, r3
 80102dc:	4159      	adcs	r1, r3
 80102de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102e2:	e7eb      	b.n	80102bc <__swhatbuf_r+0x24>

080102e4 <__smakebuf_r>:
 80102e4:	898b      	ldrh	r3, [r1, #12]
 80102e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102e8:	079d      	lsls	r5, r3, #30
 80102ea:	4606      	mov	r6, r0
 80102ec:	460c      	mov	r4, r1
 80102ee:	d507      	bpl.n	8010300 <__smakebuf_r+0x1c>
 80102f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	6123      	str	r3, [r4, #16]
 80102f8:	2301      	movs	r3, #1
 80102fa:	6163      	str	r3, [r4, #20]
 80102fc:	b003      	add	sp, #12
 80102fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010300:	ab01      	add	r3, sp, #4
 8010302:	466a      	mov	r2, sp
 8010304:	f7ff ffc8 	bl	8010298 <__swhatbuf_r>
 8010308:	9f00      	ldr	r7, [sp, #0]
 801030a:	4605      	mov	r5, r0
 801030c:	4639      	mov	r1, r7
 801030e:	4630      	mov	r0, r6
 8010310:	f7fe fe86 	bl	800f020 <_malloc_r>
 8010314:	b948      	cbnz	r0, 801032a <__smakebuf_r+0x46>
 8010316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801031a:	059a      	lsls	r2, r3, #22
 801031c:	d4ee      	bmi.n	80102fc <__smakebuf_r+0x18>
 801031e:	f023 0303 	bic.w	r3, r3, #3
 8010322:	f043 0302 	orr.w	r3, r3, #2
 8010326:	81a3      	strh	r3, [r4, #12]
 8010328:	e7e2      	b.n	80102f0 <__smakebuf_r+0xc>
 801032a:	89a3      	ldrh	r3, [r4, #12]
 801032c:	6020      	str	r0, [r4, #0]
 801032e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010332:	81a3      	strh	r3, [r4, #12]
 8010334:	9b01      	ldr	r3, [sp, #4]
 8010336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801033a:	b15b      	cbz	r3, 8010354 <__smakebuf_r+0x70>
 801033c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010340:	4630      	mov	r0, r6
 8010342:	f000 f837 	bl	80103b4 <_isatty_r>
 8010346:	b128      	cbz	r0, 8010354 <__smakebuf_r+0x70>
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	f023 0303 	bic.w	r3, r3, #3
 801034e:	f043 0301 	orr.w	r3, r3, #1
 8010352:	81a3      	strh	r3, [r4, #12]
 8010354:	89a3      	ldrh	r3, [r4, #12]
 8010356:	431d      	orrs	r5, r3
 8010358:	81a5      	strh	r5, [r4, #12]
 801035a:	e7cf      	b.n	80102fc <__smakebuf_r+0x18>

0801035c <memmove>:
 801035c:	4288      	cmp	r0, r1
 801035e:	b510      	push	{r4, lr}
 8010360:	eb01 0402 	add.w	r4, r1, r2
 8010364:	d902      	bls.n	801036c <memmove+0x10>
 8010366:	4284      	cmp	r4, r0
 8010368:	4623      	mov	r3, r4
 801036a:	d807      	bhi.n	801037c <memmove+0x20>
 801036c:	1e43      	subs	r3, r0, #1
 801036e:	42a1      	cmp	r1, r4
 8010370:	d008      	beq.n	8010384 <memmove+0x28>
 8010372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010376:	f803 2f01 	strb.w	r2, [r3, #1]!
 801037a:	e7f8      	b.n	801036e <memmove+0x12>
 801037c:	4402      	add	r2, r0
 801037e:	4601      	mov	r1, r0
 8010380:	428a      	cmp	r2, r1
 8010382:	d100      	bne.n	8010386 <memmove+0x2a>
 8010384:	bd10      	pop	{r4, pc}
 8010386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801038a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801038e:	e7f7      	b.n	8010380 <memmove+0x24>

08010390 <_fstat_r>:
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	4d07      	ldr	r5, [pc, #28]	@ (80103b0 <_fstat_r+0x20>)
 8010394:	2300      	movs	r3, #0
 8010396:	4604      	mov	r4, r0
 8010398:	4608      	mov	r0, r1
 801039a:	4611      	mov	r1, r2
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	f7f5 fea7 	bl	80060f0 <_fstat>
 80103a2:	1c43      	adds	r3, r0, #1
 80103a4:	d102      	bne.n	80103ac <_fstat_r+0x1c>
 80103a6:	682b      	ldr	r3, [r5, #0]
 80103a8:	b103      	cbz	r3, 80103ac <_fstat_r+0x1c>
 80103aa:	6023      	str	r3, [r4, #0]
 80103ac:	bd38      	pop	{r3, r4, r5, pc}
 80103ae:	bf00      	nop
 80103b0:	20001284 	.word	0x20001284

080103b4 <_isatty_r>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	4d06      	ldr	r5, [pc, #24]	@ (80103d0 <_isatty_r+0x1c>)
 80103b8:	2300      	movs	r3, #0
 80103ba:	4604      	mov	r4, r0
 80103bc:	4608      	mov	r0, r1
 80103be:	602b      	str	r3, [r5, #0]
 80103c0:	f7f5 fea6 	bl	8006110 <_isatty>
 80103c4:	1c43      	adds	r3, r0, #1
 80103c6:	d102      	bne.n	80103ce <_isatty_r+0x1a>
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	b103      	cbz	r3, 80103ce <_isatty_r+0x1a>
 80103cc:	6023      	str	r3, [r4, #0]
 80103ce:	bd38      	pop	{r3, r4, r5, pc}
 80103d0:	20001284 	.word	0x20001284

080103d4 <_realloc_r>:
 80103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d8:	4607      	mov	r7, r0
 80103da:	4614      	mov	r4, r2
 80103dc:	460d      	mov	r5, r1
 80103de:	b921      	cbnz	r1, 80103ea <_realloc_r+0x16>
 80103e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103e4:	4611      	mov	r1, r2
 80103e6:	f7fe be1b 	b.w	800f020 <_malloc_r>
 80103ea:	b92a      	cbnz	r2, 80103f8 <_realloc_r+0x24>
 80103ec:	f7ff fa38 	bl	800f860 <_free_r>
 80103f0:	4625      	mov	r5, r4
 80103f2:	4628      	mov	r0, r5
 80103f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f8:	f000 f81a 	bl	8010430 <_malloc_usable_size_r>
 80103fc:	4284      	cmp	r4, r0
 80103fe:	4606      	mov	r6, r0
 8010400:	d802      	bhi.n	8010408 <_realloc_r+0x34>
 8010402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010406:	d8f4      	bhi.n	80103f2 <_realloc_r+0x1e>
 8010408:	4621      	mov	r1, r4
 801040a:	4638      	mov	r0, r7
 801040c:	f7fe fe08 	bl	800f020 <_malloc_r>
 8010410:	4680      	mov	r8, r0
 8010412:	b908      	cbnz	r0, 8010418 <_realloc_r+0x44>
 8010414:	4645      	mov	r5, r8
 8010416:	e7ec      	b.n	80103f2 <_realloc_r+0x1e>
 8010418:	42b4      	cmp	r4, r6
 801041a:	4622      	mov	r2, r4
 801041c:	4629      	mov	r1, r5
 801041e:	bf28      	it	cs
 8010420:	4632      	movcs	r2, r6
 8010422:	f7ff fa0e 	bl	800f842 <memcpy>
 8010426:	4629      	mov	r1, r5
 8010428:	4638      	mov	r0, r7
 801042a:	f7ff fa19 	bl	800f860 <_free_r>
 801042e:	e7f1      	b.n	8010414 <_realloc_r+0x40>

08010430 <_malloc_usable_size_r>:
 8010430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010434:	1f18      	subs	r0, r3, #4
 8010436:	2b00      	cmp	r3, #0
 8010438:	bfbc      	itt	lt
 801043a:	580b      	ldrlt	r3, [r1, r0]
 801043c:	18c0      	addlt	r0, r0, r3
 801043e:	4770      	bx	lr

08010440 <_init>:
 8010440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010442:	bf00      	nop
 8010444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010446:	bc08      	pop	{r3}
 8010448:	469e      	mov	lr, r3
 801044a:	4770      	bx	lr

0801044c <_fini>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	bf00      	nop
 8010450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010452:	bc08      	pop	{r3}
 8010454:	469e      	mov	lr, r3
 8010456:	4770      	bx	lr
