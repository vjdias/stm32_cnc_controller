
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800c168  0800c168  0000d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c784  0800c784  0000e078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c784  0800c784  0000d784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c78c  0800c78c  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c78c  0800c78c  0000d78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c790  0800c790  0000d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800c794  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d10  20000078  0800c80c  0000e078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  0800c80c  0000ed88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a10e  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ff  00000000  00000000  000281b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b5  00000000  00000000  0002dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b5c  00000000  00000000  0002ee85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214cf  00000000  00000000  000579e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f705b  00000000  00000000  00078eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ff0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006648  00000000  00000000  0016ff50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00176598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c150 	.word	0x0800c150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800c150 	.word	0x0800c150

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <xor_reduce_bytes>:
} resp_msg_type_t;

// =====================
// Conjunto genérico de auxiliares
// =====================

 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
// XOR sobre bytes (paridade byte a byte)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e009      	b.n	800070c <xor_reduce_bytes+0x28>
	uint8_t x = 0;
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4053      	eors	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3f1      	bcc.n	80006f8 <xor_reduce_bytes+0x14>
	for (uint32_t i = 0; i < n; ++i)
 8000714:	7bfb      	ldrb	r3, [r7, #15]
		x ^= p[i];
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <set_parity_byte>:
static inline int check_parity_byte(const uint8_t *raw, uint32_t start,
		uint32_t count, uint32_t parity_index) {
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	603b      	str	r3, [r7, #0]
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <set_parity_byte+0x1a>
		uint32_t parity_index) {
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e00b      	b.n	8000754 <set_parity_byte+0x32>
	if (!raw)
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	18d0      	adds	r0, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	18d4      	adds	r4, r2, r3
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f7ff ffcb 	bl	80006e4 <xor_reduce_bytes>
 800074e:	4603      	mov	r3, r0
 8000750:	7023      	strb	r3, [r4, #0]
		return -1;
 8000752:	2300      	movs	r3, #0
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <resp_init>:
// =====================
// Auxiliares de frame (init/tail)
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
}
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	22ab      	movs	r2, #171	@ 0xab
 800076c:	701a      	strb	r2, [r3, #0]
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	701a      	strb	r2, [r3, #0]
	raw[0] = RESP_HEADER;
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <resp_set_tail>:
	raw[1] = (uint8_t) type;
}
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
}
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	2254      	movs	r2, #84	@ 0x54
 8000794:	701a      	strb	r2, [r3, #0]
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <parity_set_byte_1N>:
}

// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	2101      	movs	r1, #1
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff ffb4 	bl	8000722 <set_parity_byte>
 80007ba:	4603      	mov	r3, r0
		uint32_t parity_index) {
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d802      	bhi.n	80007e8 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e01c      	b.n	8000822 <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80007e8:	2107      	movs	r1, #7
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f7ff ffb6 	bl	800075c <resp_init>
	raw[2] = in->frameId;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3302      	adds	r3, #2
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3303      	adds	r3, #3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	7852      	ldrb	r2, [r2, #1]
 8000802:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3304      	adds	r3, #4
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	7892      	ldrb	r2, [r2, #2]
 800080c:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 800080e:	2205      	movs	r2, #5
 8000810:	2104      	movs	r1, #4
 8000812:	68b8      	ldr	r0, [r7, #8]
 8000814:	f7ff ffc5 	bl	80007a2 <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000818:	2106      	movs	r1, #6
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff ffb1 	bl	8000782 <resp_set_tail>
	return PROTO_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 8000838:	2248      	movs	r2, #72	@ 0x48
 800083a:	2100      	movs	r1, #0
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f00a fd69 	bl	800b314 <memset>
	r->resp = resp_fifo;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d009      	beq.n	8000862 <router_init+0x36>
		handlers = *h;
 800084e:	4a07      	ldr	r2, [pc, #28]	@ (800086c <router_init+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4614      	mov	r4, r2
 8000854:	461d      	mov	r5, r3
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800085e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bdb0      	pop	{r4, r5, r7, pc}
 800086a:	bf00      	nop
 800086c:	20000094 	.word	0x20000094

08000870 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	if (n < 4)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d801      	bhi.n	8000884 <is_req_complete+0x14>
		return 0; // mínimo
 8000880:	2300      	movs	r3, #0
 8000882:	e01a      	b.n	80008ba <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2baa      	cmp	r3, #170	@ 0xaa
 800088a:	d002      	beq.n	8000892 <is_req_complete+0x22>
		return -1; // inválido
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	e013      	b.n	80008ba <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000892:	2303      	movs	r3, #3
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e00b      	b.n	80008b0 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b55      	cmp	r3, #85	@ 0x55
 80008a2:	d102      	bne.n	80008aa <is_req_complete+0x3a>
			return (int) (i + 1);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	e007      	b.n	80008ba <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3ef      	bcc.n	8000898 <is_req_complete+0x28>
	}
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	if (len < 4)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	f240 80a4 	bls.w	8000a24 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3301      	adds	r3, #1
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	f200 809d 	bhi.w	8000a28 <dispatch+0x160>
 80008ee:	a201      	add	r2, pc, #4	@ (adr r2, 80008f4 <dispatch+0x2c>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000975 	.word	0x08000975
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	080009a1 	.word	0x080009a1
 8000900:	080009b7 	.word	0x080009b7
 8000904:	080009cd 	.word	0x080009cd
 8000908:	080009e3 	.word	0x080009e3
 800090c:	080009f9 	.word	0x080009f9
 8000910:	08000a29 	.word	0x08000a29
 8000914:	08000a29 	.word	0x08000a29
 8000918:	08000a29 	.word	0x08000a29
 800091c:	08000a29 	.word	0x08000a29
 8000920:	08000a29 	.word	0x08000a29
 8000924:	08000a29 	.word	0x08000a29
 8000928:	08000a29 	.word	0x08000a29
 800092c:	08000a29 	.word	0x08000a29
 8000930:	08000a29 	.word	0x08000a29
 8000934:	08000a29 	.word	0x08000a29
 8000938:	08000a29 	.word	0x08000a29
 800093c:	08000a29 	.word	0x08000a29
 8000940:	08000a29 	.word	0x08000a29
 8000944:	08000a29 	.word	0x08000a29
 8000948:	08000a29 	.word	0x08000a29
 800094c:	08000a29 	.word	0x08000a29
 8000950:	08000a29 	.word	0x08000a29
 8000954:	08000a29 	.word	0x08000a29
 8000958:	08000a29 	.word	0x08000a29
 800095c:	08000a29 	.word	0x08000a29
 8000960:	08000a29 	.word	0x08000a29
 8000964:	08000a29 	.word	0x08000a29
 8000968:	08000a29 	.word	0x08000a29
 800096c:	08000a29 	.word	0x08000a29
 8000970:	08000a0f 	.word	0x08000a0f
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 8000974:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <dispatch+0x188>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d057      	beq.n	8000a2c <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 800097c:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <dispatch+0x188>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	4798      	blx	r3
		break;
 8000988:	e050      	b.n	8000a2c <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <dispatch+0x188>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04e      	beq.n	8000a30 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <dispatch+0x188>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	4798      	blx	r3
		break;
 800099e:	e047      	b.n	8000a30 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 80009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <dispatch+0x188>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d045      	beq.n	8000a34 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 80009a8:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <dispatch+0x188>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	4798      	blx	r3
		break;
 80009b4:	e03e      	b.n	8000a34 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 80009b6:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <dispatch+0x188>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d03c      	beq.n	8000a38 <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <dispatch+0x188>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	4798      	blx	r3
		break;
 80009ca:	e035      	b.n	8000a38 <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <dispatch+0x188>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d033      	beq.n	8000a3c <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 80009d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <dispatch+0x188>)
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	4798      	blx	r3
		break;
 80009e0:	e02c      	b.n	8000a3c <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <dispatch+0x188>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d02a      	beq.n	8000a40 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 80009ea:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <dispatch+0x188>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	4798      	blx	r3
		break;
 80009f6:	e023      	b.n	8000a40 <dispatch+0x178>
        case REQ_LED_CTRL:
                if (handlers.on_led_ctrl)
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <dispatch+0x188>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d021      	beq.n	8000a44 <dispatch+0x17c>
                        handlers.on_led_ctrl(r, f, len);
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <dispatch+0x188>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	68b9      	ldr	r1, [r7, #8]
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	4798      	blx	r3
                break;
 8000a0c:	e01a      	b.n	8000a44 <dispatch+0x17c>
        case REQ_FPGA_STATUS:
                if (handlers.on_fpga_status)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <dispatch+0x188>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d018      	beq.n	8000a48 <dispatch+0x180>
                        handlers.on_fpga_status(r, f, len);
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <dispatch+0x188>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	4798      	blx	r3
                break;
 8000a22:	e011      	b.n	8000a48 <dispatch+0x180>
		return;
 8000a24:	bf00      	nop
 8000a26:	e010      	b.n	8000a4a <dispatch+0x182>
        case REQ_TEST_HELLO:
                if (handlers.on_test_hello)
 8000a28:	bf00      	nop
 8000a2a:	e00e      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e00c      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a30:	bf00      	nop
 8000a32:	e00a      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a34:	bf00      	nop
 8000a36:	e008      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a38:	bf00      	nop
 8000a3a:	e006      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a3c:	bf00      	nop
 8000a3e:	e004      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a40:	bf00      	nop
 8000a42:	e002      	b.n	8000a4a <dispatch+0x182>
                break;
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <dispatch+0x182>
                break;
 8000a48:	bf00      	nop
                        handlers.on_test_hello(r, f, len);
                break;
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000094 	.word	0x20000094

08000a54 <router_feed_bytes>:
        default:
                break; // desconhecido
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
        }
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e038      	b.n	8000ad8 <router_feed_bytes+0x84>
}
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a6e:	d903      	bls.n	8000a78 <router_feed_bytes+0x24>

 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a84:	1c59      	adds	r1, r3, #1
 8000a86:	b2c8      	uxtb	r0, r1
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000a8e:	4619      	mov	r1, r3
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	545a      	strb	r2, [r3, r1]
	for (uint32_t i = 0; i < len; i++) {
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f7ff fee5 	bl	8000870 <is_req_complete>
 8000aa6:	6138      	str	r0, [r7, #16]
		if (r->idx >= sizeof(r->acc))
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da04      	bge.n	8000ab8 <router_feed_bytes+0x64>
			r->idx = 0; // evita overflow simples
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 8000ab6:	e00c      	b.n	8000ad2 <router_feed_bytes+0x7e>
		int comp = is_req_complete(r->acc, r->idx);
		if (comp < 0) {
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dd09      	ble.n	8000ad2 <router_feed_bytes+0x7e>
			r->idx = 0;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff feff 	bl	80008c8 <dispatch>
			continue;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d3c2      	bcc.n	8000a66 <router_feed_bytes+0x12>
		} // descarta até header
		if (comp > 0) {
			dispatch(r, r->acc, (uint32_t) comp);
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <resp_fifo_create>:
			r->idx = 0;
		}
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
	}
 8000af0:	210c      	movs	r1, #12
 8000af2:	2001      	movs	r0, #1
 8000af4:	f00a f92c 	bl	800ad50 <calloc>
 8000af8:	4603      	mov	r3, r0
 8000afa:	607b      	str	r3, [r7, #4]
}
 8000afc:	687b      	ldr	r3, [r7, #4]

 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <resp_fifo_push>:
void resp_fifo_destroy(response_fifo_t *q) {
	while (q && q->head) {
		node_t *n = q->head;
		q->head = n->next;
		free(n->buf);
		free(n);
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
	}
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d005      	beq.n	8000b24 <resp_fifo_push+0x1e>
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <resp_fifo_push+0x1e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <resp_fifo_push+0x24>
	free(q);
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	e03d      	b.n	8000ba6 <resp_fifo_push+0xa0>
}
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f00a f92c 	bl	800ad88 <malloc>
 8000b30:	4603      	mov	r3, r0
 8000b32:	617b      	str	r3, [r7, #20]
int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <resp_fifo_push+0x3a>
	if (!q || !frame || len == 0)
 8000b3a:	f06f 0302 	mvn.w	r3, #2
 8000b3e:	e032      	b.n	8000ba6 <resp_fifo_push+0xa0>
		return PROTO_ERR_ARG;
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f00a f921 	bl	800ad88 <malloc>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	601a      	str	r2, [r3, #0]
	node_t *n = (node_t*) malloc(sizeof(*n));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d105      	bne.n	8000b62 <resp_fifo_push+0x5c>
	if (!n)
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f00a f91e 	bl	800ad98 <free>
		return PROTO_ERR_ALLOC;
 8000b5c:	f06f 0302 	mvn.w	r3, #2
 8000b60:	e021      	b.n	8000ba6 <resp_fifo_push+0xa0>
	n->buf = (uint8_t*) malloc(len);
	if (!n->buf) {
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00a fc5d 	bl	800b42a <memcpy>
		free(n);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	605a      	str	r2, [r3, #4]
		return PROTO_ERR_ALLOC;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
	}
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d004      	beq.n	8000b8e <resp_fifo_push+0x88>
	memcpy(n->buf, frame, len);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	e002      	b.n	8000b94 <resp_fifo_push+0x8e>
	n->len = len;
	n->next = NULL;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	601a      	str	r2, [r3, #0]
	if (q->tail)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	605a      	str	r2, [r3, #4]
		q->tail->next = n;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	609a      	str	r2, [r3, #8]
	else
 8000ba4:	2300      	movs	r3, #0
		q->head = n;
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <resp_fifo_pop>:
	q->tail = n;
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	q->count++;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <resp_fifo_pop+0x20>
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <resp_fifo_pop+0x20>
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <resp_fifo_pop+0x24>
	return PROTO_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e02e      	b.n	8000c30 <resp_fifo_pop+0x82>
}
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	617b      	str	r3, [r7, #20]
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d202      	bcs.n	8000be8 <resp_fifo_pop+0x3a>
	if (!q || !q->head || !out)
 8000be2:	f06f 0303 	mvn.w	r3, #3
 8000be6:	e023      	b.n	8000c30 <resp_fifo_pop+0x82>
		return 0;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	6819      	ldr	r1, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68b8      	ldr	r0, [r7, #8]
 8000bf4:	f00a fc19 	bl	800b42a <memcpy>
	node_t *n = q->head;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
	if (n->len > max_len)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]
		return PROTO_ERR_RANGE;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <resp_fifo_pop+0x66>
	memcpy(out, n->buf, n->len);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
	int l = (int) n->len;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	609a      	str	r2, [r3, #8]
	q->head = n->next;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00a f8b8 	bl	800ad98 <free>
	if (!q->head)
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f00a f8b5 	bl	800ad98 <free>
		q->tail = NULL;
 8000c2e:	693b      	ldr	r3, [r7, #16]
	q->count--;
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <home_on_move_home+0x2c>)
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <home_on_move_home+0x30>)
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <home_on_move_home+0x34>)
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <home_on_move_home+0x38>)
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4613      	mov	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 fbf8 	bl	800144c <log_event_auto>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	0800c168 	.word	0x0800c168
 8000c68:	0800c180 	.word	0x0800c180
 8000c6c:	0800c174 	.word	0x0800c174
 8000c70:	0800c190 	.word	0x0800c190

08000c74 <led_push_response>:
} led_channel_state_t;

static led_channel_state_t g_leds[LED_CTRL_CHANNEL_COUNT] = {
    { LED1_GPIO_PORT, LED1_GPIO_PIN, LED1_GPIO_AF, LED_MODE_OFF, 0u, 0u },
};

 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	4613      	mov	r3, r2
 8000c84:	717b      	strb	r3, [r7, #5]
static uint8_t g_pwm_running = 0u;

 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	733b      	strb	r3, [r7, #12]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	737b      	strb	r3, [r7, #13]
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	73bb      	strb	r3, [r7, #14]
#if LED_ACTIVE_HIGH
 8000c92:	f107 0110 	add.w	r1, r7, #16
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd91 	bl	80007c4 <led_ctrl_resp_encoder>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00c      	beq.n	8000cc2 <led_push_response+0x4e>
#define LED_GPIO_ON_LEVEL  GPIO_PIN_SET
 8000ca8:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <led_push_response+0x80>)
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <led_push_response+0x84>)
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <led_push_response+0x88>)
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	f06f 0201 	mvn.w	r2, #1
 8000cb8:	2164      	movs	r1, #100	@ 0x64
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 fbc6 	bl	800144c <log_event_auto>
 8000cc0:	e014      	b.n	8000cec <led_push_response+0x78>
#define LED_GPIO_OFF_LEVEL GPIO_PIN_RESET
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 feef 	bl	8001aac <app_resp_push>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00b      	beq.n	8000cec <led_push_response+0x78>
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <led_push_response+0x80>)
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <led_push_response+0x8c>)
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <led_push_response+0x88>)
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	f06f 0203 	mvn.w	r2, #3
 8000ce4:	2164      	movs	r1, #100	@ 0x64
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fbb0 	bl	800144c <log_event_auto>
#endif

 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800c19c 	.word	0x0800c19c
 8000cf8:	0800c1a0 	.word	0x0800c1a0
 8000cfc:	0800c1bc 	.word	0x0800c1bc
 8000d00:	0800c1c4 	.word	0x0800c1c4

08000d04 <led_timer_get_clock>:
static void led_gpio_config_output(const led_channel_state_t *led) {
    if (!led)
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
        return;
 8000d0a:	f004 fca7 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 8000d0e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gi = {0};
    gi.Pin = led->pin;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <led_timer_get_clock+0x34>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000d18:	603b      	str	r3, [r7, #0]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <led_timer_get_clock+0x28>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <led_timer_get_clock+0x28>
    gi.Pull = GPIO_NOPULL;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(led->port, &gi);
}
 8000d2c:	687b      	ldr	r3, [r7, #4]

 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <led_compute_period_ticks>:
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
        return;
 8000d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d40:	b094      	sub	sp, #80	@ 0x50
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }
 8000d48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <led_compute_period_ticks+0x16>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e066      	b.n	8000e20 <led_compute_period_ticks+0xe4>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
    }
 8000d52:	f7ff ffd7 	bl	8000d04 <led_timer_get_clock>
 8000d56:	6478      	str	r0, [r7, #68]	@ 0x44
}
 8000d58:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <led_compute_period_ticks+0xf0>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	643b      	str	r3, [r7, #64]	@ 0x40

 8000d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <led_compute_period_ticks+0x2e>
static uint32_t led_timer_get_clock(void) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	e05a      	b.n	8000e20 <led_compute_period_ticks+0xe4>
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
 8000d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <led_compute_period_ticks+0x42>
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e050      	b.n	8000e20 <led_compute_period_ticks+0xe4>
        clk *= 2u;
    }
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d80:	2200      	movs	r2, #0
 8000d82:	4698      	mov	r8, r3
 8000d84:	4691      	mov	r9, r2
 8000d86:	4642      	mov	r2, r8
 8000d88:	464b      	mov	r3, r9
 8000d8a:	1891      	adds	r1, r2, r2
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	415b      	adcs	r3, r3
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d96:	eb12 0408 	adds.w	r4, r2, r8
 8000d9a:	eb43 0509 	adc.w	r5, r3, r9
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	016b      	lsls	r3, r5, #5
 8000da8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dac:	0162      	lsls	r2, r4, #5
 8000dae:	eb14 0a02 	adds.w	sl, r4, r2
 8000db2:	eb45 0b03 	adc.w	fp, r5, r3
 8000db6:	eb1a 0308 	adds.w	r3, sl, r8
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	eb4b 0309 	adc.w	r3, fp, r9
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000dc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
#endif
 8000dca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8000dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ddc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000de0:	4621      	mov	r1, r4
 8000de2:	1889      	adds	r1, r1, r2
 8000de4:	61b9      	str	r1, [r7, #24]
 8000de6:	4629      	mov	r1, r5
 8000de8:	eb43 0101 	adc.w	r1, r3, r1
 8000dec:	61f9      	str	r1, [r7, #28]
 8000dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000df0:	2200      	movs	r2, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	617a      	str	r2, [r7, #20]
 8000df6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dfe:	f7ff fa37 	bl	8000270 <__aeabi_uldivmod>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return clk;
 8000e0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d305      	bcc.n	8000e1e <led_compute_period_ticks+0xe2>
}
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

 8000e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
/*
 8000e20:	4618      	mov	r0, r3
 8000e22:	3750      	adds	r7, #80	@ 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000b64 	.word	0x20000b64

08000e30 <led_apply_pwm>:
 * Converte a frequência de pisca (em centi-hertz) no período correspondente
 * para o TIM15, levando em conta o prescaler configurado.
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
 *
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <led_apply_pwm+0x14>
 * freq_centi_hz carrega a frequência já multiplicada por 100. Para obter o
 8000e40:	2301      	movs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 * período (ticks) precisamos multiplicar o clock efetivo do timer por 100 e
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d901      	bls.n	8000e50 <led_apply_pwm+0x20>
 * dividir novamente por freq_centi_hz (isto é, clk_per_second / (freq/100)).
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]
 * A soma de freq_centi_hz/2 implementa arredondamento para o inteiro mais
 * próximo, mantendo o cálculo puramente inteiro.
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <led_apply_pwm+0x2c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <led_apply_pwm+0x2e>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 *
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e68:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	60d3      	str	r3, [r2, #12]
 * Exemplos com o clock atual (80 MHz) e prescaler = 0 (divisor efetivo 1):
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34
 *   - 1,00 Hz → freq_centi_hz = 100 → ticks calculados = 80 000 000.
 8000e76:	2101      	movs	r1, #1
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e7a:	f007 fc3b 	bl	80086f4 <HAL_TIM_GenerateEvent>
 *   - 0,20 Hz → freq_centi_hz =  20 → ticks calculados = 400 000 000.
 8000e7e:	4a03      	ldr	r2, [pc, #12]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	60d3      	str	r3, [r2, #12]
 * Ambos excedem os 65 536 passos que o ARR de 16 bits suporta, portanto
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000b64 	.word	0x20000b64

08000e90 <led_force_off>:
 * led_force_blink() satura o período em 0x10000 e o LED pisca de fato a
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d010      	beq.n	8000ec0 <led_force_off+0x30>
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <led_force_off+0x38>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffc2 	bl	8000e30 <led_apply_pwm>

 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	719a      	strb	r2, [r3, #6]
static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	811a      	strh	r2, [r3, #8]
    if (freq_centi_hz == 0u)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	71da      	strb	r2, [r3, #7]
 8000ebe:	e000      	b.n	8000ec2 <led_force_off+0x32>
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 8000ec0:	bf00      	nop
        return 0u;
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000b64 	.word	0x20000b64

08000ecc <led_force_on>:

    uint32_t timer_clk = led_timer_get_clock();
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d016      	beq.n	8000f08 <led_force_on+0x3c>
    if (prescaler == 0u)
        return 0u;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <led_force_on+0x44>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]

 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <led_force_on+0x20>
    uint32_t clk_per_second = timer_clk / prescaler;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	60fb      	str	r3, [r7, #12]
    if (clk_per_second == 0u)
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ff9e 	bl	8000e30 <led_apply_pwm>
        return 0u;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	719a      	strb	r2, [r3, #6]

 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	811a      	strh	r2, [r3, #8]
    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	71da      	strb	r2, [r3, #7]
 8000f06:	e000      	b.n	8000f0a <led_force_on+0x3e>
    if (prescaler == 0u)
 8000f08:	bf00      	nop
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000b64 	.word	0x20000b64

08000f14 <led_force_blink>:
    if (ticks > 0xFFFFFFFFu)
        ticks = 0xFFFFFFFFu;
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
    return (uint32_t)ticks;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d024      	beq.n	8000f70 <led_force_blink+0x5c>
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d021      	beq.n	8000f70 <led_force_blink+0x5c>
}

 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff04 	bl	8000d3c <led_compute_period_ticks>
 8000f34:	60f8      	str	r0, [r7, #12]
static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d801      	bhi.n	8000f40 <led_force_blink+0x2c>
    if (period_ticks == 0u)
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
        period_ticks = 1u;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f46:	d902      	bls.n	8000f4e <led_force_blink+0x3a>
    if (pulse_ticks > period_ticks)
 8000f48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4c:	60fb      	str	r3, [r7, #12]
        pulse_ticks = period_ticks;

 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ff6a 	bl	8000e30 <led_apply_pwm>
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	719a      	strb	r2, [r3, #6]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	887a      	ldrh	r2, [r7, #2]
 8000f66:	811a      	strh	r2, [r3, #8]
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	71da      	strb	r2, [r3, #7]
 8000f6e:	e000      	b.n	8000f72 <led_force_blink+0x5e>
}
 8000f70:	bf00      	nop
    htim15.Init.Period = arr;
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <led_apply_config>:
}

 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
 8000f84:	4613      	mov	r3, r2
 8000f86:	803b      	strh	r3, [r7, #0]
static void led_force_off(led_channel_state_t *led) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d026      	beq.n	8000fdc <led_apply_config+0x64>
    if (!led)
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <led_apply_config+0x20>
    if (st != HAL_OK) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f98:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
    }
 8000fa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
    led_gpio_config_output(led);
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
    led->mode = LED_MODE_OFF;
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d103      	bne.n	8000fb4 <led_apply_config+0x3c>
    led->frequency_centi_hz = 0u;
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff8d 	bl	8000ecc <led_force_on>
 8000fb2:	e00e      	b.n	8000fd2 <led_apply_config+0x5a>
    led->is_on = 0u;
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d108      	bne.n	8000fcc <led_apply_config+0x54>
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <led_apply_config+0x54>
}
 8000fc0:	883b      	ldrh	r3, [r7, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffa5 	bl	8000f14 <led_force_blink>
 8000fca:	e002      	b.n	8000fd2 <led_apply_config+0x5a>

static void led_force_on(led_channel_state_t *led) {
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff5f 	bl	8000e90 <led_force_off>
    if (!led)
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd8:	b662      	cpsie	i
}
 8000fda:	e000      	b.n	8000fde <led_apply_config+0x66>
    if (!led)
 8000fdc:	bf00      	nop
    if (st != HAL_OK) {
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
    }
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <led_pwm_start>:
    led_gpio_config_output(led);
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
    led->mode = LED_MODE_ON;
 8000fea:	2100      	movs	r1, #0
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <led_pwm_start+0x1c>)
 8000fee:	f006 fcb9 	bl	8007964 <HAL_TIM_PWM_Start>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    led->frequency_centi_hz = 0u;
    led->is_on = 1u;
}

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
    if (!led || freq_centi_hz == 0u)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
        return;
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000b64 	.word	0x20000b64

08001004 <led_service_init>:
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
    if (period_ticks < 2u)
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	@ 0x40
 8001008:	af02      	add	r7, sp, #8
        period_ticks = 2u;
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
    if (period_ticks > (uint32_t)0x10000u)
 800101a:	2302      	movs	r3, #2
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
        period_ticks = 0x10000u;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t pulse_ticks = period_ticks / 2u;
 8001026:	230e      	movs	r3, #14
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    led_gpio_config_pwm(led);
    led_apply_pwm(period_ticks, pulse_ticks);
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
 800102e:	e038      	b.n	80010a2 <led_service_init+0x9e>
    if (led_pwm_start() != HAL_OK) {
 8001030:	494d      	ldr	r1, [pc, #308]	@ (8001168 <led_service_init+0x164>)
 8001032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3304      	adds	r3, #4
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	623b      	str	r3, [r7, #32]
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001044:	4948      	ldr	r1, [pc, #288]	@ (8001168 <led_service_init+0x164>)
 8001046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f107 0220 	add.w	r2, r7, #32
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f002 ff38 	bl	8003ed0 <HAL_GPIO_Init>
        led_force_off(led);
 8001060:	4941      	ldr	r1, [pc, #260]	@ (8001168 <led_service_init+0x164>)
 8001062:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3306      	adds	r3, #6
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
        return;
 8001074:	493c      	ldr	r1, [pc, #240]	@ (8001168 <led_service_init+0x164>)
 8001076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	3308      	adds	r3, #8
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
    }
 8001088:	4937      	ldr	r1, [pc, #220]	@ (8001168 <led_service_init+0x164>)
 800108a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3307      	adds	r3, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    led_apply_pwm(period_ticks, pulse_ticks);
 800109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109e:	3301      	adds	r3, #1
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0c3      	beq.n	8001030 <led_service_init+0x2c>
    led->mode = LED_MODE_BLINK;
    led->frequency_centi_hz = freq_centi_hz;
    led->is_on = 0u;
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <led_service_init+0x168>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a30      	ldr	r2, [pc, #192]	@ (8001170 <led_service_init+0x16c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d001      	beq.n	80010b6 <led_service_init+0xb2>
}
 80010b2:	f001 ff4b 	bl	8002f4c <MX_TIM15_Init>

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
    if (!led)
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <led_service_init+0x168>)
 80010b8:	f006 fb40 	bl	800773c <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00c      	beq.n	80010dc <led_service_init+0xd8>
        return;
 80010c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001174 <led_service_init+0x170>)
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <led_service_init+0x174>)
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <led_service_init+0x178>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	f06f 0203 	mvn.w	r2, #3
 80010d2:	2164      	movs	r1, #100	@ 0x64
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 f9b9 	bl	800144c <log_event_auto>

 80010da:	e041      	b.n	8001160 <led_service_init+0x15c>
    if (mode > LED_MODE_BLINK)
        mode = LED_MODE_OFF;

 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]
    uint32_t primask = __get_PRIMASK();
 80010ee:	2360      	movs	r3, #96	@ 0x60
 80010f0:	607b      	str	r3, [r7, #4]
    __disable_irq();

 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
    if (mode == LED_MODE_ON) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
        led_force_on(led);
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
        led_force_blink(led, freq_centi_hz);
    } else {
        led_force_off(led);
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
    }
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]

 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    if (primask == 0u) {
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
        __enable_irq();
    }
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	4816      	ldr	r0, [pc, #88]	@ (800116c <led_service_init+0x168>)
 8001112:	f007 f8a1 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00c      	beq.n	8001136 <led_service_init+0x132>
}
 800111c:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <led_service_init+0x170>)
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <led_service_init+0x17c>)
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <led_service_init+0x178>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4613      	mov	r3, r2
 8001128:	f06f 0203 	mvn.w	r2, #3
 800112c:	2164      	movs	r1, #100	@ 0x64
 800112e:	2001      	movs	r0, #1
 8001130:	f000 f98c 	bl	800144c <log_event_auto>

 8001134:	e014      	b.n	8001160 <led_service_init+0x15c>
static HAL_StatusTypeDef led_pwm_start(void) {
    if (g_pwm_running)
        return HAL_OK;
 8001136:	f7ff ff55 	bl	8000fe4 <led_pwm_start>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00c      	beq.n	800115a <led_service_init+0x156>

 8001140:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <led_service_init+0x170>)
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <led_service_init+0x180>)
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <led_service_init+0x178>)
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4613      	mov	r3, r2
 800114c:	f06f 0203 	mvn.w	r2, #3
 8001150:	2164      	movs	r1, #100	@ 0x64
 8001152:	2001      	movs	r0, #1
 8001154:	f000 f97a 	bl	800144c <log_event_auto>
    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001158:	e002      	b.n	8001160 <led_service_init+0x15c>
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800115a:	4803      	ldr	r0, [pc, #12]	@ (8001168 <led_service_init+0x164>)
 800115c:	f7ff fe98 	bl	8000e90 <led_force_off>
    }
 8001160:	3738      	adds	r7, #56	@ 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000
 800116c:	20000b64 	.word	0x20000b64
 8001170:	40014000 	.word	0x40014000
 8001174:	0800c19c 	.word	0x0800c19c
 8001178:	0800c1dc 	.word	0x0800c1dc
 800117c:	0800c200 	.word	0x0800c200
 8001180:	0800c208 	.word	0x0800c208
 8001184:	0800c230 	.word	0x0800c230

08001188 <led_on_led_ctrl>:
#endif
    if (st == HAL_OK) {
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	b097      	sub	sp, #92	@ 0x5c
 800118c:	af0a      	add	r7, sp, #40	@ 0x28
 800118e:	6178      	str	r0, [r7, #20]
 8001190:	6139      	str	r1, [r7, #16]
        g_pwm_running = 1u;
    }
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80d5 	beq.w	8001344 <led_on_led_ctrl+0x1bc>
    return st;
}
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d902      	bls.n	80011a6 <led_on_led_ctrl+0x1e>
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80011a4:	d90e      	bls.n	80011c4 <led_on_led_ctrl+0x3c>

 80011a6:	4a69      	ldr	r2, [pc, #420]	@ (800134c <led_on_led_ctrl+0x1c4>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b68      	ldr	r3, [pc, #416]	@ (8001350 <led_on_led_ctrl+0x1c8>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	4b68      	ldr	r3, [pc, #416]	@ (8001354 <led_on_led_ctrl+0x1cc>)
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	f06f 0203 	mvn.w	r2, #3
 80011ba:	2164      	movs	r1, #100	@ 0x64
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 f945 	bl	800144c <log_event_auto>
static HAL_StatusTypeDef led_pwm_stop(void) {
 80011c2:	e0c0      	b.n	8001346 <led_on_led_ctrl+0x1be>
    if (!g_pwm_running)
        return HAL_OK;
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	461a      	mov	r2, r3
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff fa4b 	bl	8000668 <led_ctrl_req_decoder>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

 80011d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00f      	beq.n	8001200 <led_on_led_ctrl+0x78>
    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80011e0:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80011e4:	4959      	ldr	r1, [pc, #356]	@ (800134c <led_on_led_ctrl+0x1c4>)
 80011e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001358 <led_on_led_ctrl+0x1d0>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4b5a      	ldr	r3, [pc, #360]	@ (800135c <led_on_led_ctrl+0x1d4>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	2164      	movs	r1, #100	@ 0x64
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 f927 	bl	800144c <log_event_auto>
#if defined(TIM_CHANNEL_1N)
 80011fe:	e0a2      	b.n	8001346 <led_on_led_ctrl+0x1be>
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (st == HAL_OK) {
 800120c:	2300      	movs	r3, #0
 800120e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        __HAL_TIM_DISABLE(&htim15);
 8001212:	2300      	movs	r3, #0
 8001214:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        g_pwm_running = 0u;
    }
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800121c:	e030      	b.n	8001280 <led_on_led_ctrl+0xf8>
    return st;
 800121e:	2301      	movs	r3, #1
 8001220:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
}
 8001224:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001228:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800122c:	4013      	ands	r3, r2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d021      	beq.n	8001278 <led_on_led_ctrl+0xf0>

void led_service_init(void) {
    g_pwm_running = 0u;
 8001234:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001238:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800123c:	4313      	orrs	r3, r2
 800123e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

 8001242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4a44      	ldr	r2, [pc, #272]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 800124e:	1898      	adds	r0, r3, r2
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3320      	adds	r3, #32
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	4413      	add	r3, r2
 800125c:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	3320      	adds	r3, #32
 8001266:	f107 0210 	add.w	r2, r7, #16
 800126a:	4413      	add	r3, r2
 800126c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001270:	461a      	mov	r2, r3
 8001272:	f7ff fe81 	bl	8000f78 <led_apply_config>
 8001276:	e000      	b.n	800127a <led_on_led_ctrl+0xf2>

 8001278:	bf00      	nop
    }
 800127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127c:	3301      	adds	r3, #1
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0cb      	beq.n	800121e <led_on_led_ctrl+0x96>
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
        led_gpio_config_output(&g_leds[i]);
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001286:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800128a:	43db      	mvns	r3, r3
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001292:	4013      	ands	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <led_on_led_ctrl+0x11a>
        g_leds[i].mode = LED_MODE_OFF;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012a0:	e00a      	b.n	80012b8 <led_on_led_ctrl+0x130>
        g_leds[i].frequency_centi_hz = 0u;
 80012a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <led_on_led_ctrl+0x130>
 80012aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <led_on_led_ctrl+0x130>
        g_leds[i].is_on = 0u;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    if (htim15.Instance != TIM15) {
 80012b8:	7f3b      	ldrb	r3, [r7, #28]
 80012ba:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80012be:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcd6 	bl	8000c74 <led_push_response>
        MX_TIM15_Init();
    }
 80012c8:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80012cc:	4e1f      	ldr	r6, [pc, #124]	@ (800134c <led_on_led_ctrl+0x1c4>)
 80012ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012d2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 80012de:	891b      	ldrh	r3, [r3, #8]
 80012e0:	4820      	ldr	r0, [pc, #128]	@ (8001364 <led_on_led_ctrl+0x1dc>)
 80012e2:	fba0 0303 	umull	r0, r3, r0, r3
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 80012ee:	891b      	ldrh	r3, [r3, #8]
 80012f0:	481c      	ldr	r0, [pc, #112]	@ (8001364 <led_on_led_ctrl+0x1dc>)
 80012f2:	fba0 5003 	umull	r5, r0, r0, r3
 80012f6:	0940      	lsrs	r0, r0, #5
 80012f8:	2564      	movs	r5, #100	@ 0x64
 80012fa:	fb05 f000 	mul.w	r0, r5, r0
 80012fe:	1a1b      	subs	r3, r3, r0
 8001300:	b29b      	uxth	r3, r3
 8001302:	461d      	mov	r5, r3
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 8001306:	79db      	ldrb	r3, [r3, #7]
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <led_on_led_ctrl+0x1e0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	3301      	adds	r3, #1
 8001312:	4815      	ldr	r0, [pc, #84]	@ (8001368 <led_on_led_ctrl+0x1e0>)
 8001314:	6800      	ldr	r0, [r0, #0]
 8001316:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001318:	9009      	str	r0, [sp, #36]	@ 0x24
 800131a:	9308      	str	r3, [sp, #32]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	9007      	str	r0, [sp, #28]
 8001320:	9506      	str	r5, [sp, #24]
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	9005      	str	r0, [sp, #20]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	9304      	str	r3, [sp, #16]
 800132a:	9103      	str	r1, [sp, #12]
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <led_on_led_ctrl+0x1e4>)
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <led_on_led_ctrl+0x1e8>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4633      	mov	r3, r6
 8001338:	4622      	mov	r2, r4
 800133a:	2102      	movs	r1, #2
 800133c:	2001      	movs	r0, #1
 800133e:	f000 f885 	bl	800144c <log_event_auto>
 8001342:	e000      	b.n	8001346 <led_on_led_ctrl+0x1be>
    return st;
 8001344:	bf00      	nop
        return;
    }

    TIM_OC_InitTypeDef oc = {0};
    oc.OCMode = TIM_OCMODE_PWM1;
#if LED_ACTIVE_HIGH
 8001346:	3734      	adds	r7, #52	@ 0x34
 8001348:	46bd      	mov	sp, r7
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134c:	0800c19c 	.word	0x0800c19c
 8001350:	0800c250 	.word	0x0800c250
 8001354:	0800c26c 	.word	0x0800c26c
 8001358:	0800c270 	.word	0x0800c270
 800135c:	0800c294 	.word	0x0800c294
 8001360:	20000000 	.word	0x20000000
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	20000b64 	.word	0x20000b64
 800136c:	0800c29c 	.word	0x0800c29c
 8001370:	0800c2ec 	.word	0x0800c2ec

08001374 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <log_service_init+0x18>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6898      	ldr	r0, [r3, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	2202      	movs	r2, #2
 8001382:	2100      	movs	r1, #0
 8001384:	f009 fe92 	bl	800b0ac <setvbuf>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000028 	.word	0x20000028

08001390 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	460b      	mov	r3, r1
 800139e:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80013a0:	79f9      	ldrb	r1, [r7, #7]
 80013a2:	79ba      	ldrb	r2, [r7, #6]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <log_event_ids+0x24>)
 80013a8:	f009 fe6e 	bl	800b088 <iprintf>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800c2f4 	.word	0x0800c2f4

080013b8 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <log_event_names+0x16>
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <log_event_names+0x40>)
 80013cc:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <log_event_names+0x20>
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <log_event_names+0x40>)
 80013d6:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <log_event_names+0x2a>
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <log_event_names+0x40>)
 80013e0:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <log_event_names+0x44>)
 80013ea:	f009 fe4d 	bl	800b088 <iprintf>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800c314 	.word	0x0800c314
 80013fc:	0800c318 	.word	0x0800c318

08001400 <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d002      	beq.n	8001418 <_write+0x18>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d111      	bne.n	800143c <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	b29a      	uxth	r2, r3
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	4809      	ldr	r0, [pc, #36]	@ (8001448 <_write+0x48>)
 8001424:	f008 fdd2 	bl	8009fcc <HAL_UART_Transmit>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <_write+0x36>
        return len;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	e004      	b.n	8001440 <_write+0x40>
      else
        return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e001      	b.n	8001440 <_write+0x40>
    }
    return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000bb0 	.word	0x20000bb0

0800144c <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 800144c:	b580      	push	{r7, lr}
 800144e:	b0a8      	sub	sp, #160	@ 0xa0
 8001450:	af00      	add	r7, sp, #0
 8001452:	60ba      	str	r2, [r7, #8]
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	460b      	mov	r3, r1
 800145c:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 800145e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <log_event_auto+0x3c>
 8001466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001470:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001474:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001476:	f107 0018 	add.w	r0, r7, #24
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	f009 ff39 	bl	800b2f8 <vsniprintf>
    if(fmt && fmt[0]){
 8001486:	e003      	b.n	8001490 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001488:	233f      	movs	r3, #63	@ 0x3f
 800148a:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 800148c:	2300      	movs	r3, #0
 800148e:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <log_event_auto+0x4e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e000      	b.n	800149c <log_event_auto+0x50>
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <log_event_auto+0x84>)
 800149c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 80014a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <log_event_auto+0x62>
 80014a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014ac:	e000      	b.n	80014b0 <log_event_auto+0x64>
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <log_event_auto+0x84>)
 80014b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80014bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <log_event_auto+0x88>)
 80014c2:	f009 fde1 	bl	800b088 <iprintf>
}
 80014c6:	bf00      	nop
 80014c8:	37a0      	adds	r7, #160	@ 0xa0
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	0800c314 	.word	0x0800c314
 80014d4:	0800c318 	.word	0x0800c318

080014d8 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014fe:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 8001500:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <motion_on_move_queue_add+0x54>)
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <motion_on_move_queue_add+0x50>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <motion_on_move_queue_add+0x58>)
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <motion_on_move_queue_add+0x5c>)
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	2200      	movs	r2, #0
 8001516:	2101      	movs	r1, #1
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff ff97 	bl	800144c <log_event_auto>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000b4 	.word	0x200000b4
 800152c:	0800c33c 	.word	0x0800c33c
 8001530:	0800c354 	.word	0x0800c354
 8001534:	0800c364 	.word	0x0800c364

08001538 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af04      	add	r7, sp, #16
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 8001542:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <motion_on_move_queue_status+0x3c>)
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <motion_on_move_queue_status+0x40>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <motion_on_move_queue_status+0x40>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	9303      	str	r3, [sp, #12]
 8001554:	9102      	str	r1, [sp, #8]
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <motion_on_move_queue_status+0x44>)
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <motion_on_move_queue_status+0x48>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4613      	mov	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff ff71 	bl	800144c <log_event_auto>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800c33c 	.word	0x0800c33c
 8001578:	200000b4 	.word	0x200000b4
 800157c:	0800c370 	.word	0x0800c370
 8001580:	0800c388 	.word	0x0800c388

08001584 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af04      	add	r7, sp, #16
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <motion_on_start_move+0x4c>)
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001598:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <motion_on_start_move+0x4c>)
 800159a:	2202      	movs	r2, #2
 800159c:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800159e:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <motion_on_start_move+0x50>)
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <motion_on_start_move+0x4c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d101      	bne.n	80015ae <motion_on_start_move+0x2a>
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <motion_on_start_move+0x54>)
 80015ac:	e000      	b.n	80015b0 <motion_on_start_move+0x2c>
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <motion_on_start_move+0x58>)
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <motion_on_start_move+0x5c>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <motion_on_start_move+0x60>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4613      	mov	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	2102      	movs	r1, #2
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff ff43 	bl	800144c <log_event_auto>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000b4 	.word	0x200000b4
 80015d4:	0800c33c 	.word	0x0800c33c
 80015d8:	0800c398 	.word	0x0800c398
 80015dc:	0800c3a0 	.word	0x0800c3a0
 80015e0:	0800c348 	.word	0x0800c348
 80015e4:	0800c3a8 	.word	0x0800c3a8

080015e8 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <motion_on_move_end+0x34>)
 80015f4:	2204      	movs	r2, #4
 80015f6:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 80015f8:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <motion_on_move_end+0x38>)
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <motion_on_move_end+0x3c>)
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <motion_on_move_end+0x40>)
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <motion_on_move_end+0x44>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4613      	mov	r3, r2
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff ff1d 	bl	800144c <log_event_auto>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000b4 	.word	0x200000b4
 8001620:	0800c33c 	.word	0x0800c33c
 8001624:	0800c3b4 	.word	0x0800c3b4
 8001628:	0800c348 	.word	0x0800c348
 800162c:	0800c3c0 	.word	0x0800c3c0

08001630 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <probe_on_move_probe_level+0x2c>)
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <probe_on_move_probe_level+0x30>)
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <probe_on_move_probe_level+0x34>)
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <probe_on_move_probe_level+0x38>)
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	2200      	movs	r2, #0
 800164c:	2101      	movs	r1, #1
 800164e:	2004      	movs	r0, #4
 8001650:	f7ff fefc 	bl	800144c <log_event_auto>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	0800c3cc 	.word	0x0800c3cc
 8001660:	0800c3e4 	.word	0x0800c3e4
 8001664:	0800c3d8 	.word	0x0800c3d8
 8001668:	0800c3f4 	.word	0x0800c3f4

0800166c <test_spi_service_init>:
#include <string.h>
#include "Services/Test/test_spi_service.h"
#include "Protocol/frame_defs.h"
#include "app.h"

 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
#define TEST_SPI_HELLO_SUFFIX_LEN 4u
#define TEST_SPI_HELLO_MIN_REQ_LEN 7u
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <test_spi_send_hello>:

static const uint8_t k_test_spi_hello_suffix[TEST_SPI_HELLO_SUFFIX_LEN] = {
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
    'e', 'l', 'l', 'o'
};
 8001680:	23ab      	movs	r3, #171	@ 0xab
 8001682:	703b      	strb	r3, [r7, #0]

 8001684:	2368      	movs	r3, #104	@ 0x68
 8001686:	707b      	strb	r3, [r7, #1]
void test_spi_service_init(void) {
 8001688:	2365      	movs	r3, #101	@ 0x65
 800168a:	70bb      	strb	r3, [r7, #2]
    // Nada a inicializar por ora
 800168c:	236c      	movs	r3, #108	@ 0x6c
 800168e:	70fb      	strb	r3, [r7, #3]
}
 8001690:	236c      	movs	r3, #108	@ 0x6c
 8001692:	713b      	strb	r3, [r7, #4]

 8001694:	236f      	movs	r3, #111	@ 0x6f
 8001696:	717b      	strb	r3, [r7, #5]
int test_spi_send_hello(void) {
 8001698:	2354      	movs	r3, #84	@ 0x54
 800169a:	71bb      	strb	r3, [r7, #6]
    uint8_t frame[TEST_SPI_HELLO_MIN_REQ_LEN];
 800169c:	463b      	mov	r3, r7
 800169e:	2107      	movs	r1, #7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fa03 	bl	8001aac <app_resp_push>
 80016a6:	4603      	mov	r3, r0
    frame[0] = RESP_HEADER;          // 0xAB
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7ff ff0a 	bl	80014d8 <motion_on_move_queue_add>
	motion_on_move_queue_add(f, l);
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <h_move_queue_status>:
}
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	68b8      	ldr	r0, [r7, #8]
 80016dc:	f7ff ff2c 	bl	8001538 <motion_on_move_queue_status>
	motion_on_move_queue_status(f, l);
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <h_start_move>:
}
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f7ff ff44 	bl	8001584 <motion_on_start_move>
	motion_on_start_move(f, l);
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <h_move_home>:
}
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	68b8      	ldr	r0, [r7, #8]
 8001714:	f7ff fa90 	bl	8000c38 <home_on_move_home>
	home_on_move_home(f, l);
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <h_move_probe_level>:
}
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	68b8      	ldr	r0, [r7, #8]
 8001730:	f7ff ff7e 	bl	8001630 <probe_on_move_probe_level>
	probe_on_move_probe_level(f, l);
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <h_move_end>:
}
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f7ff ff4c 	bl	80015e8 <motion_on_move_end>
	motion_on_move_end(f, l);
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <h_led_ctrl>:
}
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f7ff fd0e 	bl	8001188 <led_on_led_ctrl>
	led_on_led_ctrl(f, l);
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <h_fpga_status>:
}
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
        (void) r;
        (void) f;
        (void) l; /* opcional */
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <services_register_handlers>:
}

 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d018      	beq.n	80017cc <services_register_handlers+0x40>
        (void) r;
        test_spi_on_hello(f, l);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0e      	ldr	r2, [pc, #56]	@ (80017d8 <services_register_handlers+0x4c>)
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <services_register_handlers+0x50>)
 80017a4:	605a      	str	r2, [r3, #4]

 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <services_register_handlers+0x54>)
 80017aa:	609a      	str	r2, [r3, #8]
void services_register_handlers(router_handlers_t *h) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <services_register_handlers+0x58>)
 80017b0:	60da      	str	r2, [r3, #12]
        if (!h)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <services_register_handlers+0x5c>)
 80017b6:	611a      	str	r2, [r3, #16]
                return;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <services_register_handlers+0x60>)
 80017bc:	615a      	str	r2, [r3, #20]
        h->on_move_queue_add = h_move_queue_add;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <services_register_handlers+0x64>)
 80017c2:	619a      	str	r2, [r3, #24]
	h->on_move_queue_status = h_move_queue_status;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0b      	ldr	r2, [pc, #44]	@ (80017f4 <services_register_handlers+0x68>)
 80017c8:	61da      	str	r2, [r3, #28]
 80017ca:	e000      	b.n	80017ce <services_register_handlers+0x42>
        (void) r;
 80017cc:	bf00      	nop
	h->on_start_move = h_start_move;
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	080016b1 	.word	0x080016b1
 80017dc:	080016cd 	.word	0x080016cd
 80017e0:	080016e9 	.word	0x080016e9
 80017e4:	08001705 	.word	0x08001705
 80017e8:	08001721 	.word	0x08001721
 80017ec:	0800173d 	.word	0x0800173d
 80017f0:	08001759 	.word	0x08001759
 80017f4:	08001775 	.word	0x08001775

080017f8 <app_spi_clean_dcache>:
    uintptr_t start = app_spi_cache_align_down((uintptr_t)addr);
    uintptr_t end = app_spi_cache_align_up((uintptr_t)addr + (uintptr_t)len);
    SCB_CleanDCache_by_Addr((uint32_t *)start, (int32_t)(end - start));
}
#else
static void app_spi_clean_dcache(void *addr, uint32_t len) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
    (void)addr;
    (void)len;
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <app_spi_invalidate_dcache>:
    uintptr_t start = app_spi_cache_align_down((uintptr_t)addr);
    uintptr_t end = app_spi_cache_align_up((uintptr_t)addr + (uintptr_t)len);
    SCB_InvalidateDCache_by_Addr((uint32_t *)start, (int32_t)(end - start));
}
#else
static void app_spi_invalidate_dcache(void *addr, uint32_t len) {
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
    (void)addr;
    (void)len;
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <app_init>:
    return (addr + ((uintptr_t)APP_SPI_DCACHE_LINE_SIZE - 1u)) &
           ~((uintptr_t)APP_SPI_DCACHE_LINE_SIZE - 1u);
}
#endif

void app_init(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af04      	add	r7, sp, #16
    led_service_init();
 800182a:	f7ff fbeb 	bl	8001004 <led_service_init>
    log_service_init();
 800182e:	f7ff fda1 	bl	8001374 <log_service_init>
    test_spi_service_init();
 8001832:	f7ff ff1b 	bl	800166c <test_spi_service_init>
    LOGT_THIS(LOG_STATE_START, PROTO_OK, "start", "ready");
 8001836:	4a1e      	ldr	r2, [pc, #120]	@ (80018b0 <app_init+0x8c>)
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <app_init+0x90>)
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <app_init+0x94>)
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <app_init+0x98>)
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fdfe 	bl	800144c <log_event_auto>

    g_resp_fifo = resp_fifo_create();
 8001850:	f7ff f94b 	bl	8000aea <resp_fifo_create>
 8001854:	4603      	mov	r3, r0
 8001856:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <app_init+0x9c>)
 8001858:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 800185a:	2224      	movs	r2, #36	@ 0x24
 800185c:	2100      	movs	r1, #0
 800185e:	4819      	ldr	r0, [pc, #100]	@ (80018c4 <app_init+0xa0>)
 8001860:	f009 fd58 	bl	800b314 <memset>
    services_register_handlers(&g_handlers);
 8001864:	4817      	ldr	r0, [pc, #92]	@ (80018c4 <app_init+0xa0>)
 8001866:	f7ff ff91 	bl	800178c <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <app_init+0x9c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a15      	ldr	r2, [pc, #84]	@ (80018c4 <app_init+0xa0>)
 8001870:	4619      	mov	r1, r3
 8001872:	4815      	ldr	r0, [pc, #84]	@ (80018c8 <app_init+0xa4>)
 8001874:	f7fe ffda 	bl	800082c <router_init>

    app_spi_queue_reset();
 8001878:	f000 f938 	bl	8001aec <app_spi_queue_reset>
    g_spi_next_status = APP_SPI_STATUS_READY;
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <app_init+0xa8>)
 800187e:	22a5      	movs	r2, #165	@ 0xa5
 8001880:	701a      	strb	r2, [r3, #0]
    (void)app_spi_prime_tx_buffer(g_spi_next_status);
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <app_init+0xa8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f94f 	bl	8001b2c <app_spi_prime_tx_buffer>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, g_spi_tx_dma_buf, g_spi_rx_dma_buf,
 800188e:	232a      	movs	r3, #42	@ 0x2a
 8001890:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <app_init+0xac>)
 8001892:	4910      	ldr	r1, [pc, #64]	@ (80018d4 <app_init+0xb0>)
 8001894:	4810      	ldr	r0, [pc, #64]	@ (80018d8 <app_init+0xb4>)
 8001896:	f005 f8cd 	bl	8006a34 <HAL_SPI_TransmitReceive_DMA>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <app_init+0x82>
                                    (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_need_restart = 1u;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <app_init+0xb8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
    }

    (void)test_spi_send_hello();
 80018a6:	f7ff fee8 	bl	800167a <test_spi_send_hello>
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800c408 	.word	0x0800c408
 80018b4:	0800c40c 	.word	0x0800c40c
 80018b8:	0800c414 	.word	0x0800c414
 80018bc:	0800c418 	.word	0x0800c418
 80018c0:	20000128 	.word	0x20000128
 80018c4:	20000104 	.word	0x20000104
 80018c8:	200000bc 	.word	0x200000bc
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	2000012c 	.word	0x2000012c
 80018d4:	20000158 	.word	0x20000158
 80018d8:	200008f0 	.word	0x200008f0
 80018dc:	20000182 	.word	0x20000182

080018e0 <app_poll>:

void app_poll(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0a0      	sub	sp, #128	@ 0x80
 80018e4:	af04      	add	r7, sp, #16
    app_spi_try_commit_pending_to_active();
 80018e6:	f000 f99d 	bl	8001c24 <app_spi_try_commit_pending_to_active>

    app_spi_frame_t frame;
    while (app_spi_queue_pop(&frame) == 0) {
 80018ea:	e008      	b.n	80018fe <app_poll+0x1e>
        router_feed_bytes(&g_router, frame.data, frame.len);
 80018ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80018f0:	461a      	mov	r2, r3
 80018f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018f6:	4619      	mov	r1, r3
 80018f8:	4847      	ldr	r0, [pc, #284]	@ (8001a18 <app_poll+0x138>)
 80018fa:	f7ff f8ab 	bl	8000a54 <router_feed_bytes>
    while (app_spi_queue_pop(&frame) == 0) {
 80018fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fb70 	bl	8001fe8 <app_spi_queue_pop>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <app_poll+0xc>
    }

    app_spi_try_commit_pending_to_active();
 800190e:	f000 f989 	bl	8001c24 <app_spi_try_commit_pending_to_active>

    if (g_resp_fifo && !g_spi_tx_pending_ready) {
 8001912:	4b42      	ldr	r3, [pc, #264]	@ (8001a1c <app_poll+0x13c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d04d      	beq.n	80019b6 <app_poll+0xd6>
 800191a:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <app_poll+0x140>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d148      	bne.n	80019b6 <app_poll+0xd6>
        uint8_t out[APP_SPI_DMA_BUF_LEN];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 8001924:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <app_poll+0x13c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1d39      	adds	r1, r7, #4
 800192a:	222a      	movs	r2, #42	@ 0x2a
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f93e 	bl	8000bae <resp_fifo_pop>
 8001932:	66b8      	str	r0, [r7, #104]	@ 0x68
        if (n > 0 && n <= (int)APP_SPI_DMA_BUF_LEN) {
 8001934:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001936:	2b00      	cmp	r3, #0
 8001938:	dd29      	ble.n	800198e <app_poll+0xae>
 800193a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800193c:	2b2a      	cmp	r3, #42	@ 0x2a
 800193e:	dc26      	bgt.n	800198e <app_poll+0xae>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001940:	f3ef 8310 	mrs	r3, PRIMASK
 8001944:	65fb      	str	r3, [r7, #92]	@ 0x5c
  return(result);
 8001946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
            uint32_t primask = __get_PRIMASK();
 8001948:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("cpsid i" : : : "memory");
 800194a:	b672      	cpsid	i
}
 800194c:	bf00      	nop
            __disable_irq();
            memset(g_spi_tx_pending_buf, 0, APP_SPI_DMA_BUF_LEN);
 800194e:	222a      	movs	r2, #42	@ 0x2a
 8001950:	2100      	movs	r1, #0
 8001952:	4834      	ldr	r0, [pc, #208]	@ (8001a24 <app_poll+0x144>)
 8001954:	f009 fcde 	bl	800b314 <memset>
            uint16_t pad = (uint16_t)(APP_SPI_DMA_BUF_LEN - (uint16_t)n);
 8001958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800195a:	b29b      	uxth	r3, r3
 800195c:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8001960:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            memcpy(&g_spi_tx_pending_buf[pad], out, (uint32_t)n);
 8001964:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001968:	4a2e      	ldr	r2, [pc, #184]	@ (8001a24 <app_poll+0x144>)
 800196a:	4413      	add	r3, r2
 800196c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800196e:	1d39      	adds	r1, r7, #4
 8001970:	4618      	mov	r0, r3
 8001972:	f009 fd5a 	bl	800b42a <memcpy>
            g_spi_tx_pending_len = (uint16_t)APP_SPI_DMA_BUF_LEN;
 8001976:	4b2c      	ldr	r3, [pc, #176]	@ (8001a28 <app_poll+0x148>)
 8001978:	222a      	movs	r2, #42	@ 0x2a
 800197a:	801a      	strh	r2, [r3, #0]
            g_spi_tx_pending_ready = 1u;
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <app_poll+0x140>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
            if (primask == 0u) {
 8001982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001984:	2b00      	cmp	r3, #0
 8001986:	d115      	bne.n	80019b4 <app_poll+0xd4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001988:	b662      	cpsie	i
}
 800198a:	bf00      	nop
        if (n > 0 && n <= (int)APP_SPI_DMA_BUF_LEN) {
 800198c:	e012      	b.n	80019b4 <app_poll+0xd4>
                __enable_irq();
            }
        } else if (n == PROTO_ERR_RANGE) {
 800198e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001990:	f113 0f04 	cmn.w	r3, #4
 8001994:	d10f      	bne.n	80019b6 <app_poll+0xd6>
            LOGT_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "spi_tx", "resp too large for dma frame");
 8001996:	4a25      	ldr	r2, [pc, #148]	@ (8001a2c <app_poll+0x14c>)
 8001998:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <app_poll+0x150>)
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <app_poll+0x154>)
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <app_poll+0x158>)
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	f06f 0203 	mvn.w	r2, #3
 80019aa:	2164      	movs	r1, #100	@ 0x64
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fd4d 	bl	800144c <log_event_auto>
 80019b2:	e000      	b.n	80019b6 <app_poll+0xd6>
        if (n > 0 && n <= (int)APP_SPI_DMA_BUF_LEN) {
 80019b4:	bf00      	nop
        }
    }

    app_spi_try_commit_pending_to_active();
 80019b6:	f000 f935 	bl	8001c24 <app_spi_try_commit_pending_to_active>

    app_spi_try_restart_dma();
 80019ba:	f000 fa3b 	bl	8001e34 <app_spi_try_restart_dma>

    if (g_spi_rx_error != APP_SPI_RX_STATUS_NONE) {
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <app_poll+0x15c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d022      	beq.n	8001a0e <app_poll+0x12e>
        uint8_t reason = g_spi_rx_error;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <app_poll+0x15c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        g_spi_rx_error = APP_SPI_RX_STATUS_NONE;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <app_poll+0x15c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
        const char *tag = "overflow reason=invalid_frame";
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <app_poll+0x160>)
 80019d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if (reason == APP_SPI_RX_OVERFLOW_QUEUE_FULL) {
 80019da:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <app_poll+0x108>
            tag = "overflow reason=queue_full";
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <app_poll+0x164>)
 80019e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019e6:	e005      	b.n	80019f4 <app_poll+0x114>
        } else if (reason != APP_SPI_RX_OVERFLOW_INVALID_FRAME) {
 80019e8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d001      	beq.n	80019f4 <app_poll+0x114>
            tag = "overflow reason=unknown";
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <app_poll+0x168>)
 80019f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        LOGT_THIS(LOG_STATE_ERROR, PROTO_WARN, "spi_rx", tag);
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <app_poll+0x14c>)
 80019f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <app_poll+0x154>)
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <app_poll+0x16c>)
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	2201      	movs	r2, #1
 8001a06:	2164      	movs	r1, #100	@ 0x64
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fd1f 	bl	800144c <log_event_auto>
    }
}
 8001a0e:	bf00      	nop
 8001a10:	3770      	adds	r7, #112	@ 0x70
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000bc 	.word	0x200000bc
 8001a1c:	20000128 	.word	0x20000128
 8001a20:	200008ec 	.word	0x200008ec
 8001a24:	200008c0 	.word	0x200008c0
 8001a28:	200008ea 	.word	0x200008ea
 8001a2c:	0800c408 	.word	0x0800c408
 8001a30:	0800c420 	.word	0x0800c420
 8001a34:	0800c414 	.word	0x0800c414
 8001a38:	0800c440 	.word	0x0800c440
 8001a3c:	200008bf 	.word	0x200008bf
 8001a40:	0800c448 	.word	0x0800c448
 8001a44:	0800c468 	.word	0x0800c468
 8001a48:	0800c484 	.word	0x0800c484
 8001a4c:	0800c49c 	.word	0x0800c49c

08001a50 <app_on_spi_txrx_half_complete>:

void app_on_spi_txrx_half_complete(SPI_HandleTypeDef *h) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <app_on_spi_txrx_half_complete+0x1e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <app_on_spi_txrx_half_complete+0x2c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d102      	bne.n	8001a6e <app_on_spi_txrx_half_complete+0x1e>
        /* Reserva o handshake para sinalizar BUSY até concluir o tratamento atual */
        g_spi_next_status = APP_SPI_STATUS_BUSY;
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <app_on_spi_txrx_half_complete+0x30>)
 8001a6a:	225a      	movs	r2, #90	@ 0x5a
 8001a6c:	701a      	strb	r2, [r3, #0]
    }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <app_on_spi_txrx_complete>:

void app_on_spi_txrx_complete(SPI_HandleTypeDef *h) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <app_on_spi_txrx_complete+0x1c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <app_on_spi_txrx_complete+0x24>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <app_on_spi_txrx_complete+0x1c>
        app_spi_handle_txrx_complete();
 8001a9c:	f000 fafe 	bl	800209c <app_spi_handle_txrx_complete>
    }
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40013000 	.word	0x40013000

08001aac <app_resp_push>:

void app_on_spi_tx_complete(SPI_HandleTypeDef *h) {
    (void)h;
}

int app_resp_push(const uint8_t *frame, uint32_t len) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0) {
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <app_resp_push+0x3c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <app_resp_push+0x1e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <app_resp_push+0x1e>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <app_resp_push+0x24>
        return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e007      	b.n	8001ae0 <app_resp_push+0x34>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <app_resp_push+0x3c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f814 	bl	8000b06 <resp_fifo_push>
 8001ade:	4603      	mov	r3, r0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000128 	.word	0x20000128

08001aec <app_spi_queue_reset>:

static void app_spi_queue_reset(void) {
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
    __disable_irq();
    g_spi_rx_queue_head = 0u;
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <app_spi_queue_reset+0x30>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_tail = 0u;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <app_spi_queue_reset+0x34>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_count = 0u;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <app_spi_queue_reset+0x38>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
    g_spi_rx_error = APP_SPI_RX_STATUS_NONE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <app_spi_queue_reset+0x3c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b0c:	b662      	cpsie	i
}
 8001b0e:	bf00      	nop
    __enable_irq();
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200008bc 	.word	0x200008bc
 8001b20:	200008bd 	.word	0x200008bd
 8001b24:	200008be 	.word	0x200008be
 8001b28:	200008bf 	.word	0x200008bf

08001b2c <app_spi_prime_tx_buffer>:
 *  - has_pending: flag que sinaliza se há dados pendentes disponíveis para
 *                 transmissão.
 *  - pending_len: quantidade de bytes válidos armazenados no buffer pendente
 *                 que podem ser copiados para o DMA.
 */
static uint8_t app_spi_prime_tx_buffer(uint8_t status) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b096      	sub	sp, #88	@ 0x58
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
    uint8_t pending_copy[APP_SPI_DMA_BUF_LEN];
    uint16_t pending_len = 0u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t has_pending = 0u;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b42:	f3ef 8310 	mrs	r3, PRIMASK
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8001b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    uint32_t primask = __get_PRIMASK();
 8001b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
    __disable_irq();
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001b50:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <app_spi_prime_tx_buffer+0xcc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d018      	beq.n	8001b8c <app_spi_prime_tx_buffer+0x60>
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <app_spi_prime_tx_buffer+0xd0>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <app_spi_prime_tx_buffer+0x60>
        g_spi_tx_pending_len <= APP_SPI_DMA_BUF_LEN) {
 8001b64:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <app_spi_prime_tx_buffer+0xd0>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b6c:	d80e      	bhi.n	8001b8c <app_spi_prime_tx_buffer+0x60>
        pending_len = g_spi_tx_pending_len;
 8001b6e:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <app_spi_prime_tx_buffer+0xd0>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        memcpy(pending_copy, g_spi_tx_pending_buf, pending_len);
 8001b76:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	4920      	ldr	r1, [pc, #128]	@ (8001c00 <app_spi_prime_tx_buffer+0xd4>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f009 fc52 	bl	800b42a <memcpy>
        has_pending = 1u;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    }
    if (primask == 0u) {
 8001b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <app_spi_prime_tx_buffer+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b92:	b662      	cpsie	i
}
 8001b94:	bf00      	nop
        __enable_irq();
    }

    uint8_t primed_status = status;
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    if (has_pending && pending_len > 0u) {
 8001b9c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <app_spi_prime_tx_buffer+0x86>
 8001ba4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <app_spi_prime_tx_buffer+0x86>
         * ciclo (por exemplo, durante o half-transfer do DMA), o fato de já
         * existir um frame pronto indica que estamos aptos a responder.
         * Forçar READY evita que o byte 0 (preenchimento) herde 0x5A e o host
         * interprete erroneamente a resposta como "ocupado" antes do header.
         */
        primed_status = APP_SPI_STATUS_READY;
 8001bac:	23a5      	movs	r3, #165	@ 0xa5
 8001bae:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    }

    app_spi_handshake_prime_args_t args = {
 8001bb2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001bb6:	733b      	strb	r3, [r7, #12]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <app_spi_prime_tx_buffer+0xd8>)
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	232a      	movs	r3, #42	@ 0x2a
 8001bbe:	82bb      	strh	r3, [r7, #20]
        .status_byte = primed_status,
        .tx_buf = g_spi_tx_dma_buf,
        .tx_len = APP_SPI_DMA_BUF_LEN,
        .response_buf = has_pending ? pending_copy : NULL,
 8001bc0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <app_spi_prime_tx_buffer+0xa2>
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	e000      	b.n	8001bd0 <app_spi_prime_tx_buffer+0xa4>
 8001bce:	2300      	movs	r3, #0
    app_spi_handshake_prime_args_t args = {
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001bd6:	83bb      	strh	r3, [r7, #28]
        .response_len = pending_len,
    };

    app_spi_handshake_prime_result_t result = app_spi_handshake_prime(&args);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 face 	bl	800217e <app_spi_handshake_prime>
 8001be2:	4603      	mov	r3, r0
 8001be4:	813b      	strh	r3, [r7, #8]

    app_spi_clean_dcache(g_spi_tx_dma_buf, APP_SPI_DMA_BUF_LEN);
 8001be6:	212a      	movs	r1, #42	@ 0x2a
 8001be8:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <app_spi_prime_tx_buffer+0xd8>)
 8001bea:	f7ff fe05 	bl	80017f8 <app_spi_clean_dcache>
    return result.consumed_response;
 8001bee:	7a7b      	ldrb	r3, [r7, #9]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3758      	adds	r7, #88	@ 0x58
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200008ec 	.word	0x200008ec
 8001bfc:	200008ea 	.word	0x200008ea
 8001c00:	200008c0 	.word	0x200008c0
 8001c04:	20000158 	.word	0x20000158

08001c08 <app_spi_compute_status>:
 *  1. Compara a quantidade de quadros pendentes com a profundidade máxima da
 *     fila.
 *  2. Retorna BUSY quando a fila está cheia para impedir novos envios do
 *     mestre até que os dados sejam processados; caso contrário retorna READY.
 */
static uint8_t app_spi_compute_status(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    return app_spi_handshake_compute_status(g_spi_rx_queue_count,
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <app_spi_compute_status+0x18>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	212a      	movs	r1, #42	@ 0x2a
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fa9d 	bl	8002154 <app_spi_handshake_compute_status>
 8001c1a:	4603      	mov	r3, r0
                                            APP_SPI_RX_QUEUE_DEPTH);
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200008be 	.word	0x200008be

08001c24 <app_spi_try_commit_pending_to_active>:
 *     e higieniza o cache para que o periférico enxergue o conteúdo atualizado.
 *  4. Se o canal estiver desabilitado, apenas sinaliza a necessidade de
 *     reinício para que a rotina regular reprograme o DMA reutilizando o
 *     payload pendente.
 */
static void app_spi_try_commit_pending_to_active(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b098      	sub	sp, #96	@ 0x60
 8001c28:	af00      	add	r7, sp, #0
    uint8_t pending_copy[APP_SPI_DMA_BUF_LEN];
    uint16_t pending_len = 0u;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t should_commit = 0u;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t request_restart = 0u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c40:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    uint32_t primask = __get_PRIMASK();
 8001c44:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("cpsid i" : : : "memory");
 8001c46:	b672      	cpsid	i
}
 8001c48:	bf00      	nop
    __disable_irq();

    DMA_Channel_TypeDef *tx_dma = hdma_spi1_tx.Instance;
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d7c <app_spi_try_commit_pending_to_active+0x158>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t status_byte = g_spi_next_status;
 8001c50:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <app_spi_try_commit_pending_to_active+0x15c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001c58:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <app_spi_try_commit_pending_to_active+0x160>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d035      	beq.n	8001cce <app_spi_try_commit_pending_to_active+0xaa>
 8001c62:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <app_spi_try_commit_pending_to_active+0x164>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d030      	beq.n	8001cce <app_spi_try_commit_pending_to_active+0xaa>
        g_spi_tx_pending_len <= APP_SPI_DMA_BUF_LEN && tx_dma != NULL) {
 8001c6c:	4b46      	ldr	r3, [pc, #280]	@ (8001d88 <app_spi_try_commit_pending_to_active+0x164>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c74:	d82b      	bhi.n	8001cce <app_spi_try_commit_pending_to_active+0xaa>
        g_spi_tx_pending_len <= APP_SPI_DMA_BUF_LEN && tx_dma != NULL) {
 8001c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d028      	beq.n	8001cce <app_spi_try_commit_pending_to_active+0xaa>
        uint32_t dma_enabled = tx_dma->CCR & DMA_CCR_EN;
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (dma_enabled == 0u) {
 8001c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d103      	bne.n	8001c94 <app_spi_try_commit_pending_to_active+0x70>
            request_restart = 1u;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8001c92:	e006      	b.n	8001ca2 <app_spi_try_commit_pending_to_active+0x7e>
        } else if (tx_dma->CNDTR == APP_SPI_DMA_BUF_LEN) {
 8001c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c9a:	d102      	bne.n	8001ca2 <app_spi_try_commit_pending_to_active+0x7e>
            should_commit = 1u;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        }

        if (should_commit) {
 8001ca2:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d011      	beq.n	8001cce <app_spi_try_commit_pending_to_active+0xaa>
            pending_len = g_spi_tx_pending_len;
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <app_spi_try_commit_pending_to_active+0x164>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            memcpy(pending_copy, g_spi_tx_pending_buf, pending_len);
 8001cb2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001cb6:	f107 0318 	add.w	r3, r7, #24
 8001cba:	4934      	ldr	r1, [pc, #208]	@ (8001d8c <app_spi_try_commit_pending_to_active+0x168>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f009 fbb4 	bl	800b42a <memcpy>
            g_spi_tx_pending_ready = 0u;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	@ (8001d84 <app_spi_try_commit_pending_to_active+0x160>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
            g_spi_tx_pending_len = 0u;
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d88 <app_spi_try_commit_pending_to_active+0x164>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
        }
    }

    if (!should_commit) {
 8001cce:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <app_spi_try_commit_pending_to_active+0xcc>
        if (primask == 0u) {
 8001cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <app_spi_try_commit_pending_to_active+0xbc>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cdc:	b662      	cpsie	i
}
 8001cde:	bf00      	nop
            __enable_irq();
        }
        if (request_restart) {
 8001ce0:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d045      	beq.n	8001d74 <app_spi_try_commit_pending_to_active+0x150>
            g_spi_need_restart = 1u;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <app_spi_try_commit_pending_to_active+0x16c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e042      	b.n	8001d76 <app_spi_try_commit_pending_to_active+0x152>
        }
        return;
    }

    uint8_t primed_status = status_byte;
 8001cf0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cf4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    if (pending_len > 0u) {
 8001cf8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <app_spi_try_commit_pending_to_active+0xe2>
         * O canal possui uma resposta pronta e ainda não transmitiu nenhum
         * byte desta rodada. Ao sinalizar READY garantimos que o preenchimento
         * no início do quadro seja zerado, impedindo que o mestre observe
         * 0x5A (BUSY) antes do header 0xAB ao efetuar o polling.
         */
        primed_status = APP_SPI_STATUS_READY;
 8001d00:	23a5      	movs	r3, #165	@ 0xa5
 8001d02:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    }

    app_spi_handshake_prime_args_t args = {
 8001d06:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d0a:	713b      	strb	r3, [r7, #4]
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <app_spi_try_commit_pending_to_active+0x170>)
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	232a      	movs	r3, #42	@ 0x2a
 8001d12:	81bb      	strh	r3, [r7, #12]
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001d1e:	82bb      	strh	r3, [r7, #20]
        .tx_len = APP_SPI_DMA_BUF_LEN,
        .response_buf = pending_copy,
        .response_len = pending_len,
    };

    app_spi_handshake_prime_result_t result = app_spi_handshake_prime(&args);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fa2b 	bl	800217e <app_spi_handshake_prime>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	803b      	strh	r3, [r7, #0]

    if (result.consumed_response) {
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <app_spi_try_commit_pending_to_active+0x118>
        app_spi_clean_dcache(g_spi_tx_dma_buf, APP_SPI_DMA_BUF_LEN);
 8001d32:	212a      	movs	r1, #42	@ 0x2a
 8001d34:	4817      	ldr	r0, [pc, #92]	@ (8001d94 <app_spi_try_commit_pending_to_active+0x170>)
 8001d36:	f7ff fd5f 	bl	80017f8 <app_spi_clean_dcache>
 8001d3a:	e00e      	b.n	8001d5a <app_spi_try_commit_pending_to_active+0x136>
    } else {
        memcpy(g_spi_tx_pending_buf, pending_copy, pending_len);
 8001d3c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4811      	ldr	r0, [pc, #68]	@ (8001d8c <app_spi_try_commit_pending_to_active+0x168>)
 8001d48:	f009 fb6f 	bl	800b42a <memcpy>
        g_spi_tx_pending_len = pending_len;
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <app_spi_try_commit_pending_to_active+0x164>)
 8001d4e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001d52:	8013      	strh	r3, [r2, #0]
        g_spi_tx_pending_ready = 1u;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <app_spi_try_commit_pending_to_active+0x160>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
    }

    if (primask == 0u) {
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <app_spi_try_commit_pending_to_active+0x140>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d60:	b662      	cpsie	i
}
 8001d62:	bf00      	nop
        __enable_irq();
    }

    if (request_restart) {
 8001d64:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <app_spi_try_commit_pending_to_active+0x152>
        g_spi_need_restart = 1u;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <app_spi_try_commit_pending_to_active+0x16c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e000      	b.n	8001d76 <app_spi_try_commit_pending_to_active+0x152>
        return;
 8001d74:	bf00      	nop
    }
}
 8001d76:	3760      	adds	r7, #96	@ 0x60
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000099c 	.word	0x2000099c
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	200008ec 	.word	0x200008ec
 8001d88:	200008ea 	.word	0x200008ea
 8001d8c:	200008c0 	.word	0x200008c0
 8001d90:	20000182 	.word	0x20000182
 8001d94:	20000158 	.word	0x20000158

08001d98 <app_spi_restart_dma>:
 *     tarde.
 *  2. Após preparar o buffer, verifica o resultado de HAL_SPI_TransmitReceive_DMA
 *     para distinguir sucesso (limpando indicadores pendentes) de falha
 *     (marcando que outro restart será necessário).
 */
static void app_spi_restart_dma(uint8_t status) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <app_spi_restart_dma+0x80>)
 8001da4:	f005 f908 	bl	8006fb8 <HAL_SPI_GetState>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d003      	beq.n	8001db6 <app_spi_restart_dma+0x1e>
        g_spi_need_restart = 1u;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <app_spi_restart_dma+0x84>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
        return;
 8001db4:	e02c      	b.n	8001e10 <app_spi_restart_dma+0x78>
    }

    g_spi_next_status = status;
 8001db6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e20 <app_spi_restart_dma+0x88>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	7013      	strb	r3, [r2, #0]
    uint8_t used_pending = app_spi_prime_tx_buffer(status);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff feb4 	bl	8001b2c <app_spi_prime_tx_buffer>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	75fb      	strb	r3, [r7, #23]
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, g_spi_tx_dma_buf, g_spi_rx_dma_buf,
 8001dc8:	232a      	movs	r3, #42	@ 0x2a
 8001dca:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <app_spi_restart_dma+0x8c>)
 8001dcc:	4916      	ldr	r1, [pc, #88]	@ (8001e28 <app_spi_restart_dma+0x90>)
 8001dce:	4812      	ldr	r0, [pc, #72]	@ (8001e18 <app_spi_restart_dma+0x80>)
 8001dd0:	f004 fe30 	bl	8006a34 <HAL_SPI_TransmitReceive_DMA>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d117      	bne.n	8001e0a <app_spi_restart_dma+0x72>
                                    (uint16_t)APP_SPI_DMA_BUF_LEN) == HAL_OK) {
        g_spi_need_restart = 0u;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <app_spi_restart_dma+0x84>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
        if (used_pending) {
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d014      	beq.n	8001e10 <app_spi_restart_dma+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dea:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dec:	68fb      	ldr	r3, [r7, #12]
            uint32_t primask = __get_PRIMASK();
 8001dee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
            __disable_irq();
            g_spi_tx_pending_ready = 0u;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <app_spi_restart_dma+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
            g_spi_tx_pending_len = 0u;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <app_spi_restart_dma+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
            if (primask == 0u) {
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <app_spi_restart_dma+0x78>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e06:	b662      	cpsie	i
}
 8001e08:	e002      	b.n	8001e10 <app_spi_restart_dma+0x78>
                __enable_irq();
            }
        }
    } else {
        g_spi_need_restart = 1u;
 8001e0a:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <app_spi_restart_dma+0x84>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
    }
}
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200008f0 	.word	0x200008f0
 8001e1c:	20000182 	.word	0x20000182
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	2000012c 	.word	0x2000012c
 8001e28:	20000158 	.word	0x20000158
 8001e2c:	200008ec 	.word	0x200008ec
 8001e30:	200008ea 	.word	0x200008ea

08001e34 <app_spi_try_restart_dma>:

static void app_spi_try_restart_dma(void) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
    if (!g_spi_need_restart) {
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <app_spi_try_restart_dma+0x30>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <app_spi_try_restart_dma+0x28>
        return;
    }
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001e42:	4809      	ldr	r0, [pc, #36]	@ (8001e68 <app_spi_try_restart_dma+0x34>)
 8001e44:	f005 f8b8 	bl	8006fb8 <HAL_SPI_GetState>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d108      	bne.n	8001e60 <app_spi_try_restart_dma+0x2c>
        return;
    }

    app_spi_restart_dma(g_spi_next_status);
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <app_spi_try_restart_dma+0x38>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff9f 	bl	8001d98 <app_spi_restart_dma>
 8001e5a:	e002      	b.n	8001e62 <app_spi_try_restart_dma+0x2e>
        return;
 8001e5c:	bf00      	nop
 8001e5e:	e000      	b.n	8001e62 <app_spi_try_restart_dma+0x2e>
        return;
 8001e60:	bf00      	nop
}
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000182 	.word	0x20000182
 8001e68:	200008f0 	.word	0x200008f0
 8001e6c:	2000000c 	.word	0x2000000c

08001e70 <app_spi_locate_frame>:

static app_spi_frame_search_result_t app_spi_locate_frame(const uint8_t *buf,
                                                          uint16_t *offset,
                                                          uint16_t *len) {
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
    if (!buf || !offset || !len || APP_SPI_DMA_BUF_LEN < 2u) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <app_spi_locate_frame+0x1e>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <app_spi_locate_frame+0x1e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <app_spi_locate_frame+0x22>
        return APP_SPI_FRAME_NOT_FOUND;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e037      	b.n	8001f02 <app_spi_locate_frame+0x92>
    }

    uint16_t start = 0u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	82fb      	strh	r3, [r7, #22]
    /* O mestre envia APP_SPI_CLIENT_POLL_BYTE durante o polling; aqui
     * caminhamos até localizar de fato o header 0xAA ignorando esses bytes. */
    while (start < APP_SPI_DMA_BUF_LEN && buf[start] != REQ_HEADER) {
 8001e96:	e002      	b.n	8001e9e <app_spi_locate_frame+0x2e>
        ++start;
 8001e98:	8afb      	ldrh	r3, [r7, #22]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	82fb      	strh	r3, [r7, #22]
    while (start < APP_SPI_DMA_BUF_LEN && buf[start] != REQ_HEADER) {
 8001e9e:	8afb      	ldrh	r3, [r7, #22]
 8001ea0:	2b29      	cmp	r3, #41	@ 0x29
 8001ea2:	d805      	bhi.n	8001eb0 <app_spi_locate_frame+0x40>
 8001ea4:	8afb      	ldrh	r3, [r7, #22]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2baa      	cmp	r3, #170	@ 0xaa
 8001eae:	d1f3      	bne.n	8001e98 <app_spi_locate_frame+0x28>
    }

    if (start >= APP_SPI_DMA_BUF_LEN) {
 8001eb0:	8afb      	ldrh	r3, [r7, #22]
 8001eb2:	2b29      	cmp	r3, #41	@ 0x29
 8001eb4:	d901      	bls.n	8001eba <app_spi_locate_frame+0x4a>
        return APP_SPI_FRAME_NOT_FOUND;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e023      	b.n	8001f02 <app_spi_locate_frame+0x92>
    }

    for (uint16_t i = (uint16_t)(start + 1u); i < APP_SPI_DMA_BUF_LEN; ++i) {
 8001eba:	8afb      	ldrh	r3, [r7, #22]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	82bb      	strh	r3, [r7, #20]
 8001ec0:	e01b      	b.n	8001efa <app_spi_locate_frame+0x8a>
        if (buf[i] == REQ_TAIL) {
 8001ec2:	8abb      	ldrh	r3, [r7, #20]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b55      	cmp	r3, #85	@ 0x55
 8001ecc:	d112      	bne.n	8001ef4 <app_spi_locate_frame+0x84>
            uint16_t frame_len = (uint16_t)(i - start + 1u);
 8001ece:	8aba      	ldrh	r2, [r7, #20]
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	827b      	strh	r3, [r7, #18]
            if (frame_len > APP_SPI_MAX_REQUEST_LEN) {
 8001eda:	8a7b      	ldrh	r3, [r7, #18]
 8001edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ede:	d901      	bls.n	8001ee4 <app_spi_locate_frame+0x74>
                return APP_SPI_FRAME_INVALID;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e00e      	b.n	8001f02 <app_spi_locate_frame+0x92>
            }
            *offset = start;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	8afa      	ldrh	r2, [r7, #22]
 8001ee8:	801a      	strh	r2, [r3, #0]
            *len = frame_len;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8a7a      	ldrh	r2, [r7, #18]
 8001eee:	801a      	strh	r2, [r3, #0]
            return APP_SPI_FRAME_FOUND;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e006      	b.n	8001f02 <app_spi_locate_frame+0x92>
    for (uint16_t i = (uint16_t)(start + 1u); i < APP_SPI_DMA_BUF_LEN; ++i) {
 8001ef4:	8abb      	ldrh	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	82bb      	strh	r3, [r7, #20]
 8001efa:	8abb      	ldrh	r3, [r7, #20]
 8001efc:	2b29      	cmp	r3, #41	@ 0x29
 8001efe:	d9e0      	bls.n	8001ec2 <app_spi_locate_frame+0x52>
        }
    }

    return APP_SPI_FRAME_PARTIAL;
 8001f00:	2302      	movs	r3, #2
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <app_spi_queue_push_isr>:
 *     erro para sinalizar overflow.
 *  3. Copia os bytes do quadro para o slot atual da fila, registra o
 *     comprimento recebido e atualiza os ponteiros circulares e o contador
 *     de itens enfileirados.
 */
static int app_spi_queue_push_isr(const uint8_t *frame, uint16_t len) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
    if (!frame || len == 0u || len > APP_SPI_MAX_REQUEST_LEN) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <app_spi_queue_push_isr+0x1e>
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <app_spi_queue_push_isr+0x1e>
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f2c:	d902      	bls.n	8001f34 <app_spi_queue_push_isr+0x24>
        return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e032      	b.n	8001f9a <app_spi_queue_push_isr+0x8a>
    }
    if (g_spi_rx_queue_count >= APP_SPI_RX_QUEUE_DEPTH) {
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <app_spi_queue_push_isr+0x94>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b29      	cmp	r3, #41	@ 0x29
 8001f3c:	d902      	bls.n	8001f44 <app_spi_queue_push_isr+0x34>
        return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e02a      	b.n	8001f9a <app_spi_queue_push_isr+0x8a>
    }
    app_spi_frame_t *slot = &g_spi_rx_queue[g_spi_rx_queue_head];
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <app_spi_queue_push_isr+0x98>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	232c      	movs	r3, #44	@ 0x2c
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <app_spi_queue_push_isr+0x9c>)
 8001f54:	4413      	add	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    memcpy(slot->data, frame, len);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f009 fa63 	bl	800b42a <memcpy>
    slot->len = len;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    g_spi_rx_queue_head = (uint8_t)((g_spi_rx_queue_head + 1u) % APP_SPI_RX_QUEUE_DEPTH);
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <app_spi_queue_push_isr+0x98>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	0853      	lsrs	r3, r2, #1
 8001f74:	490e      	ldr	r1, [pc, #56]	@ (8001fb0 <app_spi_queue_push_isr+0xa0>)
 8001f76:	fba1 1303 	umull	r1, r3, r1, r3
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	212a      	movs	r1, #42	@ 0x2a
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <app_spi_queue_push_isr+0x98>)
 8001f88:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_count++;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <app_spi_queue_push_isr+0x94>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <app_spi_queue_push_isr+0x94>)
 8001f96:	701a      	strb	r2, [r3, #0]
    return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200008be 	.word	0x200008be
 8001fa8:	200008bc 	.word	0x200008bc
 8001fac:	20000184 	.word	0x20000184
 8001fb0:	30c30c31 	.word	0x30c30c31

08001fb4 <app_spi_record_rx_error>:

static void app_spi_record_rx_error(app_spi_rx_error_t reason) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
    if (reason == APP_SPI_RX_STATUS_NONE) {
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <app_spi_record_rx_error+0x22>
        return;
    }
    if (g_spi_rx_error == APP_SPI_RX_STATUS_NONE) {
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <app_spi_record_rx_error+0x30>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <app_spi_record_rx_error+0x24>
        g_spi_rx_error = (uint8_t)reason;
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <app_spi_record_rx_error+0x30>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	7013      	strb	r3, [r2, #0]
 8001fd4:	e000      	b.n	8001fd8 <app_spi_record_rx_error+0x24>
        return;
 8001fd6:	bf00      	nop
    }
}
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200008bf 	.word	0x200008bf

08001fe8 <app_spi_queue_pop>:

static int app_spi_queue_pop(app_spi_frame_t *out) {
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    int rc = -1;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff6:	b672      	cpsid	i
}
 8001ff8:	bf00      	nop
    __disable_irq();
    if (g_spi_rx_queue_count > 0u) {
 8001ffa:	4b24      	ldr	r3, [pc, #144]	@ (800208c <app_spi_queue_pop+0xa4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03b      	beq.n	800207c <app_spi_queue_pop+0x94>
        if (out) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01f      	beq.n	800204a <app_spi_queue_pop+0x62>
            *out = g_spi_rx_queue[g_spi_rx_queue_tail];
 800200a:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <app_spi_queue_pop+0xa8>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4a1f      	ldr	r2, [pc, #124]	@ (8002094 <app_spi_queue_pop+0xac>)
 8002016:	232c      	movs	r3, #44	@ 0x2c
 8002018:	fb00 f303 	mul.w	r3, r0, r3
 800201c:	4413      	add	r3, r2
 800201e:	461c      	mov	r4, r3
 8002020:	468c      	mov	ip, r1
 8002022:	f104 0e20 	add.w	lr, r4, #32
 8002026:	4665      	mov	r5, ip
 8002028:	4626      	mov	r6, r4
 800202a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800202c:	6028      	str	r0, [r5, #0]
 800202e:	6069      	str	r1, [r5, #4]
 8002030:	60aa      	str	r2, [r5, #8]
 8002032:	60eb      	str	r3, [r5, #12]
 8002034:	3410      	adds	r4, #16
 8002036:	f10c 0c10 	add.w	ip, ip, #16
 800203a:	4574      	cmp	r4, lr
 800203c:	d1f3      	bne.n	8002026 <app_spi_queue_pop+0x3e>
 800203e:	4665      	mov	r5, ip
 8002040:	4623      	mov	r3, r4
 8002042:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002044:	6028      	str	r0, [r5, #0]
 8002046:	6069      	str	r1, [r5, #4]
 8002048:	60aa      	str	r2, [r5, #8]
        }
        g_spi_rx_queue_tail = (uint8_t)((g_spi_rx_queue_tail + 1u) % APP_SPI_RX_QUEUE_DEPTH);
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <app_spi_queue_pop+0xa8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	0853      	lsrs	r3, r2, #1
 8002054:	4910      	ldr	r1, [pc, #64]	@ (8002098 <app_spi_queue_pop+0xb0>)
 8002056:	fba1 1303 	umull	r1, r3, r1, r3
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	212a      	movs	r1, #42	@ 0x2a
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <app_spi_queue_pop+0xa8>)
 8002068:	701a      	strb	r2, [r3, #0]
        g_spi_rx_queue_count--;
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <app_spi_queue_pop+0xa4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <app_spi_queue_pop+0xa4>)
 8002076:	701a      	strb	r2, [r3, #0]
        rc = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800207c:	b662      	cpsie	i
}
 800207e:	bf00      	nop
    }
    __enable_irq();
    return rc;
 8002080:	68fb      	ldr	r3, [r7, #12]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208a:	bf00      	nop
 800208c:	200008be 	.word	0x200008be
 8002090:	200008bd 	.word	0x200008bd
 8002094:	20000184 	.word	0x20000184
 8002098:	30c30c31 	.word	0x30c30c31

0800209c <app_spi_handle_txrx_complete>:
 *  - Após decidir o próximo status, adiamos o reinício do DMA para o laço
 *    principal (`app_poll`), permitindo que qualquer mensagem recém-enfileirada
 *    pelos serviços seja aplicada ao buffer ativo antes que o Raspberry Pi
 *    realize a próxima enquete.
 */
static void app_spi_handle_txrx_complete(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
    uint16_t offset = 0u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	807b      	strh	r3, [r7, #2]
    uint16_t len = 0u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	803b      	strh	r3, [r7, #0]

    app_spi_invalidate_dcache(g_spi_rx_dma_buf, APP_SPI_DMA_BUF_LEN);
 80020aa:	212a      	movs	r1, #42	@ 0x2a
 80020ac:	4826      	ldr	r0, [pc, #152]	@ (8002148 <app_spi_handle_txrx_complete+0xac>)
 80020ae:	f7ff fbae 	bl	800180e <app_spi_invalidate_dcache>

    app_spi_frame_search_result_t search =
        app_spi_locate_frame(g_spi_rx_dma_buf, &offset, &len);
 80020b2:	463a      	mov	r2, r7
 80020b4:	1cbb      	adds	r3, r7, #2
 80020b6:	4619      	mov	r1, r3
 80020b8:	4823      	ldr	r0, [pc, #140]	@ (8002148 <app_spi_handle_txrx_complete+0xac>)
 80020ba:	f7ff fed9 	bl	8001e70 <app_spi_locate_frame>
 80020be:	4603      	mov	r3, r0
 80020c0:	71bb      	strb	r3, [r7, #6]

    uint8_t next_status = APP_SPI_STATUS_BUSY;
 80020c2:	235a      	movs	r3, #90	@ 0x5a
 80020c4:	71fb      	strb	r3, [r7, #7]
    uint8_t first_byte = g_spi_rx_dma_buf[0];
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <app_spi_handle_txrx_complete+0xac>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	717b      	strb	r3, [r7, #5]
    uint8_t is_poll = (first_byte == APP_SPI_CLIENT_POLL_BYTE);
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	713b      	strb	r3, [r7, #4]

    switch (search) {
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d002      	beq.n	80020e6 <app_spi_handle_txrx_complete+0x4a>
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <app_spi_handle_txrx_complete+0x78>
 80020e4:	e01c      	b.n	8002120 <app_spi_handle_txrx_complete+0x84>
    case APP_SPI_FRAME_FOUND:
        if (app_spi_queue_push_isr(&g_spi_rx_dma_buf[offset], len) == 0) {
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <app_spi_handle_txrx_complete+0xac>)
 80020ec:	4413      	add	r3, r2
 80020ee:	883a      	ldrh	r2, [r7, #0]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff0c 	bl	8001f10 <app_spi_queue_push_isr>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <app_spi_handle_txrx_complete+0x6c>
            next_status = app_spi_compute_status();
 80020fe:	f7ff fd83 	bl	8001c08 <app_spi_compute_status>
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
        } else {
            app_spi_record_rx_error(APP_SPI_RX_OVERFLOW_QUEUE_FULL);
            next_status = APP_SPI_STATUS_BUSY;
        }
        break;
 8002106:	e015      	b.n	8002134 <app_spi_handle_txrx_complete+0x98>
            app_spi_record_rx_error(APP_SPI_RX_OVERFLOW_QUEUE_FULL);
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff ff53 	bl	8001fb4 <app_spi_record_rx_error>
            next_status = APP_SPI_STATUS_BUSY;
 800210e:	235a      	movs	r3, #90	@ 0x5a
 8002110:	71fb      	strb	r3, [r7, #7]
        break;
 8002112:	e00f      	b.n	8002134 <app_spi_handle_txrx_complete+0x98>
    case APP_SPI_FRAME_INVALID:
        app_spi_record_rx_error(APP_SPI_RX_OVERFLOW_INVALID_FRAME);
 8002114:	2002      	movs	r0, #2
 8002116:	f7ff ff4d 	bl	8001fb4 <app_spi_record_rx_error>
        next_status = APP_SPI_STATUS_BUSY;
 800211a:	235a      	movs	r3, #90	@ 0x5a
 800211c:	71fb      	strb	r3, [r7, #7]
        break;
 800211e:	e009      	b.n	8002134 <app_spi_handle_txrx_complete+0x98>
    case APP_SPI_FRAME_PARTIAL:
    case APP_SPI_FRAME_NOT_FOUND:
    default:
        next_status = is_poll ? APP_SPI_STATUS_READY : app_spi_compute_status();
 8002120:	793b      	ldrb	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <app_spi_handle_txrx_complete+0x92>
 8002126:	f7ff fd6f 	bl	8001c08 <app_spi_compute_status>
 800212a:	4603      	mov	r3, r0
 800212c:	e000      	b.n	8002130 <app_spi_handle_txrx_complete+0x94>
 800212e:	23a5      	movs	r3, #165	@ 0xa5
 8002130:	71fb      	strb	r3, [r7, #7]
        break;
 8002132:	bf00      	nop
     * serviços. Isso dá tempo para que qualquer resposta recém-gerada seja
     * copiada para o buffer ativo antes do próximo polling do Raspberry Pi,
     * garantindo que payloads pendentes substituam os bytes READY/BUSY na
     * primeira transferência de enquete.
     */
    g_spi_next_status = next_status;
 8002134:	4a05      	ldr	r2, [pc, #20]	@ (800214c <app_spi_handle_txrx_complete+0xb0>)
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	7013      	strb	r3, [r2, #0]
    g_spi_need_restart = 1u;
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <app_spi_handle_txrx_complete+0xb4>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000012c 	.word	0x2000012c
 800214c:	2000000c 	.word	0x2000000c
 8002150:	20000182 	.word	0x20000182

08002154 <app_spi_handshake_compute_status>:
#include "app_spi_handshake.h"

#include <string.h>

uint8_t app_spi_handshake_compute_status(uint8_t queue_count,
                                         uint8_t queue_capacity) {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	460a      	mov	r2, r1
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	4613      	mov	r3, r2
 8002162:	71bb      	strb	r3, [r7, #6]
    return (queue_count >= queue_capacity) ? APP_SPI_STATUS_BUSY
                                           : APP_SPI_STATUS_READY;
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	429a      	cmp	r2, r3
 800216a:	d301      	bcc.n	8002170 <app_spi_handshake_compute_status+0x1c>
 800216c:	235a      	movs	r3, #90	@ 0x5a
 800216e:	e000      	b.n	8002172 <app_spi_handshake_compute_status+0x1e>
 8002170:	23a5      	movs	r3, #165	@ 0xa5
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <app_spi_handshake_prime>:
 * reformulação, assim que a fila fica vazia voltamos a transmitir apenas o
 * padrão READY, enquanto respostas reais ocupam o final do quadro com zeros à
 * esquerda, como requerido.
 */
app_spi_handshake_prime_result_t
app_spi_handshake_prime(const app_spi_handshake_prime_args_t *args) {
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
    app_spi_handshake_prime_result_t result = {
 8002186:	2303      	movs	r3, #3
 8002188:	733b      	strb	r3, [r7, #12]
 800218a:	2300      	movs	r3, #0
 800218c:	737b      	strb	r3, [r7, #13]
        .state = APP_SPI_HANDSHAKE_STATE_UNRECOGNIZED,
        .consumed_response = 0u,
    };

    if (!args || !args->tx_buf || args->tx_len == 0u) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <app_spi_handshake_prime+0x26>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <app_spi_handshake_prime+0x26>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	891b      	ldrh	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <app_spi_handshake_prime+0x2c>
        return result;
 80021a4:	89bb      	ldrh	r3, [r7, #12]
 80021a6:	823b      	strh	r3, [r7, #16]
 80021a8:	e054      	b.n	8002254 <app_spi_handshake_prime+0xd6>
    }

    memset(args->tx_buf, args->status_byte, args->tx_len);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6858      	ldr	r0, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	891b      	ldrh	r3, [r3, #8]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f009 f8ab 	bl	800b314 <memset>

    if (args->status_byte == APP_SPI_STATUS_READY) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2ba5      	cmp	r3, #165	@ 0xa5
 80021c4:	d102      	bne.n	80021cc <app_spi_handshake_prime+0x4e>
        result.state = APP_SPI_HANDSHAKE_STATE_READY;
 80021c6:	2300      	movs	r3, #0
 80021c8:	733b      	strb	r3, [r7, #12]
 80021ca:	e008      	b.n	80021de <app_spi_handshake_prime+0x60>
    } else if (args->status_byte == APP_SPI_STATUS_BUSY) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b5a      	cmp	r3, #90	@ 0x5a
 80021d2:	d102      	bne.n	80021da <app_spi_handshake_prime+0x5c>
        result.state = APP_SPI_HANDSHAKE_STATE_BUSY;
 80021d4:	2301      	movs	r3, #1
 80021d6:	733b      	strb	r3, [r7, #12]
 80021d8:	e001      	b.n	80021de <app_spi_handshake_prime+0x60>
    } else {
        result.state = APP_SPI_HANDSHAKE_STATE_UNRECOGNIZED;
 80021da:	2303      	movs	r3, #3
 80021dc:	733b      	strb	r3, [r7, #12]
    }

    if (args->response_buf && args->response_len > 0u) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d034      	beq.n	8002250 <app_spi_handshake_prime+0xd2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8a1b      	ldrh	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d030      	beq.n	8002250 <app_spi_handshake_prime+0xd2>
        if (args->response_len <= args->tx_len &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8a1a      	ldrh	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	891b      	ldrh	r3, [r3, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d826      	bhi.n	8002248 <app_spi_handshake_prime+0xca>
            (result.state == APP_SPI_HANDSHAKE_STATE_READY ||
 80021fa:	7b3b      	ldrb	r3, [r7, #12]
        if (args->response_len <= args->tx_len &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <app_spi_handshake_prime+0x88>
             result.state == APP_SPI_HANDSHAKE_STATE_BUSY)) {
 8002200:	7b3b      	ldrb	r3, [r7, #12]
            (result.state == APP_SPI_HANDSHAKE_STATE_READY ||
 8002202:	2b01      	cmp	r3, #1
 8002204:	d120      	bne.n	8002248 <app_spi_handshake_prime+0xca>
            uint32_t pad = args->tx_len - args->response_len;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	891b      	ldrh	r3, [r3, #8]
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	8a1b      	ldrh	r3, [r3, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
            if (pad > 0u) {
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <app_spi_handshake_prime+0xaa>
                memset(args->tx_buf, 0, pad);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f009 f876 	bl	800b314 <memset>
            }
            memcpy(&args->tx_buf[pad], args->response_buf, args->response_len);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	18d0      	adds	r0, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68d9      	ldr	r1, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8a1b      	ldrh	r3, [r3, #16]
 8002238:	461a      	mov	r2, r3
 800223a:	f009 f8f6 	bl	800b42a <memcpy>
            result.consumed_response = 1u;
 800223e:	2301      	movs	r3, #1
 8002240:	737b      	strb	r3, [r7, #13]
            result.state = APP_SPI_HANDSHAKE_STATE_RESPONSE;
 8002242:	2302      	movs	r3, #2
 8002244:	733b      	strb	r3, [r7, #12]
             result.state == APP_SPI_HANDSHAKE_STATE_BUSY)) {
 8002246:	e003      	b.n	8002250 <app_spi_handshake_prime+0xd2>
        } else {
            result.state = APP_SPI_HANDSHAKE_STATE_UNRECOGNIZED;
 8002248:	2303      	movs	r3, #3
 800224a:	733b      	strb	r3, [r7, #12]
            result.consumed_response = 0u;
 800224c:	2300      	movs	r3, #0
 800224e:	737b      	strb	r3, [r7, #13]
        }
    }

    return result;
 8002250:	89bb      	ldrh	r3, [r7, #12]
 8002252:	823b      	strh	r3, [r7, #16]
}
 8002254:	2300      	movs	r3, #0
 8002256:	7c3a      	ldrb	r2, [r7, #16]
 8002258:	f362 0307 	bfi	r3, r2, #0, #8
 800225c:	7c7a      	ldrb	r2, [r7, #17]
 800225e:	f362 230f 	bfi	r3, r2, #8, #8
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08e      	sub	sp, #56	@ 0x38
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	2224      	movs	r2, #36	@ 0x24
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f009 f84a 	bl	800b314 <memset>
    TIM_MasterConfigTypeDef master = {0};
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 800228c:	2303      	movs	r3, #3
 800228e:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002294:	2301      	movs	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022a4:	2301      	movs	r3, #1
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f005 fd04 	bl	8007cc4 <HAL_TIM_Encoder_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 80022c2:	f000 fa99 	bl	80027f8 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f007 fb25 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 80022e0:	f000 fa8a 	bl	80027f8 <Error_Handler>
    }
}
 80022e4:	bf00      	nop
 80022e6:	3738      	adds	r7, #56	@ 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2301      	movs	r3, #1
 800230e:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f001 fdd6 	bl	8003ed0 <HAL_GPIO_Init>
}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	@ 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8002340:	2203      	movs	r2, #3
 8002342:	2113      	movs	r1, #19
 8002344:	4824      	ldr	r0, [pc, #144]	@ (80023d8 <board_config_apply_motion_gpio+0xac>)
 8002346:	f7ff ffd1 	bl	80022ec <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 800234a:	2203      	movs	r2, #3
 800234c:	2104      	movs	r1, #4
 800234e:	4822      	ldr	r0, [pc, #136]	@ (80023d8 <board_config_apply_motion_gpio+0xac>)
 8002350:	f7ff ffcc 	bl	80022ec <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8002354:	2203      	movs	r2, #3
 8002356:	210c      	movs	r1, #12
 8002358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235c:	f7ff ffc6 	bl	80022ec <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8002360:	2200      	movs	r2, #0
 8002362:	2130      	movs	r1, #48	@ 0x30
 8002364:	481d      	ldr	r0, [pc, #116]	@ (80023dc <board_config_apply_motion_gpio+0xb0>)
 8002366:	f7ff ffc1 	bl	80022ec <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f7ff ffba 	bl	80022ec <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2117      	movs	r1, #23
 800237c:	4816      	ldr	r0, [pc, #88]	@ (80023d8 <board_config_apply_motion_gpio+0xac>)
 800237e:	f002 f95d 	bl	800463c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	210c      	movs	r1, #12
 8002386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800238a:	f002 f957 	bl	800463c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 800238e:	2201      	movs	r2, #1
 8002390:	2130      	movs	r1, #48	@ 0x30
 8002392:	4812      	ldr	r0, [pc, #72]	@ (80023dc <board_config_apply_motion_gpio+0xb0>)
 8002394:	f002 f952 	bl	800463c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800239e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a2:	f002 f94b 	bl	800463c <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80023aa:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80023b0:	2307      	movs	r3, #7
 80023b2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4808      	ldr	r0, [pc, #32]	@ (80023dc <board_config_apply_motion_gpio+0xb0>)
 80023ba:	f001 fd89 	bl	8003ed0 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 80023be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4804      	ldr	r0, [pc, #16]	@ (80023dc <board_config_apply_motion_gpio+0xb0>)
 80023ca:	f001 fd81 	bl	8003ed0 <HAL_GPIO_Init>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	48000400 	.word	0x48000400
 80023dc:	48000800 	.word	0x48000800

080023e0 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 80023e4:	4805      	ldr	r0, [pc, #20]	@ (80023fc <board_config_force_encoder_quadrature+0x1c>)
 80023e6:	f7ff ff40 	bl	800226a <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <board_config_force_encoder_quadrature+0x20>)
 80023ec:	f7ff ff3d 	bl	800226a <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 80023f0:	4804      	ldr	r0, [pc, #16]	@ (8002404 <board_config_force_encoder_quadrature+0x24>)
 80023f2:	f7ff ff3a 	bl	800226a <configure_encoder_timer>
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200009e8 	.word	0x200009e8
 8002400:	20000a34 	.word	0x20000a34
 8002404:	20000a80 	.word	0x20000a80

08002408 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 800241c:	2118      	movs	r1, #24
 800241e:	4811      	ldr	r0, [pc, #68]	@ (8002464 <board_config_remap_tim3_encoder_pins+0x5c>)
 8002420:	f001 ffe2 	bl	80043e8 <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002424:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <board_config_remap_tim3_encoder_pins+0x60>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002428:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <board_config_remap_tim3_encoder_pins+0x60>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <board_config_remap_tim3_encoder_pins+0x60>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800243c:	23c0      	movs	r3, #192	@ 0xc0
 800243e:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 800244c:	2302      	movs	r3, #2
 800244e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4805      	ldr	r0, [pc, #20]	@ (800246c <board_config_remap_tim3_encoder_pins+0x64>)
 8002456:	f001 fd3b 	bl	8003ed0 <HAL_GPIO_Init>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	48001000 	.word	0x48001000
 8002468:	40021000 	.word	0x40021000
 800246c:	48000800 	.word	0x48000800

08002470 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	2006      	movs	r0, #6
 800247a:	f001 f993 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800247e:	2006      	movs	r0, #6
 8002480:	f001 f9bc 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2007      	movs	r0, #7
 800248a:	f001 f98b 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800248e:	2007      	movs	r0, #7
 8002490:	f001 f9b4 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	2008      	movs	r0, #8
 800249a:	f001 f983 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800249e:	2008      	movs	r0, #8
 80024a0:	f001 f9ac 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2100      	movs	r1, #0
 80024a8:	2028      	movs	r0, #40	@ 0x28
 80024aa:	f001 f97b 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024ae:	2028      	movs	r0, #40	@ 0x28
 80024b0:	f001 f9a4 	bl	80037fc <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2101      	movs	r1, #1
 80024b8:	2036      	movs	r0, #54	@ 0x36
 80024ba:	f001 f973 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024be:	2036      	movs	r0, #54	@ 0x36
 80024c0:	f001 f99c 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2102      	movs	r1, #2
 80024c8:	200c      	movs	r0, #12
 80024ca:	f001 f96b 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024ce:	200c      	movs	r0, #12
 80024d0:	f001 f994 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	200d      	movs	r0, #13
 80024da:	f001 f963 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024de:	200d      	movs	r0, #13
 80024e0:	f001 f98c 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2103      	movs	r1, #3
 80024e8:	2037      	movs	r0, #55	@ 0x37
 80024ea:	f001 f95b 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024ee:	2037      	movs	r0, #55	@ 0x37
 80024f0:	f001 f984 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2104      	movs	r1, #4
 80024f8:	2025      	movs	r0, #37	@ 0x25
 80024fa:	f001 f953 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024fe:	2025      	movs	r0, #37	@ 0x25
 8002500:	f001 f97c 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2105      	movs	r1, #5
 8002508:	2023      	movs	r0, #35	@ 0x23
 800250a:	f001 f94b 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800250e:	2023      	movs	r0, #35	@ 0x23
 8002510:	f001 f974 	bl	80037fc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2106      	movs	r1, #6
 8002518:	2018      	movs	r0, #24
 800251a:	f001 f943 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800251e:	2018      	movs	r0, #24
 8002520:	f001 f96c 	bl	80037fc <HAL_NVIC_EnableIRQ>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <MX_DMA_Init+0x48>)
 8002530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002532:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <MX_DMA_Init+0x48>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6493      	str	r3, [r2, #72]	@ 0x48
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <MX_DMA_Init+0x48>)
 800253c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	200c      	movs	r0, #12
 800254c:	f001 f92a 	bl	80037a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002550:	200c      	movs	r0, #12
 8002552:	f001 f953 	bl	80037fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	200d      	movs	r0, #13
 800255c:	f001 f922 	bl	80037a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002560:	200d      	movs	r0, #13
 8002562:	f001 f94b 	bl	80037fc <HAL_NVIC_EnableIRQ>

}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000

08002574 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	@ 0x30
 8002578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800258a:	4b4d      	ldr	r3, [pc, #308]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	4a4c      	ldr	r2, [pc, #304]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002596:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	4a46      	ldr	r2, [pc, #280]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ae:	4b44      	ldr	r3, [pc, #272]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	4a40      	ldr	r2, [pc, #256]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c6:	4b3e      	ldr	r3, [pc, #248]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	4a3a      	ldr	r2, [pc, #232]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f6:	4b32      	ldr	r3, [pc, #200]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	4a2e      	ldr	r2, [pc, #184]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <MX_GPIO_Init+0x14c>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800261a:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 800261e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002620:	2303      	movs	r3, #3
 8002622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	4619      	mov	r1, r3
 800262e:	4825      	ldr	r0, [pc, #148]	@ (80026c4 <MX_GPIO_Init+0x150>)
 8002630:	f001 fc4e 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8002634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002638:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263a:	2303      	movs	r3, #3
 800263c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	481f      	ldr	r0, [pc, #124]	@ (80026c8 <MX_GPIO_Init+0x154>)
 800264a:	f001 fc41 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800264e:	2303      	movs	r3, #3
 8002650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002652:	2303      	movs	r3, #3
 8002654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	4619      	mov	r1, r3
 8002660:	481a      	ldr	r0, [pc, #104]	@ (80026cc <MX_GPIO_Init+0x158>)
 8002662:	f001 fc35 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002666:	f641 7308 	movw	r3, #7944	@ 0x1f08
 800266a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266c:	2303      	movs	r3, #3
 800266e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800267e:	f001 fc27 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002682:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 8002686:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	2303      	movs	r3, #3
 800268a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	480e      	ldr	r0, [pc, #56]	@ (80026d0 <MX_GPIO_Init+0x15c>)
 8002698:	f001 fc1a 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800269c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a2:	2303      	movs	r3, #3
 80026a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <MX_GPIO_Init+0x160>)
 80026b2:	f001 fc0d 	bl	8003ed0 <HAL_GPIO_Init>

}
 80026b6:	bf00      	nop
 80026b8:	3730      	adds	r7, #48	@ 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	48001000 	.word	0x48001000
 80026c8:	48000800 	.word	0x48000800
 80026cc:	48001c00 	.word	0x48001c00
 80026d0:	48000400 	.word	0x48000400
 80026d4:	48000c00 	.word	0x48000c00

080026d8 <main>:
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

 80026dc:	f000 fefd 	bl	80034da <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

 80026e0:	f000 f821 	bl	8002726 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
 80026e4:	f7ff ff46 	bl	8002574 <MX_GPIO_Init>
  MX_TIM6_Init();
 80026e8:	f7ff ff1e 	bl	8002528 <MX_DMA_Init>
  MX_TIM2_Init();
 80026ec:	f000 f8a8 	bl	8002840 <MX_SPI1_Init>
  MX_TIM5_Init();
 80026f0:	f000 fbc0 	bl	8002e74 <MX_TIM6_Init>
  MX_TIM7_Init();
 80026f4:	f000 fabe 	bl	8002c74 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026f8:	f000 fb66 	bl	8002dc8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80026fc:	f000 fbf0 	bl	8002ee0 <MX_TIM7_Init>
  MX_TIM15_Init();
 8002700:	f000 fb0c 	bl	8002d1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
 8002704:	f000 fe32 	bl	800336c <MX_USART1_UART_Init>
    board_config_apply_motion_gpio();
 8002708:	f000 fc20 	bl	8002f4c <MX_TIM15_Init>
    board_config_remap_tim3_encoder_pins();
    board_config_force_encoder_quadrature();
 800270c:	f7ff fe0e 	bl	800232c <board_config_apply_motion_gpio>
    board_config_apply_interrupt_priorities();
 8002710:	f7ff fe7a 	bl	8002408 <board_config_remap_tim3_encoder_pins>
    //board_config_apply_spi_dma_profile();
 8002714:	f7ff fe64 	bl	80023e0 <board_config_force_encoder_quadrature>
    app_init();
 8002718:	f7ff feaa 	bl	8002470 <board_config_apply_interrupt_priorities>
  /* USER CODE END 2 */

 800271c:	f7ff f882 	bl	8001824 <app_init>
    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
  }
  /* USER CODE END 3 */
 8002720:	f7ff f8de 	bl	80018e0 <app_poll>
 8002724:	e7fc      	b.n	8002720 <main+0x48>

08002726 <SystemClock_Config>:
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002726:	b580      	push	{r7, lr}
 8002728:	b096      	sub	sp, #88	@ 0x58
 800272a:	af00      	add	r7, sp, #0

 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2244      	movs	r2, #68	@ 0x44
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f008 fded 	bl	800b314 <memset>
  /** Configure the main internal regulator output voltage
 800273a:	463b      	mov	r3, r7
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
 8002748:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800274c:	f001 ffd4 	bl	80046f8 <HAL_PWREx_ControlVoltageScaling>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0x34>
  }

 8002756:	f000 f84f 	bl	80027f8 <Error_Handler>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800275a:	2310      	movs	r3, #16
 800275c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800275e:	2301      	movs	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002766:	2360      	movs	r3, #96	@ 0x60
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 1;
 800276a:	2302      	movs	r3, #2
 800276c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800276e:	2301      	movs	r3, #1
 8002770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002772:	2301      	movs	r3, #1
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002776:	2328      	movs	r3, #40	@ 0x28
 8002778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800277a:	2307      	movs	r3, #7
 800277c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277e:	2302      	movs	r3, #2
 8002780:	653b      	str	r3, [r7, #80]	@ 0x50
  {
 8002782:	2302      	movs	r3, #2
 8002784:	657b      	str	r3, [r7, #84]	@ 0x54
    Error_Handler();
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4618      	mov	r0, r3
 800278c:	f002 f816 	bl	80047bc <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x74>
  }

 8002796:	f000 f82f 	bl	80027f8 <Error_Handler>
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279a:	230f      	movs	r3, #15
 800279c:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800279e:	2303      	movs	r3, #3
 80027a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]

 80027a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  {
    Error_Handler();
 80027b0:	463b      	mov	r3, r7
 80027b2:	2104      	movs	r1, #4
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fd03 	bl	80051c0 <HAL_RCC_ClockConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <SystemClock_Config+0x9e>
  }
}
 80027c0:	f000 f81a 	bl	80027f8 <Error_Handler>

/* USER CODE BEGIN 4 */
 80027c4:	bf00      	nop
 80027c6:	3758      	adds	r7, #88	@ 0x58
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
  app_on_spi_txrx_half_complete(hspi);
}
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff f93b 	bl	8001a50 <app_on_spi_txrx_half_complete>
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SPI_TxRxCpltCallback>:
{
  app_on_spi_txrx_complete(hspi);
}
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]

 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff f94a 	bl	8001a84 <app_on_spi_txrx_complete>
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
	log_event_names("app", "error", "Error_Handler");
#endif
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	2164      	movs	r1, #100	@ 0x64
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe fdc4 	bl	8001390 <log_event_ids>
	__disable_irq();
 8002808:	4a04      	ldr	r2, [pc, #16]	@ (800281c <Error_Handler+0x24>)
 800280a:	4905      	ldr	r1, [pc, #20]	@ (8002820 <Error_Handler+0x28>)
 800280c:	4805      	ldr	r0, [pc, #20]	@ (8002824 <Error_Handler+0x2c>)
 800280e:	f7fe fdd3 	bl	80013b8 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8002812:	b672      	cpsid	i
}
 8002814:	bf00      	nop
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
 8002816:	bf00      	nop
 8002818:	e7fd      	b.n	8002816 <Error_Handler+0x1e>
 800281a:	bf00      	nop
 800281c:	0800c4a4 	.word	0x0800c4a4
 8002820:	0800c4b4 	.word	0x0800c4b4
 8002824:	0800c4bc 	.word	0x0800c4bc

08002828 <assert_failed>:
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002844:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002846:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <MX_SPI1_Init+0x6c>)
 8002848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <MX_SPI1_Init+0x68>)
 800284c:	2200      	movs	r2, #0
 800284e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002850:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002856:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002858:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800285c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800285e:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002860:	2202      	movs	r2, #2
 8002862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002866:	2201      	movs	r2, #1
 8002868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800286a:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <MX_SPI1_Init+0x68>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <MX_SPI1_Init+0x68>)
 800287e:	2200      	movs	r2, #0
 8002880:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002884:	2207      	movs	r2, #7
 8002886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002888:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <MX_SPI1_Init+0x68>)
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <MX_SPI1_Init+0x68>)
 8002896:	f003 fedf 	bl	8006658 <HAL_SPI_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80028a0:	f7ff ffaa 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200008f0 	.word	0x200008f0
 80028ac:	40013000 	.word	0x40013000

080028b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a45      	ldr	r2, [pc, #276]	@ (80029e4 <HAL_SPI_MspInit+0x134>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 8083 	bne.w	80029da <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028d4:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_SPI_MspInit+0x138>)
 80028d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d8:	4a43      	ldr	r2, [pc, #268]	@ (80029e8 <HAL_SPI_MspInit+0x138>)
 80028da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028de:	6613      	str	r3, [r2, #96]	@ 0x60
 80028e0:	4b41      	ldr	r3, [pc, #260]	@ (80029e8 <HAL_SPI_MspInit+0x138>)
 80028e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b3e      	ldr	r3, [pc, #248]	@ (80029e8 <HAL_SPI_MspInit+0x138>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	4a3d      	ldr	r2, [pc, #244]	@ (80029e8 <HAL_SPI_MspInit+0x138>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f8:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <HAL_SPI_MspInit+0x138>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002904:	23f0      	movs	r3, #240	@ 0xf0
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002914:	2305      	movs	r3, #5
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f001 fad5 	bl	8003ed0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002926:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002928:	4a31      	ldr	r2, [pc, #196]	@ (80029f0 <HAL_SPI_MspInit+0x140>)
 800292a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800292c:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 800292e:	2201      	movs	r2, #1
 8002930:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002932:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002938:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800293e:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002944:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002946:	2200      	movs	r2, #0
 8002948:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800294a:	4b28      	ldr	r3, [pc, #160]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002950:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002952:	2220      	movs	r2, #32
 8002954:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002956:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800295c:	4823      	ldr	r0, [pc, #140]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 800295e:	f000 ff71 	bl	8003844 <HAL_DMA_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002968:	f7ff ff46 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a1f      	ldr	r2, [pc, #124]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58
 8002972:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_SPI_MspInit+0x13c>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002978:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 800297a:	4a1f      	ldr	r2, [pc, #124]	@ (80029f8 <HAL_SPI_MspInit+0x148>)
 800297c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 8002980:	2201      	movs	r2, #1
 8002982:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 8002986:	2210      	movs	r2, #16
 8002988:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800298a:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002990:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 8002992:	2280      	movs	r2, #128	@ 0x80
 8002994:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 8002998:	2200      	movs	r2, #0
 800299a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800299c:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 80029a4:	2220      	movs	r2, #32
 80029a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029ae:	4811      	ldr	r0, [pc, #68]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 80029b0:	f000 ff48 	bl	8003844 <HAL_DMA_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80029ba:	f7ff ff1d 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a0c      	ldr	r2, [pc, #48]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80029c4:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <HAL_SPI_MspInit+0x144>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2023      	movs	r0, #35	@ 0x23
 80029d0:	f000 fee8 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80029d4:	2023      	movs	r0, #35	@ 0x23
 80029d6:	f000 ff11 	bl	80037fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	@ 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40013000 	.word	0x40013000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	20000954 	.word	0x20000954
 80029f0:	4002001c 	.word	0x4002001c
 80029f4:	2000099c 	.word	0x2000099c
 80029f8:	40020030 	.word	0x40020030

080029fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <HAL_MspInit+0x44>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a06:	4a0e      	ldr	r2, [pc, #56]	@ (8002a40 <HAL_MspInit+0x44>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <HAL_MspInit+0x44>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_MspInit+0x44>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1e:	4a08      	ldr	r2, [pc, #32]	@ (8002a40 <HAL_MspInit+0x44>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_MspInit+0x44>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <NMI_Handler+0x4>

08002a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a9a:	f000 fd73 	bl	8003584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <DMA1_Channel2_IRQHandler+0x10>)
 8002aaa:	f001 f932 	bl	8003d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000954 	.word	0x20000954

08002ab8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002abc:	4802      	ldr	r0, [pc, #8]	@ (8002ac8 <DMA1_Channel3_IRQHandler+0x10>)
 8002abe:	f001 f928 	bl	8003d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000099c 	.word	0x2000099c

08002acc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	@ (8002adc <SPI1_IRQHandler+0x10>)
 8002ad2:	f004 f953 	bl	8006d7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200008f0 	.word	0x200008f0

08002ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <TIM6_DAC_IRQHandler+0x10>)
 8002ae6:	f005 faaf 	bl	8008048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000acc 	.word	0x20000acc

08002af4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002af8:	4802      	ldr	r0, [pc, #8]	@ (8002b04 <TIM7_IRQHandler+0x10>)
 8002afa:	f005 faa5 	bl	8008048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000b18 	.word	0x20000b18

08002b08 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f001 fdc1 	bl	8004694 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f001 fdba 	bl	8004694 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002b28:	2004      	movs	r0, #4
 8002b2a:	f001 fdb3 	bl	8004694 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b36:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b3a:	f001 fdab 	bl	8004694 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e00a      	b.n	8002b6a <_read+0x28>
		*ptr++ = __io_getchar();
 8002b54:	f3af 8000 	nop.w
 8002b58:	4601      	mov	r1, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	60ba      	str	r2, [r7, #8]
 8002b60:	b2ca      	uxtb	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3301      	adds	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dbf0      	blt.n	8002b54 <_read+0x12>
	}

	return len;
 8002b72:	687b      	ldr	r3, [r7, #4]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ba4:	605a      	str	r2, [r3, #4]
	return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_isatty>:

int _isatty(int file) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <_sbrk+0x64>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <_sbrk+0x68>)
 8002c04:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d207      	bcs.n	8002c24 <_sbrk+0x40>
		errno = ENOMEM;
 8002c14:	f008 fbdc 	bl	800b3d0 <__errno>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e009      	b.n	8002c38 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002c24:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a05      	ldr	r2, [pc, #20]	@ (8002c48 <_sbrk+0x64>)
 8002c34:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20018000 	.word	0x20018000
 8002c44:	00000400 	.word	0x00000400
 8002c48:	200009e4 	.word	0x200009e4
 8002c4c:	20000d88 	.word	0x20000d88

08002c50 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <SystemInit+0x20>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <SystemInit+0x20>)
 8002c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	@ 0x30
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	2224      	movs	r2, #36	@ 0x24
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f008 fb46 	bl	800b314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	463b      	mov	r3, r7
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c92:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002c94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480c      	ldr	r0, [pc, #48]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002ce6:	f004 ffed 	bl	8007cc4 <HAL_TIM_Encoder_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002cf0:	f7ff fd82 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <MX_TIM2_Init+0xa4>)
 8002d02:	f006 fe0f 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002d0c:	f7ff fd74 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	@ 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200009e8 	.word	0x200009e8

08002d1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	@ 0x30
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	2224      	movs	r2, #36	@ 0x24
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f008 faf2 	bl	800b314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d30:	463b      	mov	r3, r7
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d3a:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d3c:	4a21      	ldr	r2, [pc, #132]	@ (8002dc4 <MX_TIM3_Init+0xa8>)
 8002d3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002d8c:	f004 ff9a 	bl	8007cc4 <HAL_TIM_Encoder_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002d96:	f7ff fd2f 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da2:	463b      	mov	r3, r7
 8002da4:	4619      	mov	r1, r3
 8002da6:	4806      	ldr	r0, [pc, #24]	@ (8002dc0 <MX_TIM3_Init+0xa4>)
 8002da8:	f006 fdbc 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002db2:	f7ff fd21 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	3730      	adds	r7, #48	@ 0x30
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000a34 	.word	0x20000a34
 8002dc4:	40000400 	.word	0x40000400

08002dc8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	@ 0x30
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	2224      	movs	r2, #36	@ 0x24
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f008 fa9c 	bl	800b314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ddc:	463b      	mov	r3, r7
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002de6:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002de8:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <MX_TIM5_Init+0xa8>)
 8002dea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e20:	2300      	movs	r3, #0
 8002e22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	480d      	ldr	r0, [pc, #52]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002e38:	f004 ff44 	bl	8007cc4 <HAL_TIM_Encoder_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002e42:	f7ff fcd9 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e4e:	463b      	mov	r3, r7
 8002e50:	4619      	mov	r1, r3
 8002e52:	4806      	ldr	r0, [pc, #24]	@ (8002e6c <MX_TIM5_Init+0xa4>)
 8002e54:	f006 fd66 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002e5e:	f7ff fccb 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	3730      	adds	r7, #48	@ 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000a80 	.word	0x20000a80
 8002e70:	40000c00 	.word	0x40000c00

08002e74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002e86:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <MX_TIM6_Init+0x68>)
 8002e88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002e8c:	224f      	movs	r2, #79	@ 0x4f
 8002e8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002e98:	2213      	movs	r2, #19
 8002e9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002e9e:	2280      	movs	r2, #128	@ 0x80
 8002ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ea2:	480d      	ldr	r0, [pc, #52]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002ea4:	f004 fb40 	bl	8007528 <HAL_TIM_Base_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002eae:	f7ff fca3 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4806      	ldr	r0, [pc, #24]	@ (8002ed8 <MX_TIM6_Init+0x64>)
 8002ec0:	f006 fd30 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002eca:	f7ff fc95 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000acc 	.word	0x20000acc
 8002edc:	40001000 	.word	0x40001000

08002ee0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002ef2:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <MX_TIM7_Init+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002ef8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002efc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efe:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002f06:	2209      	movs	r2, #9
 8002f08:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002f0c:	2280      	movs	r2, #128	@ 0x80
 8002f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f10:	480c      	ldr	r0, [pc, #48]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002f12:	f004 fb09 	bl	8007528 <HAL_TIM_Base_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f1c:	f7ff fc6c 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	@ (8002f44 <MX_TIM7_Init+0x64>)
 8002f2e:	f006 fcf9 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002f38:	f7ff fc5e 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000b18 	.word	0x20000b18
 8002f48:	40001400 	.word	0x40001400

08002f4c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b09a      	sub	sp, #104	@ 0x68
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	222c      	movs	r2, #44	@ 0x2c
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f008 f9c4 	bl	800b314 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800308c <MX_TIM15_Init+0x140>)
 8002f90:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002f94:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8002f98:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fa6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b37      	ldr	r3, [pc, #220]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002fae:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb4:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002fba:	4833      	ldr	r0, [pc, #204]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002fbc:	f004 fab4 	bl	8007528 <HAL_TIM_Base_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002fc6:	f7ff fc17 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fce:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002fd0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	482c      	ldr	r0, [pc, #176]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002fd8:	f005 fc10 	bl	80087fc <HAL_TIM_ConfigClockSource>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8002fe2:	f7ff fc09 	bl	80027f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002fe6:	4828      	ldr	r0, [pc, #160]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8002fe8:	f004 fba8 	bl	800773c <HAL_TIM_PWM_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8002ff2:	f7ff fc01 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002ffe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003002:	4619      	mov	r1, r3
 8003004:	4820      	ldr	r0, [pc, #128]	@ (8003088 <MX_TIM15_Init+0x13c>)
 8003006:	f006 fc8d 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8003010:	f7ff fbf2 	bl	80027f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003014:	2360      	movs	r3, #96	@ 0x60
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800301c:	2300      	movs	r3, #0
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003020:	2300      	movs	r3, #0
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003030:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003034:	2200      	movs	r2, #0
 8003036:	4619      	mov	r1, r3
 8003038:	4813      	ldr	r0, [pc, #76]	@ (8003088 <MX_TIM15_Init+0x13c>)
 800303a:	f005 f90d 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8003044:	f7ff fbd8 	bl	80027f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800305c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003060:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4807      	ldr	r0, [pc, #28]	@ (8003088 <MX_TIM15_Init+0x13c>)
 800306c:	f006 fdb0 	bl	8009bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 8003076:	f7ff fbbf 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800307a:	4803      	ldr	r0, [pc, #12]	@ (8003088 <MX_TIM15_Init+0x13c>)
 800307c:	f000 f920 	bl	80032c0 <HAL_TIM_MspPostInit>

}
 8003080:	bf00      	nop
 8003082:	3768      	adds	r7, #104	@ 0x68
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000b64 	.word	0x20000b64
 800308c:	40014000 	.word	0x40014000

08003090 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	@ 0x38
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b0:	d146      	bne.n	8003140 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030b2:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030be:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	4a46      	ldr	r2, [pc, #280]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ee:	4b44      	ldr	r3, [pc, #272]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800310c:	2301      	movs	r3, #1
 800310e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800311a:	f000 fed9 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800311e:	2308      	movs	r3, #8
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800312e:	2301      	movs	r3, #1
 8003130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003136:	4619      	mov	r1, r3
 8003138:	4832      	ldr	r0, [pc, #200]	@ (8003204 <HAL_TIM_Encoder_MspInit+0x174>)
 800313a:	f000 fec9 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800313e:	e05b      	b.n	80031f8 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a30      	ldr	r2, [pc, #192]	@ (8003208 <HAL_TIM_Encoder_MspInit+0x178>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d128      	bne.n	800319c <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314a:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
 8003156:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003162:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	4a26      	ldr	r2, [pc, #152]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800317a:	2318      	movs	r3, #24
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800318a:	2302      	movs	r3, #2
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800318e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003192:	4619      	mov	r1, r3
 8003194:	481d      	ldr	r0, [pc, #116]	@ (800320c <HAL_TIM_Encoder_MspInit+0x17c>)
 8003196:	f000 fe9b 	bl	8003ed0 <HAL_GPIO_Init>
}
 800319a:	e02d      	b.n	80031f8 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_TIM_Encoder_MspInit+0x180>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d128      	bne.n	80031f8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031a6:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031aa:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <HAL_TIM_Encoder_MspInit+0x170>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031d6:	2303      	movs	r3, #3
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031e6:	2302      	movs	r3, #2
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031f4:	f000 fe6c 	bl	8003ed0 <HAL_GPIO_Init>
}
 80031f8:	bf00      	nop
 80031fa:	3738      	adds	r7, #56	@ 0x38
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	48000400 	.word	0x48000400
 8003208:	40000400 	.word	0x40000400
 800320c:	48001000 	.word	0x48001000
 8003210:	40000c00 	.word	0x40000c00

08003214 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a23      	ldr	r2, [pc, #140]	@ (80032b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d114      	bne.n	8003250 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003226:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	4a22      	ldr	r2, [pc, #136]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	6593      	str	r3, [r2, #88]	@ 0x58
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	2036      	movs	r0, #54	@ 0x36
 8003244:	f000 faae 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003248:	2036      	movs	r0, #54	@ 0x36
 800324a:	f000 fad7 	bl	80037fc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800324e:	e02a      	b.n	80032a6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <HAL_TIM_Base_MspInit+0xa4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d114      	bne.n	8003284 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800325a:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	4a15      	ldr	r2, [pc, #84]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	6593      	str	r3, [r2, #88]	@ 0x58
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	2037      	movs	r0, #55	@ 0x37
 8003278:	f000 fa94 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800327c:	2037      	movs	r0, #55	@ 0x37
 800327e:	f000 fabd 	bl	80037fc <HAL_NVIC_EnableIRQ>
}
 8003282:	e010      	b.n	80032a6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0c      	ldr	r2, [pc, #48]	@ (80032bc <HAL_TIM_Base_MspInit+0xa8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10b      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4a08      	ldr	r2, [pc, #32]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003298:	6613      	str	r3, [r2, #96]	@ 0x60
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_TIM_Base_MspInit+0xa0>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40001000 	.word	0x40001000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40001400 	.word	0x40001400
 80032bc:	40014000 	.word	0x40014000

080032c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a20      	ldr	r2, [pc, #128]	@ (8003360 <HAL_TIM_MspPostInit+0xa0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d139      	bne.n	8003356 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_TIM_MspPostInit+0xa4>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_TIM_MspPostInit+0xa4>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_TIM_MspPostInit+0xa4>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <HAL_TIM_MspPostInit+0xa4>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	4a19      	ldr	r2, [pc, #100]	@ (8003364 <HAL_TIM_MspPostInit+0xa4>)
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <HAL_TIM_MspPostInit+0xa4>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003312:	2304      	movs	r3, #4
 8003314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003322:	230e      	movs	r3, #14
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003330:	f000 fdce 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003346:	230e      	movs	r3, #14
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4805      	ldr	r0, [pc, #20]	@ (8003368 <HAL_TIM_MspPostInit+0xa8>)
 8003352:	f000 fdbd 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003356:	bf00      	nop
 8003358:	3728      	adds	r7, #40	@ 0x28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40014000 	.word	0x40014000
 8003364:	40021000 	.word	0x40021000
 8003368:	48000400 	.word	0x48000400

0800336c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003370:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <MX_USART1_UART_Init+0x5c>)
 8003374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003376:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 8003378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800337c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003384:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003390:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 8003392:	220c      	movs	r2, #12
 8003394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003396:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033a2:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ae:	4805      	ldr	r0, [pc, #20]	@ (80033c4 <MX_USART1_UART_Init+0x58>)
 80033b0:	f006 fd64 	bl	8009e7c <HAL_UART_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80033ba:	f7ff fa1d 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000bb0 	.word	0x20000bb0
 80033c8:	40013800 	.word	0x40013800

080033cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b0ac      	sub	sp, #176	@ 0xb0
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	2288      	movs	r2, #136	@ 0x88
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f007 ff91 	bl	800b314 <memset>
  if(uartHandle->Instance==USART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a21      	ldr	r2, [pc, #132]	@ (800347c <HAL_UART_MspInit+0xb0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d13a      	bne.n	8003472 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003400:	2300      	movs	r3, #0
 8003402:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4618      	mov	r0, r3
 800340a:	f002 f99d 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003414:	f7ff f9f0 	bl	80027f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003418:	4b19      	ldr	r3, [pc, #100]	@ (8003480 <HAL_UART_MspInit+0xb4>)
 800341a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341c:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <HAL_UART_MspInit+0xb4>)
 800341e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003422:	6613      	str	r3, [r2, #96]	@ 0x60
 8003424:	4b16      	ldr	r3, [pc, #88]	@ (8003480 <HAL_UART_MspInit+0xb4>)
 8003426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003430:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <HAL_UART_MspInit+0xb4>)
 8003432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003434:	4a12      	ldr	r2, [pc, #72]	@ (8003480 <HAL_UART_MspInit+0xb4>)
 8003436:	f043 0302 	orr.w	r3, r3, #2
 800343a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343c:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <HAL_UART_MspInit+0xb4>)
 800343e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003448:	23c0      	movs	r3, #192	@ 0xc0
 800344a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003460:	2307      	movs	r3, #7
 8003462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003466:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800346a:	4619      	mov	r1, r3
 800346c:	4805      	ldr	r0, [pc, #20]	@ (8003484 <HAL_UART_MspInit+0xb8>)
 800346e:	f000 fd2f 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003472:	bf00      	nop
 8003474:	37b0      	adds	r7, #176	@ 0xb0
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40013800 	.word	0x40013800
 8003480:	40021000 	.word	0x40021000
 8003484:	48000400 	.word	0x48000400

08003488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800348c:	f7ff fbe0 	bl	8002c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003490:	480c      	ldr	r0, [pc, #48]	@ (80034c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <LoopForever+0xe>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034a8:	4c0a      	ldr	r4, [pc, #40]	@ (80034d4 <LoopForever+0x16>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034b6:	f007 ff91 	bl	800b3dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ba:	f7ff f90d 	bl	80026d8 <main>

080034be <LoopForever>:

LoopForever:
    b LoopForever
 80034be:	e7fe      	b.n	80034be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80034cc:	0800c794 	.word	0x0800c794
  ldr r2, =_sbss
 80034d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80034d4:	20000d88 	.word	0x20000d88

080034d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034d8:	e7fe      	b.n	80034d8 <ADC1_2_IRQHandler>

080034da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f000 f93d 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ea:	200f      	movs	r0, #15
 80034ec:	f000 f80e 	bl	800350c <HAL_InitTick>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	e001      	b.n	8003500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034fc:	f7ff fa7e 	bl	80029fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003500:	79fb      	ldrb	r3, [r7, #7]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <HAL_InitTick+0x6c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d023      	beq.n	8003568 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003520:	4b16      	ldr	r3, [pc, #88]	@ (800357c <HAL_InitTick+0x70>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <HAL_InitTick+0x6c>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800352e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f978 	bl	800382c <HAL_SYSTICK_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b0f      	cmp	r3, #15
 8003546:	d809      	bhi.n	800355c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003548:	2200      	movs	r2, #0
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f000 f928 	bl	80037a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003554:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <HAL_InitTick+0x74>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e007      	b.n	800356c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e004      	b.n	800356c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e001      	b.n	800356c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000018 	.word	0x20000018
 800357c:	20000010 	.word	0x20000010
 8003580:	20000014 	.word	0x20000014

08003584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_IncTick+0x20>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_IncTick+0x24>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4413      	add	r3, r2
 8003594:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <HAL_IncTick+0x24>)
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000018 	.word	0x20000018
 80035a8:	20000c38 	.word	0x20000c38

080035ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return uwTick;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_GetTick+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000c38 	.word	0x20000c38

080035c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	@ (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b07      	cmp	r3, #7
 8003770:	d00f      	beq.n	8003792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d00c      	beq.n	8003792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d009      	beq.n	8003792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d006      	beq.n	8003792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d003      	beq.n	8003792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800378a:	21a6      	movs	r1, #166	@ 0xa6
 800378c:	4804      	ldr	r0, [pc, #16]	@ (80037a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800378e:	f7ff f84b 	bl	8002828 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff16 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	0800c4c0 	.word	0x0800c4c0

080037a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d903      	bls.n	80037c4 <HAL_NVIC_SetPriority+0x20>
 80037bc:	21be      	movs	r1, #190	@ 0xbe
 80037be:	480e      	ldr	r0, [pc, #56]	@ (80037f8 <HAL_NVIC_SetPriority+0x54>)
 80037c0:	f7ff f832 	bl	8002828 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d903      	bls.n	80037d2 <HAL_NVIC_SetPriority+0x2e>
 80037ca:	21bf      	movs	r1, #191	@ 0xbf
 80037cc:	480a      	ldr	r0, [pc, #40]	@ (80037f8 <HAL_NVIC_SetPriority+0x54>)
 80037ce:	f7ff f82b 	bl	8002828 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80037d2:	f7ff ff1b 	bl	800360c <__NVIC_GetPriorityGrouping>
 80037d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	6978      	ldr	r0, [r7, #20]
 80037de:	f7ff ff6b 	bl	80036b8 <NVIC_EncodePriority>
 80037e2:	4602      	mov	r2, r0
 80037e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ff3a 	bl	8003664 <__NVIC_SetPriority>
}
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	0800c4c0 	.word	0x0800c4c0

080037fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	2b00      	cmp	r3, #0
 800380c:	da03      	bge.n	8003816 <HAL_NVIC_EnableIRQ+0x1a>
 800380e:	21d2      	movs	r1, #210	@ 0xd2
 8003810:	4805      	ldr	r0, [pc, #20]	@ (8003828 <HAL_NVIC_EnableIRQ+0x2c>)
 8003812:	f7ff f809 	bl	8002828 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff04 	bl	8003628 <__NVIC_EnableIRQ>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	0800c4c0 	.word	0x0800c4c0

0800382c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff73 	bl	8003720 <SysTick_Config>
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e19d      	b.n	8003b92 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a79      	ldr	r2, [pc, #484]	@ (8003a40 <HAL_DMA_Init+0x1fc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d044      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a77      	ldr	r2, [pc, #476]	@ (8003a44 <HAL_DMA_Init+0x200>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03f      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a76      	ldr	r2, [pc, #472]	@ (8003a48 <HAL_DMA_Init+0x204>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d03a      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a74      	ldr	r2, [pc, #464]	@ (8003a4c <HAL_DMA_Init+0x208>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d035      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a73      	ldr	r2, [pc, #460]	@ (8003a50 <HAL_DMA_Init+0x20c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d030      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a71      	ldr	r2, [pc, #452]	@ (8003a54 <HAL_DMA_Init+0x210>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d02b      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a70      	ldr	r2, [pc, #448]	@ (8003a58 <HAL_DMA_Init+0x214>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d026      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a5c <HAL_DMA_Init+0x218>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d021      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003a60 <HAL_DMA_Init+0x21c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d01c      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003a64 <HAL_DMA_Init+0x220>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d017      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6a      	ldr	r2, [pc, #424]	@ (8003a68 <HAL_DMA_Init+0x224>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d012      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a68      	ldr	r2, [pc, #416]	@ (8003a6c <HAL_DMA_Init+0x228>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a67      	ldr	r2, [pc, #412]	@ (8003a70 <HAL_DMA_Init+0x22c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d008      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a65      	ldr	r2, [pc, #404]	@ (8003a74 <HAL_DMA_Init+0x230>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <HAL_DMA_Init+0xa6>
 80038e2:	21a5      	movs	r1, #165	@ 0xa5
 80038e4:	4864      	ldr	r0, [pc, #400]	@ (8003a78 <HAL_DMA_Init+0x234>)
 80038e6:	f7fe ff9f 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_DMA_Init+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d008      	beq.n	800390c <HAL_DMA_Init+0xc8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003902:	d003      	beq.n	800390c <HAL_DMA_Init+0xc8>
 8003904:	21a6      	movs	r1, #166	@ 0xa6
 8003906:	485c      	ldr	r0, [pc, #368]	@ (8003a78 <HAL_DMA_Init+0x234>)
 8003908:	f7fe ff8e 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b40      	cmp	r3, #64	@ 0x40
 8003912:	d007      	beq.n	8003924 <HAL_DMA_Init+0xe0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_DMA_Init+0xe0>
 800391c:	21a7      	movs	r1, #167	@ 0xa7
 800391e:	4856      	ldr	r0, [pc, #344]	@ (8003a78 <HAL_DMA_Init+0x234>)
 8003920:	f7fe ff82 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b80      	cmp	r3, #128	@ 0x80
 800392a:	d007      	beq.n	800393c <HAL_DMA_Init+0xf8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_DMA_Init+0xf8>
 8003934:	21a8      	movs	r1, #168	@ 0xa8
 8003936:	4850      	ldr	r0, [pc, #320]	@ (8003a78 <HAL_DMA_Init+0x234>)
 8003938:	f7fe ff76 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <HAL_DMA_Init+0x11c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394c:	d008      	beq.n	8003960 <HAL_DMA_Init+0x11c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	d003      	beq.n	8003960 <HAL_DMA_Init+0x11c>
 8003958:	21a9      	movs	r1, #169	@ 0xa9
 800395a:	4847      	ldr	r0, [pc, #284]	@ (8003a78 <HAL_DMA_Init+0x234>)
 800395c:	f7fe ff64 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_DMA_Init+0x140>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003970:	d008      	beq.n	8003984 <HAL_DMA_Init+0x140>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397a:	d003      	beq.n	8003984 <HAL_DMA_Init+0x140>
 800397c:	21aa      	movs	r1, #170	@ 0xaa
 800397e:	483e      	ldr	r0, [pc, #248]	@ (8003a78 <HAL_DMA_Init+0x234>)
 8003980:	f7fe ff52 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_DMA_Init+0x158>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b20      	cmp	r3, #32
 8003992:	d003      	beq.n	800399c <HAL_DMA_Init+0x158>
 8003994:	21ab      	movs	r1, #171	@ 0xab
 8003996:	4838      	ldr	r0, [pc, #224]	@ (8003a78 <HAL_DMA_Init+0x234>)
 8003998:	f7fe ff46 	bl	8002828 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_DMA_Init+0x186>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ac:	d00d      	beq.n	80039ca <HAL_DMA_Init+0x186>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b6:	d008      	beq.n	80039ca <HAL_DMA_Init+0x186>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c0:	d003      	beq.n	80039ca <HAL_DMA_Init+0x186>
 80039c2:	21ac      	movs	r1, #172	@ 0xac
 80039c4:	482c      	ldr	r0, [pc, #176]	@ (8003a78 <HAL_DMA_Init+0x234>)
 80039c6:	f7fe ff2f 	bl	8002828 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01f      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d01b      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d017      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d013      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d00f      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d00b      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d007      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b07      	cmp	r3, #7
 8003a08:	d003      	beq.n	8003a12 <HAL_DMA_Init+0x1ce>
 8003a0a:	21ae      	movs	r1, #174	@ 0xae
 8003a0c:	481a      	ldr	r0, [pc, #104]	@ (8003a78 <HAL_DMA_Init+0x234>)
 8003a0e:	f7fe ff0b 	bl	8002828 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <HAL_DMA_Init+0x238>)
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d836      	bhi.n	8003a8c <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b16      	ldr	r3, [pc, #88]	@ (8003a80 <HAL_DMA_Init+0x23c>)
 8003a26:	4413      	add	r3, r2
 8003a28:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_DMA_Init+0x240>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	009a      	lsls	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a13      	ldr	r2, [pc, #76]	@ (8003a88 <HAL_DMA_Init+0x244>)
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a3c:	e035      	b.n	8003aaa <HAL_DMA_Init+0x266>
 8003a3e:	bf00      	nop
 8003a40:	40020008 	.word	0x40020008
 8003a44:	4002001c 	.word	0x4002001c
 8003a48:	40020030 	.word	0x40020030
 8003a4c:	40020044 	.word	0x40020044
 8003a50:	40020058 	.word	0x40020058
 8003a54:	4002006c 	.word	0x4002006c
 8003a58:	40020080 	.word	0x40020080
 8003a5c:	40020408 	.word	0x40020408
 8003a60:	4002041c 	.word	0x4002041c
 8003a64:	40020430 	.word	0x40020430
 8003a68:	40020444 	.word	0x40020444
 8003a6c:	40020458 	.word	0x40020458
 8003a70:	4002046c 	.word	0x4002046c
 8003a74:	40020480 	.word	0x40020480
 8003a78:	0800c4fc 	.word	0x0800c4fc
 8003a7c:	40020407 	.word	0x40020407
 8003a80:	bffdfff8 	.word	0xbffdfff8
 8003a84:	cccccccd 	.word	0xcccccccd
 8003a88:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b42      	ldr	r3, [pc, #264]	@ (8003b9c <HAL_DMA_Init+0x358>)
 8003a94:	4413      	add	r3, r2
 8003a96:	4a42      	ldr	r2, [pc, #264]	@ (8003ba0 <HAL_DMA_Init+0x35c>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	009a      	lsls	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ba4 <HAL_DMA_Init+0x360>)
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b04:	d039      	beq.n	8003b7a <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ba8 <HAL_DMA_Init+0x364>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d11a      	bne.n	8003b46 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b10:	4b26      	ldr	r3, [pc, #152]	@ (8003bac <HAL_DMA_Init+0x368>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	f003 031c 	and.w	r3, r3, #28
 8003b1c:	210f      	movs	r1, #15
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	4921      	ldr	r1, [pc, #132]	@ (8003bac <HAL_DMA_Init+0x368>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b2a:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <HAL_DMA_Init+0x368>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	f003 031c 	and.w	r3, r3, #28
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	491b      	ldr	r1, [pc, #108]	@ (8003bac <HAL_DMA_Init+0x368>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e019      	b.n	8003b7a <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b46:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_DMA_Init+0x36c>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f003 031c 	and.w	r3, r3, #28
 8003b52:	210f      	movs	r1, #15
 8003b54:	fa01 f303 	lsl.w	r3, r1, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	4915      	ldr	r1, [pc, #84]	@ (8003bb0 <HAL_DMA_Init+0x36c>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b60:	4b13      	ldr	r3, [pc, #76]	@ (8003bb0 <HAL_DMA_Init+0x36c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f003 031c 	and.w	r3, r3, #28
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	490e      	ldr	r1, [pc, #56]	@ (8003bb0 <HAL_DMA_Init+0x36c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	bffdfbf8 	.word	0xbffdfbf8
 8003ba0:	cccccccd 	.word	0xcccccccd
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020000 	.word	0x40020000
 8003bac:	400200a8 	.word	0x400200a8
 8003bb0:	400204a8 	.word	0x400204a8

08003bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_DMA_Start_IT+0x20>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd2:	d304      	bcc.n	8003bde <HAL_DMA_Start_IT+0x2a>
 8003bd4:	f240 11df 	movw	r1, #479	@ 0x1df
 8003bd8:	482c      	ldr	r0, [pc, #176]	@ (8003c8c <HAL_DMA_Start_IT+0xd8>)
 8003bda:	f7fe fe25 	bl	8002828 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_DMA_Start_IT+0x38>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e04b      	b.n	8003c84 <HAL_DMA_Start_IT+0xd0>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d13a      	bne.n	8003c76 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f923 	bl	8003e70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 020e 	orr.w	r2, r2, #14
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e00f      	b.n	8003c64 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 020a 	orr.w	r2, r2, #10
 8003c62:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e005      	b.n	8003c82 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	0800c4fc 	.word	0x0800c4fc

08003c90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d005      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2204      	movs	r2, #4
 8003cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e029      	b.n	8003d08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 020e 	bic.w	r2, r2, #14
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd8:	f003 021c 	and.w	r2, r3, #28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
    }
  }
  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f003 031c 	and.w	r3, r3, #28
 8003d32:	2204      	movs	r2, #4
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d026      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x7a>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d021      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f003 021c 	and.w	r2, r3, #28
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	2104      	movs	r1, #4
 8003d74:	fa01 f202 	lsl.w	r2, r1, r2
 8003d78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d071      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d8a:	e06c      	b.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	f003 031c 	and.w	r3, r3, #28
 8003d94:	2202      	movs	r2, #2
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02e      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xec>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d029      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020a 	bic.w	r2, r2, #10
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd4:	f003 021c 	and.w	r2, r3, #28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2102      	movs	r1, #2
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d038      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dfc:	e033      	b.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f003 031c 	and.w	r3, r3, #28
 8003e06:	2208      	movs	r2, #8
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02a      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d025      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 020e 	bic.w	r2, r2, #14
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	f003 021c 	and.w	r2, r3, #28
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
}
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f003 021c 	and.w	r2, r3, #28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d108      	bne.n	8003eb4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eb2:	e007      	b.n	8003ec4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fdc <HAL_GPIO_Init+0x10c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe0 <HAL_GPIO_Init+0x110>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d017      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8003fe4 <HAL_GPIO_Init+0x114>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a39      	ldr	r2, [pc, #228]	@ (8003fe8 <HAL_GPIO_Init+0x118>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a38      	ldr	r2, [pc, #224]	@ (8003fec <HAL_GPIO_Init+0x11c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a37      	ldr	r2, [pc, #220]	@ (8003ff0 <HAL_GPIO_Init+0x120>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a36      	ldr	r2, [pc, #216]	@ (8003ff4 <HAL_GPIO_Init+0x124>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003f1e:	21aa      	movs	r1, #170	@ 0xaa
 8003f20:	4835      	ldr	r0, [pc, #212]	@ (8003ff8 <HAL_GPIO_Init+0x128>)
 8003f22:	f7fe fc81 	bl	8002828 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_GPIO_Init+0x6a>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f38:	d303      	bcc.n	8003f42 <HAL_GPIO_Init+0x72>
 8003f3a:	21ab      	movs	r1, #171	@ 0xab
 8003f3c:	482e      	ldr	r0, [pc, #184]	@ (8003ff8 <HAL_GPIO_Init+0x128>)
 8003f3e:	f7fe fc73 	bl	8002828 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 823d 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f000 8238 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b11      	cmp	r3, #17
 8003f5c:	f000 8233 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f000 822e 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b12      	cmp	r3, #18
 8003f70:	f000 8229 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003f7c:	f000 8223 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003f88:	f000 821d 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003f94:	f000 8217 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003fa0:	f000 8211 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003fac:	f000 820b 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003fb8:	f000 8205 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	f000 8200 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b0b      	cmp	r3, #11
 8003fcc:	f000 81fb 	beq.w	80043c6 <HAL_GPIO_Init+0x4f6>
 8003fd0:	21ac      	movs	r1, #172	@ 0xac
 8003fd2:	4809      	ldr	r0, [pc, #36]	@ (8003ff8 <HAL_GPIO_Init+0x128>)
 8003fd4:	f7fe fc28 	bl	8002828 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fd8:	e1f5      	b.n	80043c6 <HAL_GPIO_Init+0x4f6>
 8003fda:	bf00      	nop
 8003fdc:	48000400 	.word	0x48000400
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000c00 	.word	0x48000c00
 8003fe8:	48001000 	.word	0x48001000
 8003fec:	48001400 	.word	0x48001400
 8003ff0:	48001800 	.word	0x48001800
 8003ff4:	48001c00 	.word	0x48001c00
 8003ff8:	0800c534 	.word	0x0800c534
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 81d6 	beq.w	80043c0 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <HAL_GPIO_Init+0x15c>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d144      	bne.n	80040b6 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <HAL_GPIO_Init+0x184>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d00b      	beq.n	8004054 <HAL_GPIO_Init+0x184>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d007      	beq.n	8004054 <HAL_GPIO_Init+0x184>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x184>
 800404c:	21bb      	movs	r1, #187	@ 0xbb
 800404e:	489c      	ldr	r0, [pc, #624]	@ (80042c0 <HAL_GPIO_Init+0x3f0>)
 8004050:	f7fe fbea 	bl	8002828 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4013      	ands	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800408a:	2201      	movs	r2, #1
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 0201 	and.w	r2, r3, #1
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d118      	bne.n	80040f4 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040c8:	2201      	movs	r2, #1
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	08db      	lsrs	r3, r3, #3
 80040de:	f003 0201 	and.w	r2, r3, #1
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d027      	beq.n	8004150 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_GPIO_Init+0x250>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d007      	beq.n	8004120 <HAL_GPIO_Init+0x250>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x250>
 8004118:	21dc      	movs	r1, #220	@ 0xdc
 800411a:	4869      	ldr	r0, [pc, #420]	@ (80042c0 <HAL_GPIO_Init+0x3f0>)
 800411c:	f7fe fb84 	bl	8002828 <assert_failed>

        temp = GPIOx->PUPDR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d14f      	bne.n	80041fc <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004162:	d01f      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a57      	ldr	r2, [pc, #348]	@ (80042c4 <HAL_GPIO_Init+0x3f4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01b      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a56      	ldr	r2, [pc, #344]	@ (80042c8 <HAL_GPIO_Init+0x3f8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d017      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a55      	ldr	r2, [pc, #340]	@ (80042cc <HAL_GPIO_Init+0x3fc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a54      	ldr	r2, [pc, #336]	@ (80042d0 <HAL_GPIO_Init+0x400>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00f      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a53      	ldr	r2, [pc, #332]	@ (80042d4 <HAL_GPIO_Init+0x404>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a52      	ldr	r2, [pc, #328]	@ (80042d8 <HAL_GPIO_Init+0x408>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a51      	ldr	r2, [pc, #324]	@ (80042dc <HAL_GPIO_Init+0x40c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
 800419c:	21e8      	movs	r1, #232	@ 0xe8
 800419e:	4848      	ldr	r0, [pc, #288]	@ (80042c0 <HAL_GPIO_Init+0x3f0>)
 80041a0:	f7fe fb42 	bl	8002828 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	d903      	bls.n	80041b4 <HAL_GPIO_Init+0x2e4>
 80041ac:	21e9      	movs	r1, #233	@ 0xe9
 80041ae:	4844      	ldr	r0, [pc, #272]	@ (80042c0 <HAL_GPIO_Init+0x3f0>)
 80041b0:	f7fe fb3a 	bl	8002828 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	220f      	movs	r2, #15
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	08da      	lsrs	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3208      	adds	r2, #8
 80041f6:	6939      	ldr	r1, [r7, #16]
 80041f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 0203 	and.w	r2, r3, #3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80c1 	beq.w	80043c0 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423e:	4b28      	ldr	r3, [pc, #160]	@ (80042e0 <HAL_GPIO_Init+0x410>)
 8004240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004242:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <HAL_GPIO_Init+0x410>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6613      	str	r3, [r2, #96]	@ 0x60
 800424a:	4b25      	ldr	r3, [pc, #148]	@ (80042e0 <HAL_GPIO_Init+0x410>)
 800424c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004256:	4a23      	ldr	r2, [pc, #140]	@ (80042e4 <HAL_GPIO_Init+0x414>)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	3302      	adds	r3, #2
 800425e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	220f      	movs	r2, #15
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004280:	d03a      	beq.n	80042f8 <HAL_GPIO_Init+0x428>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0f      	ldr	r2, [pc, #60]	@ (80042c4 <HAL_GPIO_Init+0x3f4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d034      	beq.n	80042f4 <HAL_GPIO_Init+0x424>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a0e      	ldr	r2, [pc, #56]	@ (80042c8 <HAL_GPIO_Init+0x3f8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02e      	beq.n	80042f0 <HAL_GPIO_Init+0x420>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <HAL_GPIO_Init+0x3fc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d028      	beq.n	80042ec <HAL_GPIO_Init+0x41c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0c      	ldr	r2, [pc, #48]	@ (80042d0 <HAL_GPIO_Init+0x400>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_GPIO_Init+0x418>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a0b      	ldr	r2, [pc, #44]	@ (80042d4 <HAL_GPIO_Init+0x404>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <HAL_GPIO_Init+0x3ea>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <HAL_GPIO_Init+0x408>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_GPIO_Init+0x3e6>
 80042b2:	2306      	movs	r3, #6
 80042b4:	e021      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042b6:	2307      	movs	r3, #7
 80042b8:	e01f      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042ba:	2305      	movs	r3, #5
 80042bc:	e01d      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042be:	bf00      	nop
 80042c0:	0800c534 	.word	0x0800c534
 80042c4:	48000400 	.word	0x48000400
 80042c8:	48000800 	.word	0x48000800
 80042cc:	48000c00 	.word	0x48000c00
 80042d0:	48001000 	.word	0x48001000
 80042d4:	48001400 	.word	0x48001400
 80042d8:	48001800 	.word	0x48001800
 80042dc:	48001c00 	.word	0x48001c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40010000 	.word	0x40010000
 80042e8:	2304      	movs	r3, #4
 80042ea:	e006      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042ec:	2303      	movs	r3, #3
 80042ee:	e004      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e002      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_GPIO_Init+0x42a>
 80042f8:	2300      	movs	r3, #0
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	f002 0203 	and.w	r2, r2, #3
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	4093      	lsls	r3, r2
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800430a:	4935      	ldr	r1, [pc, #212]	@ (80043e0 <HAL_GPIO_Init+0x510>)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004318:	4b32      	ldr	r3, [pc, #200]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800433c:	4a29      	ldr	r2, [pc, #164]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004342:	4b28      	ldr	r3, [pc, #160]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004366:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004390:	4a14      	ldr	r2, [pc, #80]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004396:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043ba:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <HAL_GPIO_Init+0x514>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f ae13 	bne.w	8003ffc <HAL_GPIO_Init+0x12c>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40010400 	.word	0x40010400

080043e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043fc:	d020      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a84      	ldr	r2, [pc, #528]	@ (8004614 <HAL_GPIO_DeInit+0x22c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01c      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a83      	ldr	r2, [pc, #524]	@ (8004618 <HAL_GPIO_DeInit+0x230>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d018      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a82      	ldr	r2, [pc, #520]	@ (800461c <HAL_GPIO_DeInit+0x234>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d014      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a81      	ldr	r2, [pc, #516]	@ (8004620 <HAL_GPIO_DeInit+0x238>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d010      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a80      	ldr	r2, [pc, #512]	@ (8004624 <HAL_GPIO_DeInit+0x23c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00c      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a7f      	ldr	r2, [pc, #508]	@ (8004628 <HAL_GPIO_DeInit+0x240>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d008      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a7e      	ldr	r2, [pc, #504]	@ (800462c <HAL_GPIO_DeInit+0x244>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_GPIO_DeInit+0x58>
 8004436:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 800443a:	487d      	ldr	r0, [pc, #500]	@ (8004630 <HAL_GPIO_DeInit+0x248>)
 800443c:	f7fe f9f4 	bl	8002828 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_GPIO_DeInit+0x6a>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444e:	f0c0 80d4 	bcc.w	80045fa <HAL_GPIO_DeInit+0x212>
 8004452:	f240 113b 	movw	r1, #315	@ 0x13b
 8004456:	4876      	ldr	r0, [pc, #472]	@ (8004630 <HAL_GPIO_DeInit+0x248>)
 8004458:	f7fe f9e6 	bl	8002828 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800445c:	e0cd      	b.n	80045fa <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800445e:	2201      	movs	r2, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80c0 	beq.w	80045f4 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004474:	4a6f      	ldr	r2, [pc, #444]	@ (8004634 <HAL_GPIO_DeInit+0x24c>)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	3302      	adds	r3, #2
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4013      	ands	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_DeInit+0x102>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004614 <HAL_GPIO_DeInit+0x22c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_DeInit+0xfe>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a5b      	ldr	r2, [pc, #364]	@ (8004618 <HAL_GPIO_DeInit+0x230>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_DeInit+0xfa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a5a      	ldr	r2, [pc, #360]	@ (800461c <HAL_GPIO_DeInit+0x234>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_DeInit+0xf6>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a59      	ldr	r2, [pc, #356]	@ (8004620 <HAL_GPIO_DeInit+0x238>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_DeInit+0xf2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a58      	ldr	r2, [pc, #352]	@ (8004624 <HAL_GPIO_DeInit+0x23c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_DeInit+0xee>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a57      	ldr	r2, [pc, #348]	@ (8004628 <HAL_GPIO_DeInit+0x240>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_DeInit+0xea>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e00c      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00a      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044d6:	2305      	movs	r3, #5
 80044d8:	e008      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044da:	2304      	movs	r3, #4
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044de:	2303      	movs	r3, #3
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_DeInit+0x104>
 80044ea:	2300      	movs	r3, #0
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	f002 0203 	and.w	r2, r2, #3
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d132      	bne.n	8004562 <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	43db      	mvns	r3, r3
 8004504:	494c      	ldr	r1, [pc, #304]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 8004506:	4013      	ands	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800450a:	4b4b      	ldr	r3, [pc, #300]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	4949      	ldr	r1, [pc, #292]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 8004514:	4013      	ands	r3, r2
 8004516:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004518:	4b47      	ldr	r3, [pc, #284]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	43db      	mvns	r3, r3
 8004520:	4945      	ldr	r1, [pc, #276]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 8004522:	4013      	ands	r3, r2
 8004524:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004526:	4b44      	ldr	r3, [pc, #272]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	43db      	mvns	r3, r3
 800452e:	4942      	ldr	r1, [pc, #264]	@ (8004638 <HAL_GPIO_DeInit+0x250>)
 8004530:	4013      	ands	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	220f      	movs	r2, #15
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004544:	4a3b      	ldr	r2, [pc, #236]	@ (8004634 <HAL_GPIO_DeInit+0x24c>)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	3302      	adds	r3, #2
 800454c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43da      	mvns	r2, r3
 8004554:	4837      	ldr	r0, [pc, #220]	@ (8004634 <HAL_GPIO_DeInit+0x24c>)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	400a      	ands	r2, r1
 800455c:	3302      	adds	r3, #2
 800455e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2103      	movs	r1, #3
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	08da      	lsrs	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3208      	adds	r2, #8
 800457e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	220f      	movs	r2, #15
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	08d2      	lsrs	r2, r2, #3
 8004596:	4019      	ands	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2103      	movs	r1, #3
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	401a      	ands	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	2101      	movs	r1, #1
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	401a      	ands	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2103      	movs	r1, #3
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	401a      	ands	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e4:	2101      	movs	r1, #1
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3301      	adds	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	f47f af2b 	bne.w	800445e <HAL_GPIO_DeInit+0x76>
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	48000400 	.word	0x48000400
 8004618:	48000800 	.word	0x48000800
 800461c:	48000c00 	.word	0x48000c00
 8004620:	48001000 	.word	0x48001000
 8004624:	48001400 	.word	0x48001400
 8004628:	48001800 	.word	0x48001800
 800462c:	48001c00 	.word	0x48001c00
 8004630:	0800c534 	.word	0x0800c534
 8004634:	40010000 	.word	0x40010000
 8004638:	40010400 	.word	0x40010400

0800463c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
 8004648:	4613      	mov	r3, r2
 800464a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <HAL_GPIO_WritePin+0x20>
 8004652:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004656:	480e      	ldr	r0, [pc, #56]	@ (8004690 <HAL_GPIO_WritePin+0x54>)
 8004658:	f7fe f8e6 	bl	8002828 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_GPIO_WritePin+0x36>
 8004662:	787b      	ldrb	r3, [r7, #1]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d004      	beq.n	8004672 <HAL_GPIO_WritePin+0x36>
 8004668:	f240 11af 	movw	r1, #431	@ 0x1af
 800466c:	4808      	ldr	r0, [pc, #32]	@ (8004690 <HAL_GPIO_WritePin+0x54>)
 800466e:	f7fe f8db 	bl	8002828 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004672:	787b      	ldrb	r3, [r7, #1]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800467e:	e002      	b.n	8004686 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	0800c534 	.word	0x0800c534

08004694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800469e:	4b08      	ldr	r3, [pc, #32]	@ (80046c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046aa:	4a05      	ldr	r2, [pc, #20]	@ (80046c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f806 	bl	80046c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40010400 	.word	0x40010400

080046c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40007000 	.word	0x40007000

080046f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004706:	d007      	beq.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x20>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d003      	beq.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x20>
 8004710:	21a7      	movs	r1, #167	@ 0xa7
 8004712:	4826      	ldr	r0, [pc, #152]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004714:	f7fe f888 	bl	8002828 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471e:	d130      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004720:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d038      	beq.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800472e:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004736:	4a1e      	ldr	r2, [pc, #120]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800473e:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2232      	movs	r2, #50	@ 0x32
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	4a1b      	ldr	r2, [pc, #108]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0c9b      	lsrs	r3, r3, #18
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004754:	e002      	b.n	800475c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3b01      	subs	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004768:	d102      	bne.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x78>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f2      	bne.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004770:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477c:	d110      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e00f      	b.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478e:	d007      	beq.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004790:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004798:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800479a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	0800c570 	.word	0x0800c570
 80047b0:	40007000 	.word	0x40007000
 80047b4:	20000010 	.word	0x20000010
 80047b8:	431bde83 	.word	0x431bde83

080047bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f000 bcef 	b.w	80051ae <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_OscConfig+0x2e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b1f      	cmp	r3, #31
 80047de:	d904      	bls.n	80047ea <HAL_RCC_OscConfig+0x2e>
 80047e0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80047e4:	489a      	ldr	r0, [pc, #616]	@ (8004a50 <HAL_RCC_OscConfig+0x294>)
 80047e6:	f7fe f81f 	bl	8002828 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ea:	4b9a      	ldr	r3, [pc, #616]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f4:	4b97      	ldr	r3, [pc, #604]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 813d 	beq.w	8004a86 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_OscConfig+0x6a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d004      	beq.n	8004826 <HAL_RCC_OscConfig+0x6a>
 800481c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8004820:	488b      	ldr	r0, [pc, #556]	@ (8004a50 <HAL_RCC_OscConfig+0x294>)
 8004822:	f7fe f801 	bl	8002828 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2bff      	cmp	r3, #255	@ 0xff
 800482c:	d904      	bls.n	8004838 <HAL_RCC_OscConfig+0x7c>
 800482e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8004832:	4887      	ldr	r0, [pc, #540]	@ (8004a50 <HAL_RCC_OscConfig+0x294>)
 8004834:	f7fd fff8 	bl	8002828 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d030      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	2b10      	cmp	r3, #16
 8004846:	d02c      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	2b20      	cmp	r3, #32
 800484e:	d028      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	2b30      	cmp	r3, #48	@ 0x30
 8004856:	d024      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	2b50      	cmp	r3, #80	@ 0x50
 8004866:	d01c      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	2b60      	cmp	r3, #96	@ 0x60
 800486e:	d018      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	2b70      	cmp	r3, #112	@ 0x70
 8004876:	d014      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	2b80      	cmp	r3, #128	@ 0x80
 800487e:	d010      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	2b90      	cmp	r3, #144	@ 0x90
 8004886:	d00c      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	2ba0      	cmp	r3, #160	@ 0xa0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2bb0      	cmp	r3, #176	@ 0xb0
 8004896:	d004      	beq.n	80048a2 <HAL_RCC_OscConfig+0xe6>
 8004898:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800489c:	486c      	ldr	r0, [pc, #432]	@ (8004a50 <HAL_RCC_OscConfig+0x294>)
 800489e:	f7fd ffc3 	bl	8002828 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <HAL_RCC_OscConfig+0xfc>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	f040 808e 	bne.w	80049cc <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	f040 808a 	bne.w	80049cc <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048b8:	4b66      	ldr	r3, [pc, #408]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d006      	beq.n	80048d2 <HAL_RCC_OscConfig+0x116>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f000 bc6e 	b.w	80051ae <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_RCC_OscConfig+0x130>
 80048e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048ea:	e005      	b.n	80048f8 <HAL_RCC_OscConfig+0x13c>
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d224      	bcs.n	8004946 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fec1 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f000 bc4e 	b.w	80051ae <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004912:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a4f      	ldr	r2, [pc, #316]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004918:	f043 0308 	orr.w	r3, r3, #8
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	494a      	ldr	r1, [pc, #296]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004930:	4b48      	ldr	r3, [pc, #288]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	4945      	ldr	r1, [pc, #276]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	e026      	b.n	8004994 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004946:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a42      	ldr	r2, [pc, #264]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b40      	ldr	r3, [pc, #256]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	493d      	ldr	r1, [pc, #244]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004964:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	4938      	ldr	r1, [pc, #224]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fe80 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f000 bc0d 	b.w	80051ae <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004994:	f000 fdb4 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	492c      	ldr	r1, [pc, #176]	@ (8004a58 <HAL_RCC_OscConfig+0x29c>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a5c <HAL_RCC_OscConfig+0x2a0>)
 80049b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a60 <HAL_RCC_OscConfig+0x2a4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe fda7 	bl	800350c <HAL_InitTick>
 80049be:	4603      	mov	r3, r0
 80049c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05d      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	e3f0      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d032      	beq.n	8004a3a <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049e0:	f7fe fde4 	bl	80035ac <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e8:	f7fe fde0 	bl	80035ac <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e3d9      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049fa:	4b16      	ldr	r3, [pc, #88]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a06:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a12      	ldr	r2, [pc, #72]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	4908      	ldr	r1, [pc, #32]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]
 8004a38:	e025      	b.n	8004a86 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a3a:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a05      	ldr	r2, [pc, #20]	@ (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a46:	f7fe fdb1 	bl	80035ac <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a4c:	e013      	b.n	8004a76 <HAL_RCC_OscConfig+0x2ba>
 8004a4e:	bf00      	nop
 8004a50:	0800c5ac 	.word	0x0800c5ac
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800c708 	.word	0x0800c708
 8004a5c:	20000010 	.word	0x20000010
 8004a60:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a64:	f7fe fda2 	bl	80035ac <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e39b      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a76:	4b97      	ldr	r3, [pc, #604]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2a8>
 8004a82:	e000      	b.n	8004a86 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d07e      	beq.n	8004b90 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2fc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2fc>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aac:	d004      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2fc>
 8004aae:	f240 2119 	movw	r1, #537	@ 0x219
 8004ab2:	4889      	ldr	r0, [pc, #548]	@ (8004cd8 <HAL_RCC_OscConfig+0x51c>)
 8004ab4:	f7fd feb8 	bl	8002828 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x30e>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d10e      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aca:	4b82      	ldr	r3, [pc, #520]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d05b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x3d2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d157      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e365      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x33e>
 8004aec:	4b79      	ldr	r3, [pc, #484]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a78      	ldr	r2, [pc, #480]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e01d      	b.n	8004b36 <HAL_RCC_OscConfig+0x37a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b02:	d10c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x362>
 8004b04:	4b73      	ldr	r3, [pc, #460]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a72      	ldr	r2, [pc, #456]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b70      	ldr	r3, [pc, #448]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6f      	ldr	r2, [pc, #444]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e00b      	b.n	8004b36 <HAL_RCC_OscConfig+0x37a>
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a6c      	ldr	r2, [pc, #432]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a69      	ldr	r2, [pc, #420]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fe fd35 	bl	80035ac <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b46:	f7fe fd31 	bl	80035ac <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b64      	cmp	r3, #100	@ 0x64
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e32a      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b58:	4b5e      	ldr	r3, [pc, #376]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x38a>
 8004b64:	e014      	b.n	8004b90 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fe fd21 	bl	80035ac <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6e:	f7fe fd1d 	bl	80035ac <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b64      	cmp	r3, #100	@ 0x64
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e316      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b80:	4b54      	ldr	r3, [pc, #336]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x3b2>
 8004b8c:	e000      	b.n	8004b90 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d077      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x3fc>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bac:	d004      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x3fc>
 8004bae:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8004bb2:	4849      	ldr	r0, [pc, #292]	@ (8004cd8 <HAL_RCC_OscConfig+0x51c>)
 8004bb4:	f7fd fe38 	bl	8002828 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b1f      	cmp	r3, #31
 8004bbe:	d904      	bls.n	8004bca <HAL_RCC_OscConfig+0x40e>
 8004bc0:	f240 214d 	movw	r1, #589	@ 0x24d
 8004bc4:	4844      	ldr	r0, [pc, #272]	@ (8004cd8 <HAL_RCC_OscConfig+0x51c>)
 8004bc6:	f7fd fe2f 	bl	8002828 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x420>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d119      	bne.n	8004c0a <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d116      	bne.n	8004c0a <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x438>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e2dc      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf4:	4b37      	ldr	r3, [pc, #220]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	4934      	ldr	r1, [pc, #208]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c08:	e040      	b.n	8004c8c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d023      	beq.n	8004c5a <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c12:	4b30      	ldr	r3, [pc, #192]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7fe fcc5 	bl	80035ac <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fe fcc1 	bl	80035ac <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e2ba      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c38:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c44:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	4920      	ldr	r1, [pc, #128]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
 8004c58:	e018      	b.n	8004c8c <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fe fca1 	bl	80035ac <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6e:	f7fe fc9d 	bl	80035ac <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e296      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c80:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d04e      	beq.n	8004d36 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x4f6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d004      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x4f6>
 8004ca8:	f240 218d 	movw	r1, #653	@ 0x28d
 8004cac:	480a      	ldr	r0, [pc, #40]	@ (8004cd8 <HAL_RCC_OscConfig+0x51c>)
 8004cae:	f7fd fdbb 	bl	8002828 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d021      	beq.n	8004cfe <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc0:	4a04      	ldr	r2, [pc, #16]	@ (8004cd4 <HAL_RCC_OscConfig+0x518>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cca:	f7fe fc6f 	bl	80035ac <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd0:	e00d      	b.n	8004cee <HAL_RCC_OscConfig+0x532>
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800c5ac 	.word	0x0800c5ac
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fc66 	bl	80035ac <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e25f      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cee:	4b66      	ldr	r3, [pc, #408]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ef      	beq.n	8004cdc <HAL_RCC_OscConfig+0x520>
 8004cfc:	e01b      	b.n	8004d36 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfe:	4b62      	ldr	r3, [pc, #392]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d04:	4a60      	ldr	r2, [pc, #384]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0e:	f7fe fc4d 	bl	80035ac <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d16:	f7fe fc49 	bl	80035ac <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e242      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d28:	4b57      	ldr	r3, [pc, #348]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ef      	bne.n	8004d16 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80b8 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5ae>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d008      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5ae>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d004      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5ae>
 8004d60:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004d64:	4849      	ldr	r0, [pc, #292]	@ (8004e8c <HAL_RCC_OscConfig+0x6d0>)
 8004d66:	f7fd fd5f 	bl	8002828 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d6a:	4b47      	ldr	r3, [pc, #284]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10d      	bne.n	8004d92 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	4b44      	ldr	r3, [pc, #272]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	4a43      	ldr	r2, [pc, #268]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d82:	4b41      	ldr	r3, [pc, #260]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d92:	4b3f      	ldr	r3, [pc, #252]	@ (8004e90 <HAL_RCC_OscConfig+0x6d4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d118      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e90 <HAL_RCC_OscConfig+0x6d4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3b      	ldr	r2, [pc, #236]	@ (8004e90 <HAL_RCC_OscConfig+0x6d4>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004daa:	f7fe fbff 	bl	80035ac <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db2:	f7fe fbfb 	bl	80035ac <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e1f4      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc4:	4b32      	ldr	r3, [pc, #200]	@ (8004e90 <HAL_RCC_OscConfig+0x6d4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_RCC_OscConfig+0x62e>
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dde:	4a2a      	ldr	r2, [pc, #168]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004de8:	e024      	b.n	8004e34 <HAL_RCC_OscConfig+0x678>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d110      	bne.n	8004e14 <HAL_RCC_OscConfig+0x658>
 8004df2:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df8:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004dfa:	f043 0304 	orr.w	r3, r3, #4
 8004dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e02:	4b21      	ldr	r3, [pc, #132]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e08:	4a1f      	ldr	r2, [pc, #124]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e12:	e00f      	b.n	8004e34 <HAL_RCC_OscConfig+0x678>
 8004e14:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d016      	beq.n	8004e6a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fe fbb6 	bl	80035ac <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fe fbb2 	bl	80035ac <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1a9      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <HAL_RCC_OscConfig+0x6cc>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ed      	beq.n	8004e44 <HAL_RCC_OscConfig+0x688>
 8004e68:	e01b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6a:	f7fe fb9f 	bl	80035ac <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e70:	e010      	b.n	8004e94 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fe fb9b 	bl	80035ac <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d907      	bls.n	8004e94 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e192      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	0800c5ac 	.word	0x0800c5ac
 8004e90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e94:	4b98      	ldr	r3, [pc, #608]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e7      	bne.n	8004e72 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea2:	7ffb      	ldrb	r3, [r7, #31]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea8:	4b93      	ldr	r3, [pc, #588]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	4a92      	ldr	r2, [pc, #584]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8004eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x71a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x71a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d004      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x71a>
 8004ecc:	f240 316e 	movw	r1, #878	@ 0x36e
 8004ed0:	488a      	ldr	r0, [pc, #552]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004ed2:	f7fd fca9 	bl	8002828 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8166 	beq.w	80051ac <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	f040 813c 	bne.w	8005162 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <HAL_RCC_OscConfig+0x758>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d00c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x758>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d008      	beq.n	8004f14 <HAL_RCC_OscConfig+0x758>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d004      	beq.n	8004f14 <HAL_RCC_OscConfig+0x758>
 8004f0a:	f240 3176 	movw	r1, #886	@ 0x376
 8004f0e:	487b      	ldr	r0, [pc, #492]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004f10:	f7fd fc8a 	bl	8002828 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCC_OscConfig+0x768>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d904      	bls.n	8004f2e <HAL_RCC_OscConfig+0x772>
 8004f24:	f240 3177 	movw	r1, #887	@ 0x377
 8004f28:	4874      	ldr	r0, [pc, #464]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004f2a:	f7fd fc7d 	bl	8002828 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f32:	2b07      	cmp	r3, #7
 8004f34:	d903      	bls.n	8004f3e <HAL_RCC_OscConfig+0x782>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	2b56      	cmp	r3, #86	@ 0x56
 8004f3c:	d904      	bls.n	8004f48 <HAL_RCC_OscConfig+0x78c>
 8004f3e:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8004f42:	486e      	ldr	r0, [pc, #440]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004f44:	f7fd fc70 	bl	8002828 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCC_OscConfig+0x7a6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	2b11      	cmp	r3, #17
 8004f56:	d004      	beq.n	8004f62 <HAL_RCC_OscConfig+0x7a6>
 8004f58:	f240 317a 	movw	r1, #890	@ 0x37a
 8004f5c:	4867      	ldr	r0, [pc, #412]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004f5e:	f7fd fc63 	bl	8002828 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d010      	beq.n	8004f8c <HAL_RCC_OscConfig+0x7d0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d00c      	beq.n	8004f8c <HAL_RCC_OscConfig+0x7d0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d008      	beq.n	8004f8c <HAL_RCC_OscConfig+0x7d0>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d004      	beq.n	8004f8c <HAL_RCC_OscConfig+0x7d0>
 8004f82:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8004f86:	485d      	ldr	r0, [pc, #372]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004f88:	f7fd fc4e 	bl	8002828 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x7fa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x7fa>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x7fa>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d004      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x7fa>
 8004fac:	f240 317d 	movw	r1, #893	@ 0x37d
 8004fb0:	4852      	ldr	r0, [pc, #328]	@ (80050fc <HAL_RCC_OscConfig+0x940>)
 8004fb2:	f7fd fc39 	bl	8002828 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fb6:	4b50      	ldr	r3, [pc, #320]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0203 	and.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d130      	bne.n	800502c <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d127      	bne.n	800502c <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d11f      	bne.n	800502c <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ff6:	2a07      	cmp	r2, #7
 8004ff8:	bf14      	ite	ne
 8004ffa:	2201      	movne	r2, #1
 8004ffc:	2200      	moveq	r2, #0
 8004ffe:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005000:	4293      	cmp	r3, r2
 8005002:	d113      	bne.n	800502c <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	3b01      	subs	r3, #1
 8005012:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d109      	bne.n	800502c <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	3b01      	subs	r3, #1
 8005026:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d074      	beq.n	8005116 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d06f      	beq.n	8005112 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005032:	4b31      	ldr	r3, [pc, #196]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800503e:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0af      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800504e:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005058:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800505a:	f7fe faa7 	bl	80035ac <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005062:	f7fe faa3 	bl	80035ac <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e09c      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	4b1e      	ldr	r3, [pc, #120]	@ (8005100 <HAL_RCC_OscConfig+0x944>)
 8005086:	4013      	ands	r3, r2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005090:	3a01      	subs	r2, #1
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	4311      	orrs	r1, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800509a:	0212      	lsls	r2, r2, #8
 800509c:	4311      	orrs	r1, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050a2:	0852      	lsrs	r2, r2, #1
 80050a4:	3a01      	subs	r2, #1
 80050a6:	0552      	lsls	r2, r2, #21
 80050a8:	4311      	orrs	r1, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050ae:	0852      	lsrs	r2, r2, #1
 80050b0:	3a01      	subs	r2, #1
 80050b2:	0652      	lsls	r2, r2, #25
 80050b4:	4311      	orrs	r1, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050ba:	0912      	lsrs	r2, r2, #4
 80050bc:	0452      	lsls	r2, r2, #17
 80050be:	430a      	orrs	r2, r1
 80050c0:	490d      	ldr	r1, [pc, #52]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050c6:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a0b      	ldr	r2, [pc, #44]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050d2:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4a08      	ldr	r2, [pc, #32]	@ (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050dc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050de:	f7fe fa65 	bl	80035ac <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e4:	e00e      	b.n	8005104 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e6:	f7fe fa61 	bl	80035ac <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d907      	bls.n	8005104 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e05a      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800c5ac 	.word	0x0800c5ac
 8005100:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005104:	4b2c      	ldr	r3, [pc, #176]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0ea      	beq.n	80050e6 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005110:	e04c      	b.n	80051ac <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e04b      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005116:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d144      	bne.n	80051ac <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a24      	ldr	r2, [pc, #144]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005128:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800512e:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4a21      	ldr	r2, [pc, #132]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005134:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005138:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800513a:	f7fe fa37 	bl	80035ac <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005142:	f7fe fa33 	bl	80035ac <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e02c      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005154:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x986>
 8005160:	e024      	b.n	80051ac <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d01f      	beq.n	80051a8 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005168:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a12      	ldr	r2, [pc, #72]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 800516e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe fa1a 	bl	80035ac <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517c:	f7fe fa16 	bl	80035ac <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00f      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	4906      	ldr	r1, [pc, #24]	@ (80051b8 <HAL_RCC_OscConfig+0x9fc>)
 80051a0:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <HAL_RCC_OscConfig+0xa00>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	60cb      	str	r3, [r1, #12]
 80051a6:	e001      	b.n	80051ac <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	feeefffc 	.word	0xfeeefffc

080051c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e186      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x24>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b0f      	cmp	r3, #15
 80051e2:	d904      	bls.n	80051ee <HAL_RCC_ClockConfig+0x2e>
 80051e4:	f240 4159 	movw	r1, #1113	@ 0x459
 80051e8:	4882      	ldr	r0, [pc, #520]	@ (80053f4 <HAL_RCC_ClockConfig+0x234>)
 80051ea:	f7fd fb1d 	bl	8002828 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_RCC_ClockConfig+0x56>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d00d      	beq.n	8005216 <HAL_RCC_ClockConfig+0x56>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d00a      	beq.n	8005216 <HAL_RCC_ClockConfig+0x56>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d007      	beq.n	8005216 <HAL_RCC_ClockConfig+0x56>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d004      	beq.n	8005216 <HAL_RCC_ClockConfig+0x56>
 800520c:	f240 415a 	movw	r1, #1114	@ 0x45a
 8005210:	4878      	ldr	r0, [pc, #480]	@ (80053f4 <HAL_RCC_ClockConfig+0x234>)
 8005212:	f7fd fb09 	bl	8002828 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005216:	4b78      	ldr	r3, [pc, #480]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d910      	bls.n	8005246 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005224:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 0207 	bic.w	r2, r3, #7
 800522c:	4972      	ldr	r1, [pc, #456]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005234:	4b70      	ldr	r3, [pc, #448]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e14d      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d039      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d024      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	d020      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b90      	cmp	r3, #144	@ 0x90
 8005268:	d01c      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005270:	d018      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2bb0      	cmp	r3, #176	@ 0xb0
 8005278:	d014      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005280:	d010      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2bd0      	cmp	r3, #208	@ 0xd0
 8005288:	d00c      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2be0      	cmp	r3, #224	@ 0xe0
 8005290:	d008      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2bf0      	cmp	r3, #240	@ 0xf0
 8005298:	d004      	beq.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
 800529a:	f240 4172 	movw	r1, #1138	@ 0x472
 800529e:	4855      	ldr	r0, [pc, #340]	@ (80053f4 <HAL_RCC_ClockConfig+0x234>)
 80052a0:	f7fd fac2 	bl	8002828 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	4b54      	ldr	r3, [pc, #336]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d908      	bls.n	80052c6 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b51      	ldr	r3, [pc, #324]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494e      	ldr	r1, [pc, #312]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d061      	beq.n	8005396 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <HAL_RCC_ClockConfig+0x13c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d00c      	beq.n	80052fc <HAL_RCC_ClockConfig+0x13c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d008      	beq.n	80052fc <HAL_RCC_ClockConfig+0x13c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d004      	beq.n	80052fc <HAL_RCC_ClockConfig+0x13c>
 80052f2:	f240 417d 	movw	r1, #1149	@ 0x47d
 80052f6:	483f      	ldr	r0, [pc, #252]	@ (80053f4 <HAL_RCC_ClockConfig+0x234>)
 80052f8:	f7fd fa96 	bl	8002828 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d107      	bne.n	8005314 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005304:	4b3d      	ldr	r3, [pc, #244]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d121      	bne.n	8005354 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0e6      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d107      	bne.n	800532c <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800531c:	4b37      	ldr	r3, [pc, #220]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d115      	bne.n	8005354 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0da      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d107      	bne.n	8005344 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005334:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0ce      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005344:	4b2d      	ldr	r3, [pc, #180]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0c6      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005354:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 0203 	bic.w	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4926      	ldr	r1, [pc, #152]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005366:	f7fe f921 	bl	80035ac <HAL_GetTick>
 800536a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536c:	e00a      	b.n	8005384 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536e:	f7fe f91d 	bl	80035ac <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0ae      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 020c 	and.w	r2, r3, #12
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	429a      	cmp	r2, r3
 8005394:	d1eb      	bne.n	800536e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d208      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b2:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	490f      	ldr	r1, [pc, #60]	@ (80053fc <HAL_RCC_ClockConfig+0x23c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b0c      	ldr	r3, [pc, #48]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d216      	bcs.n	8005400 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b09      	ldr	r3, [pc, #36]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 0207 	bic.w	r2, r3, #7
 80053da:	4907      	ldr	r1, [pc, #28]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e2:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <HAL_RCC_ClockConfig+0x238>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d007      	beq.n	8005400 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e076      	b.n	80054e2 <HAL_RCC_ClockConfig+0x322>
 80053f4:	0800c5ac 	.word	0x0800c5ac
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d025      	beq.n	8005458 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d018      	beq.n	8005446 <HAL_RCC_ClockConfig+0x286>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541c:	d013      	beq.n	8005446 <HAL_RCC_ClockConfig+0x286>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005426:	d00e      	beq.n	8005446 <HAL_RCC_ClockConfig+0x286>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005430:	d009      	beq.n	8005446 <HAL_RCC_ClockConfig+0x286>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800543a:	d004      	beq.n	8005446 <HAL_RCC_ClockConfig+0x286>
 800543c:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8005440:	482a      	ldr	r0, [pc, #168]	@ (80054ec <HAL_RCC_ClockConfig+0x32c>)
 8005442:	f7fd f9f1 	bl	8002828 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005446:	4b2a      	ldr	r3, [pc, #168]	@ (80054f0 <HAL_RCC_ClockConfig+0x330>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4927      	ldr	r1, [pc, #156]	@ (80054f0 <HAL_RCC_ClockConfig+0x330>)
 8005454:	4313      	orrs	r3, r2
 8005456:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d026      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d018      	beq.n	800549e <HAL_RCC_ClockConfig+0x2de>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005474:	d013      	beq.n	800549e <HAL_RCC_ClockConfig+0x2de>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800547e:	d00e      	beq.n	800549e <HAL_RCC_ClockConfig+0x2de>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x2de>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005492:	d004      	beq.n	800549e <HAL_RCC_ClockConfig+0x2de>
 8005494:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8005498:	4814      	ldr	r0, [pc, #80]	@ (80054ec <HAL_RCC_ClockConfig+0x32c>)
 800549a:	f7fd f9c5 	bl	8002828 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800549e:	4b14      	ldr	r3, [pc, #80]	@ (80054f0 <HAL_RCC_ClockConfig+0x330>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4910      	ldr	r1, [pc, #64]	@ (80054f0 <HAL_RCC_ClockConfig+0x330>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b2:	f000 f825 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <HAL_RCC_ClockConfig+0x330>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	490c      	ldr	r1, [pc, #48]	@ (80054f4 <HAL_RCC_ClockConfig+0x334>)
 80054c4:	5ccb      	ldrb	r3, [r1, r3]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a0a      	ldr	r2, [pc, #40]	@ (80054f8 <HAL_RCC_ClockConfig+0x338>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054d2:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <HAL_RCC_ClockConfig+0x33c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe f818 	bl	800350c <HAL_InitTick>
 80054dc:	4603      	mov	r3, r0
 80054de:	72fb      	strb	r3, [r7, #11]

  return status;
 80054e0:	7afb      	ldrb	r3, [r7, #11]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	0800c5ac 	.word	0x0800c5ac
 80054f0:	40021000 	.word	0x40021000
 80054f4:	0800c708 	.word	0x0800c708
 80054f8:	20000010 	.word	0x20000010
 80054fc:	20000014 	.word	0x20000014

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	@ 0x24
 8005504:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550e:	4b3e      	ldr	r3, [pc, #248]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005518:	4b3b      	ldr	r3, [pc, #236]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x34>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d121      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d11e      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005534:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005540:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e005      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005550:	4b2d      	ldr	r3, [pc, #180]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800555c:	4a2b      	ldr	r2, [pc, #172]	@ (800560c <HAL_RCC_GetSysClockFreq+0x10c>)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005570:	e00a      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d102      	bne.n	800557e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005578:	4b25      	ldr	r3, [pc, #148]	@ (8005610 <HAL_RCC_GetSysClockFreq+0x110>)
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e004      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d101      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005584:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <HAL_RCC_GetSysClockFreq+0x114>)
 8005586:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d134      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800558e:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d003      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0xac>
 80055a4:	e005      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <HAL_RCC_GetSysClockFreq+0x110>)
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	e005      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ae:	617b      	str	r3, [r7, #20]
      break;
 80055b0:	e002      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	617b      	str	r3, [r7, #20]
      break;
 80055b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b8:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	3301      	adds	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055c6:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	fb03 f202 	mul.w	r2, r3, r2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	0e5b      	lsrs	r3, r3, #25
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	3301      	adds	r3, #1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055f8:	69bb      	ldr	r3, [r7, #24]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3724      	adds	r7, #36	@ 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	0800c720 	.word	0x0800c720
 8005610:	00f42400 	.word	0x00f42400
 8005614:	007a1200 	.word	0x007a1200

08005618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800561c:	4b03      	ldr	r3, [pc, #12]	@ (800562c <HAL_RCC_GetHCLKFreq+0x14>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010

08005630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005634:	f7ff fff0 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4904      	ldr	r1, [pc, #16]	@ (8005658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	0800c718 	.word	0x0800c718

0800565c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005660:	f7ff ffda 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0adb      	lsrs	r3, r3, #11
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4904      	ldr	r1, [pc, #16]	@ (8005684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000
 8005684:	0800c718 	.word	0x0800c718

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005694:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056a0:	f7ff f81c 	bl	80046dc <HAL_PWREx_GetVoltageRange>
 80056a4:	6178      	str	r0, [r7, #20]
 80056a6:	e014      	b.n	80056d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	4a24      	ldr	r2, [pc, #144]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b4:	4b22      	ldr	r3, [pc, #136]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056c0:	f7ff f80c 	bl	80046dc <HAL_PWREx_GetVoltageRange>
 80056c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d8:	d10b      	bne.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b80      	cmp	r3, #128	@ 0x80
 80056de:	d919      	bls.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80056e4:	d902      	bls.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e6:	2302      	movs	r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e013      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056ec:	2301      	movs	r3, #1
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e010      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	@ 0x80
 80056f6:	d902      	bls.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056f8:	2303      	movs	r3, #3
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e00a      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b80      	cmp	r3, #128	@ 0x80
 8005702:	d102      	bne.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005704:	2302      	movs	r3, #2
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e004      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b70      	cmp	r3, #112	@ 0x70
 800570e:	d101      	bne.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005710:	2301      	movs	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 0207 	bic.w	r2, r3, #7
 800571c:	4909      	ldr	r1, [pc, #36]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005724:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	40022000 	.word	0x40022000

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005750:	2300      	movs	r3, #0
 8005752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005754:	2300      	movs	r3, #0
 8005756:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576c:	d303      	bcc.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800576e:	21c9      	movs	r1, #201	@ 0xc9
 8005770:	4889      	ldr	r0, [pc, #548]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005772:	f7fd f859 	bl	8002828 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800577e:	2b00      	cmp	r3, #0
 8005780:	d058      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005792:	d00d      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005798:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800579c:	d008      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057a6:	d003      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80057a8:	21d1      	movs	r1, #209	@ 0xd1
 80057aa:	487b      	ldr	r0, [pc, #492]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80057ac:	f7fd f83c 	bl	8002828 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057b8:	d02a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80057ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057be:	d824      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80057c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057c4:	d008      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057ca:	d81e      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80057d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d4:	d010      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80057d6:	e018      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057d8:	4b70      	ldr	r3, [pc, #448]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a6f      	ldr	r2, [pc, #444]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057e4:	e015      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fc69 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057f6:	e00c      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3320      	adds	r3, #32
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fde0 	bl	80063c4 <RCCEx_PLLSAI2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	74fb      	strb	r3, [r7, #19]
      break;
 800580e:	e000      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8005810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005818:	4b60      	ldr	r3, [pc, #384]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005826:	495d      	ldr	r1, [pc, #372]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800582e:	e001      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d059      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800584c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005850:	d00e      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800585a:	d009      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005864:	d004      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005866:	f240 110f 	movw	r1, #271	@ 0x10f
 800586a:	484b      	ldr	r0, [pc, #300]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800586c:	f7fc ffdc 	bl	8002828 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005874:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005878:	d02a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800587a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800587e:	d824      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005884:	d008      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005886:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800588a:	d81e      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x182>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005894:	d010      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005896:	e018      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005898:	4b40      	ldr	r3, [pc, #256]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a3f      	ldr	r2, [pc, #252]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800589e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058a4:	e015      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fc09 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058b6:	e00c      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3320      	adds	r3, #32
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fd80 	bl	80063c4 <RCCEx_PLLSAI2_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058c8:	e003      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	74fb      	strb	r3, [r7, #19]
      break;
 80058ce:	e000      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80058d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d2:	7cfb      	ldrb	r3, [r7, #19]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058d8:	4b30      	ldr	r3, [pc, #192]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058e6:	492d      	ldr	r1, [pc, #180]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80058ee:	e001      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80c2 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005902:	2300      	movs	r3, #0
 8005904:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590c:	2b00      	cmp	r3, #0
 800590e:	d016      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800591a:	d010      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800592e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005932:	d004      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005934:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005938:	4817      	ldr	r0, [pc, #92]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800593a:	f7fc ff75 	bl	8002828 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800593e:	4b17      	ldr	r3, [pc, #92]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005958:	4a10      	ldr	r2, [pc, #64]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005960:	4b0e      	ldr	r3, [pc, #56]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800596c:	2301      	movs	r3, #1
 800596e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a0a      	ldr	r2, [pc, #40]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800597a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800597c:	f7fd fe16 	bl	80035ac <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005982:	e00f      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005984:	f7fd fe12 	bl	80035ac <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d908      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	74fb      	strb	r3, [r7, #19]
        break;
 8005996:	e00b      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8005998:	0800c5e4 	.word	0x0800c5e4
 800599c:	40021000 	.word	0x40021000
 80059a0:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059a4:	4b30      	ldr	r3, [pc, #192]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0e9      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 80059b0:	7cfb      	ldrb	r3, [r7, #19]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d15c      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059b6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01f      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d019      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059d4:	4b25      	ldr	r3, [pc, #148]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059e0:	4b22      	ldr	r3, [pc, #136]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	4a21      	ldr	r2, [pc, #132]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059f0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a00:	4a1a      	ldr	r2, [pc, #104]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d016      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fd fdcb 	bl	80035ac <HAL_GetTick>
 8005a16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a18:	e00b      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7fd fdc7 	bl	80035ac <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d902      	bls.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a30:	e006      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a32:	4b0e      	ldr	r3, [pc, #56]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ec      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8005a40:	7cfb      	ldrb	r3, [r7, #19]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a56:	4905      	ldr	r1, [pc, #20]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a5e:	e009      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
 8005a64:	e006      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8005a66:	bf00      	nop
 8005a68:	40007000 	.word	0x40007000
 8005a6c:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a74:	7c7b      	ldrb	r3, [r7, #17]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7e:	4a8c      	ldr	r2, [pc, #560]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01f      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d00c      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d008      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d004      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005ab2:	f240 1199 	movw	r1, #409	@ 0x199
 8005ab6:	487f      	ldr	r0, [pc, #508]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005ab8:	f7fc feb6 	bl	8002828 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005abc:	4b7c      	ldr	r3, [pc, #496]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac2:	f023 0203 	bic.w	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	4979      	ldr	r1, [pc, #484]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01f      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d00c      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d008      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d004      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005afe:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8005b02:	486c      	ldr	r0, [pc, #432]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005b04:	f7fc fe90 	bl	8002828 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b08:	4b69      	ldr	r3, [pc, #420]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f023 020c 	bic.w	r2, r3, #12
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b16:	4966      	ldr	r1, [pc, #408]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01f      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d00c      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	2b30      	cmp	r3, #48	@ 0x30
 8005b40:	d008      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d004      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b4e:	4859      	ldr	r0, [pc, #356]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005b50:	f7fc fe6a 	bl	8002828 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b54:	4b56      	ldr	r3, [pc, #344]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	4953      	ldr	r1, [pc, #332]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01f      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d010      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b82:	2b40      	cmp	r3, #64	@ 0x40
 8005b84:	d00c      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b92:	2b80      	cmp	r3, #128	@ 0x80
 8005b94:	d004      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005b96:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005b9a:	4846      	ldr	r0, [pc, #280]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005b9c:	f7fc fe44 	bl	8002828 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ba0:	4b43      	ldr	r3, [pc, #268]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	4940      	ldr	r1, [pc, #256]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d022      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d013      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bdc:	d009      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be6:	d004      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005be8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8005bec:	4831      	ldr	r0, [pc, #196]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005bee:	f7fc fe1b 	bl	8002828 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c00:	492b      	ldr	r1, [pc, #172]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d022      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c24:	d00e      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c2e:	d009      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c38:	d004      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c3a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8005c3e:	481d      	ldr	r0, [pc, #116]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005c40:	f7fc fdf2 	bl	8002828 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c52:	4917      	ldr	r1, [pc, #92]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d028      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d013      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c76:	d00e      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c80:	d009      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c86:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005c8c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005c90:	4808      	ldr	r0, [pc, #32]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005c92:	f7fc fdc9 	bl	8002828 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c96:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca4:	4902      	ldr	r1, [pc, #8]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cac:	e004      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	0800c5e4 	.word	0x0800c5e4
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d022      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cde:	d009      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ce8:	d004      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005cea:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8005cee:	489e      	ldr	r0, [pc, #632]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005cf0:	f7fc fd9a 	bl	8002828 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d02:	499a      	ldr	r1, [pc, #616]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01d      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d26:	d009      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d30:	d004      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d32:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8005d36:	488c      	ldr	r0, [pc, #560]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005d38:	f7fc fd76 	bl	8002828 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d3c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4a:	4988      	ldr	r1, [pc, #544]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01d      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d6e:	d009      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d78:	d004      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005d7a:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8005d7e:	487a      	ldr	r0, [pc, #488]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005d80:	f7fc fd52 	bl	8002828 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d84:	4b79      	ldr	r3, [pc, #484]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	4976      	ldr	r1, [pc, #472]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01d      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db6:	d009      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc0:	d004      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005dc2:	f240 2107 	movw	r1, #519	@ 0x207
 8005dc6:	4868      	ldr	r0, [pc, #416]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005dc8:	f7fc fd2e 	bl	8002828 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dcc:	4b67      	ldr	r3, [pc, #412]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dda:	4964      	ldr	r1, [pc, #400]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d040      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dfe:	d00e      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e08:	d009      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e12:	d004      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e14:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005e18:	4853      	ldr	r0, [pc, #332]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005e1a:	f7fc fd05 	bl	8002828 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e1e:	4b53      	ldr	r3, [pc, #332]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	494f      	ldr	r1, [pc, #316]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e3c:	d106      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	4a4a      	ldr	r2, [pc, #296]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e48:	60d3      	str	r3, [r2, #12]
 8005e4a:	e011      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f931 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d040      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d013      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e8c:	d00e      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e96:	d009      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ea0:	d004      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005ea2:	f240 2141 	movw	r1, #577	@ 0x241
 8005ea6:	4830      	ldr	r0, [pc, #192]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005ea8:	f7fc fcbe 	bl	8002828 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005eac:	4b2f      	ldr	r3, [pc, #188]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	492c      	ldr	r1, [pc, #176]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eca:	d106      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ecc:	4b27      	ldr	r3, [pc, #156]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ed6:	60d3      	str	r3, [r2, #12]
 8005ed8:	e011      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ee2:	d10c      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 f8ea 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8005efa:	7cfb      	ldrb	r3, [r7, #19]
 8005efc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d044      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d013      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f1a:	d00e      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f24:	d009      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f2e:	d004      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f30:	f240 2166 	movw	r1, #614	@ 0x266
 8005f34:	480c      	ldr	r0, [pc, #48]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005f36:	f7fc fc77 	bl	8002828 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f48:	4908      	ldr	r1, [pc, #32]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f58:	d10a      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5a:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	4a03      	ldr	r2, [pc, #12]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f64:	60d3      	str	r3, [r2, #12]
 8005f66:	e015      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005f68:	0800c5e4 	.word	0x0800c5e4
 8005f6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f89f 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f8a:	7cfb      	ldrb	r3, [r7, #19]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d047      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fc4:	d004      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005fc6:	f240 2186 	movw	r1, #646	@ 0x286
 8005fca:	483c      	ldr	r0, [pc, #240]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005fcc:	f7fc fc2c 	bl	8002828 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fde:	4938      	ldr	r1, [pc, #224]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fee:	d10d      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f864 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006000:	7cfb      	ldrb	r3, [r7, #19]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d014      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	74bb      	strb	r3, [r7, #18]
 800600a:	e011      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006014:	d10c      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3320      	adds	r3, #32
 800601a:	2102      	movs	r1, #2
 800601c:	4618      	mov	r0, r3
 800601e:	f000 f9d1 	bl	80063c4 <RCCEx_PLLSAI2_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006026:	7cfb      	ldrb	r3, [r7, #19]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800602c:	7cfb      	ldrb	r3, [r7, #19]
 800602e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d018      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604c:	d004      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800604e:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8006052:	481a      	ldr	r0, [pc, #104]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8006054:	f7fc fbe8 	bl	8002828 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006058:	4b19      	ldr	r3, [pc, #100]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006066:	4916      	ldr	r1, [pc, #88]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01b      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800608a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800608e:	d004      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006090:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8006094:	4809      	ldr	r0, [pc, #36]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8006096:	f7fc fbc7 	bl	8002828 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800609a:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060aa:	4905      	ldr	r1, [pc, #20]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	0800c5e4 	.word	0x0800c5e4
 80060c0:	40021000 	.word	0x40021000

080060c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x38>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d00c      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x38>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d008      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x38>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d004      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x38>
 80060f2:	f640 3162 	movw	r1, #2914	@ 0xb62
 80060f6:	4887      	ldr	r0, [pc, #540]	@ (8006314 <RCCEx_PLLSAI1_Config+0x250>)
 80060f8:	f7fc fb96 	bl	8002828 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <RCCEx_PLLSAI1_Config+0x48>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d904      	bls.n	8006116 <RCCEx_PLLSAI1_Config+0x52>
 800610c:	f640 3163 	movw	r1, #2915	@ 0xb63
 8006110:	4880      	ldr	r0, [pc, #512]	@ (8006314 <RCCEx_PLLSAI1_Config+0x250>)
 8006112:	f7fc fb89 	bl	8002828 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b07      	cmp	r3, #7
 800611c:	d903      	bls.n	8006126 <RCCEx_PLLSAI1_Config+0x62>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b56      	cmp	r3, #86	@ 0x56
 8006124:	d904      	bls.n	8006130 <RCCEx_PLLSAI1_Config+0x6c>
 8006126:	f640 3164 	movw	r1, #2916	@ 0xb64
 800612a:	487a      	ldr	r0, [pc, #488]	@ (8006314 <RCCEx_PLLSAI1_Config+0x250>)
 800612c:	f7fc fb7c 	bl	8002828 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <RCCEx_PLLSAI1_Config+0x90>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d105      	bne.n	8006154 <RCCEx_PLLSAI1_Config+0x90>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <RCCEx_PLLSAI1_Config+0xa0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800615c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <RCCEx_PLLSAI1_Config+0xaa>
 8006164:	f640 3165 	movw	r1, #2917	@ 0xb65
 8006168:	486a      	ldr	r0, [pc, #424]	@ (8006314 <RCCEx_PLLSAI1_Config+0x250>)
 800616a:	f7fc fb5d 	bl	8002828 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800616e:	4b6a      	ldr	r3, [pc, #424]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800617a:	4b67      	ldr	r3, [pc, #412]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0203 	and.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d10d      	bne.n	80061a6 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
       ||
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006192:	4b61      	ldr	r3, [pc, #388]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
       ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d047      	beq.n	8006236 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
 80061aa:	e044      	b.n	8006236 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d018      	beq.n	80061e6 <RCCEx_PLLSAI1_Config+0x122>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d825      	bhi.n	8006204 <RCCEx_PLLSAI1_Config+0x140>
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d002      	beq.n	80061c2 <RCCEx_PLLSAI1_Config+0xfe>
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d009      	beq.n	80061d4 <RCCEx_PLLSAI1_Config+0x110>
 80061c0:	e020      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061c2:	4b55      	ldr	r3, [pc, #340]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11d      	bne.n	800620a <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061d2:	e01a      	b.n	800620a <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061d4:	4b50      	ldr	r3, [pc, #320]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d116      	bne.n	800620e <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e4:	e013      	b.n	800620e <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061f2:	4b49      	ldr	r3, [pc, #292]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006202:	e006      	b.n	8006212 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	e004      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800620a:	bf00      	nop
 800620c:	e002      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8006212:	bf00      	nop
    }

    if(status == HAL_OK)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800621a:	4b3f      	ldr	r3, [pc, #252]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	3b01      	subs	r3, #1
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	430b      	orrs	r3, r1
 8006230:	4939      	ldr	r1, [pc, #228]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 8006232:	4313      	orrs	r3, r2
 8006234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 80ba 	bne.w	80063b2 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800623e:	4b36      	ldr	r3, [pc, #216]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a35      	ldr	r2, [pc, #212]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 8006244:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800624a:	f7fd f9af 	bl	80035ac <HAL_GetTick>
 800624e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006250:	e009      	b.n	8006266 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006252:	f7fd f9ab 	bl	80035ac <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d902      	bls.n	8006266 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	73fb      	strb	r3, [r7, #15]
        break;
 8006264:	e005      	b.n	8006272 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006266:	4b2c      	ldr	r3, [pc, #176]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1ef      	bne.n	8006252 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 809c 	bne.w	80063b2 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d11e      	bne.n	80062be <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b07      	cmp	r3, #7
 8006286:	d008      	beq.n	800629a <RCCEx_PLLSAI1_Config+0x1d6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b11      	cmp	r3, #17
 800628e:	d004      	beq.n	800629a <RCCEx_PLLSAI1_Config+0x1d6>
 8006290:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8006294:	481f      	ldr	r0, [pc, #124]	@ (8006314 <RCCEx_PLLSAI1_Config+0x250>)
 8006296:	f7fc fac7 	bl	8002828 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800629a:	4b1f      	ldr	r3, [pc, #124]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80062a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	0211      	lsls	r1, r2, #8
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68d2      	ldr	r2, [r2, #12]
 80062b0:	0912      	lsrs	r2, r2, #4
 80062b2:	0452      	lsls	r2, r2, #17
 80062b4:	430a      	orrs	r2, r1
 80062b6:	4918      	ldr	r1, [pc, #96]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	610b      	str	r3, [r1, #16]
 80062bc:	e055      	b.n	800636a <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d12b      	bne.n	800631c <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d010      	beq.n	80062ee <RCCEx_PLLSAI1_Config+0x22a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d00c      	beq.n	80062ee <RCCEx_PLLSAI1_Config+0x22a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d008      	beq.n	80062ee <RCCEx_PLLSAI1_Config+0x22a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d004      	beq.n	80062ee <RCCEx_PLLSAI1_Config+0x22a>
 80062e4:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80062e8:	480a      	ldr	r0, [pc, #40]	@ (8006314 <RCCEx_PLLSAI1_Config+0x250>)
 80062ea:	f7fc fa9d 	bl	8002828 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80062f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6892      	ldr	r2, [r2, #8]
 80062fe:	0211      	lsls	r1, r2, #8
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6912      	ldr	r2, [r2, #16]
 8006304:	0852      	lsrs	r2, r2, #1
 8006306:	3a01      	subs	r2, #1
 8006308:	0552      	lsls	r2, r2, #21
 800630a:	430a      	orrs	r2, r1
 800630c:	4902      	ldr	r1, [pc, #8]	@ (8006318 <RCCEx_PLLSAI1_Config+0x254>)
 800630e:	4313      	orrs	r3, r2
 8006310:	610b      	str	r3, [r1, #16]
 8006312:	e02a      	b.n	800636a <RCCEx_PLLSAI1_Config+0x2a6>
 8006314:	0800c5e4 	.word	0x0800c5e4
 8006318:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d010      	beq.n	8006346 <RCCEx_PLLSAI1_Config+0x282>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	2b04      	cmp	r3, #4
 800632a:	d00c      	beq.n	8006346 <RCCEx_PLLSAI1_Config+0x282>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	2b06      	cmp	r3, #6
 8006332:	d008      	beq.n	8006346 <RCCEx_PLLSAI1_Config+0x282>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d004      	beq.n	8006346 <RCCEx_PLLSAI1_Config+0x282>
 800633c:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8006340:	481e      	ldr	r0, [pc, #120]	@ (80063bc <RCCEx_PLLSAI1_Config+0x2f8>)
 8006342:	f7fc fa71 	bl	8002828 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006346:	4b1e      	ldr	r3, [pc, #120]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800634e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6892      	ldr	r2, [r2, #8]
 8006356:	0211      	lsls	r1, r2, #8
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6952      	ldr	r2, [r2, #20]
 800635c:	0852      	lsrs	r2, r2, #1
 800635e:	3a01      	subs	r2, #1
 8006360:	0652      	lsls	r2, r2, #25
 8006362:	430a      	orrs	r2, r1
 8006364:	4916      	ldr	r1, [pc, #88]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800636a:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a14      	ldr	r2, [pc, #80]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006376:	f7fd f919 	bl	80035ac <HAL_GetTick>
 800637a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800637c:	e009      	b.n	8006392 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800637e:	f7fd f915 	bl	80035ac <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d902      	bls.n	8006392 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	73fb      	strb	r3, [r7, #15]
          break;
 8006390:	e005      	b.n	800639e <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ef      	beq.n	800637e <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063a4:	4b06      	ldr	r3, [pc, #24]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	4904      	ldr	r1, [pc, #16]	@ (80063c0 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	0800c5e4 	.word	0x0800c5e4
 80063c0:	40021000 	.word	0x40021000

080063c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <RCCEx_PLLSAI2_Config+0x38>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d00c      	beq.n	80063fc <RCCEx_PLLSAI2_Config+0x38>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d008      	beq.n	80063fc <RCCEx_PLLSAI2_Config+0x38>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d004      	beq.n	80063fc <RCCEx_PLLSAI2_Config+0x38>
 80063f2:	f640 412f 	movw	r1, #3119	@ 0xc2f
 80063f6:	4896      	ldr	r0, [pc, #600]	@ (8006650 <RCCEx_PLLSAI2_Config+0x28c>)
 80063f8:	f7fc fa16 	bl	8002828 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <RCCEx_PLLSAI2_Config+0x48>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d904      	bls.n	8006416 <RCCEx_PLLSAI2_Config+0x52>
 800640c:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8006410:	488f      	ldr	r0, [pc, #572]	@ (8006650 <RCCEx_PLLSAI2_Config+0x28c>)
 8006412:	f7fc fa09 	bl	8002828 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b07      	cmp	r3, #7
 800641c:	d903      	bls.n	8006426 <RCCEx_PLLSAI2_Config+0x62>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b56      	cmp	r3, #86	@ 0x56
 8006424:	d904      	bls.n	8006430 <RCCEx_PLLSAI2_Config+0x6c>
 8006426:	f640 4131 	movw	r1, #3121	@ 0xc31
 800642a:	4889      	ldr	r0, [pc, #548]	@ (8006650 <RCCEx_PLLSAI2_Config+0x28c>)
 800642c:	f7fc f9fc 	bl	8002828 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d105      	bne.n	8006448 <RCCEx_PLLSAI2_Config+0x84>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <RCCEx_PLLSAI2_Config+0x94>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <RCCEx_PLLSAI2_Config+0x9e>
 8006458:	f640 4132 	movw	r1, #3122	@ 0xc32
 800645c:	487c      	ldr	r0, [pc, #496]	@ (8006650 <RCCEx_PLLSAI2_Config+0x28c>)
 800645e:	f7fc f9e3 	bl	8002828 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006462:	4b7c      	ldr	r3, [pc, #496]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800646e:	4b79      	ldr	r3, [pc, #484]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0203 	and.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d10d      	bne.n	800649a <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
       ||
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006486:	4b73      	ldr	r3, [pc, #460]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
       ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d047      	beq.n	800652a <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
 800649e:	e044      	b.n	800652a <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d018      	beq.n	80064da <RCCEx_PLLSAI2_Config+0x116>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d825      	bhi.n	80064f8 <RCCEx_PLLSAI2_Config+0x134>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d002      	beq.n	80064b6 <RCCEx_PLLSAI2_Config+0xf2>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d009      	beq.n	80064c8 <RCCEx_PLLSAI2_Config+0x104>
 80064b4:	e020      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064b6:	4b67      	ldr	r3, [pc, #412]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11d      	bne.n	80064fe <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c6:	e01a      	b.n	80064fe <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b62      	ldr	r3, [pc, #392]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e013      	b.n	8006502 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064da:	4b5e      	ldr	r3, [pc, #376]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064f6:	e006      	b.n	8006506 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e004      	b.n	8006508 <RCCEx_PLLSAI2_Config+0x144>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8006506:	bf00      	nop
    }

    if(status == HAL_OK)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800650e:	4b51      	ldr	r3, [pc, #324]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	3b01      	subs	r3, #1
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	430b      	orrs	r3, r1
 8006524:	494b      	ldr	r1, [pc, #300]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 808a 	bne.w	8006646 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006532:	4b48      	ldr	r3, [pc, #288]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a47      	ldr	r2, [pc, #284]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800653c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653e:	f7fd f835 	bl	80035ac <HAL_GetTick>
 8006542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006544:	e009      	b.n	800655a <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006546:	f7fd f831 	bl	80035ac <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d902      	bls.n	800655a <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	73fb      	strb	r3, [r7, #15]
        break;
 8006558:	e005      	b.n	8006566 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800655a:	4b3e      	ldr	r3, [pc, #248]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1ef      	bne.n	8006546 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d16c      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11e      	bne.n	80065b0 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b07      	cmp	r3, #7
 8006578:	d008      	beq.n	800658c <RCCEx_PLLSAI2_Config+0x1c8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b11      	cmp	r3, #17
 8006580:	d004      	beq.n	800658c <RCCEx_PLLSAI2_Config+0x1c8>
 8006582:	f640 4185 	movw	r1, #3205	@ 0xc85
 8006586:	4832      	ldr	r0, [pc, #200]	@ (8006650 <RCCEx_PLLSAI2_Config+0x28c>)
 8006588:	f7fc f94e 	bl	8002828 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800658c:	4b31      	ldr	r3, [pc, #196]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6892      	ldr	r2, [r2, #8]
 800659c:	0211      	lsls	r1, r2, #8
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68d2      	ldr	r2, [r2, #12]
 80065a2:	0912      	lsrs	r2, r2, #4
 80065a4:	0452      	lsls	r2, r2, #17
 80065a6:	430a      	orrs	r2, r1
 80065a8:	492a      	ldr	r1, [pc, #168]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	614b      	str	r3, [r1, #20]
 80065ae:	e026      	b.n	80065fe <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d010      	beq.n	80065da <RCCEx_PLLSAI2_Config+0x216>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d00c      	beq.n	80065da <RCCEx_PLLSAI2_Config+0x216>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b06      	cmp	r3, #6
 80065c6:	d008      	beq.n	80065da <RCCEx_PLLSAI2_Config+0x216>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d004      	beq.n	80065da <RCCEx_PLLSAI2_Config+0x216>
 80065d0:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 80065d4:	481e      	ldr	r0, [pc, #120]	@ (8006650 <RCCEx_PLLSAI2_Config+0x28c>)
 80065d6:	f7fc f927 	bl	8002828 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065da:	4b1e      	ldr	r3, [pc, #120]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80065e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6892      	ldr	r2, [r2, #8]
 80065ea:	0211      	lsls	r1, r2, #8
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6912      	ldr	r2, [r2, #16]
 80065f0:	0852      	lsrs	r2, r2, #1
 80065f2:	3a01      	subs	r2, #1
 80065f4:	0652      	lsls	r2, r2, #25
 80065f6:	430a      	orrs	r2, r1
 80065f8:	4916      	ldr	r1, [pc, #88]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065fe:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a14      	ldr	r2, [pc, #80]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006608:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660a:	f7fc ffcf 	bl	80035ac <HAL_GetTick>
 800660e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006610:	e009      	b.n	8006626 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006612:	f7fc ffcb 	bl	80035ac <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d902      	bls.n	8006626 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	73fb      	strb	r3, [r7, #15]
          break;
 8006624:	e005      	b.n	8006632 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006626:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0ef      	beq.n	8006612 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006638:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	4904      	ldr	r1, [pc, #16]	@ (8006654 <RCCEx_PLLSAI2_Config+0x290>)
 8006642:	4313      	orrs	r3, r2
 8006644:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	0800c5e4 	.word	0x0800c5e4
 8006654:	40021000 	.word	0x40021000

08006658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e1dd      	b.n	8006a26 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a7b      	ldr	r2, [pc, #492]	@ (800685c <HAL_SPI_Init+0x204>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_SPI_Init+0x3a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a79      	ldr	r2, [pc, #484]	@ (8006860 <HAL_SPI_Init+0x208>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_SPI_Init+0x3a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a78      	ldr	r2, [pc, #480]	@ (8006864 <HAL_SPI_Init+0x20c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_SPI_Init+0x3a>
 8006688:	f240 1147 	movw	r1, #327	@ 0x147
 800668c:	4876      	ldr	r0, [pc, #472]	@ (8006868 <HAL_SPI_Init+0x210>)
 800668e:	f7fc f8cb 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <HAL_SPI_Init+0x56>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066a2:	d004      	beq.n	80066ae <HAL_SPI_Init+0x56>
 80066a4:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80066a8:	486f      	ldr	r0, [pc, #444]	@ (8006868 <HAL_SPI_Init+0x210>)
 80066aa:	f7fc f8bd 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <HAL_SPI_Init+0x7c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066be:	d009      	beq.n	80066d4 <HAL_SPI_Init+0x7c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c8:	d004      	beq.n	80066d4 <HAL_SPI_Init+0x7c>
 80066ca:	f240 1149 	movw	r1, #329	@ 0x149
 80066ce:	4866      	ldr	r0, [pc, #408]	@ (8006868 <HAL_SPI_Init+0x210>)
 80066d0:	f7fc f8aa 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80066dc:	d040      	beq.n	8006760 <HAL_SPI_Init+0x108>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80066e6:	d03b      	beq.n	8006760 <HAL_SPI_Init+0x108>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80066f0:	d036      	beq.n	8006760 <HAL_SPI_Init+0x108>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066fa:	d031      	beq.n	8006760 <HAL_SPI_Init+0x108>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8006704:	d02c      	beq.n	8006760 <HAL_SPI_Init+0x108>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800670e:	d027      	beq.n	8006760 <HAL_SPI_Init+0x108>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8006718:	d022      	beq.n	8006760 <HAL_SPI_Init+0x108>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006722:	d01d      	beq.n	8006760 <HAL_SPI_Init+0x108>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800672c:	d018      	beq.n	8006760 <HAL_SPI_Init+0x108>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006736:	d013      	beq.n	8006760 <HAL_SPI_Init+0x108>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006740:	d00e      	beq.n	8006760 <HAL_SPI_Init+0x108>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800674a:	d009      	beq.n	8006760 <HAL_SPI_Init+0x108>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006754:	d004      	beq.n	8006760 <HAL_SPI_Init+0x108>
 8006756:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800675a:	4843      	ldr	r0, [pc, #268]	@ (8006868 <HAL_SPI_Init+0x210>)
 800675c:	f7fc f864 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006768:	d00d      	beq.n	8006786 <HAL_SPI_Init+0x12e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <HAL_SPI_Init+0x12e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800677a:	d004      	beq.n	8006786 <HAL_SPI_Init+0x12e>
 800677c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006780:	4839      	ldr	r0, [pc, #228]	@ (8006868 <HAL_SPI_Init+0x210>)
 8006782:	f7fc f851 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678a:	2b08      	cmp	r3, #8
 800678c:	d008      	beq.n	80067a0 <HAL_SPI_Init+0x148>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_SPI_Init+0x148>
 8006796:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800679a:	4833      	ldr	r0, [pc, #204]	@ (8006868 <HAL_SPI_Init+0x210>)
 800679c:	f7fc f844 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d020      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d01c      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d018      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	2b18      	cmp	r3, #24
 80067be:	d014      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d010      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	2b28      	cmp	r3, #40	@ 0x28
 80067ce:	d00c      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2b30      	cmp	r3, #48	@ 0x30
 80067d6:	d008      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b38      	cmp	r3, #56	@ 0x38
 80067de:	d004      	beq.n	80067ea <HAL_SPI_Init+0x192>
 80067e0:	f240 114d 	movw	r1, #333	@ 0x14d
 80067e4:	4820      	ldr	r0, [pc, #128]	@ (8006868 <HAL_SPI_Init+0x210>)
 80067e6:	f7fc f81f 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_SPI_Init+0x1ac>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d004      	beq.n	8006804 <HAL_SPI_Init+0x1ac>
 80067fa:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80067fe:	481a      	ldr	r0, [pc, #104]	@ (8006868 <HAL_SPI_Init+0x210>)
 8006800:	f7fc f812 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <HAL_SPI_Init+0x1c6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	2b10      	cmp	r3, #16
 8006812:	d004      	beq.n	800681e <HAL_SPI_Init+0x1c6>
 8006814:	f240 114f 	movw	r1, #335	@ 0x14f
 8006818:	4813      	ldr	r0, [pc, #76]	@ (8006868 <HAL_SPI_Init+0x210>)
 800681a:	f7fc f805 	bl	8002828 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	d151      	bne.n	80068ca <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_SPI_Init+0x1e8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d004      	beq.n	8006840 <HAL_SPI_Init+0x1e8>
 8006836:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800683a:	480b      	ldr	r0, [pc, #44]	@ (8006868 <HAL_SPI_Init+0x210>)
 800683c:	f7fb fff4 	bl	8002828 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d011      	beq.n	800686c <HAL_SPI_Init+0x214>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d00d      	beq.n	800686c <HAL_SPI_Init+0x214>
 8006850:	f240 1153 	movw	r1, #339	@ 0x153
 8006854:	4804      	ldr	r0, [pc, #16]	@ (8006868 <HAL_SPI_Init+0x210>)
 8006856:	f7fb ffe7 	bl	8002828 <assert_failed>
 800685a:	e007      	b.n	800686c <HAL_SPI_Init+0x214>
 800685c:	40013000 	.word	0x40013000
 8006860:	40003800 	.word	0x40003800
 8006864:	40003c00 	.word	0x40003c00
 8006868:	0800c620 	.word	0x0800c620

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006874:	d125      	bne.n	80068c2 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d050      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	2b08      	cmp	r3, #8
 8006884:	d04c      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	2b10      	cmp	r3, #16
 800688c:	d048      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b18      	cmp	r3, #24
 8006894:	d044      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	2b20      	cmp	r3, #32
 800689c:	d040      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	2b28      	cmp	r3, #40	@ 0x28
 80068a4:	d03c      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	2b30      	cmp	r3, #48	@ 0x30
 80068ac:	d038      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	2b38      	cmp	r3, #56	@ 0x38
 80068b4:	d034      	beq.n	8006920 <HAL_SPI_Init+0x2c8>
 80068b6:	f240 1157 	movw	r1, #343	@ 0x157
 80068ba:	485d      	ldr	r0, [pc, #372]	@ (8006a30 <HAL_SPI_Init+0x3d8>)
 80068bc:	f7fb ffb4 	bl	8002828 <assert_failed>
 80068c0:	e02e      	b.n	8006920 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	61da      	str	r2, [r3, #28]
 80068c8:	e02a      	b.n	8006920 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d020      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d01c      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	2b10      	cmp	r3, #16
 80068e0:	d018      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	2b18      	cmp	r3, #24
 80068e8:	d014      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d010      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b28      	cmp	r3, #40	@ 0x28
 80068f8:	d00c      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	2b30      	cmp	r3, #48	@ 0x30
 8006900:	d008      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	2b38      	cmp	r3, #56	@ 0x38
 8006908:	d004      	beq.n	8006914 <HAL_SPI_Init+0x2bc>
 800690a:	f240 1161 	movw	r1, #353	@ 0x161
 800690e:	4848      	ldr	r0, [pc, #288]	@ (8006a30 <HAL_SPI_Init+0x3d8>)
 8006910:	f7fb ff8a 	bl	8002828 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fb ffb8 	bl	80028b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006960:	d902      	bls.n	8006968 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e002      	b.n	800696e <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800696c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006976:	d007      	beq.n	8006988 <HAL_SPI_Init+0x330>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006980:	d002      	beq.n	8006988 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ca:	ea42 0103 	orr.w	r1, r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	f003 0204 	and.w	r2, r3, #4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a04:	ea42 0103 	orr.w	r1, r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	0800c620 	.word	0x0800c620

08006a34 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006a4a:	f640 0172 	movw	r1, #2162	@ 0x872
 8006a4e:	487f      	ldr	r0, [pc, #508]	@ (8006c4c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006a50:	f7fb feea 	bl	8002828 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_SPI_TransmitReceive_DMA+0x32>
 8006a5c:	f640 0173 	movw	r1, #2163	@ 0x873
 8006a60:	487a      	ldr	r0, [pc, #488]	@ (8006c4c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006a62:	f7fb fee1 	bl	8002828 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <HAL_SPI_TransmitReceive_DMA+0x44>
 8006a6e:	f640 0176 	movw	r1, #2166	@ 0x876
 8006a72:	4876      	ldr	r0, [pc, #472]	@ (8006c4c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006a74:	f7fb fed8 	bl	8002828 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a7e:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_SPI_TransmitReceive_DMA+0x72>
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a92:	d106      	bne.n	8006aa2 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <HAL_SPI_TransmitReceive_DMA+0x6e>
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d001      	beq.n	8006aa6 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e15f      	b.n	8006d66 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006ab2:	887b      	ldrh	r3, [r7, #2]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e154      	b.n	8006d66 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_SPI_TransmitReceive_DMA+0x96>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e14d      	b.n	8006d66 <HAL_SPI_TransmitReceive_DMA+0x332>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d003      	beq.n	8006ae6 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	887a      	ldrh	r2, [r7, #2]
 8006afc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	887a      	ldrh	r2, [r7, #2]
 8006b08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	887a      	ldrh	r2, [r7, #2]
 8006b10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8006b2e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b38:	d908      	bls.n	8006b4c <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	e06f      	b.n	8006c2c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b5a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b66:	d126      	bne.n	8006bb6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10f      	bne.n	8006b94 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b82:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b92:	e010      	b.n	8006bb6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ba2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc0:	d134      	bne.n	8006c2c <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bd0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d111      	bne.n	8006c06 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bf0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006c04:	e012      	b.n	8006c2c <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c14:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3301      	adds	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d10f      	bne.n	8006c58 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3c:	4a04      	ldr	r2, [pc, #16]	@ (8006c50 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8006c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c44:	4a03      	ldr	r2, [pc, #12]	@ (8006c54 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8006c46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c48:	e00e      	b.n	8006c68 <HAL_SPI_TransmitReceive_DMA+0x234>
 8006c4a:	bf00      	nop
 8006c4c:	0800c620 	.word	0x0800c620
 8006c50:	0800710d 	.word	0x0800710d
 8006c54:	08006fd5 	.word	0x08006fd5
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5c:	4a44      	ldr	r2, [pc, #272]	@ (8006d70 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c64:	4a43      	ldr	r2, [pc, #268]	@ (8006d74 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8006c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6c:	4a42      	ldr	r2, [pc, #264]	@ (8006d78 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c74:	2200      	movs	r2, #0
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	4619      	mov	r1, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c88:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006c92:	f7fc ff8f 	bl	8003bb4 <HAL_DMA_Start_IT>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca0:	f043 0210 	orr.w	r2, r3, #16
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e058      	b.n	8006d66 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd8:	2200      	movs	r2, #0
 8006cda:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	4619      	mov	r1, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006cfc:	f7fc ff5a 	bl	8003bb4 <HAL_DMA_Start_IT>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d0a:	f043 0210 	orr.w	r2, r3, #16
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e023      	b.n	8006d66 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d007      	beq.n	8006d3c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0220 	orr.w	r2, r2, #32
 8006d52:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0202 	orr.w	r2, r2, #2
 8006d62:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	08007129 	.word	0x08007129
 8006d74:	0800707d 	.word	0x0800707d
 8006d78:	08007145 	.word	0x08007145

08006d7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10f      	bne.n	8006dc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	099b      	lsrs	r3, r3, #6
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
    return;
 8006dbe:	e0d7      	b.n	8006f70 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <HAL_SPI_IRQHandler+0x66>
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	09db      	lsrs	r3, r3, #7
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
    return;
 8006de0:	e0c6      	b.n	8006f70 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10c      	bne.n	8006e08 <HAL_SPI_IRQHandler+0x8c>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	099b      	lsrs	r3, r3, #6
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80b4 	beq.w	8006f70 <HAL_SPI_IRQHandler+0x1f4>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80ad 	beq.w	8006f70 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d023      	beq.n	8006e6a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d011      	beq.n	8006e52 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e32:	f043 0204 	orr.w	r2, r3, #4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	e00b      	b.n	8006e6a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e52:	2300      	movs	r3, #0
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	693b      	ldr	r3, [r7, #16]
        return;
 8006e68:	e082      	b.n	8006f70 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d014      	beq.n	8006ea0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7a:	f043 0201 	orr.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb0:	f043 0208 	orr.w	r2, r3, #8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d04f      	beq.n	8006f6e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006edc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <HAL_SPI_IRQHandler+0x17e>
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d034      	beq.n	8006f64 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0203 	bic.w	r2, r2, #3
 8006f08:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	4a18      	ldr	r2, [pc, #96]	@ (8006f78 <HAL_SPI_IRQHandler+0x1fc>)
 8006f18:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fc feb6 	bl	8003c90 <HAL_DMA_Abort_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f42:	4a0d      	ldr	r2, [pc, #52]	@ (8006f78 <HAL_SPI_IRQHandler+0x1fc>)
 8006f44:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fc fea0 	bl	8003c90 <HAL_DMA_Abort_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006f62:	e003      	b.n	8006f6c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f81d 	bl	8006fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f6a:	e000      	b.n	8006f6e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006f6c:	bf00      	nop
    return;
 8006f6e:	bf00      	nop
  }
}
 8006f70:	3720      	adds	r7, #32
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	08007185 	.word	0x08007185

08006f7c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fc6:	b2db      	uxtb	r3, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fe2:	f7fc fae3 	bl	80035ac <HAL_GetTick>
 8006fe6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d03c      	beq.n	8007070 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0220 	bic.w	r2, r2, #32
 8007004:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10d      	bne.n	800702a <SPI_DMAReceiveCplt+0x56>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007016:	d108      	bne.n	800702a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0203 	bic.w	r2, r2, #3
 8007026:	605a      	str	r2, [r3, #4]
 8007028:	e007      	b.n	800703a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	2164      	movs	r1, #100	@ 0x64
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f9d4 	bl	80073ec <SPI_EndRxTransaction>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2220      	movs	r2, #32
 800704e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7ff ff9b 	bl	8006fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800706e:	e002      	b.n	8007076 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff ff83 	bl	8006f7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800708a:	f7fc fa8f 	bl	80035ac <HAL_GetTick>
 800708e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b20      	cmp	r3, #32
 800709c:	d030      	beq.n	8007100 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0220 	bic.w	r2, r2, #32
 80070ac:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	2164      	movs	r1, #100	@ 0x64
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f9f2 	bl	800749c <SPI_EndRxTxTransaction>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c2:	f043 0220 	orr.w	r2, r3, #32
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0203 	bic.w	r2, r2, #3
 80070d8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff ff53 	bl	8006fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80070fe:	e002      	b.n	8007106 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7fb fb6e 	bl	80027e2 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007118:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ff38 	bl	8006f90 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7fb fb48 	bl	80027cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0203 	bic.w	r2, r2, #3
 8007160:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007166:	f043 0210 	orr.w	r2, r3, #16
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff ff14 	bl	8006fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7ff feff 	bl	8006fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071c0:	f7fc f9f4 	bl	80035ac <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4413      	add	r3, r2
 80071ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071d0:	f7fc f9ec 	bl	80035ac <HAL_GetTick>
 80071d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071d6:	4b39      	ldr	r3, [pc, #228]	@ (80072bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	015b      	lsls	r3, r3, #5
 80071dc:	0d1b      	lsrs	r3, r3, #20
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	fb02 f303 	mul.w	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071e6:	e054      	b.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d050      	beq.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071f0:	f7fc f9dc 	bl	80035ac <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d902      	bls.n	8007206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d13d      	bne.n	8007282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800721e:	d111      	bne.n	8007244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007228:	d004      	beq.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007232:	d107      	bne.n	8007244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800724c:	d10f      	bne.n	800726e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800726c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e017      	b.n	80072b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3b01      	subs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4013      	ands	r3, r2
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	bf0c      	ite	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	2300      	movne	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d19b      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000010 	.word	0x20000010

080072c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	@ 0x28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072d2:	f7fc f96b 	bl	80035ac <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	4413      	add	r3, r2
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072e2:	f7fc f963 	bl	80035ac <HAL_GetTick>
 80072e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072f0:	4b3d      	ldr	r3, [pc, #244]	@ (80073e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	00da      	lsls	r2, r3, #3
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	0d1b      	lsrs	r3, r3, #20
 8007300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007308:	e060      	b.n	80073cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007310:	d107      	bne.n	8007322 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007320:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d050      	beq.n	80073cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800732a:	f7fc f93f 	bl	80035ac <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007336:	429a      	cmp	r2, r3
 8007338:	d902      	bls.n	8007340 <SPI_WaitFifoStateUntilTimeout+0x80>
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d13d      	bne.n	80073bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800734e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007358:	d111      	bne.n	800737e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007362:	d004      	beq.n	800736e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800736c:	d107      	bne.n	800737e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800737c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007386:	d10f      	bne.n	80073a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e010      	b.n	80073de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4013      	ands	r3, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d196      	bne.n	800730a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3728      	adds	r7, #40	@ 0x28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000010 	.word	0x20000010

080073ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007400:	d111      	bne.n	8007426 <SPI_EndRxTransaction+0x3a>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800740a:	d004      	beq.n	8007416 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007414:	d107      	bne.n	8007426 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007424:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	2180      	movs	r1, #128	@ 0x80
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff febd 	bl	80071b0 <SPI_WaitFlagStateUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e023      	b.n	8007494 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007454:	d11d      	bne.n	8007492 <SPI_EndRxTransaction+0xa6>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800745e:	d004      	beq.n	800746a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007468:	d113      	bne.n	8007492 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff ff22 	bl	80072c0 <SPI_WaitFifoStateUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007486:	f043 0220 	orr.w	r2, r3, #32
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e000      	b.n	8007494 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff ff03 	bl	80072c0 <SPI_WaitFifoStateUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e027      	b.n	8007520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2180      	movs	r1, #128	@ 0x80
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fe68 	bl	80071b0 <SPI_WaitFlagStateUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ea:	f043 0220 	orr.w	r2, r3, #32
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e014      	b.n	8007520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff fedc 	bl	80072c0 <SPI_WaitFifoStateUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e000      	b.n	8007520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e0e6      	b.n	8007708 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a74      	ldr	r2, [pc, #464]	@ (8007710 <HAL_TIM_Base_Init+0x1e8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d036      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800754c:	d031      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a70      	ldr	r2, [pc, #448]	@ (8007714 <HAL_TIM_Base_Init+0x1ec>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d02c      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a6e      	ldr	r2, [pc, #440]	@ (8007718 <HAL_TIM_Base_Init+0x1f0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d027      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a6d      	ldr	r2, [pc, #436]	@ (800771c <HAL_TIM_Base_Init+0x1f4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d022      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a6b      	ldr	r2, [pc, #428]	@ (8007720 <HAL_TIM_Base_Init+0x1f8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01d      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a6a      	ldr	r2, [pc, #424]	@ (8007724 <HAL_TIM_Base_Init+0x1fc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d018      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a68      	ldr	r2, [pc, #416]	@ (8007728 <HAL_TIM_Base_Init+0x200>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a67      	ldr	r2, [pc, #412]	@ (800772c <HAL_TIM_Base_Init+0x204>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a65      	ldr	r2, [pc, #404]	@ (8007730 <HAL_TIM_Base_Init+0x208>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d009      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a64      	ldr	r2, [pc, #400]	@ (8007734 <HAL_TIM_Base_Init+0x20c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIM_Base_Init+0x8a>
 80075a8:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80075ac:	4862      	ldr	r0, [pc, #392]	@ (8007738 <HAL_TIM_Base_Init+0x210>)
 80075ae:	f7fb f93b 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d014      	beq.n	80075e4 <HAL_TIM_Base_Init+0xbc>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2b10      	cmp	r3, #16
 80075c0:	d010      	beq.n	80075e4 <HAL_TIM_Base_Init+0xbc>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d00c      	beq.n	80075e4 <HAL_TIM_Base_Init+0xbc>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b40      	cmp	r3, #64	@ 0x40
 80075d0:	d008      	beq.n	80075e4 <HAL_TIM_Base_Init+0xbc>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b60      	cmp	r3, #96	@ 0x60
 80075d8:	d004      	beq.n	80075e4 <HAL_TIM_Base_Init+0xbc>
 80075da:	f240 1117 	movw	r1, #279	@ 0x117
 80075de:	4856      	ldr	r0, [pc, #344]	@ (8007738 <HAL_TIM_Base_Init+0x210>)
 80075e0:	f7fb f922 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00e      	beq.n	800760a <HAL_TIM_Base_Init+0xe2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f4:	d009      	beq.n	800760a <HAL_TIM_Base_Init+0xe2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fe:	d004      	beq.n	800760a <HAL_TIM_Base_Init+0xe2>
 8007600:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007604:	484c      	ldr	r0, [pc, #304]	@ (8007738 <HAL_TIM_Base_Init+0x210>)
 8007606:	f7fb f90f 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007612:	d004      	beq.n	800761e <HAL_TIM_Base_Init+0xf6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a40      	ldr	r2, [pc, #256]	@ (800771c <HAL_TIM_Base_Init+0x1f4>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d107      	bne.n	800762e <HAL_TIM_Base_Init+0x106>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf14      	ite	ne
 8007626:	2301      	movne	r3, #1
 8007628:	2300      	moveq	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	e00e      	b.n	800764c <HAL_TIM_Base_Init+0x124>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d006      	beq.n	8007644 <HAL_TIM_Base_Init+0x11c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763e:	d201      	bcs.n	8007644 <HAL_TIM_Base_Init+0x11c>
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_TIM_Base_Init+0x11e>
 8007644:	2300      	movs	r3, #0
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_TIM_Base_Init+0x132>
 8007650:	f240 1119 	movw	r1, #281	@ 0x119
 8007654:	4838      	ldr	r0, [pc, #224]	@ (8007738 <HAL_TIM_Base_Init+0x210>)
 8007656:	f7fb f8e7 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d008      	beq.n	8007674 <HAL_TIM_Base_Init+0x14c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b80      	cmp	r3, #128	@ 0x80
 8007668:	d004      	beq.n	8007674 <HAL_TIM_Base_Init+0x14c>
 800766a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800766e:	4832      	ldr	r0, [pc, #200]	@ (8007738 <HAL_TIM_Base_Init+0x210>)
 8007670:	f7fb f8da 	bl	8002828 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d106      	bne.n	800768e <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fb fdc3 	bl	8003214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f001 fc27 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40000400 	.word	0x40000400
 8007718:	40000800 	.word	0x40000800
 800771c:	40000c00 	.word	0x40000c00
 8007720:	40001000 	.word	0x40001000
 8007724:	40001400 	.word	0x40001400
 8007728:	40013400 	.word	0x40013400
 800772c:	40014000 	.word	0x40014000
 8007730:	40014400 	.word	0x40014400
 8007734:	40014800 	.word	0x40014800
 8007738:	0800c658 	.word	0x0800c658

0800773c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e0e6      	b.n	800791c <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a74      	ldr	r2, [pc, #464]	@ (8007924 <HAL_TIM_PWM_Init+0x1e8>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d036      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007760:	d031      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a70      	ldr	r2, [pc, #448]	@ (8007928 <HAL_TIM_PWM_Init+0x1ec>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d02c      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a6e      	ldr	r2, [pc, #440]	@ (800792c <HAL_TIM_PWM_Init+0x1f0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d027      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a6d      	ldr	r2, [pc, #436]	@ (8007930 <HAL_TIM_PWM_Init+0x1f4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a6b      	ldr	r2, [pc, #428]	@ (8007934 <HAL_TIM_PWM_Init+0x1f8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6a      	ldr	r2, [pc, #424]	@ (8007938 <HAL_TIM_PWM_Init+0x1fc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a68      	ldr	r2, [pc, #416]	@ (800793c <HAL_TIM_PWM_Init+0x200>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a67      	ldr	r2, [pc, #412]	@ (8007940 <HAL_TIM_PWM_Init+0x204>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a65      	ldr	r2, [pc, #404]	@ (8007944 <HAL_TIM_PWM_Init+0x208>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a64      	ldr	r2, [pc, #400]	@ (8007948 <HAL_TIM_PWM_Init+0x20c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_TIM_PWM_Init+0x8a>
 80077bc:	f240 5133 	movw	r1, #1331	@ 0x533
 80077c0:	4862      	ldr	r0, [pc, #392]	@ (800794c <HAL_TIM_PWM_Init+0x210>)
 80077c2:	f7fb f831 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d014      	beq.n	80077f8 <HAL_TIM_PWM_Init+0xbc>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d010      	beq.n	80077f8 <HAL_TIM_PWM_Init+0xbc>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d00c      	beq.n	80077f8 <HAL_TIM_PWM_Init+0xbc>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b40      	cmp	r3, #64	@ 0x40
 80077e4:	d008      	beq.n	80077f8 <HAL_TIM_PWM_Init+0xbc>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b60      	cmp	r3, #96	@ 0x60
 80077ec:	d004      	beq.n	80077f8 <HAL_TIM_PWM_Init+0xbc>
 80077ee:	f240 5134 	movw	r1, #1332	@ 0x534
 80077f2:	4856      	ldr	r0, [pc, #344]	@ (800794c <HAL_TIM_PWM_Init+0x210>)
 80077f4:	f7fb f818 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00e      	beq.n	800781e <HAL_TIM_PWM_Init+0xe2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007808:	d009      	beq.n	800781e <HAL_TIM_PWM_Init+0xe2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007812:	d004      	beq.n	800781e <HAL_TIM_PWM_Init+0xe2>
 8007814:	f240 5135 	movw	r1, #1333	@ 0x535
 8007818:	484c      	ldr	r0, [pc, #304]	@ (800794c <HAL_TIM_PWM_Init+0x210>)
 800781a:	f7fb f805 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007826:	d004      	beq.n	8007832 <HAL_TIM_PWM_Init+0xf6>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a40      	ldr	r2, [pc, #256]	@ (8007930 <HAL_TIM_PWM_Init+0x1f4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d107      	bne.n	8007842 <HAL_TIM_PWM_Init+0x106>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2301      	movne	r3, #1
 800783c:	2300      	moveq	r3, #0
 800783e:	b2db      	uxtb	r3, r3
 8007840:	e00e      	b.n	8007860 <HAL_TIM_PWM_Init+0x124>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d006      	beq.n	8007858 <HAL_TIM_PWM_Init+0x11c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007852:	d201      	bcs.n	8007858 <HAL_TIM_PWM_Init+0x11c>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <HAL_TIM_PWM_Init+0x11e>
 8007858:	2300      	movs	r3, #0
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <HAL_TIM_PWM_Init+0x132>
 8007864:	f240 5136 	movw	r1, #1334	@ 0x536
 8007868:	4838      	ldr	r0, [pc, #224]	@ (800794c <HAL_TIM_PWM_Init+0x210>)
 800786a:	f7fa ffdd 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <HAL_TIM_PWM_Init+0x14c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b80      	cmp	r3, #128	@ 0x80
 800787c:	d004      	beq.n	8007888 <HAL_TIM_PWM_Init+0x14c>
 800787e:	f240 5137 	movw	r1, #1335	@ 0x537
 8007882:	4832      	ldr	r0, [pc, #200]	@ (800794c <HAL_TIM_PWM_Init+0x210>)
 8007884:	f7fa ffd0 	bl	8002828 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f857 	bl	8007950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f001 fb1d 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40001000 	.word	0x40001000
 8007938:	40001400 	.word	0x40001400
 800793c:	40013400 	.word	0x40013400
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800
 800794c:	0800c658 	.word	0x0800c658

08007950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a85      	ldr	r2, [pc, #532]	@ (8007b88 <HAL_TIM_PWM_Start+0x224>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d115      	bne.n	80079a4 <HAL_TIM_PWM_Start+0x40>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 808d 	beq.w	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b04      	cmp	r3, #4
 8007984:	f000 8089 	beq.w	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b08      	cmp	r3, #8
 800798c:	f000 8085 	beq.w	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b0c      	cmp	r3, #12
 8007994:	f000 8081 	beq.w	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b10      	cmp	r3, #16
 800799c:	d07d      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b14      	cmp	r3, #20
 80079a2:	d07a      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ac:	d10b      	bne.n	80079c6 <HAL_TIM_PWM_Start+0x62>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d072      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d06f      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d06c      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	d069      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a70      	ldr	r2, [pc, #448]	@ (8007b8c <HAL_TIM_PWM_Start+0x228>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d10b      	bne.n	80079e8 <HAL_TIM_PWM_Start+0x84>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d061      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d05e      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d05b      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	d058      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a68      	ldr	r2, [pc, #416]	@ (8007b90 <HAL_TIM_PWM_Start+0x22c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d10b      	bne.n	8007a0a <HAL_TIM_PWM_Start+0xa6>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d050      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d04d      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d04a      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b0c      	cmp	r3, #12
 8007a08:	d047      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a61      	ldr	r2, [pc, #388]	@ (8007b94 <HAL_TIM_PWM_Start+0x230>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10b      	bne.n	8007a2c <HAL_TIM_PWM_Start+0xc8>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d03f      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d03c      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d039      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b0c      	cmp	r3, #12
 8007a2a:	d036      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a59      	ldr	r2, [pc, #356]	@ (8007b98 <HAL_TIM_PWM_Start+0x234>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d111      	bne.n	8007a5a <HAL_TIM_PWM_Start+0xf6>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d02e      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d02b      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d028      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b0c      	cmp	r3, #12
 8007a4c:	d025      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d022      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b14      	cmp	r3, #20
 8007a58:	d01f      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a4f      	ldr	r2, [pc, #316]	@ (8007b9c <HAL_TIM_PWM_Start+0x238>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d105      	bne.n	8007a70 <HAL_TIM_PWM_Start+0x10c>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d017      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d014      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a4a      	ldr	r2, [pc, #296]	@ (8007ba0 <HAL_TIM_PWM_Start+0x23c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d102      	bne.n	8007a80 <HAL_TIM_PWM_Start+0x11c>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00c      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a47      	ldr	r2, [pc, #284]	@ (8007ba4 <HAL_TIM_PWM_Start+0x240>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d102      	bne.n	8007a90 <HAL_TIM_PWM_Start+0x12c>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x136>
 8007a90:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8007a94:	4844      	ldr	r0, [pc, #272]	@ (8007ba8 <HAL_TIM_PWM_Start+0x244>)
 8007a96:	f7fa fec7 	bl	8002828 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x150>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e03c      	b.n	8007b2e <HAL_TIM_PWM_Start+0x1ca>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d109      	bne.n	8007ace <HAL_TIM_PWM_Start+0x16a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	e02f      	b.n	8007b2e <HAL_TIM_PWM_Start+0x1ca>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d109      	bne.n	8007ae8 <HAL_TIM_PWM_Start+0x184>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e022      	b.n	8007b2e <HAL_TIM_PWM_Start+0x1ca>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b0c      	cmp	r3, #12
 8007aec:	d109      	bne.n	8007b02 <HAL_TIM_PWM_Start+0x19e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	bf14      	ite	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	2300      	moveq	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e015      	b.n	8007b2e <HAL_TIM_PWM_Start+0x1ca>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d109      	bne.n	8007b1c <HAL_TIM_PWM_Start+0x1b8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	bf14      	ite	ne
 8007b14:	2301      	movne	r3, #1
 8007b16:	2300      	moveq	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e008      	b.n	8007b2e <HAL_TIM_PWM_Start+0x1ca>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e0af      	b.n	8007c96 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <HAL_TIM_PWM_Start+0x1e2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b44:	e036      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x250>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_PWM_Start+0x1f2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b54:	e02e      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x250>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Start+0x202>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b64:	e026      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x250>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b0c      	cmp	r3, #12
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_PWM_Start+0x212>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b74:	e01e      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x250>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d117      	bne.n	8007bac <HAL_TIM_PWM_Start+0x248>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b84:	e016      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x250>
 8007b86:	bf00      	nop
 8007b88:	40012c00 	.word	0x40012c00
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40013400 	.word	0x40013400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800
 8007ba8:	0800c658 	.word	0x0800c658
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fe39 	bl	8009834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a36      	ldr	r2, [pc, #216]	@ (8007ca0 <HAL_TIM_PWM_Start+0x33c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <HAL_TIM_PWM_Start+0x290>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a34      	ldr	r2, [pc, #208]	@ (8007ca4 <HAL_TIM_PWM_Start+0x340>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00e      	beq.n	8007bf4 <HAL_TIM_PWM_Start+0x290>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a33      	ldr	r2, [pc, #204]	@ (8007ca8 <HAL_TIM_PWM_Start+0x344>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d009      	beq.n	8007bf4 <HAL_TIM_PWM_Start+0x290>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a31      	ldr	r2, [pc, #196]	@ (8007cac <HAL_TIM_PWM_Start+0x348>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIM_PWM_Start+0x290>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a30      	ldr	r2, [pc, #192]	@ (8007cb0 <HAL_TIM_PWM_Start+0x34c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d101      	bne.n	8007bf8 <HAL_TIM_PWM_Start+0x294>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <HAL_TIM_PWM_Start+0x296>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a23      	ldr	r2, [pc, #140]	@ (8007ca0 <HAL_TIM_PWM_Start+0x33c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2f0>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c20:	d018      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2f0>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a23      	ldr	r2, [pc, #140]	@ (8007cb4 <HAL_TIM_PWM_Start+0x350>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2f0>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a21      	ldr	r2, [pc, #132]	@ (8007cb8 <HAL_TIM_PWM_Start+0x354>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2f0>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a20      	ldr	r2, [pc, #128]	@ (8007cbc <HAL_TIM_PWM_Start+0x358>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2f0>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a17      	ldr	r2, [pc, #92]	@ (8007ca4 <HAL_TIM_PWM_Start+0x340>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2f0>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ca8 <HAL_TIM_PWM_Start+0x344>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d115      	bne.n	8007c80 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <HAL_TIM_PWM_Start+0x35c>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b06      	cmp	r3, #6
 8007c64:	d015      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x32e>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c6c:	d011      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0201 	orr.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7e:	e008      	b.n	8007c92 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e000      	b.n	8007c94 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40013400 	.word	0x40013400
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40014400 	.word	0x40014400
 8007cb0:	40014800 	.word	0x40014800
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	40000c00 	.word	0x40000c00
 8007cc0:	00010007 	.word	0x00010007

08007cc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e1b0      	b.n	800803a <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8007edc <HAL_TIM_Encoder_Init+0x218>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01d      	beq.n	8007d1e <HAL_TIM_Encoder_Init+0x5a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cea:	d018      	beq.n	8007d1e <HAL_TIM_Encoder_Init+0x5a>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7b      	ldr	r2, [pc, #492]	@ (8007ee0 <HAL_TIM_Encoder_Init+0x21c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <HAL_TIM_Encoder_Init+0x5a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7a      	ldr	r2, [pc, #488]	@ (8007ee4 <HAL_TIM_Encoder_Init+0x220>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_TIM_Encoder_Init+0x5a>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a78      	ldr	r2, [pc, #480]	@ (8007ee8 <HAL_TIM_Encoder_Init+0x224>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_TIM_Encoder_Init+0x5a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a77      	ldr	r2, [pc, #476]	@ (8007eec <HAL_TIM_Encoder_Init+0x228>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_TIM_Encoder_Init+0x5a>
 8007d14:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8007d18:	4875      	ldr	r0, [pc, #468]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007d1a:	f7fa fd85 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d014      	beq.n	8007d50 <HAL_TIM_Encoder_Init+0x8c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d010      	beq.n	8007d50 <HAL_TIM_Encoder_Init+0x8c>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d00c      	beq.n	8007d50 <HAL_TIM_Encoder_Init+0x8c>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d008      	beq.n	8007d50 <HAL_TIM_Encoder_Init+0x8c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b60      	cmp	r3, #96	@ 0x60
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_Encoder_Init+0x8c>
 8007d46:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007d4a:	4869      	ldr	r0, [pc, #420]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007d4c:	f7fa fd6c 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00e      	beq.n	8007d76 <HAL_TIM_Encoder_Init+0xb2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d60:	d009      	beq.n	8007d76 <HAL_TIM_Encoder_Init+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIM_Encoder_Init+0xb2>
 8007d6c:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8007d70:	485f      	ldr	r0, [pc, #380]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007d72:	f7fa fd59 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <HAL_TIM_Encoder_Init+0xcc>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	2b80      	cmp	r3, #128	@ 0x80
 8007d84:	d004      	beq.n	8007d90 <HAL_TIM_Encoder_Init+0xcc>
 8007d86:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8007d8a:	4859      	ldr	r0, [pc, #356]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007d8c:	f7fa fd4c 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d00c      	beq.n	8007db2 <HAL_TIM_Encoder_Init+0xee>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d008      	beq.n	8007db2 <HAL_TIM_Encoder_Init+0xee>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d004      	beq.n	8007db2 <HAL_TIM_Encoder_Init+0xee>
 8007da8:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8007dac:	4850      	ldr	r0, [pc, #320]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007dae:	f7fa fd3b 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d00c      	beq.n	8007dd4 <HAL_TIM_Encoder_Init+0x110>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d008      	beq.n	8007dd4 <HAL_TIM_Encoder_Init+0x110>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d004      	beq.n	8007dd4 <HAL_TIM_Encoder_Init+0x110>
 8007dca:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8007dce:	4848      	ldr	r0, [pc, #288]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007dd0:	f7fa fd2a 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d00c      	beq.n	8007df6 <HAL_TIM_Encoder_Init+0x132>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d008      	beq.n	8007df6 <HAL_TIM_Encoder_Init+0x132>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d004      	beq.n	8007df6 <HAL_TIM_Encoder_Init+0x132>
 8007dec:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8007df0:	483f      	ldr	r0, [pc, #252]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007df2:	f7fa fd19 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_TIM_Encoder_Init+0x14c>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d004      	beq.n	8007e10 <HAL_TIM_Encoder_Init+0x14c>
 8007e06:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8007e0a:	4839      	ldr	r0, [pc, #228]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007e0c:	f7fa fd0c 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_TIM_Encoder_Init+0x166>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIM_Encoder_Init+0x166>
 8007e20:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8007e24:	4832      	ldr	r0, [pc, #200]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007e26:	f7fa fcff 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d010      	beq.n	8007e54 <HAL_TIM_Encoder_Init+0x190>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d00c      	beq.n	8007e54 <HAL_TIM_Encoder_Init+0x190>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	d008      	beq.n	8007e54 <HAL_TIM_Encoder_Init+0x190>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b0c      	cmp	r3, #12
 8007e48:	d004      	beq.n	8007e54 <HAL_TIM_Encoder_Init+0x190>
 8007e4a:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8007e4e:	4828      	ldr	r0, [pc, #160]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007e50:	f7fa fcea 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d010      	beq.n	8007e7e <HAL_TIM_Encoder_Init+0x1ba>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d00c      	beq.n	8007e7e <HAL_TIM_Encoder_Init+0x1ba>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d008      	beq.n	8007e7e <HAL_TIM_Encoder_Init+0x1ba>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	2b0c      	cmp	r3, #12
 8007e72:	d004      	beq.n	8007e7e <HAL_TIM_Encoder_Init+0x1ba>
 8007e74:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007e78:	481d      	ldr	r0, [pc, #116]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007e7a:	f7fa fcd5 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	d904      	bls.n	8007e90 <HAL_TIM_Encoder_Init+0x1cc>
 8007e86:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8007e8a:	4819      	ldr	r0, [pc, #100]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007e8c:	f7fa fccc 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	2b0f      	cmp	r3, #15
 8007e96:	d904      	bls.n	8007ea2 <HAL_TIM_Encoder_Init+0x1de>
 8007e98:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8007e9c:	4814      	ldr	r0, [pc, #80]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x22c>)
 8007e9e:	f7fa fcc3 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eaa:	d004      	beq.n	8007eb6 <HAL_TIM_Encoder_Init+0x1f2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee8 <HAL_TIM_Encoder_Init+0x224>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d107      	bne.n	8007ec6 <HAL_TIM_Encoder_Init+0x202>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bf14      	ite	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	2300      	moveq	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	e01a      	b.n	8007efc <HAL_TIM_Encoder_Init+0x238>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d012      	beq.n	8007ef4 <HAL_TIM_Encoder_Init+0x230>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed6:	d20d      	bcs.n	8007ef4 <HAL_TIM_Encoder_Init+0x230>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e00c      	b.n	8007ef6 <HAL_TIM_Encoder_Init+0x232>
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40000c00 	.word	0x40000c00
 8007eec:	40013400 	.word	0x40013400
 8007ef0:	0800c658 	.word	0x0800c658
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_Encoder_Init+0x246>
 8007f00:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8007f04:	484f      	ldr	r0, [pc, #316]	@ (8008044 <HAL_TIM_Encoder_Init+0x380>)
 8007f06:	f7fa fc8f 	bl	8002828 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fb f8b6 	bl	8003090 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007f3a:	f023 0307 	bic.w	r3, r3, #7
 8007f3e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f000 ffd2 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f78:	f023 0303 	bic.w	r3, r3, #3
 8007f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689a      	ldr	r2, [r3, #8]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007f96:	f023 030c 	bic.w	r3, r3, #12
 8007f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	011a      	lsls	r2, r3, #4
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	031b      	lsls	r3, r3, #12
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007fd4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007fdc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	0800c658 	.word	0x0800c658

08008048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d020      	beq.n	80080ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01b      	beq.n	80080ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0202 	mvn.w	r2, #2
 800807c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 ff10 	bl	8008eb8 <HAL_TIM_IC_CaptureCallback>
 8008098:	e005      	b.n	80080a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 ff02 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 ff13 	bl	8008ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d020      	beq.n	80080f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01b      	beq.n	80080f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f06f 0204 	mvn.w	r2, #4
 80080c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2202      	movs	r2, #2
 80080ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 feea 	bl	8008eb8 <HAL_TIM_IC_CaptureCallback>
 80080e4:	e005      	b.n	80080f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fedc 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 feed 	bl	8008ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d020      	beq.n	8008144 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01b      	beq.n	8008144 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0208 	mvn.w	r2, #8
 8008114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2204      	movs	r2, #4
 800811a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fec4 	bl	8008eb8 <HAL_TIM_IC_CaptureCallback>
 8008130:	e005      	b.n	800813e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 feb6 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fec7 	bl	8008ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b00      	cmp	r3, #0
 800814c:	d020      	beq.n	8008190 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01b      	beq.n	8008190 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0210 	mvn.w	r2, #16
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2208      	movs	r2, #8
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fe9e 	bl	8008eb8 <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fe90 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fea1 	bl	8008ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00c      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0201 	mvn.w	r2, #1
 80081ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fe6e 	bl	8008e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00c      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fe39 	bl	8009e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fe31 	bl	8009e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fe5b 	bl	8008ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00c      	beq.n	800824e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d007      	beq.n	800824e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f06f 0220 	mvn.w	r2, #32
 8008246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 fdf9 	bl	8009e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d016      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b04      	cmp	r3, #4
 8008272:	d013      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d010      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b0c      	cmp	r3, #12
 800827e:	d00d      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b10      	cmp	r3, #16
 8008284:	d00a      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b14      	cmp	r3, #20
 800828a:	d007      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b3c      	cmp	r3, #60	@ 0x3c
 8008290:	d004      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008292:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8008296:	488b      	ldr	r0, [pc, #556]	@ (80084c4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008298:	f7fa fac6 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b60      	cmp	r3, #96	@ 0x60
 80082a2:	d01c      	beq.n	80082de <HAL_TIM_PWM_ConfigChannel+0x86>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b70      	cmp	r3, #112	@ 0x70
 80082aa:	d018      	beq.n	80082de <HAL_TIM_PWM_ConfigChannel+0x86>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a85      	ldr	r2, [pc, #532]	@ (80084c8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d013      	beq.n	80082de <HAL_TIM_PWM_ConfigChannel+0x86>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a84      	ldr	r2, [pc, #528]	@ (80084cc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00e      	beq.n	80082de <HAL_TIM_PWM_ConfigChannel+0x86>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a82      	ldr	r2, [pc, #520]	@ (80084d0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d009      	beq.n	80082de <HAL_TIM_PWM_ConfigChannel+0x86>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a81      	ldr	r2, [pc, #516]	@ (80084d4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d004      	beq.n	80082de <HAL_TIM_PWM_ConfigChannel+0x86>
 80082d4:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 80082d8:	487a      	ldr	r0, [pc, #488]	@ (80084c4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80082da:	f7fa faa5 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d008      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d004      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80082ee:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 80082f2:	4874      	ldr	r0, [pc, #464]	@ (80084c4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80082f4:	f7fa fa98 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d008      	beq.n	8008312 <HAL_TIM_PWM_ConfigChannel+0xba>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	2b04      	cmp	r3, #4
 8008306:	d004      	beq.n	8008312 <HAL_TIM_PWM_ConfigChannel+0xba>
 8008308:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800830c:	486d      	ldr	r0, [pc, #436]	@ (80084c4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800830e:	f7fa fa8b 	bl	8002828 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800831c:	2302      	movs	r3, #2
 800831e:	e1d9      	b.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x47c>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b14      	cmp	r3, #20
 800832c:	f200 81ca 	bhi.w	80086c4 <HAL_TIM_PWM_ConfigChannel+0x46c>
 8008330:	a201      	add	r2, pc, #4	@ (adr r2, 8008338 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	0800838d 	.word	0x0800838d
 800833c:	080086c5 	.word	0x080086c5
 8008340:	080086c5 	.word	0x080086c5
 8008344:	080086c5 	.word	0x080086c5
 8008348:	08008431 	.word	0x08008431
 800834c:	080086c5 	.word	0x080086c5
 8008350:	080086c5 	.word	0x080086c5
 8008354:	080086c5 	.word	0x080086c5
 8008358:	080084f9 	.word	0x080084f9
 800835c:	080086c5 	.word	0x080086c5
 8008360:	080086c5 	.word	0x080086c5
 8008364:	080086c5 	.word	0x080086c5
 8008368:	0800857f 	.word	0x0800857f
 800836c:	080086c5 	.word	0x080086c5
 8008370:	080086c5 	.word	0x080086c5
 8008374:	080086c5 	.word	0x080086c5
 8008378:	08008607 	.word	0x08008607
 800837c:	080086c5 	.word	0x080086c5
 8008380:	080086c5 	.word	0x080086c5
 8008384:	080086c5 	.word	0x080086c5
 8008388:	08008665 	.word	0x08008665
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a51      	ldr	r2, [pc, #324]	@ (80084d8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d02c      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800839e:	d027      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a4d      	ldr	r2, [pc, #308]	@ (80084dc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d022      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a4c      	ldr	r2, [pc, #304]	@ (80084e0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d01d      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a4a      	ldr	r2, [pc, #296]	@ (80084e4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d018      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a49      	ldr	r2, [pc, #292]	@ (80084e8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d013      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a47      	ldr	r2, [pc, #284]	@ (80084ec <HAL_TIM_PWM_ConfigChannel+0x294>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00e      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a46      	ldr	r2, [pc, #280]	@ (80084f0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d009      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a44      	ldr	r2, [pc, #272]	@ (80084f4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d004      	beq.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083e6:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80083ea:	4836      	ldr	r0, [pc, #216]	@ (80084c4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80083ec:	f7fa fa1c 	bl	8002828 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fe22 	bl	8009040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0208 	orr.w	r2, r2, #8
 800840a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0204 	bic.w	r2, r2, #4
 800841a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6999      	ldr	r1, [r3, #24]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	619a      	str	r2, [r3, #24]
      break;
 800842e:	e14c      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a28      	ldr	r2, [pc, #160]	@ (80084d8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d022      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008442:	d01d      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a24      	ldr	r2, [pc, #144]	@ (80084dc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d018      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a23      	ldr	r2, [pc, #140]	@ (80084e0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d013      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00e      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a20      	ldr	r2, [pc, #128]	@ (80084e8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1e      	ldr	r2, [pc, #120]	@ (80084ec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008476:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800847a:	4812      	ldr	r0, [pc, #72]	@ (80084c4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800847c:	f7fa f9d4 	bl	8002828 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fe94 	bl	80091b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800849a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6999      	ldr	r1, [r3, #24]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	021a      	lsls	r2, r3, #8
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	619a      	str	r2, [r3, #24]
      break;
 80084c0:	e103      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x472>
 80084c2:	bf00      	nop
 80084c4:	0800c658 	.word	0x0800c658
 80084c8:	00010040 	.word	0x00010040
 80084cc:	00010050 	.word	0x00010050
 80084d0:	00010060 	.word	0x00010060
 80084d4:	00010070 	.word	0x00010070
 80084d8:	40012c00 	.word	0x40012c00
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40000c00 	.word	0x40000c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a77      	ldr	r2, [pc, #476]	@ (80086dc <HAL_TIM_PWM_ConfigChannel+0x484>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01d      	beq.n	800853e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850a:	d018      	beq.n	800853e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a73      	ldr	r2, [pc, #460]	@ (80086e0 <HAL_TIM_PWM_ConfigChannel+0x488>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a72      	ldr	r2, [pc, #456]	@ (80086e4 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a70      	ldr	r2, [pc, #448]	@ (80086e8 <HAL_TIM_PWM_ConfigChannel+0x490>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a6f      	ldr	r2, [pc, #444]	@ (80086ec <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008534:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8008538:	486d      	ldr	r0, [pc, #436]	@ (80086f0 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800853a:	f7fa f975 	bl	8002828 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fee7 	bl	8009318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0208 	orr.w	r2, r2, #8
 8008558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69da      	ldr	r2, [r3, #28]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0204 	bic.w	r2, r2, #4
 8008568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69d9      	ldr	r1, [r3, #28]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	61da      	str	r2, [r3, #28]
      break;
 800857c:	e0a5      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a56      	ldr	r2, [pc, #344]	@ (80086dc <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d01d      	beq.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008590:	d018      	beq.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a52      	ldr	r2, [pc, #328]	@ (80086e0 <HAL_TIM_PWM_ConfigChannel+0x488>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d013      	beq.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a50      	ldr	r2, [pc, #320]	@ (80086e4 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00e      	beq.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a4f      	ldr	r2, [pc, #316]	@ (80086e8 <HAL_TIM_PWM_ConfigChannel+0x490>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d009      	beq.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a4d      	ldr	r2, [pc, #308]	@ (80086ec <HAL_TIM_PWM_ConfigChannel+0x494>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085ba:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 80085be:	484c      	ldr	r0, [pc, #304]	@ (80086f0 <HAL_TIM_PWM_ConfigChannel+0x498>)
 80085c0:	f7fa f932 	bl	8002828 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 ff56 	bl	800947c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69da      	ldr	r2, [r3, #28]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	69d9      	ldr	r1, [r3, #28]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	021a      	lsls	r2, r3, #8
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	61da      	str	r2, [r3, #28]
      break;
 8008604:	e061      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a34      	ldr	r2, [pc, #208]	@ (80086dc <HAL_TIM_PWM_ConfigChannel+0x484>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d009      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a35      	ldr	r2, [pc, #212]	@ (80086ec <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800861a:	f241 1104 	movw	r1, #4356	@ 0x1104
 800861e:	4834      	ldr	r0, [pc, #208]	@ (80086f0 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008620:	f7fa f902 	bl	8002828 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 ff9e 	bl	800956c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0208 	orr.w	r2, r2, #8
 800863e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0204 	bic.w	r2, r2, #4
 800864e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	691a      	ldr	r2, [r3, #16]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008662:	e032      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1c      	ldr	r2, [pc, #112]	@ (80086dc <HAL_TIM_PWM_ConfigChannel+0x484>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a1e      	ldr	r2, [pc, #120]	@ (80086ec <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d004      	beq.n	8008682 <HAL_TIM_PWM_ConfigChannel+0x42a>
 8008678:	f241 1115 	movw	r1, #4373	@ 0x1115
 800867c:	481c      	ldr	r0, [pc, #112]	@ (80086f0 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800867e:	f7fa f8d3 	bl	8002828 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 ffd3 	bl	8009634 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800869c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ac:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	021a      	lsls	r2, r3, #8
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80086c2:	e002      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	75fb      	strb	r3, [r7, #23]
      break;
 80086c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40012c00 	.word	0x40012c00
 80086e0:	40000400 	.word	0x40000400
 80086e4:	40000800 	.word	0x40000800
 80086e8:	40000c00 	.word	0x40000c00
 80086ec:	40013400 	.word	0x40013400
 80086f0:	0800c658 	.word	0x0800c658

080086f4 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a33      	ldr	r2, [pc, #204]	@ (80087d0 <HAL_TIM_GenerateEvent+0xdc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d036      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008710:	d031      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a2f      	ldr	r2, [pc, #188]	@ (80087d4 <HAL_TIM_GenerateEvent+0xe0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d02c      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a2d      	ldr	r2, [pc, #180]	@ (80087d8 <HAL_TIM_GenerateEvent+0xe4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d027      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a2c      	ldr	r2, [pc, #176]	@ (80087dc <HAL_TIM_GenerateEvent+0xe8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d022      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a2a      	ldr	r2, [pc, #168]	@ (80087e0 <HAL_TIM_GenerateEvent+0xec>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d01d      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a29      	ldr	r2, [pc, #164]	@ (80087e4 <HAL_TIM_GenerateEvent+0xf0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d018      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a27      	ldr	r2, [pc, #156]	@ (80087e8 <HAL_TIM_GenerateEvent+0xf4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d013      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a26      	ldr	r2, [pc, #152]	@ (80087ec <HAL_TIM_GenerateEvent+0xf8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00e      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a24      	ldr	r2, [pc, #144]	@ (80087f0 <HAL_TIM_GenerateEvent+0xfc>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d009      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a23      	ldr	r2, [pc, #140]	@ (80087f4 <HAL_TIM_GenerateEvent+0x100>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <HAL_TIM_GenerateEvent+0x82>
 800876c:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8008770:	4821      	ldr	r0, [pc, #132]	@ (80087f8 <HAL_TIM_GenerateEvent+0x104>)
 8008772:	f7fa f859 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800877c:	d202      	bcs.n	8008784 <HAL_TIM_GenerateEvent+0x90>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_TIM_GenerateEvent+0x9a>
 8008784:	f241 4181 	movw	r1, #5249	@ 0x1481
 8008788:	481b      	ldr	r0, [pc, #108]	@ (80087f8 <HAL_TIM_GenerateEvent+0x104>)
 800878a:	f7fa f84d 	bl	8002828 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_TIM_GenerateEvent+0xa8>
 8008798:	2302      	movs	r3, #2
 800879a:	e014      	b.n	80087c6 <HAL_TIM_GenerateEvent+0xd2>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	40000c00 	.word	0x40000c00
 80087e0:	40001000 	.word	0x40001000
 80087e4:	40001400 	.word	0x40001400
 80087e8:	40013400 	.word	0x40013400
 80087ec:	40014000 	.word	0x40014000
 80087f0:	40014400 	.word	0x40014400
 80087f4:	40014800 	.word	0x40014800
 80087f8:	0800c658 	.word	0x0800c658

080087fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_TIM_ConfigClockSource+0x1c>
 8008814:	2302      	movs	r3, #2
 8008816:	e329      	b.n	8008e6c <HAL_TIM_ConfigClockSource+0x670>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008830:	d029      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b70      	cmp	r3, #112	@ 0x70
 8008838:	d025      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008842:	d020      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b40      	cmp	r3, #64	@ 0x40
 800884a:	d01c      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b50      	cmp	r3, #80	@ 0x50
 8008852:	d018      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b60      	cmp	r3, #96	@ 0x60
 800885a:	d014      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d010      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b10      	cmp	r3, #16
 800886a:	d00c      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b20      	cmp	r3, #32
 8008872:	d008      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b30      	cmp	r3, #48	@ 0x30
 800887a:	d004      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x8a>
 800887c:	f241 5156 	movw	r1, #5462	@ 0x1556
 8008880:	4888      	ldr	r0, [pc, #544]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008882:	f7f9 ffd1 	bl	8002828 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008894:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008898:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088b2:	f000 810d 	beq.w	8008ad0 <HAL_TIM_ConfigClockSource+0x2d4>
 80088b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ba:	f200 82ca 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 80088be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c2:	d02d      	beq.n	8008920 <HAL_TIM_ConfigClockSource+0x124>
 80088c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c8:	f200 82c3 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 80088cc:	2b70      	cmp	r3, #112	@ 0x70
 80088ce:	d06f      	beq.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b4>
 80088d0:	2b70      	cmp	r3, #112	@ 0x70
 80088d2:	f200 82be 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 80088d6:	2b60      	cmp	r3, #96	@ 0x60
 80088d8:	f000 81d4 	beq.w	8008c84 <HAL_TIM_ConfigClockSource+0x488>
 80088dc:	2b60      	cmp	r3, #96	@ 0x60
 80088de:	f200 82b8 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 80088e2:	2b50      	cmp	r3, #80	@ 0x50
 80088e4:	f000 8165 	beq.w	8008bb2 <HAL_TIM_ConfigClockSource+0x3b6>
 80088e8:	2b50      	cmp	r3, #80	@ 0x50
 80088ea:	f200 82b2 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 80088ee:	2b40      	cmp	r3, #64	@ 0x40
 80088f0:	f000 8223 	beq.w	8008d3a <HAL_TIM_ConfigClockSource+0x53e>
 80088f4:	2b40      	cmp	r3, #64	@ 0x40
 80088f6:	f200 82ac 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 80088fa:	2b30      	cmp	r3, #48	@ 0x30
 80088fc:	f000 8278 	beq.w	8008df0 <HAL_TIM_ConfigClockSource+0x5f4>
 8008900:	2b30      	cmp	r3, #48	@ 0x30
 8008902:	f200 82a6 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 8008906:	2b20      	cmp	r3, #32
 8008908:	f000 8272 	beq.w	8008df0 <HAL_TIM_ConfigClockSource+0x5f4>
 800890c:	2b20      	cmp	r3, #32
 800890e:	f200 82a0 	bhi.w	8008e52 <HAL_TIM_ConfigClockSource+0x656>
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 826c 	beq.w	8008df0 <HAL_TIM_ConfigClockSource+0x5f4>
 8008918:	2b10      	cmp	r3, #16
 800891a:	f000 8269 	beq.w	8008df0 <HAL_TIM_ConfigClockSource+0x5f4>
 800891e:	e298      	b.n	8008e52 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a60      	ldr	r2, [pc, #384]	@ (8008aa8 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008926:	4293      	cmp	r3, r2
 8008928:	f000 8296 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008934:	f000 8290 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a5b      	ldr	r2, [pc, #364]	@ (8008aac <HAL_TIM_ConfigClockSource+0x2b0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	f000 828a 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a59      	ldr	r2, [pc, #356]	@ (8008ab0 <HAL_TIM_ConfigClockSource+0x2b4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	f000 8284 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a57      	ldr	r2, [pc, #348]	@ (8008ab4 <HAL_TIM_ConfigClockSource+0x2b8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	f000 827e 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a55      	ldr	r2, [pc, #340]	@ (8008ab8 <HAL_TIM_ConfigClockSource+0x2bc>)
 8008962:	4293      	cmp	r3, r2
 8008964:	f000 8278 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a53      	ldr	r2, [pc, #332]	@ (8008abc <HAL_TIM_ConfigClockSource+0x2c0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	f000 8272 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a51      	ldr	r2, [pc, #324]	@ (8008ac0 <HAL_TIM_ConfigClockSource+0x2c4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	f000 826c 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a4f      	ldr	r2, [pc, #316]	@ (8008ac4 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	f000 8266 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a4d      	ldr	r2, [pc, #308]	@ (8008ac8 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f000 8260 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a4b      	ldr	r2, [pc, #300]	@ (8008acc <HAL_TIM_ConfigClockSource+0x2d0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	f000 825a 	beq.w	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
 80089a4:	f241 5162 	movw	r1, #5474	@ 0x1562
 80089a8:	483e      	ldr	r0, [pc, #248]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x2a8>)
 80089aa:	f7f9 ff3d 	bl	8002828 <assert_failed>
      break;
 80089ae:	e253      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a3c      	ldr	r2, [pc, #240]	@ (8008aa8 <HAL_TIM_ConfigClockSource+0x2ac>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d022      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c2:	d01d      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a38      	ldr	r2, [pc, #224]	@ (8008aac <HAL_TIM_ConfigClockSource+0x2b0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d018      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a37      	ldr	r2, [pc, #220]	@ (8008ab0 <HAL_TIM_ConfigClockSource+0x2b4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d013      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a35      	ldr	r2, [pc, #212]	@ (8008ab4 <HAL_TIM_ConfigClockSource+0x2b8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d00e      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a36      	ldr	r2, [pc, #216]	@ (8008ac0 <HAL_TIM_ConfigClockSource+0x2c4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d009      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a34      	ldr	r2, [pc, #208]	@ (8008ac4 <HAL_TIM_ConfigClockSource+0x2c8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d004      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x204>
 80089f6:	f241 5169 	movw	r1, #5481	@ 0x1569
 80089fa:	482a      	ldr	r0, [pc, #168]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x2a8>)
 80089fc:	f7f9 ff14 	bl	8002828 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d013      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x234>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a10:	d00e      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x234>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a1a:	d009      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x234>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a24:	d004      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x234>
 8008a26:	f241 516c 	movw	r1, #5484	@ 0x156c
 8008a2a:	481e      	ldr	r0, [pc, #120]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008a2c:	f7f9 fefc 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a38:	d014      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x268>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d010      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x268>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x268>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d008      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x268>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b0a      	cmp	r3, #10
 8008a58:	d004      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x268>
 8008a5a:	f241 516d 	movw	r1, #5485	@ 0x156d
 8008a5e:	4811      	ldr	r0, [pc, #68]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008a60:	f7f9 fee2 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b0f      	cmp	r3, #15
 8008a6a:	d904      	bls.n	8008a76 <HAL_TIM_ConfigClockSource+0x27a>
 8008a6c:	f241 516e 	movw	r1, #5486	@ 0x156e
 8008a70:	480c      	ldr	r0, [pc, #48]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008a72:	f7f9 fed9 	bl	8002828 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a86:	f000 feb5 	bl	80097f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	609a      	str	r2, [r3, #8]
      break;
 8008aa2:	e1da      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
 8008aa4:	0800c658 	.word	0x0800c658
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40001000 	.word	0x40001000
 8008abc:	40001400 	.word	0x40001400
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a64      	ldr	r2, [pc, #400]	@ (8008c68 <HAL_TIM_ConfigClockSource+0x46c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01d      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x31a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae2:	d018      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x31a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a60      	ldr	r2, [pc, #384]	@ (8008c6c <HAL_TIM_ConfigClockSource+0x470>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x31a>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a5f      	ldr	r2, [pc, #380]	@ (8008c70 <HAL_TIM_ConfigClockSource+0x474>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00e      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x31a>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a5d      	ldr	r2, [pc, #372]	@ (8008c74 <HAL_TIM_ConfigClockSource+0x478>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d009      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x31a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a5c      	ldr	r2, [pc, #368]	@ (8008c78 <HAL_TIM_ConfigClockSource+0x47c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x31a>
 8008b0c:	f241 5181 	movw	r1, #5505	@ 0x1581
 8008b10:	485a      	ldr	r0, [pc, #360]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008b12:	f7f9 fe89 	bl	8002828 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d013      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x34a>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b26:	d00e      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x34a>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b30:	d009      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x34a>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b3a:	d004      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x34a>
 8008b3c:	f241 5184 	movw	r1, #5508	@ 0x1584
 8008b40:	484e      	ldr	r0, [pc, #312]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008b42:	f7f9 fe71 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b4e:	d014      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x37e>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d010      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x37e>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00c      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x37e>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d008      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x37e>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	2b0a      	cmp	r3, #10
 8008b6e:	d004      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x37e>
 8008b70:	f241 5185 	movw	r1, #5509	@ 0x1585
 8008b74:	4841      	ldr	r0, [pc, #260]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008b76:	f7f9 fe57 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	2b0f      	cmp	r3, #15
 8008b80:	d904      	bls.n	8008b8c <HAL_TIM_ConfigClockSource+0x390>
 8008b82:	f241 5186 	movw	r1, #5510	@ 0x1586
 8008b86:	483d      	ldr	r0, [pc, #244]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008b88:	f7f9 fe4e 	bl	8002828 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b9c:	f000 fe2a 	bl	80097f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bae:	609a      	str	r2, [r3, #8]
      break;
 8008bb0:	e153      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c68 <HAL_TIM_ConfigClockSource+0x46c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d022      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc4:	d01d      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a28      	ldr	r2, [pc, #160]	@ (8008c6c <HAL_TIM_ConfigClockSource+0x470>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d018      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a26      	ldr	r2, [pc, #152]	@ (8008c70 <HAL_TIM_ConfigClockSource+0x474>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a25      	ldr	r2, [pc, #148]	@ (8008c74 <HAL_TIM_ConfigClockSource+0x478>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d00e      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a23      	ldr	r2, [pc, #140]	@ (8008c78 <HAL_TIM_ConfigClockSource+0x47c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d009      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a23      	ldr	r2, [pc, #140]	@ (8008c80 <HAL_TIM_ConfigClockSource+0x484>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d004      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x406>
 8008bf8:	f241 5195 	movw	r1, #5525	@ 0x1595
 8008bfc:	481f      	ldr	r0, [pc, #124]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008bfe:	f7f9 fe13 	bl	8002828 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c0a:	d014      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x43a>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d010      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x43a>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x43a>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d008      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x43a>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b0a      	cmp	r3, #10
 8008c2a:	d004      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x43a>
 8008c2c:	f241 5198 	movw	r1, #5528	@ 0x1598
 8008c30:	4812      	ldr	r0, [pc, #72]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008c32:	f7f9 fdf9 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	2b0f      	cmp	r3, #15
 8008c3c:	d904      	bls.n	8008c48 <HAL_TIM_ConfigClockSource+0x44c>
 8008c3e:	f241 5199 	movw	r1, #5529	@ 0x1599
 8008c42:	480e      	ldr	r0, [pc, #56]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x480>)
 8008c44:	f7f9 fdf0 	bl	8002828 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c54:	461a      	mov	r2, r3
 8008c56:	f000 fd53 	bl	8009700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2150      	movs	r1, #80	@ 0x50
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fdac 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8008c66:	e0f8      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
 8008c68:	40012c00 	.word	0x40012c00
 8008c6c:	40000400 	.word	0x40000400
 8008c70:	40000800 	.word	0x40000800
 8008c74:	40000c00 	.word	0x40000c00
 8008c78:	40013400 	.word	0x40013400
 8008c7c:	0800c658 	.word	0x0800c658
 8008c80:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a7a      	ldr	r2, [pc, #488]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x678>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d022      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c96:	d01d      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a76      	ldr	r2, [pc, #472]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x67c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d018      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a75      	ldr	r2, [pc, #468]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x680>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d013      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a73      	ldr	r2, [pc, #460]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x684>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00e      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a72      	ldr	r2, [pc, #456]	@ (8008e84 <HAL_TIM_ConfigClockSource+0x688>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d009      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a70      	ldr	r2, [pc, #448]	@ (8008e88 <HAL_TIM_ConfigClockSource+0x68c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d004      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x4d8>
 8008cca:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8008cce:	486f      	ldr	r0, [pc, #444]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008cd0:	f7f9 fdaa 	bl	8002828 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cdc:	d014      	beq.n	8008d08 <HAL_TIM_ConfigClockSource+0x50c>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d010      	beq.n	8008d08 <HAL_TIM_ConfigClockSource+0x50c>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00c      	beq.n	8008d08 <HAL_TIM_ConfigClockSource+0x50c>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d008      	beq.n	8008d08 <HAL_TIM_ConfigClockSource+0x50c>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b0a      	cmp	r3, #10
 8008cfc:	d004      	beq.n	8008d08 <HAL_TIM_ConfigClockSource+0x50c>
 8008cfe:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8008d02:	4862      	ldr	r0, [pc, #392]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008d04:	f7f9 fd90 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b0f      	cmp	r3, #15
 8008d0e:	d904      	bls.n	8008d1a <HAL_TIM_ConfigClockSource+0x51e>
 8008d10:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 8008d14:	485d      	ldr	r0, [pc, #372]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008d16:	f7f9 fd87 	bl	8002828 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d26:	461a      	mov	r2, r3
 8008d28:	f000 fd19 	bl	800975e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2160      	movs	r1, #96	@ 0x60
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fd43 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8008d38:	e08f      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a4d      	ldr	r2, [pc, #308]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x678>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d022      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4c:	d01d      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a49      	ldr	r2, [pc, #292]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x67c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d018      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a47      	ldr	r2, [pc, #284]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x680>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a46      	ldr	r2, [pc, #280]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x684>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00e      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a44      	ldr	r2, [pc, #272]	@ (8008e84 <HAL_TIM_ConfigClockSource+0x688>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d009      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a43      	ldr	r2, [pc, #268]	@ (8008e88 <HAL_TIM_ConfigClockSource+0x68c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d004      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x58e>
 8008d80:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8008d84:	4841      	ldr	r0, [pc, #260]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008d86:	f7f9 fd4f 	bl	8002828 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d92:	d014      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x5c2>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d010      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x5c2>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x5c2>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d008      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x5c2>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2b0a      	cmp	r3, #10
 8008db2:	d004      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x5c2>
 8008db4:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8008db8:	4834      	ldr	r0, [pc, #208]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008dba:	f7f9 fd35 	bl	8002828 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	2b0f      	cmp	r3, #15
 8008dc4:	d904      	bls.n	8008dd0 <HAL_TIM_ConfigClockSource+0x5d4>
 8008dc6:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8008dca:	4830      	ldr	r0, [pc, #192]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008dcc:	f7f9 fd2c 	bl	8002828 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ddc:	461a      	mov	r2, r3
 8008dde:	f000 fc8f 	bl	8009700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2140      	movs	r1, #64	@ 0x40
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fce8 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8008dee:	e034      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a1f      	ldr	r2, [pc, #124]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x678>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d022      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e02:	d01d      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1b      	ldr	r2, [pc, #108]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x67c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d018      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1a      	ldr	r2, [pc, #104]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x680>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d013      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x684>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00e      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <HAL_TIM_ConfigClockSource+0x688>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a15      	ldr	r2, [pc, #84]	@ (8008e88 <HAL_TIM_ConfigClockSource+0x68c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_TIM_ConfigClockSource+0x644>
 8008e36:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8008e3a:	4814      	ldr	r0, [pc, #80]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x690>)
 8008e3c:	f7f9 fcf4 	bl	8002828 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f000 fcb7 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8008e50:	e003      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	73fb      	strb	r3, [r7, #15]
      break;
 8008e56:	e000      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x65e>
      break;
 8008e58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	40012c00 	.word	0x40012c00
 8008e78:	40000400 	.word	0x40000400
 8008e7c:	40000800 	.word	0x40000800
 8008e80:	40000c00 	.word	0x40000c00
 8008e84:	40013400 	.word	0x40013400
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	0800c658 	.word	0x0800c658

08008e90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a46      	ldr	r2, [pc, #280]	@ (8009020 <TIM_Base_SetConfig+0x12c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <TIM_Base_SetConfig+0x40>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f12:	d00f      	beq.n	8008f34 <TIM_Base_SetConfig+0x40>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a43      	ldr	r2, [pc, #268]	@ (8009024 <TIM_Base_SetConfig+0x130>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00b      	beq.n	8008f34 <TIM_Base_SetConfig+0x40>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a42      	ldr	r2, [pc, #264]	@ (8009028 <TIM_Base_SetConfig+0x134>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a41      	ldr	r2, [pc, #260]	@ (800902c <TIM_Base_SetConfig+0x138>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a40      	ldr	r2, [pc, #256]	@ (8009030 <TIM_Base_SetConfig+0x13c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d108      	bne.n	8008f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a35      	ldr	r2, [pc, #212]	@ (8009020 <TIM_Base_SetConfig+0x12c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d01f      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f54:	d01b      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a32      	ldr	r2, [pc, #200]	@ (8009024 <TIM_Base_SetConfig+0x130>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d017      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a31      	ldr	r2, [pc, #196]	@ (8009028 <TIM_Base_SetConfig+0x134>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d013      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a30      	ldr	r2, [pc, #192]	@ (800902c <TIM_Base_SetConfig+0x138>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d00f      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a2f      	ldr	r2, [pc, #188]	@ (8009030 <TIM_Base_SetConfig+0x13c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d00b      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a2e      	ldr	r2, [pc, #184]	@ (8009034 <TIM_Base_SetConfig+0x140>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d007      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a2d      	ldr	r2, [pc, #180]	@ (8009038 <TIM_Base_SetConfig+0x144>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d003      	beq.n	8008f8e <TIM_Base_SetConfig+0x9a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a2c      	ldr	r2, [pc, #176]	@ (800903c <TIM_Base_SetConfig+0x148>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d108      	bne.n	8008fa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a16      	ldr	r2, [pc, #88]	@ (8009020 <TIM_Base_SetConfig+0x12c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d00f      	beq.n	8008fec <TIM_Base_SetConfig+0xf8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a18      	ldr	r2, [pc, #96]	@ (8009030 <TIM_Base_SetConfig+0x13c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00b      	beq.n	8008fec <TIM_Base_SetConfig+0xf8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a17      	ldr	r2, [pc, #92]	@ (8009034 <TIM_Base_SetConfig+0x140>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d007      	beq.n	8008fec <TIM_Base_SetConfig+0xf8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <TIM_Base_SetConfig+0x144>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d003      	beq.n	8008fec <TIM_Base_SetConfig+0xf8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a15      	ldr	r2, [pc, #84]	@ (800903c <TIM_Base_SetConfig+0x148>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d103      	bne.n	8008ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b01      	cmp	r3, #1
 8009004:	d105      	bne.n	8009012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f023 0201 	bic.w	r2, r3, #1
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	611a      	str	r2, [r3, #16]
  }
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40012c00 	.word	0x40012c00
 8009024:	40000400 	.word	0x40000400
 8009028:	40000800 	.word	0x40000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	40013400 	.word	0x40013400
 8009034:	40014000 	.word	0x40014000
 8009038:	40014400 	.word	0x40014400
 800903c:	40014800 	.word	0x40014800

08009040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f023 0201 	bic.w	r2, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800906e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f023 0302 	bic.w	r3, r3, #2
 800908c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a40      	ldr	r2, [pc, #256]	@ (800919c <TIM_OC1_SetConfig+0x15c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00f      	beq.n	80090c0 <TIM_OC1_SetConfig+0x80>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a3f      	ldr	r2, [pc, #252]	@ (80091a0 <TIM_OC1_SetConfig+0x160>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00b      	beq.n	80090c0 <TIM_OC1_SetConfig+0x80>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a3e      	ldr	r2, [pc, #248]	@ (80091a4 <TIM_OC1_SetConfig+0x164>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d007      	beq.n	80090c0 <TIM_OC1_SetConfig+0x80>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a3d      	ldr	r2, [pc, #244]	@ (80091a8 <TIM_OC1_SetConfig+0x168>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_OC1_SetConfig+0x80>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a3c      	ldr	r2, [pc, #240]	@ (80091ac <TIM_OC1_SetConfig+0x16c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d119      	bne.n	80090f4 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <TIM_OC1_SetConfig+0x9a>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d004      	beq.n	80090da <TIM_OC1_SetConfig+0x9a>
 80090d0:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 80090d4:	4836      	ldr	r0, [pc, #216]	@ (80091b0 <TIM_OC1_SetConfig+0x170>)
 80090d6:	f7f9 fba7 	bl	8002828 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f023 0308 	bic.w	r3, r3, #8
 80090e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f023 0304 	bic.w	r3, r3, #4
 80090f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a29      	ldr	r2, [pc, #164]	@ (800919c <TIM_OC1_SetConfig+0x15c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00f      	beq.n	800911c <TIM_OC1_SetConfig+0xdc>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a28      	ldr	r2, [pc, #160]	@ (80091a0 <TIM_OC1_SetConfig+0x160>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00b      	beq.n	800911c <TIM_OC1_SetConfig+0xdc>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a27      	ldr	r2, [pc, #156]	@ (80091a4 <TIM_OC1_SetConfig+0x164>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d007      	beq.n	800911c <TIM_OC1_SetConfig+0xdc>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a26      	ldr	r2, [pc, #152]	@ (80091a8 <TIM_OC1_SetConfig+0x168>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d003      	beq.n	800911c <TIM_OC1_SetConfig+0xdc>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a25      	ldr	r2, [pc, #148]	@ (80091ac <TIM_OC1_SetConfig+0x16c>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d12d      	bne.n	8009178 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009124:	d008      	beq.n	8009138 <TIM_OC1_SetConfig+0xf8>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d004      	beq.n	8009138 <TIM_OC1_SetConfig+0xf8>
 800912e:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 8009132:	481f      	ldr	r0, [pc, #124]	@ (80091b0 <TIM_OC1_SetConfig+0x170>)
 8009134:	f7f9 fb78 	bl	8002828 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009140:	d008      	beq.n	8009154 <TIM_OC1_SetConfig+0x114>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d004      	beq.n	8009154 <TIM_OC1_SetConfig+0x114>
 800914a:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800914e:	4818      	ldr	r0, [pc, #96]	@ (80091b0 <TIM_OC1_SetConfig+0x170>)
 8009150:	f7f9 fb6a 	bl	8002828 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800915a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	621a      	str	r2, [r3, #32]
}
 8009192:	bf00      	nop
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	40012c00 	.word	0x40012c00
 80091a0:	40013400 	.word	0x40013400
 80091a4:	40014000 	.word	0x40014000
 80091a8:	40014400 	.word	0x40014400
 80091ac:	40014800 	.word	0x40014800
 80091b0:	0800c658 	.word	0x0800c658

080091b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	f023 0210 	bic.w	r2, r3, #16
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f023 0320 	bic.w	r3, r3, #32
 8009202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a3b      	ldr	r2, [pc, #236]	@ (8009300 <TIM_OC2_SetConfig+0x14c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_OC2_SetConfig+0x6c>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a3a      	ldr	r2, [pc, #232]	@ (8009304 <TIM_OC2_SetConfig+0x150>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d11a      	bne.n	8009256 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d008      	beq.n	800923a <TIM_OC2_SetConfig+0x86>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	2b08      	cmp	r3, #8
 800922e:	d004      	beq.n	800923a <TIM_OC2_SetConfig+0x86>
 8009230:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 8009234:	4834      	ldr	r0, [pc, #208]	@ (8009308 <TIM_OC2_SetConfig+0x154>)
 8009236:	f7f9 faf7 	bl	8002828 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a29      	ldr	r2, [pc, #164]	@ (8009300 <TIM_OC2_SetConfig+0x14c>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00f      	beq.n	800927e <TIM_OC2_SetConfig+0xca>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a28      	ldr	r2, [pc, #160]	@ (8009304 <TIM_OC2_SetConfig+0x150>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00b      	beq.n	800927e <TIM_OC2_SetConfig+0xca>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a28      	ldr	r2, [pc, #160]	@ (800930c <TIM_OC2_SetConfig+0x158>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d007      	beq.n	800927e <TIM_OC2_SetConfig+0xca>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a27      	ldr	r2, [pc, #156]	@ (8009310 <TIM_OC2_SetConfig+0x15c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_OC2_SetConfig+0xca>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a26      	ldr	r2, [pc, #152]	@ (8009314 <TIM_OC2_SetConfig+0x160>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d12f      	bne.n	80092de <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009286:	d008      	beq.n	800929a <TIM_OC2_SetConfig+0xe6>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d004      	beq.n	800929a <TIM_OC2_SetConfig+0xe6>
 8009290:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 8009294:	481c      	ldr	r0, [pc, #112]	@ (8009308 <TIM_OC2_SetConfig+0x154>)
 8009296:	f7f9 fac7 	bl	8002828 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092a2:	d008      	beq.n	80092b6 <TIM_OC2_SetConfig+0x102>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <TIM_OC2_SetConfig+0x102>
 80092ac:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 80092b0:	4815      	ldr	r0, [pc, #84]	@ (8009308 <TIM_OC2_SetConfig+0x154>)
 80092b2:	f7f9 fab9 	bl	8002828 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	621a      	str	r2, [r3, #32]
}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	40012c00 	.word	0x40012c00
 8009304:	40013400 	.word	0x40013400
 8009308:	0800c658 	.word	0x0800c658
 800930c:	40014000 	.word	0x40014000
 8009310:	40014400 	.word	0x40014400
 8009314:	40014800 	.word	0x40014800

08009318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	021b      	lsls	r3, r3, #8
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	4313      	orrs	r3, r2
 8009370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a3b      	ldr	r2, [pc, #236]	@ (8009464 <TIM_OC3_SetConfig+0x14c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d003      	beq.n	8009382 <TIM_OC3_SetConfig+0x6a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a3a      	ldr	r2, [pc, #232]	@ (8009468 <TIM_OC3_SetConfig+0x150>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d11a      	bne.n	80093b8 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d008      	beq.n	800939c <TIM_OC3_SetConfig+0x84>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	2b08      	cmp	r3, #8
 8009390:	d004      	beq.n	800939c <TIM_OC3_SetConfig+0x84>
 8009392:	f641 4105 	movw	r1, #7173	@ 0x1c05
 8009396:	4835      	ldr	r0, [pc, #212]	@ (800946c <TIM_OC3_SetConfig+0x154>)
 8009398:	f7f9 fa46 	bl	8002828 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009464 <TIM_OC3_SetConfig+0x14c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d00f      	beq.n	80093e0 <TIM_OC3_SetConfig+0xc8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a29      	ldr	r2, [pc, #164]	@ (8009468 <TIM_OC3_SetConfig+0x150>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00b      	beq.n	80093e0 <TIM_OC3_SetConfig+0xc8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a29      	ldr	r2, [pc, #164]	@ (8009470 <TIM_OC3_SetConfig+0x158>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d007      	beq.n	80093e0 <TIM_OC3_SetConfig+0xc8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a28      	ldr	r2, [pc, #160]	@ (8009474 <TIM_OC3_SetConfig+0x15c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <TIM_OC3_SetConfig+0xc8>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a27      	ldr	r2, [pc, #156]	@ (8009478 <TIM_OC3_SetConfig+0x160>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d12f      	bne.n	8009440 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e8:	d008      	beq.n	80093fc <TIM_OC3_SetConfig+0xe4>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d004      	beq.n	80093fc <TIM_OC3_SetConfig+0xe4>
 80093f2:	f641 4112 	movw	r1, #7186	@ 0x1c12
 80093f6:	481d      	ldr	r0, [pc, #116]	@ (800946c <TIM_OC3_SetConfig+0x154>)
 80093f8:	f7f9 fa16 	bl	8002828 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009404:	d008      	beq.n	8009418 <TIM_OC3_SetConfig+0x100>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <TIM_OC3_SetConfig+0x100>
 800940e:	f641 4113 	movw	r1, #7187	@ 0x1c13
 8009412:	4816      	ldr	r0, [pc, #88]	@ (800946c <TIM_OC3_SetConfig+0x154>)
 8009414:	f7f9 fa08 	bl	8002828 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800941e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	621a      	str	r2, [r3, #32]
}
 800945a:	bf00      	nop
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40013400 	.word	0x40013400
 800946c:	0800c658 	.word	0x0800c658
 8009470:	40014000 	.word	0x40014000
 8009474:	40014400 	.word	0x40014400
 8009478:	40014800 	.word	0x40014800

0800947c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	031b      	lsls	r3, r3, #12
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1e      	ldr	r2, [pc, #120]	@ (8009554 <TIM_OC4_SetConfig+0xd8>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00f      	beq.n	8009500 <TIM_OC4_SetConfig+0x84>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009558 <TIM_OC4_SetConfig+0xdc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_OC4_SetConfig+0x84>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1c      	ldr	r2, [pc, #112]	@ (800955c <TIM_OC4_SetConfig+0xe0>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_OC4_SetConfig+0x84>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009560 <TIM_OC4_SetConfig+0xe4>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_OC4_SetConfig+0x84>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009564 <TIM_OC4_SetConfig+0xe8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d117      	bne.n	8009530 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009508:	d008      	beq.n	800951c <TIM_OC4_SetConfig+0xa0>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <TIM_OC4_SetConfig+0xa0>
 8009512:	f641 4152 	movw	r1, #7250	@ 0x1c52
 8009516:	4814      	ldr	r0, [pc, #80]	@ (8009568 <TIM_OC4_SetConfig+0xec>)
 8009518:	f7f9 f986 	bl	8002828 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	019b      	lsls	r3, r3, #6
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	40012c00 	.word	0x40012c00
 8009558:	40013400 	.word	0x40013400
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800
 8009568:	0800c658 	.word	0x0800c658

0800956c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800959a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800959e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80095b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	041b      	lsls	r3, r3, #16
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a17      	ldr	r2, [pc, #92]	@ (8009620 <TIM_OC5_SetConfig+0xb4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00f      	beq.n	80095e6 <TIM_OC5_SetConfig+0x7a>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a16      	ldr	r2, [pc, #88]	@ (8009624 <TIM_OC5_SetConfig+0xb8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00b      	beq.n	80095e6 <TIM_OC5_SetConfig+0x7a>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a15      	ldr	r2, [pc, #84]	@ (8009628 <TIM_OC5_SetConfig+0xbc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <TIM_OC5_SetConfig+0x7a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a14      	ldr	r2, [pc, #80]	@ (800962c <TIM_OC5_SetConfig+0xc0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d003      	beq.n	80095e6 <TIM_OC5_SetConfig+0x7a>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a13      	ldr	r2, [pc, #76]	@ (8009630 <TIM_OC5_SetConfig+0xc4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d109      	bne.n	80095fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	021b      	lsls	r3, r3, #8
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	621a      	str	r2, [r3, #32]
}
 8009614:	bf00      	nop
 8009616:	371c      	adds	r7, #28
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	40012c00 	.word	0x40012c00
 8009624:	40013400 	.word	0x40013400
 8009628:	40014000 	.word	0x40014000
 800962c:	40014400 	.word	0x40014400
 8009630:	40014800 	.word	0x40014800

08009634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800965a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800967a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	051b      	lsls	r3, r3, #20
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a18      	ldr	r2, [pc, #96]	@ (80096ec <TIM_OC6_SetConfig+0xb8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00f      	beq.n	80096b0 <TIM_OC6_SetConfig+0x7c>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a17      	ldr	r2, [pc, #92]	@ (80096f0 <TIM_OC6_SetConfig+0xbc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00b      	beq.n	80096b0 <TIM_OC6_SetConfig+0x7c>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a16      	ldr	r2, [pc, #88]	@ (80096f4 <TIM_OC6_SetConfig+0xc0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <TIM_OC6_SetConfig+0x7c>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a15      	ldr	r2, [pc, #84]	@ (80096f8 <TIM_OC6_SetConfig+0xc4>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_OC6_SetConfig+0x7c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a14      	ldr	r2, [pc, #80]	@ (80096fc <TIM_OC6_SetConfig+0xc8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d109      	bne.n	80096c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	621a      	str	r2, [r3, #32]
}
 80096de:	bf00      	nop
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40012c00 	.word	0x40012c00
 80096f0:	40013400 	.word	0x40013400
 80096f4:	40014000 	.word	0x40014000
 80096f8:	40014400 	.word	0x40014400
 80096fc:	40014800 	.word	0x40014800

08009700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	f023 0201 	bic.w	r2, r3, #1
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800972a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f023 030a 	bic.w	r3, r3, #10
 800973c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4313      	orrs	r3, r2
 8009744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	621a      	str	r2, [r3, #32]
}
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800975e:	b480      	push	{r7}
 8009760:	b087      	sub	sp, #28
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f023 0210 	bic.w	r2, r3, #16
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	031b      	lsls	r3, r3, #12
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800979a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	621a      	str	r2, [r3, #32]
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	f043 0307 	orr.w	r3, r3, #7
 80097e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	bf00      	nop
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800980e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	021a      	lsls	r2, r3, #8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	431a      	orrs	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4313      	orrs	r3, r2
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	4313      	orrs	r3, r2
 8009820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	609a      	str	r2, [r3, #8]
}
 8009828:	bf00      	nop
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4a2f      	ldr	r2, [pc, #188]	@ (8009900 <TIM_CCxChannelCmd+0xcc>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d024      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800984e:	d020      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4a2c      	ldr	r2, [pc, #176]	@ (8009904 <TIM_CCxChannelCmd+0xd0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d01c      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4a2b      	ldr	r2, [pc, #172]	@ (8009908 <TIM_CCxChannelCmd+0xd4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d018      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a2a      	ldr	r2, [pc, #168]	@ (800990c <TIM_CCxChannelCmd+0xd8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d014      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4a29      	ldr	r2, [pc, #164]	@ (8009910 <TIM_CCxChannelCmd+0xdc>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d010      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a28      	ldr	r2, [pc, #160]	@ (8009914 <TIM_CCxChannelCmd+0xe0>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d00c      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4a27      	ldr	r2, [pc, #156]	@ (8009918 <TIM_CCxChannelCmd+0xe4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d008      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a26      	ldr	r2, [pc, #152]	@ (800991c <TIM_CCxChannelCmd+0xe8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d004      	beq.n	8009892 <TIM_CCxChannelCmd+0x5e>
 8009888:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800988c:	4824      	ldr	r0, [pc, #144]	@ (8009920 <TIM_CCxChannelCmd+0xec>)
 800988e:	f7f8 ffcb 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d016      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b04      	cmp	r3, #4
 800989c:	d013      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d010      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b0c      	cmp	r3, #12
 80098a8:	d00d      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2b10      	cmp	r3, #16
 80098ae:	d00a      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b14      	cmp	r3, #20
 80098b4:	d007      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b3c      	cmp	r3, #60	@ 0x3c
 80098ba:	d004      	beq.n	80098c6 <TIM_CCxChannelCmd+0x92>
 80098bc:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 80098c0:	4817      	ldr	r0, [pc, #92]	@ (8009920 <TIM_CCxChannelCmd+0xec>)
 80098c2:	f7f8 ffb1 	bl	8002828 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f003 031f 	and.w	r3, r3, #31
 80098cc:	2201      	movs	r2, #1
 80098ce:	fa02 f303 	lsl.w	r3, r2, r3
 80098d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1a      	ldr	r2, [r3, #32]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	43db      	mvns	r3, r3
 80098dc:	401a      	ands	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1a      	ldr	r2, [r3, #32]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 031f 	and.w	r3, r3, #31
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	fa01 f303 	lsl.w	r3, r1, r3
 80098f2:	431a      	orrs	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	621a      	str	r2, [r3, #32]
}
 80098f8:	bf00      	nop
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	40012c00 	.word	0x40012c00
 8009904:	40000400 	.word	0x40000400
 8009908:	40000800 	.word	0x40000800
 800990c:	40000c00 	.word	0x40000c00
 8009910:	40013400 	.word	0x40013400
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800
 8009920:	0800c658 	.word	0x0800c658

08009924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a34      	ldr	r2, [pc, #208]	@ (8009a04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d02c      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009940:	d027      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a30      	ldr	r2, [pc, #192]	@ (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d022      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a2e      	ldr	r2, [pc, #184]	@ (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d01d      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a2d      	ldr	r2, [pc, #180]	@ (8009a10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d018      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2b      	ldr	r2, [pc, #172]	@ (8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d013      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00e      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a28      	ldr	r2, [pc, #160]	@ (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d009      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a27      	ldr	r2, [pc, #156]	@ (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d004      	beq.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009988:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800998c:	4825      	ldr	r0, [pc, #148]	@ (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800998e:	f7f8 ff4b 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d020      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b10      	cmp	r3, #16
 80099a0:	d01c      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d018      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b30      	cmp	r3, #48	@ 0x30
 80099b0:	d014      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b40      	cmp	r3, #64	@ 0x40
 80099b8:	d010      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b50      	cmp	r3, #80	@ 0x50
 80099c0:	d00c      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b60      	cmp	r3, #96	@ 0x60
 80099c8:	d008      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b70      	cmp	r3, #112	@ 0x70
 80099d0:	d004      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099d2:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 80099d6:	4813      	ldr	r0, [pc, #76]	@ (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099d8:	f7f8 ff26 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b80      	cmp	r3, #128	@ 0x80
 80099e2:	d008      	beq.n	80099f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80099ec:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 80099f0:	480c      	ldr	r0, [pc, #48]	@ (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099f2:	f7f8 ff19 	bl	8002828 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d113      	bne.n	8009a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e0d3      	b.n	8009bac <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8009a04:	40012c00 	.word	0x40012c00
 8009a08:	40000400 	.word	0x40000400
 8009a0c:	40000800 	.word	0x40000800
 8009a10:	40000c00 	.word	0x40000c00
 8009a14:	40001000 	.word	0x40001000
 8009a18:	40001400 	.word	0x40001400
 8009a1c:	40013400 	.word	0x40013400
 8009a20:	40014000 	.word	0x40014000
 8009a24:	0800c690 	.word	0x0800c690
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a59      	ldr	r2, [pc, #356]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d004      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a58      	ldr	r2, [pc, #352]	@ (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d161      	bne.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d054      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a6c:	d04f      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a76:	d04a      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a80:	d045      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a8a:	d040      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009a94:	d03b      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a9e:	d036      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009aa8:	d031      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8009ab2:	d02c      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009abc:	d027      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8009ac6:	d022      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009ad0:	d01d      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8009ada:	d018      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009ae4:	d013      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8009aee:	d00e      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009af8:	d009      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8009b02:	d004      	beq.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b04:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8009b08:	482c      	ldr	r0, [pc, #176]	@ (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009b0a:	f7f8 fe8d 	bl	8002828 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d01d      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4c:	d018      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d013      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a19      	ldr	r2, [pc, #100]	@ (8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00e      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a18      	ldr	r2, [pc, #96]	@ (8009bc8 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a11      	ldr	r2, [pc, #68]	@ (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a14      	ldr	r2, [pc, #80]	@ (8009bcc <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d10c      	bne.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40012c00 	.word	0x40012c00
 8009bb8:	40013400 	.word	0x40013400
 8009bbc:	0800c690 	.word	0x0800c690
 8009bc0:	40000400 	.word	0x40000400
 8009bc4:	40000800 	.word	0x40000800
 8009bc8:	40000c00 	.word	0x40000c00
 8009bcc:	40014000 	.word	0x40014000

08009bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a91      	ldr	r2, [pc, #580]	@ (8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d018      	beq.n	8009c1a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a8f      	ldr	r2, [pc, #572]	@ (8009e2c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d013      	beq.n	8009c1a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a8e      	ldr	r2, [pc, #568]	@ (8009e30 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00e      	beq.n	8009c1a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a8c      	ldr	r2, [pc, #560]	@ (8009e34 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d009      	beq.n	8009c1a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a8b      	ldr	r2, [pc, #556]	@ (8009e38 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d004      	beq.n	8009c1a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c10:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8009c14:	4889      	ldr	r0, [pc, #548]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c16:	f7f8 fe07 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c22:	d008      	beq.n	8009c36 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009c2c:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8009c30:	4882      	ldr	r0, [pc, #520]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c32:	f7f8 fdf9 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c3e:	d008      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009c48:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8009c4c:	487b      	ldr	r0, [pc, #492]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c4e:	f7f8 fdeb 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d013      	beq.n	8009c82 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c62:	d00e      	beq.n	8009c82 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c6c:	d009      	beq.n	8009c82 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c76:	d004      	beq.n	8009c82 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009c78:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8009c7c:	486f      	ldr	r0, [pc, #444]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c7e:	f7f8 fdd3 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	2bff      	cmp	r3, #255	@ 0xff
 8009c88:	d904      	bls.n	8009c94 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8009c8a:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 8009c8e:	486b      	ldr	r0, [pc, #428]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c90:	f7f8 fdca 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c9c:	d008      	beq.n	8009cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009ca6:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 8009caa:	4864      	ldr	r0, [pc, #400]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009cac:	f7f8 fdbc 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d009      	beq.n	8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cc0:	d004      	beq.n	8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009cc2:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 8009cc6:	485d      	ldr	r0, [pc, #372]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009cc8:	f7f8 fdae 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b0f      	cmp	r3, #15
 8009cd2:	d904      	bls.n	8009cde <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009cd4:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8009cd8:	4858      	ldr	r0, [pc, #352]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009cda:	f7f8 fda5 	bl	8002828 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ce6:	d008      	beq.n	8009cfa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009cf0:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 8009cf4:	4851      	ldr	r0, [pc, #324]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009cf6:	f7f8 fd97 	bl	8002828 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d101      	bne.n	8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 8009d04:	2302      	movs	r3, #2
 8009d06:	e08a      	b.n	8009e1e <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	041b      	lsls	r3, r3, #16
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a28      	ldr	r2, [pc, #160]	@ (8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a26      	ldr	r2, [pc, #152]	@ (8009e2c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d13a      	bne.n	8009e0c <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d9e:	d008      	beq.n	8009db2 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d004      	beq.n	8009db2 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009da8:	f640 0112 	movw	r1, #2066	@ 0x812
 8009dac:	4823      	ldr	r0, [pc, #140]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009dae:	f7f8 fd3b 	bl	8002828 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d009      	beq.n	8009dce <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dc2:	d004      	beq.n	8009dce <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009dc4:	f640 0113 	movw	r1, #2067	@ 0x813
 8009dc8:	481c      	ldr	r0, [pc, #112]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009dca:	f7f8 fd2d 	bl	8002828 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd2:	2b0f      	cmp	r3, #15
 8009dd4:	d904      	bls.n	8009de0 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 8009dd6:	f640 0114 	movw	r1, #2068	@ 0x814
 8009dda:	4818      	ldr	r0, [pc, #96]	@ (8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009ddc:	f7f8 fd24 	bl	8002828 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dea:	051b      	lsls	r3, r3, #20
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40012c00 	.word	0x40012c00
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40014400 	.word	0x40014400
 8009e38:	40014800 	.word	0x40014800
 8009e3c:	0800c690 	.word	0x0800c690

08009e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e08b      	b.n	8009fa6 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d023      	beq.n	8009ede <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a45      	ldr	r2, [pc, #276]	@ (8009fb0 <HAL_UART_Init+0x134>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d041      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a43      	ldr	r2, [pc, #268]	@ (8009fb4 <HAL_UART_Init+0x138>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d03c      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a42      	ldr	r2, [pc, #264]	@ (8009fb8 <HAL_UART_Init+0x13c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d037      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a40      	ldr	r2, [pc, #256]	@ (8009fbc <HAL_UART_Init+0x140>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d032      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc0 <HAL_UART_Init+0x144>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d02d      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a3d      	ldr	r2, [pc, #244]	@ (8009fc4 <HAL_UART_Init+0x148>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d028      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009ed2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009ed6:	483c      	ldr	r0, [pc, #240]	@ (8009fc8 <HAL_UART_Init+0x14c>)
 8009ed8:	f7f8 fca6 	bl	8002828 <assert_failed>
 8009edc:	e022      	b.n	8009f24 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a33      	ldr	r2, [pc, #204]	@ (8009fb0 <HAL_UART_Init+0x134>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d01d      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a31      	ldr	r2, [pc, #196]	@ (8009fb4 <HAL_UART_Init+0x138>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d018      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a30      	ldr	r2, [pc, #192]	@ (8009fb8 <HAL_UART_Init+0x13c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d013      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a2e      	ldr	r2, [pc, #184]	@ (8009fbc <HAL_UART_Init+0x140>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00e      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8009fc0 <HAL_UART_Init+0x144>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d009      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a2b      	ldr	r2, [pc, #172]	@ (8009fc4 <HAL_UART_Init+0x148>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d004      	beq.n	8009f24 <HAL_UART_Init+0xa8>
 8009f1a:	f240 1157 	movw	r1, #343	@ 0x157
 8009f1e:	482a      	ldr	r0, [pc, #168]	@ (8009fc8 <HAL_UART_Init+0x14c>)
 8009f20:	f7f8 fc82 	bl	8002828 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7f9 fa49 	bl	80033cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2224      	movs	r2, #36	@ 0x24
 8009f3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0201 	bic.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc1f 	bl	800a79c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8be 	bl	800a0e0 <UART_SetConfig>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e01b      	b.n	8009fa6 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0201 	orr.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fd5c 	bl	800aa5c <UART_CheckIdleState>
 8009fa4:	4603      	mov	r3, r0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	40013800 	.word	0x40013800
 8009fb4:	40004400 	.word	0x40004400
 8009fb8:	40004800 	.word	0x40004800
 8009fbc:	40004c00 	.word	0x40004c00
 8009fc0:	40005000 	.word	0x40005000
 8009fc4:	40008000 	.word	0x40008000
 8009fc8:	0800c6cc 	.word	0x0800c6cc

08009fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	@ 0x28
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d177      	bne.n	800a0d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <HAL_UART_Transmit+0x24>
 8009fea:	88fb      	ldrh	r3, [r7, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e070      	b.n	800a0d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2221      	movs	r2, #33	@ 0x21
 800a000:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a002:	f7f9 fad3 	bl	80035ac <HAL_GetTick>
 800a006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	88fa      	ldrh	r2, [r7, #6]
 800a00c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	88fa      	ldrh	r2, [r7, #6]
 800a014:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a020:	d108      	bne.n	800a034 <HAL_UART_Transmit+0x68>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	e003      	b.n	800a03c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a03c:	e02f      	b.n	800a09e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2200      	movs	r2, #0
 800a046:	2180      	movs	r1, #128	@ 0x80
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 fdaf 	bl	800abac <UART_WaitOnFlagUntilTimeout>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2220      	movs	r2, #32
 800a058:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e03b      	b.n	800a0d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10b      	bne.n	800a07c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	881a      	ldrh	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a070:	b292      	uxth	r2, r2
 800a072:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	3302      	adds	r3, #2
 800a078:	61bb      	str	r3, [r7, #24]
 800a07a:	e007      	b.n	800a08c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	781a      	ldrb	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	3301      	adds	r3, #1
 800a08a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a092:	b29b      	uxth	r3, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1c9      	bne.n	800a03e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2140      	movs	r1, #64	@ 0x40
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 fd79 	bl	800abac <UART_WaitOnFlagUntilTimeout>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e005      	b.n	800a0d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e000      	b.n	800a0d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a0d4:	2302      	movs	r3, #2
  }
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3720      	adds	r7, #32
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0e4:	b08a      	sub	sp, #40	@ 0x28
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4a9e      	ldr	r2, [pc, #632]	@ (800a370 <UART_SetConfig+0x290>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d904      	bls.n	800a104 <UART_SetConfig+0x24>
 800a0fa:	f640 4158 	movw	r1, #3160	@ 0xc58
 800a0fe:	489d      	ldr	r0, [pc, #628]	@ (800a374 <UART_SetConfig+0x294>)
 800a100:	f7f8 fb92 	bl	8002828 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a10c:	d00d      	beq.n	800a12a <UART_SetConfig+0x4a>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d009      	beq.n	800a12a <UART_SetConfig+0x4a>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a11e:	d004      	beq.n	800a12a <UART_SetConfig+0x4a>
 800a120:	f640 4159 	movw	r1, #3161	@ 0xc59
 800a124:	4893      	ldr	r0, [pc, #588]	@ (800a374 <UART_SetConfig+0x294>)
 800a126:	f7f8 fb7f 	bl	8002828 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a92      	ldr	r2, [pc, #584]	@ (800a378 <UART_SetConfig+0x298>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d10e      	bne.n	800a152 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d030      	beq.n	800a19e <UART_SetConfig+0xbe>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a144:	d02b      	beq.n	800a19e <UART_SetConfig+0xbe>
 800a146:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800a14a:	488a      	ldr	r0, [pc, #552]	@ (800a374 <UART_SetConfig+0x294>)
 800a14c:	f7f8 fb6c 	bl	8002828 <assert_failed>
 800a150:	e025      	b.n	800a19e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a15a:	d012      	beq.n	800a182 <UART_SetConfig+0xa2>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <UART_SetConfig+0xa2>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a16c:	d009      	beq.n	800a182 <UART_SetConfig+0xa2>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a176:	d004      	beq.n	800a182 <UART_SetConfig+0xa2>
 800a178:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800a17c:	487d      	ldr	r0, [pc, #500]	@ (800a374 <UART_SetConfig+0x294>)
 800a17e:	f7f8 fb53 	bl	8002828 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d009      	beq.n	800a19e <UART_SetConfig+0xbe>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a192:	d004      	beq.n	800a19e <UART_SetConfig+0xbe>
 800a194:	f640 4161 	movw	r1, #3169	@ 0xc61
 800a198:	4876      	ldr	r0, [pc, #472]	@ (800a374 <UART_SetConfig+0x294>)
 800a19a:	f7f8 fb45 	bl	8002828 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00e      	beq.n	800a1c4 <UART_SetConfig+0xe4>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ae:	d009      	beq.n	800a1c4 <UART_SetConfig+0xe4>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a1b8:	d004      	beq.n	800a1c4 <UART_SetConfig+0xe4>
 800a1ba:	f640 4164 	movw	r1, #3172	@ 0xc64
 800a1be:	486d      	ldr	r0, [pc, #436]	@ (800a374 <UART_SetConfig+0x294>)
 800a1c0:	f7f8 fb32 	bl	8002828 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	f023 030c 	bic.w	r3, r3, #12
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <UART_SetConfig+0xf8>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d104      	bne.n	800a1e2 <UART_SetConfig+0x102>
 800a1d8:	f640 4165 	movw	r1, #3173	@ 0xc65
 800a1dc:	4865      	ldr	r0, [pc, #404]	@ (800a374 <UART_SetConfig+0x294>)
 800a1de:	f7f8 fb23 	bl	8002828 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d013      	beq.n	800a212 <UART_SetConfig+0x132>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1f2:	d00e      	beq.n	800a212 <UART_SetConfig+0x132>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1fc:	d009      	beq.n	800a212 <UART_SetConfig+0x132>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a206:	d004      	beq.n	800a212 <UART_SetConfig+0x132>
 800a208:	f640 4166 	movw	r1, #3174	@ 0xc66
 800a20c:	4859      	ldr	r0, [pc, #356]	@ (800a374 <UART_SetConfig+0x294>)
 800a20e:	f7f8 fb0b 	bl	8002828 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <UART_SetConfig+0x14e>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a222:	d004      	beq.n	800a22e <UART_SetConfig+0x14e>
 800a224:	f640 4167 	movw	r1, #3175	@ 0xc67
 800a228:	4852      	ldr	r0, [pc, #328]	@ (800a374 <UART_SetConfig+0x294>)
 800a22a:	f7f8 fafd 	bl	8002828 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	431a      	orrs	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	431a      	orrs	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	4313      	orrs	r3, r2
 800a244:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	4b4b      	ldr	r3, [pc, #300]	@ (800a37c <UART_SetConfig+0x29c>)
 800a24e:	4013      	ands	r3, r2
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	6812      	ldr	r2, [r2, #0]
 800a254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a256:	430b      	orrs	r3, r1
 800a258:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68da      	ldr	r2, [r3, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a3f      	ldr	r2, [pc, #252]	@ (800a378 <UART_SetConfig+0x298>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d004      	beq.n	800a28a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a286:	4313      	orrs	r3, r2
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a29a:	430a      	orrs	r2, r1
 800a29c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a37      	ldr	r2, [pc, #220]	@ (800a380 <UART_SetConfig+0x2a0>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d125      	bne.n	800a2f4 <UART_SetConfig+0x214>
 800a2a8:	4b36      	ldr	r3, [pc, #216]	@ (800a384 <UART_SetConfig+0x2a4>)
 800a2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ae:	f003 0303 	and.w	r3, r3, #3
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d81a      	bhi.n	800a2ec <UART_SetConfig+0x20c>
 800a2b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2bc <UART_SetConfig+0x1dc>)
 800a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2bc:	0800a2cd 	.word	0x0800a2cd
 800a2c0:	0800a2dd 	.word	0x0800a2dd
 800a2c4:	0800a2d5 	.word	0x0800a2d5
 800a2c8:	0800a2e5 	.word	0x0800a2e5
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2d2:	e114      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2da:	e110      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2e2:	e10c      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2ea:	e108      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2f2:	e104      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a23      	ldr	r2, [pc, #140]	@ (800a388 <UART_SetConfig+0x2a8>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d146      	bne.n	800a38c <UART_SetConfig+0x2ac>
 800a2fe:	4b21      	ldr	r3, [pc, #132]	@ (800a384 <UART_SetConfig+0x2a4>)
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a304:	f003 030c 	and.w	r3, r3, #12
 800a308:	2b0c      	cmp	r3, #12
 800a30a:	d82d      	bhi.n	800a368 <UART_SetConfig+0x288>
 800a30c:	a201      	add	r2, pc, #4	@ (adr r2, 800a314 <UART_SetConfig+0x234>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a369 	.word	0x0800a369
 800a31c:	0800a369 	.word	0x0800a369
 800a320:	0800a369 	.word	0x0800a369
 800a324:	0800a359 	.word	0x0800a359
 800a328:	0800a369 	.word	0x0800a369
 800a32c:	0800a369 	.word	0x0800a369
 800a330:	0800a369 	.word	0x0800a369
 800a334:	0800a351 	.word	0x0800a351
 800a338:	0800a369 	.word	0x0800a369
 800a33c:	0800a369 	.word	0x0800a369
 800a340:	0800a369 	.word	0x0800a369
 800a344:	0800a361 	.word	0x0800a361
 800a348:	2300      	movs	r3, #0
 800a34a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a34e:	e0d6      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a350:	2302      	movs	r3, #2
 800a352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a356:	e0d2      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a358:	2304      	movs	r3, #4
 800a35a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a35e:	e0ce      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a360:	2308      	movs	r3, #8
 800a362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a366:	e0ca      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a368:	2310      	movs	r3, #16
 800a36a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a36e:	e0c6      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a370:	00989680 	.word	0x00989680
 800a374:	0800c6cc 	.word	0x0800c6cc
 800a378:	40008000 	.word	0x40008000
 800a37c:	efff69f3 	.word	0xefff69f3
 800a380:	40013800 	.word	0x40013800
 800a384:	40021000 	.word	0x40021000
 800a388:	40004400 	.word	0x40004400
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4aae      	ldr	r2, [pc, #696]	@ (800a64c <UART_SetConfig+0x56c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d125      	bne.n	800a3e2 <UART_SetConfig+0x302>
 800a396:	4bae      	ldr	r3, [pc, #696]	@ (800a650 <UART_SetConfig+0x570>)
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a39c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a3a0:	2b30      	cmp	r3, #48	@ 0x30
 800a3a2:	d016      	beq.n	800a3d2 <UART_SetConfig+0x2f2>
 800a3a4:	2b30      	cmp	r3, #48	@ 0x30
 800a3a6:	d818      	bhi.n	800a3da <UART_SetConfig+0x2fa>
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d00a      	beq.n	800a3c2 <UART_SetConfig+0x2e2>
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	d814      	bhi.n	800a3da <UART_SetConfig+0x2fa>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <UART_SetConfig+0x2da>
 800a3b4:	2b10      	cmp	r3, #16
 800a3b6:	d008      	beq.n	800a3ca <UART_SetConfig+0x2ea>
 800a3b8:	e00f      	b.n	800a3da <UART_SetConfig+0x2fa>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3c0:	e09d      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3c8:	e099      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a3ca:	2304      	movs	r3, #4
 800a3cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3d0:	e095      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a3d2:	2308      	movs	r3, #8
 800a3d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3d8:	e091      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a3da:	2310      	movs	r3, #16
 800a3dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3e0:	e08d      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a9b      	ldr	r2, [pc, #620]	@ (800a654 <UART_SetConfig+0x574>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d125      	bne.n	800a438 <UART_SetConfig+0x358>
 800a3ec:	4b98      	ldr	r3, [pc, #608]	@ (800a650 <UART_SetConfig+0x570>)
 800a3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a3f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3f8:	d016      	beq.n	800a428 <UART_SetConfig+0x348>
 800a3fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3fc:	d818      	bhi.n	800a430 <UART_SetConfig+0x350>
 800a3fe:	2b80      	cmp	r3, #128	@ 0x80
 800a400:	d00a      	beq.n	800a418 <UART_SetConfig+0x338>
 800a402:	2b80      	cmp	r3, #128	@ 0x80
 800a404:	d814      	bhi.n	800a430 <UART_SetConfig+0x350>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <UART_SetConfig+0x330>
 800a40a:	2b40      	cmp	r3, #64	@ 0x40
 800a40c:	d008      	beq.n	800a420 <UART_SetConfig+0x340>
 800a40e:	e00f      	b.n	800a430 <UART_SetConfig+0x350>
 800a410:	2300      	movs	r3, #0
 800a412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a416:	e072      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a418:	2302      	movs	r3, #2
 800a41a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a41e:	e06e      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a426:	e06a      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a42e:	e066      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a436:	e062      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a86      	ldr	r2, [pc, #536]	@ (800a658 <UART_SetConfig+0x578>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d12a      	bne.n	800a498 <UART_SetConfig+0x3b8>
 800a442:	4b83      	ldr	r3, [pc, #524]	@ (800a650 <UART_SetConfig+0x570>)
 800a444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a44c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a450:	d01a      	beq.n	800a488 <UART_SetConfig+0x3a8>
 800a452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a456:	d81b      	bhi.n	800a490 <UART_SetConfig+0x3b0>
 800a458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a45c:	d00c      	beq.n	800a478 <UART_SetConfig+0x398>
 800a45e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a462:	d815      	bhi.n	800a490 <UART_SetConfig+0x3b0>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <UART_SetConfig+0x390>
 800a468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a46c:	d008      	beq.n	800a480 <UART_SetConfig+0x3a0>
 800a46e:	e00f      	b.n	800a490 <UART_SetConfig+0x3b0>
 800a470:	2300      	movs	r3, #0
 800a472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a476:	e042      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a478:	2302      	movs	r3, #2
 800a47a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a47e:	e03e      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a480:	2304      	movs	r3, #4
 800a482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a486:	e03a      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a488:	2308      	movs	r3, #8
 800a48a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a48e:	e036      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a490:	2310      	movs	r3, #16
 800a492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a496:	e032      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a6f      	ldr	r2, [pc, #444]	@ (800a65c <UART_SetConfig+0x57c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d12a      	bne.n	800a4f8 <UART_SetConfig+0x418>
 800a4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800a650 <UART_SetConfig+0x570>)
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a4ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4b0:	d01a      	beq.n	800a4e8 <UART_SetConfig+0x408>
 800a4b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4b6:	d81b      	bhi.n	800a4f0 <UART_SetConfig+0x410>
 800a4b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4bc:	d00c      	beq.n	800a4d8 <UART_SetConfig+0x3f8>
 800a4be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4c2:	d815      	bhi.n	800a4f0 <UART_SetConfig+0x410>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <UART_SetConfig+0x3f0>
 800a4c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4cc:	d008      	beq.n	800a4e0 <UART_SetConfig+0x400>
 800a4ce:	e00f      	b.n	800a4f0 <UART_SetConfig+0x410>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4d6:	e012      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4de:	e00e      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4e6:	e00a      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ee:	e006      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4f6:	e002      	b.n	800a4fe <UART_SetConfig+0x41e>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a56      	ldr	r2, [pc, #344]	@ (800a65c <UART_SetConfig+0x57c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d17a      	bne.n	800a5fe <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a508:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d824      	bhi.n	800a55a <UART_SetConfig+0x47a>
 800a510:	a201      	add	r2, pc, #4	@ (adr r2, 800a518 <UART_SetConfig+0x438>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a55b 	.word	0x0800a55b
 800a520:	0800a545 	.word	0x0800a545
 800a524:	0800a55b 	.word	0x0800a55b
 800a528:	0800a54b 	.word	0x0800a54b
 800a52c:	0800a55b 	.word	0x0800a55b
 800a530:	0800a55b 	.word	0x0800a55b
 800a534:	0800a55b 	.word	0x0800a55b
 800a538:	0800a553 	.word	0x0800a553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a53c:	f7fb f878 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 800a540:	61f8      	str	r0, [r7, #28]
        break;
 800a542:	e010      	b.n	800a566 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a544:	4b46      	ldr	r3, [pc, #280]	@ (800a660 <UART_SetConfig+0x580>)
 800a546:	61fb      	str	r3, [r7, #28]
        break;
 800a548:	e00d      	b.n	800a566 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54a:	f7fa ffd9 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 800a54e:	61f8      	str	r0, [r7, #28]
        break;
 800a550:	e009      	b.n	800a566 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a556:	61fb      	str	r3, [r7, #28]
        break;
 800a558:	e005      	b.n	800a566 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 8107 	beq.w	800a77c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	4613      	mov	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	69fa      	ldr	r2, [r7, #28]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d305      	bcc.n	800a58a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a584:	69fa      	ldr	r2, [r7, #28]
 800a586:	429a      	cmp	r2, r3
 800a588:	d903      	bls.n	800a592 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a590:	e0f4      	b.n	800a77c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	2200      	movs	r2, #0
 800a596:	461c      	mov	r4, r3
 800a598:	4615      	mov	r5, r2
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	022b      	lsls	r3, r5, #8
 800a5a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a5a8:	0222      	lsls	r2, r4, #8
 800a5aa:	68f9      	ldr	r1, [r7, #12]
 800a5ac:	6849      	ldr	r1, [r1, #4]
 800a5ae:	0849      	lsrs	r1, r1, #1
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	4688      	mov	r8, r1
 800a5b4:	4681      	mov	r9, r0
 800a5b6:	eb12 0a08 	adds.w	sl, r2, r8
 800a5ba:	eb43 0b09 	adc.w	fp, r3, r9
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	603b      	str	r3, [r7, #0]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5cc:	4650      	mov	r0, sl
 800a5ce:	4659      	mov	r1, fp
 800a5d0:	f7f5 fe4e 	bl	8000270 <__aeabi_uldivmod>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4613      	mov	r3, r2
 800a5da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5e2:	d308      	bcc.n	800a5f6 <UART_SetConfig+0x516>
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5ea:	d204      	bcs.n	800a5f6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	60da      	str	r2, [r3, #12]
 800a5f4:	e0c2      	b.n	800a77c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a5fc:	e0be      	b.n	800a77c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a606:	d16a      	bne.n	800a6de <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800a608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d834      	bhi.n	800a67a <UART_SetConfig+0x59a>
 800a610:	a201      	add	r2, pc, #4	@ (adr r2, 800a618 <UART_SetConfig+0x538>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a63d 	.word	0x0800a63d
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a665 	.word	0x0800a665
 800a624:	0800a67b 	.word	0x0800a67b
 800a628:	0800a66b 	.word	0x0800a66b
 800a62c:	0800a67b 	.word	0x0800a67b
 800a630:	0800a67b 	.word	0x0800a67b
 800a634:	0800a67b 	.word	0x0800a67b
 800a638:	0800a673 	.word	0x0800a673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a63c:	f7fa fff8 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 800a640:	61f8      	str	r0, [r7, #28]
        break;
 800a642:	e020      	b.n	800a686 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a644:	f7fb f80a 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 800a648:	61f8      	str	r0, [r7, #28]
        break;
 800a64a:	e01c      	b.n	800a686 <UART_SetConfig+0x5a6>
 800a64c:	40004800 	.word	0x40004800
 800a650:	40021000 	.word	0x40021000
 800a654:	40004c00 	.word	0x40004c00
 800a658:	40005000 	.word	0x40005000
 800a65c:	40008000 	.word	0x40008000
 800a660:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a664:	4b4c      	ldr	r3, [pc, #304]	@ (800a798 <UART_SetConfig+0x6b8>)
 800a666:	61fb      	str	r3, [r7, #28]
        break;
 800a668:	e00d      	b.n	800a686 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a66a:	f7fa ff49 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 800a66e:	61f8      	str	r0, [r7, #28]
        break;
 800a670:	e009      	b.n	800a686 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a676:	61fb      	str	r3, [r7, #28]
        break;
 800a678:	e005      	b.n	800a686 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d077      	beq.n	800a77c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	005a      	lsls	r2, r3, #1
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	441a      	add	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	2b0f      	cmp	r3, #15
 800a6a6:	d916      	bls.n	800a6d6 <UART_SetConfig+0x5f6>
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ae:	d212      	bcs.n	800a6d6 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f023 030f 	bic.w	r3, r3, #15
 800a6b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	085b      	lsrs	r3, r3, #1
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	8afb      	ldrh	r3, [r7, #22]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	8afa      	ldrh	r2, [r7, #22]
 800a6d2:	60da      	str	r2, [r3, #12]
 800a6d4:	e052      	b.n	800a77c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a6dc:	e04e      	b.n	800a77c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a6e2:	2b08      	cmp	r3, #8
 800a6e4:	d827      	bhi.n	800a736 <UART_SetConfig+0x656>
 800a6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ec <UART_SetConfig+0x60c>)
 800a6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ec:	0800a711 	.word	0x0800a711
 800a6f0:	0800a719 	.word	0x0800a719
 800a6f4:	0800a721 	.word	0x0800a721
 800a6f8:	0800a737 	.word	0x0800a737
 800a6fc:	0800a727 	.word	0x0800a727
 800a700:	0800a737 	.word	0x0800a737
 800a704:	0800a737 	.word	0x0800a737
 800a708:	0800a737 	.word	0x0800a737
 800a70c:	0800a72f 	.word	0x0800a72f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a710:	f7fa ff8e 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 800a714:	61f8      	str	r0, [r7, #28]
        break;
 800a716:	e014      	b.n	800a742 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a718:	f7fa ffa0 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 800a71c:	61f8      	str	r0, [r7, #28]
        break;
 800a71e:	e010      	b.n	800a742 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a720:	4b1d      	ldr	r3, [pc, #116]	@ (800a798 <UART_SetConfig+0x6b8>)
 800a722:	61fb      	str	r3, [r7, #28]
        break;
 800a724:	e00d      	b.n	800a742 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a726:	f7fa feeb 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 800a72a:	61f8      	str	r0, [r7, #28]
        break;
 800a72c:	e009      	b.n	800a742 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a72e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a732:	61fb      	str	r3, [r7, #28]
        break;
 800a734:	e005      	b.n	800a742 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800a736:	2300      	movs	r3, #0
 800a738:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a740:	bf00      	nop
    }

    if (pclk != 0U)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d019      	beq.n	800a77c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	085a      	lsrs	r2, r3, #1
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	441a      	add	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	2b0f      	cmp	r3, #15
 800a760:	d909      	bls.n	800a776 <UART_SetConfig+0x696>
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a768:	d205      	bcs.n	800a776 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	60da      	str	r2, [r3, #12]
 800a774:	e002      	b.n	800a77c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a788:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3728      	adds	r7, #40	@ 0x28
 800a790:	46bd      	mov	sp, r7
 800a792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a796:	bf00      	nop
 800a798:	00f42400 	.word	0x00f42400

0800a79c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a8:	2bff      	cmp	r3, #255	@ 0xff
 800a7aa:	d904      	bls.n	800a7b6 <UART_AdvFeatureConfig+0x1a>
 800a7ac:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800a7b0:	4891      	ldr	r0, [pc, #580]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a7b2:	f7f8 f839 	bl	8002828 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d018      	beq.n	800a7f4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <UART_AdvFeatureConfig+0x42>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7d2:	d004      	beq.n	800a7de <UART_AdvFeatureConfig+0x42>
 800a7d4:	f640 5152 	movw	r1, #3410	@ 0xd52
 800a7d8:	4887      	ldr	r0, [pc, #540]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a7da:	f7f8 f825 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d018      	beq.n	800a832 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a804:	2b00      	cmp	r3, #0
 800a806:	d009      	beq.n	800a81c <UART_AdvFeatureConfig+0x80>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a810:	d004      	beq.n	800a81c <UART_AdvFeatureConfig+0x80>
 800a812:	f640 5159 	movw	r1, #3417	@ 0xd59
 800a816:	4878      	ldr	r0, [pc, #480]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a818:	f7f8 f806 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d018      	beq.n	800a870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <UART_AdvFeatureConfig+0xbe>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a84e:	d004      	beq.n	800a85a <UART_AdvFeatureConfig+0xbe>
 800a850:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a854:	4868      	ldr	r0, [pc, #416]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a856:	f7f7 ffe7 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d018      	beq.n	800a8ae <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <UART_AdvFeatureConfig+0xfc>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a888:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a88c:	d004      	beq.n	800a898 <UART_AdvFeatureConfig+0xfc>
 800a88e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a892:	4859      	ldr	r0, [pc, #356]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a894:	f7f7 ffc8 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b2:	f003 0310 	and.w	r3, r3, #16
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d018      	beq.n	800a8ec <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d009      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x13a>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ca:	d004      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x13a>
 800a8cc:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a8d0:	4849      	ldr	r0, [pc, #292]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a8d2:	f7f7 ffa9 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d018      	beq.n	800a92a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d009      	beq.n	800a914 <UART_AdvFeatureConfig+0x178>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a908:	d004      	beq.n	800a914 <UART_AdvFeatureConfig+0x178>
 800a90a:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a90e:	483a      	ldr	r0, [pc, #232]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a910:	f7f7 ff8a 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a932:	2b00      	cmp	r3, #0
 800a934:	d06c      	beq.n	800aa10 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a30      	ldr	r2, [pc, #192]	@ (800a9fc <UART_AdvFeatureConfig+0x260>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d018      	beq.n	800a972 <UART_AdvFeatureConfig+0x1d6>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a2e      	ldr	r2, [pc, #184]	@ (800aa00 <UART_AdvFeatureConfig+0x264>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d013      	beq.n	800a972 <UART_AdvFeatureConfig+0x1d6>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a2d      	ldr	r2, [pc, #180]	@ (800aa04 <UART_AdvFeatureConfig+0x268>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d00e      	beq.n	800a972 <UART_AdvFeatureConfig+0x1d6>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a2b      	ldr	r2, [pc, #172]	@ (800aa08 <UART_AdvFeatureConfig+0x26c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d009      	beq.n	800a972 <UART_AdvFeatureConfig+0x1d6>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a2a      	ldr	r2, [pc, #168]	@ (800aa0c <UART_AdvFeatureConfig+0x270>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d004      	beq.n	800a972 <UART_AdvFeatureConfig+0x1d6>
 800a968:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a96c:	4822      	ldr	r0, [pc, #136]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a96e:	f7f7 ff5b 	bl	8002828 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <UART_AdvFeatureConfig+0x1f2>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a982:	d004      	beq.n	800a98e <UART_AdvFeatureConfig+0x1f2>
 800a984:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a988:	481b      	ldr	r0, [pc, #108]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a98a:	f7f7 ff4d 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ac:	d130      	bne.n	800aa10 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d013      	beq.n	800a9de <UART_AdvFeatureConfig+0x242>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9be:	d00e      	beq.n	800a9de <UART_AdvFeatureConfig+0x242>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9c8:	d009      	beq.n	800a9de <UART_AdvFeatureConfig+0x242>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9d2:	d004      	beq.n	800a9de <UART_AdvFeatureConfig+0x242>
 800a9d4:	f640 5182 	movw	r1, #3458	@ 0xd82
 800a9d8:	4807      	ldr	r0, [pc, #28]	@ (800a9f8 <UART_AdvFeatureConfig+0x25c>)
 800a9da:	f7f7 ff25 	bl	8002828 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	605a      	str	r2, [r3, #4]
 800a9f4:	e00c      	b.n	800aa10 <UART_AdvFeatureConfig+0x274>
 800a9f6:	bf00      	nop
 800a9f8:	0800c6cc 	.word	0x0800c6cc
 800a9fc:	40013800 	.word	0x40013800
 800aa00:	40004400 	.word	0x40004400
 800aa04:	40004800 	.word	0x40004800
 800aa08:	40004c00 	.word	0x40004c00
 800aa0c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d018      	beq.n	800aa4e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <UART_AdvFeatureConfig+0x29c>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aa2c:	d004      	beq.n	800aa38 <UART_AdvFeatureConfig+0x29c>
 800aa2e:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800aa32:	4809      	ldr	r0, [pc, #36]	@ (800aa58 <UART_AdvFeatureConfig+0x2bc>)
 800aa34:	f7f7 fef8 	bl	8002828 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
  }
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	0800c6cc 	.word	0x0800c6cc

0800aa5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b098      	sub	sp, #96	@ 0x60
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa6c:	f7f8 fd9e 	bl	80035ac <HAL_GetTick>
 800aa70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0308 	and.w	r3, r3, #8
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d12e      	bne.n	800aade <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f88c 	bl	800abac <UART_WaitOnFlagUntilTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d021      	beq.n	800aade <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa2:	e853 3f00 	ldrex	r3, [r3]
 800aaa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaae:	653b      	str	r3, [r7, #80]	@ 0x50
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aabe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac0:	e841 2300 	strex	r3, r2, [r1]
 800aac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1e6      	bne.n	800aa9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2220      	movs	r2, #32
 800aad0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e062      	b.n	800aba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d149      	bne.n	800ab80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f856 	bl	800abac <UART_WaitOnFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d03c      	beq.n	800ab80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	623b      	str	r3, [r7, #32]
   return(result);
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0301 	bic.w	r3, r3, #1
 800ab4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3308      	adds	r3, #8
 800ab56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab58:	61fa      	str	r2, [r7, #28]
 800ab5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	69b9      	ldr	r1, [r7, #24]
 800ab5e:	69fa      	ldr	r2, [r7, #28]
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	617b      	str	r3, [r7, #20]
   return(result);
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e5      	bne.n	800ab38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e011      	b.n	800aba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2220      	movs	r2, #32
 800ab84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3758      	adds	r7, #88	@ 0x58
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	4613      	mov	r3, r2
 800abba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abbc:	e04f      	b.n	800ac5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc4:	d04b      	beq.n	800ac5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abc6:	f7f8 fcf1 	bl	80035ac <HAL_GetTick>
 800abca:	4602      	mov	r2, r0
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d302      	bcc.n	800abdc <UART_WaitOnFlagUntilTimeout+0x30>
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e04e      	b.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0304 	and.w	r3, r3, #4
 800abea:	2b00      	cmp	r3, #0
 800abec:	d037      	beq.n	800ac5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b80      	cmp	r3, #128	@ 0x80
 800abf2:	d034      	beq.n	800ac5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b40      	cmp	r3, #64	@ 0x40
 800abf8:	d031      	beq.n	800ac5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b08      	cmp	r3, #8
 800ac06:	d110      	bne.n	800ac2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 f838 	bl	800ac86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2208      	movs	r2, #8
 800ac1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e029      	b.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac38:	d111      	bne.n	800ac5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f81e 	bl	800ac86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2220      	movs	r2, #32
 800ac4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e00f      	b.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	69da      	ldr	r2, [r3, #28]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	4013      	ands	r3, r2
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	bf0c      	ite	eq
 800ac6e:	2301      	moveq	r3, #1
 800ac70:	2300      	movne	r3, #0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	461a      	mov	r2, r3
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d0a0      	beq.n	800abbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b095      	sub	sp, #84	@ 0x54
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acac:	643b      	str	r3, [r7, #64]	@ 0x40
 800acae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acb4:	e841 2300 	strex	r3, r2, [r1]
 800acb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e6      	bne.n	800ac8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	61fb      	str	r3, [r7, #28]
   return(result);
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	f023 0301 	bic.w	r3, r3, #1
 800acd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ace0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ace2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ace6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e5      	bne.n	800acc0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d118      	bne.n	800ad2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f023 0310 	bic.w	r3, r3, #16
 800ad10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1e:	6979      	ldr	r1, [r7, #20]
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	e841 2300 	strex	r3, r2, [r1]
 800ad26:	613b      	str	r3, [r7, #16]
   return(result);
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e6      	bne.n	800acfc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ad42:	bf00      	nop
 800ad44:	3754      	adds	r7, #84	@ 0x54
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
	...

0800ad50 <calloc>:
 800ad50:	4b02      	ldr	r3, [pc, #8]	@ (800ad5c <calloc+0xc>)
 800ad52:	460a      	mov	r2, r1
 800ad54:	4601      	mov	r1, r0
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	f000 b802 	b.w	800ad60 <_calloc_r>
 800ad5c:	20000028 	.word	0x20000028

0800ad60 <_calloc_r>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	fba1 5402 	umull	r5, r4, r1, r2
 800ad66:	b934      	cbnz	r4, 800ad76 <_calloc_r+0x16>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	f000 f83f 	bl	800adec <_malloc_r>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	b928      	cbnz	r0, 800ad7e <_calloc_r+0x1e>
 800ad72:	4630      	mov	r0, r6
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
 800ad76:	220c      	movs	r2, #12
 800ad78:	6002      	str	r2, [r0, #0]
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	e7f9      	b.n	800ad72 <_calloc_r+0x12>
 800ad7e:	462a      	mov	r2, r5
 800ad80:	4621      	mov	r1, r4
 800ad82:	f000 fac7 	bl	800b314 <memset>
 800ad86:	e7f4      	b.n	800ad72 <_calloc_r+0x12>

0800ad88 <malloc>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	@ (800ad94 <malloc+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f000 b82d 	b.w	800adec <_malloc_r>
 800ad92:	bf00      	nop
 800ad94:	20000028 	.word	0x20000028

0800ad98 <free>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <free+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f000 bb53 	b.w	800b448 <_free_r>
 800ada2:	bf00      	nop
 800ada4:	20000028 	.word	0x20000028

0800ada8 <sbrk_aligned>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	4e0f      	ldr	r6, [pc, #60]	@ (800ade8 <sbrk_aligned+0x40>)
 800adac:	460c      	mov	r4, r1
 800adae:	6831      	ldr	r1, [r6, #0]
 800adb0:	4605      	mov	r5, r0
 800adb2:	b911      	cbnz	r1, 800adba <sbrk_aligned+0x12>
 800adb4:	f000 faea 	bl	800b38c <_sbrk_r>
 800adb8:	6030      	str	r0, [r6, #0]
 800adba:	4621      	mov	r1, r4
 800adbc:	4628      	mov	r0, r5
 800adbe:	f000 fae5 	bl	800b38c <_sbrk_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	d103      	bne.n	800adce <sbrk_aligned+0x26>
 800adc6:	f04f 34ff 	mov.w	r4, #4294967295
 800adca:	4620      	mov	r0, r4
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
 800adce:	1cc4      	adds	r4, r0, #3
 800add0:	f024 0403 	bic.w	r4, r4, #3
 800add4:	42a0      	cmp	r0, r4
 800add6:	d0f8      	beq.n	800adca <sbrk_aligned+0x22>
 800add8:	1a21      	subs	r1, r4, r0
 800adda:	4628      	mov	r0, r5
 800addc:	f000 fad6 	bl	800b38c <_sbrk_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d1f2      	bne.n	800adca <sbrk_aligned+0x22>
 800ade4:	e7ef      	b.n	800adc6 <sbrk_aligned+0x1e>
 800ade6:	bf00      	nop
 800ade8:	20000c3c 	.word	0x20000c3c

0800adec <_malloc_r>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	1ccd      	adds	r5, r1, #3
 800adf2:	f025 0503 	bic.w	r5, r5, #3
 800adf6:	3508      	adds	r5, #8
 800adf8:	2d0c      	cmp	r5, #12
 800adfa:	bf38      	it	cc
 800adfc:	250c      	movcc	r5, #12
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	4606      	mov	r6, r0
 800ae02:	db01      	blt.n	800ae08 <_malloc_r+0x1c>
 800ae04:	42a9      	cmp	r1, r5
 800ae06:	d904      	bls.n	800ae12 <_malloc_r+0x26>
 800ae08:	230c      	movs	r3, #12
 800ae0a:	6033      	str	r3, [r6, #0]
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aee8 <_malloc_r+0xfc>
 800ae16:	f000 f869 	bl	800aeec <__malloc_lock>
 800ae1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae1e:	461c      	mov	r4, r3
 800ae20:	bb44      	cbnz	r4, 800ae74 <_malloc_r+0x88>
 800ae22:	4629      	mov	r1, r5
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7ff ffbf 	bl	800ada8 <sbrk_aligned>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	d158      	bne.n	800aee2 <_malloc_r+0xf6>
 800ae30:	f8d8 4000 	ldr.w	r4, [r8]
 800ae34:	4627      	mov	r7, r4
 800ae36:	2f00      	cmp	r7, #0
 800ae38:	d143      	bne.n	800aec2 <_malloc_r+0xd6>
 800ae3a:	2c00      	cmp	r4, #0
 800ae3c:	d04b      	beq.n	800aed6 <_malloc_r+0xea>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	4639      	mov	r1, r7
 800ae42:	4630      	mov	r0, r6
 800ae44:	eb04 0903 	add.w	r9, r4, r3
 800ae48:	f000 faa0 	bl	800b38c <_sbrk_r>
 800ae4c:	4581      	cmp	r9, r0
 800ae4e:	d142      	bne.n	800aed6 <_malloc_r+0xea>
 800ae50:	6821      	ldr	r1, [r4, #0]
 800ae52:	1a6d      	subs	r5, r5, r1
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ffa6 	bl	800ada8 <sbrk_aligned>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d03a      	beq.n	800aed6 <_malloc_r+0xea>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	442b      	add	r3, r5
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	bb62      	cbnz	r2, 800aec8 <_malloc_r+0xdc>
 800ae6e:	f8c8 7000 	str.w	r7, [r8]
 800ae72:	e00f      	b.n	800ae94 <_malloc_r+0xa8>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	1b52      	subs	r2, r2, r5
 800ae78:	d420      	bmi.n	800aebc <_malloc_r+0xd0>
 800ae7a:	2a0b      	cmp	r2, #11
 800ae7c:	d917      	bls.n	800aeae <_malloc_r+0xc2>
 800ae7e:	1961      	adds	r1, r4, r5
 800ae80:	42a3      	cmp	r3, r4
 800ae82:	6025      	str	r5, [r4, #0]
 800ae84:	bf18      	it	ne
 800ae86:	6059      	strne	r1, [r3, #4]
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	bf08      	it	eq
 800ae8c:	f8c8 1000 	streq.w	r1, [r8]
 800ae90:	5162      	str	r2, [r4, r5]
 800ae92:	604b      	str	r3, [r1, #4]
 800ae94:	4630      	mov	r0, r6
 800ae96:	f000 f82f 	bl	800aef8 <__malloc_unlock>
 800ae9a:	f104 000b 	add.w	r0, r4, #11
 800ae9e:	1d23      	adds	r3, r4, #4
 800aea0:	f020 0007 	bic.w	r0, r0, #7
 800aea4:	1ac2      	subs	r2, r0, r3
 800aea6:	bf1c      	itt	ne
 800aea8:	1a1b      	subne	r3, r3, r0
 800aeaa:	50a3      	strne	r3, [r4, r2]
 800aeac:	e7af      	b.n	800ae0e <_malloc_r+0x22>
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	bf0c      	ite	eq
 800aeb4:	f8c8 2000 	streq.w	r2, [r8]
 800aeb8:	605a      	strne	r2, [r3, #4]
 800aeba:	e7eb      	b.n	800ae94 <_malloc_r+0xa8>
 800aebc:	4623      	mov	r3, r4
 800aebe:	6864      	ldr	r4, [r4, #4]
 800aec0:	e7ae      	b.n	800ae20 <_malloc_r+0x34>
 800aec2:	463c      	mov	r4, r7
 800aec4:	687f      	ldr	r7, [r7, #4]
 800aec6:	e7b6      	b.n	800ae36 <_malloc_r+0x4a>
 800aec8:	461a      	mov	r2, r3
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	42a3      	cmp	r3, r4
 800aece:	d1fb      	bne.n	800aec8 <_malloc_r+0xdc>
 800aed0:	2300      	movs	r3, #0
 800aed2:	6053      	str	r3, [r2, #4]
 800aed4:	e7de      	b.n	800ae94 <_malloc_r+0xa8>
 800aed6:	230c      	movs	r3, #12
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	4630      	mov	r0, r6
 800aedc:	f000 f80c 	bl	800aef8 <__malloc_unlock>
 800aee0:	e794      	b.n	800ae0c <_malloc_r+0x20>
 800aee2:	6005      	str	r5, [r0, #0]
 800aee4:	e7d6      	b.n	800ae94 <_malloc_r+0xa8>
 800aee6:	bf00      	nop
 800aee8:	20000c40 	.word	0x20000c40

0800aeec <__malloc_lock>:
 800aeec:	4801      	ldr	r0, [pc, #4]	@ (800aef4 <__malloc_lock+0x8>)
 800aeee:	f000 ba9a 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800aef2:	bf00      	nop
 800aef4:	20000d84 	.word	0x20000d84

0800aef8 <__malloc_unlock>:
 800aef8:	4801      	ldr	r0, [pc, #4]	@ (800af00 <__malloc_unlock+0x8>)
 800aefa:	f000 ba95 	b.w	800b428 <__retarget_lock_release_recursive>
 800aefe:	bf00      	nop
 800af00:	20000d84 	.word	0x20000d84

0800af04 <std>:
 800af04:	2300      	movs	r3, #0
 800af06:	b510      	push	{r4, lr}
 800af08:	4604      	mov	r4, r0
 800af0a:	e9c0 3300 	strd	r3, r3, [r0]
 800af0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af12:	6083      	str	r3, [r0, #8]
 800af14:	8181      	strh	r1, [r0, #12]
 800af16:	6643      	str	r3, [r0, #100]	@ 0x64
 800af18:	81c2      	strh	r2, [r0, #14]
 800af1a:	6183      	str	r3, [r0, #24]
 800af1c:	4619      	mov	r1, r3
 800af1e:	2208      	movs	r2, #8
 800af20:	305c      	adds	r0, #92	@ 0x5c
 800af22:	f000 f9f7 	bl	800b314 <memset>
 800af26:	4b0d      	ldr	r3, [pc, #52]	@ (800af5c <std+0x58>)
 800af28:	6263      	str	r3, [r4, #36]	@ 0x24
 800af2a:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <std+0x5c>)
 800af2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af2e:	4b0d      	ldr	r3, [pc, #52]	@ (800af64 <std+0x60>)
 800af30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af32:	4b0d      	ldr	r3, [pc, #52]	@ (800af68 <std+0x64>)
 800af34:	6323      	str	r3, [r4, #48]	@ 0x30
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <std+0x68>)
 800af38:	6224      	str	r4, [r4, #32]
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d006      	beq.n	800af4c <std+0x48>
 800af3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af42:	4294      	cmp	r4, r2
 800af44:	d002      	beq.n	800af4c <std+0x48>
 800af46:	33d0      	adds	r3, #208	@ 0xd0
 800af48:	429c      	cmp	r4, r3
 800af4a:	d105      	bne.n	800af58 <std+0x54>
 800af4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af54:	f000 ba66 	b.w	800b424 <__retarget_lock_init_recursive>
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	bf00      	nop
 800af5c:	0800b215 	.word	0x0800b215
 800af60:	0800b237 	.word	0x0800b237
 800af64:	0800b26f 	.word	0x0800b26f
 800af68:	0800b293 	.word	0x0800b293
 800af6c:	20000c44 	.word	0x20000c44

0800af70 <stdio_exit_handler>:
 800af70:	4a02      	ldr	r2, [pc, #8]	@ (800af7c <stdio_exit_handler+0xc>)
 800af72:	4903      	ldr	r1, [pc, #12]	@ (800af80 <stdio_exit_handler+0x10>)
 800af74:	4803      	ldr	r0, [pc, #12]	@ (800af84 <stdio_exit_handler+0x14>)
 800af76:	f000 b869 	b.w	800b04c <_fwalk_sglue>
 800af7a:	bf00      	nop
 800af7c:	2000001c 	.word	0x2000001c
 800af80:	0800be31 	.word	0x0800be31
 800af84:	2000002c 	.word	0x2000002c

0800af88 <cleanup_stdio>:
 800af88:	6841      	ldr	r1, [r0, #4]
 800af8a:	4b0c      	ldr	r3, [pc, #48]	@ (800afbc <cleanup_stdio+0x34>)
 800af8c:	4299      	cmp	r1, r3
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	d001      	beq.n	800af98 <cleanup_stdio+0x10>
 800af94:	f000 ff4c 	bl	800be30 <_fflush_r>
 800af98:	68a1      	ldr	r1, [r4, #8]
 800af9a:	4b09      	ldr	r3, [pc, #36]	@ (800afc0 <cleanup_stdio+0x38>)
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <cleanup_stdio+0x1e>
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 ff45 	bl	800be30 <_fflush_r>
 800afa6:	68e1      	ldr	r1, [r4, #12]
 800afa8:	4b06      	ldr	r3, [pc, #24]	@ (800afc4 <cleanup_stdio+0x3c>)
 800afaa:	4299      	cmp	r1, r3
 800afac:	d004      	beq.n	800afb8 <cleanup_stdio+0x30>
 800afae:	4620      	mov	r0, r4
 800afb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb4:	f000 bf3c 	b.w	800be30 <_fflush_r>
 800afb8:	bd10      	pop	{r4, pc}
 800afba:	bf00      	nop
 800afbc:	20000c44 	.word	0x20000c44
 800afc0:	20000cac 	.word	0x20000cac
 800afc4:	20000d14 	.word	0x20000d14

0800afc8 <global_stdio_init.part.0>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	4b0b      	ldr	r3, [pc, #44]	@ (800aff8 <global_stdio_init.part.0+0x30>)
 800afcc:	4c0b      	ldr	r4, [pc, #44]	@ (800affc <global_stdio_init.part.0+0x34>)
 800afce:	4a0c      	ldr	r2, [pc, #48]	@ (800b000 <global_stdio_init.part.0+0x38>)
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	4620      	mov	r0, r4
 800afd4:	2200      	movs	r2, #0
 800afd6:	2104      	movs	r1, #4
 800afd8:	f7ff ff94 	bl	800af04 <std>
 800afdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afe0:	2201      	movs	r2, #1
 800afe2:	2109      	movs	r1, #9
 800afe4:	f7ff ff8e 	bl	800af04 <std>
 800afe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afec:	2202      	movs	r2, #2
 800afee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff2:	2112      	movs	r1, #18
 800aff4:	f7ff bf86 	b.w	800af04 <std>
 800aff8:	20000d7c 	.word	0x20000d7c
 800affc:	20000c44 	.word	0x20000c44
 800b000:	0800af71 	.word	0x0800af71

0800b004 <__sfp_lock_acquire>:
 800b004:	4801      	ldr	r0, [pc, #4]	@ (800b00c <__sfp_lock_acquire+0x8>)
 800b006:	f000 ba0e 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800b00a:	bf00      	nop
 800b00c:	20000d85 	.word	0x20000d85

0800b010 <__sfp_lock_release>:
 800b010:	4801      	ldr	r0, [pc, #4]	@ (800b018 <__sfp_lock_release+0x8>)
 800b012:	f000 ba09 	b.w	800b428 <__retarget_lock_release_recursive>
 800b016:	bf00      	nop
 800b018:	20000d85 	.word	0x20000d85

0800b01c <__sinit>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	f7ff fff0 	bl	800b004 <__sfp_lock_acquire>
 800b024:	6a23      	ldr	r3, [r4, #32]
 800b026:	b11b      	cbz	r3, 800b030 <__sinit+0x14>
 800b028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b02c:	f7ff bff0 	b.w	800b010 <__sfp_lock_release>
 800b030:	4b04      	ldr	r3, [pc, #16]	@ (800b044 <__sinit+0x28>)
 800b032:	6223      	str	r3, [r4, #32]
 800b034:	4b04      	ldr	r3, [pc, #16]	@ (800b048 <__sinit+0x2c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1f5      	bne.n	800b028 <__sinit+0xc>
 800b03c:	f7ff ffc4 	bl	800afc8 <global_stdio_init.part.0>
 800b040:	e7f2      	b.n	800b028 <__sinit+0xc>
 800b042:	bf00      	nop
 800b044:	0800af89 	.word	0x0800af89
 800b048:	20000d7c 	.word	0x20000d7c

0800b04c <_fwalk_sglue>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	4607      	mov	r7, r0
 800b052:	4688      	mov	r8, r1
 800b054:	4614      	mov	r4, r2
 800b056:	2600      	movs	r6, #0
 800b058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b05c:	f1b9 0901 	subs.w	r9, r9, #1
 800b060:	d505      	bpl.n	800b06e <_fwalk_sglue+0x22>
 800b062:	6824      	ldr	r4, [r4, #0]
 800b064:	2c00      	cmp	r4, #0
 800b066:	d1f7      	bne.n	800b058 <_fwalk_sglue+0xc>
 800b068:	4630      	mov	r0, r6
 800b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d907      	bls.n	800b084 <_fwalk_sglue+0x38>
 800b074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b078:	3301      	adds	r3, #1
 800b07a:	d003      	beq.n	800b084 <_fwalk_sglue+0x38>
 800b07c:	4629      	mov	r1, r5
 800b07e:	4638      	mov	r0, r7
 800b080:	47c0      	blx	r8
 800b082:	4306      	orrs	r6, r0
 800b084:	3568      	adds	r5, #104	@ 0x68
 800b086:	e7e9      	b.n	800b05c <_fwalk_sglue+0x10>

0800b088 <iprintf>:
 800b088:	b40f      	push	{r0, r1, r2, r3}
 800b08a:	b507      	push	{r0, r1, r2, lr}
 800b08c:	4906      	ldr	r1, [pc, #24]	@ (800b0a8 <iprintf+0x20>)
 800b08e:	ab04      	add	r3, sp, #16
 800b090:	6808      	ldr	r0, [r1, #0]
 800b092:	f853 2b04 	ldr.w	r2, [r3], #4
 800b096:	6881      	ldr	r1, [r0, #8]
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	f000 fba1 	bl	800b7e0 <_vfiprintf_r>
 800b09e:	b003      	add	sp, #12
 800b0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a4:	b004      	add	sp, #16
 800b0a6:	4770      	bx	lr
 800b0a8:	20000028 	.word	0x20000028

0800b0ac <setvbuf>:
 800b0ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0b0:	461d      	mov	r5, r3
 800b0b2:	4b57      	ldr	r3, [pc, #348]	@ (800b210 <setvbuf+0x164>)
 800b0b4:	681f      	ldr	r7, [r3, #0]
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	460e      	mov	r6, r1
 800b0ba:	4690      	mov	r8, r2
 800b0bc:	b127      	cbz	r7, 800b0c8 <setvbuf+0x1c>
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	b913      	cbnz	r3, 800b0c8 <setvbuf+0x1c>
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	f7ff ffaa 	bl	800b01c <__sinit>
 800b0c8:	f1b8 0f02 	cmp.w	r8, #2
 800b0cc:	d006      	beq.n	800b0dc <setvbuf+0x30>
 800b0ce:	f1b8 0f01 	cmp.w	r8, #1
 800b0d2:	f200 809a 	bhi.w	800b20a <setvbuf+0x15e>
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	f2c0 8097 	blt.w	800b20a <setvbuf+0x15e>
 800b0dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0de:	07d9      	lsls	r1, r3, #31
 800b0e0:	d405      	bmi.n	800b0ee <setvbuf+0x42>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	059a      	lsls	r2, r3, #22
 800b0e6:	d402      	bmi.n	800b0ee <setvbuf+0x42>
 800b0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ea:	f000 f99c 	bl	800b426 <__retarget_lock_acquire_recursive>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f000 fe9d 	bl	800be30 <_fflush_r>
 800b0f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0f8:	b141      	cbz	r1, 800b10c <setvbuf+0x60>
 800b0fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0fe:	4299      	cmp	r1, r3
 800b100:	d002      	beq.n	800b108 <setvbuf+0x5c>
 800b102:	4638      	mov	r0, r7
 800b104:	f000 f9a0 	bl	800b448 <_free_r>
 800b108:	2300      	movs	r3, #0
 800b10a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b10c:	2300      	movs	r3, #0
 800b10e:	61a3      	str	r3, [r4, #24]
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	061b      	lsls	r3, r3, #24
 800b116:	d503      	bpl.n	800b120 <setvbuf+0x74>
 800b118:	6921      	ldr	r1, [r4, #16]
 800b11a:	4638      	mov	r0, r7
 800b11c:	f000 f994 	bl	800b448 <_free_r>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b126:	f023 0303 	bic.w	r3, r3, #3
 800b12a:	f1b8 0f02 	cmp.w	r8, #2
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	d061      	beq.n	800b1f6 <setvbuf+0x14a>
 800b132:	ab01      	add	r3, sp, #4
 800b134:	466a      	mov	r2, sp
 800b136:	4621      	mov	r1, r4
 800b138:	4638      	mov	r0, r7
 800b13a:	f000 fea1 	bl	800be80 <__swhatbuf_r>
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	4318      	orrs	r0, r3
 800b142:	81a0      	strh	r0, [r4, #12]
 800b144:	bb2d      	cbnz	r5, 800b192 <setvbuf+0xe6>
 800b146:	9d00      	ldr	r5, [sp, #0]
 800b148:	4628      	mov	r0, r5
 800b14a:	f7ff fe1d 	bl	800ad88 <malloc>
 800b14e:	4606      	mov	r6, r0
 800b150:	2800      	cmp	r0, #0
 800b152:	d152      	bne.n	800b1fa <setvbuf+0x14e>
 800b154:	f8dd 9000 	ldr.w	r9, [sp]
 800b158:	45a9      	cmp	r9, r5
 800b15a:	d140      	bne.n	800b1de <setvbuf+0x132>
 800b15c:	f04f 35ff 	mov.w	r5, #4294967295
 800b160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b164:	f043 0202 	orr.w	r2, r3, #2
 800b168:	81a2      	strh	r2, [r4, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	60a2      	str	r2, [r4, #8]
 800b16e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b172:	6022      	str	r2, [r4, #0]
 800b174:	6122      	str	r2, [r4, #16]
 800b176:	2201      	movs	r2, #1
 800b178:	6162      	str	r2, [r4, #20]
 800b17a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b17c:	07d6      	lsls	r6, r2, #31
 800b17e:	d404      	bmi.n	800b18a <setvbuf+0xde>
 800b180:	0598      	lsls	r0, r3, #22
 800b182:	d402      	bmi.n	800b18a <setvbuf+0xde>
 800b184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b186:	f000 f94f 	bl	800b428 <__retarget_lock_release_recursive>
 800b18a:	4628      	mov	r0, r5
 800b18c:	b003      	add	sp, #12
 800b18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b192:	2e00      	cmp	r6, #0
 800b194:	d0d8      	beq.n	800b148 <setvbuf+0x9c>
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	b913      	cbnz	r3, 800b1a0 <setvbuf+0xf4>
 800b19a:	4638      	mov	r0, r7
 800b19c:	f7ff ff3e 	bl	800b01c <__sinit>
 800b1a0:	f1b8 0f01 	cmp.w	r8, #1
 800b1a4:	bf08      	it	eq
 800b1a6:	89a3      	ldrheq	r3, [r4, #12]
 800b1a8:	6026      	str	r6, [r4, #0]
 800b1aa:	bf04      	itt	eq
 800b1ac:	f043 0301 	orreq.w	r3, r3, #1
 800b1b0:	81a3      	strheq	r3, [r4, #12]
 800b1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b6:	f013 0208 	ands.w	r2, r3, #8
 800b1ba:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b1be:	d01e      	beq.n	800b1fe <setvbuf+0x152>
 800b1c0:	07d9      	lsls	r1, r3, #31
 800b1c2:	bf41      	itttt	mi
 800b1c4:	2200      	movmi	r2, #0
 800b1c6:	426d      	negmi	r5, r5
 800b1c8:	60a2      	strmi	r2, [r4, #8]
 800b1ca:	61a5      	strmi	r5, [r4, #24]
 800b1cc:	bf58      	it	pl
 800b1ce:	60a5      	strpl	r5, [r4, #8]
 800b1d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1d2:	07d2      	lsls	r2, r2, #31
 800b1d4:	d401      	bmi.n	800b1da <setvbuf+0x12e>
 800b1d6:	059b      	lsls	r3, r3, #22
 800b1d8:	d513      	bpl.n	800b202 <setvbuf+0x156>
 800b1da:	2500      	movs	r5, #0
 800b1dc:	e7d5      	b.n	800b18a <setvbuf+0xde>
 800b1de:	4648      	mov	r0, r9
 800b1e0:	f7ff fdd2 	bl	800ad88 <malloc>
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d0b8      	beq.n	800b15c <setvbuf+0xb0>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	464d      	mov	r5, r9
 800b1f4:	e7cf      	b.n	800b196 <setvbuf+0xea>
 800b1f6:	2500      	movs	r5, #0
 800b1f8:	e7b2      	b.n	800b160 <setvbuf+0xb4>
 800b1fa:	46a9      	mov	r9, r5
 800b1fc:	e7f5      	b.n	800b1ea <setvbuf+0x13e>
 800b1fe:	60a2      	str	r2, [r4, #8]
 800b200:	e7e6      	b.n	800b1d0 <setvbuf+0x124>
 800b202:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b204:	f000 f910 	bl	800b428 <__retarget_lock_release_recursive>
 800b208:	e7e7      	b.n	800b1da <setvbuf+0x12e>
 800b20a:	f04f 35ff 	mov.w	r5, #4294967295
 800b20e:	e7bc      	b.n	800b18a <setvbuf+0xde>
 800b210:	20000028 	.word	0x20000028

0800b214 <__sread>:
 800b214:	b510      	push	{r4, lr}
 800b216:	460c      	mov	r4, r1
 800b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21c:	f000 f8a4 	bl	800b368 <_read_r>
 800b220:	2800      	cmp	r0, #0
 800b222:	bfab      	itete	ge
 800b224:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b226:	89a3      	ldrhlt	r3, [r4, #12]
 800b228:	181b      	addge	r3, r3, r0
 800b22a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b22e:	bfac      	ite	ge
 800b230:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b232:	81a3      	strhlt	r3, [r4, #12]
 800b234:	bd10      	pop	{r4, pc}

0800b236 <__swrite>:
 800b236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23a:	461f      	mov	r7, r3
 800b23c:	898b      	ldrh	r3, [r1, #12]
 800b23e:	05db      	lsls	r3, r3, #23
 800b240:	4605      	mov	r5, r0
 800b242:	460c      	mov	r4, r1
 800b244:	4616      	mov	r6, r2
 800b246:	d505      	bpl.n	800b254 <__swrite+0x1e>
 800b248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24c:	2302      	movs	r3, #2
 800b24e:	2200      	movs	r2, #0
 800b250:	f000 f878 	bl	800b344 <_lseek_r>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b25a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b25e:	81a3      	strh	r3, [r4, #12]
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	4628      	mov	r0, r5
 800b266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b26a:	f000 b89f 	b.w	800b3ac <_write_r>

0800b26e <__sseek>:
 800b26e:	b510      	push	{r4, lr}
 800b270:	460c      	mov	r4, r1
 800b272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b276:	f000 f865 	bl	800b344 <_lseek_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	bf15      	itete	ne
 800b280:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b282:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b286:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b28a:	81a3      	strheq	r3, [r4, #12]
 800b28c:	bf18      	it	ne
 800b28e:	81a3      	strhne	r3, [r4, #12]
 800b290:	bd10      	pop	{r4, pc}

0800b292 <__sclose>:
 800b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b296:	f000 b845 	b.w	800b324 <_close_r>

0800b29a <_vsniprintf_r>:
 800b29a:	b530      	push	{r4, r5, lr}
 800b29c:	4614      	mov	r4, r2
 800b29e:	2c00      	cmp	r4, #0
 800b2a0:	b09b      	sub	sp, #108	@ 0x6c
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	da05      	bge.n	800b2b4 <_vsniprintf_r+0x1a>
 800b2a8:	238b      	movs	r3, #139	@ 0x8b
 800b2aa:	6003      	str	r3, [r0, #0]
 800b2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b0:	b01b      	add	sp, #108	@ 0x6c
 800b2b2:	bd30      	pop	{r4, r5, pc}
 800b2b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2bc:	f04f 0300 	mov.w	r3, #0
 800b2c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b2c2:	bf14      	ite	ne
 800b2c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2c8:	4623      	moveq	r3, r4
 800b2ca:	9302      	str	r3, [sp, #8]
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2d2:	9100      	str	r1, [sp, #0]
 800b2d4:	9104      	str	r1, [sp, #16]
 800b2d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2da:	4669      	mov	r1, sp
 800b2dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b2de:	f000 f959 	bl	800b594 <_svfiprintf_r>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	bfbc      	itt	lt
 800b2e6:	238b      	movlt	r3, #139	@ 0x8b
 800b2e8:	602b      	strlt	r3, [r5, #0]
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d0e0      	beq.n	800b2b0 <_vsniprintf_r+0x16>
 800b2ee:	9b00      	ldr	r3, [sp, #0]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e7dc      	b.n	800b2b0 <_vsniprintf_r+0x16>
	...

0800b2f8 <vsniprintf>:
 800b2f8:	b507      	push	{r0, r1, r2, lr}
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	460a      	mov	r2, r1
 800b300:	4601      	mov	r1, r0
 800b302:	4803      	ldr	r0, [pc, #12]	@ (800b310 <vsniprintf+0x18>)
 800b304:	6800      	ldr	r0, [r0, #0]
 800b306:	f7ff ffc8 	bl	800b29a <_vsniprintf_r>
 800b30a:	b003      	add	sp, #12
 800b30c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b310:	20000028 	.word	0x20000028

0800b314 <memset>:
 800b314:	4402      	add	r2, r0
 800b316:	4603      	mov	r3, r0
 800b318:	4293      	cmp	r3, r2
 800b31a:	d100      	bne.n	800b31e <memset+0xa>
 800b31c:	4770      	bx	lr
 800b31e:	f803 1b01 	strb.w	r1, [r3], #1
 800b322:	e7f9      	b.n	800b318 <memset+0x4>

0800b324 <_close_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d06      	ldr	r5, [pc, #24]	@ (800b340 <_close_r+0x1c>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	602b      	str	r3, [r5, #0]
 800b330:	f7f7 fc24 	bl	8002b7c <_close>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d102      	bne.n	800b33e <_close_r+0x1a>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	b103      	cbz	r3, 800b33e <_close_r+0x1a>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	20000d80 	.word	0x20000d80

0800b344 <_lseek_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d07      	ldr	r5, [pc, #28]	@ (800b364 <_lseek_r+0x20>)
 800b348:	4604      	mov	r4, r0
 800b34a:	4608      	mov	r0, r1
 800b34c:	4611      	mov	r1, r2
 800b34e:	2200      	movs	r2, #0
 800b350:	602a      	str	r2, [r5, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	f7f7 fc39 	bl	8002bca <_lseek>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_lseek_r+0x1e>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_lseek_r+0x1e>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20000d80 	.word	0x20000d80

0800b368 <_read_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d07      	ldr	r5, [pc, #28]	@ (800b388 <_read_r+0x20>)
 800b36c:	4604      	mov	r4, r0
 800b36e:	4608      	mov	r0, r1
 800b370:	4611      	mov	r1, r2
 800b372:	2200      	movs	r2, #0
 800b374:	602a      	str	r2, [r5, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	f7f7 fbe3 	bl	8002b42 <_read>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d102      	bne.n	800b386 <_read_r+0x1e>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	b103      	cbz	r3, 800b386 <_read_r+0x1e>
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	bd38      	pop	{r3, r4, r5, pc}
 800b388:	20000d80 	.word	0x20000d80

0800b38c <_sbrk_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4d06      	ldr	r5, [pc, #24]	@ (800b3a8 <_sbrk_r+0x1c>)
 800b390:	2300      	movs	r3, #0
 800b392:	4604      	mov	r4, r0
 800b394:	4608      	mov	r0, r1
 800b396:	602b      	str	r3, [r5, #0]
 800b398:	f7f7 fc24 	bl	8002be4 <_sbrk>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_sbrk_r+0x1a>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_sbrk_r+0x1a>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	20000d80 	.word	0x20000d80

0800b3ac <_write_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	@ (800b3cc <_write_r+0x20>)
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	4608      	mov	r0, r1
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f7f6 f820 	bl	8001400 <_write>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_write_r+0x1e>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_write_r+0x1e>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20000d80 	.word	0x20000d80

0800b3d0 <__errno>:
 800b3d0:	4b01      	ldr	r3, [pc, #4]	@ (800b3d8 <__errno+0x8>)
 800b3d2:	6818      	ldr	r0, [r3, #0]
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	20000028 	.word	0x20000028

0800b3dc <__libc_init_array>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	4d0d      	ldr	r5, [pc, #52]	@ (800b414 <__libc_init_array+0x38>)
 800b3e0:	4c0d      	ldr	r4, [pc, #52]	@ (800b418 <__libc_init_array+0x3c>)
 800b3e2:	1b64      	subs	r4, r4, r5
 800b3e4:	10a4      	asrs	r4, r4, #2
 800b3e6:	2600      	movs	r6, #0
 800b3e8:	42a6      	cmp	r6, r4
 800b3ea:	d109      	bne.n	800b400 <__libc_init_array+0x24>
 800b3ec:	4d0b      	ldr	r5, [pc, #44]	@ (800b41c <__libc_init_array+0x40>)
 800b3ee:	4c0c      	ldr	r4, [pc, #48]	@ (800b420 <__libc_init_array+0x44>)
 800b3f0:	f000 feae 	bl	800c150 <_init>
 800b3f4:	1b64      	subs	r4, r4, r5
 800b3f6:	10a4      	asrs	r4, r4, #2
 800b3f8:	2600      	movs	r6, #0
 800b3fa:	42a6      	cmp	r6, r4
 800b3fc:	d105      	bne.n	800b40a <__libc_init_array+0x2e>
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	f855 3b04 	ldr.w	r3, [r5], #4
 800b404:	4798      	blx	r3
 800b406:	3601      	adds	r6, #1
 800b408:	e7ee      	b.n	800b3e8 <__libc_init_array+0xc>
 800b40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40e:	4798      	blx	r3
 800b410:	3601      	adds	r6, #1
 800b412:	e7f2      	b.n	800b3fa <__libc_init_array+0x1e>
 800b414:	0800c78c 	.word	0x0800c78c
 800b418:	0800c78c 	.word	0x0800c78c
 800b41c:	0800c78c 	.word	0x0800c78c
 800b420:	0800c790 	.word	0x0800c790

0800b424 <__retarget_lock_init_recursive>:
 800b424:	4770      	bx	lr

0800b426 <__retarget_lock_acquire_recursive>:
 800b426:	4770      	bx	lr

0800b428 <__retarget_lock_release_recursive>:
 800b428:	4770      	bx	lr

0800b42a <memcpy>:
 800b42a:	440a      	add	r2, r1
 800b42c:	4291      	cmp	r1, r2
 800b42e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b432:	d100      	bne.n	800b436 <memcpy+0xc>
 800b434:	4770      	bx	lr
 800b436:	b510      	push	{r4, lr}
 800b438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b440:	4291      	cmp	r1, r2
 800b442:	d1f9      	bne.n	800b438 <memcpy+0xe>
 800b444:	bd10      	pop	{r4, pc}
	...

0800b448 <_free_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4605      	mov	r5, r0
 800b44c:	2900      	cmp	r1, #0
 800b44e:	d041      	beq.n	800b4d4 <_free_r+0x8c>
 800b450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b454:	1f0c      	subs	r4, r1, #4
 800b456:	2b00      	cmp	r3, #0
 800b458:	bfb8      	it	lt
 800b45a:	18e4      	addlt	r4, r4, r3
 800b45c:	f7ff fd46 	bl	800aeec <__malloc_lock>
 800b460:	4a1d      	ldr	r2, [pc, #116]	@ (800b4d8 <_free_r+0x90>)
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	b933      	cbnz	r3, 800b474 <_free_r+0x2c>
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	6014      	str	r4, [r2, #0]
 800b46a:	4628      	mov	r0, r5
 800b46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b470:	f7ff bd42 	b.w	800aef8 <__malloc_unlock>
 800b474:	42a3      	cmp	r3, r4
 800b476:	d908      	bls.n	800b48a <_free_r+0x42>
 800b478:	6820      	ldr	r0, [r4, #0]
 800b47a:	1821      	adds	r1, r4, r0
 800b47c:	428b      	cmp	r3, r1
 800b47e:	bf01      	itttt	eq
 800b480:	6819      	ldreq	r1, [r3, #0]
 800b482:	685b      	ldreq	r3, [r3, #4]
 800b484:	1809      	addeq	r1, r1, r0
 800b486:	6021      	streq	r1, [r4, #0]
 800b488:	e7ed      	b.n	800b466 <_free_r+0x1e>
 800b48a:	461a      	mov	r2, r3
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	b10b      	cbz	r3, 800b494 <_free_r+0x4c>
 800b490:	42a3      	cmp	r3, r4
 800b492:	d9fa      	bls.n	800b48a <_free_r+0x42>
 800b494:	6811      	ldr	r1, [r2, #0]
 800b496:	1850      	adds	r0, r2, r1
 800b498:	42a0      	cmp	r0, r4
 800b49a:	d10b      	bne.n	800b4b4 <_free_r+0x6c>
 800b49c:	6820      	ldr	r0, [r4, #0]
 800b49e:	4401      	add	r1, r0
 800b4a0:	1850      	adds	r0, r2, r1
 800b4a2:	4283      	cmp	r3, r0
 800b4a4:	6011      	str	r1, [r2, #0]
 800b4a6:	d1e0      	bne.n	800b46a <_free_r+0x22>
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	6053      	str	r3, [r2, #4]
 800b4ae:	4408      	add	r0, r1
 800b4b0:	6010      	str	r0, [r2, #0]
 800b4b2:	e7da      	b.n	800b46a <_free_r+0x22>
 800b4b4:	d902      	bls.n	800b4bc <_free_r+0x74>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	e7d6      	b.n	800b46a <_free_r+0x22>
 800b4bc:	6820      	ldr	r0, [r4, #0]
 800b4be:	1821      	adds	r1, r4, r0
 800b4c0:	428b      	cmp	r3, r1
 800b4c2:	bf04      	itt	eq
 800b4c4:	6819      	ldreq	r1, [r3, #0]
 800b4c6:	685b      	ldreq	r3, [r3, #4]
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	bf04      	itt	eq
 800b4cc:	1809      	addeq	r1, r1, r0
 800b4ce:	6021      	streq	r1, [r4, #0]
 800b4d0:	6054      	str	r4, [r2, #4]
 800b4d2:	e7ca      	b.n	800b46a <_free_r+0x22>
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000c40 	.word	0x20000c40

0800b4dc <__ssputs_r>:
 800b4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	688e      	ldr	r6, [r1, #8]
 800b4e2:	461f      	mov	r7, r3
 800b4e4:	42be      	cmp	r6, r7
 800b4e6:	680b      	ldr	r3, [r1, #0]
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	4690      	mov	r8, r2
 800b4ee:	d82d      	bhi.n	800b54c <__ssputs_r+0x70>
 800b4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4f8:	d026      	beq.n	800b548 <__ssputs_r+0x6c>
 800b4fa:	6965      	ldr	r5, [r4, #20]
 800b4fc:	6909      	ldr	r1, [r1, #16]
 800b4fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b502:	eba3 0901 	sub.w	r9, r3, r1
 800b506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b50a:	1c7b      	adds	r3, r7, #1
 800b50c:	444b      	add	r3, r9
 800b50e:	106d      	asrs	r5, r5, #1
 800b510:	429d      	cmp	r5, r3
 800b512:	bf38      	it	cc
 800b514:	461d      	movcc	r5, r3
 800b516:	0553      	lsls	r3, r2, #21
 800b518:	d527      	bpl.n	800b56a <__ssputs_r+0x8e>
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7ff fc66 	bl	800adec <_malloc_r>
 800b520:	4606      	mov	r6, r0
 800b522:	b360      	cbz	r0, 800b57e <__ssputs_r+0xa2>
 800b524:	6921      	ldr	r1, [r4, #16]
 800b526:	464a      	mov	r2, r9
 800b528:	f7ff ff7f 	bl	800b42a <memcpy>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b536:	81a3      	strh	r3, [r4, #12]
 800b538:	6126      	str	r6, [r4, #16]
 800b53a:	6165      	str	r5, [r4, #20]
 800b53c:	444e      	add	r6, r9
 800b53e:	eba5 0509 	sub.w	r5, r5, r9
 800b542:	6026      	str	r6, [r4, #0]
 800b544:	60a5      	str	r5, [r4, #8]
 800b546:	463e      	mov	r6, r7
 800b548:	42be      	cmp	r6, r7
 800b54a:	d900      	bls.n	800b54e <__ssputs_r+0x72>
 800b54c:	463e      	mov	r6, r7
 800b54e:	6820      	ldr	r0, [r4, #0]
 800b550:	4632      	mov	r2, r6
 800b552:	4641      	mov	r1, r8
 800b554:	f000 fd8a 	bl	800c06c <memmove>
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	1b9b      	subs	r3, r3, r6
 800b55c:	60a3      	str	r3, [r4, #8]
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	4433      	add	r3, r6
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	2000      	movs	r0, #0
 800b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56a:	462a      	mov	r2, r5
 800b56c:	f000 fdba 	bl	800c0e4 <_realloc_r>
 800b570:	4606      	mov	r6, r0
 800b572:	2800      	cmp	r0, #0
 800b574:	d1e0      	bne.n	800b538 <__ssputs_r+0x5c>
 800b576:	6921      	ldr	r1, [r4, #16]
 800b578:	4650      	mov	r0, sl
 800b57a:	f7ff ff65 	bl	800b448 <_free_r>
 800b57e:	230c      	movs	r3, #12
 800b580:	f8ca 3000 	str.w	r3, [sl]
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b58a:	81a3      	strh	r3, [r4, #12]
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295
 800b590:	e7e9      	b.n	800b566 <__ssputs_r+0x8a>
	...

0800b594 <_svfiprintf_r>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	4698      	mov	r8, r3
 800b59a:	898b      	ldrh	r3, [r1, #12]
 800b59c:	061b      	lsls	r3, r3, #24
 800b59e:	b09d      	sub	sp, #116	@ 0x74
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	4614      	mov	r4, r2
 800b5a6:	d510      	bpl.n	800b5ca <_svfiprintf_r+0x36>
 800b5a8:	690b      	ldr	r3, [r1, #16]
 800b5aa:	b973      	cbnz	r3, 800b5ca <_svfiprintf_r+0x36>
 800b5ac:	2140      	movs	r1, #64	@ 0x40
 800b5ae:	f7ff fc1d 	bl	800adec <_malloc_r>
 800b5b2:	6028      	str	r0, [r5, #0]
 800b5b4:	6128      	str	r0, [r5, #16]
 800b5b6:	b930      	cbnz	r0, 800b5c6 <_svfiprintf_r+0x32>
 800b5b8:	230c      	movs	r3, #12
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	b01d      	add	sp, #116	@ 0x74
 800b5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c6:	2340      	movs	r3, #64	@ 0x40
 800b5c8:	616b      	str	r3, [r5, #20]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ce:	2320      	movs	r3, #32
 800b5d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5d8:	2330      	movs	r3, #48	@ 0x30
 800b5da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b778 <_svfiprintf_r+0x1e4>
 800b5de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5e2:	f04f 0901 	mov.w	r9, #1
 800b5e6:	4623      	mov	r3, r4
 800b5e8:	469a      	mov	sl, r3
 800b5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ee:	b10a      	cbz	r2, 800b5f4 <_svfiprintf_r+0x60>
 800b5f0:	2a25      	cmp	r2, #37	@ 0x25
 800b5f2:	d1f9      	bne.n	800b5e8 <_svfiprintf_r+0x54>
 800b5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5f8:	d00b      	beq.n	800b612 <_svfiprintf_r+0x7e>
 800b5fa:	465b      	mov	r3, fp
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	4638      	mov	r0, r7
 800b602:	f7ff ff6b 	bl	800b4dc <__ssputs_r>
 800b606:	3001      	adds	r0, #1
 800b608:	f000 80a7 	beq.w	800b75a <_svfiprintf_r+0x1c6>
 800b60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b60e:	445a      	add	r2, fp
 800b610:	9209      	str	r2, [sp, #36]	@ 0x24
 800b612:	f89a 3000 	ldrb.w	r3, [sl]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 809f 	beq.w	800b75a <_svfiprintf_r+0x1c6>
 800b61c:	2300      	movs	r3, #0
 800b61e:	f04f 32ff 	mov.w	r2, #4294967295
 800b622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b626:	f10a 0a01 	add.w	sl, sl, #1
 800b62a:	9304      	str	r3, [sp, #16]
 800b62c:	9307      	str	r3, [sp, #28]
 800b62e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b632:	931a      	str	r3, [sp, #104]	@ 0x68
 800b634:	4654      	mov	r4, sl
 800b636:	2205      	movs	r2, #5
 800b638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63c:	484e      	ldr	r0, [pc, #312]	@ (800b778 <_svfiprintf_r+0x1e4>)
 800b63e:	f7f4 fdc7 	bl	80001d0 <memchr>
 800b642:	9a04      	ldr	r2, [sp, #16]
 800b644:	b9d8      	cbnz	r0, 800b67e <_svfiprintf_r+0xea>
 800b646:	06d0      	lsls	r0, r2, #27
 800b648:	bf44      	itt	mi
 800b64a:	2320      	movmi	r3, #32
 800b64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b650:	0711      	lsls	r1, r2, #28
 800b652:	bf44      	itt	mi
 800b654:	232b      	movmi	r3, #43	@ 0x2b
 800b656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b65a:	f89a 3000 	ldrb.w	r3, [sl]
 800b65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b660:	d015      	beq.n	800b68e <_svfiprintf_r+0xfa>
 800b662:	9a07      	ldr	r2, [sp, #28]
 800b664:	4654      	mov	r4, sl
 800b666:	2000      	movs	r0, #0
 800b668:	f04f 0c0a 	mov.w	ip, #10
 800b66c:	4621      	mov	r1, r4
 800b66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b672:	3b30      	subs	r3, #48	@ 0x30
 800b674:	2b09      	cmp	r3, #9
 800b676:	d94b      	bls.n	800b710 <_svfiprintf_r+0x17c>
 800b678:	b1b0      	cbz	r0, 800b6a8 <_svfiprintf_r+0x114>
 800b67a:	9207      	str	r2, [sp, #28]
 800b67c:	e014      	b.n	800b6a8 <_svfiprintf_r+0x114>
 800b67e:	eba0 0308 	sub.w	r3, r0, r8
 800b682:	fa09 f303 	lsl.w	r3, r9, r3
 800b686:	4313      	orrs	r3, r2
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	46a2      	mov	sl, r4
 800b68c:	e7d2      	b.n	800b634 <_svfiprintf_r+0xa0>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	1d19      	adds	r1, r3, #4
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	9103      	str	r1, [sp, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfbb      	ittet	lt
 800b69a:	425b      	neglt	r3, r3
 800b69c:	f042 0202 	orrlt.w	r2, r2, #2
 800b6a0:	9307      	strge	r3, [sp, #28]
 800b6a2:	9307      	strlt	r3, [sp, #28]
 800b6a4:	bfb8      	it	lt
 800b6a6:	9204      	strlt	r2, [sp, #16]
 800b6a8:	7823      	ldrb	r3, [r4, #0]
 800b6aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6ac:	d10a      	bne.n	800b6c4 <_svfiprintf_r+0x130>
 800b6ae:	7863      	ldrb	r3, [r4, #1]
 800b6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6b2:	d132      	bne.n	800b71a <_svfiprintf_r+0x186>
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	1d1a      	adds	r2, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	9203      	str	r2, [sp, #12]
 800b6bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6c0:	3402      	adds	r4, #2
 800b6c2:	9305      	str	r3, [sp, #20]
 800b6c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b788 <_svfiprintf_r+0x1f4>
 800b6c8:	7821      	ldrb	r1, [r4, #0]
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	4650      	mov	r0, sl
 800b6ce:	f7f4 fd7f 	bl	80001d0 <memchr>
 800b6d2:	b138      	cbz	r0, 800b6e4 <_svfiprintf_r+0x150>
 800b6d4:	9b04      	ldr	r3, [sp, #16]
 800b6d6:	eba0 000a 	sub.w	r0, r0, sl
 800b6da:	2240      	movs	r2, #64	@ 0x40
 800b6dc:	4082      	lsls	r2, r0
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	3401      	adds	r4, #1
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e8:	4824      	ldr	r0, [pc, #144]	@ (800b77c <_svfiprintf_r+0x1e8>)
 800b6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6ee:	2206      	movs	r2, #6
 800b6f0:	f7f4 fd6e 	bl	80001d0 <memchr>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d036      	beq.n	800b766 <_svfiprintf_r+0x1d2>
 800b6f8:	4b21      	ldr	r3, [pc, #132]	@ (800b780 <_svfiprintf_r+0x1ec>)
 800b6fa:	bb1b      	cbnz	r3, 800b744 <_svfiprintf_r+0x1b0>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	3307      	adds	r3, #7
 800b700:	f023 0307 	bic.w	r3, r3, #7
 800b704:	3308      	adds	r3, #8
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b70a:	4433      	add	r3, r6
 800b70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b70e:	e76a      	b.n	800b5e6 <_svfiprintf_r+0x52>
 800b710:	fb0c 3202 	mla	r2, ip, r2, r3
 800b714:	460c      	mov	r4, r1
 800b716:	2001      	movs	r0, #1
 800b718:	e7a8      	b.n	800b66c <_svfiprintf_r+0xd8>
 800b71a:	2300      	movs	r3, #0
 800b71c:	3401      	adds	r4, #1
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	4619      	mov	r1, r3
 800b722:	f04f 0c0a 	mov.w	ip, #10
 800b726:	4620      	mov	r0, r4
 800b728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b72c:	3a30      	subs	r2, #48	@ 0x30
 800b72e:	2a09      	cmp	r2, #9
 800b730:	d903      	bls.n	800b73a <_svfiprintf_r+0x1a6>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0c6      	beq.n	800b6c4 <_svfiprintf_r+0x130>
 800b736:	9105      	str	r1, [sp, #20]
 800b738:	e7c4      	b.n	800b6c4 <_svfiprintf_r+0x130>
 800b73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b73e:	4604      	mov	r4, r0
 800b740:	2301      	movs	r3, #1
 800b742:	e7f0      	b.n	800b726 <_svfiprintf_r+0x192>
 800b744:	ab03      	add	r3, sp, #12
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	462a      	mov	r2, r5
 800b74a:	4b0e      	ldr	r3, [pc, #56]	@ (800b784 <_svfiprintf_r+0x1f0>)
 800b74c:	a904      	add	r1, sp, #16
 800b74e:	4638      	mov	r0, r7
 800b750:	f3af 8000 	nop.w
 800b754:	1c42      	adds	r2, r0, #1
 800b756:	4606      	mov	r6, r0
 800b758:	d1d6      	bne.n	800b708 <_svfiprintf_r+0x174>
 800b75a:	89ab      	ldrh	r3, [r5, #12]
 800b75c:	065b      	lsls	r3, r3, #25
 800b75e:	f53f af2d 	bmi.w	800b5bc <_svfiprintf_r+0x28>
 800b762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b764:	e72c      	b.n	800b5c0 <_svfiprintf_r+0x2c>
 800b766:	ab03      	add	r3, sp, #12
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	462a      	mov	r2, r5
 800b76c:	4b05      	ldr	r3, [pc, #20]	@ (800b784 <_svfiprintf_r+0x1f0>)
 800b76e:	a904      	add	r1, sp, #16
 800b770:	4638      	mov	r0, r7
 800b772:	f000 f9bb 	bl	800baec <_printf_i>
 800b776:	e7ed      	b.n	800b754 <_svfiprintf_r+0x1c0>
 800b778:	0800c750 	.word	0x0800c750
 800b77c:	0800c75a 	.word	0x0800c75a
 800b780:	00000000 	.word	0x00000000
 800b784:	0800b4dd 	.word	0x0800b4dd
 800b788:	0800c756 	.word	0x0800c756

0800b78c <__sfputc_r>:
 800b78c:	6893      	ldr	r3, [r2, #8]
 800b78e:	3b01      	subs	r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	b410      	push	{r4}
 800b794:	6093      	str	r3, [r2, #8]
 800b796:	da08      	bge.n	800b7aa <__sfputc_r+0x1e>
 800b798:	6994      	ldr	r4, [r2, #24]
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	db01      	blt.n	800b7a2 <__sfputc_r+0x16>
 800b79e:	290a      	cmp	r1, #10
 800b7a0:	d103      	bne.n	800b7aa <__sfputc_r+0x1e>
 800b7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a6:	f000 bbcd 	b.w	800bf44 <__swbuf_r>
 800b7aa:	6813      	ldr	r3, [r2, #0]
 800b7ac:	1c58      	adds	r0, r3, #1
 800b7ae:	6010      	str	r0, [r2, #0]
 800b7b0:	7019      	strb	r1, [r3, #0]
 800b7b2:	4608      	mov	r0, r1
 800b7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <__sfputs_r>:
 800b7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7bc:	4606      	mov	r6, r0
 800b7be:	460f      	mov	r7, r1
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	18d5      	adds	r5, r2, r3
 800b7c4:	42ac      	cmp	r4, r5
 800b7c6:	d101      	bne.n	800b7cc <__sfputs_r+0x12>
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	e007      	b.n	800b7dc <__sfputs_r+0x22>
 800b7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d0:	463a      	mov	r2, r7
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7ff ffda 	bl	800b78c <__sfputc_r>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d1f3      	bne.n	800b7c4 <__sfputs_r+0xa>
 800b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7e0 <_vfiprintf_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	b09d      	sub	sp, #116	@ 0x74
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	4698      	mov	r8, r3
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	b118      	cbz	r0, 800b7f8 <_vfiprintf_r+0x18>
 800b7f0:	6a03      	ldr	r3, [r0, #32]
 800b7f2:	b90b      	cbnz	r3, 800b7f8 <_vfiprintf_r+0x18>
 800b7f4:	f7ff fc12 	bl	800b01c <__sinit>
 800b7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7fa:	07d9      	lsls	r1, r3, #31
 800b7fc:	d405      	bmi.n	800b80a <_vfiprintf_r+0x2a>
 800b7fe:	89ab      	ldrh	r3, [r5, #12]
 800b800:	059a      	lsls	r2, r3, #22
 800b802:	d402      	bmi.n	800b80a <_vfiprintf_r+0x2a>
 800b804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b806:	f7ff fe0e 	bl	800b426 <__retarget_lock_acquire_recursive>
 800b80a:	89ab      	ldrh	r3, [r5, #12]
 800b80c:	071b      	lsls	r3, r3, #28
 800b80e:	d501      	bpl.n	800b814 <_vfiprintf_r+0x34>
 800b810:	692b      	ldr	r3, [r5, #16]
 800b812:	b99b      	cbnz	r3, 800b83c <_vfiprintf_r+0x5c>
 800b814:	4629      	mov	r1, r5
 800b816:	4630      	mov	r0, r6
 800b818:	f000 fbd2 	bl	800bfc0 <__swsetup_r>
 800b81c:	b170      	cbz	r0, 800b83c <_vfiprintf_r+0x5c>
 800b81e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b820:	07dc      	lsls	r4, r3, #31
 800b822:	d504      	bpl.n	800b82e <_vfiprintf_r+0x4e>
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	b01d      	add	sp, #116	@ 0x74
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	89ab      	ldrh	r3, [r5, #12]
 800b830:	0598      	lsls	r0, r3, #22
 800b832:	d4f7      	bmi.n	800b824 <_vfiprintf_r+0x44>
 800b834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b836:	f7ff fdf7 	bl	800b428 <__retarget_lock_release_recursive>
 800b83a:	e7f3      	b.n	800b824 <_vfiprintf_r+0x44>
 800b83c:	2300      	movs	r3, #0
 800b83e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b840:	2320      	movs	r3, #32
 800b842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b846:	f8cd 800c 	str.w	r8, [sp, #12]
 800b84a:	2330      	movs	r3, #48	@ 0x30
 800b84c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9fc <_vfiprintf_r+0x21c>
 800b850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b854:	f04f 0901 	mov.w	r9, #1
 800b858:	4623      	mov	r3, r4
 800b85a:	469a      	mov	sl, r3
 800b85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b860:	b10a      	cbz	r2, 800b866 <_vfiprintf_r+0x86>
 800b862:	2a25      	cmp	r2, #37	@ 0x25
 800b864:	d1f9      	bne.n	800b85a <_vfiprintf_r+0x7a>
 800b866:	ebba 0b04 	subs.w	fp, sl, r4
 800b86a:	d00b      	beq.n	800b884 <_vfiprintf_r+0xa4>
 800b86c:	465b      	mov	r3, fp
 800b86e:	4622      	mov	r2, r4
 800b870:	4629      	mov	r1, r5
 800b872:	4630      	mov	r0, r6
 800b874:	f7ff ffa1 	bl	800b7ba <__sfputs_r>
 800b878:	3001      	adds	r0, #1
 800b87a:	f000 80a7 	beq.w	800b9cc <_vfiprintf_r+0x1ec>
 800b87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b880:	445a      	add	r2, fp
 800b882:	9209      	str	r2, [sp, #36]	@ 0x24
 800b884:	f89a 3000 	ldrb.w	r3, [sl]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 809f 	beq.w	800b9cc <_vfiprintf_r+0x1ec>
 800b88e:	2300      	movs	r3, #0
 800b890:	f04f 32ff 	mov.w	r2, #4294967295
 800b894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b898:	f10a 0a01 	add.w	sl, sl, #1
 800b89c:	9304      	str	r3, [sp, #16]
 800b89e:	9307      	str	r3, [sp, #28]
 800b8a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8a6:	4654      	mov	r4, sl
 800b8a8:	2205      	movs	r2, #5
 800b8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ae:	4853      	ldr	r0, [pc, #332]	@ (800b9fc <_vfiprintf_r+0x21c>)
 800b8b0:	f7f4 fc8e 	bl	80001d0 <memchr>
 800b8b4:	9a04      	ldr	r2, [sp, #16]
 800b8b6:	b9d8      	cbnz	r0, 800b8f0 <_vfiprintf_r+0x110>
 800b8b8:	06d1      	lsls	r1, r2, #27
 800b8ba:	bf44      	itt	mi
 800b8bc:	2320      	movmi	r3, #32
 800b8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c2:	0713      	lsls	r3, r2, #28
 800b8c4:	bf44      	itt	mi
 800b8c6:	232b      	movmi	r3, #43	@ 0x2b
 800b8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d2:	d015      	beq.n	800b900 <_vfiprintf_r+0x120>
 800b8d4:	9a07      	ldr	r2, [sp, #28]
 800b8d6:	4654      	mov	r4, sl
 800b8d8:	2000      	movs	r0, #0
 800b8da:	f04f 0c0a 	mov.w	ip, #10
 800b8de:	4621      	mov	r1, r4
 800b8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8e4:	3b30      	subs	r3, #48	@ 0x30
 800b8e6:	2b09      	cmp	r3, #9
 800b8e8:	d94b      	bls.n	800b982 <_vfiprintf_r+0x1a2>
 800b8ea:	b1b0      	cbz	r0, 800b91a <_vfiprintf_r+0x13a>
 800b8ec:	9207      	str	r2, [sp, #28]
 800b8ee:	e014      	b.n	800b91a <_vfiprintf_r+0x13a>
 800b8f0:	eba0 0308 	sub.w	r3, r0, r8
 800b8f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	46a2      	mov	sl, r4
 800b8fe:	e7d2      	b.n	800b8a6 <_vfiprintf_r+0xc6>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	1d19      	adds	r1, r3, #4
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	9103      	str	r1, [sp, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfbb      	ittet	lt
 800b90c:	425b      	neglt	r3, r3
 800b90e:	f042 0202 	orrlt.w	r2, r2, #2
 800b912:	9307      	strge	r3, [sp, #28]
 800b914:	9307      	strlt	r3, [sp, #28]
 800b916:	bfb8      	it	lt
 800b918:	9204      	strlt	r2, [sp, #16]
 800b91a:	7823      	ldrb	r3, [r4, #0]
 800b91c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b91e:	d10a      	bne.n	800b936 <_vfiprintf_r+0x156>
 800b920:	7863      	ldrb	r3, [r4, #1]
 800b922:	2b2a      	cmp	r3, #42	@ 0x2a
 800b924:	d132      	bne.n	800b98c <_vfiprintf_r+0x1ac>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	1d1a      	adds	r2, r3, #4
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	9203      	str	r2, [sp, #12]
 800b92e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b932:	3402      	adds	r4, #2
 800b934:	9305      	str	r3, [sp, #20]
 800b936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba0c <_vfiprintf_r+0x22c>
 800b93a:	7821      	ldrb	r1, [r4, #0]
 800b93c:	2203      	movs	r2, #3
 800b93e:	4650      	mov	r0, sl
 800b940:	f7f4 fc46 	bl	80001d0 <memchr>
 800b944:	b138      	cbz	r0, 800b956 <_vfiprintf_r+0x176>
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	eba0 000a 	sub.w	r0, r0, sl
 800b94c:	2240      	movs	r2, #64	@ 0x40
 800b94e:	4082      	lsls	r2, r0
 800b950:	4313      	orrs	r3, r2
 800b952:	3401      	adds	r4, #1
 800b954:	9304      	str	r3, [sp, #16]
 800b956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95a:	4829      	ldr	r0, [pc, #164]	@ (800ba00 <_vfiprintf_r+0x220>)
 800b95c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b960:	2206      	movs	r2, #6
 800b962:	f7f4 fc35 	bl	80001d0 <memchr>
 800b966:	2800      	cmp	r0, #0
 800b968:	d03f      	beq.n	800b9ea <_vfiprintf_r+0x20a>
 800b96a:	4b26      	ldr	r3, [pc, #152]	@ (800ba04 <_vfiprintf_r+0x224>)
 800b96c:	bb1b      	cbnz	r3, 800b9b6 <_vfiprintf_r+0x1d6>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	3307      	adds	r3, #7
 800b972:	f023 0307 	bic.w	r3, r3, #7
 800b976:	3308      	adds	r3, #8
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97c:	443b      	add	r3, r7
 800b97e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b980:	e76a      	b.n	800b858 <_vfiprintf_r+0x78>
 800b982:	fb0c 3202 	mla	r2, ip, r2, r3
 800b986:	460c      	mov	r4, r1
 800b988:	2001      	movs	r0, #1
 800b98a:	e7a8      	b.n	800b8de <_vfiprintf_r+0xfe>
 800b98c:	2300      	movs	r3, #0
 800b98e:	3401      	adds	r4, #1
 800b990:	9305      	str	r3, [sp, #20]
 800b992:	4619      	mov	r1, r3
 800b994:	f04f 0c0a 	mov.w	ip, #10
 800b998:	4620      	mov	r0, r4
 800b99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b99e:	3a30      	subs	r2, #48	@ 0x30
 800b9a0:	2a09      	cmp	r2, #9
 800b9a2:	d903      	bls.n	800b9ac <_vfiprintf_r+0x1cc>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0c6      	beq.n	800b936 <_vfiprintf_r+0x156>
 800b9a8:	9105      	str	r1, [sp, #20]
 800b9aa:	e7c4      	b.n	800b936 <_vfiprintf_r+0x156>
 800b9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e7f0      	b.n	800b998 <_vfiprintf_r+0x1b8>
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	4b12      	ldr	r3, [pc, #72]	@ (800ba08 <_vfiprintf_r+0x228>)
 800b9be:	a904      	add	r1, sp, #16
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f3af 8000 	nop.w
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	1c78      	adds	r0, r7, #1
 800b9ca:	d1d6      	bne.n	800b97a <_vfiprintf_r+0x19a>
 800b9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9ce:	07d9      	lsls	r1, r3, #31
 800b9d0:	d405      	bmi.n	800b9de <_vfiprintf_r+0x1fe>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	059a      	lsls	r2, r3, #22
 800b9d6:	d402      	bmi.n	800b9de <_vfiprintf_r+0x1fe>
 800b9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9da:	f7ff fd25 	bl	800b428 <__retarget_lock_release_recursive>
 800b9de:	89ab      	ldrh	r3, [r5, #12]
 800b9e0:	065b      	lsls	r3, r3, #25
 800b9e2:	f53f af1f 	bmi.w	800b824 <_vfiprintf_r+0x44>
 800b9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9e8:	e71e      	b.n	800b828 <_vfiprintf_r+0x48>
 800b9ea:	ab03      	add	r3, sp, #12
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	462a      	mov	r2, r5
 800b9f0:	4b05      	ldr	r3, [pc, #20]	@ (800ba08 <_vfiprintf_r+0x228>)
 800b9f2:	a904      	add	r1, sp, #16
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f000 f879 	bl	800baec <_printf_i>
 800b9fa:	e7e4      	b.n	800b9c6 <_vfiprintf_r+0x1e6>
 800b9fc:	0800c750 	.word	0x0800c750
 800ba00:	0800c75a 	.word	0x0800c75a
 800ba04:	00000000 	.word	0x00000000
 800ba08:	0800b7bb 	.word	0x0800b7bb
 800ba0c:	0800c756 	.word	0x0800c756

0800ba10 <_printf_common>:
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	4616      	mov	r6, r2
 800ba16:	4698      	mov	r8, r3
 800ba18:	688a      	ldr	r2, [r1, #8]
 800ba1a:	690b      	ldr	r3, [r1, #16]
 800ba1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	bfb8      	it	lt
 800ba24:	4613      	movlt	r3, r2
 800ba26:	6033      	str	r3, [r6, #0]
 800ba28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	460c      	mov	r4, r1
 800ba30:	b10a      	cbz	r2, 800ba36 <_printf_common+0x26>
 800ba32:	3301      	adds	r3, #1
 800ba34:	6033      	str	r3, [r6, #0]
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	0699      	lsls	r1, r3, #26
 800ba3a:	bf42      	ittt	mi
 800ba3c:	6833      	ldrmi	r3, [r6, #0]
 800ba3e:	3302      	addmi	r3, #2
 800ba40:	6033      	strmi	r3, [r6, #0]
 800ba42:	6825      	ldr	r5, [r4, #0]
 800ba44:	f015 0506 	ands.w	r5, r5, #6
 800ba48:	d106      	bne.n	800ba58 <_printf_common+0x48>
 800ba4a:	f104 0a19 	add.w	sl, r4, #25
 800ba4e:	68e3      	ldr	r3, [r4, #12]
 800ba50:	6832      	ldr	r2, [r6, #0]
 800ba52:	1a9b      	subs	r3, r3, r2
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	dc26      	bgt.n	800baa6 <_printf_common+0x96>
 800ba58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba5c:	6822      	ldr	r2, [r4, #0]
 800ba5e:	3b00      	subs	r3, #0
 800ba60:	bf18      	it	ne
 800ba62:	2301      	movne	r3, #1
 800ba64:	0692      	lsls	r2, r2, #26
 800ba66:	d42b      	bmi.n	800bac0 <_printf_common+0xb0>
 800ba68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba6c:	4641      	mov	r1, r8
 800ba6e:	4638      	mov	r0, r7
 800ba70:	47c8      	blx	r9
 800ba72:	3001      	adds	r0, #1
 800ba74:	d01e      	beq.n	800bab4 <_printf_common+0xa4>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	6922      	ldr	r2, [r4, #16]
 800ba7a:	f003 0306 	and.w	r3, r3, #6
 800ba7e:	2b04      	cmp	r3, #4
 800ba80:	bf02      	ittt	eq
 800ba82:	68e5      	ldreq	r5, [r4, #12]
 800ba84:	6833      	ldreq	r3, [r6, #0]
 800ba86:	1aed      	subeq	r5, r5, r3
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	bf0c      	ite	eq
 800ba8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba90:	2500      	movne	r5, #0
 800ba92:	4293      	cmp	r3, r2
 800ba94:	bfc4      	itt	gt
 800ba96:	1a9b      	subgt	r3, r3, r2
 800ba98:	18ed      	addgt	r5, r5, r3
 800ba9a:	2600      	movs	r6, #0
 800ba9c:	341a      	adds	r4, #26
 800ba9e:	42b5      	cmp	r5, r6
 800baa0:	d11a      	bne.n	800bad8 <_printf_common+0xc8>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e008      	b.n	800bab8 <_printf_common+0xa8>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4652      	mov	r2, sl
 800baaa:	4641      	mov	r1, r8
 800baac:	4638      	mov	r0, r7
 800baae:	47c8      	blx	r9
 800bab0:	3001      	adds	r0, #1
 800bab2:	d103      	bne.n	800babc <_printf_common+0xac>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babc:	3501      	adds	r5, #1
 800babe:	e7c6      	b.n	800ba4e <_printf_common+0x3e>
 800bac0:	18e1      	adds	r1, r4, r3
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	2030      	movs	r0, #48	@ 0x30
 800bac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baca:	4422      	add	r2, r4
 800bacc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bad4:	3302      	adds	r3, #2
 800bad6:	e7c7      	b.n	800ba68 <_printf_common+0x58>
 800bad8:	2301      	movs	r3, #1
 800bada:	4622      	mov	r2, r4
 800badc:	4641      	mov	r1, r8
 800bade:	4638      	mov	r0, r7
 800bae0:	47c8      	blx	r9
 800bae2:	3001      	adds	r0, #1
 800bae4:	d0e6      	beq.n	800bab4 <_printf_common+0xa4>
 800bae6:	3601      	adds	r6, #1
 800bae8:	e7d9      	b.n	800ba9e <_printf_common+0x8e>
	...

0800baec <_printf_i>:
 800baec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	7e0f      	ldrb	r7, [r1, #24]
 800baf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800baf4:	2f78      	cmp	r7, #120	@ 0x78
 800baf6:	4691      	mov	r9, r2
 800baf8:	4680      	mov	r8, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	469a      	mov	sl, r3
 800bafe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb02:	d807      	bhi.n	800bb14 <_printf_i+0x28>
 800bb04:	2f62      	cmp	r7, #98	@ 0x62
 800bb06:	d80a      	bhi.n	800bb1e <_printf_i+0x32>
 800bb08:	2f00      	cmp	r7, #0
 800bb0a:	f000 80d1 	beq.w	800bcb0 <_printf_i+0x1c4>
 800bb0e:	2f58      	cmp	r7, #88	@ 0x58
 800bb10:	f000 80b8 	beq.w	800bc84 <_printf_i+0x198>
 800bb14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb1c:	e03a      	b.n	800bb94 <_printf_i+0xa8>
 800bb1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb22:	2b15      	cmp	r3, #21
 800bb24:	d8f6      	bhi.n	800bb14 <_printf_i+0x28>
 800bb26:	a101      	add	r1, pc, #4	@ (adr r1, 800bb2c <_printf_i+0x40>)
 800bb28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb2c:	0800bb85 	.word	0x0800bb85
 800bb30:	0800bb99 	.word	0x0800bb99
 800bb34:	0800bb15 	.word	0x0800bb15
 800bb38:	0800bb15 	.word	0x0800bb15
 800bb3c:	0800bb15 	.word	0x0800bb15
 800bb40:	0800bb15 	.word	0x0800bb15
 800bb44:	0800bb99 	.word	0x0800bb99
 800bb48:	0800bb15 	.word	0x0800bb15
 800bb4c:	0800bb15 	.word	0x0800bb15
 800bb50:	0800bb15 	.word	0x0800bb15
 800bb54:	0800bb15 	.word	0x0800bb15
 800bb58:	0800bc97 	.word	0x0800bc97
 800bb5c:	0800bbc3 	.word	0x0800bbc3
 800bb60:	0800bc51 	.word	0x0800bc51
 800bb64:	0800bb15 	.word	0x0800bb15
 800bb68:	0800bb15 	.word	0x0800bb15
 800bb6c:	0800bcb9 	.word	0x0800bcb9
 800bb70:	0800bb15 	.word	0x0800bb15
 800bb74:	0800bbc3 	.word	0x0800bbc3
 800bb78:	0800bb15 	.word	0x0800bb15
 800bb7c:	0800bb15 	.word	0x0800bb15
 800bb80:	0800bc59 	.word	0x0800bc59
 800bb84:	6833      	ldr	r3, [r6, #0]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6032      	str	r2, [r6, #0]
 800bb8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb94:	2301      	movs	r3, #1
 800bb96:	e09c      	b.n	800bcd2 <_printf_i+0x1e6>
 800bb98:	6833      	ldr	r3, [r6, #0]
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	1d19      	adds	r1, r3, #4
 800bb9e:	6031      	str	r1, [r6, #0]
 800bba0:	0606      	lsls	r6, r0, #24
 800bba2:	d501      	bpl.n	800bba8 <_printf_i+0xbc>
 800bba4:	681d      	ldr	r5, [r3, #0]
 800bba6:	e003      	b.n	800bbb0 <_printf_i+0xc4>
 800bba8:	0645      	lsls	r5, r0, #25
 800bbaa:	d5fb      	bpl.n	800bba4 <_printf_i+0xb8>
 800bbac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	da03      	bge.n	800bbbc <_printf_i+0xd0>
 800bbb4:	232d      	movs	r3, #45	@ 0x2d
 800bbb6:	426d      	negs	r5, r5
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbbc:	4858      	ldr	r0, [pc, #352]	@ (800bd20 <_printf_i+0x234>)
 800bbbe:	230a      	movs	r3, #10
 800bbc0:	e011      	b.n	800bbe6 <_printf_i+0xfa>
 800bbc2:	6821      	ldr	r1, [r4, #0]
 800bbc4:	6833      	ldr	r3, [r6, #0]
 800bbc6:	0608      	lsls	r0, r1, #24
 800bbc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbcc:	d402      	bmi.n	800bbd4 <_printf_i+0xe8>
 800bbce:	0649      	lsls	r1, r1, #25
 800bbd0:	bf48      	it	mi
 800bbd2:	b2ad      	uxthmi	r5, r5
 800bbd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbd6:	4852      	ldr	r0, [pc, #328]	@ (800bd20 <_printf_i+0x234>)
 800bbd8:	6033      	str	r3, [r6, #0]
 800bbda:	bf14      	ite	ne
 800bbdc:	230a      	movne	r3, #10
 800bbde:	2308      	moveq	r3, #8
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbe6:	6866      	ldr	r6, [r4, #4]
 800bbe8:	60a6      	str	r6, [r4, #8]
 800bbea:	2e00      	cmp	r6, #0
 800bbec:	db05      	blt.n	800bbfa <_printf_i+0x10e>
 800bbee:	6821      	ldr	r1, [r4, #0]
 800bbf0:	432e      	orrs	r6, r5
 800bbf2:	f021 0104 	bic.w	r1, r1, #4
 800bbf6:	6021      	str	r1, [r4, #0]
 800bbf8:	d04b      	beq.n	800bc92 <_printf_i+0x1a6>
 800bbfa:	4616      	mov	r6, r2
 800bbfc:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc00:	fb03 5711 	mls	r7, r3, r1, r5
 800bc04:	5dc7      	ldrb	r7, [r0, r7]
 800bc06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc0a:	462f      	mov	r7, r5
 800bc0c:	42bb      	cmp	r3, r7
 800bc0e:	460d      	mov	r5, r1
 800bc10:	d9f4      	bls.n	800bbfc <_printf_i+0x110>
 800bc12:	2b08      	cmp	r3, #8
 800bc14:	d10b      	bne.n	800bc2e <_printf_i+0x142>
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	07df      	lsls	r7, r3, #31
 800bc1a:	d508      	bpl.n	800bc2e <_printf_i+0x142>
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	6861      	ldr	r1, [r4, #4]
 800bc20:	4299      	cmp	r1, r3
 800bc22:	bfde      	ittt	le
 800bc24:	2330      	movle	r3, #48	@ 0x30
 800bc26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc2e:	1b92      	subs	r2, r2, r6
 800bc30:	6122      	str	r2, [r4, #16]
 800bc32:	f8cd a000 	str.w	sl, [sp]
 800bc36:	464b      	mov	r3, r9
 800bc38:	aa03      	add	r2, sp, #12
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4640      	mov	r0, r8
 800bc3e:	f7ff fee7 	bl	800ba10 <_printf_common>
 800bc42:	3001      	adds	r0, #1
 800bc44:	d14a      	bne.n	800bcdc <_printf_i+0x1f0>
 800bc46:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4a:	b004      	add	sp, #16
 800bc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	f043 0320 	orr.w	r3, r3, #32
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	4832      	ldr	r0, [pc, #200]	@ (800bd24 <_printf_i+0x238>)
 800bc5a:	2778      	movs	r7, #120	@ 0x78
 800bc5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	6831      	ldr	r1, [r6, #0]
 800bc64:	061f      	lsls	r7, r3, #24
 800bc66:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc6a:	d402      	bmi.n	800bc72 <_printf_i+0x186>
 800bc6c:	065f      	lsls	r7, r3, #25
 800bc6e:	bf48      	it	mi
 800bc70:	b2ad      	uxthmi	r5, r5
 800bc72:	6031      	str	r1, [r6, #0]
 800bc74:	07d9      	lsls	r1, r3, #31
 800bc76:	bf44      	itt	mi
 800bc78:	f043 0320 	orrmi.w	r3, r3, #32
 800bc7c:	6023      	strmi	r3, [r4, #0]
 800bc7e:	b11d      	cbz	r5, 800bc88 <_printf_i+0x19c>
 800bc80:	2310      	movs	r3, #16
 800bc82:	e7ad      	b.n	800bbe0 <_printf_i+0xf4>
 800bc84:	4826      	ldr	r0, [pc, #152]	@ (800bd20 <_printf_i+0x234>)
 800bc86:	e7e9      	b.n	800bc5c <_printf_i+0x170>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	f023 0320 	bic.w	r3, r3, #32
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	e7f6      	b.n	800bc80 <_printf_i+0x194>
 800bc92:	4616      	mov	r6, r2
 800bc94:	e7bd      	b.n	800bc12 <_printf_i+0x126>
 800bc96:	6833      	ldr	r3, [r6, #0]
 800bc98:	6825      	ldr	r5, [r4, #0]
 800bc9a:	6961      	ldr	r1, [r4, #20]
 800bc9c:	1d18      	adds	r0, r3, #4
 800bc9e:	6030      	str	r0, [r6, #0]
 800bca0:	062e      	lsls	r6, r5, #24
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	d501      	bpl.n	800bcaa <_printf_i+0x1be>
 800bca6:	6019      	str	r1, [r3, #0]
 800bca8:	e002      	b.n	800bcb0 <_printf_i+0x1c4>
 800bcaa:	0668      	lsls	r0, r5, #25
 800bcac:	d5fb      	bpl.n	800bca6 <_printf_i+0x1ba>
 800bcae:	8019      	strh	r1, [r3, #0]
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	4616      	mov	r6, r2
 800bcb6:	e7bc      	b.n	800bc32 <_printf_i+0x146>
 800bcb8:	6833      	ldr	r3, [r6, #0]
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	6032      	str	r2, [r6, #0]
 800bcbe:	681e      	ldr	r6, [r3, #0]
 800bcc0:	6862      	ldr	r2, [r4, #4]
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7f4 fa83 	bl	80001d0 <memchr>
 800bcca:	b108      	cbz	r0, 800bcd0 <_printf_i+0x1e4>
 800bccc:	1b80      	subs	r0, r0, r6
 800bcce:	6060      	str	r0, [r4, #4]
 800bcd0:	6863      	ldr	r3, [r4, #4]
 800bcd2:	6123      	str	r3, [r4, #16]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcda:	e7aa      	b.n	800bc32 <_printf_i+0x146>
 800bcdc:	6923      	ldr	r3, [r4, #16]
 800bcde:	4632      	mov	r2, r6
 800bce0:	4649      	mov	r1, r9
 800bce2:	4640      	mov	r0, r8
 800bce4:	47d0      	blx	sl
 800bce6:	3001      	adds	r0, #1
 800bce8:	d0ad      	beq.n	800bc46 <_printf_i+0x15a>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	079b      	lsls	r3, r3, #30
 800bcee:	d413      	bmi.n	800bd18 <_printf_i+0x22c>
 800bcf0:	68e0      	ldr	r0, [r4, #12]
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	4298      	cmp	r0, r3
 800bcf6:	bfb8      	it	lt
 800bcf8:	4618      	movlt	r0, r3
 800bcfa:	e7a6      	b.n	800bc4a <_printf_i+0x15e>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	4632      	mov	r2, r6
 800bd00:	4649      	mov	r1, r9
 800bd02:	4640      	mov	r0, r8
 800bd04:	47d0      	blx	sl
 800bd06:	3001      	adds	r0, #1
 800bd08:	d09d      	beq.n	800bc46 <_printf_i+0x15a>
 800bd0a:	3501      	adds	r5, #1
 800bd0c:	68e3      	ldr	r3, [r4, #12]
 800bd0e:	9903      	ldr	r1, [sp, #12]
 800bd10:	1a5b      	subs	r3, r3, r1
 800bd12:	42ab      	cmp	r3, r5
 800bd14:	dcf2      	bgt.n	800bcfc <_printf_i+0x210>
 800bd16:	e7eb      	b.n	800bcf0 <_printf_i+0x204>
 800bd18:	2500      	movs	r5, #0
 800bd1a:	f104 0619 	add.w	r6, r4, #25
 800bd1e:	e7f5      	b.n	800bd0c <_printf_i+0x220>
 800bd20:	0800c761 	.word	0x0800c761
 800bd24:	0800c772 	.word	0x0800c772

0800bd28 <__sflush_r>:
 800bd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd30:	0716      	lsls	r6, r2, #28
 800bd32:	4605      	mov	r5, r0
 800bd34:	460c      	mov	r4, r1
 800bd36:	d454      	bmi.n	800bde2 <__sflush_r+0xba>
 800bd38:	684b      	ldr	r3, [r1, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dc02      	bgt.n	800bd44 <__sflush_r+0x1c>
 800bd3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd48      	ble.n	800bdd6 <__sflush_r+0xae>
 800bd44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	d045      	beq.n	800bdd6 <__sflush_r+0xae>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd50:	682f      	ldr	r7, [r5, #0]
 800bd52:	6a21      	ldr	r1, [r4, #32]
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	d030      	beq.n	800bdba <__sflush_r+0x92>
 800bd58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	0759      	lsls	r1, r3, #29
 800bd5e:	d505      	bpl.n	800bd6c <__sflush_r+0x44>
 800bd60:	6863      	ldr	r3, [r4, #4]
 800bd62:	1ad2      	subs	r2, r2, r3
 800bd64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd66:	b10b      	cbz	r3, 800bd6c <__sflush_r+0x44>
 800bd68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd70:	6a21      	ldr	r1, [r4, #32]
 800bd72:	4628      	mov	r0, r5
 800bd74:	47b0      	blx	r6
 800bd76:	1c43      	adds	r3, r0, #1
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	d106      	bne.n	800bd8a <__sflush_r+0x62>
 800bd7c:	6829      	ldr	r1, [r5, #0]
 800bd7e:	291d      	cmp	r1, #29
 800bd80:	d82b      	bhi.n	800bdda <__sflush_r+0xb2>
 800bd82:	4a2a      	ldr	r2, [pc, #168]	@ (800be2c <__sflush_r+0x104>)
 800bd84:	40ca      	lsrs	r2, r1
 800bd86:	07d6      	lsls	r6, r2, #31
 800bd88:	d527      	bpl.n	800bdda <__sflush_r+0xb2>
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	6062      	str	r2, [r4, #4]
 800bd8e:	04d9      	lsls	r1, r3, #19
 800bd90:	6922      	ldr	r2, [r4, #16]
 800bd92:	6022      	str	r2, [r4, #0]
 800bd94:	d504      	bpl.n	800bda0 <__sflush_r+0x78>
 800bd96:	1c42      	adds	r2, r0, #1
 800bd98:	d101      	bne.n	800bd9e <__sflush_r+0x76>
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	b903      	cbnz	r3, 800bda0 <__sflush_r+0x78>
 800bd9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bda0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bda2:	602f      	str	r7, [r5, #0]
 800bda4:	b1b9      	cbz	r1, 800bdd6 <__sflush_r+0xae>
 800bda6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdaa:	4299      	cmp	r1, r3
 800bdac:	d002      	beq.n	800bdb4 <__sflush_r+0x8c>
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f7ff fb4a 	bl	800b448 <_free_r>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdb8:	e00d      	b.n	800bdd6 <__sflush_r+0xae>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b0      	blx	r6
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	1c50      	adds	r0, r2, #1
 800bdc4:	d1c9      	bne.n	800bd5a <__sflush_r+0x32>
 800bdc6:	682b      	ldr	r3, [r5, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0c6      	beq.n	800bd5a <__sflush_r+0x32>
 800bdcc:	2b1d      	cmp	r3, #29
 800bdce:	d001      	beq.n	800bdd4 <__sflush_r+0xac>
 800bdd0:	2b16      	cmp	r3, #22
 800bdd2:	d11e      	bne.n	800be12 <__sflush_r+0xea>
 800bdd4:	602f      	str	r7, [r5, #0]
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e022      	b.n	800be20 <__sflush_r+0xf8>
 800bdda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdde:	b21b      	sxth	r3, r3
 800bde0:	e01b      	b.n	800be1a <__sflush_r+0xf2>
 800bde2:	690f      	ldr	r7, [r1, #16]
 800bde4:	2f00      	cmp	r7, #0
 800bde6:	d0f6      	beq.n	800bdd6 <__sflush_r+0xae>
 800bde8:	0793      	lsls	r3, r2, #30
 800bdea:	680e      	ldr	r6, [r1, #0]
 800bdec:	bf08      	it	eq
 800bdee:	694b      	ldreq	r3, [r1, #20]
 800bdf0:	600f      	str	r7, [r1, #0]
 800bdf2:	bf18      	it	ne
 800bdf4:	2300      	movne	r3, #0
 800bdf6:	eba6 0807 	sub.w	r8, r6, r7
 800bdfa:	608b      	str	r3, [r1, #8]
 800bdfc:	f1b8 0f00 	cmp.w	r8, #0
 800be00:	dde9      	ble.n	800bdd6 <__sflush_r+0xae>
 800be02:	6a21      	ldr	r1, [r4, #32]
 800be04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be06:	4643      	mov	r3, r8
 800be08:	463a      	mov	r2, r7
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b0      	blx	r6
 800be0e:	2800      	cmp	r0, #0
 800be10:	dc08      	bgt.n	800be24 <__sflush_r+0xfc>
 800be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	f04f 30ff 	mov.w	r0, #4294967295
 800be20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be24:	4407      	add	r7, r0
 800be26:	eba8 0800 	sub.w	r8, r8, r0
 800be2a:	e7e7      	b.n	800bdfc <__sflush_r+0xd4>
 800be2c:	20400001 	.word	0x20400001

0800be30 <_fflush_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	690b      	ldr	r3, [r1, #16]
 800be34:	4605      	mov	r5, r0
 800be36:	460c      	mov	r4, r1
 800be38:	b913      	cbnz	r3, 800be40 <_fflush_r+0x10>
 800be3a:	2500      	movs	r5, #0
 800be3c:	4628      	mov	r0, r5
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	b118      	cbz	r0, 800be4a <_fflush_r+0x1a>
 800be42:	6a03      	ldr	r3, [r0, #32]
 800be44:	b90b      	cbnz	r3, 800be4a <_fflush_r+0x1a>
 800be46:	f7ff f8e9 	bl	800b01c <__sinit>
 800be4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f3      	beq.n	800be3a <_fflush_r+0xa>
 800be52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be54:	07d0      	lsls	r0, r2, #31
 800be56:	d404      	bmi.n	800be62 <_fflush_r+0x32>
 800be58:	0599      	lsls	r1, r3, #22
 800be5a:	d402      	bmi.n	800be62 <_fflush_r+0x32>
 800be5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be5e:	f7ff fae2 	bl	800b426 <__retarget_lock_acquire_recursive>
 800be62:	4628      	mov	r0, r5
 800be64:	4621      	mov	r1, r4
 800be66:	f7ff ff5f 	bl	800bd28 <__sflush_r>
 800be6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be6c:	07da      	lsls	r2, r3, #31
 800be6e:	4605      	mov	r5, r0
 800be70:	d4e4      	bmi.n	800be3c <_fflush_r+0xc>
 800be72:	89a3      	ldrh	r3, [r4, #12]
 800be74:	059b      	lsls	r3, r3, #22
 800be76:	d4e1      	bmi.n	800be3c <_fflush_r+0xc>
 800be78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be7a:	f7ff fad5 	bl	800b428 <__retarget_lock_release_recursive>
 800be7e:	e7dd      	b.n	800be3c <_fflush_r+0xc>

0800be80 <__swhatbuf_r>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	460c      	mov	r4, r1
 800be84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be88:	2900      	cmp	r1, #0
 800be8a:	b096      	sub	sp, #88	@ 0x58
 800be8c:	4615      	mov	r5, r2
 800be8e:	461e      	mov	r6, r3
 800be90:	da0d      	bge.n	800beae <__swhatbuf_r+0x2e>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be98:	f04f 0100 	mov.w	r1, #0
 800be9c:	bf14      	ite	ne
 800be9e:	2340      	movne	r3, #64	@ 0x40
 800bea0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bea4:	2000      	movs	r0, #0
 800bea6:	6031      	str	r1, [r6, #0]
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	b016      	add	sp, #88	@ 0x58
 800beac:	bd70      	pop	{r4, r5, r6, pc}
 800beae:	466a      	mov	r2, sp
 800beb0:	f000 f8f6 	bl	800c0a0 <_fstat_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	dbec      	blt.n	800be92 <__swhatbuf_r+0x12>
 800beb8:	9901      	ldr	r1, [sp, #4]
 800beba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bebe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bec2:	4259      	negs	r1, r3
 800bec4:	4159      	adcs	r1, r3
 800bec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800beca:	e7eb      	b.n	800bea4 <__swhatbuf_r+0x24>

0800becc <__smakebuf_r>:
 800becc:	898b      	ldrh	r3, [r1, #12]
 800bece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bed0:	079d      	lsls	r5, r3, #30
 800bed2:	4606      	mov	r6, r0
 800bed4:	460c      	mov	r4, r1
 800bed6:	d507      	bpl.n	800bee8 <__smakebuf_r+0x1c>
 800bed8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	6123      	str	r3, [r4, #16]
 800bee0:	2301      	movs	r3, #1
 800bee2:	6163      	str	r3, [r4, #20]
 800bee4:	b003      	add	sp, #12
 800bee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee8:	ab01      	add	r3, sp, #4
 800beea:	466a      	mov	r2, sp
 800beec:	f7ff ffc8 	bl	800be80 <__swhatbuf_r>
 800bef0:	9f00      	ldr	r7, [sp, #0]
 800bef2:	4605      	mov	r5, r0
 800bef4:	4639      	mov	r1, r7
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7fe ff78 	bl	800adec <_malloc_r>
 800befc:	b948      	cbnz	r0, 800bf12 <__smakebuf_r+0x46>
 800befe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf02:	059a      	lsls	r2, r3, #22
 800bf04:	d4ee      	bmi.n	800bee4 <__smakebuf_r+0x18>
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	f043 0302 	orr.w	r3, r3, #2
 800bf0e:	81a3      	strh	r3, [r4, #12]
 800bf10:	e7e2      	b.n	800bed8 <__smakebuf_r+0xc>
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	6020      	str	r0, [r4, #0]
 800bf16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf1a:	81a3      	strh	r3, [r4, #12]
 800bf1c:	9b01      	ldr	r3, [sp, #4]
 800bf1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf22:	b15b      	cbz	r3, 800bf3c <__smakebuf_r+0x70>
 800bf24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f000 f8cb 	bl	800c0c4 <_isatty_r>
 800bf2e:	b128      	cbz	r0, 800bf3c <__smakebuf_r+0x70>
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	f023 0303 	bic.w	r3, r3, #3
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	431d      	orrs	r5, r3
 800bf40:	81a5      	strh	r5, [r4, #12]
 800bf42:	e7cf      	b.n	800bee4 <__smakebuf_r+0x18>

0800bf44 <__swbuf_r>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	460e      	mov	r6, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b118      	cbz	r0, 800bf56 <__swbuf_r+0x12>
 800bf4e:	6a03      	ldr	r3, [r0, #32]
 800bf50:	b90b      	cbnz	r3, 800bf56 <__swbuf_r+0x12>
 800bf52:	f7ff f863 	bl	800b01c <__sinit>
 800bf56:	69a3      	ldr	r3, [r4, #24]
 800bf58:	60a3      	str	r3, [r4, #8]
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	071a      	lsls	r2, r3, #28
 800bf5e:	d501      	bpl.n	800bf64 <__swbuf_r+0x20>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b943      	cbnz	r3, 800bf76 <__swbuf_r+0x32>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 f82a 	bl	800bfc0 <__swsetup_r>
 800bf6c:	b118      	cbz	r0, 800bf76 <__swbuf_r+0x32>
 800bf6e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf72:	4638      	mov	r0, r7
 800bf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	6922      	ldr	r2, [r4, #16]
 800bf7a:	1a98      	subs	r0, r3, r2
 800bf7c:	6963      	ldr	r3, [r4, #20]
 800bf7e:	b2f6      	uxtb	r6, r6
 800bf80:	4283      	cmp	r3, r0
 800bf82:	4637      	mov	r7, r6
 800bf84:	dc05      	bgt.n	800bf92 <__swbuf_r+0x4e>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f7ff ff51 	bl	800be30 <_fflush_r>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d1ed      	bne.n	800bf6e <__swbuf_r+0x2a>
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	60a3      	str	r3, [r4, #8]
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	701e      	strb	r6, [r3, #0]
 800bfa0:	6962      	ldr	r2, [r4, #20]
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d004      	beq.n	800bfb2 <__swbuf_r+0x6e>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	07db      	lsls	r3, r3, #31
 800bfac:	d5e1      	bpl.n	800bf72 <__swbuf_r+0x2e>
 800bfae:	2e0a      	cmp	r6, #10
 800bfb0:	d1df      	bne.n	800bf72 <__swbuf_r+0x2e>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f7ff ff3b 	bl	800be30 <_fflush_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0d9      	beq.n	800bf72 <__swbuf_r+0x2e>
 800bfbe:	e7d6      	b.n	800bf6e <__swbuf_r+0x2a>

0800bfc0 <__swsetup_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4b29      	ldr	r3, [pc, #164]	@ (800c068 <__swsetup_r+0xa8>)
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	460c      	mov	r4, r1
 800bfca:	b118      	cbz	r0, 800bfd4 <__swsetup_r+0x14>
 800bfcc:	6a03      	ldr	r3, [r0, #32]
 800bfce:	b90b      	cbnz	r3, 800bfd4 <__swsetup_r+0x14>
 800bfd0:	f7ff f824 	bl	800b01c <__sinit>
 800bfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd8:	0719      	lsls	r1, r3, #28
 800bfda:	d422      	bmi.n	800c022 <__swsetup_r+0x62>
 800bfdc:	06da      	lsls	r2, r3, #27
 800bfde:	d407      	bmi.n	800bff0 <__swsetup_r+0x30>
 800bfe0:	2209      	movs	r2, #9
 800bfe2:	602a      	str	r2, [r5, #0]
 800bfe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	f04f 30ff 	mov.w	r0, #4294967295
 800bfee:	e033      	b.n	800c058 <__swsetup_r+0x98>
 800bff0:	0758      	lsls	r0, r3, #29
 800bff2:	d512      	bpl.n	800c01a <__swsetup_r+0x5a>
 800bff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bff6:	b141      	cbz	r1, 800c00a <__swsetup_r+0x4a>
 800bff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d002      	beq.n	800c006 <__swsetup_r+0x46>
 800c000:	4628      	mov	r0, r5
 800c002:	f7ff fa21 	bl	800b448 <_free_r>
 800c006:	2300      	movs	r3, #0
 800c008:	6363      	str	r3, [r4, #52]	@ 0x34
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	6063      	str	r3, [r4, #4]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f043 0308 	orr.w	r3, r3, #8
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	b94b      	cbnz	r3, 800c03a <__swsetup_r+0x7a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c030:	d003      	beq.n	800c03a <__swsetup_r+0x7a>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f7ff ff49 	bl	800becc <__smakebuf_r>
 800c03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03e:	f013 0201 	ands.w	r2, r3, #1
 800c042:	d00a      	beq.n	800c05a <__swsetup_r+0x9a>
 800c044:	2200      	movs	r2, #0
 800c046:	60a2      	str	r2, [r4, #8]
 800c048:	6962      	ldr	r2, [r4, #20]
 800c04a:	4252      	negs	r2, r2
 800c04c:	61a2      	str	r2, [r4, #24]
 800c04e:	6922      	ldr	r2, [r4, #16]
 800c050:	b942      	cbnz	r2, 800c064 <__swsetup_r+0xa4>
 800c052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c056:	d1c5      	bne.n	800bfe4 <__swsetup_r+0x24>
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	0799      	lsls	r1, r3, #30
 800c05c:	bf58      	it	pl
 800c05e:	6962      	ldrpl	r2, [r4, #20]
 800c060:	60a2      	str	r2, [r4, #8]
 800c062:	e7f4      	b.n	800c04e <__swsetup_r+0x8e>
 800c064:	2000      	movs	r0, #0
 800c066:	e7f7      	b.n	800c058 <__swsetup_r+0x98>
 800c068:	20000028 	.word	0x20000028

0800c06c <memmove>:
 800c06c:	4288      	cmp	r0, r1
 800c06e:	b510      	push	{r4, lr}
 800c070:	eb01 0402 	add.w	r4, r1, r2
 800c074:	d902      	bls.n	800c07c <memmove+0x10>
 800c076:	4284      	cmp	r4, r0
 800c078:	4623      	mov	r3, r4
 800c07a:	d807      	bhi.n	800c08c <memmove+0x20>
 800c07c:	1e43      	subs	r3, r0, #1
 800c07e:	42a1      	cmp	r1, r4
 800c080:	d008      	beq.n	800c094 <memmove+0x28>
 800c082:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c08a:	e7f8      	b.n	800c07e <memmove+0x12>
 800c08c:	4402      	add	r2, r0
 800c08e:	4601      	mov	r1, r0
 800c090:	428a      	cmp	r2, r1
 800c092:	d100      	bne.n	800c096 <memmove+0x2a>
 800c094:	bd10      	pop	{r4, pc}
 800c096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c09a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c09e:	e7f7      	b.n	800c090 <memmove+0x24>

0800c0a0 <_fstat_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d07      	ldr	r5, [pc, #28]	@ (800c0c0 <_fstat_r+0x20>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	602b      	str	r3, [r5, #0]
 800c0ae:	f7f6 fd71 	bl	8002b94 <_fstat>
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	d102      	bne.n	800c0bc <_fstat_r+0x1c>
 800c0b6:	682b      	ldr	r3, [r5, #0]
 800c0b8:	b103      	cbz	r3, 800c0bc <_fstat_r+0x1c>
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	bd38      	pop	{r3, r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000d80 	.word	0x20000d80

0800c0c4 <_isatty_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d06      	ldr	r5, [pc, #24]	@ (800c0e0 <_isatty_r+0x1c>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	f7f6 fd70 	bl	8002bb4 <_isatty>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_isatty_r+0x1a>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_isatty_r+0x1a>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20000d80 	.word	0x20000d80

0800c0e4 <_realloc_r>:
 800c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	4614      	mov	r4, r2
 800c0ec:	460d      	mov	r5, r1
 800c0ee:	b921      	cbnz	r1, 800c0fa <_realloc_r+0x16>
 800c0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	f7fe be79 	b.w	800adec <_malloc_r>
 800c0fa:	b92a      	cbnz	r2, 800c108 <_realloc_r+0x24>
 800c0fc:	f7ff f9a4 	bl	800b448 <_free_r>
 800c100:	4625      	mov	r5, r4
 800c102:	4628      	mov	r0, r5
 800c104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c108:	f000 f81a 	bl	800c140 <_malloc_usable_size_r>
 800c10c:	4284      	cmp	r4, r0
 800c10e:	4606      	mov	r6, r0
 800c110:	d802      	bhi.n	800c118 <_realloc_r+0x34>
 800c112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c116:	d8f4      	bhi.n	800c102 <_realloc_r+0x1e>
 800c118:	4621      	mov	r1, r4
 800c11a:	4638      	mov	r0, r7
 800c11c:	f7fe fe66 	bl	800adec <_malloc_r>
 800c120:	4680      	mov	r8, r0
 800c122:	b908      	cbnz	r0, 800c128 <_realloc_r+0x44>
 800c124:	4645      	mov	r5, r8
 800c126:	e7ec      	b.n	800c102 <_realloc_r+0x1e>
 800c128:	42b4      	cmp	r4, r6
 800c12a:	4622      	mov	r2, r4
 800c12c:	4629      	mov	r1, r5
 800c12e:	bf28      	it	cs
 800c130:	4632      	movcs	r2, r6
 800c132:	f7ff f97a 	bl	800b42a <memcpy>
 800c136:	4629      	mov	r1, r5
 800c138:	4638      	mov	r0, r7
 800c13a:	f7ff f985 	bl	800b448 <_free_r>
 800c13e:	e7f1      	b.n	800c124 <_realloc_r+0x40>

0800c140 <_malloc_usable_size_r>:
 800c140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c144:	1f18      	subs	r0, r3, #4
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfbc      	itt	lt
 800c14a:	580b      	ldrlt	r3, [r1, r0]
 800c14c:	18c0      	addlt	r0, r0, r3
 800c14e:	4770      	bx	lr

0800c150 <_init>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	bf00      	nop
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr

0800c15c <_fini>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr
