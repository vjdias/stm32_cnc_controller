
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcdc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800be6c  0800be6c  0000ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c414  0800c414  0000e078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c414  0800c414  0000d414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c41c  0800c41c  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c41c  0800c41c  0000d41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c420  0800c420  0000d420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800c424  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000078  0800c49c  0000e078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  0800c49c  0000ed5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001994b  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004284  00000000  00000000  000279f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117f  00000000  00000000  0002d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289dc  00000000  00000000  0002e4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b65  00000000  00000000  00056ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c5d  00000000  00000000  00077a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006548  00000000  00000000  0016e6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00174bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be54 	.word	0x0800be54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800be54 	.word	0x0800be54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
			& 0x1);
	return 0;
}

// Validação genérica de header/tail
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
		uint8_t header, uint8_t tail) {
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <frame_expect_req>:
}

// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <frame_expect_req+0x1e>
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d202      	bcs.n	800060e <frame_expect_req+0x24>
		req_msg_type_t type, uint32_t min_len) {
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	e012      	b.n	8000634 <frame_expect_req+0x4a>
	if (!raw || len < min_len)
 800060e:	2355      	movs	r3, #85	@ 0x55
 8000610:	22aa      	movs	r2, #170	@ 0xaa
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ffc1 	bl	800059c <has_header_tail>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <frame_expect_req+0x42>
		return PROTO_ERR_ARG;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	429a      	cmp	r2, r3
 800062a:	d002      	beq.n	8000632 <frame_expect_req+0x48>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800062c:	f06f 0301 	mvn.w	r3, #1
 8000630:	e000      	b.n	8000634 <frame_expect_req+0x4a>
			|| raw[1] != (uint8_t) type)
 8000632:	2300      	movs	r3, #0
		return PROTO_ERR_FRAME;
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <led_ctrl_req_decoder>:

// A requisição LED_CTRL (único LED) possui 9 bytes úteis no frame básico:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask,
// [4]=LED1.mode, [5..6]=LED1.frequencyHz (BE16, frequência em Hz),
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
#define LED_CTRL_PARITY_LAST_INDEX 6u
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <led_ctrl_req_decoder+0x18>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <led_ctrl_req_decoder+0x1e>
#define LED_CTRL_PARITY_INDEX 7u
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	e025      	b.n	80006a6 <led_ctrl_req_decoder+0x6a>

 800065a:	2309      	movs	r3, #9
 800065c:	2207      	movs	r2, #7
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ffc2 	bl	80005ea <frame_expect_req>
 8000666:	6178      	str	r0, [r7, #20]
int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <led_ctrl_req_decoder+0x36>
    if (!raw || !out)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	e019      	b.n	80006a6 <led_ctrl_req_decoder+0x6a>
        return PROTO_ERR_ARG;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3302      	adds	r3, #2
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	701a      	strb	r2, [r3, #0]
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3303      	adds	r3, #3
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]
        return PROTO_ERR_RANGE;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3304      	adds	r3, #4
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	709a      	strb	r2, [r3, #2]
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3305      	adds	r3, #5
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	70da      	strb	r2, [r3, #3]
    if (st != PROTO_OK)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3306      	adds	r3, #6
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	711a      	strb	r2, [r3, #4]
        return st;
 80006a4:	2300      	movs	r3, #0
    out->frameId = raw[2];
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <xor_reduce_bytes>:
} resp_msg_type_t;

// =====================
// Conjunto genérico de auxiliares
// =====================

 80006ae:	b480      	push	{r7}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
// XOR sobre bytes (paridade byte a byte)
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	e009      	b.n	80006d6 <xor_reduce_bytes+0x28>
	uint8_t x = 0;
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	4053      	eors	r3, r2
 80006ce:	73fb      	strb	r3, [r7, #15]
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d3f1      	bcc.n	80006c2 <xor_reduce_bytes+0x14>
	for (uint32_t i = 0; i < n; ++i)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
		x ^= p[i];
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <set_parity_byte>:
static inline int check_parity_byte(const uint8_t *raw, uint32_t start,
		uint32_t count, uint32_t parity_index) {
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <set_parity_byte+0x1a>
		uint32_t parity_index) {
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	e00b      	b.n	800071e <set_parity_byte+0x32>
	if (!raw)
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	18d0      	adds	r0, r2, r3
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	18d4      	adds	r4, r2, r3
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f7ff ffcb 	bl	80006ae <xor_reduce_bytes>
 8000718:	4603      	mov	r3, r0
 800071a:	7023      	strb	r3, [r4, #0]
		return -1;
 800071c:	2300      	movs	r3, #0
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bd90      	pop	{r4, r7, pc}

08000726 <resp_init>:
// =====================
// Auxiliares de frame (init/tail)
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	70fb      	strb	r3, [r7, #3]
}
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	22ab      	movs	r2, #171	@ 0xab
 8000736:	701a      	strb	r2, [r3, #0]
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	701a      	strb	r2, [r3, #0]
	raw[0] = RESP_HEADER;
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <resp_set_tail>:
	raw[1] = (uint8_t) type;
}
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
}
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	2254      	movs	r2, #84	@ 0x54
 800075e:	701a      	strb	r2, [r3, #0]
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <parity_set_byte_1N>:
}

// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	2101      	movs	r1, #1
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ffb4 	bl	80006ec <set_parity_byte>
 8000784:	4603      	mov	r3, r0
		uint32_t parity_index) {
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <led_ctrl_resp_encoder+0x1e>
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <led_ctrl_resp_encoder+0x1e>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d802      	bhi.n	80007b2 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	e01c      	b.n	80007ec <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80007b2:	2107      	movs	r1, #7
 80007b4:	68b8      	ldr	r0, [r7, #8]
 80007b6:	f7ff ffb6 	bl	8000726 <resp_init>
	raw[2] = in->frameId;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3302      	adds	r3, #2
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3303      	adds	r3, #3
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	7852      	ldrb	r2, [r2, #1]
 80007cc:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	3304      	adds	r3, #4
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	7892      	ldrb	r2, [r2, #2]
 80007d6:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 80007d8:	2205      	movs	r2, #5
 80007da:	2104      	movs	r1, #4
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f7ff ffc5 	bl	800076c <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 80007e2:	2106      	movs	r1, #6
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f7ff ffb1 	bl	800074c <resp_set_tail>
	return PROTO_OK;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80007f4:	b5b0      	push	{r4, r5, r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 8000800:	2248      	movs	r2, #72	@ 0x48
 8000802:	2100      	movs	r1, #0
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f00a fc07 	bl	800b018 <memset>
	r->resp = resp_fifo;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d009      	beq.n	800082a <router_init+0x36>
		handlers = *h;
 8000816:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <router_init+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4614      	mov	r4, r2
 800081c:	461d      	mov	r5, r3
 800081e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000822:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bdb0      	pop	{r4, r5, r7, pc}
 8000832:	bf00      	nop
 8000834:	20000094 	.word	0x20000094

08000838 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	if (n < 4)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2b03      	cmp	r3, #3
 8000846:	d801      	bhi.n	800084c <is_req_complete+0x14>
		return 0; // mínimo
 8000848:	2300      	movs	r3, #0
 800084a:	e01a      	b.n	8000882 <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2baa      	cmp	r3, #170	@ 0xaa
 8000852:	d002      	beq.n	800085a <is_req_complete+0x22>
		return -1; // inválido
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	e013      	b.n	8000882 <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 800085a:	2303      	movs	r3, #3
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e00b      	b.n	8000878 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b55      	cmp	r3, #85	@ 0x55
 800086a:	d102      	bne.n	8000872 <is_req_complete+0x3a>
			return (int) (i + 1);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	e007      	b.n	8000882 <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d3ef      	bcc.n	8000860 <is_req_complete+0x28>
	}
	return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	if (len < 4)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	f240 80a4 	bls.w	80009ec <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3301      	adds	r3, #1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	2b1f      	cmp	r3, #31
 80008b2:	f200 809d 	bhi.w	80009f0 <dispatch+0x160>
 80008b6:	a201      	add	r2, pc, #4	@ (adr r2, 80008bc <dispatch+0x2c>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	08000953 	.word	0x08000953
 80008c4:	08000969 	.word	0x08000969
 80008c8:	0800097f 	.word	0x0800097f
 80008cc:	08000995 	.word	0x08000995
 80008d0:	080009ab 	.word	0x080009ab
 80008d4:	080009c1 	.word	0x080009c1
 80008d8:	080009f1 	.word	0x080009f1
 80008dc:	080009f1 	.word	0x080009f1
 80008e0:	080009f1 	.word	0x080009f1
 80008e4:	080009f1 	.word	0x080009f1
 80008e8:	080009f1 	.word	0x080009f1
 80008ec:	080009f1 	.word	0x080009f1
 80008f0:	080009f1 	.word	0x080009f1
 80008f4:	080009f1 	.word	0x080009f1
 80008f8:	080009f1 	.word	0x080009f1
 80008fc:	080009f1 	.word	0x080009f1
 8000900:	080009f1 	.word	0x080009f1
 8000904:	080009f1 	.word	0x080009f1
 8000908:	080009f1 	.word	0x080009f1
 800090c:	080009f1 	.word	0x080009f1
 8000910:	080009f1 	.word	0x080009f1
 8000914:	080009f1 	.word	0x080009f1
 8000918:	080009f1 	.word	0x080009f1
 800091c:	080009f1 	.word	0x080009f1
 8000920:	080009f1 	.word	0x080009f1
 8000924:	080009f1 	.word	0x080009f1
 8000928:	080009f1 	.word	0x080009f1
 800092c:	080009f1 	.word	0x080009f1
 8000930:	080009f1 	.word	0x080009f1
 8000934:	080009f1 	.word	0x080009f1
 8000938:	080009d7 	.word	0x080009d7
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 800093c:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <dispatch+0x188>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d057      	beq.n	80009f4 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000944:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <dispatch+0x188>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	68b9      	ldr	r1, [r7, #8]
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	4798      	blx	r3
		break;
 8000950:	e050      	b.n	80009f4 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 8000952:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <dispatch+0x188>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d04e      	beq.n	80009f8 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 800095a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <dispatch+0x188>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	4798      	blx	r3
		break;
 8000966:	e047      	b.n	80009f8 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000968:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <dispatch+0x188>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d045      	beq.n	80009fc <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 8000970:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <dispatch+0x188>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	4798      	blx	r3
		break;
 800097c:	e03e      	b.n	80009fc <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <dispatch+0x188>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d03c      	beq.n	8000a00 <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <dispatch+0x188>)
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	4798      	blx	r3
		break;
 8000992:	e035      	b.n	8000a00 <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000994:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <dispatch+0x188>)
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d033      	beq.n	8000a04 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <dispatch+0x188>)
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	4798      	blx	r3
		break;
 80009a8:	e02c      	b.n	8000a04 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 80009aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <dispatch+0x188>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d02a      	beq.n	8000a08 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <dispatch+0x188>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	4798      	blx	r3
		break;
 80009be:	e023      	b.n	8000a08 <dispatch+0x178>
        case REQ_LED_CTRL:
                if (handlers.on_led_ctrl)
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <dispatch+0x188>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d021      	beq.n	8000a0c <dispatch+0x17c>
                        handlers.on_led_ctrl(r, f, len);
 80009c8:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <dispatch+0x188>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	68b9      	ldr	r1, [r7, #8]
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	4798      	blx	r3
                break;
 80009d4:	e01a      	b.n	8000a0c <dispatch+0x17c>
        case REQ_FPGA_STATUS:
                if (handlers.on_fpga_status)
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <dispatch+0x188>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d018      	beq.n	8000a10 <dispatch+0x180>
                        handlers.on_fpga_status(r, f, len);
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <dispatch+0x188>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	4798      	blx	r3
                break;
 80009ea:	e011      	b.n	8000a10 <dispatch+0x180>
		return;
 80009ec:	bf00      	nop
 80009ee:	e010      	b.n	8000a12 <dispatch+0x182>
        case REQ_TEST_HELLO:
                if (handlers.on_test_hello)
 80009f0:	bf00      	nop
 80009f2:	e00e      	b.n	8000a12 <dispatch+0x182>
		break;
 80009f4:	bf00      	nop
 80009f6:	e00c      	b.n	8000a12 <dispatch+0x182>
		break;
 80009f8:	bf00      	nop
 80009fa:	e00a      	b.n	8000a12 <dispatch+0x182>
		break;
 80009fc:	bf00      	nop
 80009fe:	e008      	b.n	8000a12 <dispatch+0x182>
		break;
 8000a00:	bf00      	nop
 8000a02:	e006      	b.n	8000a12 <dispatch+0x182>
		break;
 8000a04:	bf00      	nop
 8000a06:	e004      	b.n	8000a12 <dispatch+0x182>
		break;
 8000a08:	bf00      	nop
 8000a0a:	e002      	b.n	8000a12 <dispatch+0x182>
                break;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <dispatch+0x182>
                break;
 8000a10:	bf00      	nop
                        handlers.on_test_hello(r, f, len);
                break;
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000094 	.word	0x20000094

08000a1c <router_feed_bytes>:
        default:
                break; // desconhecido
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
        }
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e038      	b.n	8000aa0 <router_feed_bytes+0x84>
}
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a34:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a36:	d903      	bls.n	8000a40 <router_feed_bytes+0x24>

 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	441a      	add	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a4c:	1c59      	adds	r1, r3, #1
 8000a4e:	b2c8      	uxtb	r0, r1
 8000a50:	68f9      	ldr	r1, [r7, #12]
 8000a52:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000a56:	4619      	mov	r1, r3
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	545a      	strb	r2, [r3, r1]
	for (uint32_t i = 0; i < len; i++) {
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a66:	4619      	mov	r1, r3
 8000a68:	4610      	mov	r0, r2
 8000a6a:	f7ff fee5 	bl	8000838 <is_req_complete>
 8000a6e:	6138      	str	r0, [r7, #16]
		if (r->idx >= sizeof(r->acc))
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da04      	bge.n	8000a80 <router_feed_bytes+0x64>
			r->idx = 0; // evita overflow simples
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 8000a7e:	e00c      	b.n	8000a9a <router_feed_bytes+0x7e>
		int comp = is_req_complete(r->acc, r->idx);
		if (comp < 0) {
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	dd09      	ble.n	8000a9a <router_feed_bytes+0x7e>
			r->idx = 0;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff feff 	bl	8000890 <dispatch>
			continue;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3c2      	bcc.n	8000a2e <router_feed_bytes+0x12>
		} // descarta até header
		if (comp > 0) {
			dispatch(r, r->acc, (uint32_t) comp);
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <resp_fifo_create>:
			r->idx = 0;
		}
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
	}
 8000ab8:	210c      	movs	r1, #12
 8000aba:	2001      	movs	r0, #1
 8000abc:	f009 ffca 	bl	800aa54 <calloc>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	607b      	str	r3, [r7, #4]
}
 8000ac4:	687b      	ldr	r3, [r7, #4]

 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <resp_fifo_push>:
void resp_fifo_destroy(response_fifo_t *q) {
	while (q && q->head) {
		node_t *n = q->head;
		q->head = n->next;
		free(n->buf);
		free(n);
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
	}
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <resp_fifo_push+0x1e>
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <resp_fifo_push+0x1e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <resp_fifo_push+0x24>
	free(q);
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	e03d      	b.n	8000b6e <resp_fifo_push+0xa0>
}
 8000af2:	200c      	movs	r0, #12
 8000af4:	f009 ffca 	bl	800aa8c <malloc>
 8000af8:	4603      	mov	r3, r0
 8000afa:	617b      	str	r3, [r7, #20]
int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <resp_fifo_push+0x3a>
	if (!q || !frame || len == 0)
 8000b02:	f06f 0302 	mvn.w	r3, #2
 8000b06:	e032      	b.n	8000b6e <resp_fifo_push+0xa0>
		return PROTO_ERR_ARG;
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f009 ffbf 	bl	800aa8c <malloc>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	601a      	str	r2, [r3, #0]
	node_t *n = (node_t*) malloc(sizeof(*n));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d105      	bne.n	8000b2a <resp_fifo_push+0x5c>
	if (!n)
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f009 ffbc 	bl	800aa9c <free>
		return PROTO_ERR_ALLOC;
 8000b24:	f06f 0302 	mvn.w	r3, #2
 8000b28:	e021      	b.n	8000b6e <resp_fifo_push+0xa0>
	n->buf = (uint8_t*) malloc(len);
	if (!n->buf) {
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00a fafb 	bl	800b12e <memcpy>
		free(n);
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
		return PROTO_ERR_ALLOC;
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
	}
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <resp_fifo_push+0x88>
	memcpy(n->buf, frame, len);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	e002      	b.n	8000b5c <resp_fifo_push+0x8e>
	n->len = len;
	n->next = NULL;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	601a      	str	r2, [r3, #0]
	if (q->tail)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	605a      	str	r2, [r3, #4]
		q->tail->next = n;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	609a      	str	r2, [r3, #8]
	else
 8000b6c:	2300      	movs	r3, #0
		q->head = n;
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <resp_fifo_pop>:
	q->tail = n;
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
	q->count++;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <resp_fifo_pop+0x20>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <resp_fifo_pop+0x20>
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <resp_fifo_pop+0x24>
	return PROTO_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e02e      	b.n	8000bf8 <resp_fifo_pop+0x82>
}
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	617b      	str	r3, [r7, #20]
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d202      	bcs.n	8000bb0 <resp_fifo_pop+0x3a>
	if (!q || !q->head || !out)
 8000baa:	f06f 0303 	mvn.w	r3, #3
 8000bae:	e023      	b.n	8000bf8 <resp_fifo_pop+0x82>
		return 0;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68b8      	ldr	r0, [r7, #8]
 8000bbc:	f00a fab7 	bl	800b12e <memcpy>
	node_t *n = q->head;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	613b      	str	r3, [r7, #16]
	if (n->len > max_len)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
		return PROTO_ERR_RANGE;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <resp_fifo_pop+0x66>
	memcpy(out, n->buf, n->len);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
	int l = (int) n->len;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	609a      	str	r2, [r3, #8]
	q->head = n->next;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f009 ff56 	bl	800aa9c <free>
	if (!q->head)
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f009 ff53 	bl	800aa9c <free>
		q->tail = NULL;
 8000bf6:	693b      	ldr	r3, [r7, #16]
	q->count--;
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <home_on_move_home+0x2c>)
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <home_on_move_home+0x30>)
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <home_on_move_home+0x34>)
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <home_on_move_home+0x38>)
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 fb84 	bl	800132c <log_event_auto>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	0800be6c 	.word	0x0800be6c
 8000c30:	0800be84 	.word	0x0800be84
 8000c34:	0800be78 	.word	0x0800be78
 8000c38:	0800be94 	.word	0x0800be94

08000c3c <led_push_response>:

static led_channel_state_t g_leds[LED_CTRL_CHANNEL_COUNT] = {
    { LED1_GPIO_PORT, LED1_GPIO_PIN, LED_MODE_OFF, 0u, 0u },
};

static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	733b      	strb	r3, [r7, #12]
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	737b      	strb	r3, [r7, #13]
 8000c56:	797b      	ldrb	r3, [r7, #5]
 8000c58:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8000c5a:	f107 0110 	add.w	r1, r7, #16
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2207      	movs	r2, #7
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd92 	bl	800078e <led_ctrl_resp_encoder>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00c      	beq.n	8000c8a <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8000c70:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <led_push_response+0x80>)
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <led_push_response+0x84>)
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <led_push_response+0x88>)
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	f06f 0201 	mvn.w	r2, #1
 8000c80:	2164      	movs	r1, #100	@ 0x64
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fb52 	bl	800132c <log_event_auto>
 8000c88:	e014      	b.n	8000cb4 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2107      	movs	r1, #7
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fe41 	bl	8001918 <app_resp_push>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00b      	beq.n	8000cb4 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <led_push_response+0x80>)
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <led_push_response+0x8c>)
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <led_push_response+0x88>)
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	f06f 0203 	mvn.w	r2, #3
 8000cac:	2164      	movs	r1, #100	@ 0x64
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f000 fb3c 	bl	800132c <log_event_auto>
    }
}
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800bea0 	.word	0x0800bea0
 8000cc0:	0800bea4 	.word	0x0800bea4
 8000cc4:	0800bec0 	.word	0x0800bec0
 8000cc8:	0800bec8 	.word	0x0800bec8

08000ccc <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 8000cd2:	f004 fa2b 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8000cd6:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <led_timer_get_clock+0x34>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000ce0:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <led_timer_get_clock+0x28>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <led_timer_get_clock+0x28>
        clk *= 2u;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <led_compute_period_ticks>:

static uint32_t led_compute_period_ticks(uint16_t freq_hz) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
    if (!freq_hz)
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <led_compute_period_ticks+0x14>
        return 0u;
 8000d14:	2300      	movs	r3, #0
 8000d16:	e014      	b.n	8000d42 <led_compute_period_ticks+0x3e>
    uint32_t timer_clk = led_timer_get_clock();
 8000d18:	f7ff ffd8 	bl	8000ccc <led_timer_get_clock>
 8000d1c:	6178      	str	r0, [r7, #20]
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <led_compute_period_ticks+0x48>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
    if (prescaler == 0u)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <led_compute_period_ticks+0x2c>
        return 0u;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e008      	b.n	8000d42 <led_compute_period_ticks+0x3e>
    uint32_t ticks = timer_clk / (prescaler * (uint32_t)freq_hz);
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	fb02 f303 	mul.w	r3, r2, r3
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	60fb      	str	r3, [r7, #12]
    return ticks;
 8000d40:	68fb      	ldr	r3, [r7, #12]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000b38 	.word	0x20000b38

08000d50 <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <led_apply_pwm+0x14>
        period_ticks = 1u;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d901      	bls.n	8000d70 <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <led_apply_pwm+0x2c>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <led_apply_pwm+0x2e>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <led_apply_pwm+0x5c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d88:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <led_apply_pwm+0x5c>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <led_apply_pwm+0x5c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <led_apply_pwm+0x5c>)
 8000d9a:	f007 fb2d 	bl	80083f8 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 8000d9e:	4a03      	ldr	r2, [pc, #12]	@ (8000dac <led_apply_pwm+0x5c>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000b38 	.word	0x20000b38

08000db0 <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    if (!led)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d010      	beq.n	8000de0 <led_force_off+0x30>
        return;
    led_apply_pwm((uint32_t)htim15.Init.Period + 1u, 0u);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <led_force_off+0x38>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffc2 	bl	8000d50 <led_apply_pwm>
    led->mode = LED_MODE_OFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	719a      	strb	r2, [r3, #6]
    led->frequency_hz = 0u;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	811a      	strh	r2, [r3, #8]
    led->is_on = 0u;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	71da      	strb	r2, [r3, #7]
 8000dde:	e000      	b.n	8000de2 <led_force_off+0x32>
        return;
 8000de0:	bf00      	nop
}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000b38 	.word	0x20000b38

08000dec <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    if (!led)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d016      	beq.n	8000e28 <led_force_on+0x3c>
        return;
    uint32_t period = (uint32_t)htim15.Init.Period + 1u;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <led_force_on+0x44>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
    if (period == 0u)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <led_force_on+0x20>
        period = 10u;
 8000e08:	230a      	movs	r3, #10
 8000e0a:	60fb      	str	r3, [r7, #12]
    led_apply_pwm(period, period);
 8000e0c:	68f9      	ldr	r1, [r7, #12]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ff9e 	bl	8000d50 <led_apply_pwm>
    led->mode = LED_MODE_ON;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	719a      	strb	r2, [r3, #6]
    led->frequency_hz = 0u;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	811a      	strh	r2, [r3, #8]
    led->is_on = 1u;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	71da      	strb	r2, [r3, #7]
 8000e26:	e000      	b.n	8000e2a <led_force_on+0x3e>
        return;
 8000e28:	bf00      	nop
}
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000b38 	.word	0x20000b38

08000e34 <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_hz) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
    if (!led || freq_hz == 0u)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d024      	beq.n	8000e90 <led_force_blink+0x5c>
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d021      	beq.n	8000e90 <led_force_blink+0x5c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_hz);
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff58 	bl	8000d04 <led_compute_period_ticks>
 8000e54:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d801      	bhi.n	8000e60 <led_force_blink+0x2c>
        period_ticks = 2u;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e66:	d902      	bls.n	8000e6e <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8000e68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e6c:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
    led_apply_pwm(period_ticks, pulse_ticks);
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff ff6a 	bl	8000d50 <led_apply_pwm>
    led->mode = LED_MODE_BLINK;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	719a      	strb	r2, [r3, #6]
    led->frequency_hz = freq_hz;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	887a      	ldrh	r2, [r7, #2]
 8000e86:	811a      	strh	r2, [r3, #8]
    led->is_on = 0u;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	71da      	strb	r2, [r3, #7]
 8000e8e:	e000      	b.n	8000e92 <led_force_blink+0x5e>
        return;
 8000e90:	bf00      	nop
}
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_hz) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	803b      	strh	r3, [r7, #0]
    if (!led)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d026      	beq.n	8000efc <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8000ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ebe:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8000ec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec2:	b672      	cpsid	i
}
 8000ec4:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d103      	bne.n	8000ed4 <led_apply_config+0x3c>
        led_force_on(led);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff8d 	bl	8000dec <led_force_on>
 8000ed2:	e00e      	b.n	8000ef2 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_hz > 0u) {
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d108      	bne.n	8000eec <led_apply_config+0x54>
 8000eda:	883b      	ldrh	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <led_apply_config+0x54>
        led_force_blink(led, freq_hz);
 8000ee0:	883b      	ldrh	r3, [r7, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffa5 	bl	8000e34 <led_force_blink>
 8000eea:	e002      	b.n	8000ef2 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff5f 	bl	8000db0 <led_force_off>
    }

    if (primask == 0u) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ef8:	b662      	cpsie	i
}
 8000efa:	e000      	b.n	8000efe <led_apply_config+0x66>
        return;
 8000efc:	bf00      	nop
        __enable_irq();
    }
}
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <led_pwm_start+0x1c>)
 8000f0e:	f006 fbab 	bl	8007668 <HAL_TIM_PWM_Start>
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    return st;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000b38 	.word	0x20000b38

08000f24 <led_service_init>:

void led_service_init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b090      	sub	sp, #64	@ 0x40
 8000f28:	af02      	add	r7, sp, #8
    GPIO_InitTypeDef gi = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
    gi.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    gi.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gi.Alternate = GPIO_AF14_TIM15;
 8000f46:	230e      	movs	r3, #14
 8000f48:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f4e:	e038      	b.n	8000fc2 <led_service_init+0x9e>
        gi.Pin = g_leds[i].pin;
 8000f50:	494d      	ldr	r1, [pc, #308]	@ (8001088 <led_service_init+0x164>)
 8000f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3304      	adds	r3, #4
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(g_leds[i].port, &gi);
 8000f64:	4948      	ldr	r1, [pc, #288]	@ (8001088 <led_service_init+0x164>)
 8000f66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f107 0220 	add.w	r2, r7, #32
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fd10 	bl	80039a0 <HAL_GPIO_Init>
        g_leds[i].mode = LED_MODE_OFF;
 8000f80:	4941      	ldr	r1, [pc, #260]	@ (8001088 <led_service_init+0x164>)
 8000f82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3306      	adds	r3, #6
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_hz = 0u;
 8000f94:	493c      	ldr	r1, [pc, #240]	@ (8001088 <led_service_init+0x164>)
 8000f96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8000fa8:	4937      	ldr	r1, [pc, #220]	@ (8001088 <led_service_init+0x164>)
 8000faa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0c3      	beq.n	8000f50 <led_service_init+0x2c>
    }

    if (htim15.Instance != TIM15) {
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <led_service_init+0x168>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a30      	ldr	r2, [pc, #192]	@ (8001090 <led_service_init+0x16c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d001      	beq.n	8000fd6 <led_service_init+0xb2>
        MX_TIM15_Init();
 8000fd2:	f001 fd23 	bl	8002a1c <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8000fd6:	482d      	ldr	r0, [pc, #180]	@ (800108c <led_service_init+0x168>)
 8000fd8:	f006 fa32 	bl	8007440 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00c      	beq.n	8000ffc <led_service_init+0xd8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 8000fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8001094 <led_service_init+0x170>)
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <led_service_init+0x174>)
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <led_service_init+0x178>)
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	f06f 0203 	mvn.w	r2, #3
 8000ff2:	2164      	movs	r1, #100	@ 0x64
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 f999 	bl	800132c <log_event_auto>
        return;
 8000ffa:	e041      	b.n	8001080 <led_service_init+0x15c>
    }

    TIM_OC_InitTypeDef oc = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	@ 0x60
 8001010:	607b      	str	r3, [r7, #4]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    oc.Pulse = 0u;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	4816      	ldr	r0, [pc, #88]	@ (800108c <led_service_init+0x168>)
 8001032:	f006 ff93 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00c      	beq.n	8001056 <led_service_init+0x132>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 800103c:	4a15      	ldr	r2, [pc, #84]	@ (8001094 <led_service_init+0x170>)
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <led_service_init+0x17c>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <led_service_init+0x178>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4613      	mov	r3, r2
 8001048:	f06f 0203 	mvn.w	r2, #3
 800104c:	2164      	movs	r1, #100	@ 0x64
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f96c 	bl	800132c <log_event_auto>
        return;
 8001054:	e014      	b.n	8001080 <led_service_init+0x15c>
    }

    if (led_pwm_start() != HAL_OK) {
 8001056:	f7ff ff55 	bl	8000f04 <led_pwm_start>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <led_service_init+0x156>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001060:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <led_service_init+0x170>)
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <led_service_init+0x180>)
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <led_service_init+0x178>)
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	f06f 0203 	mvn.w	r2, #3
 8001070:	2164      	movs	r1, #100	@ 0x64
 8001072:	2001      	movs	r0, #1
 8001074:	f000 f95a 	bl	800132c <log_event_auto>
        return;
 8001078:	e002      	b.n	8001080 <led_service_init+0x15c>
    }

    led_force_off(&g_leds[0]);
 800107a:	4803      	ldr	r0, [pc, #12]	@ (8001088 <led_service_init+0x164>)
 800107c:	f7ff fe98 	bl	8000db0 <led_force_off>
}
 8001080:	3738      	adds	r7, #56	@ 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	20000b38 	.word	0x20000b38
 8001090:	40014000 	.word	0x40014000
 8001094:	0800bea0 	.word	0x0800bea0
 8001098:	0800bee0 	.word	0x0800bee0
 800109c:	0800bf04 	.word	0x0800bf04
 80010a0:	0800bf0c 	.word	0x0800bf0c
 80010a4:	0800bf34 	.word	0x0800bf34

080010a8 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b095      	sub	sp, #84	@ 0x54
 80010ac:	af0a      	add	r7, sp, #40	@ 0x28
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
    led_ctrl_req_t req;
    if (!frame)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80b7 	beq.w	8001228 <led_on_led_ctrl+0x180>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d902      	bls.n	80010c6 <led_on_led_ctrl+0x1e>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010c4:	d90e      	bls.n	80010e4 <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 80010c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001230 <led_on_led_ctrl+0x188>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	4b59      	ldr	r3, [pc, #356]	@ (8001234 <led_on_led_ctrl+0x18c>)
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b59      	ldr	r3, [pc, #356]	@ (8001238 <led_on_led_ctrl+0x190>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	4613      	mov	r3, r2
 80010d6:	f06f 0203 	mvn.w	r2, #3
 80010da:	2164      	movs	r1, #100	@ 0x64
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 f925 	bl	800132c <log_event_auto>
        return;
 80010e2:	e0a2      	b.n	800122a <led_on_led_ctrl+0x182>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	461a      	mov	r2, r3
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff faa5 	bl	800063c <led_ctrl_req_decoder>
 80010f2:	4603      	mov	r3, r0
 80010f4:	77fb      	strb	r3, [r7, #31]
    if (decode_status != PROTO_OK) {
 80010f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00f      	beq.n	800111e <led_on_led_ctrl+0x76>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 80010fe:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001102:	494b      	ldr	r1, [pc, #300]	@ (8001230 <led_on_led_ctrl+0x188>)
 8001104:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <led_on_led_ctrl+0x194>)
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <led_on_led_ctrl+0x198>)
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	460b      	mov	r3, r1
 8001114:	2164      	movs	r1, #100	@ 0x64
 8001116:	2001      	movs	r0, #1
 8001118:	f000 f908 	bl	800132c <log_event_auto>
        return;
 800111c:	e085      	b.n	800122a <led_on_led_ctrl+0x182>
    }

    const uint8_t requested_mask = req.ledMask;
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	77bb      	strb	r3, [r7, #30]
    const uint8_t valid_mask = LED_MASK_LED1;
 8001122:	2301      	movs	r3, #1
 8001124:	777b      	strb	r3, [r7, #29]
    uint8_t ack_mask = 0u;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t status = PROTO_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	e02c      	b.n	8001192 <led_on_led_ctrl+0xea>
        uint8_t mask_bit = LED_MASK_LED1;
 8001138:	2301      	movs	r3, #1
 800113a:	773b      	strb	r3, [r7, #28]
        if ((requested_mask & mask_bit) == 0u) {
 800113c:	7fba      	ldrb	r2, [r7, #30]
 800113e:	7f3b      	ldrb	r3, [r7, #28]
 8001140:	4013      	ands	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <led_on_led_ctrl+0xe2>
            continue;
        }
        ack_mask |= mask_bit;
 8001148:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800114c:	7f3b      	ldrb	r3, [r7, #28]
 800114e:	4313      	orrs	r3, r2
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8001154:	6a3a      	ldr	r2, [r7, #32]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4a39      	ldr	r2, [pc, #228]	@ (8001244 <led_on_led_ctrl+0x19c>)
 8001160:	1898      	adds	r0, r3, r2
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3320      	adds	r3, #32
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	4413      	add	r3, r2
 800116e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	3320      	adds	r3, #32
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	4413      	add	r3, r2
 800117e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001182:	461a      	mov	r2, r3
 8001184:	f7ff fe88 	bl	8000e98 <led_apply_config>
 8001188:	e000      	b.n	800118c <led_on_led_ctrl+0xe4>
            continue;
 800118a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	3301      	adds	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0cf      	beq.n	8001138 <led_on_led_ctrl+0x90>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8001198:	7f7b      	ldrb	r3, [r7, #29]
 800119a:	43db      	mvns	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	7fbb      	ldrb	r3, [r7, #30]
 80011a0:	4013      	ands	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <led_on_led_ctrl+0x108>
        status = PROTO_WARN;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80011ae:	e009      	b.n	80011c4 <led_on_led_ctrl+0x11c>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 80011b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <led_on_led_ctrl+0x11c>
 80011b8:	7fbb      	ldrb	r3, [r7, #30]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <led_on_led_ctrl+0x11c>
        status = PROTO_WARN;
 80011be:	2301      	movs	r3, #1
 80011c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    led_push_response(req.frameId, ack_mask, status);
 80011c4:	7d3b      	ldrb	r3, [r7, #20]
 80011c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80011ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fd34 	bl	8000c3c <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 80011d4:	f897 4026 	ldrb.w	r4, [r7, #38]	@ 0x26
 80011d8:	4d15      	ldr	r5, [pc, #84]	@ (8001230 <led_on_led_ctrl+0x188>)
 80011da:	7fbb      	ldrb	r3, [r7, #30]
 80011dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011e0:	4918      	ldr	r1, [pc, #96]	@ (8001244 <led_on_led_ctrl+0x19c>)
 80011e2:	7989      	ldrb	r1, [r1, #6]
 80011e4:	460e      	mov	r6, r1
 80011e6:	4917      	ldr	r1, [pc, #92]	@ (8001244 <led_on_led_ctrl+0x19c>)
 80011e8:	8909      	ldrh	r1, [r1, #8]
 80011ea:	6079      	str	r1, [r7, #4]
 80011ec:	4915      	ldr	r1, [pc, #84]	@ (8001244 <led_on_led_ctrl+0x19c>)
 80011ee:	79c9      	ldrb	r1, [r1, #7]
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	4915      	ldr	r1, [pc, #84]	@ (8001248 <led_on_led_ctrl+0x1a0>)
 80011f4:	6809      	ldr	r1, [r1, #0]
 80011f6:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80011f8:	3101      	adds	r1, #1
 80011fa:	4813      	ldr	r0, [pc, #76]	@ (8001248 <led_on_led_ctrl+0x1a0>)
 80011fc:	6800      	ldr	r0, [r0, #0]
 80011fe:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001200:	9008      	str	r0, [sp, #32]
 8001202:	9107      	str	r1, [sp, #28]
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	9006      	str	r0, [sp, #24]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	9105      	str	r1, [sp, #20]
 800120c:	9604      	str	r6, [sp, #16]
 800120e:	9203      	str	r2, [sp, #12]
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <led_on_led_ctrl+0x1a4>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <led_on_led_ctrl+0x1a8>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	462b      	mov	r3, r5
 800121c:	4622      	mov	r2, r4
 800121e:	2102      	movs	r1, #2
 8001220:	2001      	movs	r0, #1
 8001222:	f000 f883 	bl	800132c <log_event_auto>
 8001226:	e000      	b.n	800122a <led_on_led_ctrl+0x182>
        return;
 8001228:	bf00      	nop
              "reqMask=0x%02X ackMask=0x%02X LED1(mode=%u,f=%uHz,on=%u,ARR=%lu,CCR=%lu)",
              (unsigned)requested_mask, (unsigned)ack_mask,
              g_leds[0].mode, g_leds[0].frequency_hz, g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
}
 800122a:	372c      	adds	r7, #44	@ 0x2c
 800122c:	46bd      	mov	sp, r7
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	0800bea0 	.word	0x0800bea0
 8001234:	0800bf54 	.word	0x0800bf54
 8001238:	0800bf70 	.word	0x0800bf70
 800123c:	0800bf74 	.word	0x0800bf74
 8001240:	0800bf98 	.word	0x0800bf98
 8001244:	20000000 	.word	0x20000000
 8001248:	20000b38 	.word	0x20000b38
 800124c:	0800bfa0 	.word	0x0800bfa0
 8001250:	0800bfec 	.word	0x0800bfec

08001254 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <log_service_init+0x18>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6898      	ldr	r0, [r3, #8]
 800125e:	2300      	movs	r3, #0
 8001260:	2202      	movs	r2, #2
 8001262:	2100      	movs	r1, #0
 8001264:	f009 fda4 	bl	800adb0 <setvbuf>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000028 	.word	0x20000028

08001270 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	603a      	str	r2, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	460b      	mov	r3, r1
 800127e:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8001280:	79f9      	ldrb	r1, [r7, #7]
 8001282:	79ba      	ldrb	r2, [r7, #6]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	4803      	ldr	r0, [pc, #12]	@ (8001294 <log_event_ids+0x24>)
 8001288:	f009 fd80 	bl	800ad8c <iprintf>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800bff4 	.word	0x0800bff4

08001298 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <log_event_names+0x16>
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <log_event_names+0x40>)
 80012ac:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <log_event_names+0x20>
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <log_event_names+0x40>)
 80012b6:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <log_event_names+0x2a>
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <log_event_names+0x40>)
 80012c0:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <log_event_names+0x44>)
 80012ca:	f009 fd5f 	bl	800ad8c <iprintf>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800c014 	.word	0x0800c014
 80012dc:	0800c018 	.word	0x0800c018

080012e0 <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <_write+0x18>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d111      	bne.n	800131c <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	4809      	ldr	r0, [pc, #36]	@ (8001328 <_write+0x48>)
 8001304:	f008 fce4 	bl	8009cd0 <HAL_UART_Transmit>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <_write+0x36>
        return len;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	e004      	b.n	8001320 <_write+0x40>
      else
        return -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e001      	b.n	8001320 <_write+0x40>
    }
    return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000b84 	.word	0x20000b84

0800132c <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 800132c:	b580      	push	{r7, lr}
 800132e:	b0a8      	sub	sp, #160	@ 0xa0
 8001330:	af00      	add	r7, sp, #0
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	460b      	mov	r3, r1
 800133c:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 800133e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001342:	2b00      	cmp	r3, #0
 8001344:	d010      	beq.n	8001368 <log_event_auto+0x3c>
 8001346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001350:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001354:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001356:	f107 0018 	add.w	r0, r7, #24
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001360:	2180      	movs	r1, #128	@ 0x80
 8001362:	f009 fe4b 	bl	800affc <vsniprintf>
    if(fmt && fmt[0]){
 8001366:	e003      	b.n	8001370 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001368:	233f      	movs	r3, #63	@ 0x3f
 800136a:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 800136c:	2300      	movs	r3, #0
 800136e:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <log_event_auto+0x4e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	e000      	b.n	800137c <log_event_auto+0x50>
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <log_event_auto+0x84>)
 800137c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8001380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <log_event_auto+0x62>
 8001388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800138c:	e000      	b.n	8001390 <log_event_auto+0x64>
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <log_event_auto+0x84>)
 8001390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800139c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <log_event_auto+0x88>)
 80013a2:	f009 fcf3 	bl	800ad8c <iprintf>
}
 80013a6:	bf00      	nop
 80013a8:	37a0      	adds	r7, #160	@ 0xa0
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800c014 	.word	0x0800c014
 80013b4:	0800c018 	.word	0x0800c018

080013b8 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af04      	add	r7, sp, #16
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <motion_on_move_queue_add+0x50>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <motion_on_move_queue_add+0x50>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <motion_on_move_queue_add+0x50>)
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <motion_on_move_queue_add+0x50>)
 80013de:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 80013e0:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <motion_on_move_queue_add+0x54>)
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <motion_on_move_queue_add+0x50>)
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <motion_on_move_queue_add+0x58>)
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <motion_on_move_queue_add+0x5c>)
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4613      	mov	r3, r2
 80013f4:	2200      	movs	r2, #0
 80013f6:	2101      	movs	r1, #1
 80013f8:	2002      	movs	r0, #2
 80013fa:	f7ff ff97 	bl	800132c <log_event_auto>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000b4 	.word	0x200000b4
 800140c:	0800c03c 	.word	0x0800c03c
 8001410:	0800c054 	.word	0x0800c054
 8001414:	0800c064 	.word	0x0800c064

08001418 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 8001422:	4a0c      	ldr	r2, [pc, #48]	@ (8001454 <motion_on_move_queue_status+0x3c>)
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <motion_on_move_queue_status+0x40>)
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <motion_on_move_queue_status+0x40>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	9303      	str	r3, [sp, #12]
 8001434:	9102      	str	r1, [sp, #8]
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <motion_on_move_queue_status+0x44>)
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <motion_on_move_queue_status+0x48>)
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	4613      	mov	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff ff71 	bl	800132c <log_event_auto>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800c03c 	.word	0x0800c03c
 8001458:	200000b4 	.word	0x200000b4
 800145c:	0800c070 	.word	0x0800c070
 8001460:	0800c088 	.word	0x0800c088

08001464 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af04      	add	r7, sp, #16
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <motion_on_start_move+0x4c>)
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <motion_on_start_move+0x4c>)
 800147a:	2202      	movs	r2, #2
 800147c:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800147e:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <motion_on_start_move+0x50>)
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <motion_on_start_move+0x4c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d101      	bne.n	800148e <motion_on_start_move+0x2a>
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <motion_on_start_move+0x54>)
 800148c:	e000      	b.n	8001490 <motion_on_start_move+0x2c>
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <motion_on_start_move+0x58>)
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <motion_on_start_move+0x5c>)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <motion_on_start_move+0x60>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	2200      	movs	r2, #0
 800149e:	2102      	movs	r1, #2
 80014a0:	2002      	movs	r0, #2
 80014a2:	f7ff ff43 	bl	800132c <log_event_auto>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000b4 	.word	0x200000b4
 80014b4:	0800c03c 	.word	0x0800c03c
 80014b8:	0800c098 	.word	0x0800c098
 80014bc:	0800c0a0 	.word	0x0800c0a0
 80014c0:	0800c048 	.word	0x0800c048
 80014c4:	0800c0a8 	.word	0x0800c0a8

080014c8 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <motion_on_move_end+0x34>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 80014d8:	4a09      	ldr	r2, [pc, #36]	@ (8001500 <motion_on_move_end+0x38>)
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <motion_on_move_end+0x3c>)
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <motion_on_move_end+0x40>)
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <motion_on_move_end+0x44>)
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	2102      	movs	r1, #2
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff ff1d 	bl	800132c <log_event_auto>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000b4 	.word	0x200000b4
 8001500:	0800c03c 	.word	0x0800c03c
 8001504:	0800c0b4 	.word	0x0800c0b4
 8001508:	0800c048 	.word	0x0800c048
 800150c:	0800c0c0 	.word	0x0800c0c0

08001510 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af04      	add	r7, sp, #16
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <probe_on_move_probe_level+0x2c>)
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <probe_on_move_probe_level+0x30>)
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <probe_on_move_probe_level+0x34>)
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <probe_on_move_probe_level+0x38>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	2200      	movs	r2, #0
 800152c:	2101      	movs	r1, #1
 800152e:	2004      	movs	r0, #4
 8001530:	f7ff fefc 	bl	800132c <log_event_auto>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0800c0cc 	.word	0x0800c0cc
 8001540:	0800c0e4 	.word	0x0800c0e4
 8001544:	0800c0d8 	.word	0x0800c0d8
 8001548:	0800c0f4 	.word	0x0800c0f4

0800154c <test_spi_service_init>:
#include <string.h>
#include "Services/Test/test_spi_service.h"
#include "Protocol/frame_defs.h"
#include "app.h"

 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
#define TEST_SPI_HELLO_SUFFIX_LEN 4u
#define TEST_SPI_HELLO_MIN_REQ_LEN 7u
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <test_spi_send_hello>:

static const uint8_t k_test_spi_hello_suffix[TEST_SPI_HELLO_SUFFIX_LEN] = {
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
    'e', 'l', 'l', 'o'
};
 8001560:	23ab      	movs	r3, #171	@ 0xab
 8001562:	703b      	strb	r3, [r7, #0]

 8001564:	2368      	movs	r3, #104	@ 0x68
 8001566:	707b      	strb	r3, [r7, #1]
void test_spi_service_init(void) {
 8001568:	2365      	movs	r3, #101	@ 0x65
 800156a:	70bb      	strb	r3, [r7, #2]
    // Nada a inicializar por ora
 800156c:	236c      	movs	r3, #108	@ 0x6c
 800156e:	70fb      	strb	r3, [r7, #3]
}
 8001570:	236c      	movs	r3, #108	@ 0x6c
 8001572:	713b      	strb	r3, [r7, #4]

 8001574:	236f      	movs	r3, #111	@ 0x6f
 8001576:	717b      	strb	r3, [r7, #5]
int test_spi_send_hello(void) {
 8001578:	2354      	movs	r3, #84	@ 0x54
 800157a:	71bb      	strb	r3, [r7, #6]
    uint8_t frame[TEST_SPI_HELLO_MIN_REQ_LEN];
 800157c:	463b      	mov	r3, r7
 800157e:	2107      	movs	r1, #7
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f9c9 	bl	8001918 <app_resp_push>
 8001586:	4603      	mov	r3, r0
    frame[0] = RESP_HEADER;          // 0xAB
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff ff0a 	bl	80013b8 <motion_on_move_queue_add>
	motion_on_move_queue_add(f, l);
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <h_move_queue_status>:
}
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	68b8      	ldr	r0, [r7, #8]
 80015bc:	f7ff ff2c 	bl	8001418 <motion_on_move_queue_status>
	motion_on_move_queue_status(f, l);
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <h_start_move>:
}
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f7ff ff44 	bl	8001464 <motion_on_start_move>
	motion_on_start_move(f, l);
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <h_move_home>:
}
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7ff fb04 	bl	8000c00 <home_on_move_home>
	home_on_move_home(f, l);
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <h_move_probe_level>:
}
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	68b8      	ldr	r0, [r7, #8]
 8001610:	f7ff ff7e 	bl	8001510 <probe_on_move_probe_level>
	probe_on_move_probe_level(f, l);
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <h_move_end>:
}
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	68b8      	ldr	r0, [r7, #8]
 800162c:	f7ff ff4c 	bl	80014c8 <motion_on_move_end>
	motion_on_move_end(f, l);
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <h_led_ctrl>:
}
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68b8      	ldr	r0, [r7, #8]
 8001648:	f7ff fd2e 	bl	80010a8 <led_on_led_ctrl>
	led_on_led_ctrl(f, l);
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <h_fpga_status>:
}
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
        (void) r;
        (void) f;
        (void) l; /* opcional */
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <services_register_handlers>:
}

 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d018      	beq.n	80016ac <services_register_handlers+0x40>
        (void) r;
        test_spi_on_hello(f, l);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a0e      	ldr	r2, [pc, #56]	@ (80016b8 <services_register_handlers+0x4c>)
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <services_register_handlers+0x50>)
 8001684:	605a      	str	r2, [r3, #4]

 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <services_register_handlers+0x54>)
 800168a:	609a      	str	r2, [r3, #8]
void services_register_handlers(router_handlers_t *h) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <services_register_handlers+0x58>)
 8001690:	60da      	str	r2, [r3, #12]
        if (!h)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <services_register_handlers+0x5c>)
 8001696:	611a      	str	r2, [r3, #16]
                return;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <services_register_handlers+0x60>)
 800169c:	615a      	str	r2, [r3, #20]
        h->on_move_queue_add = h_move_queue_add;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <services_register_handlers+0x64>)
 80016a2:	619a      	str	r2, [r3, #24]
	h->on_move_queue_status = h_move_queue_status;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <services_register_handlers+0x68>)
 80016a8:	61da      	str	r2, [r3, #28]
 80016aa:	e000      	b.n	80016ae <services_register_handlers+0x42>
        (void) r;
 80016ac:	bf00      	nop
	h->on_start_move = h_start_move;
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	08001591 	.word	0x08001591
 80016bc:	080015ad 	.word	0x080015ad
 80016c0:	080015c9 	.word	0x080015c9
 80016c4:	080015e5 	.word	0x080015e5
 80016c8:	08001601 	.word	0x08001601
 80016cc:	0800161d 	.word	0x0800161d
 80016d0:	08001639 	.word	0x08001639
 80016d4:	08001655 	.word	0x08001655

080016d8 <app_spi_clean_dcache>:
    uintptr_t start = app_spi_cache_align_down((uintptr_t)addr);
    uintptr_t end = app_spi_cache_align_up((uintptr_t)addr + (uintptr_t)len);
    SCB_CleanDCache_by_Addr((uint32_t *)start, (int32_t)(end - start));
}
#else
static void app_spi_clean_dcache(void *addr, uint32_t len) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    (void)addr;
    (void)len;
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <app_spi_invalidate_dcache>:
    uintptr_t start = app_spi_cache_align_down((uintptr_t)addr);
    uintptr_t end = app_spi_cache_align_up((uintptr_t)addr + (uintptr_t)len);
    SCB_InvalidateDCache_by_Addr((uint32_t *)start, (int32_t)(end - start));
}
#else
static void app_spi_invalidate_dcache(void *addr, uint32_t len) {
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    (void)addr;
    (void)len;
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <app_init>:
    return (addr + ((uintptr_t)APP_SPI_DCACHE_LINE_SIZE - 1u)) &
           ~((uintptr_t)APP_SPI_DCACHE_LINE_SIZE - 1u);
}
#endif

void app_init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af04      	add	r7, sp, #16
    led_service_init();
 800170a:	f7ff fc0b 	bl	8000f24 <led_service_init>
    log_service_init();
 800170e:	f7ff fda1 	bl	8001254 <log_service_init>
    test_spi_service_init();
 8001712:	f7ff ff1b 	bl	800154c <test_spi_service_init>
    LOGT_THIS(LOG_STATE_START, PROTO_OK, "start", "ready");
 8001716:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <app_init+0x8c>)
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <app_init+0x90>)
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <app_init+0x94>)
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <app_init+0x98>)
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fdfe 	bl	800132c <log_event_auto>

    g_resp_fifo = resp_fifo_create();
 8001730:	f7ff f9bf 	bl	8000ab2 <resp_fifo_create>
 8001734:	4603      	mov	r3, r0
 8001736:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <app_init+0x9c>)
 8001738:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 800173a:	2224      	movs	r2, #36	@ 0x24
 800173c:	2100      	movs	r1, #0
 800173e:	4819      	ldr	r0, [pc, #100]	@ (80017a4 <app_init+0xa0>)
 8001740:	f009 fc6a 	bl	800b018 <memset>
    services_register_handlers(&g_handlers);
 8001744:	4817      	ldr	r0, [pc, #92]	@ (80017a4 <app_init+0xa0>)
 8001746:	f7ff ff91 	bl	800166c <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <app_init+0x9c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <app_init+0xa0>)
 8001750:	4619      	mov	r1, r3
 8001752:	4815      	ldr	r0, [pc, #84]	@ (80017a8 <app_init+0xa4>)
 8001754:	f7ff f84e 	bl	80007f4 <router_init>

    app_spi_queue_reset();
 8001758:	f000 f8fe 	bl	8001958 <app_spi_queue_reset>
    g_spi_next_status = APP_SPI_STATUS_READY;
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <app_init+0xa8>)
 800175e:	22a5      	movs	r2, #165	@ 0xa5
 8001760:	701a      	strb	r2, [r3, #0]
    app_spi_prime_tx_buffer(g_spi_next_status);
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <app_init+0xa8>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f915 	bl	8001998 <app_spi_prime_tx_buffer>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, g_spi_tx_dma_buf, g_spi_rx_dma_buf,
 800176e:	232a      	movs	r3, #42	@ 0x2a
 8001770:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <app_init+0xac>)
 8001772:	4910      	ldr	r1, [pc, #64]	@ (80017b4 <app_init+0xb0>)
 8001774:	4810      	ldr	r0, [pc, #64]	@ (80017b8 <app_init+0xb4>)
 8001776:	f004 ff5b 	bl	8006630 <HAL_SPI_TransmitReceive_DMA>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <app_init+0x82>
                                    (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_need_restart = 1u;
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <app_init+0xb8>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
    }

    (void)test_spi_send_hello();
 8001786:	f7ff fee8 	bl	800155a <test_spi_send_hello>
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	0800c108 	.word	0x0800c108
 8001794:	0800c10c 	.word	0x0800c10c
 8001798:	0800c114 	.word	0x0800c114
 800179c:	0800c118 	.word	0x0800c118
 80017a0:	20000128 	.word	0x20000128
 80017a4:	20000104 	.word	0x20000104
 80017a8:	200000bc 	.word	0x200000bc
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	2000012c 	.word	0x2000012c
 80017b4:	20000158 	.word	0x20000158
 80017b8:	200008c4 	.word	0x200008c4
 80017bc:	20000182 	.word	0x20000182

080017c0 <app_poll>:

void app_poll(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0a0      	sub	sp, #128	@ 0x80
 80017c4:	af04      	add	r7, sp, #16
    app_spi_try_restart_dma();
 80017c6:	f000 f943 	bl	8001a50 <app_spi_try_restart_dma>

    app_spi_frame_t frame;
    while (app_spi_queue_pop(&frame) == 0) {
 80017ca:	e008      	b.n	80017de <app_poll+0x1e>
        router_feed_bytes(&g_router, frame.data, frame.len);
 80017cc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80017d0:	461a      	mov	r2, r3
 80017d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d6:	4619      	mov	r1, r3
 80017d8:	4822      	ldr	r0, [pc, #136]	@ (8001864 <app_poll+0xa4>)
 80017da:	f7ff f91f 	bl	8000a1c <router_feed_bytes>
    while (app_spi_queue_pop(&frame) == 0) {
 80017de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9f8 	bl	8001bd8 <app_spi_queue_pop>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0ee      	beq.n	80017cc <app_poll+0xc>
    }

    app_spi_try_restart_dma();
 80017ee:	f000 f92f 	bl	8001a50 <app_spi_try_restart_dma>

    if (!g_spi_tx_busy && g_resp_fifo) {
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <app_poll+0xa8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11b      	bne.n	8001832 <app_poll+0x72>
 80017fa:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <app_poll+0xac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d017      	beq.n	8001832 <app_poll+0x72>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 8001802:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <app_poll+0xac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4639      	mov	r1, r7
 8001808:	2240      	movs	r2, #64	@ 0x40
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f9b3 	bl	8000b76 <resp_fifo_pop>
 8001810:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (n > 0) {
 8001812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0c      	ble.n	8001832 <app_poll+0x72>
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 8001818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800181a:	b29a      	uxth	r2, r3
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4813      	ldr	r0, [pc, #76]	@ (8001870 <app_poll+0xb0>)
 8001822:	f004 fe6f 	bl	8006504 <HAL_SPI_Transmit_IT>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <app_poll+0x72>
                g_spi_tx_busy = 1;
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <app_poll+0xa8>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
            }
        }
    }

    if (g_spi_rx_overflow) {
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <app_poll+0xb4>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00f      	beq.n	800185c <app_poll+0x9c>
        g_spi_rx_overflow = 0u;
 800183c:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <app_poll+0xb4>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
        LOGT_THIS(LOG_STATE_ERROR, PROTO_WARN, "spi_rx", "overflow");
 8001842:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <app_poll+0xb8>)
 8001844:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <app_poll+0xbc>)
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <app_poll+0xc0>)
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <app_poll+0xc4>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	2201      	movs	r2, #1
 8001854:	2164      	movs	r1, #100	@ 0x64
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fd68 	bl	800132c <log_event_auto>
    }
}
 800185c:	bf00      	nop
 800185e:	3770      	adds	r7, #112	@ 0x70
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000bc 	.word	0x200000bc
 8001868:	200008c0 	.word	0x200008c0
 800186c:	20000128 	.word	0x20000128
 8001870:	200008c4 	.word	0x200008c4
 8001874:	200008bf 	.word	0x200008bf
 8001878:	0800c108 	.word	0x0800c108
 800187c:	0800c120 	.word	0x0800c120
 8001880:	0800c114 	.word	0x0800c114
 8001884:	0800c12c 	.word	0x0800c12c

08001888 <app_on_spi_txrx_half_complete>:

void app_on_spi_txrx_half_complete(SPI_HandleTypeDef *h) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <app_on_spi_txrx_half_complete+0x1e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <app_on_spi_txrx_half_complete+0x2c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d102      	bne.n	80018a6 <app_on_spi_txrx_half_complete+0x1e>
        /* Reserva o handshake para sinalizar BUSY até concluir o tratamento atual */
        g_spi_next_status = APP_SPI_STATUS_BUSY;
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <app_on_spi_txrx_half_complete+0x30>)
 80018a2:	225a      	movs	r2, #90	@ 0x5a
 80018a4:	701a      	strb	r2, [r3, #0]
    }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40013000 	.word	0x40013000
 80018b8:	2000000c 	.word	0x2000000c

080018bc <app_on_spi_txrx_complete>:

void app_on_spi_txrx_complete(SPI_HandleTypeDef *h) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <app_on_spi_txrx_complete+0x1c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <app_on_spi_txrx_complete+0x24>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <app_on_spi_txrx_complete+0x1c>
        app_spi_handle_txrx_complete();
 80018d4:	f000 f9da 	bl	8001c8c <app_spi_handle_txrx_complete>
    }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40013000 	.word	0x40013000

080018e4 <app_on_spi_tx_complete>:

void app_on_spi_tx_complete(SPI_HandleTypeDef *h) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <app_on_spi_tx_complete+0x1e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <app_on_spi_tx_complete+0x2c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d102      	bne.n	8001902 <app_on_spi_tx_complete+0x1e>
        g_spi_tx_busy = 0;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <app_on_spi_tx_complete+0x30>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
    }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40013000 	.word	0x40013000
 8001914:	200008c0 	.word	0x200008c0

08001918 <app_resp_push>:

int app_resp_push(const uint8_t *frame, uint32_t len) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0) {
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <app_resp_push+0x3c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <app_resp_push+0x1e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <app_resp_push+0x1e>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <app_resp_push+0x24>
        return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e007      	b.n	800194c <app_resp_push+0x34>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <app_resp_push+0x3c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f8c2 	bl	8000ace <resp_fifo_push>
 800194a:	4603      	mov	r3, r0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000128 	.word	0x20000128

08001958 <app_spi_queue_reset>:

static void app_spi_queue_reset(void) {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
    __disable_irq();
    g_spi_rx_queue_head = 0u;
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <app_spi_queue_reset+0x30>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_tail = 0u;
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <app_spi_queue_reset+0x34>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_count = 0u;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <app_spi_queue_reset+0x38>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
    g_spi_rx_overflow = 0u;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <app_spi_queue_reset+0x3c>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001978:	b662      	cpsie	i
}
 800197a:	bf00      	nop
    __enable_irq();
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200008bc 	.word	0x200008bc
 800198c:	200008bd 	.word	0x200008bd
 8001990:	200008be 	.word	0x200008be
 8001994:	200008bf 	.word	0x200008bf

08001998 <app_spi_prime_tx_buffer>:

static void app_spi_prime_tx_buffer(uint8_t status) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
    memset(g_spi_tx_dma_buf, status, APP_SPI_DMA_BUF_LEN);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	222a      	movs	r2, #42	@ 0x2a
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <app_spi_prime_tx_buffer+0x28>)
 80019aa:	f009 fb35 	bl	800b018 <memset>
    app_spi_clean_dcache(g_spi_tx_dma_buf, APP_SPI_DMA_BUF_LEN);
 80019ae:	212a      	movs	r1, #42	@ 0x2a
 80019b0:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <app_spi_prime_tx_buffer+0x28>)
 80019b2:	f7ff fe91 	bl	80016d8 <app_spi_clean_dcache>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000158 	.word	0x20000158

080019c4 <app_spi_compute_status>:

static uint8_t app_spi_compute_status(void) {
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    return (g_spi_rx_queue_count >= APP_SPI_RX_QUEUE_DEPTH)
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <app_spi_compute_status+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
               ? APP_SPI_STATUS_BUSY
               : APP_SPI_STATUS_READY;
 80019ce:	2b29      	cmp	r3, #41	@ 0x29
 80019d0:	d901      	bls.n	80019d6 <app_spi_compute_status+0x12>
 80019d2:	235a      	movs	r3, #90	@ 0x5a
 80019d4:	e000      	b.n	80019d8 <app_spi_compute_status+0x14>
 80019d6:	23a5      	movs	r3, #165	@ 0xa5
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200008be 	.word	0x200008be

080019e8 <app_spi_restart_dma>:

static void app_spi_restart_dma(uint8_t status) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 80019f2:	4812      	ldr	r0, [pc, #72]	@ (8001a3c <app_spi_restart_dma+0x54>)
 80019f4:	f005 f8de 	bl	8006bb4 <HAL_SPI_GetState>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <app_spi_restart_dma+0x1e>
        g_spi_need_restart = 1u;
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <app_spi_restart_dma+0x58>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
        return;
 8001a04:	e016      	b.n	8001a34 <app_spi_restart_dma+0x4c>
    }

    g_spi_next_status = status;
 8001a06:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <app_spi_restart_dma+0x5c>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	7013      	strb	r3, [r2, #0]
    app_spi_prime_tx_buffer(status);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffc2 	bl	8001998 <app_spi_prime_tx_buffer>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, g_spi_tx_dma_buf, g_spi_rx_dma_buf,
 8001a14:	232a      	movs	r3, #42	@ 0x2a
 8001a16:	4a0c      	ldr	r2, [pc, #48]	@ (8001a48 <app_spi_restart_dma+0x60>)
 8001a18:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <app_spi_restart_dma+0x64>)
 8001a1a:	4808      	ldr	r0, [pc, #32]	@ (8001a3c <app_spi_restart_dma+0x54>)
 8001a1c:	f004 fe08 	bl	8006630 <HAL_SPI_TransmitReceive_DMA>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <app_spi_restart_dma+0x46>
                                    (uint16_t)APP_SPI_DMA_BUF_LEN) == HAL_OK) {
        g_spi_need_restart = 0u;
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <app_spi_restart_dma+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e002      	b.n	8001a34 <app_spi_restart_dma+0x4c>
    } else {
        g_spi_need_restart = 1u;
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <app_spi_restart_dma+0x58>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
    }
}
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200008c4 	.word	0x200008c4
 8001a40:	20000182 	.word	0x20000182
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	2000012c 	.word	0x2000012c
 8001a4c:	20000158 	.word	0x20000158

08001a50 <app_spi_try_restart_dma>:

static void app_spi_try_restart_dma(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    if (!g_spi_need_restart) {
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <app_spi_try_restart_dma+0x30>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00c      	beq.n	8001a78 <app_spi_try_restart_dma+0x28>
        return;
    }
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001a5e:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <app_spi_try_restart_dma+0x34>)
 8001a60:	f005 f8a8 	bl	8006bb4 <HAL_SPI_GetState>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <app_spi_try_restart_dma+0x2c>
        return;
    }

    app_spi_restart_dma(g_spi_next_status);
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <app_spi_try_restart_dma+0x38>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ffb9 	bl	80019e8 <app_spi_restart_dma>
 8001a76:	e002      	b.n	8001a7e <app_spi_try_restart_dma+0x2e>
        return;
 8001a78:	bf00      	nop
 8001a7a:	e000      	b.n	8001a7e <app_spi_try_restart_dma+0x2e>
        return;
 8001a7c:	bf00      	nop
}
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000182 	.word	0x20000182
 8001a84:	200008c4 	.word	0x200008c4
 8001a88:	2000000c 	.word	0x2000000c

08001a8c <app_spi_locate_frame>:

static int app_spi_locate_frame(const uint8_t *buf, uint16_t *offset, uint16_t *len) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    if (!buf || !offset || !len || APP_SPI_DMA_BUF_LEN < 2u) {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <app_spi_locate_frame+0x1e>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <app_spi_locate_frame+0x1e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <app_spi_locate_frame+0x24>
        return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e03a      	b.n	8001b26 <app_spi_locate_frame+0x9a>
    }

    uint16_t start = 0u;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	82fb      	strh	r3, [r7, #22]
    while (start < APP_SPI_DMA_BUF_LEN && buf[start] != REQ_HEADER) {
 8001ab4:	e002      	b.n	8001abc <app_spi_locate_frame+0x30>
        ++start;
 8001ab6:	8afb      	ldrh	r3, [r7, #22]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	82fb      	strh	r3, [r7, #22]
    while (start < APP_SPI_DMA_BUF_LEN && buf[start] != REQ_HEADER) {
 8001abc:	8afb      	ldrh	r3, [r7, #22]
 8001abe:	2b29      	cmp	r3, #41	@ 0x29
 8001ac0:	d805      	bhi.n	8001ace <app_spi_locate_frame+0x42>
 8001ac2:	8afb      	ldrh	r3, [r7, #22]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2baa      	cmp	r3, #170	@ 0xaa
 8001acc:	d1f3      	bne.n	8001ab6 <app_spi_locate_frame+0x2a>
    }

    if (start > APP_SPI_DMA_BUF_LEN) {
 8001ace:	8afb      	ldrh	r3, [r7, #22]
 8001ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ad2:	d902      	bls.n	8001ada <app_spi_locate_frame+0x4e>
        return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	e025      	b.n	8001b26 <app_spi_locate_frame+0x9a>
    }

    for (uint16_t i = (uint16_t)(start + 1u); i < APP_SPI_DMA_BUF_LEN; ++i) {
 8001ada:	8afb      	ldrh	r3, [r7, #22]
 8001adc:	3301      	adds	r3, #1
 8001ade:	82bb      	strh	r3, [r7, #20]
 8001ae0:	e01c      	b.n	8001b1c <app_spi_locate_frame+0x90>
        if (buf[i] == REQ_TAIL) {
 8001ae2:	8abb      	ldrh	r3, [r7, #20]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b55      	cmp	r3, #85	@ 0x55
 8001aec:	d113      	bne.n	8001b16 <app_spi_locate_frame+0x8a>
            uint16_t frame_len = (uint16_t)(i - start + 1u);
 8001aee:	8aba      	ldrh	r2, [r7, #20]
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	827b      	strh	r3, [r7, #18]
            if (frame_len > APP_SPI_MAX_REQUEST_LEN) {
 8001afa:	8a7b      	ldrh	r3, [r7, #18]
 8001afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001afe:	d902      	bls.n	8001b06 <app_spi_locate_frame+0x7a>
                return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	e00f      	b.n	8001b26 <app_spi_locate_frame+0x9a>
            }
            *offset = start;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	8afa      	ldrh	r2, [r7, #22]
 8001b0a:	801a      	strh	r2, [r3, #0]
            *len = frame_len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8a7a      	ldrh	r2, [r7, #18]
 8001b10:	801a      	strh	r2, [r3, #0]
            return 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e007      	b.n	8001b26 <app_spi_locate_frame+0x9a>
    for (uint16_t i = (uint16_t)(start + 1u); i < APP_SPI_DMA_BUF_LEN; ++i) {
 8001b16:	8abb      	ldrh	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	82bb      	strh	r3, [r7, #20]
 8001b1c:	8abb      	ldrh	r3, [r7, #20]
 8001b1e:	2b29      	cmp	r3, #41	@ 0x29
 8001b20:	d9df      	bls.n	8001ae2 <app_spi_locate_frame+0x56>
        }
    }

    return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <app_spi_queue_push_isr>:

static int app_spi_queue_push_isr(const uint8_t *frame, uint16_t len) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
    if (!frame || len == 0u || len > APP_SPI_MAX_REQUEST_LEN) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <app_spi_queue_push_isr+0x1e>
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <app_spi_queue_push_isr+0x1e>
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b50:	d902      	bls.n	8001b58 <app_spi_queue_push_isr+0x24>
        return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e032      	b.n	8001bbe <app_spi_queue_push_isr+0x8a>
    }
    if (g_spi_rx_queue_count >= APP_SPI_RX_QUEUE_DEPTH) {
 8001b58:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <app_spi_queue_push_isr+0x94>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b29      	cmp	r3, #41	@ 0x29
 8001b60:	d902      	bls.n	8001b68 <app_spi_queue_push_isr+0x34>
        return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e02a      	b.n	8001bbe <app_spi_queue_push_isr+0x8a>
    }
    app_spi_frame_t *slot = &g_spi_rx_queue[g_spi_rx_queue_head];
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <app_spi_queue_push_isr+0x98>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	232c      	movs	r3, #44	@ 0x2c
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <app_spi_queue_push_isr+0x9c>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
    memcpy(slot->data, frame, len);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f009 fad3 	bl	800b12e <memcpy>
    slot->len = len;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    g_spi_rx_queue_head = (uint8_t)((g_spi_rx_queue_head + 1u) % APP_SPI_RX_QUEUE_DEPTH);
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <app_spi_queue_push_isr+0x98>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	0853      	lsrs	r3, r2, #1
 8001b98:	490e      	ldr	r1, [pc, #56]	@ (8001bd4 <app_spi_queue_push_isr+0xa0>)
 8001b9a:	fba1 1303 	umull	r1, r3, r1, r3
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	212a      	movs	r1, #42	@ 0x2a
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <app_spi_queue_push_isr+0x98>)
 8001bac:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_count++;
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <app_spi_queue_push_isr+0x94>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <app_spi_queue_push_isr+0x94>)
 8001bba:	701a      	strb	r2, [r3, #0]
    return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200008be 	.word	0x200008be
 8001bcc:	200008bc 	.word	0x200008bc
 8001bd0:	20000184 	.word	0x20000184
 8001bd4:	30c30c31 	.word	0x30c30c31

08001bd8 <app_spi_queue_pop>:

static int app_spi_queue_pop(app_spi_frame_t *out) {
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    int rc = -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001be6:	b672      	cpsid	i
}
 8001be8:	bf00      	nop
    __disable_irq();
    if (g_spi_rx_queue_count > 0u) {
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <app_spi_queue_pop+0xa4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03b      	beq.n	8001c6c <app_spi_queue_pop+0x94>
        if (out) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01f      	beq.n	8001c3a <app_spi_queue_pop+0x62>
            *out = g_spi_rx_queue[g_spi_rx_queue_tail];
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <app_spi_queue_pop+0xa8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4a1f      	ldr	r2, [pc, #124]	@ (8001c84 <app_spi_queue_pop+0xac>)
 8001c06:	232c      	movs	r3, #44	@ 0x2c
 8001c08:	fb00 f303 	mul.w	r3, r0, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	461c      	mov	r4, r3
 8001c10:	468c      	mov	ip, r1
 8001c12:	f104 0e20 	add.w	lr, r4, #32
 8001c16:	4665      	mov	r5, ip
 8001c18:	4626      	mov	r6, r4
 8001c1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c1c:	6028      	str	r0, [r5, #0]
 8001c1e:	6069      	str	r1, [r5, #4]
 8001c20:	60aa      	str	r2, [r5, #8]
 8001c22:	60eb      	str	r3, [r5, #12]
 8001c24:	3410      	adds	r4, #16
 8001c26:	f10c 0c10 	add.w	ip, ip, #16
 8001c2a:	4574      	cmp	r4, lr
 8001c2c:	d1f3      	bne.n	8001c16 <app_spi_queue_pop+0x3e>
 8001c2e:	4665      	mov	r5, ip
 8001c30:	4623      	mov	r3, r4
 8001c32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c34:	6028      	str	r0, [r5, #0]
 8001c36:	6069      	str	r1, [r5, #4]
 8001c38:	60aa      	str	r2, [r5, #8]
        }
        g_spi_rx_queue_tail = (uint8_t)((g_spi_rx_queue_tail + 1u) % APP_SPI_RX_QUEUE_DEPTH);
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <app_spi_queue_pop+0xa8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	0853      	lsrs	r3, r2, #1
 8001c44:	4910      	ldr	r1, [pc, #64]	@ (8001c88 <app_spi_queue_pop+0xb0>)
 8001c46:	fba1 1303 	umull	r1, r3, r1, r3
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	212a      	movs	r1, #42	@ 0x2a
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <app_spi_queue_pop+0xa8>)
 8001c58:	701a      	strb	r2, [r3, #0]
        g_spi_rx_queue_count--;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <app_spi_queue_pop+0xa4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <app_spi_queue_pop+0xa4>)
 8001c66:	701a      	strb	r2, [r3, #0]
        rc = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6c:	b662      	cpsie	i
}
 8001c6e:	bf00      	nop
    }
    __enable_irq();
    return rc;
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200008be 	.word	0x200008be
 8001c80:	200008bd 	.word	0x200008bd
 8001c84:	20000184 	.word	0x20000184
 8001c88:	30c30c31 	.word	0x30c30c31

08001c8c <app_spi_handle_txrx_complete>:

static void app_spi_handle_txrx_complete(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
    uint16_t offset = 0u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	80bb      	strh	r3, [r7, #4]
    uint16_t len = 0u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	807b      	strh	r3, [r7, #2]
    uint8_t armazenado = 0u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]

    app_spi_invalidate_dcache(g_spi_rx_dma_buf, APP_SPI_DMA_BUF_LEN);
 8001c9e:	212a      	movs	r1, #42	@ 0x2a
 8001ca0:	481c      	ldr	r0, [pc, #112]	@ (8001d14 <app_spi_handle_txrx_complete+0x88>)
 8001ca2:	f7ff fd24 	bl	80016ee <app_spi_invalidate_dcache>

    if (app_spi_locate_frame(g_spi_rx_dma_buf, &offset, &len) == 0) {
 8001ca6:	1cba      	adds	r2, r7, #2
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4819      	ldr	r0, [pc, #100]	@ (8001d14 <app_spi_handle_txrx_complete+0x88>)
 8001cae:	f7ff feed 	bl	8001a8c <app_spi_locate_frame>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d112      	bne.n	8001cde <app_spi_handle_txrx_complete+0x52>
        if (app_spi_queue_push_isr(&g_spi_rx_dma_buf[offset], len) == 0) {
 8001cb8:	88bb      	ldrh	r3, [r7, #4]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <app_spi_handle_txrx_complete+0x88>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	887a      	ldrh	r2, [r7, #2]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff35 	bl	8001b34 <app_spi_queue_push_isr>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <app_spi_handle_txrx_complete+0x4a>
            armazenado = 1u;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e006      	b.n	8001ce4 <app_spi_handle_txrx_complete+0x58>
        } else {
            g_spi_rx_overflow = 1u;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <app_spi_handle_txrx_complete+0x8c>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e002      	b.n	8001ce4 <app_spi_handle_txrx_complete+0x58>
        }
    } else {
        g_spi_rx_overflow = 1u;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <app_spi_handle_txrx_complete+0x8c>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
    }

    if (armazenado) {
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <app_spi_handle_txrx_complete+0x6c>
        g_spi_next_status = app_spi_compute_status();
 8001cea:	f7ff fe6b 	bl	80019c4 <app_spi_compute_status>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <app_spi_handle_txrx_complete+0x90>)
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e002      	b.n	8001cfe <app_spi_handle_txrx_complete+0x72>
    } else {
        g_spi_next_status = APP_SPI_STATUS_BUSY;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <app_spi_handle_txrx_complete+0x90>)
 8001cfa:	225a      	movs	r2, #90	@ 0x5a
 8001cfc:	701a      	strb	r2, [r3, #0]
    }

    app_spi_restart_dma(g_spi_next_status);
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <app_spi_handle_txrx_complete+0x90>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fe6f 	bl	80019e8 <app_spi_restart_dma>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000012c 	.word	0x2000012c
 8001d18:	200008bf 	.word	0x200008bf
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	@ 0x38
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2224      	movs	r2, #36	@ 0x24
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f009 f971 	bl	800b018 <memset>
    TIM_MasterConfigTypeDef master = {0};
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d42:	2303      	movs	r3, #3
 8001d44:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f005 fe2b 	bl	80079c8 <HAL_TIM_Encoder_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8001d78:	f000 faa6 	bl	80022c8 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f007 fc4c 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8001d96:	f000 fa97 	bl	80022c8 <Error_Handler>
    }
}
 8001d9a:	bf00      	nop
 8001d9c:	3738      	adds	r7, #56	@ 0x38
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b08a      	sub	sp, #40	@ 0x28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f001 fde3 	bl	80039a0 <HAL_GPIO_Init>
}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8001df8:	2203      	movs	r2, #3
 8001dfa:	2113      	movs	r1, #19
 8001dfc:	4824      	ldr	r0, [pc, #144]	@ (8001e90 <board_config_apply_motion_gpio+0xac>)
 8001dfe:	f7ff ffd0 	bl	8001da2 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001e02:	2203      	movs	r2, #3
 8001e04:	2104      	movs	r1, #4
 8001e06:	4822      	ldr	r0, [pc, #136]	@ (8001e90 <board_config_apply_motion_gpio+0xac>)
 8001e08:	f7ff ffcb 	bl	8001da2 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	210c      	movs	r1, #12
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e14:	f7ff ffc5 	bl	8001da2 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2130      	movs	r1, #48	@ 0x30
 8001e1c:	481d      	ldr	r0, [pc, #116]	@ (8001e94 <board_config_apply_motion_gpio+0xb0>)
 8001e1e:	f7ff ffc0 	bl	8001da2 <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e2c:	f7ff ffb9 	bl	8001da2 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2117      	movs	r1, #23
 8001e34:	4816      	ldr	r0, [pc, #88]	@ (8001e90 <board_config_apply_motion_gpio+0xac>)
 8001e36:	f002 f969 	bl	800410c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e42:	f002 f963 	bl	800410c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2130      	movs	r1, #48	@ 0x30
 8001e4a:	4812      	ldr	r0, [pc, #72]	@ (8001e94 <board_config_apply_motion_gpio+0xb0>)
 8001e4c:	f002 f95e 	bl	800410c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5a:	f002 f957 	bl	800410c <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e5e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001e62:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4808      	ldr	r0, [pc, #32]	@ (8001e94 <board_config_apply_motion_gpio+0xb0>)
 8001e72:	f001 fd95 	bl	80039a0 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 8001e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4804      	ldr	r0, [pc, #16]	@ (8001e94 <board_config_apply_motion_gpio+0xb0>)
 8001e82:	f001 fd8d 	bl	80039a0 <HAL_GPIO_Init>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800

08001e98 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <board_config_force_encoder_quadrature+0x1c>)
 8001e9e:	f7ff ff3f 	bl	8001d20 <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 8001ea2:	4805      	ldr	r0, [pc, #20]	@ (8001eb8 <board_config_force_encoder_quadrature+0x20>)
 8001ea4:	f7ff ff3c 	bl	8001d20 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8001ea8:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <board_config_force_encoder_quadrature+0x24>)
 8001eaa:	f7ff ff39 	bl	8001d20 <configure_encoder_timer>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200009bc 	.word	0x200009bc
 8001eb8:	20000a08 	.word	0x20000a08
 8001ebc:	20000a54 	.word	0x20000a54

08001ec0 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8001ed4:	2118      	movs	r1, #24
 8001ed6:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <board_config_remap_tim3_encoder_pins+0x5c>)
 8001ed8:	f001 ffee 	bl	8003eb8 <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <board_config_remap_tim3_encoder_pins+0x60>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <board_config_remap_tim3_encoder_pins+0x60>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <board_config_remap_tim3_encoder_pins+0x60>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001ef4:	23c0      	movs	r3, #192	@ 0xc0
 8001ef6:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 8001f04:	2302      	movs	r3, #2
 8001f06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <board_config_remap_tim3_encoder_pins+0x64>)
 8001f0e:	f001 fd47 	bl	80039a0 <HAL_GPIO_Init>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	48001000 	.word	0x48001000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000800 	.word	0x48000800

08001f28 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2006      	movs	r0, #6
 8001f32:	f001 f99f 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f36:	2006      	movs	r0, #6
 8001f38:	f001 f9c8 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2007      	movs	r0, #7
 8001f42:	f001 f997 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f46:	2007      	movs	r0, #7
 8001f48:	f001 f9c0 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2008      	movs	r0, #8
 8001f52:	f001 f98f 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f56:	2008      	movs	r0, #8
 8001f58:	f001 f9b8 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2028      	movs	r0, #40	@ 0x28
 8001f62:	f001 f987 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f66:	2028      	movs	r0, #40	@ 0x28
 8001f68:	f001 f9b0 	bl	80032cc <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2036      	movs	r0, #54	@ 0x36
 8001f72:	f001 f97f 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f76:	2036      	movs	r0, #54	@ 0x36
 8001f78:	f001 f9a8 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2102      	movs	r1, #2
 8001f80:	200c      	movs	r0, #12
 8001f82:	f001 f977 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f86:	200c      	movs	r0, #12
 8001f88:	f001 f9a0 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	200d      	movs	r0, #13
 8001f92:	f001 f96f 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f96:	200d      	movs	r0, #13
 8001f98:	f001 f998 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	2037      	movs	r0, #55	@ 0x37
 8001fa2:	f001 f967 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fa6:	2037      	movs	r0, #55	@ 0x37
 8001fa8:	f001 f990 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2104      	movs	r1, #4
 8001fb0:	2025      	movs	r0, #37	@ 0x25
 8001fb2:	f001 f95f 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fb6:	2025      	movs	r0, #37	@ 0x25
 8001fb8:	f001 f988 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2105      	movs	r1, #5
 8001fc0:	2023      	movs	r0, #35	@ 0x23
 8001fc2:	f001 f957 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fc6:	2023      	movs	r0, #35	@ 0x23
 8001fc8:	f001 f980 	bl	80032cc <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2106      	movs	r1, #6
 8001fd0:	2018      	movs	r0, #24
 8001fd2:	f001 f94f 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f001 f978 	bl	80032cc <HAL_NVIC_EnableIRQ>
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_DMA_Init+0x48>)
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <MX_DMA_Init+0x48>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <MX_DMA_Init+0x48>)
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	200c      	movs	r0, #12
 8002004:	f001 f936 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002008:	200c      	movs	r0, #12
 800200a:	f001 f95f 	bl	80032cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	200d      	movs	r0, #13
 8002014:	f001 f92e 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002018:	200d      	movs	r0, #13
 800201a:	f001 f957 	bl	80032cc <HAL_NVIC_EnableIRQ>

}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000

0800202c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	@ 0x30
 8002030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002042:	4b4d      	ldr	r3, [pc, #308]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4a4c      	ldr	r2, [pc, #304]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4b4a      	ldr	r3, [pc, #296]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <MX_GPIO_Init+0x14c>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	4a46      	ldr	r2, [pc, #280]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002066:	4b44      	ldr	r3, [pc, #272]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002072:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4a40      	ldr	r2, [pc, #256]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800207c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207e:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <MX_GPIO_Init+0x14c>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4a3a      	ldr	r2, [pc, #232]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <MX_GPIO_Init+0x14c>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b35      	ldr	r3, [pc, #212]	@ (8002178 <MX_GPIO_Init+0x14c>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	4a34      	ldr	r2, [pc, #208]	@ (8002178 <MX_GPIO_Init+0x14c>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ae:	4b32      	ldr	r3, [pc, #200]	@ (8002178 <MX_GPIO_Init+0x14c>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <MX_GPIO_Init+0x14c>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020be:	4a2e      	ldr	r2, [pc, #184]	@ (8002178 <MX_GPIO_Init+0x14c>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <MX_GPIO_Init+0x14c>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80020d2:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 80020d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4825      	ldr	r0, [pc, #148]	@ (800217c <MX_GPIO_Init+0x150>)
 80020e8:	f001 fc5a 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80020ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
 80020f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	481f      	ldr	r0, [pc, #124]	@ (8002180 <MX_GPIO_Init+0x154>)
 8002102:	f001 fc4d 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002106:	2303      	movs	r3, #3
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210a:	2303      	movs	r3, #3
 800210c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	481a      	ldr	r0, [pc, #104]	@ (8002184 <MX_GPIO_Init+0x158>)
 800211a:	f001 fc41 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800211e:	f641 7308 	movw	r3, #7944	@ 0x1f08
 8002122:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002136:	f001 fc33 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800213a:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 800213e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002140:	2303      	movs	r3, #3
 8002142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	480e      	ldr	r0, [pc, #56]	@ (8002188 <MX_GPIO_Init+0x15c>)
 8002150:	f001 fc26 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002154:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002158:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215a:	2303      	movs	r3, #3
 800215c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	4808      	ldr	r0, [pc, #32]	@ (800218c <MX_GPIO_Init+0x160>)
 800216a:	f001 fc19 	bl	80039a0 <HAL_GPIO_Init>

}
 800216e:	bf00      	nop
 8002170:	3730      	adds	r7, #48	@ 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	48001000 	.word	0x48001000
 8002180:	48000800 	.word	0x48000800
 8002184:	48001c00 	.word	0x48001c00
 8002188:	48000400 	.word	0x48000400
 800218c:	48000c00 	.word	0x48000c00

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f000 ff09 	bl	8002faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f821 	bl	80021de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219c:	f7ff ff46 	bl	800202c <MX_GPIO_Init>
  MX_DMA_Init();
 80021a0:	f7ff ff1e 	bl	8001fe0 <MX_DMA_Init>
  MX_SPI1_Init();
 80021a4:	f000 f8b4 	bl	8002310 <MX_SPI1_Init>
  MX_TIM6_Init();
 80021a8:	f000 fbcc 	bl	8002944 <MX_TIM6_Init>
  MX_TIM2_Init();
 80021ac:	f000 faca 	bl	8002744 <MX_TIM2_Init>
  MX_TIM5_Init();
 80021b0:	f000 fb72 	bl	8002898 <MX_TIM5_Init>
  MX_TIM7_Init();
 80021b4:	f000 fbfc 	bl	80029b0 <MX_TIM7_Init>
  MX_TIM3_Init();
 80021b8:	f000 fb18 	bl	80027ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80021bc:	f000 fe3e 	bl	8002e3c <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80021c0:	f000 fc2c 	bl	8002a1c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 80021c4:	f7ff fe0e 	bl	8001de4 <board_config_apply_motion_gpio>
    board_config_remap_tim3_encoder_pins();
 80021c8:	f7ff fe7a 	bl	8001ec0 <board_config_remap_tim3_encoder_pins>
    board_config_force_encoder_quadrature();
 80021cc:	f7ff fe64 	bl	8001e98 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 80021d0:	f7ff feaa 	bl	8001f28 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 80021d4:	f7ff fa96 	bl	8001704 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 80021d8:	f7ff faf2 	bl	80017c0 <app_poll>
 80021dc:	e7fc      	b.n	80021d8 <main+0x48>

080021de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b096      	sub	sp, #88	@ 0x58
 80021e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2244      	movs	r2, #68	@ 0x44
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f008 ff13 	bl	800b018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002200:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002204:	f001 ffe0 	bl	80041c8 <HAL_PWREx_ControlVoltageScaling>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800220e:	f000 f85b 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002212:	2310      	movs	r3, #16
 8002214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002216:	2301      	movs	r3, #1
 8002218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800221e:	2360      	movs	r3, #96	@ 0x60
 8002220:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002222:	2302      	movs	r3, #2
 8002224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002226:	2301      	movs	r3, #1
 8002228:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800222e:	2328      	movs	r3, #40	@ 0x28
 8002230:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002232:	2307      	movs	r3, #7
 8002234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002236:	2302      	movs	r3, #2
 8002238:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800223a:	2302      	movs	r3, #2
 800223c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4618      	mov	r0, r3
 8002244:	f002 f822 	bl	800428c <HAL_RCC_OscConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800224e:	f000 f83b 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002252:	230f      	movs	r3, #15
 8002254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002256:	2303      	movs	r3, #3
 8002258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800225e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	2104      	movs	r1, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fd0f 	bl	8004c90 <HAL_RCC_ClockConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002278:	f000 f826 	bl	80022c8 <Error_Handler>
  }
}
 800227c:	bf00      	nop
 800227e:	3758      	adds	r7, #88	@ 0x58
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_SPI_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  app_on_spi_txrx_half_complete(hspi);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fafb 	bl	8001888 <app_on_spi_txrx_half_complete>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  app_on_spi_txrx_complete(hspi);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fb0a 	bl	80018bc <app_on_spi_txrx_complete>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  app_on_spi_tx_complete(hspi);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fb13 	bl	80018e4 <app_on_spi_tx_complete>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	2164      	movs	r1, #100	@ 0x64
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7fe ffcc 	bl	8001270 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <Error_Handler+0x24>)
 80022da:	4905      	ldr	r1, [pc, #20]	@ (80022f0 <Error_Handler+0x28>)
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <Error_Handler+0x2c>)
 80022de:	f7fe ffdb 	bl	8001298 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 80022e2:	b672      	cpsid	i
}
 80022e4:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 80022e6:	bf00      	nop
 80022e8:	e7fd      	b.n	80022e6 <Error_Handler+0x1e>
 80022ea:	bf00      	nop
 80022ec:	0800c134 	.word	0x0800c134
 80022f0:	0800c144 	.word	0x0800c144
 80022f4:	0800c14c 	.word	0x0800c14c

080022f8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002316:	4a19      	ldr	r2, [pc, #100]	@ (800237c <MX_SPI1_Init+0x6c>)
 8002318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <MX_SPI1_Init+0x68>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002328:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800232c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002330:	2202      	movs	r2, #2
 8002332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002334:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <MX_SPI1_Init+0x68>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002340:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <MX_SPI1_Init+0x68>)
 800234e:	2200      	movs	r2, #0
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002354:	2207      	movs	r2, #7
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002358:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <MX_SPI1_Init+0x68>)
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002360:	2200      	movs	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <MX_SPI1_Init+0x68>)
 8002366:	f003 fedf 	bl	8006128 <HAL_SPI_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002370:	f7ff ffaa 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200008c4 	.word	0x200008c4
 800237c:	40013000 	.word	0x40013000

08002380 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a45      	ldr	r2, [pc, #276]	@ (80024b4 <HAL_SPI_MspInit+0x134>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f040 8083 	bne.w	80024aa <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a4:	4b44      	ldr	r3, [pc, #272]	@ (80024b8 <HAL_SPI_MspInit+0x138>)
 80023a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a8:	4a43      	ldr	r2, [pc, #268]	@ (80024b8 <HAL_SPI_MspInit+0x138>)
 80023aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_SPI_MspInit+0x138>)
 80023b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <HAL_SPI_MspInit+0x138>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c0:	4a3d      	ldr	r2, [pc, #244]	@ (80024b8 <HAL_SPI_MspInit+0x138>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c8:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_SPI_MspInit+0x138>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023d4:	23f0      	movs	r3, #240	@ 0xf0
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023e4:	2305      	movs	r3, #5
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f2:	f001 fad5 	bl	80039a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80023f6:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 80023f8:	4a31      	ldr	r2, [pc, #196]	@ (80024c0 <HAL_SPI_MspInit+0x140>)
 80023fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80023fc:	4b2f      	ldr	r3, [pc, #188]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 80023fe:	2201      	movs	r2, #1
 8002400:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002402:	4b2e      	ldr	r3, [pc, #184]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002408:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002414:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800241a:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002420:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002422:	2220      	movs	r2, #32
 8002424:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002426:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800242c:	4823      	ldr	r0, [pc, #140]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 800242e:	f000 ff71 	bl	8003314 <HAL_DMA_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002438:	f7ff ff46 	bl	80022c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002440:	659a      	str	r2, [r3, #88]	@ 0x58
 8002442:	4a1e      	ldr	r2, [pc, #120]	@ (80024bc <HAL_SPI_MspInit+0x13c>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 800244a:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <HAL_SPI_MspInit+0x148>)
 800244c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002450:	2201      	movs	r2, #1
 8002452:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002456:	2210      	movs	r2, #16
 8002458:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002460:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002462:	2280      	movs	r2, #128	@ 0x80
 8002464:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002466:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002474:	2220      	movs	r2, #32
 8002476:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800247e:	4811      	ldr	r0, [pc, #68]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002480:	f000 ff48 	bl	8003314 <HAL_DMA_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800248a:	f7ff ff1d 	bl	80022c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54
 8002494:	4a0b      	ldr	r2, [pc, #44]	@ (80024c4 <HAL_SPI_MspInit+0x144>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2023      	movs	r0, #35	@ 0x23
 80024a0:	f000 fee8 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024a4:	2023      	movs	r0, #35	@ 0x23
 80024a6:	f000 ff11 	bl	80032cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	@ 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40013000 	.word	0x40013000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	20000928 	.word	0x20000928
 80024c0:	4002001c 	.word	0x4002001c
 80024c4:	20000970 	.word	0x20000970
 80024c8:	40020030 	.word	0x40020030

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <HAL_MspInit+0x44>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002510 <HAL_MspInit+0x44>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024de:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <HAL_MspInit+0x44>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_MspInit+0x44>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <HAL_MspInit+0x44>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_MspInit+0x44>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <NMI_Handler+0x4>

0800251c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <MemManage_Handler+0x4>

0800252c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <UsageFault_Handler+0x4>

0800253c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256a:	f000 fd73 	bl	8003054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <DMA1_Channel2_IRQHandler+0x10>)
 800257a:	f001 f932 	bl	80037e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000928 	.word	0x20000928

08002588 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <DMA1_Channel3_IRQHandler+0x10>)
 800258e:	f001 f928 	bl	80037e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000970 	.word	0x20000970

0800259c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <SPI1_IRQHandler+0x10>)
 80025a2:	f004 f9e9 	bl	8006978 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200008c4 	.word	0x200008c4

080025b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <TIM6_DAC_IRQHandler+0x10>)
 80025b6:	f005 fbc9 	bl	8007d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000aa0 	.word	0x20000aa0

080025c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <TIM7_IRQHandler+0x10>)
 80025ca:	f005 fbbf 	bl	8007d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000aec 	.word	0x20000aec

080025d8 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80025dc:	2001      	movs	r0, #1
 80025de:	f001 fdc1 	bl	8004164 <HAL_GPIO_EXTI_IRQHandler>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80025ea:	2002      	movs	r0, #2
 80025ec:	f001 fdba 	bl	8004164 <HAL_GPIO_EXTI_IRQHandler>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80025f8:	2004      	movs	r0, #4
 80025fa:	f001 fdb3 	bl	8004164 <HAL_GPIO_EXTI_IRQHandler>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}

08002602 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002606:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800260a:	f001 fdab 	bl	8004164 <HAL_GPIO_EXTI_IRQHandler>
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}

08002612 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e00a      	b.n	800263a <_read+0x28>
		*ptr++ = __io_getchar();
 8002624:	f3af 8000 	nop.w
 8002628:	4601      	mov	r1, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	60ba      	str	r2, [r7, #8]
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	dbf0      	blt.n	8002624 <_read+0x12>
	}

	return len;
 8002642:	687b      	ldr	r3, [r7, #4]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002674:	605a      	str	r2, [r3, #4]
	return 0;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_isatty>:

int _isatty(int file) {
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80026bc:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80026c8:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <_sbrk+0x64>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	@ (800271c <_sbrk+0x68>)
 80026d4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d207      	bcs.n	80026f4 <_sbrk+0x40>
		errno = ENOMEM;
 80026e4:	f008 fcf6 	bl	800b0d4 <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	220c      	movs	r2, #12
 80026ec:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e009      	b.n	8002708 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <_sbrk+0x64>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <_sbrk+0x64>)
 8002704:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20018000 	.word	0x20018000
 8002714:	00000400 	.word	0x00000400
 8002718:	200009b8 	.word	0x200009b8
 800271c:	20000d60 	.word	0x20000d60

08002720 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <SystemInit+0x20>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <SystemInit+0x20>)
 800272c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	@ 0x30
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f008 fc60 	bl	800b018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002758:	463b      	mov	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002762:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 8002764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002768:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800276a:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800278a:	2301      	movs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002792:	2301      	movs	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027a2:	2301      	movs	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 80027b6:	f005 f907 	bl	80079c8 <HAL_TIM_Encoder_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80027c0:	f7ff fd82 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <MX_TIM2_Init+0xa4>)
 80027d2:	f006 ff29 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80027dc:	f7ff fd74 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	3730      	adds	r7, #48	@ 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200009bc 	.word	0x200009bc

080027ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f008 fc0c 	bl	800b018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002800:	463b      	mov	r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800280a:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <MX_TIM3_Init+0xa4>)
 800280c:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <MX_TIM3_Init+0xa8>)
 800280e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002810:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <MX_TIM3_Init+0xa4>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002816:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <MX_TIM3_Init+0xa4>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800281c:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <MX_TIM3_Init+0xa4>)
 800281e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <MX_TIM3_Init+0xa4>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282a:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <MX_TIM3_Init+0xa4>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002830:	2301      	movs	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002838:	2301      	movs	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	4619      	mov	r1, r3
 800285a:	480d      	ldr	r0, [pc, #52]	@ (8002890 <MX_TIM3_Init+0xa4>)
 800285c:	f005 f8b4 	bl	80079c8 <HAL_TIM_Encoder_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002866:	f7ff fd2f 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002872:	463b      	mov	r3, r7
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <MX_TIM3_Init+0xa4>)
 8002878:	f006 fed6 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002882:	f7ff fd21 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	3730      	adds	r7, #48	@ 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000a08 	.word	0x20000a08
 8002894:	40000400 	.word	0x40000400

08002898 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	@ 0x30
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	2224      	movs	r2, #36	@ 0x24
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f008 fbb6 	bl	800b018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ac:	463b      	mov	r3, r7
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028b6:	4b21      	ldr	r3, [pc, #132]	@ (800293c <MX_TIM5_Init+0xa4>)
 80028b8:	4a21      	ldr	r2, [pc, #132]	@ (8002940 <MX_TIM5_Init+0xa8>)
 80028ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80028bc:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <MX_TIM5_Init+0xa4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c2:	4b1e      	ldr	r3, [pc, #120]	@ (800293c <MX_TIM5_Init+0xa4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028c8:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <MX_TIM5_Init+0xa4>)
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295
 80028ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <MX_TIM5_Init+0xa4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <MX_TIM5_Init+0xa4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028dc:	2301      	movs	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028e4:	2301      	movs	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028f4:	2301      	movs	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4619      	mov	r1, r3
 8002906:	480d      	ldr	r0, [pc, #52]	@ (800293c <MX_TIM5_Init+0xa4>)
 8002908:	f005 f85e 	bl	80079c8 <HAL_TIM_Encoder_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002912:	f7ff fcd9 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800291e:	463b      	mov	r3, r7
 8002920:	4619      	mov	r1, r3
 8002922:	4806      	ldr	r0, [pc, #24]	@ (800293c <MX_TIM5_Init+0xa4>)
 8002924:	f006 fe80 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800292e:	f7ff fccb 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	3730      	adds	r7, #48	@ 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000a54 	.word	0x20000a54
 8002940:	40000c00 	.word	0x40000c00

08002944 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002954:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <MX_TIM6_Init+0x64>)
 8002956:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <MX_TIM6_Init+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800295a:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <MX_TIM6_Init+0x64>)
 800295c:	224f      	movs	r2, #79	@ 0x4f
 800295e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <MX_TIM6_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <MX_TIM6_Init+0x64>)
 8002968:	2213      	movs	r2, #19
 800296a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800296c:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <MX_TIM6_Init+0x64>)
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002972:	480d      	ldr	r0, [pc, #52]	@ (80029a8 <MX_TIM6_Init+0x64>)
 8002974:	f004 fc5a 	bl	800722c <HAL_TIM_Base_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800297e:	f7ff fca3 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002982:	2320      	movs	r3, #32
 8002984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4806      	ldr	r0, [pc, #24]	@ (80029a8 <MX_TIM6_Init+0x64>)
 8002990:	f006 fe4a 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800299a:	f7ff fc95 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000aa0 	.word	0x20000aa0
 80029ac:	40001000 	.word	0x40001000

080029b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029c0:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029c2:	4a15      	ldr	r2, [pc, #84]	@ (8002a18 <MX_TIM7_Init+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80029c6:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029c8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80029cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029d6:	2209      	movs	r2, #9
 80029d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029da:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029e0:	480c      	ldr	r0, [pc, #48]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029e2:	f004 fc23 	bl	800722c <HAL_TIM_Base_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80029ec:	f7ff fc6c 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <MX_TIM7_Init+0x64>)
 80029fe:	f006 fe13 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a08:	f7ff fc5e 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000aec 	.word	0x20000aec
 8002a18:	40001400 	.word	0x40001400

08002a1c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b09a      	sub	sp, #104	@ 0x68
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	222c      	movs	r2, #44	@ 0x2c
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f008 fade 	bl	800b018 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b5c <MX_TIM15_Init+0x140>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a68:	4b3b      	ldr	r3, [pc, #236]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a74:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	4b38      	ldr	r3, [pc, #224]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002a7c:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002a88:	4833      	ldr	r0, [pc, #204]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002a8a:	f004 fbcf 	bl	800722c <HAL_TIM_Base_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002a94:	f7ff fc18 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002a9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482c      	ldr	r0, [pc, #176]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002aa6:	f005 fd2b 	bl	8008500 <HAL_TIM_ConfigClockSource>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002ab0:	f7ff fc0a 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002ab4:	4828      	ldr	r0, [pc, #160]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002ab6:	f004 fcc3 	bl	8007440 <HAL_TIM_PWM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002ac0:	f7ff fc02 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002acc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4821      	ldr	r0, [pc, #132]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002ad4:	f006 fda8 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002ade:	f7ff fbf3 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae2:	2360      	movs	r3, #96	@ 0x60
 8002ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aea:	2300      	movs	r3, #0
 8002aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aee:	2300      	movs	r3, #0
 8002af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002afe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b02:	2200      	movs	r2, #0
 8002b04:	4619      	mov	r1, r3
 8002b06:	4814      	ldr	r0, [pc, #80]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002b08:	f005 fa28 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8002b12:	f7ff fbd9 	bl	80022c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	4619      	mov	r1, r3
 8002b38:	4807      	ldr	r0, [pc, #28]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002b3a:	f006 fecb 	bl	80098d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8002b44:	f7ff fbc0 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002b48:	4803      	ldr	r0, [pc, #12]	@ (8002b58 <MX_TIM15_Init+0x13c>)
 8002b4a:	f000 f921 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8002b4e:	bf00      	nop
 8002b50:	3768      	adds	r7, #104	@ 0x68
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000b38 	.word	0x20000b38
 8002b5c:	40014000 	.word	0x40014000

08002b60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08e      	sub	sp, #56	@ 0x38
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b80:	d146      	bne.n	8002c10 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b82:	4b53      	ldr	r3, [pc, #332]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b8e:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	4a46      	ldr	r2, [pc, #280]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbe:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bea:	f000 fed9 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bee:	2308      	movs	r3, #8
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c06:	4619      	mov	r1, r3
 8002c08:	4832      	ldr	r0, [pc, #200]	@ (8002cd4 <HAL_TIM_Encoder_MspInit+0x174>)
 8002c0a:	f000 fec9 	bl	80039a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c0e:	e05b      	b.n	8002cc8 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a30      	ldr	r2, [pc, #192]	@ (8002cd8 <HAL_TIM_Encoder_MspInit+0x178>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d128      	bne.n	8002c6c <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c26:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c32:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c36:	4a26      	ldr	r2, [pc, #152]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c38:	f043 0310 	orr.w	r3, r3, #16
 8002c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c4a:	2318      	movs	r3, #24
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	481d      	ldr	r0, [pc, #116]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x17c>)
 8002c66:	f000 fe9b 	bl	80039a0 <HAL_GPIO_Init>
}
 8002c6a:	e02d      	b.n	8002cc8 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <HAL_TIM_Encoder_MspInit+0x180>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d128      	bne.n	8002cc8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c76:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	4a15      	ldr	r2, [pc, #84]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc4:	f000 fe6c 	bl	80039a0 <HAL_GPIO_Init>
}
 8002cc8:	bf00      	nop
 8002cca:	3738      	adds	r7, #56	@ 0x38
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	48001000 	.word	0x48001000
 8002ce0:	40000c00 	.word	0x40000c00

08002ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <HAL_TIM_Base_MspInit+0x9c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d114      	bne.n	8002d20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	2036      	movs	r0, #54	@ 0x36
 8002d14:	f000 faae 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d18:	2036      	movs	r0, #54	@ 0x36
 8002d1a:	f000 fad7 	bl	80032cc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002d1e:	e02a      	b.n	8002d76 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <HAL_TIM_Base_MspInit+0xa4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d114      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d30:	f043 0320 	orr.w	r3, r3, #32
 8002d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	2037      	movs	r0, #55	@ 0x37
 8002d48:	f000 fa94 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d4c:	2037      	movs	r0, #55	@ 0x37
 8002d4e:	f000 fabd 	bl	80032cc <HAL_NVIC_EnableIRQ>
}
 8002d52:	e010      	b.n	8002d76 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0c      	ldr	r2, [pc, #48]	@ (8002d8c <HAL_TIM_Base_MspInit+0xa8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10b      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d62:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_TIM_Base_MspInit+0xa0>)
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40001000 	.word	0x40001000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40001400 	.word	0x40001400
 8002d8c:	40014000 	.word	0x40014000

08002d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	@ 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <HAL_TIM_MspPostInit+0xa0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d139      	bne.n	8002e26 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <HAL_TIM_MspPostInit+0xa4>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e34 <HAL_TIM_MspPostInit+0xa4>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e34 <HAL_TIM_MspPostInit+0xa4>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <HAL_TIM_MspPostInit+0xa4>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <HAL_TIM_MspPostInit+0xa4>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd6:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <HAL_TIM_MspPostInit+0xa4>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002de2:	2304      	movs	r3, #4
 8002de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002df2:	230e      	movs	r3, #14
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e00:	f000 fdce 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002e16:	230e      	movs	r3, #14
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4805      	ldr	r0, [pc, #20]	@ (8002e38 <HAL_TIM_MspPostInit+0xa8>)
 8002e22:	f000 fdbd 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002e26:	bf00      	nop
 8002e28:	3728      	adds	r7, #40	@ 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	48000400 	.word	0x48000400

08002e3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <MX_USART1_UART_Init+0x5c>)
 8002e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e46:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e62:	220c      	movs	r2, #12
 8002e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e7e:	4805      	ldr	r0, [pc, #20]	@ (8002e94 <MX_USART1_UART_Init+0x58>)
 8002e80:	f006 fe7e 	bl	8009b80 <HAL_UART_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e8a:	f7ff fa1d 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000b84 	.word	0x20000b84
 8002e98:	40013800 	.word	0x40013800

08002e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b0ac      	sub	sp, #176	@ 0xb0
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2288      	movs	r2, #136	@ 0x88
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f008 f8ab 	bl	800b018 <memset>
  if(uartHandle->Instance==USART1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a21      	ldr	r2, [pc, #132]	@ (8002f4c <HAL_UART_MspInit+0xb0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d13a      	bne.n	8002f42 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 f99d 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ee4:	f7ff f9f0 	bl	80022c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ee8:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <HAL_UART_MspInit+0xb4>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_UART_MspInit+0xb4>)
 8002eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ef4:	4b16      	ldr	r3, [pc, #88]	@ (8002f50 <HAL_UART_MspInit+0xb4>)
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_UART_MspInit+0xb4>)
 8002f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f04:	4a12      	ldr	r2, [pc, #72]	@ (8002f50 <HAL_UART_MspInit+0xb4>)
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_UART_MspInit+0xb4>)
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f18:	23c0      	movs	r3, #192	@ 0xc0
 8002f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f30:	2307      	movs	r3, #7
 8002f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	@ (8002f54 <HAL_UART_MspInit+0xb8>)
 8002f3e:	f000 fd2f 	bl	80039a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f42:	bf00      	nop
 8002f44:	37b0      	adds	r7, #176	@ 0xb0
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40021000 	.word	0x40021000
 8002f54:	48000400 	.word	0x48000400

08002f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f5c:	f7ff fbe0 	bl	8002720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f60:	480c      	ldr	r0, [pc, #48]	@ (8002f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f62:	490d      	ldr	r1, [pc, #52]	@ (8002f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f64:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <LoopForever+0xe>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f68:	e002      	b.n	8002f70 <LoopCopyDataInit>

08002f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f6e:	3304      	adds	r3, #4

08002f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f74:	d3f9      	bcc.n	8002f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f78:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa4 <LoopForever+0x16>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f7c:	e001      	b.n	8002f82 <LoopFillZerobss>

08002f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f80:	3204      	adds	r2, #4

08002f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f84:	d3fb      	bcc.n	8002f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f86:	f008 f8ab 	bl	800b0e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f8a:	f7ff f901 	bl	8002190 <main>

08002f8e <LoopForever>:

LoopForever:
    b LoopForever
 8002f8e:	e7fe      	b.n	8002f8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f98:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002f9c:	0800c424 	.word	0x0800c424
  ldr r2, =_sbss
 8002fa0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002fa4:	20000d5c 	.word	0x20000d5c

08002fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fa8:	e7fe      	b.n	8002fa8 <ADC1_2_IRQHandler>

08002faa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb4:	2003      	movs	r0, #3
 8002fb6:	f000 f93d 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fba:	200f      	movs	r0, #15
 8002fbc:	f000 f80e 	bl	8002fdc <HAL_InitTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	e001      	b.n	8002fd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fcc:	f7ff fa7e 	bl	80024cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fe8:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <HAL_InitTick+0x6c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <HAL_InitTick+0x70>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_InitTick+0x6c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f978 	bl	80032fc <HAL_SYSTICK_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d809      	bhi.n	800302c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003018:	2200      	movs	r2, #0
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f000 f928 	bl	8003274 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003024:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <HAL_InitTick+0x74>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e007      	b.n	800303c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e004      	b.n	800303c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e001      	b.n	800303c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000018 	.word	0x20000018
 800304c:	20000010 	.word	0x20000010
 8003050:	20000014 	.word	0x20000014

08003054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_IncTick+0x20>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_IncTick+0x24>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4413      	add	r3, r2
 8003064:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <HAL_IncTick+0x24>)
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000018 	.word	0x20000018
 8003078:	20000c0c 	.word	0x20000c0c

0800307c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return uwTick;
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_GetTick+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000c0c 	.word	0x20000c0c

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	@ (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	@ (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	@ (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	@ 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff8e 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b07      	cmp	r3, #7
 8003240:	d00f      	beq.n	8003262 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d00c      	beq.n	8003262 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b05      	cmp	r3, #5
 800324c:	d009      	beq.n	8003262 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d006      	beq.n	8003262 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d003      	beq.n	8003262 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800325a:	21a6      	movs	r1, #166	@ 0xa6
 800325c:	4804      	ldr	r0, [pc, #16]	@ (8003270 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800325e:	f7ff f84b 	bl	80022f8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff16 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	0800c150 	.word	0x0800c150

08003274 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d903      	bls.n	8003294 <HAL_NVIC_SetPriority+0x20>
 800328c:	21be      	movs	r1, #190	@ 0xbe
 800328e:	480e      	ldr	r0, [pc, #56]	@ (80032c8 <HAL_NVIC_SetPriority+0x54>)
 8003290:	f7ff f832 	bl	80022f8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d903      	bls.n	80032a2 <HAL_NVIC_SetPriority+0x2e>
 800329a:	21bf      	movs	r1, #191	@ 0xbf
 800329c:	480a      	ldr	r0, [pc, #40]	@ (80032c8 <HAL_NVIC_SetPriority+0x54>)
 800329e:	f7ff f82b 	bl	80022f8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80032a2:	f7ff ff1b 	bl	80030dc <__NVIC_GetPriorityGrouping>
 80032a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	6978      	ldr	r0, [r7, #20]
 80032ae:	f7ff ff6b 	bl	8003188 <NVIC_EncodePriority>
 80032b2:	4602      	mov	r2, r0
 80032b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff3a 	bl	8003134 <__NVIC_SetPriority>
}
 80032c0:	bf00      	nop
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0800c150 	.word	0x0800c150

080032cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da03      	bge.n	80032e6 <HAL_NVIC_EnableIRQ+0x1a>
 80032de:	21d2      	movs	r1, #210	@ 0xd2
 80032e0:	4805      	ldr	r0, [pc, #20]	@ (80032f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80032e2:	f7ff f809 	bl	80022f8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff04 	bl	80030f8 <__NVIC_EnableIRQ>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	0800c150 	.word	0x0800c150

080032fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ff73 	bl	80031f0 <SysTick_Config>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e19d      	b.n	8003662 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a79      	ldr	r2, [pc, #484]	@ (8003510 <HAL_DMA_Init+0x1fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d044      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a77      	ldr	r2, [pc, #476]	@ (8003514 <HAL_DMA_Init+0x200>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d03f      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a76      	ldr	r2, [pc, #472]	@ (8003518 <HAL_DMA_Init+0x204>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d03a      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a74      	ldr	r2, [pc, #464]	@ (800351c <HAL_DMA_Init+0x208>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d035      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a73      	ldr	r2, [pc, #460]	@ (8003520 <HAL_DMA_Init+0x20c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d030      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a71      	ldr	r2, [pc, #452]	@ (8003524 <HAL_DMA_Init+0x210>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02b      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a70      	ldr	r2, [pc, #448]	@ (8003528 <HAL_DMA_Init+0x214>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d026      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6e      	ldr	r2, [pc, #440]	@ (800352c <HAL_DMA_Init+0x218>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d021      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6d      	ldr	r2, [pc, #436]	@ (8003530 <HAL_DMA_Init+0x21c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01c      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6b      	ldr	r2, [pc, #428]	@ (8003534 <HAL_DMA_Init+0x220>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d017      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6a      	ldr	r2, [pc, #424]	@ (8003538 <HAL_DMA_Init+0x224>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d012      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a68      	ldr	r2, [pc, #416]	@ (800353c <HAL_DMA_Init+0x228>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a67      	ldr	r2, [pc, #412]	@ (8003540 <HAL_DMA_Init+0x22c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d008      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a65      	ldr	r2, [pc, #404]	@ (8003544 <HAL_DMA_Init+0x230>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <HAL_DMA_Init+0xa6>
 80033b2:	21a5      	movs	r1, #165	@ 0xa5
 80033b4:	4864      	ldr	r0, [pc, #400]	@ (8003548 <HAL_DMA_Init+0x234>)
 80033b6:	f7fe ff9f 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_DMA_Init+0xc8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d008      	beq.n	80033dc <HAL_DMA_Init+0xc8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033d2:	d003      	beq.n	80033dc <HAL_DMA_Init+0xc8>
 80033d4:	21a6      	movs	r1, #166	@ 0xa6
 80033d6:	485c      	ldr	r0, [pc, #368]	@ (8003548 <HAL_DMA_Init+0x234>)
 80033d8:	f7fe ff8e 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d007      	beq.n	80033f4 <HAL_DMA_Init+0xe0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_Init+0xe0>
 80033ec:	21a7      	movs	r1, #167	@ 0xa7
 80033ee:	4856      	ldr	r0, [pc, #344]	@ (8003548 <HAL_DMA_Init+0x234>)
 80033f0:	f7fe ff82 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b80      	cmp	r3, #128	@ 0x80
 80033fa:	d007      	beq.n	800340c <HAL_DMA_Init+0xf8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_DMA_Init+0xf8>
 8003404:	21a8      	movs	r1, #168	@ 0xa8
 8003406:	4850      	ldr	r0, [pc, #320]	@ (8003548 <HAL_DMA_Init+0x234>)
 8003408:	f7fe ff76 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_DMA_Init+0x11c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341c:	d008      	beq.n	8003430 <HAL_DMA_Init+0x11c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003426:	d003      	beq.n	8003430 <HAL_DMA_Init+0x11c>
 8003428:	21a9      	movs	r1, #169	@ 0xa9
 800342a:	4847      	ldr	r0, [pc, #284]	@ (8003548 <HAL_DMA_Init+0x234>)
 800342c:	f7fe ff64 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_DMA_Init+0x140>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	d008      	beq.n	8003454 <HAL_DMA_Init+0x140>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800344a:	d003      	beq.n	8003454 <HAL_DMA_Init+0x140>
 800344c:	21aa      	movs	r1, #170	@ 0xaa
 800344e:	483e      	ldr	r0, [pc, #248]	@ (8003548 <HAL_DMA_Init+0x234>)
 8003450:	f7fe ff52 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_DMA_Init+0x158>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b20      	cmp	r3, #32
 8003462:	d003      	beq.n	800346c <HAL_DMA_Init+0x158>
 8003464:	21ab      	movs	r1, #171	@ 0xab
 8003466:	4838      	ldr	r0, [pc, #224]	@ (8003548 <HAL_DMA_Init+0x234>)
 8003468:	f7fe ff46 	bl	80022f8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_DMA_Init+0x186>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347c:	d00d      	beq.n	800349a <HAL_DMA_Init+0x186>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003486:	d008      	beq.n	800349a <HAL_DMA_Init+0x186>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003490:	d003      	beq.n	800349a <HAL_DMA_Init+0x186>
 8003492:	21ac      	movs	r1, #172	@ 0xac
 8003494:	482c      	ldr	r0, [pc, #176]	@ (8003548 <HAL_DMA_Init+0x234>)
 8003496:	f7fe ff2f 	bl	80022f8 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01f      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d01b      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d017      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00f      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d00b      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d007      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d003      	beq.n	80034e2 <HAL_DMA_Init+0x1ce>
 80034da:	21ae      	movs	r1, #174	@ 0xae
 80034dc:	481a      	ldr	r0, [pc, #104]	@ (8003548 <HAL_DMA_Init+0x234>)
 80034de:	f7fe ff0b 	bl	80022f8 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b18      	ldr	r3, [pc, #96]	@ (800354c <HAL_DMA_Init+0x238>)
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d836      	bhi.n	800355c <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <HAL_DMA_Init+0x23c>)
 80034f6:	4413      	add	r3, r2
 80034f8:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <HAL_DMA_Init+0x240>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	009a      	lsls	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <HAL_DMA_Init+0x244>)
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40
 800350c:	e035      	b.n	800357a <HAL_DMA_Init+0x266>
 800350e:	bf00      	nop
 8003510:	40020008 	.word	0x40020008
 8003514:	4002001c 	.word	0x4002001c
 8003518:	40020030 	.word	0x40020030
 800351c:	40020044 	.word	0x40020044
 8003520:	40020058 	.word	0x40020058
 8003524:	4002006c 	.word	0x4002006c
 8003528:	40020080 	.word	0x40020080
 800352c:	40020408 	.word	0x40020408
 8003530:	4002041c 	.word	0x4002041c
 8003534:	40020430 	.word	0x40020430
 8003538:	40020444 	.word	0x40020444
 800353c:	40020458 	.word	0x40020458
 8003540:	4002046c 	.word	0x4002046c
 8003544:	40020480 	.word	0x40020480
 8003548:	0800c18c 	.word	0x0800c18c
 800354c:	40020407 	.word	0x40020407
 8003550:	bffdfff8 	.word	0xbffdfff8
 8003554:	cccccccd 	.word	0xcccccccd
 8003558:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b42      	ldr	r3, [pc, #264]	@ (800366c <HAL_DMA_Init+0x358>)
 8003564:	4413      	add	r3, r2
 8003566:	4a42      	ldr	r2, [pc, #264]	@ (8003670 <HAL_DMA_Init+0x35c>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	009a      	lsls	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3f      	ldr	r2, [pc, #252]	@ (8003674 <HAL_DMA_Init+0x360>)
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003594:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d4:	d039      	beq.n	800364a <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	4a27      	ldr	r2, [pc, #156]	@ (8003678 <HAL_DMA_Init+0x364>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d11a      	bne.n	8003616 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035e0:	4b26      	ldr	r3, [pc, #152]	@ (800367c <HAL_DMA_Init+0x368>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	f003 031c 	and.w	r3, r3, #28
 80035ec:	210f      	movs	r1, #15
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4921      	ldr	r1, [pc, #132]	@ (800367c <HAL_DMA_Init+0x368>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035fa:	4b20      	ldr	r3, [pc, #128]	@ (800367c <HAL_DMA_Init+0x368>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f003 031c 	and.w	r3, r3, #28
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	491b      	ldr	r1, [pc, #108]	@ (800367c <HAL_DMA_Init+0x368>)
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	e019      	b.n	800364a <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003616:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <HAL_DMA_Init+0x36c>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f003 031c 	and.w	r3, r3, #28
 8003622:	210f      	movs	r1, #15
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	4915      	ldr	r1, [pc, #84]	@ (8003680 <HAL_DMA_Init+0x36c>)
 800362c:	4013      	ands	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003630:	4b13      	ldr	r3, [pc, #76]	@ (8003680 <HAL_DMA_Init+0x36c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	f003 031c 	and.w	r3, r3, #28
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <HAL_DMA_Init+0x36c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	bffdfbf8 	.word	0xbffdfbf8
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	40020400 	.word	0x40020400
 8003678:	40020000 	.word	0x40020000
 800367c:	400200a8 	.word	0x400200a8
 8003680:	400204a8 	.word	0x400204a8

08003684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_DMA_Start_IT+0x20>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a2:	d304      	bcc.n	80036ae <HAL_DMA_Start_IT+0x2a>
 80036a4:	f240 11df 	movw	r1, #479	@ 0x1df
 80036a8:	482c      	ldr	r0, [pc, #176]	@ (800375c <HAL_DMA_Start_IT+0xd8>)
 80036aa:	f7fe fe25 	bl	80022f8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_DMA_Start_IT+0x38>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e04b      	b.n	8003754 <HAL_DMA_Start_IT+0xd0>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d13a      	bne.n	8003746 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f923 	bl	8003940 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 020e 	orr.w	r2, r2, #14
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e00f      	b.n	8003734 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 020a 	orr.w	r2, r2, #10
 8003732:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e005      	b.n	8003752 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	0800c18c 	.word	0x0800c18c

08003760 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d005      	beq.n	8003784 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2204      	movs	r2, #4
 800377c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e029      	b.n	80037d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 020e 	bic.w	r2, r2, #14
 8003792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	f003 021c 	and.w	r2, r3, #28
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f202 	lsl.w	r2, r1, r2
 80037b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    }
  }
  return status;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	f003 031c 	and.w	r3, r3, #28
 8003802:	2204      	movs	r2, #4
 8003804:	409a      	lsls	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d026      	beq.n	800385c <HAL_DMA_IRQHandler+0x7a>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0204 	bic.w	r2, r2, #4
 8003834:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f003 021c 	and.w	r2, r3, #28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2104      	movs	r1, #4
 8003844:	fa01 f202 	lsl.w	r2, r1, r2
 8003848:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d071      	beq.n	8003936 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800385a:	e06c      	b.n	8003936 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	f003 031c 	and.w	r3, r3, #28
 8003864:	2202      	movs	r2, #2
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02e      	beq.n	80038ce <HAL_DMA_IRQHandler+0xec>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d029      	beq.n	80038ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 020a 	bic.w	r2, r2, #10
 8003896:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	f003 021c 	and.w	r2, r3, #28
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2102      	movs	r1, #2
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d038      	beq.n	8003936 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038cc:	e033      	b.n	8003936 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f003 031c 	and.w	r3, r3, #28
 80038d6:	2208      	movs	r2, #8
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d02a      	beq.n	8003938 <HAL_DMA_IRQHandler+0x156>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d025      	beq.n	8003938 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 020e 	bic.w	r2, r2, #14
 80038fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	f003 021c 	and.w	r2, r3, #28
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003936:	bf00      	nop
 8003938:	bf00      	nop
}
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	f003 021c 	and.w	r2, r3, #28
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b10      	cmp	r3, #16
 8003970:	d108      	bne.n	8003984 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003982:	e007      	b.n	8003994 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039b4:	d01f      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a3c      	ldr	r2, [pc, #240]	@ (8003aac <HAL_GPIO_Init+0x10c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01b      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ab0 <HAL_GPIO_Init+0x110>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d017      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab4 <HAL_GPIO_Init+0x114>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a39      	ldr	r2, [pc, #228]	@ (8003ab8 <HAL_GPIO_Init+0x118>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00f      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a38      	ldr	r2, [pc, #224]	@ (8003abc <HAL_GPIO_Init+0x11c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a37      	ldr	r2, [pc, #220]	@ (8003ac0 <HAL_GPIO_Init+0x120>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a36      	ldr	r2, [pc, #216]	@ (8003ac4 <HAL_GPIO_Init+0x124>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x56>
 80039ee:	21aa      	movs	r1, #170	@ 0xaa
 80039f0:	4835      	ldr	r0, [pc, #212]	@ (8003ac8 <HAL_GPIO_Init+0x128>)
 80039f2:	f7fe fc81 	bl	80022f8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_GPIO_Init+0x6a>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a08:	d303      	bcc.n	8003a12 <HAL_GPIO_Init+0x72>
 8003a0a:	21ab      	movs	r1, #171	@ 0xab
 8003a0c:	482e      	ldr	r0, [pc, #184]	@ (8003ac8 <HAL_GPIO_Init+0x128>)
 8003a0e:	f7fe fc73 	bl	80022f8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 823d 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f000 8238 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b11      	cmp	r3, #17
 8003a2c:	f000 8233 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	f000 822e 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b12      	cmp	r3, #18
 8003a40:	f000 8229 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003a4c:	f000 8223 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003a58:	f000 821d 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003a64:	f000 8217 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003a70:	f000 8211 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003a7c:	f000 820b 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003a88:	f000 8205 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	f000 8200 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b0b      	cmp	r3, #11
 8003a9c:	f000 81fb 	beq.w	8003e96 <HAL_GPIO_Init+0x4f6>
 8003aa0:	21ac      	movs	r1, #172	@ 0xac
 8003aa2:	4809      	ldr	r0, [pc, #36]	@ (8003ac8 <HAL_GPIO_Init+0x128>)
 8003aa4:	f7fe fc28 	bl	80022f8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aa8:	e1f5      	b.n	8003e96 <HAL_GPIO_Init+0x4f6>
 8003aaa:	bf00      	nop
 8003aac:	48000400 	.word	0x48000400
 8003ab0:	48000800 	.word	0x48000800
 8003ab4:	48000c00 	.word	0x48000c00
 8003ab8:	48001000 	.word	0x48001000
 8003abc:	48001400 	.word	0x48001400
 8003ac0:	48001800 	.word	0x48001800
 8003ac4:	48001c00 	.word	0x48001c00
 8003ac8:	0800c1c4 	.word	0x0800c1c4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 81d6 	beq.w	8003e90 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d005      	beq.n	8003afc <HAL_GPIO_Init+0x15c>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d144      	bne.n	8003b86 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00f      	beq.n	8003b24 <HAL_GPIO_Init+0x184>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d00b      	beq.n	8003b24 <HAL_GPIO_Init+0x184>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d007      	beq.n	8003b24 <HAL_GPIO_Init+0x184>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x184>
 8003b1c:	21bb      	movs	r1, #187	@ 0xbb
 8003b1e:	489c      	ldr	r0, [pc, #624]	@ (8003d90 <HAL_GPIO_Init+0x3f0>)
 8003b20:	f7fe fbea 	bl	80022f8 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0201 	and.w	r2, r3, #1
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d118      	bne.n	8003bc4 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0201 	and.w	r2, r3, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d027      	beq.n	8003c20 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_GPIO_Init+0x250>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d007      	beq.n	8003bf0 <HAL_GPIO_Init+0x250>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x250>
 8003be8:	21dc      	movs	r1, #220	@ 0xdc
 8003bea:	4869      	ldr	r0, [pc, #420]	@ (8003d90 <HAL_GPIO_Init+0x3f0>)
 8003bec:	f7fe fb84 	bl	80022f8 <assert_failed>

        temp = GPIOx->PUPDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d14f      	bne.n	8003ccc <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c32:	d01f      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_GPIO_Init+0x3f4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01b      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a56      	ldr	r2, [pc, #344]	@ (8003d98 <HAL_GPIO_Init+0x3f8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d017      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a55      	ldr	r2, [pc, #340]	@ (8003d9c <HAL_GPIO_Init+0x3fc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a54      	ldr	r2, [pc, #336]	@ (8003da0 <HAL_GPIO_Init+0x400>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00f      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a53      	ldr	r2, [pc, #332]	@ (8003da4 <HAL_GPIO_Init+0x404>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00b      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_GPIO_Init+0x408>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a51      	ldr	r2, [pc, #324]	@ (8003dac <HAL_GPIO_Init+0x40c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x2d4>
 8003c6c:	21e8      	movs	r1, #232	@ 0xe8
 8003c6e:	4848      	ldr	r0, [pc, #288]	@ (8003d90 <HAL_GPIO_Init+0x3f0>)
 8003c70:	f7fe fb42 	bl	80022f8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b0f      	cmp	r3, #15
 8003c7a:	d903      	bls.n	8003c84 <HAL_GPIO_Init+0x2e4>
 8003c7c:	21e9      	movs	r1, #233	@ 0xe9
 8003c7e:	4844      	ldr	r0, [pc, #272]	@ (8003d90 <HAL_GPIO_Init+0x3f0>)
 8003c80:	f7fe fb3a 	bl	80022f8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	08da      	lsrs	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3208      	adds	r2, #8
 8003c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	6939      	ldr	r1, [r7, #16]
 8003cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0203 	and.w	r2, r3, #3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80c1 	beq.w	8003e90 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0e:	4b28      	ldr	r3, [pc, #160]	@ (8003db0 <HAL_GPIO_Init+0x410>)
 8003d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d12:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <HAL_GPIO_Init+0x410>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d1a:	4b25      	ldr	r3, [pc, #148]	@ (8003db0 <HAL_GPIO_Init+0x410>)
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d26:	4a23      	ldr	r2, [pc, #140]	@ (8003db4 <HAL_GPIO_Init+0x414>)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d50:	d03a      	beq.n	8003dc8 <HAL_GPIO_Init+0x428>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	@ (8003d94 <HAL_GPIO_Init+0x3f4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d034      	beq.n	8003dc4 <HAL_GPIO_Init+0x424>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d98 <HAL_GPIO_Init+0x3f8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02e      	beq.n	8003dc0 <HAL_GPIO_Init+0x420>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	@ (8003d9c <HAL_GPIO_Init+0x3fc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d028      	beq.n	8003dbc <HAL_GPIO_Init+0x41c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003da0 <HAL_GPIO_Init+0x400>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d022      	beq.n	8003db8 <HAL_GPIO_Init+0x418>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a0b      	ldr	r2, [pc, #44]	@ (8003da4 <HAL_GPIO_Init+0x404>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <HAL_GPIO_Init+0x3ea>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003da8 <HAL_GPIO_Init+0x408>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_GPIO_Init+0x3e6>
 8003d82:	2306      	movs	r3, #6
 8003d84:	e021      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003d86:	2307      	movs	r3, #7
 8003d88:	e01f      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	e01d      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003d8e:	bf00      	nop
 8003d90:	0800c1c4 	.word	0x0800c1c4
 8003d94:	48000400 	.word	0x48000400
 8003d98:	48000800 	.word	0x48000800
 8003d9c:	48000c00 	.word	0x48000c00
 8003da0:	48001000 	.word	0x48001000
 8003da4:	48001400 	.word	0x48001400
 8003da8:	48001800 	.word	0x48001800
 8003dac:	48001c00 	.word	0x48001c00
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010000 	.word	0x40010000
 8003db8:	2304      	movs	r3, #4
 8003dba:	e006      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e004      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_GPIO_Init+0x42a>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	f002 0203 	and.w	r2, r2, #3
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	4093      	lsls	r3, r2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dda:	4935      	ldr	r1, [pc, #212]	@ (8003eb0 <HAL_GPIO_Init+0x510>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e0c:	4a29      	ldr	r2, [pc, #164]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e12:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e36:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e66:	4b13      	ldr	r3, [pc, #76]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <HAL_GPIO_Init+0x514>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	3301      	adds	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f ae13 	bne.w	8003acc <HAL_GPIO_Init+0x12c>
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ecc:	d020      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a84      	ldr	r2, [pc, #528]	@ (80040e4 <HAL_GPIO_DeInit+0x22c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01c      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a83      	ldr	r2, [pc, #524]	@ (80040e8 <HAL_GPIO_DeInit+0x230>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a82      	ldr	r2, [pc, #520]	@ (80040ec <HAL_GPIO_DeInit+0x234>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d014      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a81      	ldr	r2, [pc, #516]	@ (80040f0 <HAL_GPIO_DeInit+0x238>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d010      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a80      	ldr	r2, [pc, #512]	@ (80040f4 <HAL_GPIO_DeInit+0x23c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00c      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a7f      	ldr	r2, [pc, #508]	@ (80040f8 <HAL_GPIO_DeInit+0x240>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d008      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a7e      	ldr	r2, [pc, #504]	@ (80040fc <HAL_GPIO_DeInit+0x244>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_GPIO_DeInit+0x58>
 8003f06:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8003f0a:	487d      	ldr	r0, [pc, #500]	@ (8004100 <HAL_GPIO_DeInit+0x248>)
 8003f0c:	f7fe f9f4 	bl	80022f8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_GPIO_DeInit+0x6a>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1e:	f0c0 80d4 	bcc.w	80040ca <HAL_GPIO_DeInit+0x212>
 8003f22:	f240 113b 	movw	r1, #315	@ 0x13b
 8003f26:	4876      	ldr	r0, [pc, #472]	@ (8004100 <HAL_GPIO_DeInit+0x248>)
 8003f28:	f7fe f9e6 	bl	80022f8 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f2c:	e0cd      	b.n	80040ca <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f2e:	2201      	movs	r2, #1
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80c0 	beq.w	80040c4 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f44:	4a6f      	ldr	r2, [pc, #444]	@ (8004104 <HAL_GPIO_DeInit+0x24c>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f6c:	d025      	beq.n	8003fba <HAL_GPIO_DeInit+0x102>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a5c      	ldr	r2, [pc, #368]	@ (80040e4 <HAL_GPIO_DeInit+0x22c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <HAL_GPIO_DeInit+0xfe>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a5b      	ldr	r2, [pc, #364]	@ (80040e8 <HAL_GPIO_DeInit+0x230>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d019      	beq.n	8003fb2 <HAL_GPIO_DeInit+0xfa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a5a      	ldr	r2, [pc, #360]	@ (80040ec <HAL_GPIO_DeInit+0x234>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_GPIO_DeInit+0xf6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a59      	ldr	r2, [pc, #356]	@ (80040f0 <HAL_GPIO_DeInit+0x238>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00d      	beq.n	8003faa <HAL_GPIO_DeInit+0xf2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a58      	ldr	r2, [pc, #352]	@ (80040f4 <HAL_GPIO_DeInit+0x23c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <HAL_GPIO_DeInit+0xee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a57      	ldr	r2, [pc, #348]	@ (80040f8 <HAL_GPIO_DeInit+0x240>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_GPIO_DeInit+0xea>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	e00c      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	e00a      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	e008      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003faa:	2304      	movs	r3, #4
 8003fac:	e006      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e004      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_DeInit+0x104>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	f002 0203 	and.w	r2, r2, #3
 8003fc2:	0092      	lsls	r2, r2, #2
 8003fc4:	4093      	lsls	r3, r2
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d132      	bne.n	8004032 <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	494c      	ldr	r1, [pc, #304]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003fda:	4b4b      	ldr	r3, [pc, #300]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	4949      	ldr	r1, [pc, #292]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003fe8:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4945      	ldr	r1, [pc, #276]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003ff6:	4b44      	ldr	r3, [pc, #272]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4942      	ldr	r1, [pc, #264]	@ (8004108 <HAL_GPIO_DeInit+0x250>)
 8004000:	4013      	ands	r3, r2
 8004002:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004014:	4a3b      	ldr	r2, [pc, #236]	@ (8004104 <HAL_GPIO_DeInit+0x24c>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43da      	mvns	r2, r3
 8004024:	4837      	ldr	r0, [pc, #220]	@ (8004104 <HAL_GPIO_DeInit+0x24c>)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	400a      	ands	r2, r1
 800402c:	3302      	adds	r3, #2
 800402e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2103      	movs	r1, #3
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	220f      	movs	r2, #15
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	08d2      	lsrs	r2, r2, #3
 8004066:	4019      	ands	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	2103      	movs	r1, #3
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	401a      	ands	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	2101      	movs	r1, #1
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	401a      	ands	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2103      	movs	r1, #3
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b4:	2101      	movs	r1, #1
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3301      	adds	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f47f af2b 	bne.w	8003f2e <HAL_GPIO_DeInit+0x76>
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	48000400 	.word	0x48000400
 80040e8:	48000800 	.word	0x48000800
 80040ec:	48000c00 	.word	0x48000c00
 80040f0:	48001000 	.word	0x48001000
 80040f4:	48001400 	.word	0x48001400
 80040f8:	48001800 	.word	0x48001800
 80040fc:	48001c00 	.word	0x48001c00
 8004100:	0800c1c4 	.word	0x0800c1c4
 8004104:	40010000 	.word	0x40010000
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <HAL_GPIO_WritePin+0x20>
 8004122:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004126:	480e      	ldr	r0, [pc, #56]	@ (8004160 <HAL_GPIO_WritePin+0x54>)
 8004128:	f7fe f8e6 	bl	80022f8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800412c:	787b      	ldrb	r3, [r7, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_GPIO_WritePin+0x36>
 8004132:	787b      	ldrb	r3, [r7, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d004      	beq.n	8004142 <HAL_GPIO_WritePin+0x36>
 8004138:	f240 11af 	movw	r1, #431	@ 0x1af
 800413c:	4808      	ldr	r0, [pc, #32]	@ (8004160 <HAL_GPIO_WritePin+0x54>)
 800413e:	f7fe f8db 	bl	80022f8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004142:	787b      	ldrb	r3, [r7, #1]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004148:	887a      	ldrh	r2, [r7, #2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800414e:	e002      	b.n	8004156 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	0800c1c4 	.word	0x0800c1c4

08004164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800416e:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f806 	bl	8004194 <HAL_GPIO_EXTI_Callback>
  }
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40010400 	.word	0x40010400

08004194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041b0:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000

080041c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d6:	d007      	beq.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x20>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041de:	d003      	beq.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x20>
 80041e0:	21a7      	movs	r1, #167	@ 0xa7
 80041e2:	4826      	ldr	r0, [pc, #152]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80041e4:	f7fe f888 	bl	80022f8 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ee:	d130      	bne.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f0:	4b23      	ldr	r3, [pc, #140]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fc:	d038      	beq.n	8004270 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041fe:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004206:	4a1e      	ldr	r2, [pc, #120]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800420e:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2232      	movs	r2, #50	@ 0x32
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	4a1b      	ldr	r2, [pc, #108]	@ (8004288 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0c9b      	lsrs	r3, r3, #18
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004224:	e002      	b.n	800422c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b01      	subs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800422c:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004238:	d102      	bne.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x78>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f2      	bne.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004240:	4b0f      	ldr	r3, [pc, #60]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424c:	d110      	bne.n	8004270 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00f      	b.n	8004272 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004252:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425e:	d007      	beq.n	8004270 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004260:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004268:	4a05      	ldr	r2, [pc, #20]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800426a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800426e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	0800c200 	.word	0x0800c200
 8004280:	40007000 	.word	0x40007000
 8004284:	20000010 	.word	0x20000010
 8004288:	431bde83 	.word	0x431bde83

0800428c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f000 bcef 	b.w	8004c7e <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_OscConfig+0x2e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b1f      	cmp	r3, #31
 80042ae:	d904      	bls.n	80042ba <HAL_RCC_OscConfig+0x2e>
 80042b0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80042b4:	489a      	ldr	r0, [pc, #616]	@ (8004520 <HAL_RCC_OscConfig+0x294>)
 80042b6:	f7fe f81f 	bl	80022f8 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ba:	4b9a      	ldr	r3, [pc, #616]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c4:	4b97      	ldr	r3, [pc, #604]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 813d 	beq.w	8004556 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCC_OscConfig+0x6a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d004      	beq.n	80042f6 <HAL_RCC_OscConfig+0x6a>
 80042ec:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80042f0:	488b      	ldr	r0, [pc, #556]	@ (8004520 <HAL_RCC_OscConfig+0x294>)
 80042f2:	f7fe f801 	bl	80022f8 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	2bff      	cmp	r3, #255	@ 0xff
 80042fc:	d904      	bls.n	8004308 <HAL_RCC_OscConfig+0x7c>
 80042fe:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8004302:	4887      	ldr	r0, [pc, #540]	@ (8004520 <HAL_RCC_OscConfig+0x294>)
 8004304:	f7fd fff8 	bl	80022f8 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d030      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2b10      	cmp	r3, #16
 8004316:	d02c      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	2b20      	cmp	r3, #32
 800431e:	d028      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	2b30      	cmp	r3, #48	@ 0x30
 8004326:	d024      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	2b40      	cmp	r3, #64	@ 0x40
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	2b50      	cmp	r3, #80	@ 0x50
 8004336:	d01c      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	2b60      	cmp	r3, #96	@ 0x60
 800433e:	d018      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d014      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	2b80      	cmp	r3, #128	@ 0x80
 800434e:	d010      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	2b90      	cmp	r3, #144	@ 0x90
 8004356:	d00c      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	2ba0      	cmp	r3, #160	@ 0xa0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	2bb0      	cmp	r3, #176	@ 0xb0
 8004366:	d004      	beq.n	8004372 <HAL_RCC_OscConfig+0xe6>
 8004368:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800436c:	486c      	ldr	r0, [pc, #432]	@ (8004520 <HAL_RCC_OscConfig+0x294>)
 800436e:	f7fd ffc3 	bl	80022f8 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0xfc>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	f040 808e 	bne.w	800449c <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b01      	cmp	r3, #1
 8004384:	f040 808a 	bne.w	800449c <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004388:	4b66      	ldr	r3, [pc, #408]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_RCC_OscConfig+0x116>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f000 bc6e 	b.w	8004c7e <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_RCC_OscConfig+0x130>
 80043b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_OscConfig+0x13c>
 80043bc:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d224      	bcs.n	8004416 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fec1 	bl	8005158 <RCC_SetFlashLatencyFromMSIRange>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f000 bc4e 	b.w	8004c7e <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e2:	4b50      	ldr	r3, [pc, #320]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a4f      	ldr	r2, [pc, #316]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043e8:	f043 0308 	orr.w	r3, r3, #8
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	494a      	ldr	r1, [pc, #296]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004400:	4b48      	ldr	r3, [pc, #288]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	4945      	ldr	r1, [pc, #276]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	e026      	b.n	8004464 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b40      	ldr	r3, [pc, #256]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	493d      	ldr	r1, [pc, #244]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004434:	4b3b      	ldr	r3, [pc, #236]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	4938      	ldr	r1, [pc, #224]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fe80 	bl	8005158 <RCC_SetFlashLatencyFromMSIRange>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f000 bc0d 	b.w	8004c7e <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004464:	f000 fdb4 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b2e      	ldr	r3, [pc, #184]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	492c      	ldr	r1, [pc, #176]	@ (8004528 <HAL_RCC_OscConfig+0x29c>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	4a2a      	ldr	r2, [pc, #168]	@ (800452c <HAL_RCC_OscConfig+0x2a0>)
 8004482:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004484:	4b2a      	ldr	r3, [pc, #168]	@ (8004530 <HAL_RCC_OscConfig+0x2a4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fda7 	bl	8002fdc <HAL_InitTick>
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d05d      	beq.n	8004554 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	e3f0      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d032      	beq.n	800450a <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b0:	f7fe fde4 	bl	800307c <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b8:	f7fe fde0 	bl	800307c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e3d9      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ca:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d6:	4b13      	ldr	r3, [pc, #76]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a12      	ldr	r2, [pc, #72]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	490d      	ldr	r1, [pc, #52]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	4908      	ldr	r1, [pc, #32]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	e025      	b.n	8004556 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800450a:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a05      	ldr	r2, [pc, #20]	@ (8004524 <HAL_RCC_OscConfig+0x298>)
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004516:	f7fe fdb1 	bl	800307c <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800451c:	e013      	b.n	8004546 <HAL_RCC_OscConfig+0x2ba>
 800451e:	bf00      	nop
 8004520:	0800c23c 	.word	0x0800c23c
 8004524:	40021000 	.word	0x40021000
 8004528:	0800c398 	.word	0x0800c398
 800452c:	20000010 	.word	0x20000010
 8004530:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004534:	f7fe fda2 	bl	800307c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e39b      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004546:	4b97      	ldr	r3, [pc, #604]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x2a8>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d07e      	beq.n	8004660 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <HAL_RCC_OscConfig+0x2fc>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004572:	d009      	beq.n	8004588 <HAL_RCC_OscConfig+0x2fc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800457c:	d004      	beq.n	8004588 <HAL_RCC_OscConfig+0x2fc>
 800457e:	f240 2119 	movw	r1, #537	@ 0x219
 8004582:	4889      	ldr	r0, [pc, #548]	@ (80047a8 <HAL_RCC_OscConfig+0x51c>)
 8004584:	f7fd feb8 	bl	80022f8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d005      	beq.n	800459a <HAL_RCC_OscConfig+0x30e>
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d10e      	bne.n	80045b2 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d10b      	bne.n	80045b2 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459a:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d05b      	beq.n	800465e <HAL_RCC_OscConfig+0x3d2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d157      	bne.n	800465e <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e365      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x33e>
 80045bc:	4b79      	ldr	r3, [pc, #484]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a78      	ldr	r2, [pc, #480]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e01d      	b.n	8004606 <HAL_RCC_OscConfig+0x37a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x362>
 80045d4:	4b73      	ldr	r3, [pc, #460]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a72      	ldr	r2, [pc, #456]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6f      	ldr	r2, [pc, #444]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e00b      	b.n	8004606 <HAL_RCC_OscConfig+0x37a>
 80045ee:	4b6d      	ldr	r3, [pc, #436]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6c      	ldr	r2, [pc, #432]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a69      	ldr	r2, [pc, #420]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004604:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d013      	beq.n	8004636 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fe fd35 	bl	800307c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004616:	f7fe fd31 	bl	800307c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b64      	cmp	r3, #100	@ 0x64
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e32a      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004628:	4b5e      	ldr	r3, [pc, #376]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x38a>
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fe fd21 	bl	800307c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463e:	f7fe fd1d 	bl	800307c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b64      	cmp	r3, #100	@ 0x64
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e316      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004650:	4b54      	ldr	r3, [pc, #336]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f0      	bne.n	800463e <HAL_RCC_OscConfig+0x3b2>
 800465c:	e000      	b.n	8004660 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d077      	beq.n	800475c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCC_OscConfig+0x3fc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467c:	d004      	beq.n	8004688 <HAL_RCC_OscConfig+0x3fc>
 800467e:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8004682:	4849      	ldr	r0, [pc, #292]	@ (80047a8 <HAL_RCC_OscConfig+0x51c>)
 8004684:	f7fd fe38 	bl	80022f8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b1f      	cmp	r3, #31
 800468e:	d904      	bls.n	800469a <HAL_RCC_OscConfig+0x40e>
 8004690:	f240 214d 	movw	r1, #589	@ 0x24d
 8004694:	4844      	ldr	r0, [pc, #272]	@ (80047a8 <HAL_RCC_OscConfig+0x51c>)
 8004696:	f7fd fe2f 	bl	80022f8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d005      	beq.n	80046ac <HAL_RCC_OscConfig+0x420>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d119      	bne.n	80046da <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d116      	bne.n	80046da <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ac:	4b3d      	ldr	r3, [pc, #244]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_OscConfig+0x438>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e2dc      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b37      	ldr	r3, [pc, #220]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	4934      	ldr	r1, [pc, #208]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d8:	e040      	b.n	800475c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d023      	beq.n	800472a <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e2:	4b30      	ldr	r3, [pc, #192]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2f      	ldr	r2, [pc, #188]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fe fcc5 	bl	800307c <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fe fcc1 	bl	800307c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e2ba      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004708:	4b26      	ldr	r3, [pc, #152]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	4920      	ldr	r1, [pc, #128]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
 8004728:	e018      	b.n	800475c <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472a:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1d      	ldr	r2, [pc, #116]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fe fca1 	bl	800307c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473e:	f7fe fc9d 	bl	800307c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e296      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d04e      	beq.n	8004806 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_OscConfig+0x4f6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d004      	beq.n	8004782 <HAL_RCC_OscConfig+0x4f6>
 8004778:	f240 218d 	movw	r1, #653	@ 0x28d
 800477c:	480a      	ldr	r0, [pc, #40]	@ (80047a8 <HAL_RCC_OscConfig+0x51c>)
 800477e:	f7fd fdbb 	bl	80022f8 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d021      	beq.n	80047ce <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004790:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <HAL_RCC_OscConfig+0x518>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe fc6f 	bl	800307c <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a0:	e00d      	b.n	80047be <HAL_RCC_OscConfig+0x532>
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	0800c23c 	.word	0x0800c23c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fe fc66 	bl	800307c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e25f      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047be:	4b66      	ldr	r3, [pc, #408]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <HAL_RCC_OscConfig+0x520>
 80047cc:	e01b      	b.n	8004806 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ce:	4b62      	ldr	r3, [pc, #392]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d4:	4a60      	ldr	r2, [pc, #384]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fe fc4d 	bl	800307c <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e6:	f7fe fc49 	bl	800307c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e242      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f8:	4b57      	ldr	r3, [pc, #348]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ef      	bne.n	80047e6 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80b8 	beq.w	8004984 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004814:	2300      	movs	r3, #0
 8004816:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00c      	beq.n	800483a <HAL_RCC_OscConfig+0x5ae>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d008      	beq.n	800483a <HAL_RCC_OscConfig+0x5ae>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b05      	cmp	r3, #5
 800482e:	d004      	beq.n	800483a <HAL_RCC_OscConfig+0x5ae>
 8004830:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004834:	4849      	ldr	r0, [pc, #292]	@ (800495c <HAL_RCC_OscConfig+0x6d0>)
 8004836:	f7fd fd5f 	bl	80022f8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800483a:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10d      	bne.n	8004862 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b44      	ldr	r3, [pc, #272]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484a:	4a43      	ldr	r2, [pc, #268]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004850:	6593      	str	r3, [r2, #88]	@ 0x58
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485e:	2301      	movs	r3, #1
 8004860:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004862:	4b3f      	ldr	r3, [pc, #252]	@ (8004960 <HAL_RCC_OscConfig+0x6d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d118      	bne.n	80048a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486e:	4b3c      	ldr	r3, [pc, #240]	@ (8004960 <HAL_RCC_OscConfig+0x6d4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <HAL_RCC_OscConfig+0x6d4>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487a:	f7fe fbff 	bl	800307c <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004882:	f7fe fbfb 	bl	800307c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1f4      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004894:	4b32      	ldr	r3, [pc, #200]	@ (8004960 <HAL_RCC_OscConfig+0x6d4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d108      	bne.n	80048ba <HAL_RCC_OscConfig+0x62e>
 80048a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048b8:	e024      	b.n	8004904 <HAL_RCC_OscConfig+0x678>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d110      	bne.n	80048e4 <HAL_RCC_OscConfig+0x658>
 80048c2:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	4a23      	ldr	r2, [pc, #140]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048d2:	4b21      	ldr	r3, [pc, #132]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048e2:	e00f      	b.n	8004904 <HAL_RCC_OscConfig+0x678>
 80048e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048f4:	4b18      	ldr	r3, [pc, #96]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fe fbb6 	bl	800307c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fe fbb2 	bl	800307c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1a9      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_OscConfig+0x6cc>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ed      	beq.n	8004914 <HAL_RCC_OscConfig+0x688>
 8004938:	e01b      	b.n	8004972 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fe fb9f 	bl	800307c <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004940:	e010      	b.n	8004964 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fe fb9b 	bl	800307c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d907      	bls.n	8004964 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e192      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
 8004958:	40021000 	.word	0x40021000
 800495c:	0800c23c 	.word	0x0800c23c
 8004960:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004964:	4b98      	ldr	r3, [pc, #608]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e7      	bne.n	8004942 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004972:	7ffb      	ldrb	r3, [r7, #31]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004978:	4b93      	ldr	r3, [pc, #588]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497c:	4a92      	ldr	r2, [pc, #584]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004982:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x71a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	2b01      	cmp	r3, #1
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_OscConfig+0x71a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	2b02      	cmp	r3, #2
 800499a:	d004      	beq.n	80049a6 <HAL_RCC_OscConfig+0x71a>
 800499c:	f240 316e 	movw	r1, #878	@ 0x36e
 80049a0:	488a      	ldr	r0, [pc, #552]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 80049a2:	f7fd fca9 	bl	80022f8 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8166 	beq.w	8004c7c <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 813c 	bne.w	8004c32 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d010      	beq.n	80049e4 <HAL_RCC_OscConfig+0x758>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d00c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x758>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d008      	beq.n	80049e4 <HAL_RCC_OscConfig+0x758>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d004      	beq.n	80049e4 <HAL_RCC_OscConfig+0x758>
 80049da:	f240 3176 	movw	r1, #886	@ 0x376
 80049de:	487b      	ldr	r0, [pc, #492]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 80049e0:	f7fd fc8a 	bl	80022f8 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_RCC_OscConfig+0x768>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d904      	bls.n	80049fe <HAL_RCC_OscConfig+0x772>
 80049f4:	f240 3177 	movw	r1, #887	@ 0x377
 80049f8:	4874      	ldr	r0, [pc, #464]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 80049fa:	f7fd fc7d 	bl	80022f8 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a02:	2b07      	cmp	r3, #7
 8004a04:	d903      	bls.n	8004a0e <HAL_RCC_OscConfig+0x782>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	2b56      	cmp	r3, #86	@ 0x56
 8004a0c:	d904      	bls.n	8004a18 <HAL_RCC_OscConfig+0x78c>
 8004a0e:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8004a12:	486e      	ldr	r0, [pc, #440]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 8004a14:	f7fd fc70 	bl	80022f8 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_OscConfig+0x7a6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	2b11      	cmp	r3, #17
 8004a26:	d004      	beq.n	8004a32 <HAL_RCC_OscConfig+0x7a6>
 8004a28:	f240 317a 	movw	r1, #890	@ 0x37a
 8004a2c:	4867      	ldr	r0, [pc, #412]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 8004a2e:	f7fd fc63 	bl	80022f8 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d010      	beq.n	8004a5c <HAL_RCC_OscConfig+0x7d0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x7d0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d008      	beq.n	8004a5c <HAL_RCC_OscConfig+0x7d0>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d004      	beq.n	8004a5c <HAL_RCC_OscConfig+0x7d0>
 8004a52:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8004a56:	485d      	ldr	r0, [pc, #372]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 8004a58:	f7fd fc4e 	bl	80022f8 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d010      	beq.n	8004a86 <HAL_RCC_OscConfig+0x7fa>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d00c      	beq.n	8004a86 <HAL_RCC_OscConfig+0x7fa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d008      	beq.n	8004a86 <HAL_RCC_OscConfig+0x7fa>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d004      	beq.n	8004a86 <HAL_RCC_OscConfig+0x7fa>
 8004a7c:	f240 317d 	movw	r1, #893	@ 0x37d
 8004a80:	4852      	ldr	r0, [pc, #328]	@ (8004bcc <HAL_RCC_OscConfig+0x940>)
 8004a82:	f7fd fc39 	bl	80022f8 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a86:	4b50      	ldr	r3, [pc, #320]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0203 	and.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d130      	bne.n	8004afc <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d127      	bne.n	8004afc <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d11f      	bne.n	8004afc <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ac6:	2a07      	cmp	r2, #7
 8004ac8:	bf14      	ite	ne
 8004aca:	2201      	movne	r2, #1
 8004acc:	2200      	moveq	r2, #0
 8004ace:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d113      	bne.n	8004afc <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d109      	bne.n	8004afc <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	3b01      	subs	r3, #1
 8004af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d074      	beq.n	8004be6 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d06f      	beq.n	8004be2 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b02:	4b31      	ldr	r3, [pc, #196]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0af      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a29      	ldr	r2, [pc, #164]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b2a:	f7fe faa7 	bl	800307c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fe faa3 	bl	800307c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e09c      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	4b20      	ldr	r3, [pc, #128]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b50:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <HAL_RCC_OscConfig+0x944>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b60:	3a01      	subs	r2, #1
 8004b62:	0112      	lsls	r2, r2, #4
 8004b64:	4311      	orrs	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b6a:	0212      	lsls	r2, r2, #8
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b72:	0852      	lsrs	r2, r2, #1
 8004b74:	3a01      	subs	r2, #1
 8004b76:	0552      	lsls	r2, r2, #21
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b7e:	0852      	lsrs	r2, r2, #1
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0652      	lsls	r2, r2, #25
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b8a:	0912      	lsrs	r2, r2, #4
 8004b8c:	0452      	lsls	r2, r2, #17
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	490d      	ldr	r1, [pc, #52]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004b9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4a08      	ldr	r2, [pc, #32]	@ (8004bc8 <HAL_RCC_OscConfig+0x93c>)
 8004ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bac:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bae:	f7fe fa65 	bl	800307c <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	e00e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fe fa61 	bl	800307c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d907      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e05a      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	0800c23c 	.word	0x0800c23c
 8004bd0:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ea      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be0:	e04c      	b.n	8004c7c <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e04b      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d144      	bne.n	8004c7c <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bf2:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a24      	ldr	r2, [pc, #144]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfe:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	4a21      	ldr	r2, [pc, #132]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c08:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0a:	f7fe fa37 	bl	800307c <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fe fa33 	bl	800307c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e02c      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c24:	4b18      	ldr	r3, [pc, #96]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x986>
 8004c30:	e024      	b.n	8004c7c <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d01f      	beq.n	8004c78 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c38:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a12      	ldr	r2, [pc, #72]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe fa1a 	bl	800307c <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fe fa16 	bl	800307c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e00f      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c6a:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	4906      	ldr	r1, [pc, #24]	@ (8004c88 <HAL_RCC_OscConfig+0x9fc>)
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <HAL_RCC_OscConfig+0xa00>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
 8004c76:	e001      	b.n	8004c7c <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	feeefffc 	.word	0xfeeefffc

08004c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e186      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x24>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b0f      	cmp	r3, #15
 8004cb2:	d904      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x2e>
 8004cb4:	f240 4159 	movw	r1, #1113	@ 0x459
 8004cb8:	4882      	ldr	r0, [pc, #520]	@ (8004ec4 <HAL_RCC_ClockConfig+0x234>)
 8004cba:	f7fd fb1d 	bl	80022f8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x56>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x56>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x56>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x56>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d004      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x56>
 8004cdc:	f240 415a 	movw	r1, #1114	@ 0x45a
 8004ce0:	4878      	ldr	r0, [pc, #480]	@ (8004ec4 <HAL_RCC_ClockConfig+0x234>)
 8004ce2:	f7fd fb09 	bl	80022f8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce6:	4b78      	ldr	r3, [pc, #480]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d910      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf4:	4b74      	ldr	r3, [pc, #464]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	4972      	ldr	r1, [pc, #456]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d04:	4b70      	ldr	r3, [pc, #448]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e14d      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d039      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d024      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b80      	cmp	r3, #128	@ 0x80
 8004d30:	d020      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b90      	cmp	r3, #144	@ 0x90
 8004d38:	d01c      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d40:	d018      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2bb0      	cmp	r3, #176	@ 0xb0
 8004d48:	d014      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d50:	d010      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2bd0      	cmp	r3, #208	@ 0xd0
 8004d58:	d00c      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2be0      	cmp	r3, #224	@ 0xe0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2bf0      	cmp	r3, #240	@ 0xf0
 8004d68:	d004      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xe4>
 8004d6a:	f240 4172 	movw	r1, #1138	@ 0x472
 8004d6e:	4855      	ldr	r0, [pc, #340]	@ (8004ec4 <HAL_RCC_ClockConfig+0x234>)
 8004d70:	f7fd fac2 	bl	80022f8 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	4b54      	ldr	r3, [pc, #336]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d908      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494e      	ldr	r1, [pc, #312]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d061      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x13c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d00c      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x13c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d008      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x13c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d004      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x13c>
 8004dc2:	f240 417d 	movw	r1, #1149	@ 0x47d
 8004dc6:	483f      	ldr	r0, [pc, #252]	@ (8004ec4 <HAL_RCC_ClockConfig+0x234>)
 8004dc8:	f7fd fa96 	bl	80022f8 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d121      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0e6      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dec:	4b37      	ldr	r3, [pc, #220]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d115      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0da      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d107      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e04:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0ce      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e14:	4b2d      	ldr	r3, [pc, #180]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0c6      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e24:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 0203 	bic.w	r2, r3, #3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4926      	ldr	r1, [pc, #152]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e36:	f7fe f921 	bl	800307c <HAL_GetTick>
 8004e3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3e:	f7fe f91d 	bl	800307c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0ae      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 020c 	and.w	r2, r3, #12
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d1eb      	bne.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d208      	bcs.n	8004e94 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e82:	4b12      	ldr	r3, [pc, #72]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	490f      	ldr	r1, [pc, #60]	@ (8004ecc <HAL_RCC_ClockConfig+0x23c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d216      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0207 	bic.w	r2, r3, #7
 8004eaa:	4907      	ldr	r1, [pc, #28]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <HAL_RCC_ClockConfig+0x238>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d007      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e076      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x322>
 8004ec4:	0800c23c 	.word	0x0800c23c
 8004ec8:	40022000 	.word	0x40022000
 8004ecc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d025      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d018      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x286>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eec:	d013      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x286>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004ef6:	d00e      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x286>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f00:	d009      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x286>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f0a:	d004      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x286>
 8004f0c:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8004f10:	482a      	ldr	r0, [pc, #168]	@ (8004fbc <HAL_RCC_ClockConfig+0x32c>)
 8004f12:	f7fd f9f1 	bl	80022f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f16:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc0 <HAL_RCC_ClockConfig+0x330>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4927      	ldr	r1, [pc, #156]	@ (8004fc0 <HAL_RCC_ClockConfig+0x330>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d026      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d018      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x2de>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f44:	d013      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x2de>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004f4e:	d00e      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x2de>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f58:	d009      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x2de>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f62:	d004      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x2de>
 8004f64:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8004f68:	4814      	ldr	r0, [pc, #80]	@ (8004fbc <HAL_RCC_ClockConfig+0x32c>)
 8004f6a:	f7fd f9c5 	bl	80022f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6e:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <HAL_RCC_ClockConfig+0x330>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4910      	ldr	r1, [pc, #64]	@ (8004fc0 <HAL_RCC_ClockConfig+0x330>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f82:	f000 f825 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004f86:	4602      	mov	r2, r0
 8004f88:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <HAL_RCC_ClockConfig+0x330>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	490c      	ldr	r1, [pc, #48]	@ (8004fc4 <HAL_RCC_ClockConfig+0x334>)
 8004f94:	5ccb      	ldrb	r3, [r1, r3]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc8 <HAL_RCC_ClockConfig+0x338>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <HAL_RCC_ClockConfig+0x33c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f818 	bl	8002fdc <HAL_InitTick>
 8004fac:	4603      	mov	r3, r0
 8004fae:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	0800c23c 	.word	0x0800c23c
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800c398 	.word	0x0800c398
 8004fc8:	20000010 	.word	0x20000010
 8004fcc:	20000014 	.word	0x20000014

08004fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	@ 0x24
 8004fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fde:	4b3e      	ldr	r3, [pc, #248]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x34>
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d121      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d11e      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005004:	4b34      	ldr	r3, [pc, #208]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005010:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e005      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005020:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800502c:	4a2b      	ldr	r2, [pc, #172]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10d      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d102      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005048:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e004      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d101      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d134      	bne.n	80050c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800505e:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0xa6>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d003      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0xac>
 8005074:	e005      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005078:	617b      	str	r3, [r7, #20]
      break;
 800507a:	e005      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800507c:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800507e:	617b      	str	r3, [r7, #20]
      break;
 8005080:	e002      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	617b      	str	r3, [r7, #20]
      break;
 8005086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005088:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	fb03 f202 	mul.w	r2, r3, r2
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ae:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	0e5b      	lsrs	r3, r3, #25
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	3301      	adds	r3, #1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050c8:	69bb      	ldr	r3, [r7, #24]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3724      	adds	r7, #36	@ 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800c3b0 	.word	0x0800c3b0
 80050e0:	00f42400 	.word	0x00f42400
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000010 	.word	0x20000010

08005100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005104:	f7ff fff0 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	@ (8005128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800c3a8 	.word	0x0800c3a8

0800512c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005130:	f7ff ffda 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0adb      	lsrs	r3, r3, #11
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4904      	ldr	r1, [pc, #16]	@ (8005154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	0800c3a8 	.word	0x0800c3a8

08005158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005164:	4b2a      	ldr	r3, [pc, #168]	@ (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005170:	f7ff f81c 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 8005174:	6178      	str	r0, [r7, #20]
 8005176:	e014      	b.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005178:	4b25      	ldr	r3, [pc, #148]	@ (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517c:	4a24      	ldr	r2, [pc, #144]	@ (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005182:	6593      	str	r3, [r2, #88]	@ 0x58
 8005184:	4b22      	ldr	r3, [pc, #136]	@ (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005190:	f7ff f80c 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 8005194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005196:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519a:	4a1d      	ldr	r2, [pc, #116]	@ (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800519c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a8:	d10b      	bne.n	80051c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b80      	cmp	r3, #128	@ 0x80
 80051ae:	d919      	bls.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80051b4:	d902      	bls.n	80051bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051b6:	2302      	movs	r3, #2
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	e013      	b.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051bc:	2301      	movs	r3, #1
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	e010      	b.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b80      	cmp	r3, #128	@ 0x80
 80051c6:	d902      	bls.n	80051ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051c8:	2303      	movs	r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e00a      	b.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b80      	cmp	r3, #128	@ 0x80
 80051d2:	d102      	bne.n	80051da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051d4:	2302      	movs	r3, #2
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	e004      	b.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b70      	cmp	r3, #112	@ 0x70
 80051de:	d101      	bne.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051e0:	2301      	movs	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f023 0207 	bic.w	r2, r3, #7
 80051ec:	4909      	ldr	r1, [pc, #36]	@ (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051f4:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40021000 	.word	0x40021000
 8005214:	40022000 	.word	0x40022000

08005218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005220:	2300      	movs	r3, #0
 8005222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005224:	2300      	movs	r3, #0
 8005226:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523c:	d303      	bcc.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800523e:	21c9      	movs	r1, #201	@ 0xc9
 8005240:	4889      	ldr	r0, [pc, #548]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005242:	f7fd f859 	bl	80022f8 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524e:	2b00      	cmp	r3, #0
 8005250:	d058      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800525e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005262:	d00d      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800526c:	d008      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005272:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005276:	d003      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005278:	21d1      	movs	r1, #209	@ 0xd1
 800527a:	487b      	ldr	r0, [pc, #492]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800527c:	f7fd f83c 	bl	80022f8 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005284:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005288:	d02a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800528a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800528e:	d824      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8005290:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005294:	d008      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005296:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800529a:	d81e      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80052a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052a4:	d010      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80052a6:	e018      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052a8:	4b70      	ldr	r3, [pc, #448]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a6f      	ldr	r2, [pc, #444]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052b4:	e015      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fc69 	bl	8005b94 <RCCEx_PLLSAI1_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052c6:	e00c      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3320      	adds	r3, #32
 80052cc:	2100      	movs	r1, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fde0 	bl	8005e94 <RCCEx_PLLSAI2_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052d8:	e003      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	74fb      	strb	r3, [r7, #19]
      break;
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 80052e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e2:	7cfb      	ldrb	r3, [r7, #19]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052e8:	4b60      	ldr	r3, [pc, #384]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f6:	495d      	ldr	r1, [pc, #372]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052fe:	e001      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d059      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005320:	d00e      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800532a:	d009      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005330:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005334:	d004      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005336:	f240 110f 	movw	r1, #271	@ 0x10f
 800533a:	484b      	ldr	r0, [pc, #300]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800533c:	f7fc ffdc 	bl	80022f8 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005344:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005348:	d02a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800534a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800534e:	d824      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005350:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005354:	d008      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800535a:	d81e      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005364:	d010      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005366:	e018      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005368:	4b40      	ldr	r3, [pc, #256]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4a3f      	ldr	r2, [pc, #252]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005372:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005374:	e015      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fc09 	bl	8005b94 <RCCEx_PLLSAI1_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005386:	e00c      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3320      	adds	r3, #32
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fd80 	bl	8005e94 <RCCEx_PLLSAI2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005398:	e003      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	74fb      	strb	r3, [r7, #19]
      break;
 800539e:	e000      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80053a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053a8:	4b30      	ldr	r3, [pc, #192]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b6:	492d      	ldr	r1, [pc, #180]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80053be:	e001      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80c2 	beq.w	8005556 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d2:	2300      	movs	r3, #0
 80053d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ea:	d010      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005402:	d004      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005404:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005408:	4817      	ldr	r0, [pc, #92]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800540a:	f7fc ff75 	bl	80022f8 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800540e:	4b17      	ldr	r3, [pc, #92]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005428:	4a10      	ldr	r2, [pc, #64]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800542a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005430:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543c:	2301      	movs	r3, #1
 800543e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005440:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0a      	ldr	r2, [pc, #40]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800544a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544c:	f7fd fe16 	bl	800307c <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005452:	e00f      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fd fe12 	bl	800307c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d908      	bls.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	74fb      	strb	r3, [r7, #19]
        break;
 8005466:	e00b      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8005468:	0800c274 	.word	0x0800c274
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005474:	4b30      	ldr	r3, [pc, #192]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0e9      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d15c      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005486:	4b2d      	ldr	r3, [pc, #180]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01f      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d019      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054a4:	4b25      	ldr	r3, [pc, #148]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054b0:	4b22      	ldr	r3, [pc, #136]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	4a21      	ldr	r2, [pc, #132]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054c0:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	4a1d      	ldr	r2, [pc, #116]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80054c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054d0:	4a1a      	ldr	r2, [pc, #104]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e2:	f7fd fdcb 	bl	800307c <HAL_GetTick>
 80054e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e8:	e00b      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fd fdc7 	bl	800307c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d902      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005500:	e006      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005502:	4b0e      	ldr	r3, [pc, #56]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ec      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10c      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005516:	4b09      	ldr	r3, [pc, #36]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005526:	4905      	ldr	r1, [pc, #20]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800552e:	e009      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8005536:	bf00      	nop
 8005538:	40007000 	.word	0x40007000
 800553c:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005544:	7c7b      	ldrb	r3, [r7, #17]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d105      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b8d      	ldr	r3, [pc, #564]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	4a8c      	ldr	r2, [pc, #560]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01f      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	2b00      	cmp	r3, #0
 8005568:	d010      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556e:	2b01      	cmp	r3, #1
 8005570:	d00c      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005576:	2b03      	cmp	r3, #3
 8005578:	d008      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	2b02      	cmp	r3, #2
 8005580:	d004      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005582:	f240 1199 	movw	r1, #409	@ 0x199
 8005586:	487f      	ldr	r0, [pc, #508]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005588:	f7fc feb6 	bl	80022f8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800558c:	4b7c      	ldr	r3, [pc, #496]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005592:	f023 0203 	bic.w	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	4979      	ldr	r1, [pc, #484]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01f      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d00c      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d008      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d004      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80055ce:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80055d2:	486c      	ldr	r0, [pc, #432]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80055d4:	f7fc fe90 	bl	80022f8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055d8:	4b69      	ldr	r3, [pc, #420]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055de:	f023 020c 	bic.w	r2, r3, #12
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e6:	4966      	ldr	r1, [pc, #408]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01f      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	2b10      	cmp	r3, #16
 8005608:	d00c      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	2b30      	cmp	r3, #48	@ 0x30
 8005610:	d008      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	2b20      	cmp	r3, #32
 8005618:	d004      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800561a:	f240 11af 	movw	r1, #431	@ 0x1af
 800561e:	4859      	ldr	r0, [pc, #356]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005620:	f7fc fe6a 	bl	80022f8 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005624:	4b56      	ldr	r3, [pc, #344]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	4953      	ldr	r1, [pc, #332]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01f      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564a:	2b00      	cmp	r3, #0
 800564c:	d010      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	2b40      	cmp	r3, #64	@ 0x40
 8005654:	d00c      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565a:	2bc0      	cmp	r3, #192	@ 0xc0
 800565c:	d008      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	d004      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005666:	f240 11bd 	movw	r1, #445	@ 0x1bd
 800566a:	4846      	ldr	r0, [pc, #280]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800566c:	f7fc fe44 	bl	80022f8 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005670:	4b43      	ldr	r3, [pc, #268]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	4940      	ldr	r1, [pc, #256]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d022      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a2:	d00e      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056ac:	d009      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b6:	d004      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80056b8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80056bc:	4831      	ldr	r0, [pc, #196]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80056be:	f7fc fe1b 	bl	80022f8 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d0:	492b      	ldr	r1, [pc, #172]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d022      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d013      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f4:	d00e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056fe:	d009      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005708:	d004      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800570a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800570e:	481d      	ldr	r0, [pc, #116]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005710:	f7fc fdf2 	bl	80022f8 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005714:	4b1a      	ldr	r3, [pc, #104]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005722:	4917      	ldr	r1, [pc, #92]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005732:	2b00      	cmp	r3, #0
 8005734:	d028      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005746:	d00e      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005750:	d009      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800575a:	d004      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800575c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005760:	4808      	ldr	r0, [pc, #32]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005762:	f7fc fdc9 	bl	80022f8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005766:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005774:	4902      	ldr	r1, [pc, #8]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800577c:	e004      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	0800c274 	.word	0x0800c274
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d022      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005798:	2b00      	cmp	r3, #0
 800579a:	d013      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a4:	d00e      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ae:	d009      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057b8:	d004      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057ba:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80057be:	489e      	ldr	r0, [pc, #632]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80057c0:	f7fc fd9a 	bl	80022f8 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c4:	4b9d      	ldr	r3, [pc, #628]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	499a      	ldr	r1, [pc, #616]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01d      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00e      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f6:	d009      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005800:	d004      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005802:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8005806:	488c      	ldr	r0, [pc, #560]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005808:	f7fc fd76 	bl	80022f8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800580c:	4b8b      	ldr	r3, [pc, #556]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581a:	4988      	ldr	r1, [pc, #544]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01d      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800583e:	d009      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005848:	d004      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800584a:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800584e:	487a      	ldr	r0, [pc, #488]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005850:	f7fc fd52 	bl	80022f8 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005854:	4b79      	ldr	r3, [pc, #484]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	4976      	ldr	r1, [pc, #472]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01d      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005886:	d009      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005890:	d004      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005892:	f240 2107 	movw	r1, #519	@ 0x207
 8005896:	4868      	ldr	r0, [pc, #416]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005898:	f7fc fd2e 	bl	80022f8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800589c:	4b67      	ldr	r3, [pc, #412]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058aa:	4964      	ldr	r1, [pc, #400]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d040      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d013      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ce:	d00e      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058d8:	d009      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80058e2:	d004      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80058e4:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80058e8:	4853      	ldr	r0, [pc, #332]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80058ea:	f7fc fd05 	bl	80022f8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ee:	4b53      	ldr	r3, [pc, #332]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fc:	494f      	ldr	r1, [pc, #316]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590c:	d106      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	4a4a      	ldr	r2, [pc, #296]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005918:	60d3      	str	r3, [r2, #12]
 800591a:	e011      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005924:	d10c      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3304      	adds	r3, #4
 800592a:	2101      	movs	r1, #1
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f931 	bl	8005b94 <RCCEx_PLLSAI1_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005936:	7cfb      	ldrb	r3, [r7, #19]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d040      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800595c:	d00e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x764>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005966:	d009      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005970:	d004      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005972:	f240 2141 	movw	r1, #577	@ 0x241
 8005976:	4830      	ldr	r0, [pc, #192]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005978:	f7fc fcbe 	bl	80022f8 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800597c:	4b2f      	ldr	r3, [pc, #188]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	492c      	ldr	r1, [pc, #176]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800599a:	d106      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800599c:	4b27      	ldr	r3, [pc, #156]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a26      	ldr	r2, [pc, #152]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80059a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059a6:	60d3      	str	r3, [r2, #12]
 80059a8:	e011      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059b2:	d10c      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	2101      	movs	r1, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f8ea 	bl	8005b94 <RCCEx_PLLSAI1_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d044      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059ea:	d00e      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059f4:	d009      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80059fe:	d004      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005a00:	f240 2166 	movw	r1, #614	@ 0x266
 8005a04:	480c      	ldr	r0, [pc, #48]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005a06:	f7fc fc77 	bl	80022f8 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a18:	4908      	ldr	r1, [pc, #32]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a28:	d10a      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a2a:	4b04      	ldr	r3, [pc, #16]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	4a03      	ldr	r2, [pc, #12]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a34:	60d3      	str	r3, [r2, #12]
 8005a36:	e015      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005a38:	0800c274 	.word	0x0800c274
 8005a3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f89f 	bl	8005b94 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d047      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d013      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a80:	d00e      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a8a:	d009      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a94:	d004      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005a96:	f240 2186 	movw	r1, #646	@ 0x286
 8005a9a:	483c      	ldr	r0, [pc, #240]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005a9c:	f7fc fc2c 	bl	80022f8 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aae:	4938      	ldr	r1, [pc, #224]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005abe:	d10d      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f864 	bl	8005b94 <RCCEx_PLLSAI1_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d014      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	74bb      	strb	r3, [r7, #18]
 8005ada:	e011      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3320      	adds	r3, #32
 8005aea:	2102      	movs	r1, #2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f9d1 	bl	8005e94 <RCCEx_PLLSAI2_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af6:	7cfb      	ldrb	r3, [r7, #19]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8005afc:	7cfb      	ldrb	r3, [r7, #19]
 8005afe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d018      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1c:	d004      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005b1e:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8005b22:	481a      	ldr	r0, [pc, #104]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005b24:	f7fc fbe8 	bl	80022f8 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b28:	4b19      	ldr	r3, [pc, #100]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b36:	4916      	ldr	r1, [pc, #88]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01b      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b5e:	d004      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005b60:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8005b64:	4809      	ldr	r0, [pc, #36]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005b66:	f7fc fbc7 	bl	80022f8 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b6a:	4b09      	ldr	r3, [pc, #36]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7a:	4905      	ldr	r1, [pc, #20]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b82:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	0800c274 	.word	0x0800c274
 8005b90:	40021000 	.word	0x40021000

08005b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <RCCEx_PLLSAI1_Config+0x38>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d00c      	beq.n	8005bcc <RCCEx_PLLSAI1_Config+0x38>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d008      	beq.n	8005bcc <RCCEx_PLLSAI1_Config+0x38>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d004      	beq.n	8005bcc <RCCEx_PLLSAI1_Config+0x38>
 8005bc2:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005bc6:	4887      	ldr	r0, [pc, #540]	@ (8005de4 <RCCEx_PLLSAI1_Config+0x250>)
 8005bc8:	f7fc fb96 	bl	80022f8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <RCCEx_PLLSAI1_Config+0x48>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d904      	bls.n	8005be6 <RCCEx_PLLSAI1_Config+0x52>
 8005bdc:	f640 3163 	movw	r1, #2915	@ 0xb63
 8005be0:	4880      	ldr	r0, [pc, #512]	@ (8005de4 <RCCEx_PLLSAI1_Config+0x250>)
 8005be2:	f7fc fb89 	bl	80022f8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b07      	cmp	r3, #7
 8005bec:	d903      	bls.n	8005bf6 <RCCEx_PLLSAI1_Config+0x62>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b56      	cmp	r3, #86	@ 0x56
 8005bf4:	d904      	bls.n	8005c00 <RCCEx_PLLSAI1_Config+0x6c>
 8005bf6:	f640 3164 	movw	r1, #2916	@ 0xb64
 8005bfa:	487a      	ldr	r0, [pc, #488]	@ (8005de4 <RCCEx_PLLSAI1_Config+0x250>)
 8005bfc:	f7fc fb7c 	bl	80022f8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0x90>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d105      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0x90>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <RCCEx_PLLSAI1_Config+0xa0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <RCCEx_PLLSAI1_Config+0xaa>
 8005c34:	f640 3165 	movw	r1, #2917	@ 0xb65
 8005c38:	486a      	ldr	r0, [pc, #424]	@ (8005de4 <RCCEx_PLLSAI1_Config+0x250>)
 8005c3a:	f7fc fb5d 	bl	80022f8 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c4a:	4b67      	ldr	r3, [pc, #412]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0203 	and.w	r2, r3, #3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d10d      	bne.n	8005c76 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c62:	4b61      	ldr	r3, [pc, #388]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
       ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d047      	beq.n	8005d06 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
 8005c7a:	e044      	b.n	8005d06 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d018      	beq.n	8005cb6 <RCCEx_PLLSAI1_Config+0x122>
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d825      	bhi.n	8005cd4 <RCCEx_PLLSAI1_Config+0x140>
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d002      	beq.n	8005c92 <RCCEx_PLLSAI1_Config+0xfe>
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d009      	beq.n	8005ca4 <RCCEx_PLLSAI1_Config+0x110>
 8005c90:	e020      	b.n	8005cd4 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c92:	4b55      	ldr	r3, [pc, #340]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d11d      	bne.n	8005cda <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca2:	e01a      	b.n	8005cda <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ca4:	4b50      	ldr	r3, [pc, #320]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d116      	bne.n	8005cde <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb4:	e013      	b.n	8005cde <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cc2:	4b49      	ldr	r3, [pc, #292]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cd2:	e006      	b.n	8005ce2 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd8:	e004      	b.n	8005ce4 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e002      	b.n	8005ce4 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10d      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cea:	4b3f      	ldr	r3, [pc, #252]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6819      	ldr	r1, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	4939      	ldr	r1, [pc, #228]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f040 80ba 	bne.w	8005e82 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d0e:	4b36      	ldr	r3, [pc, #216]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a35      	ldr	r2, [pc, #212]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005d14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1a:	f7fd f9af 	bl	800307c <HAL_GetTick>
 8005d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d20:	e009      	b.n	8005d36 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d22:	f7fd f9ab 	bl	800307c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d902      	bls.n	8005d36 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	73fb      	strb	r3, [r7, #15]
        break;
 8005d34:	e005      	b.n	8005d42 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d36:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ef      	bne.n	8005d22 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f040 809c 	bne.w	8005e82 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11e      	bne.n	8005d8e <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b07      	cmp	r3, #7
 8005d56:	d008      	beq.n	8005d6a <RCCEx_PLLSAI1_Config+0x1d6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b11      	cmp	r3, #17
 8005d5e:	d004      	beq.n	8005d6a <RCCEx_PLLSAI1_Config+0x1d6>
 8005d60:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005d64:	481f      	ldr	r0, [pc, #124]	@ (8005de4 <RCCEx_PLLSAI1_Config+0x250>)
 8005d66:	f7fc fac7 	bl	80022f8 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6892      	ldr	r2, [r2, #8]
 8005d7a:	0211      	lsls	r1, r2, #8
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68d2      	ldr	r2, [r2, #12]
 8005d80:	0912      	lsrs	r2, r2, #4
 8005d82:	0452      	lsls	r2, r2, #17
 8005d84:	430a      	orrs	r2, r1
 8005d86:	4918      	ldr	r1, [pc, #96]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	610b      	str	r3, [r1, #16]
 8005d8c:	e055      	b.n	8005e3a <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d12b      	bne.n	8005dec <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d010      	beq.n	8005dbe <RCCEx_PLLSAI1_Config+0x22a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d00c      	beq.n	8005dbe <RCCEx_PLLSAI1_Config+0x22a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d008      	beq.n	8005dbe <RCCEx_PLLSAI1_Config+0x22a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d004      	beq.n	8005dbe <RCCEx_PLLSAI1_Config+0x22a>
 8005db4:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8005db8:	480a      	ldr	r0, [pc, #40]	@ (8005de4 <RCCEx_PLLSAI1_Config+0x250>)
 8005dba:	f7fc fa9d 	bl	80022f8 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005dc6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6892      	ldr	r2, [r2, #8]
 8005dce:	0211      	lsls	r1, r2, #8
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6912      	ldr	r2, [r2, #16]
 8005dd4:	0852      	lsrs	r2, r2, #1
 8005dd6:	3a01      	subs	r2, #1
 8005dd8:	0552      	lsls	r2, r2, #21
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	4902      	ldr	r1, [pc, #8]	@ (8005de8 <RCCEx_PLLSAI1_Config+0x254>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	610b      	str	r3, [r1, #16]
 8005de2:	e02a      	b.n	8005e3a <RCCEx_PLLSAI1_Config+0x2a6>
 8005de4:	0800c274 	.word	0x0800c274
 8005de8:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d010      	beq.n	8005e16 <RCCEx_PLLSAI1_Config+0x282>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d00c      	beq.n	8005e16 <RCCEx_PLLSAI1_Config+0x282>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	d008      	beq.n	8005e16 <RCCEx_PLLSAI1_Config+0x282>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d004      	beq.n	8005e16 <RCCEx_PLLSAI1_Config+0x282>
 8005e0c:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8005e10:	481e      	ldr	r0, [pc, #120]	@ (8005e8c <RCCEx_PLLSAI1_Config+0x2f8>)
 8005e12:	f7fc fa71 	bl	80022f8 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e16:	4b1e      	ldr	r3, [pc, #120]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6892      	ldr	r2, [r2, #8]
 8005e26:	0211      	lsls	r1, r2, #8
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6952      	ldr	r2, [r2, #20]
 8005e2c:	0852      	lsrs	r2, r2, #1
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	0652      	lsls	r2, r2, #25
 8005e32:	430a      	orrs	r2, r1
 8005e34:	4916      	ldr	r1, [pc, #88]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e3a:	4b15      	ldr	r3, [pc, #84]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a14      	ldr	r2, [pc, #80]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e46:	f7fd f919 	bl	800307c <HAL_GetTick>
 8005e4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e4c:	e009      	b.n	8005e62 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e4e:	f7fd f915 	bl	800307c <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d902      	bls.n	8005e62 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8005e60:	e005      	b.n	8005e6e <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e62:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0ef      	beq.n	8005e4e <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e74:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4904      	ldr	r1, [pc, #16]	@ (8005e90 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	0800c274 	.word	0x0800c274
 8005e90:	40021000 	.word	0x40021000

08005e94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <RCCEx_PLLSAI2_Config+0x38>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d00c      	beq.n	8005ecc <RCCEx_PLLSAI2_Config+0x38>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d008      	beq.n	8005ecc <RCCEx_PLLSAI2_Config+0x38>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d004      	beq.n	8005ecc <RCCEx_PLLSAI2_Config+0x38>
 8005ec2:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8005ec6:	4896      	ldr	r0, [pc, #600]	@ (8006120 <RCCEx_PLLSAI2_Config+0x28c>)
 8005ec8:	f7fc fa16 	bl	80022f8 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <RCCEx_PLLSAI2_Config+0x48>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d904      	bls.n	8005ee6 <RCCEx_PLLSAI2_Config+0x52>
 8005edc:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8005ee0:	488f      	ldr	r0, [pc, #572]	@ (8006120 <RCCEx_PLLSAI2_Config+0x28c>)
 8005ee2:	f7fc fa09 	bl	80022f8 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	d903      	bls.n	8005ef6 <RCCEx_PLLSAI2_Config+0x62>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b56      	cmp	r3, #86	@ 0x56
 8005ef4:	d904      	bls.n	8005f00 <RCCEx_PLLSAI2_Config+0x6c>
 8005ef6:	f640 4131 	movw	r1, #3121	@ 0xc31
 8005efa:	4889      	ldr	r0, [pc, #548]	@ (8006120 <RCCEx_PLLSAI2_Config+0x28c>)
 8005efc:	f7fc f9fc 	bl	80022f8 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <RCCEx_PLLSAI2_Config+0x84>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <RCCEx_PLLSAI2_Config+0x94>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <RCCEx_PLLSAI2_Config+0x9e>
 8005f28:	f640 4132 	movw	r1, #3122	@ 0xc32
 8005f2c:	487c      	ldr	r0, [pc, #496]	@ (8006120 <RCCEx_PLLSAI2_Config+0x28c>)
 8005f2e:	f7fc f9e3 	bl	80022f8 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f32:	4b7c      	ldr	r3, [pc, #496]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d018      	beq.n	8005f70 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f3e:	4b79      	ldr	r3, [pc, #484]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d10d      	bne.n	8005f6a <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
       ||
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f56:	4b73      	ldr	r3, [pc, #460]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
       ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d047      	beq.n	8005ffa <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
 8005f6e:	e044      	b.n	8005ffa <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d018      	beq.n	8005faa <RCCEx_PLLSAI2_Config+0x116>
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d825      	bhi.n	8005fc8 <RCCEx_PLLSAI2_Config+0x134>
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d002      	beq.n	8005f86 <RCCEx_PLLSAI2_Config+0xf2>
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d009      	beq.n	8005f98 <RCCEx_PLLSAI2_Config+0x104>
 8005f84:	e020      	b.n	8005fc8 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f86:	4b67      	ldr	r3, [pc, #412]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11d      	bne.n	8005fce <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f96:	e01a      	b.n	8005fce <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f98:	4b62      	ldr	r3, [pc, #392]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d116      	bne.n	8005fd2 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa8:	e013      	b.n	8005fd2 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005faa:	4b5e      	ldr	r3, [pc, #376]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fc6:	e006      	b.n	8005fd6 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
      break;
 8005fcc:	e004      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e002      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e000      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10d      	bne.n	8005ffa <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fde:	4b51      	ldr	r3, [pc, #324]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6819      	ldr	r1, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	494b      	ldr	r1, [pc, #300]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 808a 	bne.w	8006116 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006002:	4b48      	ldr	r3, [pc, #288]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a47      	ldr	r2, [pc, #284]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8006008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800600c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600e:	f7fd f835 	bl	800307c <HAL_GetTick>
 8006012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006014:	e009      	b.n	800602a <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006016:	f7fd f831 	bl	800307c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d902      	bls.n	800602a <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	73fb      	strb	r3, [r7, #15]
        break;
 8006028:	e005      	b.n	8006036 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800602a:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ef      	bne.n	8006016 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d16c      	bne.n	8006116 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11e      	bne.n	8006080 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b07      	cmp	r3, #7
 8006048:	d008      	beq.n	800605c <RCCEx_PLLSAI2_Config+0x1c8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b11      	cmp	r3, #17
 8006050:	d004      	beq.n	800605c <RCCEx_PLLSAI2_Config+0x1c8>
 8006052:	f640 4185 	movw	r1, #3205	@ 0xc85
 8006056:	4832      	ldr	r0, [pc, #200]	@ (8006120 <RCCEx_PLLSAI2_Config+0x28c>)
 8006058:	f7fc f94e 	bl	80022f8 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800605c:	4b31      	ldr	r3, [pc, #196]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	0211      	lsls	r1, r2, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	0912      	lsrs	r2, r2, #4
 8006074:	0452      	lsls	r2, r2, #17
 8006076:	430a      	orrs	r2, r1
 8006078:	492a      	ldr	r1, [pc, #168]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 800607a:	4313      	orrs	r3, r2
 800607c:	614b      	str	r3, [r1, #20]
 800607e:	e026      	b.n	80060ce <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d010      	beq.n	80060aa <RCCEx_PLLSAI2_Config+0x216>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b04      	cmp	r3, #4
 800608e:	d00c      	beq.n	80060aa <RCCEx_PLLSAI2_Config+0x216>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b06      	cmp	r3, #6
 8006096:	d008      	beq.n	80060aa <RCCEx_PLLSAI2_Config+0x216>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d004      	beq.n	80060aa <RCCEx_PLLSAI2_Config+0x216>
 80060a0:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 80060a4:	481e      	ldr	r0, [pc, #120]	@ (8006120 <RCCEx_PLLSAI2_Config+0x28c>)
 80060a6:	f7fc f927 	bl	80022f8 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80060b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6892      	ldr	r2, [r2, #8]
 80060ba:	0211      	lsls	r1, r2, #8
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6912      	ldr	r2, [r2, #16]
 80060c0:	0852      	lsrs	r2, r2, #1
 80060c2:	3a01      	subs	r2, #1
 80060c4:	0652      	lsls	r2, r2, #25
 80060c6:	430a      	orrs	r2, r1
 80060c8:	4916      	ldr	r1, [pc, #88]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060ce:	4b15      	ldr	r3, [pc, #84]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060da:	f7fc ffcf 	bl	800307c <HAL_GetTick>
 80060de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060e0:	e009      	b.n	80060f6 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060e2:	f7fc ffcb 	bl	800307c <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d902      	bls.n	80060f6 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	73fb      	strb	r3, [r7, #15]
          break;
 80060f4:	e005      	b.n	8006102 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0ef      	beq.n	80060e2 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006108:	4b06      	ldr	r3, [pc, #24]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	4904      	ldr	r1, [pc, #16]	@ (8006124 <RCCEx_PLLSAI2_Config+0x290>)
 8006112:	4313      	orrs	r3, r2
 8006114:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	0800c274 	.word	0x0800c274
 8006124:	40021000 	.word	0x40021000

08006128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1dd      	b.n	80064f6 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a7b      	ldr	r2, [pc, #492]	@ (800632c <HAL_SPI_Init+0x204>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00e      	beq.n	8006162 <HAL_SPI_Init+0x3a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a79      	ldr	r2, [pc, #484]	@ (8006330 <HAL_SPI_Init+0x208>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_SPI_Init+0x3a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a78      	ldr	r2, [pc, #480]	@ (8006334 <HAL_SPI_Init+0x20c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_SPI_Init+0x3a>
 8006158:	f240 1147 	movw	r1, #327	@ 0x147
 800615c:	4876      	ldr	r0, [pc, #472]	@ (8006338 <HAL_SPI_Init+0x210>)
 800615e:	f7fc f8cb 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_SPI_Init+0x56>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006172:	d004      	beq.n	800617e <HAL_SPI_Init+0x56>
 8006174:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8006178:	486f      	ldr	r0, [pc, #444]	@ (8006338 <HAL_SPI_Init+0x210>)
 800617a:	f7fc f8bd 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00e      	beq.n	80061a4 <HAL_SPI_Init+0x7c>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618e:	d009      	beq.n	80061a4 <HAL_SPI_Init+0x7c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006198:	d004      	beq.n	80061a4 <HAL_SPI_Init+0x7c>
 800619a:	f240 1149 	movw	r1, #329	@ 0x149
 800619e:	4866      	ldr	r0, [pc, #408]	@ (8006338 <HAL_SPI_Init+0x210>)
 80061a0:	f7fc f8aa 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80061ac:	d040      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80061b6:	d03b      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80061c0:	d036      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ca:	d031      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80061d4:	d02c      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061de:	d027      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80061e8:	d022      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f2:	d01d      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061fc:	d018      	beq.n	8006230 <HAL_SPI_Init+0x108>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006206:	d013      	beq.n	8006230 <HAL_SPI_Init+0x108>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006210:	d00e      	beq.n	8006230 <HAL_SPI_Init+0x108>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621a:	d009      	beq.n	8006230 <HAL_SPI_Init+0x108>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006224:	d004      	beq.n	8006230 <HAL_SPI_Init+0x108>
 8006226:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800622a:	4843      	ldr	r0, [pc, #268]	@ (8006338 <HAL_SPI_Init+0x210>)
 800622c:	f7fc f864 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006238:	d00d      	beq.n	8006256 <HAL_SPI_Init+0x12e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_SPI_Init+0x12e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800624a:	d004      	beq.n	8006256 <HAL_SPI_Init+0x12e>
 800624c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006250:	4839      	ldr	r0, [pc, #228]	@ (8006338 <HAL_SPI_Init+0x210>)
 8006252:	f7fc f851 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625a:	2b08      	cmp	r3, #8
 800625c:	d008      	beq.n	8006270 <HAL_SPI_Init+0x148>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_SPI_Init+0x148>
 8006266:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800626a:	4833      	ldr	r0, [pc, #204]	@ (8006338 <HAL_SPI_Init+0x210>)
 800626c:	f7fc f844 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d020      	beq.n	80062ba <HAL_SPI_Init+0x192>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d01c      	beq.n	80062ba <HAL_SPI_Init+0x192>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	2b10      	cmp	r3, #16
 8006286:	d018      	beq.n	80062ba <HAL_SPI_Init+0x192>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	2b18      	cmp	r3, #24
 800628e:	d014      	beq.n	80062ba <HAL_SPI_Init+0x192>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2b20      	cmp	r3, #32
 8006296:	d010      	beq.n	80062ba <HAL_SPI_Init+0x192>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b28      	cmp	r3, #40	@ 0x28
 800629e:	d00c      	beq.n	80062ba <HAL_SPI_Init+0x192>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b30      	cmp	r3, #48	@ 0x30
 80062a6:	d008      	beq.n	80062ba <HAL_SPI_Init+0x192>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b38      	cmp	r3, #56	@ 0x38
 80062ae:	d004      	beq.n	80062ba <HAL_SPI_Init+0x192>
 80062b0:	f240 114d 	movw	r1, #333	@ 0x14d
 80062b4:	4820      	ldr	r0, [pc, #128]	@ (8006338 <HAL_SPI_Init+0x210>)
 80062b6:	f7fc f81f 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_SPI_Init+0x1ac>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	2b80      	cmp	r3, #128	@ 0x80
 80062c8:	d004      	beq.n	80062d4 <HAL_SPI_Init+0x1ac>
 80062ca:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80062ce:	481a      	ldr	r0, [pc, #104]	@ (8006338 <HAL_SPI_Init+0x210>)
 80062d0:	f7fc f812 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_SPI_Init+0x1c6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d004      	beq.n	80062ee <HAL_SPI_Init+0x1c6>
 80062e4:	f240 114f 	movw	r1, #335	@ 0x14f
 80062e8:	4813      	ldr	r0, [pc, #76]	@ (8006338 <HAL_SPI_Init+0x210>)
 80062ea:	f7fc f805 	bl	80022f8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d151      	bne.n	800639a <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_SPI_Init+0x1e8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d004      	beq.n	8006310 <HAL_SPI_Init+0x1e8>
 8006306:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800630a:	480b      	ldr	r0, [pc, #44]	@ (8006338 <HAL_SPI_Init+0x210>)
 800630c:	f7fb fff4 	bl	80022f8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d011      	beq.n	800633c <HAL_SPI_Init+0x214>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d00d      	beq.n	800633c <HAL_SPI_Init+0x214>
 8006320:	f240 1153 	movw	r1, #339	@ 0x153
 8006324:	4804      	ldr	r0, [pc, #16]	@ (8006338 <HAL_SPI_Init+0x210>)
 8006326:	f7fb ffe7 	bl	80022f8 <assert_failed>
 800632a:	e007      	b.n	800633c <HAL_SPI_Init+0x214>
 800632c:	40013000 	.word	0x40013000
 8006330:	40003800 	.word	0x40003800
 8006334:	40003c00 	.word	0x40003c00
 8006338:	0800c2b0 	.word	0x0800c2b0

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006344:	d125      	bne.n	8006392 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d050      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	2b08      	cmp	r3, #8
 8006354:	d04c      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b10      	cmp	r3, #16
 800635c:	d048      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	2b18      	cmp	r3, #24
 8006364:	d044      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	2b20      	cmp	r3, #32
 800636c:	d040      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	2b28      	cmp	r3, #40	@ 0x28
 8006374:	d03c      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	2b30      	cmp	r3, #48	@ 0x30
 800637c:	d038      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	2b38      	cmp	r3, #56	@ 0x38
 8006384:	d034      	beq.n	80063f0 <HAL_SPI_Init+0x2c8>
 8006386:	f240 1157 	movw	r1, #343	@ 0x157
 800638a:	485d      	ldr	r0, [pc, #372]	@ (8006500 <HAL_SPI_Init+0x3d8>)
 800638c:	f7fb ffb4 	bl	80022f8 <assert_failed>
 8006390:	e02e      	b.n	80063f0 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e02a      	b.n	80063f0 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d020      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d01c      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d018      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	2b18      	cmp	r3, #24
 80063b8:	d014      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d010      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	2b28      	cmp	r3, #40	@ 0x28
 80063c8:	d00c      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	2b30      	cmp	r3, #48	@ 0x30
 80063d0:	d008      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	2b38      	cmp	r3, #56	@ 0x38
 80063d8:	d004      	beq.n	80063e4 <HAL_SPI_Init+0x2bc>
 80063da:	f240 1161 	movw	r1, #353	@ 0x161
 80063de:	4848      	ldr	r0, [pc, #288]	@ (8006500 <HAL_SPI_Init+0x3d8>)
 80063e0:	f7fb ff8a 	bl	80022f8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb ffb8 	bl	8002380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006426:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006430:	d902      	bls.n	8006438 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e002      	b.n	800643e <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800643c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006446:	d007      	beq.n	8006458 <HAL_SPI_Init+0x330>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800649a:	ea42 0103 	orr.w	r1, r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	f003 0204 	and.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80064d4:	ea42 0103 	orr.w	r1, r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	0800c2b0 	.word	0x0800c2b0

08006504 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <HAL_SPI_Transmit_IT+0x2a>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006522:	d004      	beq.n	800652e <HAL_SPI_Transmit_IT+0x2a>
 8006524:	f240 6144 	movw	r1, #1604	@ 0x644
 8006528:	483e      	ldr	r0, [pc, #248]	@ (8006624 <HAL_SPI_Transmit_IT+0x120>)
 800652a:	f7fb fee5 	bl	80022f8 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_SPI_Transmit_IT+0x36>
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e06d      	b.n	800661a <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	d001      	beq.n	800654e <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 800654a:	2302      	movs	r3, #2
 800654c:	e065      	b.n	800661a <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_SPI_Transmit_IT+0x58>
 8006558:	2302      	movs	r3, #2
 800655a:	e05e      	b.n	800661a <HAL_SPI_Transmit_IT+0x116>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2203      	movs	r2, #3
 8006568:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065a8:	d903      	bls.n	80065b2 <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006628 <HAL_SPI_Transmit_IT+0x124>)
 80065ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80065b0:	e002      	b.n	80065b8 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	@ (800662c <HAL_SPI_Transmit_IT+0x128>)
 80065b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c0:	d10f      	bne.n	80065e2 <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d007      	beq.n	8006600 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006616:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	0800c2b0 	.word	0x0800c2b0
 8006628:	08006df1 	.word	0x08006df1
 800662c:	08006dab 	.word	0x08006dab

08006630 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006646:	f640 0172 	movw	r1, #2162	@ 0x872
 800664a:	487f      	ldr	r0, [pc, #508]	@ (8006848 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800664c:	f7fb fe54 	bl	80022f8 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <HAL_SPI_TransmitReceive_DMA+0x32>
 8006658:	f640 0173 	movw	r1, #2163	@ 0x873
 800665c:	487a      	ldr	r0, [pc, #488]	@ (8006848 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800665e:	f7fb fe4b 	bl	80022f8 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <HAL_SPI_TransmitReceive_DMA+0x44>
 800666a:	f640 0176 	movw	r1, #2166	@ 0x876
 800666e:	4876      	ldr	r0, [pc, #472]	@ (8006848 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006670:	f7fb fe42 	bl	80022f8 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800667a:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d00c      	beq.n	80066a2 <HAL_SPI_TransmitReceive_DMA+0x72>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800668e:	d106      	bne.n	800669e <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <HAL_SPI_TransmitReceive_DMA+0x6e>
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d001      	beq.n	80066a2 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
 80066a0:	e15f      	b.n	8006962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80066ae:	887b      	ldrh	r3, [r7, #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e154      	b.n	8006962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_SPI_TransmitReceive_DMA+0x96>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e14d      	b.n	8006962 <HAL_SPI_TransmitReceive_DMA+0x332>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d003      	beq.n	80066e2 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2205      	movs	r2, #5
 80066de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	887a      	ldrh	r2, [r7, #2]
 80066f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	887a      	ldrh	r2, [r7, #2]
 800670c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800672a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006734:	d908      	bls.n	8006748 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	e06f      	b.n	8006828 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006756:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006762:	d126      	bne.n	80067b2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10f      	bne.n	8006790 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800677e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800678e:	e010      	b.n	80067b2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800679e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3301      	adds	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067bc:	d134      	bne.n	8006828 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067cc:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d111      	bne.n	8006802 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067ec:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006800:	e012      	b.n	8006828 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006810:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006818:	b29b      	uxth	r3, r3
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	3301      	adds	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b04      	cmp	r3, #4
 8006832:	d10f      	bne.n	8006854 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006838:	4a04      	ldr	r2, [pc, #16]	@ (800684c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800683a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006840:	4a03      	ldr	r2, [pc, #12]	@ (8006850 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8006842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006844:	e00e      	b.n	8006864 <HAL_SPI_TransmitReceive_DMA+0x234>
 8006846:	bf00      	nop
 8006848:	0800c2b0 	.word	0x0800c2b0
 800684c:	08006d09 	.word	0x08006d09
 8006850:	08006bd1 	.word	0x08006bd1
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006858:	4a44      	ldr	r2, [pc, #272]	@ (800696c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006860:	4a43      	ldr	r2, [pc, #268]	@ (8006970 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8006862:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006868:	4a42      	ldr	r2, [pc, #264]	@ (8006974 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800686a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006870:	2200      	movs	r2, #0
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	4619      	mov	r1, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800688c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800688e:	f7fc fef9 	bl	8003684 <HAL_DMA_Start_IT>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800689c:	f043 0210 	orr.w	r2, r3, #16
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e058      	b.n	8006962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068cc:	2200      	movs	r2, #0
 80068ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d4:	2200      	movs	r2, #0
 80068d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	2200      	movs	r2, #0
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	4619      	mov	r1, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068f8:	f7fc fec4 	bl	8003684 <HAL_DMA_Start_IT>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006906:	f043 0210 	orr.w	r2, r3, #16
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e023      	b.n	8006962 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006924:	2b40      	cmp	r3, #64	@ 0x40
 8006926:	d007      	beq.n	8006938 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006936:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0220 	orr.w	r2, r2, #32
 800694e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0202 	orr.w	r2, r2, #2
 800695e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	08006d25 	.word	0x08006d25
 8006970:	08006c79 	.word	0x08006c79
 8006974:	08006d41 	.word	0x08006d41

08006978 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	099b      	lsrs	r3, r3, #6
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10f      	bne.n	80069bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	099b      	lsrs	r3, r3, #6
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
    return;
 80069ba:	e0d7      	b.n	8006b6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_SPI_IRQHandler+0x66>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	09db      	lsrs	r3, r3, #7
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
    return;
 80069dc:	e0c6      	b.n	8006b6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10c      	bne.n	8006a04 <HAL_SPI_IRQHandler+0x8c>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	099b      	lsrs	r3, r3, #6
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	0a1b      	lsrs	r3, r3, #8
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80b4 	beq.w	8006b6c <HAL_SPI_IRQHandler+0x1f4>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80ad 	beq.w	8006b6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	099b      	lsrs	r3, r3, #6
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d023      	beq.n	8006a66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d011      	beq.n	8006a4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a2e:	f043 0204 	orr.w	r2, r3, #4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	e00b      	b.n	8006a66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	693b      	ldr	r3, [r7, #16]
        return;
 8006a64:	e082      	b.n	8006b6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d014      	beq.n	8006a9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	0a1b      	lsrs	r3, r3, #8
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aac:	f043 0208 	orr.w	r2, r3, #8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60bb      	str	r3, [r7, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d04f      	beq.n	8006b6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ad8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <HAL_SPI_IRQHandler+0x17e>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d034      	beq.n	8006b60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0203 	bic.w	r2, r2, #3
 8006b04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d011      	beq.n	8006b32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b12:	4a18      	ldr	r2, [pc, #96]	@ (8006b74 <HAL_SPI_IRQHandler+0x1fc>)
 8006b14:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fc fe20 	bl	8003760 <HAL_DMA_Abort_IT>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d016      	beq.n	8006b68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8006b74 <HAL_SPI_IRQHandler+0x1fc>)
 8006b40:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fc fe0a 	bl	8003760 <HAL_DMA_Abort_IT>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006b5e:	e003      	b.n	8006b68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f81d 	bl	8006ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b66:	e000      	b.n	8006b6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006b68:	bf00      	nop
    return;
 8006b6a:	bf00      	nop
  }
}
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	08006d81 	.word	0x08006d81

08006b78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bc2:	b2db      	uxtb	r3, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bde:	f7fc fa4d 	bl	800307c <HAL_GetTick>
 8006be2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d03c      	beq.n	8006c6c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0220 	bic.w	r2, r2, #32
 8006c00:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10d      	bne.n	8006c26 <SPI_DMAReceiveCplt+0x56>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c12:	d108      	bne.n	8006c26 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0203 	bic.w	r2, r2, #3
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	e007      	b.n	8006c36 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	2164      	movs	r1, #100	@ 0x64
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fa18 	bl	8007070 <SPI_EndRxTransaction>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff ff9b 	bl	8006ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c6a:	e002      	b.n	8006c72 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff ff83 	bl	8006b78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c86:	f7fc f9f9 	bl	800307c <HAL_GetTick>
 8006c8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d030      	beq.n	8006cfc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0220 	bic.w	r2, r2, #32
 8006ca8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	2164      	movs	r1, #100	@ 0x64
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 fa36 	bl	8007120 <SPI_EndRxTxTransaction>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cbe:	f043 0220 	orr.w	r2, r3, #32
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0203 	bic.w	r2, r2, #3
 8006cd4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff ff53 	bl	8006ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006cfa:	e002      	b.n	8006d02 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7fb facc 	bl	800229a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff ff38 	bl	8006b8c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7fb faa6 	bl	8002284 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0203 	bic.w	r2, r2, #3
 8006d5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d62:	f043 0210 	orr.w	r2, r3, #16
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ff14 	bl	8006ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff feff 	bl	8006ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	7812      	ldrb	r2, [r2, #0]
 8006dbe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f9e2 	bl	80071ac <SPI_CloseTx_ISR>
  }
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	881a      	ldrh	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e08:	1c9a      	adds	r2, r3, #2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f9c0 	bl	80071ac <SPI_CloseTx_ISR>
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e44:	f7fc f91a 	bl	800307c <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4413      	add	r3, r2
 8006e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e54:	f7fc f912 	bl	800307c <HAL_GetTick>
 8006e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e5a:	4b39      	ldr	r3, [pc, #228]	@ (8006f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	0d1b      	lsrs	r3, r3, #20
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e6a:	e054      	b.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d050      	beq.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e74:	f7fc f902 	bl	800307c <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d902      	bls.n	8006e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d13d      	bne.n	8006f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ea2:	d111      	bne.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eac:	d004      	beq.n	8006eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb6:	d107      	bne.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ed0:	d10f      	bne.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e017      	b.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d19b      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000010 	.word	0x20000010

08006f44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	@ 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f56:	f7fc f891 	bl	800307c <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006f66:	f7fc f889 	bl	800307c <HAL_GetTick>
 8006f6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f74:	4b3d      	ldr	r3, [pc, #244]	@ (800706c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	00da      	lsls	r2, r3, #3
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	0d1b      	lsrs	r3, r3, #20
 8006f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f8c:	e060      	b.n	8007050 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f94:	d107      	bne.n	8006fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d050      	beq.n	8007050 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fae:	f7fc f865 	bl	800307c <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d902      	bls.n	8006fc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d13d      	bne.n	8007040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fdc:	d111      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe6:	d004      	beq.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff0:	d107      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700a:	d10f      	bne.n	800702c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800702a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e010      	b.n	8007062 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	3b01      	subs	r3, #1
 800704e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4013      	ands	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d196      	bne.n	8006f8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3728      	adds	r7, #40	@ 0x28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000010 	.word	0x20000010

08007070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007084:	d111      	bne.n	80070aa <SPI_EndRxTransaction+0x3a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800708e:	d004      	beq.n	800709a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007098:	d107      	bne.n	80070aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2180      	movs	r1, #128	@ 0x80
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff febd 	bl	8006e34 <SPI_WaitFlagStateUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e023      	b.n	8007118 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070d8:	d11d      	bne.n	8007116 <SPI_EndRxTransaction+0xa6>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e2:	d004      	beq.n	80070ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ec:	d113      	bne.n	8007116 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff ff22 	bl	8006f44 <SPI_WaitFifoStateUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e000      	b.n	8007118 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff ff03 	bl	8006f44 <SPI_WaitFifoStateUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e027      	b.n	80071a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	@ 0x80
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff fe68 	bl	8006e34 <SPI_WaitFlagStateUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e014      	b.n	80071a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff fedc 	bl	8006f44 <SPI_WaitFifoStateUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e000      	b.n	80071a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b4:	f7fb ff62 	bl	800307c <HAL_GetTick>
 80071b8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80071c8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	2164      	movs	r1, #100	@ 0x64
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff ffa6 	bl	8007120 <SPI_EndRxTxTransaction>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071de:	f043 0220 	orr.w	r2, r3, #32
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ee:	2300      	movs	r3, #0
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fcc3 	bl	8006ba0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800721a:	e002      	b.n	8007222 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fb f847 	bl	80022b0 <HAL_SPI_TxCpltCallback>
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e0e6      	b.n	800740c <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a74      	ldr	r2, [pc, #464]	@ (8007414 <HAL_TIM_Base_Init+0x1e8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d036      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007250:	d031      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a70      	ldr	r2, [pc, #448]	@ (8007418 <HAL_TIM_Base_Init+0x1ec>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d02c      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a6e      	ldr	r2, [pc, #440]	@ (800741c <HAL_TIM_Base_Init+0x1f0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d027      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a6d      	ldr	r2, [pc, #436]	@ (8007420 <HAL_TIM_Base_Init+0x1f4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6b      	ldr	r2, [pc, #428]	@ (8007424 <HAL_TIM_Base_Init+0x1f8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a6a      	ldr	r2, [pc, #424]	@ (8007428 <HAL_TIM_Base_Init+0x1fc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a68      	ldr	r2, [pc, #416]	@ (800742c <HAL_TIM_Base_Init+0x200>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a67      	ldr	r2, [pc, #412]	@ (8007430 <HAL_TIM_Base_Init+0x204>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a65      	ldr	r2, [pc, #404]	@ (8007434 <HAL_TIM_Base_Init+0x208>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a64      	ldr	r2, [pc, #400]	@ (8007438 <HAL_TIM_Base_Init+0x20c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIM_Base_Init+0x8a>
 80072ac:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80072b0:	4862      	ldr	r0, [pc, #392]	@ (800743c <HAL_TIM_Base_Init+0x210>)
 80072b2:	f7fb f821 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <HAL_TIM_Base_Init+0xbc>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d010      	beq.n	80072e8 <HAL_TIM_Base_Init+0xbc>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d00c      	beq.n	80072e8 <HAL_TIM_Base_Init+0xbc>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b40      	cmp	r3, #64	@ 0x40
 80072d4:	d008      	beq.n	80072e8 <HAL_TIM_Base_Init+0xbc>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b60      	cmp	r3, #96	@ 0x60
 80072dc:	d004      	beq.n	80072e8 <HAL_TIM_Base_Init+0xbc>
 80072de:	f240 1117 	movw	r1, #279	@ 0x117
 80072e2:	4856      	ldr	r0, [pc, #344]	@ (800743c <HAL_TIM_Base_Init+0x210>)
 80072e4:	f7fb f808 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <HAL_TIM_Base_Init+0xe2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f8:	d009      	beq.n	800730e <HAL_TIM_Base_Init+0xe2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007302:	d004      	beq.n	800730e <HAL_TIM_Base_Init+0xe2>
 8007304:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007308:	484c      	ldr	r0, [pc, #304]	@ (800743c <HAL_TIM_Base_Init+0x210>)
 800730a:	f7fa fff5 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007316:	d004      	beq.n	8007322 <HAL_TIM_Base_Init+0xf6>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a40      	ldr	r2, [pc, #256]	@ (8007420 <HAL_TIM_Base_Init+0x1f4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d107      	bne.n	8007332 <HAL_TIM_Base_Init+0x106>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	e00e      	b.n	8007350 <HAL_TIM_Base_Init+0x124>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <HAL_TIM_Base_Init+0x11c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007342:	d201      	bcs.n	8007348 <HAL_TIM_Base_Init+0x11c>
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <HAL_TIM_Base_Init+0x11e>
 8007348:	2300      	movs	r3, #0
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <HAL_TIM_Base_Init+0x132>
 8007354:	f240 1119 	movw	r1, #281	@ 0x119
 8007358:	4838      	ldr	r0, [pc, #224]	@ (800743c <HAL_TIM_Base_Init+0x210>)
 800735a:	f7fa ffcd 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_TIM_Base_Init+0x14c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	2b80      	cmp	r3, #128	@ 0x80
 800736c:	d004      	beq.n	8007378 <HAL_TIM_Base_Init+0x14c>
 800736e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8007372:	4832      	ldr	r0, [pc, #200]	@ (800743c <HAL_TIM_Base_Init+0x210>)
 8007374:	f7fa ffc0 	bl	80022f8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fb fca9 	bl	8002ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f001 fc27 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40001000 	.word	0x40001000
 8007428:	40001400 	.word	0x40001400
 800742c:	40013400 	.word	0x40013400
 8007430:	40014000 	.word	0x40014000
 8007434:	40014400 	.word	0x40014400
 8007438:	40014800 	.word	0x40014800
 800743c:	0800c2e8 	.word	0x0800c2e8

08007440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e0e6      	b.n	8007620 <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a74      	ldr	r2, [pc, #464]	@ (8007628 <HAL_TIM_PWM_Init+0x1e8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d036      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007464:	d031      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a70      	ldr	r2, [pc, #448]	@ (800762c <HAL_TIM_PWM_Init+0x1ec>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d02c      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a6e      	ldr	r2, [pc, #440]	@ (8007630 <HAL_TIM_PWM_Init+0x1f0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d027      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a6d      	ldr	r2, [pc, #436]	@ (8007634 <HAL_TIM_PWM_Init+0x1f4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d022      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a6b      	ldr	r2, [pc, #428]	@ (8007638 <HAL_TIM_PWM_Init+0x1f8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d01d      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a6a      	ldr	r2, [pc, #424]	@ (800763c <HAL_TIM_PWM_Init+0x1fc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d018      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a68      	ldr	r2, [pc, #416]	@ (8007640 <HAL_TIM_PWM_Init+0x200>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a67      	ldr	r2, [pc, #412]	@ (8007644 <HAL_TIM_PWM_Init+0x204>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00e      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a65      	ldr	r2, [pc, #404]	@ (8007648 <HAL_TIM_PWM_Init+0x208>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d009      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a64      	ldr	r2, [pc, #400]	@ (800764c <HAL_TIM_PWM_Init+0x20c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d004      	beq.n	80074ca <HAL_TIM_PWM_Init+0x8a>
 80074c0:	f240 5133 	movw	r1, #1331	@ 0x533
 80074c4:	4862      	ldr	r0, [pc, #392]	@ (8007650 <HAL_TIM_PWM_Init+0x210>)
 80074c6:	f7fa ff17 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d014      	beq.n	80074fc <HAL_TIM_PWM_Init+0xbc>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d010      	beq.n	80074fc <HAL_TIM_PWM_Init+0xbc>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d00c      	beq.n	80074fc <HAL_TIM_PWM_Init+0xbc>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b40      	cmp	r3, #64	@ 0x40
 80074e8:	d008      	beq.n	80074fc <HAL_TIM_PWM_Init+0xbc>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b60      	cmp	r3, #96	@ 0x60
 80074f0:	d004      	beq.n	80074fc <HAL_TIM_PWM_Init+0xbc>
 80074f2:	f240 5134 	movw	r1, #1332	@ 0x534
 80074f6:	4856      	ldr	r0, [pc, #344]	@ (8007650 <HAL_TIM_PWM_Init+0x210>)
 80074f8:	f7fa fefe 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00e      	beq.n	8007522 <HAL_TIM_PWM_Init+0xe2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800750c:	d009      	beq.n	8007522 <HAL_TIM_PWM_Init+0xe2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007516:	d004      	beq.n	8007522 <HAL_TIM_PWM_Init+0xe2>
 8007518:	f240 5135 	movw	r1, #1333	@ 0x535
 800751c:	484c      	ldr	r0, [pc, #304]	@ (8007650 <HAL_TIM_PWM_Init+0x210>)
 800751e:	f7fa feeb 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752a:	d004      	beq.n	8007536 <HAL_TIM_PWM_Init+0xf6>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a40      	ldr	r2, [pc, #256]	@ (8007634 <HAL_TIM_PWM_Init+0x1f4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d107      	bne.n	8007546 <HAL_TIM_PWM_Init+0x106>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf14      	ite	ne
 800753e:	2301      	movne	r3, #1
 8007540:	2300      	moveq	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	e00e      	b.n	8007564 <HAL_TIM_PWM_Init+0x124>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d006      	beq.n	800755c <HAL_TIM_PWM_Init+0x11c>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007556:	d201      	bcs.n	800755c <HAL_TIM_PWM_Init+0x11c>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <HAL_TIM_PWM_Init+0x11e>
 800755c:	2300      	movs	r3, #0
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <HAL_TIM_PWM_Init+0x132>
 8007568:	f240 5136 	movw	r1, #1334	@ 0x536
 800756c:	4838      	ldr	r0, [pc, #224]	@ (8007650 <HAL_TIM_PWM_Init+0x210>)
 800756e:	f7fa fec3 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <HAL_TIM_PWM_Init+0x14c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b80      	cmp	r3, #128	@ 0x80
 8007580:	d004      	beq.n	800758c <HAL_TIM_PWM_Init+0x14c>
 8007582:	f240 5137 	movw	r1, #1335	@ 0x537
 8007586:	4832      	ldr	r0, [pc, #200]	@ (8007650 <HAL_TIM_PWM_Init+0x210>)
 8007588:	f7fa feb6 	bl	80022f8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d106      	bne.n	80075a6 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f857 	bl	8007654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f001 fb1d 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40001000 	.word	0x40001000
 800763c:	40001400 	.word	0x40001400
 8007640:	40013400 	.word	0x40013400
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800
 8007650:	0800c2e8 	.word	0x0800c2e8

08007654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a85      	ldr	r2, [pc, #532]	@ (800788c <HAL_TIM_PWM_Start+0x224>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d115      	bne.n	80076a8 <HAL_TIM_PWM_Start+0x40>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 808d 	beq.w	800779e <HAL_TIM_PWM_Start+0x136>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b04      	cmp	r3, #4
 8007688:	f000 8089 	beq.w	800779e <HAL_TIM_PWM_Start+0x136>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b08      	cmp	r3, #8
 8007690:	f000 8085 	beq.w	800779e <HAL_TIM_PWM_Start+0x136>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b0c      	cmp	r3, #12
 8007698:	f000 8081 	beq.w	800779e <HAL_TIM_PWM_Start+0x136>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b10      	cmp	r3, #16
 80076a0:	d07d      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b14      	cmp	r3, #20
 80076a6:	d07a      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b0:	d10b      	bne.n	80076ca <HAL_TIM_PWM_Start+0x62>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d072      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d06f      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d06c      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b0c      	cmp	r3, #12
 80076c8:	d069      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a70      	ldr	r2, [pc, #448]	@ (8007890 <HAL_TIM_PWM_Start+0x228>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d10b      	bne.n	80076ec <HAL_TIM_PWM_Start+0x84>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d061      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d05e      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d05b      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	d058      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a68      	ldr	r2, [pc, #416]	@ (8007894 <HAL_TIM_PWM_Start+0x22c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10b      	bne.n	800770e <HAL_TIM_PWM_Start+0xa6>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d050      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d04d      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d04a      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b0c      	cmp	r3, #12
 800770c:	d047      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a61      	ldr	r2, [pc, #388]	@ (8007898 <HAL_TIM_PWM_Start+0x230>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d10b      	bne.n	8007730 <HAL_TIM_PWM_Start+0xc8>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d03f      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b04      	cmp	r3, #4
 8007722:	d03c      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b08      	cmp	r3, #8
 8007728:	d039      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	d036      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a59      	ldr	r2, [pc, #356]	@ (800789c <HAL_TIM_PWM_Start+0x234>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d111      	bne.n	800775e <HAL_TIM_PWM_Start+0xf6>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02e      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d02b      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d028      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b0c      	cmp	r3, #12
 8007750:	d025      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b10      	cmp	r3, #16
 8007756:	d022      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b14      	cmp	r3, #20
 800775c:	d01f      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a4f      	ldr	r2, [pc, #316]	@ (80078a0 <HAL_TIM_PWM_Start+0x238>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d105      	bne.n	8007774 <HAL_TIM_PWM_Start+0x10c>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d017      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d014      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a4a      	ldr	r2, [pc, #296]	@ (80078a4 <HAL_TIM_PWM_Start+0x23c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d102      	bne.n	8007784 <HAL_TIM_PWM_Start+0x11c>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00c      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a47      	ldr	r2, [pc, #284]	@ (80078a8 <HAL_TIM_PWM_Start+0x240>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d102      	bne.n	8007794 <HAL_TIM_PWM_Start+0x12c>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007794:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8007798:	4844      	ldr	r0, [pc, #272]	@ (80078ac <HAL_TIM_PWM_Start+0x244>)
 800779a:	f7fa fdad 	bl	80022f8 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d109      	bne.n	80077b8 <HAL_TIM_PWM_Start+0x150>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	e03c      	b.n	8007832 <HAL_TIM_PWM_Start+0x1ca>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d109      	bne.n	80077d2 <HAL_TIM_PWM_Start+0x16a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	bf14      	ite	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	2300      	moveq	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	e02f      	b.n	8007832 <HAL_TIM_PWM_Start+0x1ca>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d109      	bne.n	80077ec <HAL_TIM_PWM_Start+0x184>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e022      	b.n	8007832 <HAL_TIM_PWM_Start+0x1ca>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b0c      	cmp	r3, #12
 80077f0:	d109      	bne.n	8007806 <HAL_TIM_PWM_Start+0x19e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	bf14      	ite	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	2300      	moveq	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	e015      	b.n	8007832 <HAL_TIM_PWM_Start+0x1ca>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b10      	cmp	r3, #16
 800780a:	d109      	bne.n	8007820 <HAL_TIM_PWM_Start+0x1b8>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b01      	cmp	r3, #1
 8007816:	bf14      	ite	ne
 8007818:	2301      	movne	r3, #1
 800781a:	2300      	moveq	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	e008      	b.n	8007832 <HAL_TIM_PWM_Start+0x1ca>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	bf14      	ite	ne
 800782c:	2301      	movne	r3, #1
 800782e:	2300      	moveq	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e0af      	b.n	800799a <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <HAL_TIM_PWM_Start+0x1e2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007848:	e036      	b.n	80078b8 <HAL_TIM_PWM_Start+0x250>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b04      	cmp	r3, #4
 800784e:	d104      	bne.n	800785a <HAL_TIM_PWM_Start+0x1f2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007858:	e02e      	b.n	80078b8 <HAL_TIM_PWM_Start+0x250>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b08      	cmp	r3, #8
 800785e:	d104      	bne.n	800786a <HAL_TIM_PWM_Start+0x202>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007868:	e026      	b.n	80078b8 <HAL_TIM_PWM_Start+0x250>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b0c      	cmp	r3, #12
 800786e:	d104      	bne.n	800787a <HAL_TIM_PWM_Start+0x212>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007878:	e01e      	b.n	80078b8 <HAL_TIM_PWM_Start+0x250>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b10      	cmp	r3, #16
 800787e:	d117      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x248>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007888:	e016      	b.n	80078b8 <HAL_TIM_PWM_Start+0x250>
 800788a:	bf00      	nop
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00
 800789c:	40013400 	.word	0x40013400
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40014400 	.word	0x40014400
 80078a8:	40014800 	.word	0x40014800
 80078ac:	0800c2e8 	.word	0x0800c2e8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2201      	movs	r2, #1
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fe39 	bl	8009538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a36      	ldr	r2, [pc, #216]	@ (80079a4 <HAL_TIM_PWM_Start+0x33c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d013      	beq.n	80078f8 <HAL_TIM_PWM_Start+0x290>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a34      	ldr	r2, [pc, #208]	@ (80079a8 <HAL_TIM_PWM_Start+0x340>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00e      	beq.n	80078f8 <HAL_TIM_PWM_Start+0x290>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a33      	ldr	r2, [pc, #204]	@ (80079ac <HAL_TIM_PWM_Start+0x344>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d009      	beq.n	80078f8 <HAL_TIM_PWM_Start+0x290>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a31      	ldr	r2, [pc, #196]	@ (80079b0 <HAL_TIM_PWM_Start+0x348>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d004      	beq.n	80078f8 <HAL_TIM_PWM_Start+0x290>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a30      	ldr	r2, [pc, #192]	@ (80079b4 <HAL_TIM_PWM_Start+0x34c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d101      	bne.n	80078fc <HAL_TIM_PWM_Start+0x294>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <HAL_TIM_PWM_Start+0x296>
 80078fc:	2300      	movs	r3, #0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007910:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a23      	ldr	r2, [pc, #140]	@ (80079a4 <HAL_TIM_PWM_Start+0x33c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d01d      	beq.n	8007958 <HAL_TIM_PWM_Start+0x2f0>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007924:	d018      	beq.n	8007958 <HAL_TIM_PWM_Start+0x2f0>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a23      	ldr	r2, [pc, #140]	@ (80079b8 <HAL_TIM_PWM_Start+0x350>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <HAL_TIM_PWM_Start+0x2f0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a21      	ldr	r2, [pc, #132]	@ (80079bc <HAL_TIM_PWM_Start+0x354>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <HAL_TIM_PWM_Start+0x2f0>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a20      	ldr	r2, [pc, #128]	@ (80079c0 <HAL_TIM_PWM_Start+0x358>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_TIM_PWM_Start+0x2f0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a17      	ldr	r2, [pc, #92]	@ (80079a8 <HAL_TIM_PWM_Start+0x340>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIM_PWM_Start+0x2f0>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <HAL_TIM_PWM_Start+0x344>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d115      	bne.n	8007984 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	4b19      	ldr	r3, [pc, #100]	@ (80079c4 <HAL_TIM_PWM_Start+0x35c>)
 8007960:	4013      	ands	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b06      	cmp	r3, #6
 8007968:	d015      	beq.n	8007996 <HAL_TIM_PWM_Start+0x32e>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007970:	d011      	beq.n	8007996 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007982:	e008      	b.n	8007996 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e000      	b.n	8007998 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40013400 	.word	0x40013400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40000c00 	.word	0x40000c00
 80079c4:	00010007 	.word	0x00010007

080079c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e1b0      	b.n	8007d3e <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a7f      	ldr	r2, [pc, #508]	@ (8007be0 <HAL_TIM_Encoder_Init+0x218>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01d      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x5a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ee:	d018      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x5a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a7b      	ldr	r2, [pc, #492]	@ (8007be4 <HAL_TIM_Encoder_Init+0x21c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x5a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a7a      	ldr	r2, [pc, #488]	@ (8007be8 <HAL_TIM_Encoder_Init+0x220>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x5a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a78      	ldr	r2, [pc, #480]	@ (8007bec <HAL_TIM_Encoder_Init+0x224>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x5a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a77      	ldr	r2, [pc, #476]	@ (8007bf0 <HAL_TIM_Encoder_Init+0x228>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x5a>
 8007a18:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8007a1c:	4875      	ldr	r0, [pc, #468]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007a1e:	f7fa fc6b 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d014      	beq.n	8007a54 <HAL_TIM_Encoder_Init+0x8c>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d010      	beq.n	8007a54 <HAL_TIM_Encoder_Init+0x8c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d00c      	beq.n	8007a54 <HAL_TIM_Encoder_Init+0x8c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b40      	cmp	r3, #64	@ 0x40
 8007a40:	d008      	beq.n	8007a54 <HAL_TIM_Encoder_Init+0x8c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b60      	cmp	r3, #96	@ 0x60
 8007a48:	d004      	beq.n	8007a54 <HAL_TIM_Encoder_Init+0x8c>
 8007a4a:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007a4e:	4869      	ldr	r0, [pc, #420]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007a50:	f7fa fc52 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00e      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0xb2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a64:	d009      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a6e:	d004      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0xb2>
 8007a70:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8007a74:	485f      	ldr	r0, [pc, #380]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007a76:	f7fa fc3f 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <HAL_TIM_Encoder_Init+0xcc>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	2b80      	cmp	r3, #128	@ 0x80
 8007a88:	d004      	beq.n	8007a94 <HAL_TIM_Encoder_Init+0xcc>
 8007a8a:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8007a8e:	4859      	ldr	r0, [pc, #356]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007a90:	f7fa fc32 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_TIM_Encoder_Init+0xee>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d008      	beq.n	8007ab6 <HAL_TIM_Encoder_Init+0xee>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d004      	beq.n	8007ab6 <HAL_TIM_Encoder_Init+0xee>
 8007aac:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8007ab0:	4850      	ldr	r0, [pc, #320]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007ab2:	f7fa fc21 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d00c      	beq.n	8007ad8 <HAL_TIM_Encoder_Init+0x110>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d008      	beq.n	8007ad8 <HAL_TIM_Encoder_Init+0x110>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d004      	beq.n	8007ad8 <HAL_TIM_Encoder_Init+0x110>
 8007ace:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8007ad2:	4848      	ldr	r0, [pc, #288]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007ad4:	f7fa fc10 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d00c      	beq.n	8007afa <HAL_TIM_Encoder_Init+0x132>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d008      	beq.n	8007afa <HAL_TIM_Encoder_Init+0x132>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d004      	beq.n	8007afa <HAL_TIM_Encoder_Init+0x132>
 8007af0:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8007af4:	483f      	ldr	r0, [pc, #252]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007af6:	f7fa fbff 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <HAL_TIM_Encoder_Init+0x14c>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d004      	beq.n	8007b14 <HAL_TIM_Encoder_Init+0x14c>
 8007b0a:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8007b0e:	4839      	ldr	r0, [pc, #228]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007b10:	f7fa fbf2 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_TIM_Encoder_Init+0x166>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d004      	beq.n	8007b2e <HAL_TIM_Encoder_Init+0x166>
 8007b24:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8007b28:	4832      	ldr	r0, [pc, #200]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007b2a:	f7fa fbe5 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d010      	beq.n	8007b58 <HAL_TIM_Encoder_Init+0x190>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d00c      	beq.n	8007b58 <HAL_TIM_Encoder_Init+0x190>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d008      	beq.n	8007b58 <HAL_TIM_Encoder_Init+0x190>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	2b0c      	cmp	r3, #12
 8007b4c:	d004      	beq.n	8007b58 <HAL_TIM_Encoder_Init+0x190>
 8007b4e:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8007b52:	4828      	ldr	r0, [pc, #160]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007b54:	f7fa fbd0 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d010      	beq.n	8007b82 <HAL_TIM_Encoder_Init+0x1ba>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d00c      	beq.n	8007b82 <HAL_TIM_Encoder_Init+0x1ba>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d008      	beq.n	8007b82 <HAL_TIM_Encoder_Init+0x1ba>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	d004      	beq.n	8007b82 <HAL_TIM_Encoder_Init+0x1ba>
 8007b78:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007b7c:	481d      	ldr	r0, [pc, #116]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007b7e:	f7fa fbbb 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d904      	bls.n	8007b94 <HAL_TIM_Encoder_Init+0x1cc>
 8007b8a:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8007b8e:	4819      	ldr	r0, [pc, #100]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007b90:	f7fa fbb2 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	2b0f      	cmp	r3, #15
 8007b9a:	d904      	bls.n	8007ba6 <HAL_TIM_Encoder_Init+0x1de>
 8007b9c:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8007ba0:	4814      	ldr	r0, [pc, #80]	@ (8007bf4 <HAL_TIM_Encoder_Init+0x22c>)
 8007ba2:	f7fa fba9 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bae:	d004      	beq.n	8007bba <HAL_TIM_Encoder_Init+0x1f2>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8007bec <HAL_TIM_Encoder_Init+0x224>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d107      	bne.n	8007bca <HAL_TIM_Encoder_Init+0x202>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	e01a      	b.n	8007c00 <HAL_TIM_Encoder_Init+0x238>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d012      	beq.n	8007bf8 <HAL_TIM_Encoder_Init+0x230>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bda:	d20d      	bcs.n	8007bf8 <HAL_TIM_Encoder_Init+0x230>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e00c      	b.n	8007bfa <HAL_TIM_Encoder_Init+0x232>
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	0800c2e8 	.word	0x0800c2e8
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_Encoder_Init+0x246>
 8007c04:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8007c08:	484f      	ldr	r0, [pc, #316]	@ (8007d48 <HAL_TIM_Encoder_Init+0x380>)
 8007c0a:	f7fa fb75 	bl	80022f8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fa ff9c 	bl	8002b60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007c3e:	f023 0307 	bic.w	r3, r3, #7
 8007c42:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f000 ffd2 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c7c:	f023 0303 	bic.w	r3, r3, #3
 8007c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c9a:	f023 030c 	bic.w	r3, r3, #12
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	021b      	lsls	r3, r3, #8
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	011a      	lsls	r2, r3, #4
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	031b      	lsls	r3, r3, #12
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007cd8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007ce0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	4313      	orrs	r3, r2
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	0800c2e8 	.word	0x0800c2e8

08007d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d020      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01b      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0202 	mvn.w	r2, #2
 8007d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 ff10 	bl	8008bbc <HAL_TIM_IC_CaptureCallback>
 8007d9c:	e005      	b.n	8007daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 ff02 	bl	8008ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 ff13 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d020      	beq.n	8007dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01b      	beq.n	8007dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0204 	mvn.w	r2, #4
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 feea 	bl	8008bbc <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fedc 	bl	8008ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 feed 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d020      	beq.n	8007e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01b      	beq.n	8007e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0208 	mvn.w	r2, #8
 8007e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2204      	movs	r2, #4
 8007e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fec4 	bl	8008bbc <HAL_TIM_IC_CaptureCallback>
 8007e34:	e005      	b.n	8007e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 feb6 	bl	8008ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fec7 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d020      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01b      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f06f 0210 	mvn.w	r2, #16
 8007e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2208      	movs	r2, #8
 8007e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fe9e 	bl	8008bbc <HAL_TIM_IC_CaptureCallback>
 8007e80:	e005      	b.n	8007e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fe90 	bl	8008ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fea1 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0201 	mvn.w	r2, #1
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fe6e 	bl	8008b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00c      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fe39 	bl	8009b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00c      	beq.n	8007f0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d007      	beq.n	8007f0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 fe31 	bl	8009b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00c      	beq.n	8007f2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fe5b 	bl	8008be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00c      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f06f 0220 	mvn.w	r2, #32
 8007f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fdf9 	bl	8009b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d013      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d010      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d00d      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d00a      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b14      	cmp	r3, #20
 8007f8e:	d007      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b3c      	cmp	r3, #60	@ 0x3c
 8007f94:	d004      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f96:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8007f9a:	488b      	ldr	r0, [pc, #556]	@ (80081c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007f9c:	f7fa f9ac 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b60      	cmp	r3, #96	@ 0x60
 8007fa6:	d01c      	beq.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b70      	cmp	r3, #112	@ 0x70
 8007fae:	d018      	beq.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a85      	ldr	r2, [pc, #532]	@ (80081cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a84      	ldr	r2, [pc, #528]	@ (80081d0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00e      	beq.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a82      	ldr	r2, [pc, #520]	@ (80081d4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a81      	ldr	r2, [pc, #516]	@ (80081d8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fd8:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8007fdc:	487a      	ldr	r0, [pc, #488]	@ (80081c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007fde:	f7fa f98b 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d004      	beq.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007ff2:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8007ff6:	4874      	ldr	r0, [pc, #464]	@ (80081c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007ff8:	f7fa f97e 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <HAL_TIM_PWM_ConfigChannel+0xba>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d004      	beq.n	8008016 <HAL_TIM_PWM_ConfigChannel+0xba>
 800800c:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8008010:	486d      	ldr	r0, [pc, #436]	@ (80081c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008012:	f7fa f971 	bl	80022f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008020:	2302      	movs	r3, #2
 8008022:	e1d9      	b.n	80083d8 <HAL_TIM_PWM_ConfigChannel+0x47c>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b14      	cmp	r3, #20
 8008030:	f200 81ca 	bhi.w	80083c8 <HAL_TIM_PWM_ConfigChannel+0x46c>
 8008034:	a201      	add	r2, pc, #4	@ (adr r2, 800803c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008091 	.word	0x08008091
 8008040:	080083c9 	.word	0x080083c9
 8008044:	080083c9 	.word	0x080083c9
 8008048:	080083c9 	.word	0x080083c9
 800804c:	08008135 	.word	0x08008135
 8008050:	080083c9 	.word	0x080083c9
 8008054:	080083c9 	.word	0x080083c9
 8008058:	080083c9 	.word	0x080083c9
 800805c:	080081fd 	.word	0x080081fd
 8008060:	080083c9 	.word	0x080083c9
 8008064:	080083c9 	.word	0x080083c9
 8008068:	080083c9 	.word	0x080083c9
 800806c:	08008283 	.word	0x08008283
 8008070:	080083c9 	.word	0x080083c9
 8008074:	080083c9 	.word	0x080083c9
 8008078:	080083c9 	.word	0x080083c9
 800807c:	0800830b 	.word	0x0800830b
 8008080:	080083c9 	.word	0x080083c9
 8008084:	080083c9 	.word	0x080083c9
 8008088:	080083c9 	.word	0x080083c9
 800808c:	08008369 	.word	0x08008369
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a51      	ldr	r2, [pc, #324]	@ (80081dc <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d02c      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a2:	d027      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a4d      	ldr	r2, [pc, #308]	@ (80081e0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d022      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a4c      	ldr	r2, [pc, #304]	@ (80081e4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d01d      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a4a      	ldr	r2, [pc, #296]	@ (80081e8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d018      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a49      	ldr	r2, [pc, #292]	@ (80081ec <HAL_TIM_PWM_ConfigChannel+0x290>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a47      	ldr	r2, [pc, #284]	@ (80081f0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00e      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a46      	ldr	r2, [pc, #280]	@ (80081f4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d009      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a44      	ldr	r2, [pc, #272]	@ (80081f8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <HAL_TIM_PWM_ConfigChannel+0x198>
 80080ea:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80080ee:	4836      	ldr	r0, [pc, #216]	@ (80081c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80080f0:	f7fa f902 	bl	80022f8 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fe22 	bl	8008d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0208 	orr.w	r2, r2, #8
 800810e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0204 	bic.w	r2, r2, #4
 800811e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6999      	ldr	r1, [r3, #24]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	619a      	str	r2, [r3, #24]
      break;
 8008132:	e14c      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a28      	ldr	r2, [pc, #160]	@ (80081dc <HAL_TIM_PWM_ConfigChannel+0x280>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d022      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008146:	d01d      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a24      	ldr	r2, [pc, #144]	@ (80081e0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d018      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a23      	ldr	r2, [pc, #140]	@ (80081e4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d013      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a21      	ldr	r2, [pc, #132]	@ (80081e8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00e      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a20      	ldr	r2, [pc, #128]	@ (80081ec <HAL_TIM_PWM_ConfigChannel+0x290>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d009      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1e      	ldr	r2, [pc, #120]	@ (80081f0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d004      	beq.n	8008184 <HAL_TIM_PWM_ConfigChannel+0x228>
 800817a:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800817e:	4812      	ldr	r0, [pc, #72]	@ (80081c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008180:	f7fa f8ba 	bl	80022f8 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fe94 	bl	8008eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800819e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6999      	ldr	r1, [r3, #24]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	021a      	lsls	r2, r3, #8
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	619a      	str	r2, [r3, #24]
      break;
 80081c4:	e103      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x472>
 80081c6:	bf00      	nop
 80081c8:	0800c2e8 	.word	0x0800c2e8
 80081cc:	00010040 	.word	0x00010040
 80081d0:	00010050 	.word	0x00010050
 80081d4:	00010060 	.word	0x00010060
 80081d8:	00010070 	.word	0x00010070
 80081dc:	40012c00 	.word	0x40012c00
 80081e0:	40000400 	.word	0x40000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	40000c00 	.word	0x40000c00
 80081ec:	40013400 	.word	0x40013400
 80081f0:	40014000 	.word	0x40014000
 80081f4:	40014400 	.word	0x40014400
 80081f8:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a77      	ldr	r2, [pc, #476]	@ (80083e0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d01d      	beq.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820e:	d018      	beq.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a73      	ldr	r2, [pc, #460]	@ (80083e4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a72      	ldr	r2, [pc, #456]	@ (80083e8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00e      	beq.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a70      	ldr	r2, [pc, #448]	@ (80083ec <HAL_TIM_PWM_ConfigChannel+0x490>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d009      	beq.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a6f      	ldr	r2, [pc, #444]	@ (80083f0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008238:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800823c:	486d      	ldr	r0, [pc, #436]	@ (80083f4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800823e:	f7fa f85b 	bl	80022f8 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 fee7 	bl	800901c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0208 	orr.w	r2, r2, #8
 800825c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69da      	ldr	r2, [r3, #28]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0204 	bic.w	r2, r2, #4
 800826c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69d9      	ldr	r1, [r3, #28]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	61da      	str	r2, [r3, #28]
      break;
 8008280:	e0a5      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a56      	ldr	r2, [pc, #344]	@ (80083e0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d01d      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008294:	d018      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a52      	ldr	r2, [pc, #328]	@ (80083e4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d013      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a50      	ldr	r2, [pc, #320]	@ (80083e8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00e      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a4f      	ldr	r2, [pc, #316]	@ (80083ec <HAL_TIM_PWM_ConfigChannel+0x490>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d009      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a4d      	ldr	r2, [pc, #308]	@ (80083f0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d004      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 80082be:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 80082c2:	484c      	ldr	r0, [pc, #304]	@ (80083f4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 80082c4:	f7fa f818 	bl	80022f8 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 ff56 	bl	8009180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69da      	ldr	r2, [r3, #28]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	69da      	ldr	r2, [r3, #28]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69d9      	ldr	r1, [r3, #28]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	021a      	lsls	r2, r3, #8
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	61da      	str	r2, [r3, #28]
      break;
 8008308:	e061      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a34      	ldr	r2, [pc, #208]	@ (80083e0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d009      	beq.n	8008328 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a35      	ldr	r2, [pc, #212]	@ (80083f0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800831e:	f241 1104 	movw	r1, #4356	@ 0x1104
 8008322:	4834      	ldr	r0, [pc, #208]	@ (80083f4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008324:	f7f9 ffe8 	bl	80022f8 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 ff9e 	bl	8009270 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0208 	orr.w	r2, r2, #8
 8008342:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0204 	bic.w	r2, r2, #4
 8008352:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691a      	ldr	r2, [r3, #16]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008366:	e032      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a1c      	ldr	r2, [pc, #112]	@ (80083e0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d009      	beq.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x42a>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1e      	ldr	r2, [pc, #120]	@ (80083f0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d004      	beq.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800837c:	f241 1115 	movw	r1, #4373	@ 0x1115
 8008380:	481c      	ldr	r0, [pc, #112]	@ (80083f4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008382:	f7f9 ffb9 	bl	80022f8 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 ffd3 	bl	8009338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083b0:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	021a      	lsls	r2, r3, #8
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083c6:	e002      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
      break;
 80083cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40012c00 	.word	0x40012c00
 80083e4:	40000400 	.word	0x40000400
 80083e8:	40000800 	.word	0x40000800
 80083ec:	40000c00 	.word	0x40000c00
 80083f0:	40013400 	.word	0x40013400
 80083f4:	0800c2e8 	.word	0x0800c2e8

080083f8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a33      	ldr	r2, [pc, #204]	@ (80084d4 <HAL_TIM_GenerateEvent+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d036      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008414:	d031      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a2f      	ldr	r2, [pc, #188]	@ (80084d8 <HAL_TIM_GenerateEvent+0xe0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d02c      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a2d      	ldr	r2, [pc, #180]	@ (80084dc <HAL_TIM_GenerateEvent+0xe4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d027      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a2c      	ldr	r2, [pc, #176]	@ (80084e0 <HAL_TIM_GenerateEvent+0xe8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d022      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a2a      	ldr	r2, [pc, #168]	@ (80084e4 <HAL_TIM_GenerateEvent+0xec>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01d      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a29      	ldr	r2, [pc, #164]	@ (80084e8 <HAL_TIM_GenerateEvent+0xf0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d018      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a27      	ldr	r2, [pc, #156]	@ (80084ec <HAL_TIM_GenerateEvent+0xf4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d013      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a26      	ldr	r2, [pc, #152]	@ (80084f0 <HAL_TIM_GenerateEvent+0xf8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00e      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a24      	ldr	r2, [pc, #144]	@ (80084f4 <HAL_TIM_GenerateEvent+0xfc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d009      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a23      	ldr	r2, [pc, #140]	@ (80084f8 <HAL_TIM_GenerateEvent+0x100>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d004      	beq.n	800847a <HAL_TIM_GenerateEvent+0x82>
 8008470:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8008474:	4821      	ldr	r0, [pc, #132]	@ (80084fc <HAL_TIM_GenerateEvent+0x104>)
 8008476:	f7f9 ff3f 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008480:	d202      	bcs.n	8008488 <HAL_TIM_GenerateEvent+0x90>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <HAL_TIM_GenerateEvent+0x9a>
 8008488:	f241 4181 	movw	r1, #5249	@ 0x1481
 800848c:	481b      	ldr	r0, [pc, #108]	@ (80084fc <HAL_TIM_GenerateEvent+0x104>)
 800848e:	f7f9 ff33 	bl	80022f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_TIM_GenerateEvent+0xa8>
 800849c:	2302      	movs	r3, #2
 800849e:	e014      	b.n	80084ca <HAL_TIM_GenerateEvent+0xd2>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40012c00 	.word	0x40012c00
 80084d8:	40000400 	.word	0x40000400
 80084dc:	40000800 	.word	0x40000800
 80084e0:	40000c00 	.word	0x40000c00
 80084e4:	40001000 	.word	0x40001000
 80084e8:	40001400 	.word	0x40001400
 80084ec:	40013400 	.word	0x40013400
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800
 80084fc:	0800c2e8 	.word	0x0800c2e8

08008500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_TIM_ConfigClockSource+0x1c>
 8008518:	2302      	movs	r3, #2
 800851a:	e329      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x670>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008534:	d029      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b70      	cmp	r3, #112	@ 0x70
 800853c:	d025      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008546:	d020      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b40      	cmp	r3, #64	@ 0x40
 800854e:	d01c      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b50      	cmp	r3, #80	@ 0x50
 8008556:	d018      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b60      	cmp	r3, #96	@ 0x60
 800855e:	d014      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b10      	cmp	r3, #16
 800856e:	d00c      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b20      	cmp	r3, #32
 8008576:	d008      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b30      	cmp	r3, #48	@ 0x30
 800857e:	d004      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x8a>
 8008580:	f241 5156 	movw	r1, #5462	@ 0x1556
 8008584:	4888      	ldr	r0, [pc, #544]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008586:	f7f9 feb7 	bl	80022f8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008598:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800859c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085a4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b6:	f000 810d 	beq.w	80087d4 <HAL_TIM_ConfigClockSource+0x2d4>
 80085ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085be:	f200 82ca 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 80085c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c6:	d02d      	beq.n	8008624 <HAL_TIM_ConfigClockSource+0x124>
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085cc:	f200 82c3 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 80085d0:	2b70      	cmp	r3, #112	@ 0x70
 80085d2:	d06f      	beq.n	80086b4 <HAL_TIM_ConfigClockSource+0x1b4>
 80085d4:	2b70      	cmp	r3, #112	@ 0x70
 80085d6:	f200 82be 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 80085da:	2b60      	cmp	r3, #96	@ 0x60
 80085dc:	f000 81d4 	beq.w	8008988 <HAL_TIM_ConfigClockSource+0x488>
 80085e0:	2b60      	cmp	r3, #96	@ 0x60
 80085e2:	f200 82b8 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 80085e6:	2b50      	cmp	r3, #80	@ 0x50
 80085e8:	f000 8165 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x3b6>
 80085ec:	2b50      	cmp	r3, #80	@ 0x50
 80085ee:	f200 82b2 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 80085f2:	2b40      	cmp	r3, #64	@ 0x40
 80085f4:	f000 8223 	beq.w	8008a3e <HAL_TIM_ConfigClockSource+0x53e>
 80085f8:	2b40      	cmp	r3, #64	@ 0x40
 80085fa:	f200 82ac 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 80085fe:	2b30      	cmp	r3, #48	@ 0x30
 8008600:	f000 8278 	beq.w	8008af4 <HAL_TIM_ConfigClockSource+0x5f4>
 8008604:	2b30      	cmp	r3, #48	@ 0x30
 8008606:	f200 82a6 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 800860a:	2b20      	cmp	r3, #32
 800860c:	f000 8272 	beq.w	8008af4 <HAL_TIM_ConfigClockSource+0x5f4>
 8008610:	2b20      	cmp	r3, #32
 8008612:	f200 82a0 	bhi.w	8008b56 <HAL_TIM_ConfigClockSource+0x656>
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 826c 	beq.w	8008af4 <HAL_TIM_ConfigClockSource+0x5f4>
 800861c:	2b10      	cmp	r3, #16
 800861e:	f000 8269 	beq.w	8008af4 <HAL_TIM_ConfigClockSource+0x5f4>
 8008622:	e298      	b.n	8008b56 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a60      	ldr	r2, [pc, #384]	@ (80087ac <HAL_TIM_ConfigClockSource+0x2ac>)
 800862a:	4293      	cmp	r3, r2
 800862c:	f000 8296 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008638:	f000 8290 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a5b      	ldr	r2, [pc, #364]	@ (80087b0 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	f000 828a 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a59      	ldr	r2, [pc, #356]	@ (80087b4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	f000 8284 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a57      	ldr	r2, [pc, #348]	@ (80087b8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	f000 827e 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a55      	ldr	r2, [pc, #340]	@ (80087bc <HAL_TIM_ConfigClockSource+0x2bc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	f000 8278 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a53      	ldr	r2, [pc, #332]	@ (80087c0 <HAL_TIM_ConfigClockSource+0x2c0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	f000 8272 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a51      	ldr	r2, [pc, #324]	@ (80087c4 <HAL_TIM_ConfigClockSource+0x2c4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	f000 826c 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a4f      	ldr	r2, [pc, #316]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x2c8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	f000 8266 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a4d      	ldr	r2, [pc, #308]	@ (80087cc <HAL_TIM_ConfigClockSource+0x2cc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	f000 8260 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a4b      	ldr	r2, [pc, #300]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x2d0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	f000 825a 	beq.w	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
 80086a8:	f241 5162 	movw	r1, #5474	@ 0x1562
 80086ac:	483e      	ldr	r0, [pc, #248]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x2a8>)
 80086ae:	f7f9 fe23 	bl	80022f8 <assert_failed>
      break;
 80086b2:	e253      	b.n	8008b5c <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a3c      	ldr	r2, [pc, #240]	@ (80087ac <HAL_TIM_ConfigClockSource+0x2ac>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d022      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c6:	d01d      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a38      	ldr	r2, [pc, #224]	@ (80087b0 <HAL_TIM_ConfigClockSource+0x2b0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a37      	ldr	r2, [pc, #220]	@ (80087b4 <HAL_TIM_ConfigClockSource+0x2b4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a35      	ldr	r2, [pc, #212]	@ (80087b8 <HAL_TIM_ConfigClockSource+0x2b8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a36      	ldr	r2, [pc, #216]	@ (80087c4 <HAL_TIM_ConfigClockSource+0x2c4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a34      	ldr	r2, [pc, #208]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x2c8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x204>
 80086fa:	f241 5169 	movw	r1, #5481	@ 0x1569
 80086fe:	482a      	ldr	r0, [pc, #168]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008700:	f7f9 fdfa 	bl	80022f8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d013      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x234>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008714:	d00e      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x234>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871e:	d009      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x234>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008728:	d004      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x234>
 800872a:	f241 516c 	movw	r1, #5484	@ 0x156c
 800872e:	481e      	ldr	r0, [pc, #120]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008730:	f7f9 fde2 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800873c:	d014      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x268>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x268>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x268>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d008      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x268>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b0a      	cmp	r3, #10
 800875c:	d004      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x268>
 800875e:	f241 516d 	movw	r1, #5485	@ 0x156d
 8008762:	4811      	ldr	r0, [pc, #68]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008764:	f7f9 fdc8 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d904      	bls.n	800877a <HAL_TIM_ConfigClockSource+0x27a>
 8008770:	f241 516e 	movw	r1, #5486	@ 0x156e
 8008774:	480c      	ldr	r0, [pc, #48]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008776:	f7f9 fdbf 	bl	80022f8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800878a:	f000 feb5 	bl	80094f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800879c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]
      break;
 80087a6:	e1da      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
 80087a8:	0800c2e8 	.word	0x0800c2e8
 80087ac:	40012c00 	.word	0x40012c00
 80087b0:	40000400 	.word	0x40000400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	40000c00 	.word	0x40000c00
 80087bc:	40001000 	.word	0x40001000
 80087c0:	40001400 	.word	0x40001400
 80087c4:	40013400 	.word	0x40013400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a64      	ldr	r2, [pc, #400]	@ (800896c <HAL_TIM_ConfigClockSource+0x46c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d01d      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x31a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e6:	d018      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x31a>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a60      	ldr	r2, [pc, #384]	@ (8008970 <HAL_TIM_ConfigClockSource+0x470>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d013      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x31a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a5f      	ldr	r2, [pc, #380]	@ (8008974 <HAL_TIM_ConfigClockSource+0x474>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00e      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x31a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a5d      	ldr	r2, [pc, #372]	@ (8008978 <HAL_TIM_ConfigClockSource+0x478>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d009      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x31a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a5c      	ldr	r2, [pc, #368]	@ (800897c <HAL_TIM_ConfigClockSource+0x47c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d004      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x31a>
 8008810:	f241 5181 	movw	r1, #5505	@ 0x1581
 8008814:	485a      	ldr	r0, [pc, #360]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 8008816:	f7f9 fd6f 	bl	80022f8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d013      	beq.n	800884a <HAL_TIM_ConfigClockSource+0x34a>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800882a:	d00e      	beq.n	800884a <HAL_TIM_ConfigClockSource+0x34a>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008834:	d009      	beq.n	800884a <HAL_TIM_ConfigClockSource+0x34a>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800883e:	d004      	beq.n	800884a <HAL_TIM_ConfigClockSource+0x34a>
 8008840:	f241 5184 	movw	r1, #5508	@ 0x1584
 8008844:	484e      	ldr	r0, [pc, #312]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 8008846:	f7f9 fd57 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008852:	d014      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x37e>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x37e>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00c      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x37e>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d008      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x37e>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b0a      	cmp	r3, #10
 8008872:	d004      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x37e>
 8008874:	f241 5185 	movw	r1, #5509	@ 0x1585
 8008878:	4841      	ldr	r0, [pc, #260]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 800887a:	f7f9 fd3d 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b0f      	cmp	r3, #15
 8008884:	d904      	bls.n	8008890 <HAL_TIM_ConfigClockSource+0x390>
 8008886:	f241 5186 	movw	r1, #5510	@ 0x1586
 800888a:	483d      	ldr	r0, [pc, #244]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 800888c:	f7f9 fd34 	bl	80022f8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088a0:	f000 fe2a 	bl	80094f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088b2:	609a      	str	r2, [r3, #8]
      break;
 80088b4:	e153      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a2c      	ldr	r2, [pc, #176]	@ (800896c <HAL_TIM_ConfigClockSource+0x46c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d022      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c8:	d01d      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a28      	ldr	r2, [pc, #160]	@ (8008970 <HAL_TIM_ConfigClockSource+0x470>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d018      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a26      	ldr	r2, [pc, #152]	@ (8008974 <HAL_TIM_ConfigClockSource+0x474>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a25      	ldr	r2, [pc, #148]	@ (8008978 <HAL_TIM_ConfigClockSource+0x478>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a23      	ldr	r2, [pc, #140]	@ (800897c <HAL_TIM_ConfigClockSource+0x47c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a23      	ldr	r2, [pc, #140]	@ (8008984 <HAL_TIM_ConfigClockSource+0x484>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x406>
 80088fc:	f241 5195 	movw	r1, #5525	@ 0x1595
 8008900:	481f      	ldr	r0, [pc, #124]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 8008902:	f7f9 fcf9 	bl	80022f8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800890e:	d014      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x43a>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d010      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x43a>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00c      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x43a>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d008      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x43a>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b0a      	cmp	r3, #10
 800892e:	d004      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x43a>
 8008930:	f241 5198 	movw	r1, #5528	@ 0x1598
 8008934:	4812      	ldr	r0, [pc, #72]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 8008936:	f7f9 fcdf 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	2b0f      	cmp	r3, #15
 8008940:	d904      	bls.n	800894c <HAL_TIM_ConfigClockSource+0x44c>
 8008942:	f241 5199 	movw	r1, #5529	@ 0x1599
 8008946:	480e      	ldr	r0, [pc, #56]	@ (8008980 <HAL_TIM_ConfigClockSource+0x480>)
 8008948:	f7f9 fcd6 	bl	80022f8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008958:	461a      	mov	r2, r3
 800895a:	f000 fd53 	bl	8009404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2150      	movs	r1, #80	@ 0x50
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fdac 	bl	80094c2 <TIM_ITRx_SetConfig>
      break;
 800896a:	e0f8      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40000400 	.word	0x40000400
 8008974:	40000800 	.word	0x40000800
 8008978:	40000c00 	.word	0x40000c00
 800897c:	40013400 	.word	0x40013400
 8008980:	0800c2e8 	.word	0x0800c2e8
 8008984:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a7a      	ldr	r2, [pc, #488]	@ (8008b78 <HAL_TIM_ConfigClockSource+0x678>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d022      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800899a:	d01d      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a76      	ldr	r2, [pc, #472]	@ (8008b7c <HAL_TIM_ConfigClockSource+0x67c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d018      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a75      	ldr	r2, [pc, #468]	@ (8008b80 <HAL_TIM_ConfigClockSource+0x680>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d013      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a73      	ldr	r2, [pc, #460]	@ (8008b84 <HAL_TIM_ConfigClockSource+0x684>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00e      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a72      	ldr	r2, [pc, #456]	@ (8008b88 <HAL_TIM_ConfigClockSource+0x688>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d009      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a70      	ldr	r2, [pc, #448]	@ (8008b8c <HAL_TIM_ConfigClockSource+0x68c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x4d8>
 80089ce:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80089d2:	486f      	ldr	r0, [pc, #444]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 80089d4:	f7f9 fc90 	bl	80022f8 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089e0:	d014      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0x50c>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d010      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0x50c>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00c      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0x50c>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d008      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0x50c>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2b0a      	cmp	r3, #10
 8008a00:	d004      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0x50c>
 8008a02:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8008a06:	4862      	ldr	r0, [pc, #392]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 8008a08:	f7f9 fc76 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	2b0f      	cmp	r3, #15
 8008a12:	d904      	bls.n	8008a1e <HAL_TIM_ConfigClockSource+0x51e>
 8008a14:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 8008a18:	485d      	ldr	r0, [pc, #372]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 8008a1a:	f7f9 fc6d 	bl	80022f8 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f000 fd19 	bl	8009462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2160      	movs	r1, #96	@ 0x60
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fd43 	bl	80094c2 <TIM_ITRx_SetConfig>
      break;
 8008a3c:	e08f      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a4d      	ldr	r2, [pc, #308]	@ (8008b78 <HAL_TIM_ConfigClockSource+0x678>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d022      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a50:	d01d      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a49      	ldr	r2, [pc, #292]	@ (8008b7c <HAL_TIM_ConfigClockSource+0x67c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d018      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a47      	ldr	r2, [pc, #284]	@ (8008b80 <HAL_TIM_ConfigClockSource+0x680>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d013      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a46      	ldr	r2, [pc, #280]	@ (8008b84 <HAL_TIM_ConfigClockSource+0x684>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d00e      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a44      	ldr	r2, [pc, #272]	@ (8008b88 <HAL_TIM_ConfigClockSource+0x688>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d009      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a43      	ldr	r2, [pc, #268]	@ (8008b8c <HAL_TIM_ConfigClockSource+0x68c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d004      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x58e>
 8008a84:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8008a88:	4841      	ldr	r0, [pc, #260]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 8008a8a:	f7f9 fc35 	bl	80022f8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a96:	d014      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x5c2>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d010      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x5c2>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00c      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x5c2>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d008      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x5c2>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b0a      	cmp	r3, #10
 8008ab6:	d004      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x5c2>
 8008ab8:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8008abc:	4834      	ldr	r0, [pc, #208]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 8008abe:	f7f9 fc1b 	bl	80022f8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	2b0f      	cmp	r3, #15
 8008ac8:	d904      	bls.n	8008ad4 <HAL_TIM_ConfigClockSource+0x5d4>
 8008aca:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8008ace:	4830      	ldr	r0, [pc, #192]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 8008ad0:	f7f9 fc12 	bl	80022f8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f000 fc8f 	bl	8009404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2140      	movs	r1, #64	@ 0x40
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fce8 	bl	80094c2 <TIM_ITRx_SetConfig>
      break;
 8008af2:	e034      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b78 <HAL_TIM_ConfigClockSource+0x678>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d022      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b06:	d01d      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8008b7c <HAL_TIM_ConfigClockSource+0x67c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d018      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1a      	ldr	r2, [pc, #104]	@ (8008b80 <HAL_TIM_ConfigClockSource+0x680>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a18      	ldr	r2, [pc, #96]	@ (8008b84 <HAL_TIM_ConfigClockSource+0x684>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00e      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a17      	ldr	r2, [pc, #92]	@ (8008b88 <HAL_TIM_ConfigClockSource+0x688>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d009      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a15      	ldr	r2, [pc, #84]	@ (8008b8c <HAL_TIM_ConfigClockSource+0x68c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x644>
 8008b3a:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8008b3e:	4814      	ldr	r0, [pc, #80]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x690>)
 8008b40:	f7f9 fbda 	bl	80022f8 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f000 fcb7 	bl	80094c2 <TIM_ITRx_SetConfig>
      break;
 8008b54:	e003      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	73fb      	strb	r3, [r7, #15]
      break;
 8008b5a:	e000      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x65e>
      break;
 8008b5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40012c00 	.word	0x40012c00
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40013400 	.word	0x40013400
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	0800c2e8 	.word	0x0800c2e8

08008b94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a46      	ldr	r2, [pc, #280]	@ (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c16:	d00f      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a43      	ldr	r2, [pc, #268]	@ (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a42      	ldr	r2, [pc, #264]	@ (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a41      	ldr	r2, [pc, #260]	@ (8008d30 <TIM_Base_SetConfig+0x138>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a40      	ldr	r2, [pc, #256]	@ (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a35      	ldr	r2, [pc, #212]	@ (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d01f      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c58:	d01b      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a32      	ldr	r2, [pc, #200]	@ (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d017      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a31      	ldr	r2, [pc, #196]	@ (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a30      	ldr	r2, [pc, #192]	@ (8008d30 <TIM_Base_SetConfig+0x138>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00f      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2f      	ldr	r2, [pc, #188]	@ (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00b      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8008d38 <TIM_Base_SetConfig+0x140>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d007      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2d      	ldr	r2, [pc, #180]	@ (8008d3c <TIM_Base_SetConfig+0x144>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8008d40 <TIM_Base_SetConfig+0x148>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d108      	bne.n	8008ca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a16      	ldr	r2, [pc, #88]	@ (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00f      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a17      	ldr	r2, [pc, #92]	@ (8008d38 <TIM_Base_SetConfig+0x140>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a16      	ldr	r2, [pc, #88]	@ (8008d3c <TIM_Base_SetConfig+0x144>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <TIM_Base_SetConfig+0x148>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d103      	bne.n	8008cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d105      	bne.n	8008d16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f023 0201 	bic.w	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]
  }
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40012c00 	.word	0x40012c00
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40013400 	.word	0x40013400
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	40014800 	.word	0x40014800

08008d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f023 0201 	bic.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
 8008d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f023 0302 	bic.w	r3, r3, #2
 8008d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a40      	ldr	r2, [pc, #256]	@ (8008ea0 <TIM_OC1_SetConfig+0x15c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00f      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ea4 <TIM_OC1_SetConfig+0x160>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00b      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a3e      	ldr	r2, [pc, #248]	@ (8008ea8 <TIM_OC1_SetConfig+0x164>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d007      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a3d      	ldr	r2, [pc, #244]	@ (8008eac <TIM_OC1_SetConfig+0x168>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8008eb0 <TIM_OC1_SetConfig+0x16c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d119      	bne.n	8008df8 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d008      	beq.n	8008dde <TIM_OC1_SetConfig+0x9a>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d004      	beq.n	8008dde <TIM_OC1_SetConfig+0x9a>
 8008dd4:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 8008dd8:	4836      	ldr	r0, [pc, #216]	@ (8008eb4 <TIM_OC1_SetConfig+0x170>)
 8008dda:	f7f9 fa8d 	bl	80022f8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 0308 	bic.w	r3, r3, #8
 8008de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f023 0304 	bic.w	r3, r3, #4
 8008df6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a29      	ldr	r2, [pc, #164]	@ (8008ea0 <TIM_OC1_SetConfig+0x15c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00f      	beq.n	8008e20 <TIM_OC1_SetConfig+0xdc>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a28      	ldr	r2, [pc, #160]	@ (8008ea4 <TIM_OC1_SetConfig+0x160>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00b      	beq.n	8008e20 <TIM_OC1_SetConfig+0xdc>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a27      	ldr	r2, [pc, #156]	@ (8008ea8 <TIM_OC1_SetConfig+0x164>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d007      	beq.n	8008e20 <TIM_OC1_SetConfig+0xdc>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a26      	ldr	r2, [pc, #152]	@ (8008eac <TIM_OC1_SetConfig+0x168>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC1_SetConfig+0xdc>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a25      	ldr	r2, [pc, #148]	@ (8008eb0 <TIM_OC1_SetConfig+0x16c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d12d      	bne.n	8008e7c <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e28:	d008      	beq.n	8008e3c <TIM_OC1_SetConfig+0xf8>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <TIM_OC1_SetConfig+0xf8>
 8008e32:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 8008e36:	481f      	ldr	r0, [pc, #124]	@ (8008eb4 <TIM_OC1_SetConfig+0x170>)
 8008e38:	f7f9 fa5e 	bl	80022f8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e44:	d008      	beq.n	8008e58 <TIM_OC1_SetConfig+0x114>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <TIM_OC1_SetConfig+0x114>
 8008e4e:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 8008e52:	4818      	ldr	r0, [pc, #96]	@ (8008eb4 <TIM_OC1_SetConfig+0x170>)
 8008e54:	f7f9 fa50 	bl	80022f8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	621a      	str	r2, [r3, #32]
}
 8008e96:	bf00      	nop
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40012c00 	.word	0x40012c00
 8008ea4:	40013400 	.word	0x40013400
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	40014800 	.word	0x40014800
 8008eb4:	0800c2e8 	.word	0x0800c2e8

08008eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	f023 0210 	bic.w	r2, r3, #16
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	021b      	lsls	r3, r3, #8
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f023 0320 	bic.w	r3, r3, #32
 8008f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	011b      	lsls	r3, r3, #4
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a3b      	ldr	r2, [pc, #236]	@ (8009004 <TIM_OC2_SetConfig+0x14c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d003      	beq.n	8008f24 <TIM_OC2_SetConfig+0x6c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8009008 <TIM_OC2_SetConfig+0x150>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d11a      	bne.n	8008f5a <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <TIM_OC2_SetConfig+0x86>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d004      	beq.n	8008f3e <TIM_OC2_SetConfig+0x86>
 8008f34:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 8008f38:	4834      	ldr	r0, [pc, #208]	@ (800900c <TIM_OC2_SetConfig+0x154>)
 8008f3a:	f7f9 f9dd 	bl	80022f8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a29      	ldr	r2, [pc, #164]	@ (8009004 <TIM_OC2_SetConfig+0x14c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00f      	beq.n	8008f82 <TIM_OC2_SetConfig+0xca>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a28      	ldr	r2, [pc, #160]	@ (8009008 <TIM_OC2_SetConfig+0x150>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00b      	beq.n	8008f82 <TIM_OC2_SetConfig+0xca>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a28      	ldr	r2, [pc, #160]	@ (8009010 <TIM_OC2_SetConfig+0x158>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d007      	beq.n	8008f82 <TIM_OC2_SetConfig+0xca>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a27      	ldr	r2, [pc, #156]	@ (8009014 <TIM_OC2_SetConfig+0x15c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_OC2_SetConfig+0xca>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a26      	ldr	r2, [pc, #152]	@ (8009018 <TIM_OC2_SetConfig+0x160>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d12f      	bne.n	8008fe2 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8a:	d008      	beq.n	8008f9e <TIM_OC2_SetConfig+0xe6>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <TIM_OC2_SetConfig+0xe6>
 8008f94:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 8008f98:	481c      	ldr	r0, [pc, #112]	@ (800900c <TIM_OC2_SetConfig+0x154>)
 8008f9a:	f7f9 f9ad 	bl	80022f8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa6:	d008      	beq.n	8008fba <TIM_OC2_SetConfig+0x102>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <TIM_OC2_SetConfig+0x102>
 8008fb0:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 8008fb4:	4815      	ldr	r0, [pc, #84]	@ (800900c <TIM_OC2_SetConfig+0x154>)
 8008fb6:	f7f9 f99f 	bl	80022f8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	621a      	str	r2, [r3, #32]
}
 8008ffc:	bf00      	nop
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40012c00 	.word	0x40012c00
 8009008:	40013400 	.word	0x40013400
 800900c:	0800c2e8 	.word	0x0800c2e8
 8009010:	40014000 	.word	0x40014000
 8009014:	40014400 	.word	0x40014400
 8009018:	40014800 	.word	0x40014800

0800901c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800904a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0303 	bic.w	r3, r3, #3
 8009056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	4313      	orrs	r3, r2
 8009074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a3b      	ldr	r2, [pc, #236]	@ (8009168 <TIM_OC3_SetConfig+0x14c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d003      	beq.n	8009086 <TIM_OC3_SetConfig+0x6a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a3a      	ldr	r2, [pc, #232]	@ (800916c <TIM_OC3_SetConfig+0x150>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d11a      	bne.n	80090bc <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <TIM_OC3_SetConfig+0x84>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	2b08      	cmp	r3, #8
 8009094:	d004      	beq.n	80090a0 <TIM_OC3_SetConfig+0x84>
 8009096:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800909a:	4835      	ldr	r0, [pc, #212]	@ (8009170 <TIM_OC3_SetConfig+0x154>)
 800909c:	f7f9 f92c 	bl	80022f8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a2a      	ldr	r2, [pc, #168]	@ (8009168 <TIM_OC3_SetConfig+0x14c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00f      	beq.n	80090e4 <TIM_OC3_SetConfig+0xc8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a29      	ldr	r2, [pc, #164]	@ (800916c <TIM_OC3_SetConfig+0x150>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00b      	beq.n	80090e4 <TIM_OC3_SetConfig+0xc8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a29      	ldr	r2, [pc, #164]	@ (8009174 <TIM_OC3_SetConfig+0x158>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d007      	beq.n	80090e4 <TIM_OC3_SetConfig+0xc8>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a28      	ldr	r2, [pc, #160]	@ (8009178 <TIM_OC3_SetConfig+0x15c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_OC3_SetConfig+0xc8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a27      	ldr	r2, [pc, #156]	@ (800917c <TIM_OC3_SetConfig+0x160>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d12f      	bne.n	8009144 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ec:	d008      	beq.n	8009100 <TIM_OC3_SetConfig+0xe4>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d004      	beq.n	8009100 <TIM_OC3_SetConfig+0xe4>
 80090f6:	f641 4112 	movw	r1, #7186	@ 0x1c12
 80090fa:	481d      	ldr	r0, [pc, #116]	@ (8009170 <TIM_OC3_SetConfig+0x154>)
 80090fc:	f7f9 f8fc 	bl	80022f8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009108:	d008      	beq.n	800911c <TIM_OC3_SetConfig+0x100>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <TIM_OC3_SetConfig+0x100>
 8009112:	f641 4113 	movw	r1, #7187	@ 0x1c13
 8009116:	4816      	ldr	r0, [pc, #88]	@ (8009170 <TIM_OC3_SetConfig+0x154>)
 8009118:	f7f9 f8ee 	bl	80022f8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800912a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	621a      	str	r2, [r3, #32]
}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	40012c00 	.word	0x40012c00
 800916c:	40013400 	.word	0x40013400
 8009170:	0800c2e8 	.word	0x0800c2e8
 8009174:	40014000 	.word	0x40014000
 8009178:	40014400 	.word	0x40014400
 800917c:	40014800 	.word	0x40014800

08009180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	031b      	lsls	r3, r3, #12
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a1e      	ldr	r2, [pc, #120]	@ (8009258 <TIM_OC4_SetConfig+0xd8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00f      	beq.n	8009204 <TIM_OC4_SetConfig+0x84>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a1d      	ldr	r2, [pc, #116]	@ (800925c <TIM_OC4_SetConfig+0xdc>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d00b      	beq.n	8009204 <TIM_OC4_SetConfig+0x84>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009260 <TIM_OC4_SetConfig+0xe0>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d007      	beq.n	8009204 <TIM_OC4_SetConfig+0x84>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009264 <TIM_OC4_SetConfig+0xe4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d003      	beq.n	8009204 <TIM_OC4_SetConfig+0x84>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009268 <TIM_OC4_SetConfig+0xe8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d117      	bne.n	8009234 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800920c:	d008      	beq.n	8009220 <TIM_OC4_SetConfig+0xa0>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <TIM_OC4_SetConfig+0xa0>
 8009216:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800921a:	4814      	ldr	r0, [pc, #80]	@ (800926c <TIM_OC4_SetConfig+0xec>)
 800921c:	f7f9 f86c 	bl	80022f8 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	019b      	lsls	r3, r3, #6
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	621a      	str	r2, [r3, #32]
}
 800924e:	bf00      	nop
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40012c00 	.word	0x40012c00
 800925c:	40013400 	.word	0x40013400
 8009260:	40014000 	.word	0x40014000
 8009264:	40014400 	.word	0x40014400
 8009268:	40014800 	.word	0x40014800
 800926c:	0800c2e8 	.word	0x0800c2e8

08009270 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800929e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80092b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a17      	ldr	r2, [pc, #92]	@ (8009324 <TIM_OC5_SetConfig+0xb4>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00f      	beq.n	80092ea <TIM_OC5_SetConfig+0x7a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a16      	ldr	r2, [pc, #88]	@ (8009328 <TIM_OC5_SetConfig+0xb8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d00b      	beq.n	80092ea <TIM_OC5_SetConfig+0x7a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a15      	ldr	r2, [pc, #84]	@ (800932c <TIM_OC5_SetConfig+0xbc>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d007      	beq.n	80092ea <TIM_OC5_SetConfig+0x7a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a14      	ldr	r2, [pc, #80]	@ (8009330 <TIM_OC5_SetConfig+0xc0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d003      	beq.n	80092ea <TIM_OC5_SetConfig+0x7a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a13      	ldr	r2, [pc, #76]	@ (8009334 <TIM_OC5_SetConfig+0xc4>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d109      	bne.n	80092fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	621a      	str	r2, [r3, #32]
}
 8009318:	bf00      	nop
 800931a:	371c      	adds	r7, #28
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	40012c00 	.word	0x40012c00
 8009328:	40013400 	.word	0x40013400
 800932c:	40014000 	.word	0x40014000
 8009330:	40014400 	.word	0x40014400
 8009334:	40014800 	.word	0x40014800

08009338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800936a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	021b      	lsls	r3, r3, #8
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	4313      	orrs	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800937e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	051b      	lsls	r3, r3, #20
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a18      	ldr	r2, [pc, #96]	@ (80093f0 <TIM_OC6_SetConfig+0xb8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d00f      	beq.n	80093b4 <TIM_OC6_SetConfig+0x7c>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a17      	ldr	r2, [pc, #92]	@ (80093f4 <TIM_OC6_SetConfig+0xbc>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d00b      	beq.n	80093b4 <TIM_OC6_SetConfig+0x7c>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a16      	ldr	r2, [pc, #88]	@ (80093f8 <TIM_OC6_SetConfig+0xc0>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d007      	beq.n	80093b4 <TIM_OC6_SetConfig+0x7c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a15      	ldr	r2, [pc, #84]	@ (80093fc <TIM_OC6_SetConfig+0xc4>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d003      	beq.n	80093b4 <TIM_OC6_SetConfig+0x7c>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a14      	ldr	r2, [pc, #80]	@ (8009400 <TIM_OC6_SetConfig+0xc8>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d109      	bne.n	80093c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	029b      	lsls	r3, r3, #10
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40012c00 	.word	0x40012c00
 80093f4:	40013400 	.word	0x40013400
 80093f8:	40014000 	.word	0x40014000
 80093fc:	40014400 	.word	0x40014400
 8009400:	40014800 	.word	0x40014800

08009404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f023 0201 	bic.w	r2, r3, #1
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800942e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4313      	orrs	r3, r2
 8009438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f023 030a 	bic.w	r3, r3, #10
 8009440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4313      	orrs	r3, r2
 8009448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	621a      	str	r2, [r3, #32]
}
 8009456:	bf00      	nop
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009462:	b480      	push	{r7}
 8009464:	b087      	sub	sp, #28
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	f023 0210 	bic.w	r2, r3, #16
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800948c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	031b      	lsls	r3, r3, #12
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800949e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	621a      	str	r2, [r3, #32]
}
 80094b6:	bf00      	nop
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	f043 0307 	orr.w	r3, r3, #7
 80094e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	609a      	str	r2, [r3, #8]
}
 80094ec:	bf00      	nop
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	021a      	lsls	r2, r3, #8
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	431a      	orrs	r2, r3
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4313      	orrs	r3, r2
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	609a      	str	r2, [r3, #8]
}
 800952c:	bf00      	nop
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4a2f      	ldr	r2, [pc, #188]	@ (8009604 <TIM_CCxChannelCmd+0xcc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d024      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009552:	d020      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4a2c      	ldr	r2, [pc, #176]	@ (8009608 <TIM_CCxChannelCmd+0xd0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d01c      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4a2b      	ldr	r2, [pc, #172]	@ (800960c <TIM_CCxChannelCmd+0xd4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d018      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4a2a      	ldr	r2, [pc, #168]	@ (8009610 <TIM_CCxChannelCmd+0xd8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d014      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a29      	ldr	r2, [pc, #164]	@ (8009614 <TIM_CCxChannelCmd+0xdc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d010      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4a28      	ldr	r2, [pc, #160]	@ (8009618 <TIM_CCxChannelCmd+0xe0>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00c      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4a27      	ldr	r2, [pc, #156]	@ (800961c <TIM_CCxChannelCmd+0xe4>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d008      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4a26      	ldr	r2, [pc, #152]	@ (8009620 <TIM_CCxChannelCmd+0xe8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d004      	beq.n	8009596 <TIM_CCxChannelCmd+0x5e>
 800958c:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 8009590:	4824      	ldr	r0, [pc, #144]	@ (8009624 <TIM_CCxChannelCmd+0xec>)
 8009592:	f7f8 feb1 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d016      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d013      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d010      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b0c      	cmp	r3, #12
 80095ac:	d00d      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	d00a      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b14      	cmp	r3, #20
 80095b8:	d007      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b3c      	cmp	r3, #60	@ 0x3c
 80095be:	d004      	beq.n	80095ca <TIM_CCxChannelCmd+0x92>
 80095c0:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 80095c4:	4817      	ldr	r0, [pc, #92]	@ (8009624 <TIM_CCxChannelCmd+0xec>)
 80095c6:	f7f8 fe97 	bl	80022f8 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2201      	movs	r2, #1
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a1a      	ldr	r2, [r3, #32]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	43db      	mvns	r3, r3
 80095e0:	401a      	ands	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a1a      	ldr	r2, [r3, #32]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f003 031f 	and.w	r3, r3, #31
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	fa01 f303 	lsl.w	r3, r1, r3
 80095f6:	431a      	orrs	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	621a      	str	r2, [r3, #32]
}
 80095fc:	bf00      	nop
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	40012c00 	.word	0x40012c00
 8009608:	40000400 	.word	0x40000400
 800960c:	40000800 	.word	0x40000800
 8009610:	40000c00 	.word	0x40000c00
 8009614:	40013400 	.word	0x40013400
 8009618:	40014000 	.word	0x40014000
 800961c:	40014400 	.word	0x40014400
 8009620:	40014800 	.word	0x40014800
 8009624:	0800c2e8 	.word	0x0800c2e8

08009628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a34      	ldr	r2, [pc, #208]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d02c      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009644:	d027      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a30      	ldr	r2, [pc, #192]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d022      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a2e      	ldr	r2, [pc, #184]	@ (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d01d      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a2d      	ldr	r2, [pc, #180]	@ (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d018      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a2b      	ldr	r2, [pc, #172]	@ (8009718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d013      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a2a      	ldr	r2, [pc, #168]	@ (800971c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d00e      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a28      	ldr	r2, [pc, #160]	@ (8009720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d009      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a27      	ldr	r2, [pc, #156]	@ (8009724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d004      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800968c:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8009690:	4825      	ldr	r0, [pc, #148]	@ (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009692:	f7f8 fe31 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d020      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b10      	cmp	r3, #16
 80096a4:	d01c      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	d018      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b30      	cmp	r3, #48	@ 0x30
 80096b4:	d014      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b40      	cmp	r3, #64	@ 0x40
 80096bc:	d010      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b50      	cmp	r3, #80	@ 0x50
 80096c4:	d00c      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b60      	cmp	r3, #96	@ 0x60
 80096cc:	d008      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b70      	cmp	r3, #112	@ 0x70
 80096d4:	d004      	beq.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096d6:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 80096da:	4813      	ldr	r0, [pc, #76]	@ (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096dc:	f7f8 fe0c 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	2b80      	cmp	r3, #128	@ 0x80
 80096e6:	d008      	beq.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80096f0:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 80096f4:	480c      	ldr	r0, [pc, #48]	@ (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096f6:	f7f8 fdff 	bl	80022f8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009700:	2b01      	cmp	r3, #1
 8009702:	d113      	bne.n	800972c <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8009704:	2302      	movs	r3, #2
 8009706:	e0d3      	b.n	80098b0 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8009708:	40012c00 	.word	0x40012c00
 800970c:	40000400 	.word	0x40000400
 8009710:	40000800 	.word	0x40000800
 8009714:	40000c00 	.word	0x40000c00
 8009718:	40001000 	.word	0x40001000
 800971c:	40001400 	.word	0x40001400
 8009720:	40013400 	.word	0x40013400
 8009724:	40014000 	.word	0x40014000
 8009728:	0800c320 	.word	0x0800c320
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a59      	ldr	r2, [pc, #356]	@ (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d004      	beq.n	8009760 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a58      	ldr	r2, [pc, #352]	@ (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d161      	bne.n	8009824 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d054      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009770:	d04f      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800977a:	d04a      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009784:	d045      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800978e:	d040      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009798:	d03b      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097a2:	d036      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097ac:	d031      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80097b6:	d02c      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097c0:	d027      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 80097ca:	d022      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80097d4:	d01d      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 80097de:	d018      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80097e8:	d013      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 80097f2:	d00e      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 80097fc:	d009      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8009806:	d004      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009808:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800980c:	482c      	ldr	r0, [pc, #176]	@ (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800980e:	f7f8 fd73 	bl	80022f8 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009818:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a1d      	ldr	r2, [pc, #116]	@ (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d01d      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009850:	d018      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1b      	ldr	r2, [pc, #108]	@ (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d013      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a19      	ldr	r2, [pc, #100]	@ (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00e      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a18      	ldr	r2, [pc, #96]	@ (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d009      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a11      	ldr	r2, [pc, #68]	@ (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d004      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a14      	ldr	r2, [pc, #80]	@ (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d10c      	bne.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800988a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	4313      	orrs	r3, r2
 8009894:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	0800c320 	.word	0x0800c320
 80098c4:	40000400 	.word	0x40000400
 80098c8:	40000800 	.word	0x40000800
 80098cc:	40000c00 	.word	0x40000c00
 80098d0:	40014000 	.word	0x40014000

080098d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a91      	ldr	r2, [pc, #580]	@ (8009b2c <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d018      	beq.n	800991e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a8f      	ldr	r2, [pc, #572]	@ (8009b30 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d013      	beq.n	800991e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a8e      	ldr	r2, [pc, #568]	@ (8009b34 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d00e      	beq.n	800991e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a8c      	ldr	r2, [pc, #560]	@ (8009b38 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d009      	beq.n	800991e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a8b      	ldr	r2, [pc, #556]	@ (8009b3c <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d004      	beq.n	800991e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009914:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8009918:	4889      	ldr	r0, [pc, #548]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800991a:	f7f8 fced 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009926:	d008      	beq.n	800993a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009930:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8009934:	4882      	ldr	r0, [pc, #520]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009936:	f7f8 fcdf 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009942:	d008      	beq.n	8009956 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800994c:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8009950:	487b      	ldr	r0, [pc, #492]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009952:	f7f8 fcd1 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d013      	beq.n	8009986 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009966:	d00e      	beq.n	8009986 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009970:	d009      	beq.n	8009986 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800997a:	d004      	beq.n	8009986 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800997c:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8009980:	486f      	ldr	r0, [pc, #444]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009982:	f7f8 fcb9 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2bff      	cmp	r3, #255	@ 0xff
 800998c:	d904      	bls.n	8009998 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800998e:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 8009992:	486b      	ldr	r0, [pc, #428]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009994:	f7f8 fcb0 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a0:	d008      	beq.n	80099b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80099aa:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 80099ae:	4864      	ldr	r0, [pc, #400]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80099b0:	f7f8 fca2 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099c4:	d004      	beq.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80099c6:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 80099ca:	485d      	ldr	r0, [pc, #372]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80099cc:	f7f8 fc94 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b0f      	cmp	r3, #15
 80099d6:	d904      	bls.n	80099e2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80099d8:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 80099dc:	4858      	ldr	r0, [pc, #352]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80099de:	f7f8 fc8b 	bl	80022f8 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ea:	d008      	beq.n	80099fe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d004      	beq.n	80099fe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80099f4:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 80099f8:	4851      	ldr	r0, [pc, #324]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80099fa:	f7f8 fc7d 	bl	80022f8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e08a      	b.n	8009b22 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	041b      	lsls	r3, r3, #16
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a28      	ldr	r2, [pc, #160]	@ (8009b2c <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d004      	beq.n	8009a9a <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a26      	ldr	r2, [pc, #152]	@ (8009b30 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d13a      	bne.n	8009b10 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aa2:	d008      	beq.n	8009ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009aac:	f640 0112 	movw	r1, #2066	@ 0x812
 8009ab0:	4823      	ldr	r0, [pc, #140]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009ab2:	f7f8 fc21 	bl	80022f8 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d009      	beq.n	8009ad2 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ac6:	d004      	beq.n	8009ad2 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009ac8:	f640 0113 	movw	r1, #2067	@ 0x813
 8009acc:	481c      	ldr	r0, [pc, #112]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009ace:	f7f8 fc13 	bl	80022f8 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	2b0f      	cmp	r3, #15
 8009ad8:	d904      	bls.n	8009ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 8009ada:	f640 0114 	movw	r1, #2068	@ 0x814
 8009ade:	4818      	ldr	r0, [pc, #96]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009ae0:	f7f8 fc0a 	bl	80022f8 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	051b      	lsls	r3, r3, #20
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	40012c00 	.word	0x40012c00
 8009b30:	40013400 	.word	0x40013400
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40014400 	.word	0x40014400
 8009b3c:	40014800 	.word	0x40014800
 8009b40:	0800c320 	.word	0x0800c320

08009b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e08b      	b.n	8009caa <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d023      	beq.n	8009be2 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a45      	ldr	r2, [pc, #276]	@ (8009cb4 <HAL_UART_Init+0x134>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d041      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a43      	ldr	r2, [pc, #268]	@ (8009cb8 <HAL_UART_Init+0x138>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d03c      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a42      	ldr	r2, [pc, #264]	@ (8009cbc <HAL_UART_Init+0x13c>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d037      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a40      	ldr	r2, [pc, #256]	@ (8009cc0 <HAL_UART_Init+0x140>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d032      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8009cc4 <HAL_UART_Init+0x144>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d02d      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8009cc8 <HAL_UART_Init+0x148>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d028      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bd6:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009bda:	483c      	ldr	r0, [pc, #240]	@ (8009ccc <HAL_UART_Init+0x14c>)
 8009bdc:	f7f8 fb8c 	bl	80022f8 <assert_failed>
 8009be0:	e022      	b.n	8009c28 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a33      	ldr	r2, [pc, #204]	@ (8009cb4 <HAL_UART_Init+0x134>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d01d      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a31      	ldr	r2, [pc, #196]	@ (8009cb8 <HAL_UART_Init+0x138>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d018      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a30      	ldr	r2, [pc, #192]	@ (8009cbc <HAL_UART_Init+0x13c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d013      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a2e      	ldr	r2, [pc, #184]	@ (8009cc0 <HAL_UART_Init+0x140>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00e      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8009cc4 <HAL_UART_Init+0x144>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d009      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a2b      	ldr	r2, [pc, #172]	@ (8009cc8 <HAL_UART_Init+0x148>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <HAL_UART_Init+0xa8>
 8009c1e:	f240 1157 	movw	r1, #343	@ 0x157
 8009c22:	482a      	ldr	r0, [pc, #168]	@ (8009ccc <HAL_UART_Init+0x14c>)
 8009c24:	f7f8 fb68 	bl	80022f8 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d106      	bne.n	8009c3e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7f9 f92f 	bl	8002e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2224      	movs	r2, #36	@ 0x24
 8009c42:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0201 	bic.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fc1f 	bl	800a4a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f8be 	bl	8009de4 <UART_SetConfig>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e01b      	b.n	8009caa <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0201 	orr.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fd5c 	bl	800a760 <UART_CheckIdleState>
 8009ca8:	4603      	mov	r3, r0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40013800 	.word	0x40013800
 8009cb8:	40004400 	.word	0x40004400
 8009cbc:	40004800 	.word	0x40004800
 8009cc0:	40004c00 	.word	0x40004c00
 8009cc4:	40005000 	.word	0x40005000
 8009cc8:	40008000 	.word	0x40008000
 8009ccc:	0800c35c 	.word	0x0800c35c

08009cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	@ 0x28
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	d177      	bne.n	8009dd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <HAL_UART_Transmit+0x24>
 8009cee:	88fb      	ldrh	r3, [r7, #6]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e070      	b.n	8009dda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2221      	movs	r2, #33	@ 0x21
 8009d04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d06:	f7f9 f9b9 	bl	800307c <HAL_GetTick>
 8009d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	88fa      	ldrh	r2, [r7, #6]
 8009d10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	88fa      	ldrh	r2, [r7, #6]
 8009d18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d24:	d108      	bne.n	8009d38 <HAL_UART_Transmit+0x68>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	e003      	b.n	8009d40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d40:	e02f      	b.n	8009da2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2180      	movs	r1, #128	@ 0x80
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fdaf 	bl	800a8b0 <UART_WaitOnFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e03b      	b.n	8009dda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10b      	bne.n	8009d80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	881a      	ldrh	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d74:	b292      	uxth	r2, r2
 8009d76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	3302      	adds	r3, #2
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	e007      	b.n	8009d90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	781a      	ldrb	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1c9      	bne.n	8009d42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2200      	movs	r2, #0
 8009db6:	2140      	movs	r1, #64	@ 0x40
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fd79 	bl	800a8b0 <UART_WaitOnFlagUntilTimeout>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e005      	b.n	8009dda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e000      	b.n	8009dda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009dd8:	2302      	movs	r3, #2
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de8:	b08a      	sub	sp, #40	@ 0x28
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4a9e      	ldr	r2, [pc, #632]	@ (800a074 <UART_SetConfig+0x290>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d904      	bls.n	8009e08 <UART_SetConfig+0x24>
 8009dfe:	f640 4158 	movw	r1, #3160	@ 0xc58
 8009e02:	489d      	ldr	r0, [pc, #628]	@ (800a078 <UART_SetConfig+0x294>)
 8009e04:	f7f8 fa78 	bl	80022f8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e10:	d00d      	beq.n	8009e2e <UART_SetConfig+0x4a>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d009      	beq.n	8009e2e <UART_SetConfig+0x4a>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e22:	d004      	beq.n	8009e2e <UART_SetConfig+0x4a>
 8009e24:	f640 4159 	movw	r1, #3161	@ 0xc59
 8009e28:	4893      	ldr	r0, [pc, #588]	@ (800a078 <UART_SetConfig+0x294>)
 8009e2a:	f7f8 fa65 	bl	80022f8 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a92      	ldr	r2, [pc, #584]	@ (800a07c <UART_SetConfig+0x298>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d10e      	bne.n	8009e56 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d030      	beq.n	8009ea2 <UART_SetConfig+0xbe>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e48:	d02b      	beq.n	8009ea2 <UART_SetConfig+0xbe>
 8009e4a:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8009e4e:	488a      	ldr	r0, [pc, #552]	@ (800a078 <UART_SetConfig+0x294>)
 8009e50:	f7f8 fa52 	bl	80022f8 <assert_failed>
 8009e54:	e025      	b.n	8009ea2 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e5e:	d012      	beq.n	8009e86 <UART_SetConfig+0xa2>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00e      	beq.n	8009e86 <UART_SetConfig+0xa2>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e70:	d009      	beq.n	8009e86 <UART_SetConfig+0xa2>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e7a:	d004      	beq.n	8009e86 <UART_SetConfig+0xa2>
 8009e7c:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8009e80:	487d      	ldr	r0, [pc, #500]	@ (800a078 <UART_SetConfig+0x294>)
 8009e82:	f7f8 fa39 	bl	80022f8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d009      	beq.n	8009ea2 <UART_SetConfig+0xbe>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e96:	d004      	beq.n	8009ea2 <UART_SetConfig+0xbe>
 8009e98:	f640 4161 	movw	r1, #3169	@ 0xc61
 8009e9c:	4876      	ldr	r0, [pc, #472]	@ (800a078 <UART_SetConfig+0x294>)
 8009e9e:	f7f8 fa2b 	bl	80022f8 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00e      	beq.n	8009ec8 <UART_SetConfig+0xe4>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eb2:	d009      	beq.n	8009ec8 <UART_SetConfig+0xe4>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ebc:	d004      	beq.n	8009ec8 <UART_SetConfig+0xe4>
 8009ebe:	f640 4164 	movw	r1, #3172	@ 0xc64
 8009ec2:	486d      	ldr	r0, [pc, #436]	@ (800a078 <UART_SetConfig+0x294>)
 8009ec4:	f7f8 fa18 	bl	80022f8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	f023 030c 	bic.w	r3, r3, #12
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d103      	bne.n	8009edc <UART_SetConfig+0xf8>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <UART_SetConfig+0x102>
 8009edc:	f640 4165 	movw	r1, #3173	@ 0xc65
 8009ee0:	4865      	ldr	r0, [pc, #404]	@ (800a078 <UART_SetConfig+0x294>)
 8009ee2:	f7f8 fa09 	bl	80022f8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d013      	beq.n	8009f16 <UART_SetConfig+0x132>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef6:	d00e      	beq.n	8009f16 <UART_SetConfig+0x132>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f00:	d009      	beq.n	8009f16 <UART_SetConfig+0x132>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f0a:	d004      	beq.n	8009f16 <UART_SetConfig+0x132>
 8009f0c:	f640 4166 	movw	r1, #3174	@ 0xc66
 8009f10:	4859      	ldr	r0, [pc, #356]	@ (800a078 <UART_SetConfig+0x294>)
 8009f12:	f7f8 f9f1 	bl	80022f8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <UART_SetConfig+0x14e>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f26:	d004      	beq.n	8009f32 <UART_SetConfig+0x14e>
 8009f28:	f640 4167 	movw	r1, #3175	@ 0xc67
 8009f2c:	4852      	ldr	r0, [pc, #328]	@ (800a078 <UART_SetConfig+0x294>)
 8009f2e:	f7f8 f9e3 	bl	80022f8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	431a      	orrs	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	4b4b      	ldr	r3, [pc, #300]	@ (800a080 <UART_SetConfig+0x29c>)
 8009f52:	4013      	ands	r3, r2
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	6812      	ldr	r2, [r2, #0]
 8009f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800a07c <UART_SetConfig+0x298>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d004      	beq.n	8009f8e <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a37      	ldr	r2, [pc, #220]	@ (800a084 <UART_SetConfig+0x2a0>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d125      	bne.n	8009ff8 <UART_SetConfig+0x214>
 8009fac:	4b36      	ldr	r3, [pc, #216]	@ (800a088 <UART_SetConfig+0x2a4>)
 8009fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d81a      	bhi.n	8009ff0 <UART_SetConfig+0x20c>
 8009fba:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <UART_SetConfig+0x1dc>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009fd1 	.word	0x08009fd1
 8009fc4:	08009fe1 	.word	0x08009fe1
 8009fc8:	08009fd9 	.word	0x08009fd9
 8009fcc:	08009fe9 	.word	0x08009fe9
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fd6:	e114      	b.n	800a202 <UART_SetConfig+0x41e>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fde:	e110      	b.n	800a202 <UART_SetConfig+0x41e>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fe6:	e10c      	b.n	800a202 <UART_SetConfig+0x41e>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fee:	e108      	b.n	800a202 <UART_SetConfig+0x41e>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ff6:	e104      	b.n	800a202 <UART_SetConfig+0x41e>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a23      	ldr	r2, [pc, #140]	@ (800a08c <UART_SetConfig+0x2a8>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d146      	bne.n	800a090 <UART_SetConfig+0x2ac>
 800a002:	4b21      	ldr	r3, [pc, #132]	@ (800a088 <UART_SetConfig+0x2a4>)
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a008:	f003 030c 	and.w	r3, r3, #12
 800a00c:	2b0c      	cmp	r3, #12
 800a00e:	d82d      	bhi.n	800a06c <UART_SetConfig+0x288>
 800a010:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <UART_SetConfig+0x234>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a04d 	.word	0x0800a04d
 800a01c:	0800a06d 	.word	0x0800a06d
 800a020:	0800a06d 	.word	0x0800a06d
 800a024:	0800a06d 	.word	0x0800a06d
 800a028:	0800a05d 	.word	0x0800a05d
 800a02c:	0800a06d 	.word	0x0800a06d
 800a030:	0800a06d 	.word	0x0800a06d
 800a034:	0800a06d 	.word	0x0800a06d
 800a038:	0800a055 	.word	0x0800a055
 800a03c:	0800a06d 	.word	0x0800a06d
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	0800a06d 	.word	0x0800a06d
 800a048:	0800a065 	.word	0x0800a065
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a052:	e0d6      	b.n	800a202 <UART_SetConfig+0x41e>
 800a054:	2302      	movs	r3, #2
 800a056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a05a:	e0d2      	b.n	800a202 <UART_SetConfig+0x41e>
 800a05c:	2304      	movs	r3, #4
 800a05e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a062:	e0ce      	b.n	800a202 <UART_SetConfig+0x41e>
 800a064:	2308      	movs	r3, #8
 800a066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a06a:	e0ca      	b.n	800a202 <UART_SetConfig+0x41e>
 800a06c:	2310      	movs	r3, #16
 800a06e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a072:	e0c6      	b.n	800a202 <UART_SetConfig+0x41e>
 800a074:	00989680 	.word	0x00989680
 800a078:	0800c35c 	.word	0x0800c35c
 800a07c:	40008000 	.word	0x40008000
 800a080:	efff69f3 	.word	0xefff69f3
 800a084:	40013800 	.word	0x40013800
 800a088:	40021000 	.word	0x40021000
 800a08c:	40004400 	.word	0x40004400
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4aae      	ldr	r2, [pc, #696]	@ (800a350 <UART_SetConfig+0x56c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d125      	bne.n	800a0e6 <UART_SetConfig+0x302>
 800a09a:	4bae      	ldr	r3, [pc, #696]	@ (800a354 <UART_SetConfig+0x570>)
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0a4:	2b30      	cmp	r3, #48	@ 0x30
 800a0a6:	d016      	beq.n	800a0d6 <UART_SetConfig+0x2f2>
 800a0a8:	2b30      	cmp	r3, #48	@ 0x30
 800a0aa:	d818      	bhi.n	800a0de <UART_SetConfig+0x2fa>
 800a0ac:	2b20      	cmp	r3, #32
 800a0ae:	d00a      	beq.n	800a0c6 <UART_SetConfig+0x2e2>
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d814      	bhi.n	800a0de <UART_SetConfig+0x2fa>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <UART_SetConfig+0x2da>
 800a0b8:	2b10      	cmp	r3, #16
 800a0ba:	d008      	beq.n	800a0ce <UART_SetConfig+0x2ea>
 800a0bc:	e00f      	b.n	800a0de <UART_SetConfig+0x2fa>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0c4:	e09d      	b.n	800a202 <UART_SetConfig+0x41e>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0cc:	e099      	b.n	800a202 <UART_SetConfig+0x41e>
 800a0ce:	2304      	movs	r3, #4
 800a0d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0d4:	e095      	b.n	800a202 <UART_SetConfig+0x41e>
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0dc:	e091      	b.n	800a202 <UART_SetConfig+0x41e>
 800a0de:	2310      	movs	r3, #16
 800a0e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0e4:	e08d      	b.n	800a202 <UART_SetConfig+0x41e>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a9b      	ldr	r2, [pc, #620]	@ (800a358 <UART_SetConfig+0x574>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d125      	bne.n	800a13c <UART_SetConfig+0x358>
 800a0f0:	4b98      	ldr	r3, [pc, #608]	@ (800a354 <UART_SetConfig+0x570>)
 800a0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a0fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0fc:	d016      	beq.n	800a12c <UART_SetConfig+0x348>
 800a0fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800a100:	d818      	bhi.n	800a134 <UART_SetConfig+0x350>
 800a102:	2b80      	cmp	r3, #128	@ 0x80
 800a104:	d00a      	beq.n	800a11c <UART_SetConfig+0x338>
 800a106:	2b80      	cmp	r3, #128	@ 0x80
 800a108:	d814      	bhi.n	800a134 <UART_SetConfig+0x350>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <UART_SetConfig+0x330>
 800a10e:	2b40      	cmp	r3, #64	@ 0x40
 800a110:	d008      	beq.n	800a124 <UART_SetConfig+0x340>
 800a112:	e00f      	b.n	800a134 <UART_SetConfig+0x350>
 800a114:	2300      	movs	r3, #0
 800a116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a11a:	e072      	b.n	800a202 <UART_SetConfig+0x41e>
 800a11c:	2302      	movs	r3, #2
 800a11e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a122:	e06e      	b.n	800a202 <UART_SetConfig+0x41e>
 800a124:	2304      	movs	r3, #4
 800a126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a12a:	e06a      	b.n	800a202 <UART_SetConfig+0x41e>
 800a12c:	2308      	movs	r3, #8
 800a12e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a132:	e066      	b.n	800a202 <UART_SetConfig+0x41e>
 800a134:	2310      	movs	r3, #16
 800a136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a13a:	e062      	b.n	800a202 <UART_SetConfig+0x41e>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a86      	ldr	r2, [pc, #536]	@ (800a35c <UART_SetConfig+0x578>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d12a      	bne.n	800a19c <UART_SetConfig+0x3b8>
 800a146:	4b83      	ldr	r3, [pc, #524]	@ (800a354 <UART_SetConfig+0x570>)
 800a148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a14c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a150:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a154:	d01a      	beq.n	800a18c <UART_SetConfig+0x3a8>
 800a156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a15a:	d81b      	bhi.n	800a194 <UART_SetConfig+0x3b0>
 800a15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a160:	d00c      	beq.n	800a17c <UART_SetConfig+0x398>
 800a162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a166:	d815      	bhi.n	800a194 <UART_SetConfig+0x3b0>
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <UART_SetConfig+0x390>
 800a16c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a170:	d008      	beq.n	800a184 <UART_SetConfig+0x3a0>
 800a172:	e00f      	b.n	800a194 <UART_SetConfig+0x3b0>
 800a174:	2300      	movs	r3, #0
 800a176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a17a:	e042      	b.n	800a202 <UART_SetConfig+0x41e>
 800a17c:	2302      	movs	r3, #2
 800a17e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a182:	e03e      	b.n	800a202 <UART_SetConfig+0x41e>
 800a184:	2304      	movs	r3, #4
 800a186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a18a:	e03a      	b.n	800a202 <UART_SetConfig+0x41e>
 800a18c:	2308      	movs	r3, #8
 800a18e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a192:	e036      	b.n	800a202 <UART_SetConfig+0x41e>
 800a194:	2310      	movs	r3, #16
 800a196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a19a:	e032      	b.n	800a202 <UART_SetConfig+0x41e>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a6f      	ldr	r2, [pc, #444]	@ (800a360 <UART_SetConfig+0x57c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d12a      	bne.n	800a1fc <UART_SetConfig+0x418>
 800a1a6:	4b6b      	ldr	r3, [pc, #428]	@ (800a354 <UART_SetConfig+0x570>)
 800a1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1b4:	d01a      	beq.n	800a1ec <UART_SetConfig+0x408>
 800a1b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1ba:	d81b      	bhi.n	800a1f4 <UART_SetConfig+0x410>
 800a1bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1c0:	d00c      	beq.n	800a1dc <UART_SetConfig+0x3f8>
 800a1c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1c6:	d815      	bhi.n	800a1f4 <UART_SetConfig+0x410>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <UART_SetConfig+0x3f0>
 800a1cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1d0:	d008      	beq.n	800a1e4 <UART_SetConfig+0x400>
 800a1d2:	e00f      	b.n	800a1f4 <UART_SetConfig+0x410>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1da:	e012      	b.n	800a202 <UART_SetConfig+0x41e>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1e2:	e00e      	b.n	800a202 <UART_SetConfig+0x41e>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1ea:	e00a      	b.n	800a202 <UART_SetConfig+0x41e>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1f2:	e006      	b.n	800a202 <UART_SetConfig+0x41e>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1fa:	e002      	b.n	800a202 <UART_SetConfig+0x41e>
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a56      	ldr	r2, [pc, #344]	@ (800a360 <UART_SetConfig+0x57c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d17a      	bne.n	800a302 <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a20c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a210:	2b08      	cmp	r3, #8
 800a212:	d824      	bhi.n	800a25e <UART_SetConfig+0x47a>
 800a214:	a201      	add	r2, pc, #4	@ (adr r2, 800a21c <UART_SetConfig+0x438>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a25f 	.word	0x0800a25f
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a25f 	.word	0x0800a25f
 800a22c:	0800a24f 	.word	0x0800a24f
 800a230:	0800a25f 	.word	0x0800a25f
 800a234:	0800a25f 	.word	0x0800a25f
 800a238:	0800a25f 	.word	0x0800a25f
 800a23c:	0800a257 	.word	0x0800a257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a240:	f7fa ff5e 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 800a244:	61f8      	str	r0, [r7, #28]
        break;
 800a246:	e010      	b.n	800a26a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a248:	4b46      	ldr	r3, [pc, #280]	@ (800a364 <UART_SetConfig+0x580>)
 800a24a:	61fb      	str	r3, [r7, #28]
        break;
 800a24c:	e00d      	b.n	800a26a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a24e:	f7fa febf 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 800a252:	61f8      	str	r0, [r7, #28]
        break;
 800a254:	e009      	b.n	800a26a <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a25a:	61fb      	str	r3, [r7, #28]
        break;
 800a25c:	e005      	b.n	800a26a <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8107 	beq.w	800a480 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	4413      	add	r3, r2
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d305      	bcc.n	800a28e <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a288:	69fa      	ldr	r2, [r7, #28]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d903      	bls.n	800a296 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a294:	e0f4      	b.n	800a480 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	2200      	movs	r2, #0
 800a29a:	461c      	mov	r4, r3
 800a29c:	4615      	mov	r5, r2
 800a29e:	f04f 0200 	mov.w	r2, #0
 800a2a2:	f04f 0300 	mov.w	r3, #0
 800a2a6:	022b      	lsls	r3, r5, #8
 800a2a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a2ac:	0222      	lsls	r2, r4, #8
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	6849      	ldr	r1, [r1, #4]
 800a2b2:	0849      	lsrs	r1, r1, #1
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	4688      	mov	r8, r1
 800a2b8:	4681      	mov	r9, r0
 800a2ba:	eb12 0a08 	adds.w	sl, r2, r8
 800a2be:	eb43 0b09 	adc.w	fp, r3, r9
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	4659      	mov	r1, fp
 800a2d4:	f7f5 ffcc 	bl	8000270 <__aeabi_uldivmod>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4613      	mov	r3, r2
 800a2de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2e6:	d308      	bcc.n	800a2fa <UART_SetConfig+0x516>
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ee:	d204      	bcs.n	800a2fa <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	60da      	str	r2, [r3, #12]
 800a2f8:	e0c2      	b.n	800a480 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a300:	e0be      	b.n	800a480 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a30a:	d16a      	bne.n	800a3e2 <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800a30c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a310:	2b08      	cmp	r3, #8
 800a312:	d834      	bhi.n	800a37e <UART_SetConfig+0x59a>
 800a314:	a201      	add	r2, pc, #4	@ (adr r2, 800a31c <UART_SetConfig+0x538>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a349 	.word	0x0800a349
 800a324:	0800a369 	.word	0x0800a369
 800a328:	0800a37f 	.word	0x0800a37f
 800a32c:	0800a36f 	.word	0x0800a36f
 800a330:	0800a37f 	.word	0x0800a37f
 800a334:	0800a37f 	.word	0x0800a37f
 800a338:	0800a37f 	.word	0x0800a37f
 800a33c:	0800a377 	.word	0x0800a377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a340:	f7fa fede 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 800a344:	61f8      	str	r0, [r7, #28]
        break;
 800a346:	e020      	b.n	800a38a <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a348:	f7fa fef0 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 800a34c:	61f8      	str	r0, [r7, #28]
        break;
 800a34e:	e01c      	b.n	800a38a <UART_SetConfig+0x5a6>
 800a350:	40004800 	.word	0x40004800
 800a354:	40021000 	.word	0x40021000
 800a358:	40004c00 	.word	0x40004c00
 800a35c:	40005000 	.word	0x40005000
 800a360:	40008000 	.word	0x40008000
 800a364:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a368:	4b4c      	ldr	r3, [pc, #304]	@ (800a49c <UART_SetConfig+0x6b8>)
 800a36a:	61fb      	str	r3, [r7, #28]
        break;
 800a36c:	e00d      	b.n	800a38a <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a36e:	f7fa fe2f 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 800a372:	61f8      	str	r0, [r7, #28]
        break;
 800a374:	e009      	b.n	800a38a <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a37a:	61fb      	str	r3, [r7, #28]
        break;
 800a37c:	e005      	b.n	800a38a <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d077      	beq.n	800a480 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	005a      	lsls	r2, r3, #1
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	085b      	lsrs	r3, r3, #1
 800a39a:	441a      	add	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b0f      	cmp	r3, #15
 800a3aa:	d916      	bls.n	800a3da <UART_SetConfig+0x5f6>
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3b2:	d212      	bcs.n	800a3da <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f023 030f 	bic.w	r3, r3, #15
 800a3bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	085b      	lsrs	r3, r3, #1
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	8afb      	ldrh	r3, [r7, #22]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	8afa      	ldrh	r2, [r7, #22]
 800a3d6:	60da      	str	r2, [r3, #12]
 800a3d8:	e052      	b.n	800a480 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a3e0:	e04e      	b.n	800a480 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d827      	bhi.n	800a43a <UART_SetConfig+0x656>
 800a3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f0 <UART_SetConfig+0x60c>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a41d 	.word	0x0800a41d
 800a3f8:	0800a425 	.word	0x0800a425
 800a3fc:	0800a43b 	.word	0x0800a43b
 800a400:	0800a42b 	.word	0x0800a42b
 800a404:	0800a43b 	.word	0x0800a43b
 800a408:	0800a43b 	.word	0x0800a43b
 800a40c:	0800a43b 	.word	0x0800a43b
 800a410:	0800a433 	.word	0x0800a433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a414:	f7fa fe74 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 800a418:	61f8      	str	r0, [r7, #28]
        break;
 800a41a:	e014      	b.n	800a446 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a41c:	f7fa fe86 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 800a420:	61f8      	str	r0, [r7, #28]
        break;
 800a422:	e010      	b.n	800a446 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a424:	4b1d      	ldr	r3, [pc, #116]	@ (800a49c <UART_SetConfig+0x6b8>)
 800a426:	61fb      	str	r3, [r7, #28]
        break;
 800a428:	e00d      	b.n	800a446 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a42a:	f7fa fdd1 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 800a42e:	61f8      	str	r0, [r7, #28]
        break;
 800a430:	e009      	b.n	800a446 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a436:	61fb      	str	r3, [r7, #28]
        break;
 800a438:	e005      	b.n	800a446 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a444:	bf00      	nop
    }

    if (pclk != 0U)
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d019      	beq.n	800a480 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	085a      	lsrs	r2, r3, #1
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	441a      	add	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d909      	bls.n	800a47a <UART_SetConfig+0x696>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a46c:	d205      	bcs.n	800a47a <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	b29a      	uxth	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60da      	str	r2, [r3, #12]
 800a478:	e002      	b.n	800a480 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a48c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a490:	4618      	mov	r0, r3
 800a492:	3728      	adds	r7, #40	@ 0x28
 800a494:	46bd      	mov	sp, r7
 800a496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a49a:	bf00      	nop
 800a49c:	00f42400 	.word	0x00f42400

0800a4a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ac:	2bff      	cmp	r3, #255	@ 0xff
 800a4ae:	d904      	bls.n	800a4ba <UART_AdvFeatureConfig+0x1a>
 800a4b0:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800a4b4:	4891      	ldr	r0, [pc, #580]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a4b6:	f7f7 ff1f 	bl	80022f8 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d018      	beq.n	800a4f8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <UART_AdvFeatureConfig+0x42>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4d6:	d004      	beq.n	800a4e2 <UART_AdvFeatureConfig+0x42>
 800a4d8:	f640 5152 	movw	r1, #3410	@ 0xd52
 800a4dc:	4887      	ldr	r0, [pc, #540]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a4de:	f7f7 ff0b 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d018      	beq.n	800a536 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d009      	beq.n	800a520 <UART_AdvFeatureConfig+0x80>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a514:	d004      	beq.n	800a520 <UART_AdvFeatureConfig+0x80>
 800a516:	f640 5159 	movw	r1, #3417	@ 0xd59
 800a51a:	4878      	ldr	r0, [pc, #480]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a51c:	f7f7 feec 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d018      	beq.n	800a574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <UART_AdvFeatureConfig+0xbe>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a552:	d004      	beq.n	800a55e <UART_AdvFeatureConfig+0xbe>
 800a554:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a558:	4868      	ldr	r0, [pc, #416]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a55a:	f7f7 fecd 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d018      	beq.n	800a5b2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a584:	2b00      	cmp	r3, #0
 800a586:	d009      	beq.n	800a59c <UART_AdvFeatureConfig+0xfc>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a590:	d004      	beq.n	800a59c <UART_AdvFeatureConfig+0xfc>
 800a592:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a596:	4859      	ldr	r0, [pc, #356]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a598:	f7f7 feae 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b6:	f003 0310 	and.w	r3, r3, #16
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d018      	beq.n	800a5f0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d009      	beq.n	800a5da <UART_AdvFeatureConfig+0x13a>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ce:	d004      	beq.n	800a5da <UART_AdvFeatureConfig+0x13a>
 800a5d0:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a5d4:	4849      	ldr	r0, [pc, #292]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a5d6:	f7f7 fe8f 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d018      	beq.n	800a62e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a600:	2b00      	cmp	r3, #0
 800a602:	d009      	beq.n	800a618 <UART_AdvFeatureConfig+0x178>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a60c:	d004      	beq.n	800a618 <UART_AdvFeatureConfig+0x178>
 800a60e:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a612:	483a      	ldr	r0, [pc, #232]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a614:	f7f7 fe70 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d06c      	beq.n	800a714 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a30      	ldr	r2, [pc, #192]	@ (800a700 <UART_AdvFeatureConfig+0x260>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d018      	beq.n	800a676 <UART_AdvFeatureConfig+0x1d6>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a2e      	ldr	r2, [pc, #184]	@ (800a704 <UART_AdvFeatureConfig+0x264>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d013      	beq.n	800a676 <UART_AdvFeatureConfig+0x1d6>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a2d      	ldr	r2, [pc, #180]	@ (800a708 <UART_AdvFeatureConfig+0x268>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d00e      	beq.n	800a676 <UART_AdvFeatureConfig+0x1d6>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a2b      	ldr	r2, [pc, #172]	@ (800a70c <UART_AdvFeatureConfig+0x26c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d009      	beq.n	800a676 <UART_AdvFeatureConfig+0x1d6>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a2a      	ldr	r2, [pc, #168]	@ (800a710 <UART_AdvFeatureConfig+0x270>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d004      	beq.n	800a676 <UART_AdvFeatureConfig+0x1d6>
 800a66c:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a670:	4822      	ldr	r0, [pc, #136]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a672:	f7f7 fe41 	bl	80022f8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d009      	beq.n	800a692 <UART_AdvFeatureConfig+0x1f2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a686:	d004      	beq.n	800a692 <UART_AdvFeatureConfig+0x1f2>
 800a688:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a68c:	481b      	ldr	r0, [pc, #108]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a68e:	f7f7 fe33 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6b0:	d130      	bne.n	800a714 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d013      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x242>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6c2:	d00e      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x242>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6cc:	d009      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x242>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6d6:	d004      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x242>
 800a6d8:	f640 5182 	movw	r1, #3458	@ 0xd82
 800a6dc:	4807      	ldr	r0, [pc, #28]	@ (800a6fc <UART_AdvFeatureConfig+0x25c>)
 800a6de:	f7f7 fe0b 	bl	80022f8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	605a      	str	r2, [r3, #4]
 800a6f8:	e00c      	b.n	800a714 <UART_AdvFeatureConfig+0x274>
 800a6fa:	bf00      	nop
 800a6fc:	0800c35c 	.word	0x0800c35c
 800a700:	40013800 	.word	0x40013800
 800a704:	40004400 	.word	0x40004400
 800a708:	40004800 	.word	0x40004800
 800a70c:	40004c00 	.word	0x40004c00
 800a710:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d018      	beq.n	800a752 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <UART_AdvFeatureConfig+0x29c>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a72c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a730:	d004      	beq.n	800a73c <UART_AdvFeatureConfig+0x29c>
 800a732:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800a736:	4809      	ldr	r0, [pc, #36]	@ (800a75c <UART_AdvFeatureConfig+0x2bc>)
 800a738:	f7f7 fdde 	bl	80022f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
  }
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	0800c35c 	.word	0x0800c35c

0800a760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b098      	sub	sp, #96	@ 0x60
 800a764:	af02      	add	r7, sp, #8
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a770:	f7f8 fc84 	bl	800307c <HAL_GetTick>
 800a774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b08      	cmp	r3, #8
 800a782:	d12e      	bne.n	800a7e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a78c:	2200      	movs	r2, #0
 800a78e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f88c 	bl	800a8b0 <UART_WaitOnFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d021      	beq.n	800a7e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	e853 3f00 	ldrex	r3, [r3]
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e6      	bne.n	800a79e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e062      	b.n	800a8a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d149      	bne.n	800a884 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f856 	bl	800a8b0 <UART_WaitOnFlagUntilTimeout>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d03c      	beq.n	800a884 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	e853 3f00 	ldrex	r3, [r3]
 800a816:	623b      	str	r3, [r7, #32]
   return(result);
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a81e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	461a      	mov	r2, r3
 800a826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a828:	633b      	str	r3, [r7, #48]	@ 0x30
 800a82a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a830:	e841 2300 	strex	r3, r2, [r1]
 800a834:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e6      	bne.n	800a80a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3308      	adds	r3, #8
 800a842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0301 	bic.w	r3, r3, #1
 800a852:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3308      	adds	r3, #8
 800a85a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a85c:	61fa      	str	r2, [r7, #28]
 800a85e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	69b9      	ldr	r1, [r7, #24]
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	617b      	str	r3, [r7, #20]
   return(result);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e5      	bne.n	800a83c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e011      	b.n	800a8a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2220      	movs	r2, #32
 800a88e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3758      	adds	r7, #88	@ 0x58
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c0:	e04f      	b.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c8:	d04b      	beq.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ca:	f7f8 fbd7 	bl	800307c <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	69ba      	ldr	r2, [r7, #24]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d302      	bcc.n	800a8e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e04e      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0304 	and.w	r3, r3, #4
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d037      	beq.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2b80      	cmp	r3, #128	@ 0x80
 800a8f6:	d034      	beq.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b40      	cmp	r3, #64	@ 0x40
 800a8fc:	d031      	beq.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d110      	bne.n	800a92e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2208      	movs	r2, #8
 800a912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f838 	bl	800a98a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2208      	movs	r2, #8
 800a91e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e029      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a93c:	d111      	bne.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 f81e 	bl	800a98a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e00f      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69da      	ldr	r2, [r3, #28]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	4013      	ands	r3, r2
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	429a      	cmp	r2, r3
 800a970:	bf0c      	ite	eq
 800a972:	2301      	moveq	r3, #1
 800a974:	2300      	movne	r3, #0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d0a0      	beq.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b095      	sub	sp, #84	@ 0x54
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e6      	bne.n	800a992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	e853 3f00 	ldrex	r3, [r3]
 800a9d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	f023 0301 	bic.w	r3, r3, #1
 800a9da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ec:	e841 2300 	strex	r3, r2, [r1]
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1e5      	bne.n	800a9c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d118      	bne.n	800aa32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f023 0310 	bic.w	r3, r3, #16
 800aa14:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa1e:	61bb      	str	r3, [r7, #24]
 800aa20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6979      	ldr	r1, [r7, #20]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e6      	bne.n	800aa00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800aa46:	bf00      	nop
 800aa48:	3754      	adds	r7, #84	@ 0x54
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
	...

0800aa54 <calloc>:
 800aa54:	4b02      	ldr	r3, [pc, #8]	@ (800aa60 <calloc+0xc>)
 800aa56:	460a      	mov	r2, r1
 800aa58:	4601      	mov	r1, r0
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	f000 b802 	b.w	800aa64 <_calloc_r>
 800aa60:	20000028 	.word	0x20000028

0800aa64 <_calloc_r>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	fba1 5402 	umull	r5, r4, r1, r2
 800aa6a:	b934      	cbnz	r4, 800aa7a <_calloc_r+0x16>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f000 f83f 	bl	800aaf0 <_malloc_r>
 800aa72:	4606      	mov	r6, r0
 800aa74:	b928      	cbnz	r0, 800aa82 <_calloc_r+0x1e>
 800aa76:	4630      	mov	r0, r6
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
 800aa7a:	220c      	movs	r2, #12
 800aa7c:	6002      	str	r2, [r0, #0]
 800aa7e:	2600      	movs	r6, #0
 800aa80:	e7f9      	b.n	800aa76 <_calloc_r+0x12>
 800aa82:	462a      	mov	r2, r5
 800aa84:	4621      	mov	r1, r4
 800aa86:	f000 fac7 	bl	800b018 <memset>
 800aa8a:	e7f4      	b.n	800aa76 <_calloc_r+0x12>

0800aa8c <malloc>:
 800aa8c:	4b02      	ldr	r3, [pc, #8]	@ (800aa98 <malloc+0xc>)
 800aa8e:	4601      	mov	r1, r0
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	f000 b82d 	b.w	800aaf0 <_malloc_r>
 800aa96:	bf00      	nop
 800aa98:	20000028 	.word	0x20000028

0800aa9c <free>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	@ (800aaa8 <free+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 bb53 	b.w	800b14c <_free_r>
 800aaa6:	bf00      	nop
 800aaa8:	20000028 	.word	0x20000028

0800aaac <sbrk_aligned>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4e0f      	ldr	r6, [pc, #60]	@ (800aaec <sbrk_aligned+0x40>)
 800aab0:	460c      	mov	r4, r1
 800aab2:	6831      	ldr	r1, [r6, #0]
 800aab4:	4605      	mov	r5, r0
 800aab6:	b911      	cbnz	r1, 800aabe <sbrk_aligned+0x12>
 800aab8:	f000 faea 	bl	800b090 <_sbrk_r>
 800aabc:	6030      	str	r0, [r6, #0]
 800aabe:	4621      	mov	r1, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f000 fae5 	bl	800b090 <_sbrk_r>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d103      	bne.n	800aad2 <sbrk_aligned+0x26>
 800aaca:	f04f 34ff 	mov.w	r4, #4294967295
 800aace:	4620      	mov	r0, r4
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	1cc4      	adds	r4, r0, #3
 800aad4:	f024 0403 	bic.w	r4, r4, #3
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d0f8      	beq.n	800aace <sbrk_aligned+0x22>
 800aadc:	1a21      	subs	r1, r4, r0
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 fad6 	bl	800b090 <_sbrk_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d1f2      	bne.n	800aace <sbrk_aligned+0x22>
 800aae8:	e7ef      	b.n	800aaca <sbrk_aligned+0x1e>
 800aaea:	bf00      	nop
 800aaec:	20000c10 	.word	0x20000c10

0800aaf0 <_malloc_r>:
 800aaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	1ccd      	adds	r5, r1, #3
 800aaf6:	f025 0503 	bic.w	r5, r5, #3
 800aafa:	3508      	adds	r5, #8
 800aafc:	2d0c      	cmp	r5, #12
 800aafe:	bf38      	it	cc
 800ab00:	250c      	movcc	r5, #12
 800ab02:	2d00      	cmp	r5, #0
 800ab04:	4606      	mov	r6, r0
 800ab06:	db01      	blt.n	800ab0c <_malloc_r+0x1c>
 800ab08:	42a9      	cmp	r1, r5
 800ab0a:	d904      	bls.n	800ab16 <_malloc_r+0x26>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	6033      	str	r3, [r6, #0]
 800ab10:	2000      	movs	r0, #0
 800ab12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abec <_malloc_r+0xfc>
 800ab1a:	f000 f869 	bl	800abf0 <__malloc_lock>
 800ab1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab22:	461c      	mov	r4, r3
 800ab24:	bb44      	cbnz	r4, 800ab78 <_malloc_r+0x88>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff ffbf 	bl	800aaac <sbrk_aligned>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	4604      	mov	r4, r0
 800ab32:	d158      	bne.n	800abe6 <_malloc_r+0xf6>
 800ab34:	f8d8 4000 	ldr.w	r4, [r8]
 800ab38:	4627      	mov	r7, r4
 800ab3a:	2f00      	cmp	r7, #0
 800ab3c:	d143      	bne.n	800abc6 <_malloc_r+0xd6>
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d04b      	beq.n	800abda <_malloc_r+0xea>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	4639      	mov	r1, r7
 800ab46:	4630      	mov	r0, r6
 800ab48:	eb04 0903 	add.w	r9, r4, r3
 800ab4c:	f000 faa0 	bl	800b090 <_sbrk_r>
 800ab50:	4581      	cmp	r9, r0
 800ab52:	d142      	bne.n	800abda <_malloc_r+0xea>
 800ab54:	6821      	ldr	r1, [r4, #0]
 800ab56:	1a6d      	subs	r5, r5, r1
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ffa6 	bl	800aaac <sbrk_aligned>
 800ab60:	3001      	adds	r0, #1
 800ab62:	d03a      	beq.n	800abda <_malloc_r+0xea>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	442b      	add	r3, r5
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	bb62      	cbnz	r2, 800abcc <_malloc_r+0xdc>
 800ab72:	f8c8 7000 	str.w	r7, [r8]
 800ab76:	e00f      	b.n	800ab98 <_malloc_r+0xa8>
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	1b52      	subs	r2, r2, r5
 800ab7c:	d420      	bmi.n	800abc0 <_malloc_r+0xd0>
 800ab7e:	2a0b      	cmp	r2, #11
 800ab80:	d917      	bls.n	800abb2 <_malloc_r+0xc2>
 800ab82:	1961      	adds	r1, r4, r5
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	6025      	str	r5, [r4, #0]
 800ab88:	bf18      	it	ne
 800ab8a:	6059      	strne	r1, [r3, #4]
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	bf08      	it	eq
 800ab90:	f8c8 1000 	streq.w	r1, [r8]
 800ab94:	5162      	str	r2, [r4, r5]
 800ab96:	604b      	str	r3, [r1, #4]
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 f82f 	bl	800abfc <__malloc_unlock>
 800ab9e:	f104 000b 	add.w	r0, r4, #11
 800aba2:	1d23      	adds	r3, r4, #4
 800aba4:	f020 0007 	bic.w	r0, r0, #7
 800aba8:	1ac2      	subs	r2, r0, r3
 800abaa:	bf1c      	itt	ne
 800abac:	1a1b      	subne	r3, r3, r0
 800abae:	50a3      	strne	r3, [r4, r2]
 800abb0:	e7af      	b.n	800ab12 <_malloc_r+0x22>
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	bf0c      	ite	eq
 800abb8:	f8c8 2000 	streq.w	r2, [r8]
 800abbc:	605a      	strne	r2, [r3, #4]
 800abbe:	e7eb      	b.n	800ab98 <_malloc_r+0xa8>
 800abc0:	4623      	mov	r3, r4
 800abc2:	6864      	ldr	r4, [r4, #4]
 800abc4:	e7ae      	b.n	800ab24 <_malloc_r+0x34>
 800abc6:	463c      	mov	r4, r7
 800abc8:	687f      	ldr	r7, [r7, #4]
 800abca:	e7b6      	b.n	800ab3a <_malloc_r+0x4a>
 800abcc:	461a      	mov	r2, r3
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d1fb      	bne.n	800abcc <_malloc_r+0xdc>
 800abd4:	2300      	movs	r3, #0
 800abd6:	6053      	str	r3, [r2, #4]
 800abd8:	e7de      	b.n	800ab98 <_malloc_r+0xa8>
 800abda:	230c      	movs	r3, #12
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f80c 	bl	800abfc <__malloc_unlock>
 800abe4:	e794      	b.n	800ab10 <_malloc_r+0x20>
 800abe6:	6005      	str	r5, [r0, #0]
 800abe8:	e7d6      	b.n	800ab98 <_malloc_r+0xa8>
 800abea:	bf00      	nop
 800abec:	20000c14 	.word	0x20000c14

0800abf0 <__malloc_lock>:
 800abf0:	4801      	ldr	r0, [pc, #4]	@ (800abf8 <__malloc_lock+0x8>)
 800abf2:	f000 ba9a 	b.w	800b12a <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	20000d58 	.word	0x20000d58

0800abfc <__malloc_unlock>:
 800abfc:	4801      	ldr	r0, [pc, #4]	@ (800ac04 <__malloc_unlock+0x8>)
 800abfe:	f000 ba95 	b.w	800b12c <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	20000d58 	.word	0x20000d58

0800ac08 <std>:
 800ac08:	2300      	movs	r3, #0
 800ac0a:	b510      	push	{r4, lr}
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac16:	6083      	str	r3, [r0, #8]
 800ac18:	8181      	strh	r1, [r0, #12]
 800ac1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac1c:	81c2      	strh	r2, [r0, #14]
 800ac1e:	6183      	str	r3, [r0, #24]
 800ac20:	4619      	mov	r1, r3
 800ac22:	2208      	movs	r2, #8
 800ac24:	305c      	adds	r0, #92	@ 0x5c
 800ac26:	f000 f9f7 	bl	800b018 <memset>
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac60 <std+0x58>)
 800ac2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <std+0x5c>)
 800ac30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac32:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <std+0x60>)
 800ac34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac36:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <std+0x64>)
 800ac38:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac70 <std+0x68>)
 800ac3c:	6224      	str	r4, [r4, #32]
 800ac3e:	429c      	cmp	r4, r3
 800ac40:	d006      	beq.n	800ac50 <std+0x48>
 800ac42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac46:	4294      	cmp	r4, r2
 800ac48:	d002      	beq.n	800ac50 <std+0x48>
 800ac4a:	33d0      	adds	r3, #208	@ 0xd0
 800ac4c:	429c      	cmp	r4, r3
 800ac4e:	d105      	bne.n	800ac5c <std+0x54>
 800ac50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac58:	f000 ba66 	b.w	800b128 <__retarget_lock_init_recursive>
 800ac5c:	bd10      	pop	{r4, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800af19 	.word	0x0800af19
 800ac64:	0800af3b 	.word	0x0800af3b
 800ac68:	0800af73 	.word	0x0800af73
 800ac6c:	0800af97 	.word	0x0800af97
 800ac70:	20000c18 	.word	0x20000c18

0800ac74 <stdio_exit_handler>:
 800ac74:	4a02      	ldr	r2, [pc, #8]	@ (800ac80 <stdio_exit_handler+0xc>)
 800ac76:	4903      	ldr	r1, [pc, #12]	@ (800ac84 <stdio_exit_handler+0x10>)
 800ac78:	4803      	ldr	r0, [pc, #12]	@ (800ac88 <stdio_exit_handler+0x14>)
 800ac7a:	f000 b869 	b.w	800ad50 <_fwalk_sglue>
 800ac7e:	bf00      	nop
 800ac80:	2000001c 	.word	0x2000001c
 800ac84:	0800bb35 	.word	0x0800bb35
 800ac88:	2000002c 	.word	0x2000002c

0800ac8c <cleanup_stdio>:
 800ac8c:	6841      	ldr	r1, [r0, #4]
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <cleanup_stdio+0x34>)
 800ac90:	4299      	cmp	r1, r3
 800ac92:	b510      	push	{r4, lr}
 800ac94:	4604      	mov	r4, r0
 800ac96:	d001      	beq.n	800ac9c <cleanup_stdio+0x10>
 800ac98:	f000 ff4c 	bl	800bb34 <_fflush_r>
 800ac9c:	68a1      	ldr	r1, [r4, #8]
 800ac9e:	4b09      	ldr	r3, [pc, #36]	@ (800acc4 <cleanup_stdio+0x38>)
 800aca0:	4299      	cmp	r1, r3
 800aca2:	d002      	beq.n	800acaa <cleanup_stdio+0x1e>
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 ff45 	bl	800bb34 <_fflush_r>
 800acaa:	68e1      	ldr	r1, [r4, #12]
 800acac:	4b06      	ldr	r3, [pc, #24]	@ (800acc8 <cleanup_stdio+0x3c>)
 800acae:	4299      	cmp	r1, r3
 800acb0:	d004      	beq.n	800acbc <cleanup_stdio+0x30>
 800acb2:	4620      	mov	r0, r4
 800acb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb8:	f000 bf3c 	b.w	800bb34 <_fflush_r>
 800acbc:	bd10      	pop	{r4, pc}
 800acbe:	bf00      	nop
 800acc0:	20000c18 	.word	0x20000c18
 800acc4:	20000c80 	.word	0x20000c80
 800acc8:	20000ce8 	.word	0x20000ce8

0800accc <global_stdio_init.part.0>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4b0b      	ldr	r3, [pc, #44]	@ (800acfc <global_stdio_init.part.0+0x30>)
 800acd0:	4c0b      	ldr	r4, [pc, #44]	@ (800ad00 <global_stdio_init.part.0+0x34>)
 800acd2:	4a0c      	ldr	r2, [pc, #48]	@ (800ad04 <global_stdio_init.part.0+0x38>)
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	4620      	mov	r0, r4
 800acd8:	2200      	movs	r2, #0
 800acda:	2104      	movs	r1, #4
 800acdc:	f7ff ff94 	bl	800ac08 <std>
 800ace0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ace4:	2201      	movs	r2, #1
 800ace6:	2109      	movs	r1, #9
 800ace8:	f7ff ff8e 	bl	800ac08 <std>
 800acec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acf0:	2202      	movs	r2, #2
 800acf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf6:	2112      	movs	r1, #18
 800acf8:	f7ff bf86 	b.w	800ac08 <std>
 800acfc:	20000d50 	.word	0x20000d50
 800ad00:	20000c18 	.word	0x20000c18
 800ad04:	0800ac75 	.word	0x0800ac75

0800ad08 <__sfp_lock_acquire>:
 800ad08:	4801      	ldr	r0, [pc, #4]	@ (800ad10 <__sfp_lock_acquire+0x8>)
 800ad0a:	f000 ba0e 	b.w	800b12a <__retarget_lock_acquire_recursive>
 800ad0e:	bf00      	nop
 800ad10:	20000d59 	.word	0x20000d59

0800ad14 <__sfp_lock_release>:
 800ad14:	4801      	ldr	r0, [pc, #4]	@ (800ad1c <__sfp_lock_release+0x8>)
 800ad16:	f000 ba09 	b.w	800b12c <__retarget_lock_release_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20000d59 	.word	0x20000d59

0800ad20 <__sinit>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	4604      	mov	r4, r0
 800ad24:	f7ff fff0 	bl	800ad08 <__sfp_lock_acquire>
 800ad28:	6a23      	ldr	r3, [r4, #32]
 800ad2a:	b11b      	cbz	r3, 800ad34 <__sinit+0x14>
 800ad2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad30:	f7ff bff0 	b.w	800ad14 <__sfp_lock_release>
 800ad34:	4b04      	ldr	r3, [pc, #16]	@ (800ad48 <__sinit+0x28>)
 800ad36:	6223      	str	r3, [r4, #32]
 800ad38:	4b04      	ldr	r3, [pc, #16]	@ (800ad4c <__sinit+0x2c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1f5      	bne.n	800ad2c <__sinit+0xc>
 800ad40:	f7ff ffc4 	bl	800accc <global_stdio_init.part.0>
 800ad44:	e7f2      	b.n	800ad2c <__sinit+0xc>
 800ad46:	bf00      	nop
 800ad48:	0800ac8d 	.word	0x0800ac8d
 800ad4c:	20000d50 	.word	0x20000d50

0800ad50 <_fwalk_sglue>:
 800ad50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad54:	4607      	mov	r7, r0
 800ad56:	4688      	mov	r8, r1
 800ad58:	4614      	mov	r4, r2
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad60:	f1b9 0901 	subs.w	r9, r9, #1
 800ad64:	d505      	bpl.n	800ad72 <_fwalk_sglue+0x22>
 800ad66:	6824      	ldr	r4, [r4, #0]
 800ad68:	2c00      	cmp	r4, #0
 800ad6a:	d1f7      	bne.n	800ad5c <_fwalk_sglue+0xc>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d907      	bls.n	800ad88 <_fwalk_sglue+0x38>
 800ad78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	d003      	beq.n	800ad88 <_fwalk_sglue+0x38>
 800ad80:	4629      	mov	r1, r5
 800ad82:	4638      	mov	r0, r7
 800ad84:	47c0      	blx	r8
 800ad86:	4306      	orrs	r6, r0
 800ad88:	3568      	adds	r5, #104	@ 0x68
 800ad8a:	e7e9      	b.n	800ad60 <_fwalk_sglue+0x10>

0800ad8c <iprintf>:
 800ad8c:	b40f      	push	{r0, r1, r2, r3}
 800ad8e:	b507      	push	{r0, r1, r2, lr}
 800ad90:	4906      	ldr	r1, [pc, #24]	@ (800adac <iprintf+0x20>)
 800ad92:	ab04      	add	r3, sp, #16
 800ad94:	6808      	ldr	r0, [r1, #0]
 800ad96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9a:	6881      	ldr	r1, [r0, #8]
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f000 fba1 	bl	800b4e4 <_vfiprintf_r>
 800ada2:	b003      	add	sp, #12
 800ada4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada8:	b004      	add	sp, #16
 800adaa:	4770      	bx	lr
 800adac:	20000028 	.word	0x20000028

0800adb0 <setvbuf>:
 800adb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	461d      	mov	r5, r3
 800adb6:	4b57      	ldr	r3, [pc, #348]	@ (800af14 <setvbuf+0x164>)
 800adb8:	681f      	ldr	r7, [r3, #0]
 800adba:	4604      	mov	r4, r0
 800adbc:	460e      	mov	r6, r1
 800adbe:	4690      	mov	r8, r2
 800adc0:	b127      	cbz	r7, 800adcc <setvbuf+0x1c>
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	b913      	cbnz	r3, 800adcc <setvbuf+0x1c>
 800adc6:	4638      	mov	r0, r7
 800adc8:	f7ff ffaa 	bl	800ad20 <__sinit>
 800adcc:	f1b8 0f02 	cmp.w	r8, #2
 800add0:	d006      	beq.n	800ade0 <setvbuf+0x30>
 800add2:	f1b8 0f01 	cmp.w	r8, #1
 800add6:	f200 809a 	bhi.w	800af0e <setvbuf+0x15e>
 800adda:	2d00      	cmp	r5, #0
 800addc:	f2c0 8097 	blt.w	800af0e <setvbuf+0x15e>
 800ade0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ade2:	07d9      	lsls	r1, r3, #31
 800ade4:	d405      	bmi.n	800adf2 <setvbuf+0x42>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	059a      	lsls	r2, r3, #22
 800adea:	d402      	bmi.n	800adf2 <setvbuf+0x42>
 800adec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adee:	f000 f99c 	bl	800b12a <__retarget_lock_acquire_recursive>
 800adf2:	4621      	mov	r1, r4
 800adf4:	4638      	mov	r0, r7
 800adf6:	f000 fe9d 	bl	800bb34 <_fflush_r>
 800adfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adfc:	b141      	cbz	r1, 800ae10 <setvbuf+0x60>
 800adfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae02:	4299      	cmp	r1, r3
 800ae04:	d002      	beq.n	800ae0c <setvbuf+0x5c>
 800ae06:	4638      	mov	r0, r7
 800ae08:	f000 f9a0 	bl	800b14c <_free_r>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae10:	2300      	movs	r3, #0
 800ae12:	61a3      	str	r3, [r4, #24]
 800ae14:	6063      	str	r3, [r4, #4]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	061b      	lsls	r3, r3, #24
 800ae1a:	d503      	bpl.n	800ae24 <setvbuf+0x74>
 800ae1c:	6921      	ldr	r1, [r4, #16]
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f000 f994 	bl	800b14c <_free_r>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ae2a:	f023 0303 	bic.w	r3, r3, #3
 800ae2e:	f1b8 0f02 	cmp.w	r8, #2
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	d061      	beq.n	800aefa <setvbuf+0x14a>
 800ae36:	ab01      	add	r3, sp, #4
 800ae38:	466a      	mov	r2, sp
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f000 fea1 	bl	800bb84 <__swhatbuf_r>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	4318      	orrs	r0, r3
 800ae46:	81a0      	strh	r0, [r4, #12]
 800ae48:	bb2d      	cbnz	r5, 800ae96 <setvbuf+0xe6>
 800ae4a:	9d00      	ldr	r5, [sp, #0]
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7ff fe1d 	bl	800aa8c <malloc>
 800ae52:	4606      	mov	r6, r0
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d152      	bne.n	800aefe <setvbuf+0x14e>
 800ae58:	f8dd 9000 	ldr.w	r9, [sp]
 800ae5c:	45a9      	cmp	r9, r5
 800ae5e:	d140      	bne.n	800aee2 <setvbuf+0x132>
 800ae60:	f04f 35ff 	mov.w	r5, #4294967295
 800ae64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae68:	f043 0202 	orr.w	r2, r3, #2
 800ae6c:	81a2      	strh	r2, [r4, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	60a2      	str	r2, [r4, #8]
 800ae72:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800ae76:	6022      	str	r2, [r4, #0]
 800ae78:	6122      	str	r2, [r4, #16]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	6162      	str	r2, [r4, #20]
 800ae7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae80:	07d6      	lsls	r6, r2, #31
 800ae82:	d404      	bmi.n	800ae8e <setvbuf+0xde>
 800ae84:	0598      	lsls	r0, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <setvbuf+0xde>
 800ae88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae8a:	f000 f94f 	bl	800b12c <__retarget_lock_release_recursive>
 800ae8e:	4628      	mov	r0, r5
 800ae90:	b003      	add	sp, #12
 800ae92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	d0d8      	beq.n	800ae4c <setvbuf+0x9c>
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	b913      	cbnz	r3, 800aea4 <setvbuf+0xf4>
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f7ff ff3e 	bl	800ad20 <__sinit>
 800aea4:	f1b8 0f01 	cmp.w	r8, #1
 800aea8:	bf08      	it	eq
 800aeaa:	89a3      	ldrheq	r3, [r4, #12]
 800aeac:	6026      	str	r6, [r4, #0]
 800aeae:	bf04      	itt	eq
 800aeb0:	f043 0301 	orreq.w	r3, r3, #1
 800aeb4:	81a3      	strheq	r3, [r4, #12]
 800aeb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeba:	f013 0208 	ands.w	r2, r3, #8
 800aebe:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800aec2:	d01e      	beq.n	800af02 <setvbuf+0x152>
 800aec4:	07d9      	lsls	r1, r3, #31
 800aec6:	bf41      	itttt	mi
 800aec8:	2200      	movmi	r2, #0
 800aeca:	426d      	negmi	r5, r5
 800aecc:	60a2      	strmi	r2, [r4, #8]
 800aece:	61a5      	strmi	r5, [r4, #24]
 800aed0:	bf58      	it	pl
 800aed2:	60a5      	strpl	r5, [r4, #8]
 800aed4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aed6:	07d2      	lsls	r2, r2, #31
 800aed8:	d401      	bmi.n	800aede <setvbuf+0x12e>
 800aeda:	059b      	lsls	r3, r3, #22
 800aedc:	d513      	bpl.n	800af06 <setvbuf+0x156>
 800aede:	2500      	movs	r5, #0
 800aee0:	e7d5      	b.n	800ae8e <setvbuf+0xde>
 800aee2:	4648      	mov	r0, r9
 800aee4:	f7ff fdd2 	bl	800aa8c <malloc>
 800aee8:	4606      	mov	r6, r0
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d0b8      	beq.n	800ae60 <setvbuf+0xb0>
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	464d      	mov	r5, r9
 800aef8:	e7cf      	b.n	800ae9a <setvbuf+0xea>
 800aefa:	2500      	movs	r5, #0
 800aefc:	e7b2      	b.n	800ae64 <setvbuf+0xb4>
 800aefe:	46a9      	mov	r9, r5
 800af00:	e7f5      	b.n	800aeee <setvbuf+0x13e>
 800af02:	60a2      	str	r2, [r4, #8]
 800af04:	e7e6      	b.n	800aed4 <setvbuf+0x124>
 800af06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af08:	f000 f910 	bl	800b12c <__retarget_lock_release_recursive>
 800af0c:	e7e7      	b.n	800aede <setvbuf+0x12e>
 800af0e:	f04f 35ff 	mov.w	r5, #4294967295
 800af12:	e7bc      	b.n	800ae8e <setvbuf+0xde>
 800af14:	20000028 	.word	0x20000028

0800af18 <__sread>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	460c      	mov	r4, r1
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	f000 f8a4 	bl	800b06c <_read_r>
 800af24:	2800      	cmp	r0, #0
 800af26:	bfab      	itete	ge
 800af28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af2a:	89a3      	ldrhlt	r3, [r4, #12]
 800af2c:	181b      	addge	r3, r3, r0
 800af2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af32:	bfac      	ite	ge
 800af34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af36:	81a3      	strhlt	r3, [r4, #12]
 800af38:	bd10      	pop	{r4, pc}

0800af3a <__swrite>:
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	461f      	mov	r7, r3
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	05db      	lsls	r3, r3, #23
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	4616      	mov	r6, r2
 800af4a:	d505      	bpl.n	800af58 <__swrite+0x1e>
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	2302      	movs	r3, #2
 800af52:	2200      	movs	r2, #0
 800af54:	f000 f878 	bl	800b048 <_lseek_r>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	4628      	mov	r0, r5
 800af6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	f000 b89f 	b.w	800b0b0 <_write_r>

0800af72 <__sseek>:
 800af72:	b510      	push	{r4, lr}
 800af74:	460c      	mov	r4, r1
 800af76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7a:	f000 f865 	bl	800b048 <_lseek_r>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	bf15      	itete	ne
 800af84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af8e:	81a3      	strheq	r3, [r4, #12]
 800af90:	bf18      	it	ne
 800af92:	81a3      	strhne	r3, [r4, #12]
 800af94:	bd10      	pop	{r4, pc}

0800af96 <__sclose>:
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 b845 	b.w	800b028 <_close_r>

0800af9e <_vsniprintf_r>:
 800af9e:	b530      	push	{r4, r5, lr}
 800afa0:	4614      	mov	r4, r2
 800afa2:	2c00      	cmp	r4, #0
 800afa4:	b09b      	sub	sp, #108	@ 0x6c
 800afa6:	4605      	mov	r5, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	da05      	bge.n	800afb8 <_vsniprintf_r+0x1a>
 800afac:	238b      	movs	r3, #139	@ 0x8b
 800afae:	6003      	str	r3, [r0, #0]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	b01b      	add	sp, #108	@ 0x6c
 800afb6:	bd30      	pop	{r4, r5, pc}
 800afb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800afbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800afc0:	f04f 0300 	mov.w	r3, #0
 800afc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800afc6:	bf14      	ite	ne
 800afc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afcc:	4623      	moveq	r3, r4
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	9305      	str	r3, [sp, #20]
 800afd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afd6:	9100      	str	r1, [sp, #0]
 800afd8:	9104      	str	r1, [sp, #16]
 800afda:	f8ad 300e 	strh.w	r3, [sp, #14]
 800afde:	4669      	mov	r1, sp
 800afe0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800afe2:	f000 f959 	bl	800b298 <_svfiprintf_r>
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	bfbc      	itt	lt
 800afea:	238b      	movlt	r3, #139	@ 0x8b
 800afec:	602b      	strlt	r3, [r5, #0]
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d0e0      	beq.n	800afb4 <_vsniprintf_r+0x16>
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	2200      	movs	r2, #0
 800aff6:	701a      	strb	r2, [r3, #0]
 800aff8:	e7dc      	b.n	800afb4 <_vsniprintf_r+0x16>
	...

0800affc <vsniprintf>:
 800affc:	b507      	push	{r0, r1, r2, lr}
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	4613      	mov	r3, r2
 800b002:	460a      	mov	r2, r1
 800b004:	4601      	mov	r1, r0
 800b006:	4803      	ldr	r0, [pc, #12]	@ (800b014 <vsniprintf+0x18>)
 800b008:	6800      	ldr	r0, [r0, #0]
 800b00a:	f7ff ffc8 	bl	800af9e <_vsniprintf_r>
 800b00e:	b003      	add	sp, #12
 800b010:	f85d fb04 	ldr.w	pc, [sp], #4
 800b014:	20000028 	.word	0x20000028

0800b018 <memset>:
 800b018:	4402      	add	r2, r0
 800b01a:	4603      	mov	r3, r0
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d100      	bne.n	800b022 <memset+0xa>
 800b020:	4770      	bx	lr
 800b022:	f803 1b01 	strb.w	r1, [r3], #1
 800b026:	e7f9      	b.n	800b01c <memset+0x4>

0800b028 <_close_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d06      	ldr	r5, [pc, #24]	@ (800b044 <_close_r+0x1c>)
 800b02c:	2300      	movs	r3, #0
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	602b      	str	r3, [r5, #0]
 800b034:	f7f7 fb0a 	bl	800264c <_close>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_close_r+0x1a>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_close_r+0x1a>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	20000d54 	.word	0x20000d54

0800b048 <_lseek_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	@ (800b068 <_lseek_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f7 fb1f 	bl	800269a <_lseek>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_lseek_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_lseek_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20000d54 	.word	0x20000d54

0800b06c <_read_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4d07      	ldr	r5, [pc, #28]	@ (800b08c <_read_r+0x20>)
 800b070:	4604      	mov	r4, r0
 800b072:	4608      	mov	r0, r1
 800b074:	4611      	mov	r1, r2
 800b076:	2200      	movs	r2, #0
 800b078:	602a      	str	r2, [r5, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f7f7 fac9 	bl	8002612 <_read>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_read_r+0x1e>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_read_r+0x1e>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20000d54 	.word	0x20000d54

0800b090 <_sbrk_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d06      	ldr	r5, [pc, #24]	@ (800b0ac <_sbrk_r+0x1c>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	f7f7 fb0a 	bl	80026b4 <_sbrk>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_sbrk_r+0x1a>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_sbrk_r+0x1a>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	20000d54 	.word	0x20000d54

0800b0b0 <_write_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4d07      	ldr	r5, [pc, #28]	@ (800b0d0 <_write_r+0x20>)
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	602a      	str	r2, [r5, #0]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f7f6 f90e 	bl	80012e0 <_write>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_write_r+0x1e>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_write_r+0x1e>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20000d54 	.word	0x20000d54

0800b0d4 <__errno>:
 800b0d4:	4b01      	ldr	r3, [pc, #4]	@ (800b0dc <__errno+0x8>)
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20000028 	.word	0x20000028

0800b0e0 <__libc_init_array>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b118 <__libc_init_array+0x38>)
 800b0e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b11c <__libc_init_array+0x3c>)
 800b0e6:	1b64      	subs	r4, r4, r5
 800b0e8:	10a4      	asrs	r4, r4, #2
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	42a6      	cmp	r6, r4
 800b0ee:	d109      	bne.n	800b104 <__libc_init_array+0x24>
 800b0f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b120 <__libc_init_array+0x40>)
 800b0f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b124 <__libc_init_array+0x44>)
 800b0f4:	f000 feae 	bl	800be54 <_init>
 800b0f8:	1b64      	subs	r4, r4, r5
 800b0fa:	10a4      	asrs	r4, r4, #2
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	42a6      	cmp	r6, r4
 800b100:	d105      	bne.n	800b10e <__libc_init_array+0x2e>
 800b102:	bd70      	pop	{r4, r5, r6, pc}
 800b104:	f855 3b04 	ldr.w	r3, [r5], #4
 800b108:	4798      	blx	r3
 800b10a:	3601      	adds	r6, #1
 800b10c:	e7ee      	b.n	800b0ec <__libc_init_array+0xc>
 800b10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b112:	4798      	blx	r3
 800b114:	3601      	adds	r6, #1
 800b116:	e7f2      	b.n	800b0fe <__libc_init_array+0x1e>
 800b118:	0800c41c 	.word	0x0800c41c
 800b11c:	0800c41c 	.word	0x0800c41c
 800b120:	0800c41c 	.word	0x0800c41c
 800b124:	0800c420 	.word	0x0800c420

0800b128 <__retarget_lock_init_recursive>:
 800b128:	4770      	bx	lr

0800b12a <__retarget_lock_acquire_recursive>:
 800b12a:	4770      	bx	lr

0800b12c <__retarget_lock_release_recursive>:
 800b12c:	4770      	bx	lr

0800b12e <memcpy>:
 800b12e:	440a      	add	r2, r1
 800b130:	4291      	cmp	r1, r2
 800b132:	f100 33ff 	add.w	r3, r0, #4294967295
 800b136:	d100      	bne.n	800b13a <memcpy+0xc>
 800b138:	4770      	bx	lr
 800b13a:	b510      	push	{r4, lr}
 800b13c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b140:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b144:	4291      	cmp	r1, r2
 800b146:	d1f9      	bne.n	800b13c <memcpy+0xe>
 800b148:	bd10      	pop	{r4, pc}
	...

0800b14c <_free_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4605      	mov	r5, r0
 800b150:	2900      	cmp	r1, #0
 800b152:	d041      	beq.n	800b1d8 <_free_r+0x8c>
 800b154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b158:	1f0c      	subs	r4, r1, #4
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bfb8      	it	lt
 800b15e:	18e4      	addlt	r4, r4, r3
 800b160:	f7ff fd46 	bl	800abf0 <__malloc_lock>
 800b164:	4a1d      	ldr	r2, [pc, #116]	@ (800b1dc <_free_r+0x90>)
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	b933      	cbnz	r3, 800b178 <_free_r+0x2c>
 800b16a:	6063      	str	r3, [r4, #4]
 800b16c:	6014      	str	r4, [r2, #0]
 800b16e:	4628      	mov	r0, r5
 800b170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b174:	f7ff bd42 	b.w	800abfc <__malloc_unlock>
 800b178:	42a3      	cmp	r3, r4
 800b17a:	d908      	bls.n	800b18e <_free_r+0x42>
 800b17c:	6820      	ldr	r0, [r4, #0]
 800b17e:	1821      	adds	r1, r4, r0
 800b180:	428b      	cmp	r3, r1
 800b182:	bf01      	itttt	eq
 800b184:	6819      	ldreq	r1, [r3, #0]
 800b186:	685b      	ldreq	r3, [r3, #4]
 800b188:	1809      	addeq	r1, r1, r0
 800b18a:	6021      	streq	r1, [r4, #0]
 800b18c:	e7ed      	b.n	800b16a <_free_r+0x1e>
 800b18e:	461a      	mov	r2, r3
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	b10b      	cbz	r3, 800b198 <_free_r+0x4c>
 800b194:	42a3      	cmp	r3, r4
 800b196:	d9fa      	bls.n	800b18e <_free_r+0x42>
 800b198:	6811      	ldr	r1, [r2, #0]
 800b19a:	1850      	adds	r0, r2, r1
 800b19c:	42a0      	cmp	r0, r4
 800b19e:	d10b      	bne.n	800b1b8 <_free_r+0x6c>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	4401      	add	r1, r0
 800b1a4:	1850      	adds	r0, r2, r1
 800b1a6:	4283      	cmp	r3, r0
 800b1a8:	6011      	str	r1, [r2, #0]
 800b1aa:	d1e0      	bne.n	800b16e <_free_r+0x22>
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	6053      	str	r3, [r2, #4]
 800b1b2:	4408      	add	r0, r1
 800b1b4:	6010      	str	r0, [r2, #0]
 800b1b6:	e7da      	b.n	800b16e <_free_r+0x22>
 800b1b8:	d902      	bls.n	800b1c0 <_free_r+0x74>
 800b1ba:	230c      	movs	r3, #12
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	e7d6      	b.n	800b16e <_free_r+0x22>
 800b1c0:	6820      	ldr	r0, [r4, #0]
 800b1c2:	1821      	adds	r1, r4, r0
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf04      	itt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	6063      	str	r3, [r4, #4]
 800b1ce:	bf04      	itt	eq
 800b1d0:	1809      	addeq	r1, r1, r0
 800b1d2:	6021      	streq	r1, [r4, #0]
 800b1d4:	6054      	str	r4, [r2, #4]
 800b1d6:	e7ca      	b.n	800b16e <_free_r+0x22>
 800b1d8:	bd38      	pop	{r3, r4, r5, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000c14 	.word	0x20000c14

0800b1e0 <__ssputs_r>:
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	688e      	ldr	r6, [r1, #8]
 800b1e6:	461f      	mov	r7, r3
 800b1e8:	42be      	cmp	r6, r7
 800b1ea:	680b      	ldr	r3, [r1, #0]
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	4690      	mov	r8, r2
 800b1f2:	d82d      	bhi.n	800b250 <__ssputs_r+0x70>
 800b1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1fc:	d026      	beq.n	800b24c <__ssputs_r+0x6c>
 800b1fe:	6965      	ldr	r5, [r4, #20]
 800b200:	6909      	ldr	r1, [r1, #16]
 800b202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b206:	eba3 0901 	sub.w	r9, r3, r1
 800b20a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b20e:	1c7b      	adds	r3, r7, #1
 800b210:	444b      	add	r3, r9
 800b212:	106d      	asrs	r5, r5, #1
 800b214:	429d      	cmp	r5, r3
 800b216:	bf38      	it	cc
 800b218:	461d      	movcc	r5, r3
 800b21a:	0553      	lsls	r3, r2, #21
 800b21c:	d527      	bpl.n	800b26e <__ssputs_r+0x8e>
 800b21e:	4629      	mov	r1, r5
 800b220:	f7ff fc66 	bl	800aaf0 <_malloc_r>
 800b224:	4606      	mov	r6, r0
 800b226:	b360      	cbz	r0, 800b282 <__ssputs_r+0xa2>
 800b228:	6921      	ldr	r1, [r4, #16]
 800b22a:	464a      	mov	r2, r9
 800b22c:	f7ff ff7f 	bl	800b12e <memcpy>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	6126      	str	r6, [r4, #16]
 800b23e:	6165      	str	r5, [r4, #20]
 800b240:	444e      	add	r6, r9
 800b242:	eba5 0509 	sub.w	r5, r5, r9
 800b246:	6026      	str	r6, [r4, #0]
 800b248:	60a5      	str	r5, [r4, #8]
 800b24a:	463e      	mov	r6, r7
 800b24c:	42be      	cmp	r6, r7
 800b24e:	d900      	bls.n	800b252 <__ssputs_r+0x72>
 800b250:	463e      	mov	r6, r7
 800b252:	6820      	ldr	r0, [r4, #0]
 800b254:	4632      	mov	r2, r6
 800b256:	4641      	mov	r1, r8
 800b258:	f000 fd8a 	bl	800bd70 <memmove>
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	1b9b      	subs	r3, r3, r6
 800b260:	60a3      	str	r3, [r4, #8]
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	4433      	add	r3, r6
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	2000      	movs	r0, #0
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	462a      	mov	r2, r5
 800b270:	f000 fdba 	bl	800bde8 <_realloc_r>
 800b274:	4606      	mov	r6, r0
 800b276:	2800      	cmp	r0, #0
 800b278:	d1e0      	bne.n	800b23c <__ssputs_r+0x5c>
 800b27a:	6921      	ldr	r1, [r4, #16]
 800b27c:	4650      	mov	r0, sl
 800b27e:	f7ff ff65 	bl	800b14c <_free_r>
 800b282:	230c      	movs	r3, #12
 800b284:	f8ca 3000 	str.w	r3, [sl]
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b28e:	81a3      	strh	r3, [r4, #12]
 800b290:	f04f 30ff 	mov.w	r0, #4294967295
 800b294:	e7e9      	b.n	800b26a <__ssputs_r+0x8a>
	...

0800b298 <_svfiprintf_r>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4698      	mov	r8, r3
 800b29e:	898b      	ldrh	r3, [r1, #12]
 800b2a0:	061b      	lsls	r3, r3, #24
 800b2a2:	b09d      	sub	sp, #116	@ 0x74
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	d510      	bpl.n	800b2ce <_svfiprintf_r+0x36>
 800b2ac:	690b      	ldr	r3, [r1, #16]
 800b2ae:	b973      	cbnz	r3, 800b2ce <_svfiprintf_r+0x36>
 800b2b0:	2140      	movs	r1, #64	@ 0x40
 800b2b2:	f7ff fc1d 	bl	800aaf0 <_malloc_r>
 800b2b6:	6028      	str	r0, [r5, #0]
 800b2b8:	6128      	str	r0, [r5, #16]
 800b2ba:	b930      	cbnz	r0, 800b2ca <_svfiprintf_r+0x32>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	b01d      	add	sp, #116	@ 0x74
 800b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ca:	2340      	movs	r3, #64	@ 0x40
 800b2cc:	616b      	str	r3, [r5, #20]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2d2:	2320      	movs	r3, #32
 800b2d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2dc:	2330      	movs	r3, #48	@ 0x30
 800b2de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b47c <_svfiprintf_r+0x1e4>
 800b2e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2e6:	f04f 0901 	mov.w	r9, #1
 800b2ea:	4623      	mov	r3, r4
 800b2ec:	469a      	mov	sl, r3
 800b2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f2:	b10a      	cbz	r2, 800b2f8 <_svfiprintf_r+0x60>
 800b2f4:	2a25      	cmp	r2, #37	@ 0x25
 800b2f6:	d1f9      	bne.n	800b2ec <_svfiprintf_r+0x54>
 800b2f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2fc:	d00b      	beq.n	800b316 <_svfiprintf_r+0x7e>
 800b2fe:	465b      	mov	r3, fp
 800b300:	4622      	mov	r2, r4
 800b302:	4629      	mov	r1, r5
 800b304:	4638      	mov	r0, r7
 800b306:	f7ff ff6b 	bl	800b1e0 <__ssputs_r>
 800b30a:	3001      	adds	r0, #1
 800b30c:	f000 80a7 	beq.w	800b45e <_svfiprintf_r+0x1c6>
 800b310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b312:	445a      	add	r2, fp
 800b314:	9209      	str	r2, [sp, #36]	@ 0x24
 800b316:	f89a 3000 	ldrb.w	r3, [sl]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 809f 	beq.w	800b45e <_svfiprintf_r+0x1c6>
 800b320:	2300      	movs	r3, #0
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b32a:	f10a 0a01 	add.w	sl, sl, #1
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	9307      	str	r3, [sp, #28]
 800b332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b336:	931a      	str	r3, [sp, #104]	@ 0x68
 800b338:	4654      	mov	r4, sl
 800b33a:	2205      	movs	r2, #5
 800b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b340:	484e      	ldr	r0, [pc, #312]	@ (800b47c <_svfiprintf_r+0x1e4>)
 800b342:	f7f4 ff45 	bl	80001d0 <memchr>
 800b346:	9a04      	ldr	r2, [sp, #16]
 800b348:	b9d8      	cbnz	r0, 800b382 <_svfiprintf_r+0xea>
 800b34a:	06d0      	lsls	r0, r2, #27
 800b34c:	bf44      	itt	mi
 800b34e:	2320      	movmi	r3, #32
 800b350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b354:	0711      	lsls	r1, r2, #28
 800b356:	bf44      	itt	mi
 800b358:	232b      	movmi	r3, #43	@ 0x2b
 800b35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b35e:	f89a 3000 	ldrb.w	r3, [sl]
 800b362:	2b2a      	cmp	r3, #42	@ 0x2a
 800b364:	d015      	beq.n	800b392 <_svfiprintf_r+0xfa>
 800b366:	9a07      	ldr	r2, [sp, #28]
 800b368:	4654      	mov	r4, sl
 800b36a:	2000      	movs	r0, #0
 800b36c:	f04f 0c0a 	mov.w	ip, #10
 800b370:	4621      	mov	r1, r4
 800b372:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b376:	3b30      	subs	r3, #48	@ 0x30
 800b378:	2b09      	cmp	r3, #9
 800b37a:	d94b      	bls.n	800b414 <_svfiprintf_r+0x17c>
 800b37c:	b1b0      	cbz	r0, 800b3ac <_svfiprintf_r+0x114>
 800b37e:	9207      	str	r2, [sp, #28]
 800b380:	e014      	b.n	800b3ac <_svfiprintf_r+0x114>
 800b382:	eba0 0308 	sub.w	r3, r0, r8
 800b386:	fa09 f303 	lsl.w	r3, r9, r3
 800b38a:	4313      	orrs	r3, r2
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	46a2      	mov	sl, r4
 800b390:	e7d2      	b.n	800b338 <_svfiprintf_r+0xa0>
 800b392:	9b03      	ldr	r3, [sp, #12]
 800b394:	1d19      	adds	r1, r3, #4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	9103      	str	r1, [sp, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bfbb      	ittet	lt
 800b39e:	425b      	neglt	r3, r3
 800b3a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a4:	9307      	strge	r3, [sp, #28]
 800b3a6:	9307      	strlt	r3, [sp, #28]
 800b3a8:	bfb8      	it	lt
 800b3aa:	9204      	strlt	r2, [sp, #16]
 800b3ac:	7823      	ldrb	r3, [r4, #0]
 800b3ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3b0:	d10a      	bne.n	800b3c8 <_svfiprintf_r+0x130>
 800b3b2:	7863      	ldrb	r3, [r4, #1]
 800b3b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3b6:	d132      	bne.n	800b41e <_svfiprintf_r+0x186>
 800b3b8:	9b03      	ldr	r3, [sp, #12]
 800b3ba:	1d1a      	adds	r2, r3, #4
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	9203      	str	r2, [sp, #12]
 800b3c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3c4:	3402      	adds	r4, #2
 800b3c6:	9305      	str	r3, [sp, #20]
 800b3c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b48c <_svfiprintf_r+0x1f4>
 800b3cc:	7821      	ldrb	r1, [r4, #0]
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	f7f4 fefd 	bl	80001d0 <memchr>
 800b3d6:	b138      	cbz	r0, 800b3e8 <_svfiprintf_r+0x150>
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	eba0 000a 	sub.w	r0, r0, sl
 800b3de:	2240      	movs	r2, #64	@ 0x40
 800b3e0:	4082      	lsls	r2, r0
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	3401      	adds	r4, #1
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ec:	4824      	ldr	r0, [pc, #144]	@ (800b480 <_svfiprintf_r+0x1e8>)
 800b3ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3f2:	2206      	movs	r2, #6
 800b3f4:	f7f4 feec 	bl	80001d0 <memchr>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d036      	beq.n	800b46a <_svfiprintf_r+0x1d2>
 800b3fc:	4b21      	ldr	r3, [pc, #132]	@ (800b484 <_svfiprintf_r+0x1ec>)
 800b3fe:	bb1b      	cbnz	r3, 800b448 <_svfiprintf_r+0x1b0>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	3307      	adds	r3, #7
 800b404:	f023 0307 	bic.w	r3, r3, #7
 800b408:	3308      	adds	r3, #8
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40e:	4433      	add	r3, r6
 800b410:	9309      	str	r3, [sp, #36]	@ 0x24
 800b412:	e76a      	b.n	800b2ea <_svfiprintf_r+0x52>
 800b414:	fb0c 3202 	mla	r2, ip, r2, r3
 800b418:	460c      	mov	r4, r1
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7a8      	b.n	800b370 <_svfiprintf_r+0xd8>
 800b41e:	2300      	movs	r3, #0
 800b420:	3401      	adds	r4, #1
 800b422:	9305      	str	r3, [sp, #20]
 800b424:	4619      	mov	r1, r3
 800b426:	f04f 0c0a 	mov.w	ip, #10
 800b42a:	4620      	mov	r0, r4
 800b42c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b430:	3a30      	subs	r2, #48	@ 0x30
 800b432:	2a09      	cmp	r2, #9
 800b434:	d903      	bls.n	800b43e <_svfiprintf_r+0x1a6>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0c6      	beq.n	800b3c8 <_svfiprintf_r+0x130>
 800b43a:	9105      	str	r1, [sp, #20]
 800b43c:	e7c4      	b.n	800b3c8 <_svfiprintf_r+0x130>
 800b43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b442:	4604      	mov	r4, r0
 800b444:	2301      	movs	r3, #1
 800b446:	e7f0      	b.n	800b42a <_svfiprintf_r+0x192>
 800b448:	ab03      	add	r3, sp, #12
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	462a      	mov	r2, r5
 800b44e:	4b0e      	ldr	r3, [pc, #56]	@ (800b488 <_svfiprintf_r+0x1f0>)
 800b450:	a904      	add	r1, sp, #16
 800b452:	4638      	mov	r0, r7
 800b454:	f3af 8000 	nop.w
 800b458:	1c42      	adds	r2, r0, #1
 800b45a:	4606      	mov	r6, r0
 800b45c:	d1d6      	bne.n	800b40c <_svfiprintf_r+0x174>
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	065b      	lsls	r3, r3, #25
 800b462:	f53f af2d 	bmi.w	800b2c0 <_svfiprintf_r+0x28>
 800b466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b468:	e72c      	b.n	800b2c4 <_svfiprintf_r+0x2c>
 800b46a:	ab03      	add	r3, sp, #12
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	462a      	mov	r2, r5
 800b470:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <_svfiprintf_r+0x1f0>)
 800b472:	a904      	add	r1, sp, #16
 800b474:	4638      	mov	r0, r7
 800b476:	f000 f9bb 	bl	800b7f0 <_printf_i>
 800b47a:	e7ed      	b.n	800b458 <_svfiprintf_r+0x1c0>
 800b47c:	0800c3e0 	.word	0x0800c3e0
 800b480:	0800c3ea 	.word	0x0800c3ea
 800b484:	00000000 	.word	0x00000000
 800b488:	0800b1e1 	.word	0x0800b1e1
 800b48c:	0800c3e6 	.word	0x0800c3e6

0800b490 <__sfputc_r>:
 800b490:	6893      	ldr	r3, [r2, #8]
 800b492:	3b01      	subs	r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	b410      	push	{r4}
 800b498:	6093      	str	r3, [r2, #8]
 800b49a:	da08      	bge.n	800b4ae <__sfputc_r+0x1e>
 800b49c:	6994      	ldr	r4, [r2, #24]
 800b49e:	42a3      	cmp	r3, r4
 800b4a0:	db01      	blt.n	800b4a6 <__sfputc_r+0x16>
 800b4a2:	290a      	cmp	r1, #10
 800b4a4:	d103      	bne.n	800b4ae <__sfputc_r+0x1e>
 800b4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4aa:	f000 bbcd 	b.w	800bc48 <__swbuf_r>
 800b4ae:	6813      	ldr	r3, [r2, #0]
 800b4b0:	1c58      	adds	r0, r3, #1
 800b4b2:	6010      	str	r0, [r2, #0]
 800b4b4:	7019      	strb	r1, [r3, #0]
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <__sfputs_r>:
 800b4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460f      	mov	r7, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	18d5      	adds	r5, r2, r3
 800b4c8:	42ac      	cmp	r4, r5
 800b4ca:	d101      	bne.n	800b4d0 <__sfputs_r+0x12>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e007      	b.n	800b4e0 <__sfputs_r+0x22>
 800b4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	f7ff ffda 	bl	800b490 <__sfputc_r>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d1f3      	bne.n	800b4c8 <__sfputs_r+0xa>
 800b4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4e4 <_vfiprintf_r>:
 800b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	b09d      	sub	sp, #116	@ 0x74
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	4698      	mov	r8, r3
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	b118      	cbz	r0, 800b4fc <_vfiprintf_r+0x18>
 800b4f4:	6a03      	ldr	r3, [r0, #32]
 800b4f6:	b90b      	cbnz	r3, 800b4fc <_vfiprintf_r+0x18>
 800b4f8:	f7ff fc12 	bl	800ad20 <__sinit>
 800b4fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	d405      	bmi.n	800b50e <_vfiprintf_r+0x2a>
 800b502:	89ab      	ldrh	r3, [r5, #12]
 800b504:	059a      	lsls	r2, r3, #22
 800b506:	d402      	bmi.n	800b50e <_vfiprintf_r+0x2a>
 800b508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b50a:	f7ff fe0e 	bl	800b12a <__retarget_lock_acquire_recursive>
 800b50e:	89ab      	ldrh	r3, [r5, #12]
 800b510:	071b      	lsls	r3, r3, #28
 800b512:	d501      	bpl.n	800b518 <_vfiprintf_r+0x34>
 800b514:	692b      	ldr	r3, [r5, #16]
 800b516:	b99b      	cbnz	r3, 800b540 <_vfiprintf_r+0x5c>
 800b518:	4629      	mov	r1, r5
 800b51a:	4630      	mov	r0, r6
 800b51c:	f000 fbd2 	bl	800bcc4 <__swsetup_r>
 800b520:	b170      	cbz	r0, 800b540 <_vfiprintf_r+0x5c>
 800b522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b524:	07dc      	lsls	r4, r3, #31
 800b526:	d504      	bpl.n	800b532 <_vfiprintf_r+0x4e>
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	b01d      	add	sp, #116	@ 0x74
 800b52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b532:	89ab      	ldrh	r3, [r5, #12]
 800b534:	0598      	lsls	r0, r3, #22
 800b536:	d4f7      	bmi.n	800b528 <_vfiprintf_r+0x44>
 800b538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b53a:	f7ff fdf7 	bl	800b12c <__retarget_lock_release_recursive>
 800b53e:	e7f3      	b.n	800b528 <_vfiprintf_r+0x44>
 800b540:	2300      	movs	r3, #0
 800b542:	9309      	str	r3, [sp, #36]	@ 0x24
 800b544:	2320      	movs	r3, #32
 800b546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b54e:	2330      	movs	r3, #48	@ 0x30
 800b550:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b700 <_vfiprintf_r+0x21c>
 800b554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b558:	f04f 0901 	mov.w	r9, #1
 800b55c:	4623      	mov	r3, r4
 800b55e:	469a      	mov	sl, r3
 800b560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b564:	b10a      	cbz	r2, 800b56a <_vfiprintf_r+0x86>
 800b566:	2a25      	cmp	r2, #37	@ 0x25
 800b568:	d1f9      	bne.n	800b55e <_vfiprintf_r+0x7a>
 800b56a:	ebba 0b04 	subs.w	fp, sl, r4
 800b56e:	d00b      	beq.n	800b588 <_vfiprintf_r+0xa4>
 800b570:	465b      	mov	r3, fp
 800b572:	4622      	mov	r2, r4
 800b574:	4629      	mov	r1, r5
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff ffa1 	bl	800b4be <__sfputs_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	f000 80a7 	beq.w	800b6d0 <_vfiprintf_r+0x1ec>
 800b582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b584:	445a      	add	r2, fp
 800b586:	9209      	str	r2, [sp, #36]	@ 0x24
 800b588:	f89a 3000 	ldrb.w	r3, [sl]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 809f 	beq.w	800b6d0 <_vfiprintf_r+0x1ec>
 800b592:	2300      	movs	r3, #0
 800b594:	f04f 32ff 	mov.w	r2, #4294967295
 800b598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b59c:	f10a 0a01 	add.w	sl, sl, #1
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	9307      	str	r3, [sp, #28]
 800b5a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5aa:	4654      	mov	r4, sl
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b2:	4853      	ldr	r0, [pc, #332]	@ (800b700 <_vfiprintf_r+0x21c>)
 800b5b4:	f7f4 fe0c 	bl	80001d0 <memchr>
 800b5b8:	9a04      	ldr	r2, [sp, #16]
 800b5ba:	b9d8      	cbnz	r0, 800b5f4 <_vfiprintf_r+0x110>
 800b5bc:	06d1      	lsls	r1, r2, #27
 800b5be:	bf44      	itt	mi
 800b5c0:	2320      	movmi	r3, #32
 800b5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c6:	0713      	lsls	r3, r2, #28
 800b5c8:	bf44      	itt	mi
 800b5ca:	232b      	movmi	r3, #43	@ 0x2b
 800b5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5d6:	d015      	beq.n	800b604 <_vfiprintf_r+0x120>
 800b5d8:	9a07      	ldr	r2, [sp, #28]
 800b5da:	4654      	mov	r4, sl
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f04f 0c0a 	mov.w	ip, #10
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e8:	3b30      	subs	r3, #48	@ 0x30
 800b5ea:	2b09      	cmp	r3, #9
 800b5ec:	d94b      	bls.n	800b686 <_vfiprintf_r+0x1a2>
 800b5ee:	b1b0      	cbz	r0, 800b61e <_vfiprintf_r+0x13a>
 800b5f0:	9207      	str	r2, [sp, #28]
 800b5f2:	e014      	b.n	800b61e <_vfiprintf_r+0x13a>
 800b5f4:	eba0 0308 	sub.w	r3, r0, r8
 800b5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	9304      	str	r3, [sp, #16]
 800b600:	46a2      	mov	sl, r4
 800b602:	e7d2      	b.n	800b5aa <_vfiprintf_r+0xc6>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	1d19      	adds	r1, r3, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	9103      	str	r1, [sp, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	bfbb      	ittet	lt
 800b610:	425b      	neglt	r3, r3
 800b612:	f042 0202 	orrlt.w	r2, r2, #2
 800b616:	9307      	strge	r3, [sp, #28]
 800b618:	9307      	strlt	r3, [sp, #28]
 800b61a:	bfb8      	it	lt
 800b61c:	9204      	strlt	r2, [sp, #16]
 800b61e:	7823      	ldrb	r3, [r4, #0]
 800b620:	2b2e      	cmp	r3, #46	@ 0x2e
 800b622:	d10a      	bne.n	800b63a <_vfiprintf_r+0x156>
 800b624:	7863      	ldrb	r3, [r4, #1]
 800b626:	2b2a      	cmp	r3, #42	@ 0x2a
 800b628:	d132      	bne.n	800b690 <_vfiprintf_r+0x1ac>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	1d1a      	adds	r2, r3, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	9203      	str	r2, [sp, #12]
 800b632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b636:	3402      	adds	r4, #2
 800b638:	9305      	str	r3, [sp, #20]
 800b63a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b710 <_vfiprintf_r+0x22c>
 800b63e:	7821      	ldrb	r1, [r4, #0]
 800b640:	2203      	movs	r2, #3
 800b642:	4650      	mov	r0, sl
 800b644:	f7f4 fdc4 	bl	80001d0 <memchr>
 800b648:	b138      	cbz	r0, 800b65a <_vfiprintf_r+0x176>
 800b64a:	9b04      	ldr	r3, [sp, #16]
 800b64c:	eba0 000a 	sub.w	r0, r0, sl
 800b650:	2240      	movs	r2, #64	@ 0x40
 800b652:	4082      	lsls	r2, r0
 800b654:	4313      	orrs	r3, r2
 800b656:	3401      	adds	r4, #1
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65e:	4829      	ldr	r0, [pc, #164]	@ (800b704 <_vfiprintf_r+0x220>)
 800b660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b664:	2206      	movs	r2, #6
 800b666:	f7f4 fdb3 	bl	80001d0 <memchr>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d03f      	beq.n	800b6ee <_vfiprintf_r+0x20a>
 800b66e:	4b26      	ldr	r3, [pc, #152]	@ (800b708 <_vfiprintf_r+0x224>)
 800b670:	bb1b      	cbnz	r3, 800b6ba <_vfiprintf_r+0x1d6>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	3307      	adds	r3, #7
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	3308      	adds	r3, #8
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b680:	443b      	add	r3, r7
 800b682:	9309      	str	r3, [sp, #36]	@ 0x24
 800b684:	e76a      	b.n	800b55c <_vfiprintf_r+0x78>
 800b686:	fb0c 3202 	mla	r2, ip, r2, r3
 800b68a:	460c      	mov	r4, r1
 800b68c:	2001      	movs	r0, #1
 800b68e:	e7a8      	b.n	800b5e2 <_vfiprintf_r+0xfe>
 800b690:	2300      	movs	r3, #0
 800b692:	3401      	adds	r4, #1
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	4619      	mov	r1, r3
 800b698:	f04f 0c0a 	mov.w	ip, #10
 800b69c:	4620      	mov	r0, r4
 800b69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a2:	3a30      	subs	r2, #48	@ 0x30
 800b6a4:	2a09      	cmp	r2, #9
 800b6a6:	d903      	bls.n	800b6b0 <_vfiprintf_r+0x1cc>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0c6      	beq.n	800b63a <_vfiprintf_r+0x156>
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	e7c4      	b.n	800b63a <_vfiprintf_r+0x156>
 800b6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e7f0      	b.n	800b69c <_vfiprintf_r+0x1b8>
 800b6ba:	ab03      	add	r3, sp, #12
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4b12      	ldr	r3, [pc, #72]	@ (800b70c <_vfiprintf_r+0x228>)
 800b6c2:	a904      	add	r1, sp, #16
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f3af 8000 	nop.w
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	1c78      	adds	r0, r7, #1
 800b6ce:	d1d6      	bne.n	800b67e <_vfiprintf_r+0x19a>
 800b6d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	d405      	bmi.n	800b6e2 <_vfiprintf_r+0x1fe>
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	059a      	lsls	r2, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_vfiprintf_r+0x1fe>
 800b6dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6de:	f7ff fd25 	bl	800b12c <__retarget_lock_release_recursive>
 800b6e2:	89ab      	ldrh	r3, [r5, #12]
 800b6e4:	065b      	lsls	r3, r3, #25
 800b6e6:	f53f af1f 	bmi.w	800b528 <_vfiprintf_r+0x44>
 800b6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6ec:	e71e      	b.n	800b52c <_vfiprintf_r+0x48>
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <_vfiprintf_r+0x228>)
 800b6f6:	a904      	add	r1, sp, #16
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f879 	bl	800b7f0 <_printf_i>
 800b6fe:	e7e4      	b.n	800b6ca <_vfiprintf_r+0x1e6>
 800b700:	0800c3e0 	.word	0x0800c3e0
 800b704:	0800c3ea 	.word	0x0800c3ea
 800b708:	00000000 	.word	0x00000000
 800b70c:	0800b4bf 	.word	0x0800b4bf
 800b710:	0800c3e6 	.word	0x0800c3e6

0800b714 <_printf_common>:
 800b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	4616      	mov	r6, r2
 800b71a:	4698      	mov	r8, r3
 800b71c:	688a      	ldr	r2, [r1, #8]
 800b71e:	690b      	ldr	r3, [r1, #16]
 800b720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b724:	4293      	cmp	r3, r2
 800b726:	bfb8      	it	lt
 800b728:	4613      	movlt	r3, r2
 800b72a:	6033      	str	r3, [r6, #0]
 800b72c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b730:	4607      	mov	r7, r0
 800b732:	460c      	mov	r4, r1
 800b734:	b10a      	cbz	r2, 800b73a <_printf_common+0x26>
 800b736:	3301      	adds	r3, #1
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	0699      	lsls	r1, r3, #26
 800b73e:	bf42      	ittt	mi
 800b740:	6833      	ldrmi	r3, [r6, #0]
 800b742:	3302      	addmi	r3, #2
 800b744:	6033      	strmi	r3, [r6, #0]
 800b746:	6825      	ldr	r5, [r4, #0]
 800b748:	f015 0506 	ands.w	r5, r5, #6
 800b74c:	d106      	bne.n	800b75c <_printf_common+0x48>
 800b74e:	f104 0a19 	add.w	sl, r4, #25
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	6832      	ldr	r2, [r6, #0]
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	42ab      	cmp	r3, r5
 800b75a:	dc26      	bgt.n	800b7aa <_printf_common+0x96>
 800b75c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b760:	6822      	ldr	r2, [r4, #0]
 800b762:	3b00      	subs	r3, #0
 800b764:	bf18      	it	ne
 800b766:	2301      	movne	r3, #1
 800b768:	0692      	lsls	r2, r2, #26
 800b76a:	d42b      	bmi.n	800b7c4 <_printf_common+0xb0>
 800b76c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b770:	4641      	mov	r1, r8
 800b772:	4638      	mov	r0, r7
 800b774:	47c8      	blx	r9
 800b776:	3001      	adds	r0, #1
 800b778:	d01e      	beq.n	800b7b8 <_printf_common+0xa4>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	6922      	ldr	r2, [r4, #16]
 800b77e:	f003 0306 	and.w	r3, r3, #6
 800b782:	2b04      	cmp	r3, #4
 800b784:	bf02      	ittt	eq
 800b786:	68e5      	ldreq	r5, [r4, #12]
 800b788:	6833      	ldreq	r3, [r6, #0]
 800b78a:	1aed      	subeq	r5, r5, r3
 800b78c:	68a3      	ldr	r3, [r4, #8]
 800b78e:	bf0c      	ite	eq
 800b790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b794:	2500      	movne	r5, #0
 800b796:	4293      	cmp	r3, r2
 800b798:	bfc4      	itt	gt
 800b79a:	1a9b      	subgt	r3, r3, r2
 800b79c:	18ed      	addgt	r5, r5, r3
 800b79e:	2600      	movs	r6, #0
 800b7a0:	341a      	adds	r4, #26
 800b7a2:	42b5      	cmp	r5, r6
 800b7a4:	d11a      	bne.n	800b7dc <_printf_common+0xc8>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e008      	b.n	800b7bc <_printf_common+0xa8>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4652      	mov	r2, sl
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	47c8      	blx	r9
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d103      	bne.n	800b7c0 <_printf_common+0xac>
 800b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	e7c6      	b.n	800b752 <_printf_common+0x3e>
 800b7c4:	18e1      	adds	r1, r4, r3
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	2030      	movs	r0, #48	@ 0x30
 800b7ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7ce:	4422      	add	r2, r4
 800b7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7d8:	3302      	adds	r3, #2
 800b7da:	e7c7      	b.n	800b76c <_printf_common+0x58>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4641      	mov	r1, r8
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	47c8      	blx	r9
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	d0e6      	beq.n	800b7b8 <_printf_common+0xa4>
 800b7ea:	3601      	adds	r6, #1
 800b7ec:	e7d9      	b.n	800b7a2 <_printf_common+0x8e>
	...

0800b7f0 <_printf_i>:
 800b7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f4:	7e0f      	ldrb	r7, [r1, #24]
 800b7f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7f8:	2f78      	cmp	r7, #120	@ 0x78
 800b7fa:	4691      	mov	r9, r2
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	469a      	mov	sl, r3
 800b802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b806:	d807      	bhi.n	800b818 <_printf_i+0x28>
 800b808:	2f62      	cmp	r7, #98	@ 0x62
 800b80a:	d80a      	bhi.n	800b822 <_printf_i+0x32>
 800b80c:	2f00      	cmp	r7, #0
 800b80e:	f000 80d1 	beq.w	800b9b4 <_printf_i+0x1c4>
 800b812:	2f58      	cmp	r7, #88	@ 0x58
 800b814:	f000 80b8 	beq.w	800b988 <_printf_i+0x198>
 800b818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b81c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b820:	e03a      	b.n	800b898 <_printf_i+0xa8>
 800b822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b826:	2b15      	cmp	r3, #21
 800b828:	d8f6      	bhi.n	800b818 <_printf_i+0x28>
 800b82a:	a101      	add	r1, pc, #4	@ (adr r1, 800b830 <_printf_i+0x40>)
 800b82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b830:	0800b889 	.word	0x0800b889
 800b834:	0800b89d 	.word	0x0800b89d
 800b838:	0800b819 	.word	0x0800b819
 800b83c:	0800b819 	.word	0x0800b819
 800b840:	0800b819 	.word	0x0800b819
 800b844:	0800b819 	.word	0x0800b819
 800b848:	0800b89d 	.word	0x0800b89d
 800b84c:	0800b819 	.word	0x0800b819
 800b850:	0800b819 	.word	0x0800b819
 800b854:	0800b819 	.word	0x0800b819
 800b858:	0800b819 	.word	0x0800b819
 800b85c:	0800b99b 	.word	0x0800b99b
 800b860:	0800b8c7 	.word	0x0800b8c7
 800b864:	0800b955 	.word	0x0800b955
 800b868:	0800b819 	.word	0x0800b819
 800b86c:	0800b819 	.word	0x0800b819
 800b870:	0800b9bd 	.word	0x0800b9bd
 800b874:	0800b819 	.word	0x0800b819
 800b878:	0800b8c7 	.word	0x0800b8c7
 800b87c:	0800b819 	.word	0x0800b819
 800b880:	0800b819 	.word	0x0800b819
 800b884:	0800b95d 	.word	0x0800b95d
 800b888:	6833      	ldr	r3, [r6, #0]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6032      	str	r2, [r6, #0]
 800b890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b898:	2301      	movs	r3, #1
 800b89a:	e09c      	b.n	800b9d6 <_printf_i+0x1e6>
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	1d19      	adds	r1, r3, #4
 800b8a2:	6031      	str	r1, [r6, #0]
 800b8a4:	0606      	lsls	r6, r0, #24
 800b8a6:	d501      	bpl.n	800b8ac <_printf_i+0xbc>
 800b8a8:	681d      	ldr	r5, [r3, #0]
 800b8aa:	e003      	b.n	800b8b4 <_printf_i+0xc4>
 800b8ac:	0645      	lsls	r5, r0, #25
 800b8ae:	d5fb      	bpl.n	800b8a8 <_printf_i+0xb8>
 800b8b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8b4:	2d00      	cmp	r5, #0
 800b8b6:	da03      	bge.n	800b8c0 <_printf_i+0xd0>
 800b8b8:	232d      	movs	r3, #45	@ 0x2d
 800b8ba:	426d      	negs	r5, r5
 800b8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8c0:	4858      	ldr	r0, [pc, #352]	@ (800ba24 <_printf_i+0x234>)
 800b8c2:	230a      	movs	r3, #10
 800b8c4:	e011      	b.n	800b8ea <_printf_i+0xfa>
 800b8c6:	6821      	ldr	r1, [r4, #0]
 800b8c8:	6833      	ldr	r3, [r6, #0]
 800b8ca:	0608      	lsls	r0, r1, #24
 800b8cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8d0:	d402      	bmi.n	800b8d8 <_printf_i+0xe8>
 800b8d2:	0649      	lsls	r1, r1, #25
 800b8d4:	bf48      	it	mi
 800b8d6:	b2ad      	uxthmi	r5, r5
 800b8d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8da:	4852      	ldr	r0, [pc, #328]	@ (800ba24 <_printf_i+0x234>)
 800b8dc:	6033      	str	r3, [r6, #0]
 800b8de:	bf14      	ite	ne
 800b8e0:	230a      	movne	r3, #10
 800b8e2:	2308      	moveq	r3, #8
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8ea:	6866      	ldr	r6, [r4, #4]
 800b8ec:	60a6      	str	r6, [r4, #8]
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	db05      	blt.n	800b8fe <_printf_i+0x10e>
 800b8f2:	6821      	ldr	r1, [r4, #0]
 800b8f4:	432e      	orrs	r6, r5
 800b8f6:	f021 0104 	bic.w	r1, r1, #4
 800b8fa:	6021      	str	r1, [r4, #0]
 800b8fc:	d04b      	beq.n	800b996 <_printf_i+0x1a6>
 800b8fe:	4616      	mov	r6, r2
 800b900:	fbb5 f1f3 	udiv	r1, r5, r3
 800b904:	fb03 5711 	mls	r7, r3, r1, r5
 800b908:	5dc7      	ldrb	r7, [r0, r7]
 800b90a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b90e:	462f      	mov	r7, r5
 800b910:	42bb      	cmp	r3, r7
 800b912:	460d      	mov	r5, r1
 800b914:	d9f4      	bls.n	800b900 <_printf_i+0x110>
 800b916:	2b08      	cmp	r3, #8
 800b918:	d10b      	bne.n	800b932 <_printf_i+0x142>
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	07df      	lsls	r7, r3, #31
 800b91e:	d508      	bpl.n	800b932 <_printf_i+0x142>
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	6861      	ldr	r1, [r4, #4]
 800b924:	4299      	cmp	r1, r3
 800b926:	bfde      	ittt	le
 800b928:	2330      	movle	r3, #48	@ 0x30
 800b92a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b92e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b932:	1b92      	subs	r2, r2, r6
 800b934:	6122      	str	r2, [r4, #16]
 800b936:	f8cd a000 	str.w	sl, [sp]
 800b93a:	464b      	mov	r3, r9
 800b93c:	aa03      	add	r2, sp, #12
 800b93e:	4621      	mov	r1, r4
 800b940:	4640      	mov	r0, r8
 800b942:	f7ff fee7 	bl	800b714 <_printf_common>
 800b946:	3001      	adds	r0, #1
 800b948:	d14a      	bne.n	800b9e0 <_printf_i+0x1f0>
 800b94a:	f04f 30ff 	mov.w	r0, #4294967295
 800b94e:	b004      	add	sp, #16
 800b950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	f043 0320 	orr.w	r3, r3, #32
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	4832      	ldr	r0, [pc, #200]	@ (800ba28 <_printf_i+0x238>)
 800b95e:	2778      	movs	r7, #120	@ 0x78
 800b960:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	6831      	ldr	r1, [r6, #0]
 800b968:	061f      	lsls	r7, r3, #24
 800b96a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b96e:	d402      	bmi.n	800b976 <_printf_i+0x186>
 800b970:	065f      	lsls	r7, r3, #25
 800b972:	bf48      	it	mi
 800b974:	b2ad      	uxthmi	r5, r5
 800b976:	6031      	str	r1, [r6, #0]
 800b978:	07d9      	lsls	r1, r3, #31
 800b97a:	bf44      	itt	mi
 800b97c:	f043 0320 	orrmi.w	r3, r3, #32
 800b980:	6023      	strmi	r3, [r4, #0]
 800b982:	b11d      	cbz	r5, 800b98c <_printf_i+0x19c>
 800b984:	2310      	movs	r3, #16
 800b986:	e7ad      	b.n	800b8e4 <_printf_i+0xf4>
 800b988:	4826      	ldr	r0, [pc, #152]	@ (800ba24 <_printf_i+0x234>)
 800b98a:	e7e9      	b.n	800b960 <_printf_i+0x170>
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	f023 0320 	bic.w	r3, r3, #32
 800b992:	6023      	str	r3, [r4, #0]
 800b994:	e7f6      	b.n	800b984 <_printf_i+0x194>
 800b996:	4616      	mov	r6, r2
 800b998:	e7bd      	b.n	800b916 <_printf_i+0x126>
 800b99a:	6833      	ldr	r3, [r6, #0]
 800b99c:	6825      	ldr	r5, [r4, #0]
 800b99e:	6961      	ldr	r1, [r4, #20]
 800b9a0:	1d18      	adds	r0, r3, #4
 800b9a2:	6030      	str	r0, [r6, #0]
 800b9a4:	062e      	lsls	r6, r5, #24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	d501      	bpl.n	800b9ae <_printf_i+0x1be>
 800b9aa:	6019      	str	r1, [r3, #0]
 800b9ac:	e002      	b.n	800b9b4 <_printf_i+0x1c4>
 800b9ae:	0668      	lsls	r0, r5, #25
 800b9b0:	d5fb      	bpl.n	800b9aa <_printf_i+0x1ba>
 800b9b2:	8019      	strh	r1, [r3, #0]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	6123      	str	r3, [r4, #16]
 800b9b8:	4616      	mov	r6, r2
 800b9ba:	e7bc      	b.n	800b936 <_printf_i+0x146>
 800b9bc:	6833      	ldr	r3, [r6, #0]
 800b9be:	1d1a      	adds	r2, r3, #4
 800b9c0:	6032      	str	r2, [r6, #0]
 800b9c2:	681e      	ldr	r6, [r3, #0]
 800b9c4:	6862      	ldr	r2, [r4, #4]
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7f4 fc01 	bl	80001d0 <memchr>
 800b9ce:	b108      	cbz	r0, 800b9d4 <_printf_i+0x1e4>
 800b9d0:	1b80      	subs	r0, r0, r6
 800b9d2:	6060      	str	r0, [r4, #4]
 800b9d4:	6863      	ldr	r3, [r4, #4]
 800b9d6:	6123      	str	r3, [r4, #16]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9de:	e7aa      	b.n	800b936 <_printf_i+0x146>
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	47d0      	blx	sl
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	d0ad      	beq.n	800b94a <_printf_i+0x15a>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	079b      	lsls	r3, r3, #30
 800b9f2:	d413      	bmi.n	800ba1c <_printf_i+0x22c>
 800b9f4:	68e0      	ldr	r0, [r4, #12]
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	4298      	cmp	r0, r3
 800b9fa:	bfb8      	it	lt
 800b9fc:	4618      	movlt	r0, r3
 800b9fe:	e7a6      	b.n	800b94e <_printf_i+0x15e>
 800ba00:	2301      	movs	r3, #1
 800ba02:	4632      	mov	r2, r6
 800ba04:	4649      	mov	r1, r9
 800ba06:	4640      	mov	r0, r8
 800ba08:	47d0      	blx	sl
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	d09d      	beq.n	800b94a <_printf_i+0x15a>
 800ba0e:	3501      	adds	r5, #1
 800ba10:	68e3      	ldr	r3, [r4, #12]
 800ba12:	9903      	ldr	r1, [sp, #12]
 800ba14:	1a5b      	subs	r3, r3, r1
 800ba16:	42ab      	cmp	r3, r5
 800ba18:	dcf2      	bgt.n	800ba00 <_printf_i+0x210>
 800ba1a:	e7eb      	b.n	800b9f4 <_printf_i+0x204>
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	f104 0619 	add.w	r6, r4, #25
 800ba22:	e7f5      	b.n	800ba10 <_printf_i+0x220>
 800ba24:	0800c3f1 	.word	0x0800c3f1
 800ba28:	0800c402 	.word	0x0800c402

0800ba2c <__sflush_r>:
 800ba2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	0716      	lsls	r6, r2, #28
 800ba36:	4605      	mov	r5, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	d454      	bmi.n	800bae6 <__sflush_r+0xba>
 800ba3c:	684b      	ldr	r3, [r1, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	dc02      	bgt.n	800ba48 <__sflush_r+0x1c>
 800ba42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dd48      	ble.n	800bada <__sflush_r+0xae>
 800ba48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	d045      	beq.n	800bada <__sflush_r+0xae>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba54:	682f      	ldr	r7, [r5, #0]
 800ba56:	6a21      	ldr	r1, [r4, #32]
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	d030      	beq.n	800babe <__sflush_r+0x92>
 800ba5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	0759      	lsls	r1, r3, #29
 800ba62:	d505      	bpl.n	800ba70 <__sflush_r+0x44>
 800ba64:	6863      	ldr	r3, [r4, #4]
 800ba66:	1ad2      	subs	r2, r2, r3
 800ba68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba6a:	b10b      	cbz	r3, 800ba70 <__sflush_r+0x44>
 800ba6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	2300      	movs	r3, #0
 800ba72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba74:	6a21      	ldr	r1, [r4, #32]
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b0      	blx	r6
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	d106      	bne.n	800ba8e <__sflush_r+0x62>
 800ba80:	6829      	ldr	r1, [r5, #0]
 800ba82:	291d      	cmp	r1, #29
 800ba84:	d82b      	bhi.n	800bade <__sflush_r+0xb2>
 800ba86:	4a2a      	ldr	r2, [pc, #168]	@ (800bb30 <__sflush_r+0x104>)
 800ba88:	40ca      	lsrs	r2, r1
 800ba8a:	07d6      	lsls	r6, r2, #31
 800ba8c:	d527      	bpl.n	800bade <__sflush_r+0xb2>
 800ba8e:	2200      	movs	r2, #0
 800ba90:	6062      	str	r2, [r4, #4]
 800ba92:	04d9      	lsls	r1, r3, #19
 800ba94:	6922      	ldr	r2, [r4, #16]
 800ba96:	6022      	str	r2, [r4, #0]
 800ba98:	d504      	bpl.n	800baa4 <__sflush_r+0x78>
 800ba9a:	1c42      	adds	r2, r0, #1
 800ba9c:	d101      	bne.n	800baa2 <__sflush_r+0x76>
 800ba9e:	682b      	ldr	r3, [r5, #0]
 800baa0:	b903      	cbnz	r3, 800baa4 <__sflush_r+0x78>
 800baa2:	6560      	str	r0, [r4, #84]	@ 0x54
 800baa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800baa6:	602f      	str	r7, [r5, #0]
 800baa8:	b1b9      	cbz	r1, 800bada <__sflush_r+0xae>
 800baaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800baae:	4299      	cmp	r1, r3
 800bab0:	d002      	beq.n	800bab8 <__sflush_r+0x8c>
 800bab2:	4628      	mov	r0, r5
 800bab4:	f7ff fb4a 	bl	800b14c <_free_r>
 800bab8:	2300      	movs	r3, #0
 800baba:	6363      	str	r3, [r4, #52]	@ 0x34
 800babc:	e00d      	b.n	800bada <__sflush_r+0xae>
 800babe:	2301      	movs	r3, #1
 800bac0:	4628      	mov	r0, r5
 800bac2:	47b0      	blx	r6
 800bac4:	4602      	mov	r2, r0
 800bac6:	1c50      	adds	r0, r2, #1
 800bac8:	d1c9      	bne.n	800ba5e <__sflush_r+0x32>
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d0c6      	beq.n	800ba5e <__sflush_r+0x32>
 800bad0:	2b1d      	cmp	r3, #29
 800bad2:	d001      	beq.n	800bad8 <__sflush_r+0xac>
 800bad4:	2b16      	cmp	r3, #22
 800bad6:	d11e      	bne.n	800bb16 <__sflush_r+0xea>
 800bad8:	602f      	str	r7, [r5, #0]
 800bada:	2000      	movs	r0, #0
 800badc:	e022      	b.n	800bb24 <__sflush_r+0xf8>
 800bade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae2:	b21b      	sxth	r3, r3
 800bae4:	e01b      	b.n	800bb1e <__sflush_r+0xf2>
 800bae6:	690f      	ldr	r7, [r1, #16]
 800bae8:	2f00      	cmp	r7, #0
 800baea:	d0f6      	beq.n	800bada <__sflush_r+0xae>
 800baec:	0793      	lsls	r3, r2, #30
 800baee:	680e      	ldr	r6, [r1, #0]
 800baf0:	bf08      	it	eq
 800baf2:	694b      	ldreq	r3, [r1, #20]
 800baf4:	600f      	str	r7, [r1, #0]
 800baf6:	bf18      	it	ne
 800baf8:	2300      	movne	r3, #0
 800bafa:	eba6 0807 	sub.w	r8, r6, r7
 800bafe:	608b      	str	r3, [r1, #8]
 800bb00:	f1b8 0f00 	cmp.w	r8, #0
 800bb04:	dde9      	ble.n	800bada <__sflush_r+0xae>
 800bb06:	6a21      	ldr	r1, [r4, #32]
 800bb08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb0a:	4643      	mov	r3, r8
 800bb0c:	463a      	mov	r2, r7
 800bb0e:	4628      	mov	r0, r5
 800bb10:	47b0      	blx	r6
 800bb12:	2800      	cmp	r0, #0
 800bb14:	dc08      	bgt.n	800bb28 <__sflush_r+0xfc>
 800bb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb28:	4407      	add	r7, r0
 800bb2a:	eba8 0800 	sub.w	r8, r8, r0
 800bb2e:	e7e7      	b.n	800bb00 <__sflush_r+0xd4>
 800bb30:	20400001 	.word	0x20400001

0800bb34 <_fflush_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	690b      	ldr	r3, [r1, #16]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	b913      	cbnz	r3, 800bb44 <_fflush_r+0x10>
 800bb3e:	2500      	movs	r5, #0
 800bb40:	4628      	mov	r0, r5
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	b118      	cbz	r0, 800bb4e <_fflush_r+0x1a>
 800bb46:	6a03      	ldr	r3, [r0, #32]
 800bb48:	b90b      	cbnz	r3, 800bb4e <_fflush_r+0x1a>
 800bb4a:	f7ff f8e9 	bl	800ad20 <__sinit>
 800bb4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0f3      	beq.n	800bb3e <_fflush_r+0xa>
 800bb56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb58:	07d0      	lsls	r0, r2, #31
 800bb5a:	d404      	bmi.n	800bb66 <_fflush_r+0x32>
 800bb5c:	0599      	lsls	r1, r3, #22
 800bb5e:	d402      	bmi.n	800bb66 <_fflush_r+0x32>
 800bb60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb62:	f7ff fae2 	bl	800b12a <__retarget_lock_acquire_recursive>
 800bb66:	4628      	mov	r0, r5
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f7ff ff5f 	bl	800ba2c <__sflush_r>
 800bb6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb70:	07da      	lsls	r2, r3, #31
 800bb72:	4605      	mov	r5, r0
 800bb74:	d4e4      	bmi.n	800bb40 <_fflush_r+0xc>
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	059b      	lsls	r3, r3, #22
 800bb7a:	d4e1      	bmi.n	800bb40 <_fflush_r+0xc>
 800bb7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb7e:	f7ff fad5 	bl	800b12c <__retarget_lock_release_recursive>
 800bb82:	e7dd      	b.n	800bb40 <_fflush_r+0xc>

0800bb84 <__swhatbuf_r>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	460c      	mov	r4, r1
 800bb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	b096      	sub	sp, #88	@ 0x58
 800bb90:	4615      	mov	r5, r2
 800bb92:	461e      	mov	r6, r3
 800bb94:	da0d      	bge.n	800bbb2 <__swhatbuf_r+0x2e>
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb9c:	f04f 0100 	mov.w	r1, #0
 800bba0:	bf14      	ite	ne
 800bba2:	2340      	movne	r3, #64	@ 0x40
 800bba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bba8:	2000      	movs	r0, #0
 800bbaa:	6031      	str	r1, [r6, #0]
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	b016      	add	sp, #88	@ 0x58
 800bbb0:	bd70      	pop	{r4, r5, r6, pc}
 800bbb2:	466a      	mov	r2, sp
 800bbb4:	f000 f8f6 	bl	800bda4 <_fstat_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	dbec      	blt.n	800bb96 <__swhatbuf_r+0x12>
 800bbbc:	9901      	ldr	r1, [sp, #4]
 800bbbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bbc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbc6:	4259      	negs	r1, r3
 800bbc8:	4159      	adcs	r1, r3
 800bbca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbce:	e7eb      	b.n	800bba8 <__swhatbuf_r+0x24>

0800bbd0 <__smakebuf_r>:
 800bbd0:	898b      	ldrh	r3, [r1, #12]
 800bbd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd4:	079d      	lsls	r5, r3, #30
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	460c      	mov	r4, r1
 800bbda:	d507      	bpl.n	800bbec <__smakebuf_r+0x1c>
 800bbdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	6123      	str	r3, [r4, #16]
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	6163      	str	r3, [r4, #20]
 800bbe8:	b003      	add	sp, #12
 800bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbec:	ab01      	add	r3, sp, #4
 800bbee:	466a      	mov	r2, sp
 800bbf0:	f7ff ffc8 	bl	800bb84 <__swhatbuf_r>
 800bbf4:	9f00      	ldr	r7, [sp, #0]
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7fe ff78 	bl	800aaf0 <_malloc_r>
 800bc00:	b948      	cbnz	r0, 800bc16 <__smakebuf_r+0x46>
 800bc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc06:	059a      	lsls	r2, r3, #22
 800bc08:	d4ee      	bmi.n	800bbe8 <__smakebuf_r+0x18>
 800bc0a:	f023 0303 	bic.w	r3, r3, #3
 800bc0e:	f043 0302 	orr.w	r3, r3, #2
 800bc12:	81a3      	strh	r3, [r4, #12]
 800bc14:	e7e2      	b.n	800bbdc <__smakebuf_r+0xc>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	6020      	str	r0, [r4, #0]
 800bc1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	9b01      	ldr	r3, [sp, #4]
 800bc22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc26:	b15b      	cbz	r3, 800bc40 <__smakebuf_r+0x70>
 800bc28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f000 f8cb 	bl	800bdc8 <_isatty_r>
 800bc32:	b128      	cbz	r0, 800bc40 <__smakebuf_r+0x70>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	f023 0303 	bic.w	r3, r3, #3
 800bc3a:	f043 0301 	orr.w	r3, r3, #1
 800bc3e:	81a3      	strh	r3, [r4, #12]
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	431d      	orrs	r5, r3
 800bc44:	81a5      	strh	r5, [r4, #12]
 800bc46:	e7cf      	b.n	800bbe8 <__smakebuf_r+0x18>

0800bc48 <__swbuf_r>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	460e      	mov	r6, r1
 800bc4c:	4614      	mov	r4, r2
 800bc4e:	4605      	mov	r5, r0
 800bc50:	b118      	cbz	r0, 800bc5a <__swbuf_r+0x12>
 800bc52:	6a03      	ldr	r3, [r0, #32]
 800bc54:	b90b      	cbnz	r3, 800bc5a <__swbuf_r+0x12>
 800bc56:	f7ff f863 	bl	800ad20 <__sinit>
 800bc5a:	69a3      	ldr	r3, [r4, #24]
 800bc5c:	60a3      	str	r3, [r4, #8]
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	071a      	lsls	r2, r3, #28
 800bc62:	d501      	bpl.n	800bc68 <__swbuf_r+0x20>
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b943      	cbnz	r3, 800bc7a <__swbuf_r+0x32>
 800bc68:	4621      	mov	r1, r4
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	f000 f82a 	bl	800bcc4 <__swsetup_r>
 800bc70:	b118      	cbz	r0, 800bc7a <__swbuf_r+0x32>
 800bc72:	f04f 37ff 	mov.w	r7, #4294967295
 800bc76:	4638      	mov	r0, r7
 800bc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	6922      	ldr	r2, [r4, #16]
 800bc7e:	1a98      	subs	r0, r3, r2
 800bc80:	6963      	ldr	r3, [r4, #20]
 800bc82:	b2f6      	uxtb	r6, r6
 800bc84:	4283      	cmp	r3, r0
 800bc86:	4637      	mov	r7, r6
 800bc88:	dc05      	bgt.n	800bc96 <__swbuf_r+0x4e>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	f7ff ff51 	bl	800bb34 <_fflush_r>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d1ed      	bne.n	800bc72 <__swbuf_r+0x2a>
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	60a3      	str	r3, [r4, #8]
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	6022      	str	r2, [r4, #0]
 800bca2:	701e      	strb	r6, [r3, #0]
 800bca4:	6962      	ldr	r2, [r4, #20]
 800bca6:	1c43      	adds	r3, r0, #1
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d004      	beq.n	800bcb6 <__swbuf_r+0x6e>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	07db      	lsls	r3, r3, #31
 800bcb0:	d5e1      	bpl.n	800bc76 <__swbuf_r+0x2e>
 800bcb2:	2e0a      	cmp	r6, #10
 800bcb4:	d1df      	bne.n	800bc76 <__swbuf_r+0x2e>
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f7ff ff3b 	bl	800bb34 <_fflush_r>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d0d9      	beq.n	800bc76 <__swbuf_r+0x2e>
 800bcc2:	e7d6      	b.n	800bc72 <__swbuf_r+0x2a>

0800bcc4 <__swsetup_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4b29      	ldr	r3, [pc, #164]	@ (800bd6c <__swsetup_r+0xa8>)
 800bcc8:	4605      	mov	r5, r0
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	460c      	mov	r4, r1
 800bcce:	b118      	cbz	r0, 800bcd8 <__swsetup_r+0x14>
 800bcd0:	6a03      	ldr	r3, [r0, #32]
 800bcd2:	b90b      	cbnz	r3, 800bcd8 <__swsetup_r+0x14>
 800bcd4:	f7ff f824 	bl	800ad20 <__sinit>
 800bcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcdc:	0719      	lsls	r1, r3, #28
 800bcde:	d422      	bmi.n	800bd26 <__swsetup_r+0x62>
 800bce0:	06da      	lsls	r2, r3, #27
 800bce2:	d407      	bmi.n	800bcf4 <__swsetup_r+0x30>
 800bce4:	2209      	movs	r2, #9
 800bce6:	602a      	str	r2, [r5, #0]
 800bce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf2:	e033      	b.n	800bd5c <__swsetup_r+0x98>
 800bcf4:	0758      	lsls	r0, r3, #29
 800bcf6:	d512      	bpl.n	800bd1e <__swsetup_r+0x5a>
 800bcf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcfa:	b141      	cbz	r1, 800bd0e <__swsetup_r+0x4a>
 800bcfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d002      	beq.n	800bd0a <__swsetup_r+0x46>
 800bd04:	4628      	mov	r0, r5
 800bd06:	f7ff fa21 	bl	800b14c <_free_r>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	2300      	movs	r3, #0
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0308 	orr.w	r3, r3, #8
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	6923      	ldr	r3, [r4, #16]
 800bd28:	b94b      	cbnz	r3, 800bd3e <__swsetup_r+0x7a>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd34:	d003      	beq.n	800bd3e <__swsetup_r+0x7a>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f7ff ff49 	bl	800bbd0 <__smakebuf_r>
 800bd3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd42:	f013 0201 	ands.w	r2, r3, #1
 800bd46:	d00a      	beq.n	800bd5e <__swsetup_r+0x9a>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	60a2      	str	r2, [r4, #8]
 800bd4c:	6962      	ldr	r2, [r4, #20]
 800bd4e:	4252      	negs	r2, r2
 800bd50:	61a2      	str	r2, [r4, #24]
 800bd52:	6922      	ldr	r2, [r4, #16]
 800bd54:	b942      	cbnz	r2, 800bd68 <__swsetup_r+0xa4>
 800bd56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd5a:	d1c5      	bne.n	800bce8 <__swsetup_r+0x24>
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	0799      	lsls	r1, r3, #30
 800bd60:	bf58      	it	pl
 800bd62:	6962      	ldrpl	r2, [r4, #20]
 800bd64:	60a2      	str	r2, [r4, #8]
 800bd66:	e7f4      	b.n	800bd52 <__swsetup_r+0x8e>
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e7f7      	b.n	800bd5c <__swsetup_r+0x98>
 800bd6c:	20000028 	.word	0x20000028

0800bd70 <memmove>:
 800bd70:	4288      	cmp	r0, r1
 800bd72:	b510      	push	{r4, lr}
 800bd74:	eb01 0402 	add.w	r4, r1, r2
 800bd78:	d902      	bls.n	800bd80 <memmove+0x10>
 800bd7a:	4284      	cmp	r4, r0
 800bd7c:	4623      	mov	r3, r4
 800bd7e:	d807      	bhi.n	800bd90 <memmove+0x20>
 800bd80:	1e43      	subs	r3, r0, #1
 800bd82:	42a1      	cmp	r1, r4
 800bd84:	d008      	beq.n	800bd98 <memmove+0x28>
 800bd86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd8e:	e7f8      	b.n	800bd82 <memmove+0x12>
 800bd90:	4402      	add	r2, r0
 800bd92:	4601      	mov	r1, r0
 800bd94:	428a      	cmp	r2, r1
 800bd96:	d100      	bne.n	800bd9a <memmove+0x2a>
 800bd98:	bd10      	pop	{r4, pc}
 800bd9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bda2:	e7f7      	b.n	800bd94 <memmove+0x24>

0800bda4 <_fstat_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	@ (800bdc4 <_fstat_r+0x20>)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4604      	mov	r4, r0
 800bdac:	4608      	mov	r0, r1
 800bdae:	4611      	mov	r1, r2
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	f7f6 fc57 	bl	8002664 <_fstat>
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	d102      	bne.n	800bdc0 <_fstat_r+0x1c>
 800bdba:	682b      	ldr	r3, [r5, #0]
 800bdbc:	b103      	cbz	r3, 800bdc0 <_fstat_r+0x1c>
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	bd38      	pop	{r3, r4, r5, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000d54 	.word	0x20000d54

0800bdc8 <_isatty_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	@ (800bde4 <_isatty_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f6 fc56 	bl	8002684 <_isatty>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_isatty_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_isatty_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000d54 	.word	0x20000d54

0800bde8 <_realloc_r>:
 800bde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdec:	4607      	mov	r7, r0
 800bdee:	4614      	mov	r4, r2
 800bdf0:	460d      	mov	r5, r1
 800bdf2:	b921      	cbnz	r1, 800bdfe <_realloc_r+0x16>
 800bdf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	f7fe be79 	b.w	800aaf0 <_malloc_r>
 800bdfe:	b92a      	cbnz	r2, 800be0c <_realloc_r+0x24>
 800be00:	f7ff f9a4 	bl	800b14c <_free_r>
 800be04:	4625      	mov	r5, r4
 800be06:	4628      	mov	r0, r5
 800be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0c:	f000 f81a 	bl	800be44 <_malloc_usable_size_r>
 800be10:	4284      	cmp	r4, r0
 800be12:	4606      	mov	r6, r0
 800be14:	d802      	bhi.n	800be1c <_realloc_r+0x34>
 800be16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be1a:	d8f4      	bhi.n	800be06 <_realloc_r+0x1e>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4638      	mov	r0, r7
 800be20:	f7fe fe66 	bl	800aaf0 <_malloc_r>
 800be24:	4680      	mov	r8, r0
 800be26:	b908      	cbnz	r0, 800be2c <_realloc_r+0x44>
 800be28:	4645      	mov	r5, r8
 800be2a:	e7ec      	b.n	800be06 <_realloc_r+0x1e>
 800be2c:	42b4      	cmp	r4, r6
 800be2e:	4622      	mov	r2, r4
 800be30:	4629      	mov	r1, r5
 800be32:	bf28      	it	cs
 800be34:	4632      	movcs	r2, r6
 800be36:	f7ff f97a 	bl	800b12e <memcpy>
 800be3a:	4629      	mov	r1, r5
 800be3c:	4638      	mov	r0, r7
 800be3e:	f7ff f985 	bl	800b14c <_free_r>
 800be42:	e7f1      	b.n	800be28 <_realloc_r+0x40>

0800be44 <_malloc_usable_size_r>:
 800be44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be48:	1f18      	subs	r0, r3, #4
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	bfbc      	itt	lt
 800be4e:	580b      	ldrlt	r3, [r1, r0]
 800be50:	18c0      	addlt	r0, r0, r3
 800be52:	4770      	bx	lr

0800be54 <_init>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	bf00      	nop
 800be58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5a:	bc08      	pop	{r3}
 800be5c:	469e      	mov	lr, r3
 800be5e:	4770      	bx	lr

0800be60 <_fini>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr
