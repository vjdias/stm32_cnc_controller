
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b988  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800bb18  0800bb18  0000cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0bc  0800c0bc  0000e078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c0bc  0800c0bc  0000d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c4  0800c0c4  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c4  0800c0c4  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0c8  0800c0c8  0000d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800c0cc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000078  0800c144  0000e078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800c144  0000e628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019686  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f3  00000000  00000000  0002772e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001156  00000000  00000000  0002cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028944  00000000  00000000  0002e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206a2  00000000  00000000  0005695a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b81  00000000  00000000  00076ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016db7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006468  00000000  00000000  0016dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00174028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb00 	.word	0x0800bb00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800bb00 	.word	0x0800bb00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e009      	b.n	800070c <xor_reduce_bytes+0x28>
		x ^= p[i];
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4053      	eors	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3f1      	bcc.n	80006f8 <xor_reduce_bytes+0x14>
	return x;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <set_parity_byte+0x1a>
		return -1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e00b      	b.n	8000754 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	18d0      	adds	r0, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	18d4      	adds	r4, r2, r3
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f7ff ffcb 	bl	80006e4 <xor_reduce_bytes>
 800074e:	4603      	mov	r3, r0
 8000750:	7023      	strb	r3, [r4, #0]
	return 0;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	22ab      	movs	r2, #171	@ 0xab
 800076c:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	2254      	movs	r2, #84	@ 0x54
 8000794:	701a      	strb	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	2101      	movs	r1, #1
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff ffb4 	bl	8000722 <set_parity_byte>
 80007ba:	4603      	mov	r3, r0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d802      	bhi.n	80007e8 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e01c      	b.n	8000822 <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80007e8:	2107      	movs	r1, #7
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f7ff ffb6 	bl	800075c <resp_init>
	raw[2] = in->frameId;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3302      	adds	r3, #2
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3303      	adds	r3, #3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	7852      	ldrb	r2, [r2, #1]
 8000802:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3304      	adds	r3, #4
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	7892      	ldrb	r2, [r2, #2]
 800080c:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 800080e:	2205      	movs	r2, #5
 8000810:	2104      	movs	r1, #4
 8000812:	68b8      	ldr	r0, [r7, #8]
 8000814:	f7ff ffc5 	bl	80007a2 <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000818:	2106      	movs	r1, #6
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff ffb1 	bl	8000782 <resp_set_tail>
	return PROTO_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 800082e:	210c      	movs	r1, #12
 8000830:	2001      	movs	r0, #1
 8000832:	f00a f819 	bl	800a868 <calloc>
 8000836:	4603      	mov	r3, r0
}
 8000838:	4618      	mov	r0, r3
 800083a:	bd80      	pop	{r7, pc}

0800083c <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d005      	beq.n	800085a <resp_fifo_push+0x1e>
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <resp_fifo_push+0x1e>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <resp_fifo_push+0x24>
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e03d      	b.n	80008dc <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 8000860:	200c      	movs	r0, #12
 8000862:	f00a f81d 	bl	800a8a0 <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <resp_fifo_push+0x3a>
 8000870:	f06f 0302 	mvn.w	r3, #2
 8000874:	e032      	b.n	80008dc <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f00a f812 	bl	800a8a0 <malloc>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d105      	bne.n	8000898 <resp_fifo_push+0x5c>
 800088c:	6978      	ldr	r0, [r7, #20]
 800088e:	f00a f80f 	bl	800a8b0 <free>
 8000892:	f06f 0302 	mvn.w	r3, #2
 8000896:	e021      	b.n	80008dc <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00a fa9a 	bl	800adda <memcpy>
    n->len = len;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <resp_fifo_push+0x88>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	e002      	b.n	80008ca <resp_fifo_push+0x8e>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	601a      	str	r2, [r3, #0]
    q->tail = n;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	605a      	str	r2, [r3, #4]
    q->count++;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <resp_fifo_pop+0x20>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <resp_fifo_pop+0x20>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <resp_fifo_pop+0x24>
 8000904:	2300      	movs	r3, #0
 8000906:	e02e      	b.n	8000966 <resp_fifo_pop+0x82>
    node_t *n = q->head;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	d202      	bcs.n	800091e <resp_fifo_pop+0x3a>
 8000918:	f06f 0303 	mvn.w	r3, #3
 800091c:	e023      	b.n	8000966 <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	461a      	mov	r2, r3
 8000928:	68b8      	ldr	r0, [r7, #8]
 800092a:	f00a fa56 	bl	800adda <memcpy>
    int ret = (int)n->len;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <resp_fifo_pop+0x66>
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
    q->count--;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	609a      	str	r2, [r3, #8]
    free(n->buf);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f009 ffa9 	bl	800a8b0 <free>
    free(n);
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f009 ffa6 	bl	800a8b0 <free>
    return ret;
 8000964:	693b      	ldr	r3, [r7, #16]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
    if (!r) return;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d01a      	beq.n	80009b8 <router_init+0x48>
    memset(r, 0, sizeof(*r));
 8000982:	2248      	movs	r2, #72	@ 0x48
 8000984:	2100      	movs	r1, #0
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f00a f99c 	bl	800acc4 <memset>
    r->resp = resp_fifo;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	2100      	movs	r1, #0
 8000996:	480a      	ldr	r0, [pc, #40]	@ (80009c0 <router_init+0x50>)
 8000998:	f00a f994 	bl	800acc4 <memset>
    if (h) g_handlers = *h;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <router_init+0x4a>
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <router_init+0x50>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4614      	mov	r4, r2
 80009a8:	461d      	mov	r5, r3
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	e000      	b.n	80009ba <router_init+0x4a>
    if (!r) return;
 80009b8:	bf00      	nop
}
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bdb0      	pop	{r4, r5, r7, pc}
 80009c0:	20000094 	.word	0x20000094

080009c4 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80c0 	beq.w	8000b58 <dispatch+0x194>
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 80bc 	beq.w	8000b58 <dispatch+0x194>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	f240 80b8 	bls.w	8000b58 <dispatch+0x194>
    uint8_t type = f[1];
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b20      	cmp	r3, #32
 80009f4:	dc4a      	bgt.n	8000a8c <dispatch+0xc8>
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f340 80b0 	ble.w	8000b5c <dispatch+0x198>
 80009fc:	3b01      	subs	r3, #1
 80009fe:	2b1f      	cmp	r3, #31
 8000a00:	f200 80ac 	bhi.w	8000b5c <dispatch+0x198>
 8000a04:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <dispatch+0x48>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a93 	.word	0x08000a93
 8000a10:	08000aa9 	.word	0x08000aa9
 8000a14:	08000abf 	.word	0x08000abf
 8000a18:	08000ad5 	.word	0x08000ad5
 8000a1c:	08000aeb 	.word	0x08000aeb
 8000a20:	08000b01 	.word	0x08000b01
 8000a24:	08000b17 	.word	0x08000b17
 8000a28:	08000b5d 	.word	0x08000b5d
 8000a2c:	08000b5d 	.word	0x08000b5d
 8000a30:	08000b5d 	.word	0x08000b5d
 8000a34:	08000b5d 	.word	0x08000b5d
 8000a38:	08000b5d 	.word	0x08000b5d
 8000a3c:	08000b5d 	.word	0x08000b5d
 8000a40:	08000b5d 	.word	0x08000b5d
 8000a44:	08000b5d 	.word	0x08000b5d
 8000a48:	08000b5d 	.word	0x08000b5d
 8000a4c:	08000b5d 	.word	0x08000b5d
 8000a50:	08000b5d 	.word	0x08000b5d
 8000a54:	08000b5d 	.word	0x08000b5d
 8000a58:	08000b5d 	.word	0x08000b5d
 8000a5c:	08000b5d 	.word	0x08000b5d
 8000a60:	08000b5d 	.word	0x08000b5d
 8000a64:	08000b5d 	.word	0x08000b5d
 8000a68:	08000b5d 	.word	0x08000b5d
 8000a6c:	08000b5d 	.word	0x08000b5d
 8000a70:	08000b5d 	.word	0x08000b5d
 8000a74:	08000b5d 	.word	0x08000b5d
 8000a78:	08000b5d 	.word	0x08000b5d
 8000a7c:	08000b5d 	.word	0x08000b5d
 8000a80:	08000b5d 	.word	0x08000b5d
 8000a84:	08000b5d 	.word	0x08000b5d
 8000a88:	08000b2d 	.word	0x08000b2d
 8000a8c:	2b68      	cmp	r3, #104	@ 0x68
 8000a8e:	d058      	beq.n	8000b42 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 8000a90:	e064      	b.n	8000b5c <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <dispatch+0x1c4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d062      	beq.n	8000b60 <dispatch+0x19c>
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b88 <dispatch+0x1c4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	4798      	blx	r3
 8000aa6:	e05b      	b.n	8000b60 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8000aa8:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <dispatch+0x1c4>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d059      	beq.n	8000b64 <dispatch+0x1a0>
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <dispatch+0x1c4>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	4798      	blx	r3
 8000abc:	e052      	b.n	8000b64 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8000abe:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <dispatch+0x1c4>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d050      	beq.n	8000b68 <dispatch+0x1a4>
 8000ac6:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <dispatch+0x1c4>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	4798      	blx	r3
 8000ad2:	e049      	b.n	8000b68 <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <dispatch+0x1c4>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d047      	beq.n	8000b6c <dispatch+0x1a8>
 8000adc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <dispatch+0x1c4>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	4798      	blx	r3
 8000ae8:	e040      	b.n	8000b6c <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8000aea:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <dispatch+0x1c4>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d03e      	beq.n	8000b70 <dispatch+0x1ac>
 8000af2:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <dispatch+0x1c4>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	4798      	blx	r3
 8000afe:	e037      	b.n	8000b70 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <dispatch+0x1c4>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d035      	beq.n	8000b74 <dispatch+0x1b0>
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <dispatch+0x1c4>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	4798      	blx	r3
 8000b14:	e02e      	b.n	8000b74 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <dispatch+0x1c4>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d02c      	beq.n	8000b78 <dispatch+0x1b4>
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <dispatch+0x1c4>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	4798      	blx	r3
 8000b2a:	e025      	b.n	8000b78 <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <dispatch+0x1c4>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d023      	beq.n	8000b7c <dispatch+0x1b8>
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <dispatch+0x1c4>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	4798      	blx	r3
 8000b40:	e01c      	b.n	8000b7c <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <dispatch+0x1c4>)
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d01a      	beq.n	8000b80 <dispatch+0x1bc>
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <dispatch+0x1c4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	4798      	blx	r3
 8000b56:	e013      	b.n	8000b80 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 8000b58:	bf00      	nop
 8000b5a:	e012      	b.n	8000b82 <dispatch+0x1be>
        default: /* desconhecido */  break;
 8000b5c:	bf00      	nop
 8000b5e:	e010      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8000b60:	bf00      	nop
 8000b62:	e00e      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8000b64:	bf00      	nop
 8000b66:	e00c      	b.n	8000b82 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8000b68:	bf00      	nop
 8000b6a:	e00a      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8000b6c:	bf00      	nop
 8000b6e:	e008      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8000b70:	bf00      	nop
 8000b72:	e006      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8000b74:	bf00      	nop
 8000b76:	e004      	b.n	8000b82 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8000b78:	bf00      	nop
 8000b7a:	e002      	b.n	8000b82 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8000b7c:	bf00      	nop
 8000b7e:	e000      	b.n	8000b82 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8000b80:	bf00      	nop
    }
    #undef CALL
}
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000094 	.word	0x20000094

08000b8c <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d016      	beq.n	8000bcc <router_feed_bytes+0x40>
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d013      	beq.n	8000bcc <router_feed_bytes+0x40>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d910      	bls.n	8000bcc <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2baa      	cmp	r3, #170	@ 0xaa
 8000bb0:	d10e      	bne.n	8000bd0 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b55      	cmp	r3, #85	@ 0x55
 8000bbe:	d109      	bne.n	8000bd4 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fefd 	bl	80009c4 <dispatch>
 8000bca:	e004      	b.n	8000bd6 <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8000bcc:	bf00      	nop
 8000bce:	e002      	b.n	8000bd6 <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8000bd0:	bf00      	nop
 8000bd2:	e000      	b.n	8000bd6 <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8000bd4:	bf00      	nop
}
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <home_on_move_home+0x2c>)
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <home_on_move_home+0x30>)
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <home_on_move_home+0x34>)
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <home_on_move_home+0x38>)
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 fc0c 	bl	8001418 <log_event_auto>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	0800bb18 	.word	0x0800bb18
 8000c0c:	0800bb30 	.word	0x0800bb30
 8000c10:	0800bb24 	.word	0x0800bb24
 8000c14:	0800bb40 	.word	0x0800bb40

08000c18 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    if (!led)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d019      	beq.n	8000c5a <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	889b      	ldrh	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f107 020c 	add.w	r2, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fd8a 	bl	800376c <HAL_GPIO_Init>
 8000c58:	e000      	b.n	8000c5c <led_gpio_config_output+0x44>
        return;
 8000c5a:	bf00      	nop
}
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b088      	sub	sp, #32
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
    if (!led)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d01c      	beq.n	8000caa <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	889b      	ldrh	r3, [r3, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f107 020c 	add.w	r2, r7, #12
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fd62 	bl	800376c <HAL_GPIO_Init>
 8000ca8:	e000      	b.n	8000cac <led_gpio_config_pwm+0x4a>
        return;
 8000caa:	bf00      	nop
}
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	733b      	strb	r3, [r7, #12]
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	737b      	strb	r3, [r7, #13]
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8000cd2:	f107 0110 	add.w	r1, r7, #16
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2207      	movs	r2, #7
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd71 	bl	80007c4 <led_ctrl_resp_encoder>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8000ce8:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <led_push_response+0x80>)
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <led_push_response+0x84>)
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <led_push_response+0x88>)
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	f06f 0201 	mvn.w	r2, #1
 8000cf8:	2164      	movs	r1, #100	@ 0x64
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 fb8c 	bl	8001418 <log_event_auto>
 8000d00:	e014      	b.n	8000d2c <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2107      	movs	r1, #7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fe9f 	bl	8001a4c <app_resp_push>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00b      	beq.n	8000d2c <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <led_push_response+0x80>)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <led_push_response+0x8c>)
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <led_push_response+0x88>)
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	f06f 0203 	mvn.w	r2, #3
 8000d24:	2164      	movs	r1, #100	@ 0x64
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fb76 	bl	8001418 <log_event_auto>
    }
}
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	0800bb4c 	.word	0x0800bb4c
 8000d38:	0800bb50 	.word	0x0800bb50
 8000d3c:	0800bb6c 	.word	0x0800bb6c
 8000d40:	0800bb74 	.word	0x0800bb74

08000d44 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 8000d4a:	f004 f8d5 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 8000d4e:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <led_timer_get_clock+0x34>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000d58:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <led_timer_get_clock+0x28>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <led_timer_get_clock+0x28>
        clk *= 2u;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8000d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d80:	b094      	sub	sp, #80	@ 0x50
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8000d88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <led_compute_period_ticks+0x16>
        return 0u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e066      	b.n	8000e60 <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 8000d92:	f7ff ffd7 	bl	8000d44 <led_timer_get_clock>
 8000d96:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8000d98:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <led_compute_period_ticks+0xf0>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 8000da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <led_compute_period_ticks+0x2e>
        return 0u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e05a      	b.n	8000e60 <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8000daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8000db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <led_compute_period_ticks+0x42>
        return 0u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e050      	b.n	8000e60 <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	464b      	mov	r3, r9
 8000dca:	1891      	adds	r1, r2, r2
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	415b      	adcs	r3, r3
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd6:	eb12 0408 	adds.w	r4, r2, r8
 8000dda:	eb43 0509 	adc.w	r5, r3, r9
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	016b      	lsls	r3, r5, #5
 8000de8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dec:	0162      	lsls	r2, r4, #5
 8000dee:	eb14 0a02 	adds.w	sl, r4, r2
 8000df2:	eb45 0b03 	adc.w	fp, r5, r3
 8000df6:	eb1a 0308 	adds.w	r3, sl, r8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	eb4b 0309 	adc.w	r3, fp, r9
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e06:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8000e0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	623b      	str	r3, [r7, #32]
 8000e16:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e1c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e20:	4621      	mov	r1, r4
 8000e22:	1889      	adds	r1, r1, r2
 8000e24:	61b9      	str	r1, [r7, #24]
 8000e26:	4629      	mov	r1, r5
 8000e28:	eb43 0101 	adc.w	r1, r3, r1
 8000e2c:	61f9      	str	r1, [r7, #28]
 8000e2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e30:	2200      	movs	r2, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	617a      	str	r2, [r7, #20]
 8000e36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e3e:	f7ff fa17 	bl	8000270 <__aeabi_uldivmod>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 8000e4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d305      	bcc.n	8000e5e <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 8000e52:	f04f 32ff 	mov.w	r2, #4294967295
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 8000e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3750      	adds	r7, #80	@ 0x50
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000404 	.word	0x20000404

08000e70 <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <led_apply_pwm+0x14>
        period_ticks = 1u;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d901      	bls.n	8000e90 <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <led_apply_pwm+0x2c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <led_apply_pwm+0x2e>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000eba:	f007 f9a7 	bl	800820c <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 8000ebe:	4a03      	ldr	r2, [pc, #12]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000404 	.word	0x20000404

08000ed0 <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	6078      	str	r0, [r7, #4]
    if (!led)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d029      	beq.n	8000f32 <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000ede:	f000 f913 	bl	8001108 <led_pwm_stop>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00d      	beq.n	8000f08 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8000eec:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <led_force_off+0x6c>)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <led_force_off+0x70>)
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <led_force_off+0x74>)
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	f06f 0203 	mvn.w	r2, #3
 8000f00:	2164      	movs	r1, #100	@ 0x64
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fa88 	bl	8001418 <log_event_auto>
    }
    led_gpio_config_output(led);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fe85 	bl	8000c18 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f002 ffdd 	bl	8003ed8 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	735a      	strb	r2, [r3, #13]
 8000f30:	e000      	b.n	8000f34 <led_force_off+0x64>
        return;
 8000f32:	bf00      	nop
}
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800bb4c 	.word	0x0800bb4c
 8000f40:	0800bb8c 	.word	0x0800bb8c
 8000f44:	0800bbb0 	.word	0x0800bbb0

08000f48 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
    if (!led)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d029      	beq.n	8000faa <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000f56:	f000 f8d7 	bl	8001108 <led_pwm_stop>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00d      	beq.n	8000f80 <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8000f64:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <led_force_on+0x6c>)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <led_force_on+0x70>)
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <led_force_on+0x74>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	f06f 0203 	mvn.w	r2, #3
 8000f78:	2164      	movs	r1, #100	@ 0x64
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 fa4c 	bl	8001418 <log_event_auto>
    }
    led_gpio_config_output(led);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fe49 	bl	8000c18 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4619      	mov	r1, r3
 8000f92:	f002 ffa1 	bl	8003ed8 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	735a      	strb	r2, [r3, #13]
 8000fa8:	e000      	b.n	8000fac <led_force_on+0x64>
        return;
 8000faa:	bf00      	nop
}
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800bb4c 	.word	0x0800bb4c
 8000fb8:	0800bb8c 	.word	0x0800bb8c
 8000fbc:	0800bbb0 	.word	0x0800bbb0

08000fc0 <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d03c      	beq.n	800104c <led_force_blink+0x8c>
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d039      	beq.n	800104c <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fece 	bl	8000d7c <led_compute_period_ticks>
 8000fe0:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d801      	bhi.n	8000fec <led_force_blink+0x2c>
        period_ticks = 2u;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff2:	d902      	bls.n	8000ffa <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff8:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fe2e 	bl	8000c62 <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff ff31 	bl	8000e70 <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 800100e:	f000 f85d 	bl	80010cc <led_pwm_start>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00f      	beq.n	8001038 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001018:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <led_force_blink+0x94>)
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <led_force_blink+0x98>)
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <led_force_blink+0x9c>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	f06f 0203 	mvn.w	r2, #3
 8001028:	2164      	movs	r1, #100	@ 0x64
 800102a:	2001      	movs	r0, #1
 800102c:	f000 f9f4 	bl	8001418 <log_event_auto>
        led_force_off(led);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff4d 	bl	8000ed0 <led_force_off>
        return;
 8001036:	e00a      	b.n	800104e <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	735a      	strb	r2, [r3, #13]
 800104a:	e000      	b.n	800104e <led_force_blink+0x8e>
        return;
 800104c:	bf00      	nop
}
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	0800bb4c 	.word	0x0800bb4c
 8001058:	0800bbb8 	.word	0x0800bbb8
 800105c:	0800bbb0 	.word	0x0800bbb0

08001060 <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d026      	beq.n	80010c4 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 800107c:	2300      	movs	r3, #0
 800107e:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001080:	f3ef 8310 	mrs	r3, PRIMASK
 8001084:	60bb      	str	r3, [r7, #8]
  return(result);
 8001086:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001088:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800108a:	b672      	cpsid	i
}
 800108c:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d103      	bne.n	800109c <led_apply_config+0x3c>
        led_force_on(led);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff57 	bl	8000f48 <led_force_on>
 800109a:	e00e      	b.n	80010ba <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d108      	bne.n	80010b4 <led_apply_config+0x54>
 80010a2:	883b      	ldrh	r3, [r7, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 80010a8:	883b      	ldrh	r3, [r7, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff87 	bl	8000fc0 <led_force_blink>
 80010b2:	e002      	b.n	80010ba <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff0b 	bl	8000ed0 <led_force_off>
    }

    if (primask == 0u) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80010c0:	b662      	cpsie	i
}
 80010c2:	e000      	b.n	80010c6 <led_apply_config+0x66>
        return;
 80010c4:	bf00      	nop
        __enable_irq();
    }
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <led_pwm_start+0x34>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <led_pwm_start+0x12>
        return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e00c      	b.n	80010f8 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	4808      	ldr	r0, [pc, #32]	@ (8001104 <led_pwm_start+0x38>)
 80010e2:	f006 f897 	bl	8007214 <HAL_TIM_PWM_Start>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <led_pwm_start+0x34>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
    }
    return st;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000b8 	.word	0x200000b8
 8001104:	20000404 	.word	0x20000404

08001108 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <led_pwm_stop+0x64>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <led_pwm_stop+0x12>
        return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e024      	b.n	8001164 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <led_pwm_stop+0x68>)
 800111e:	f006 fa29 	bl	8007574 <HAL_TIM_PWM_Stop>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d11a      	bne.n	8001162 <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <led_pwm_stop+0x68>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a1a      	ldr	r2, [r3, #32]
 8001132:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <led_pwm_stop+0x54>
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <led_pwm_stop+0x68>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	f240 4344 	movw	r3, #1092	@ 0x444
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <led_pwm_stop+0x54>
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <led_pwm_stop+0x68>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <led_pwm_stop+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <led_pwm_stop+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001162:	79fb      	ldrb	r3, [r7, #7]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000b8 	.word	0x200000b8
 8001170:	20000404 	.word	0x20000404

08001174 <led_on_led_ctrl>:
    }

    led_force_off(&g_leds[0]);
}

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b097      	sub	sp, #92	@ 0x5c
 8001178:	af0a      	add	r7, sp, #40	@ 0x28
 800117a:	6178      	str	r0, [r7, #20]
 800117c:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80d2 	beq.w	800132a <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d902      	bls.n	8001192 <led_on_led_ctrl+0x1e>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001190:	d90e      	bls.n	80011b0 <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001192:	4a68      	ldr	r2, [pc, #416]	@ (8001334 <led_on_led_ctrl+0x1c0>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <led_on_led_ctrl+0x1c4>)
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4b67      	ldr	r3, [pc, #412]	@ (800133c <led_on_led_ctrl+0x1c8>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	f06f 0203 	mvn.w	r2, #3
 80011a6:	2164      	movs	r1, #100	@ 0x64
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 f935 	bl	8001418 <log_event_auto>
        return;
 80011ae:	e0bd      	b.n	800132c <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	461a      	mov	r2, r3
 80011b6:	6939      	ldr	r1, [r7, #16]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff fa55 	bl	8000668 <led_ctrl_req_decoder>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 80011c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00f      	beq.n	80011ec <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 80011cc:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80011d0:	4958      	ldr	r1, [pc, #352]	@ (8001334 <led_on_led_ctrl+0x1c0>)
 80011d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <led_on_led_ctrl+0x1cc>)
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	4b59      	ldr	r3, [pc, #356]	@ (8001344 <led_on_led_ctrl+0x1d0>)
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	460b      	mov	r3, r1
 80011e2:	2164      	movs	r1, #100	@ 0x64
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 f917 	bl	8001418 <log_event_auto>
        return;
 80011ea:	e09f      	b.n	800132c <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 80011ec:	7f7b      	ldrb	r3, [r7, #29]
 80011ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001208:	e02d      	b.n	8001266 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001210:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001218:	4013      	ands	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01e      	beq.n	800125e <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001220:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001228:	4313      	orrs	r3, r2
 800122a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 800122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 8001234:	1898      	adds	r0, r3, r2
 8001236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	3320      	adds	r3, #32
 800123c:	f107 0210 	add.w	r2, r7, #16
 8001240:	4413      	add	r3, r2
 8001242:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	3320      	adds	r3, #32
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	4413      	add	r3, r2
 8001252:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001256:	461a      	mov	r2, r3
 8001258:	f7ff ff02 	bl	8001060 <led_apply_config>
 800125c:	e000      	b.n	8001260 <led_on_led_ctrl+0xec>
            continue;
 800125e:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001262:	3301      	adds	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ce      	beq.n	800120a <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 800126c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001270:	43db      	mvns	r3, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001278:	4013      	ands	r3, r2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001280:	2301      	movs	r3, #1
 8001282:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001286:	e00a      	b.n	800129e <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800128c:	2b00      	cmp	r3, #0
 800128e:	d106      	bne.n	800129e <led_on_led_ctrl+0x12a>
 8001290:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001298:	2301      	movs	r3, #1
 800129a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 800129e:	7f3b      	ldrb	r3, [r7, #28]
 80012a0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80012a4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd03 	bl	8000cb4 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 80012ae:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80012b2:	4e20      	ldr	r6, [pc, #128]	@ (8001334 <led_on_led_ctrl+0x1c0>)
 80012b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012b8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012be:	7b1b      	ldrb	r3, [r3, #12]
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012c4:	89db      	ldrh	r3, [r3, #14]
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <led_on_led_ctrl+0x1d8>)
 80012c8:	fba0 0303 	umull	r0, r3, r0, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012d4:	89db      	ldrh	r3, [r3, #14]
 80012d6:	481d      	ldr	r0, [pc, #116]	@ (800134c <led_on_led_ctrl+0x1d8>)
 80012d8:	fba0 5003 	umull	r5, r0, r0, r3
 80012dc:	0940      	lsrs	r0, r0, #5
 80012de:	2564      	movs	r5, #100	@ 0x64
 80012e0:	fb05 f000 	mul.w	r0, r5, r0
 80012e4:	1a1b      	subs	r3, r3, r0
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461d      	mov	r5, r3
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012ec:	7b5b      	ldrb	r3, [r3, #13]
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <led_on_led_ctrl+0x1dc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	3301      	adds	r3, #1
 80012f8:	4815      	ldr	r0, [pc, #84]	@ (8001350 <led_on_led_ctrl+0x1dc>)
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80012fe:	9009      	str	r0, [sp, #36]	@ 0x24
 8001300:	9308      	str	r3, [sp, #32]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	9007      	str	r0, [sp, #28]
 8001306:	9506      	str	r5, [sp, #24]
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	9005      	str	r0, [sp, #20]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	9304      	str	r3, [sp, #16]
 8001310:	9103      	str	r1, [sp, #12]
 8001312:	9202      	str	r2, [sp, #8]
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <led_on_led_ctrl+0x1e0>)
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <led_on_led_ctrl+0x1e4>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4633      	mov	r3, r6
 800131e:	4622      	mov	r2, r4
 8001320:	2102      	movs	r1, #2
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f878 	bl	8001418 <log_event_auto>
 8001328:	e000      	b.n	800132c <led_on_led_ctrl+0x1b8>
        return;
 800132a:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
}
 800132c:	3734      	adds	r7, #52	@ 0x34
 800132e:	46bd      	mov	sp, r7
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	bf00      	nop
 8001334:	0800bb4c 	.word	0x0800bb4c
 8001338:	0800bc24 	.word	0x0800bc24
 800133c:	0800bc40 	.word	0x0800bc40
 8001340:	0800bc44 	.word	0x0800bc44
 8001344:	0800bc68 	.word	0x0800bc68
 8001348:	20000000 	.word	0x20000000
 800134c:	51eb851f 	.word	0x51eb851f
 8001350:	20000404 	.word	0x20000404
 8001354:	0800bc70 	.word	0x0800bc70
 8001358:	0800bcc0 	.word	0x0800bcc0

0800135c <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	460b      	mov	r3, r1
 800136a:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 800136c:	79f9      	ldrb	r1, [r7, #7]
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <log_event_ids+0x24>)
 8001374:	f009 fc14 	bl	800aba0 <iprintf>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	0800bcc8 	.word	0x0800bcc8

08001384 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <log_event_names+0x16>
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <log_event_names+0x40>)
 8001398:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <log_event_names+0x20>
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <log_event_names+0x40>)
 80013a2:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <log_event_names+0x2a>
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <log_event_names+0x40>)
 80013ac:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	68f9      	ldr	r1, [r7, #12]
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <log_event_names+0x44>)
 80013b6:	f009 fbf3 	bl	800aba0 <iprintf>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	0800bce8 	.word	0x0800bce8
 80013c8:	0800bcec 	.word	0x0800bcec

080013cc <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d002      	beq.n	80013e4 <_write+0x18>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d111      	bne.n	8001408 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	4809      	ldr	r0, [pc, #36]	@ (8001414 <_write+0x48>)
 80013f0:	f008 fb78 	bl	8009ae4 <HAL_UART_Transmit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <_write+0x36>
        return len;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e004      	b.n	800140c <_write+0x40>
      else
        return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e001      	b.n	800140c <_write+0x40>
    }
    return -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000450 	.word	0x20000450

08001418 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a8      	sub	sp, #160	@ 0xa0
 800141c:	af00      	add	r7, sp, #0
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	460b      	mov	r3, r1
 8001428:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 800142a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <log_event_auto+0x3c>
 8001432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 800143c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001440:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001442:	f107 0018 	add.w	r0, r7, #24
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	f009 fc2b 	bl	800aca8 <vsniprintf>
    if(fmt && fmt[0]){
 8001452:	e003      	b.n	800145c <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8001458:	2300      	movs	r3, #0
 800145a:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <log_event_auto+0x4e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e000      	b.n	8001468 <log_event_auto+0x50>
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <log_event_auto+0x84>)
 8001468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 800146c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <log_event_auto+0x62>
 8001474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001478:	e000      	b.n	800147c <log_event_auto+0x64>
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <log_event_auto+0x84>)
 800147c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001488:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <log_event_auto+0x88>)
 800148e:	f009 fb87 	bl	800aba0 <iprintf>
}
 8001492:	bf00      	nop
 8001494:	37a0      	adds	r7, #160	@ 0xa0
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800bce8 	.word	0x0800bce8
 80014a0:	0800bcec 	.word	0x0800bcec

080014a4 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014ca:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <motion_on_move_queue_add+0x54>)
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <motion_on_move_queue_add+0x58>)
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <motion_on_move_queue_add+0x5c>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff ff97 	bl	8001418 <log_event_auto>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000bc 	.word	0x200000bc
 80014f8:	0800bd10 	.word	0x0800bd10
 80014fc:	0800bd28 	.word	0x0800bd28
 8001500:	0800bd38 	.word	0x0800bd38

08001504 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af04      	add	r7, sp, #16
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 800150e:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <motion_on_move_queue_status+0x3c>)
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <motion_on_move_queue_status+0x40>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4619      	mov	r1, r3
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <motion_on_move_queue_status+0x40>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	9102      	str	r1, [sp, #8]
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <motion_on_move_queue_status+0x44>)
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <motion_on_move_queue_status+0x48>)
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff ff71 	bl	8001418 <log_event_auto>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	0800bd10 	.word	0x0800bd10
 8001544:	200000bc 	.word	0x200000bc
 8001548:	0800bd44 	.word	0x0800bd44
 800154c:	0800bd5c 	.word	0x0800bd5c

08001550 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <motion_on_start_move+0x4c>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <motion_on_start_move+0x4c>)
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800156a:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <motion_on_start_move+0x50>)
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <motion_on_start_move+0x4c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d101      	bne.n	800157a <motion_on_start_move+0x2a>
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <motion_on_start_move+0x54>)
 8001578:	e000      	b.n	800157c <motion_on_start_move+0x2c>
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <motion_on_start_move+0x58>)
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <motion_on_start_move+0x5c>)
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <motion_on_start_move+0x60>)
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4613      	mov	r3, r2
 8001588:	2200      	movs	r2, #0
 800158a:	2102      	movs	r1, #2
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff ff43 	bl	8001418 <log_event_auto>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000bc 	.word	0x200000bc
 80015a0:	0800bd10 	.word	0x0800bd10
 80015a4:	0800bd6c 	.word	0x0800bd6c
 80015a8:	0800bd74 	.word	0x0800bd74
 80015ac:	0800bd1c 	.word	0x0800bd1c
 80015b0:	0800bd7c 	.word	0x0800bd7c

080015b4 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <motion_on_move_end+0x34>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 80015c4:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <motion_on_move_end+0x38>)
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <motion_on_move_end+0x3c>)
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <motion_on_move_end+0x40>)
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <motion_on_move_end+0x44>)
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	4613      	mov	r3, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff ff1d 	bl	8001418 <log_event_auto>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000bc 	.word	0x200000bc
 80015ec:	0800bd10 	.word	0x0800bd10
 80015f0:	0800bd88 	.word	0x0800bd88
 80015f4:	0800bd1c 	.word	0x0800bd1c
 80015f8:	0800bd94 	.word	0x0800bd94

080015fc <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af04      	add	r7, sp, #16
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <probe_on_move_probe_level+0x2c>)
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <probe_on_move_probe_level+0x30>)
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <probe_on_move_probe_level+0x34>)
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <probe_on_move_probe_level+0x38>)
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	2101      	movs	r1, #1
 800161a:	2004      	movs	r0, #4
 800161c:	f7ff fefc 	bl	8001418 <log_event_auto>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800bda0 	.word	0x0800bda0
 800162c:	0800bdb8 	.word	0x0800bdb8
 8001630:	0800bdac 	.word	0x0800bdac
 8001634:	0800bdc8 	.word	0x0800bdc8

08001638 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68b8      	ldr	r0, [r7, #8]
 8001648:	f7ff ff2c 	bl	80014a4 <motion_on_move_queue_add>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f7ff ff4e 	bl	8001504 <motion_on_move_queue_status>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f7ff ff66 	bl	8001550 <motion_on_start_move>
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f7ff fa9e 	bl	8000bdc <home_on_move_home>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f7ff ffa0 	bl	80015fc <probe_on_move_probe_level>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f7ff ff6e 	bl	80015b4 <motion_on_move_end>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fd40 	bl	8001174 <led_on_led_ctrl>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if (!h)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01b      	beq.n	8001772 <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <services_register_handlers+0x54>)
 800173e:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a10      	ldr	r2, [pc, #64]	@ (8001784 <services_register_handlers+0x58>)
 8001744:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0f      	ldr	r2, [pc, #60]	@ (8001788 <services_register_handlers+0x5c>)
 800174a:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <services_register_handlers+0x60>)
 8001750:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <services_register_handlers+0x64>)
 8001756:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <services_register_handlers+0x68>)
 800175c:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <services_register_handlers+0x6c>)
 8001762:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <services_register_handlers+0x70>)
 8001768:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <services_register_handlers+0x74>)
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	e000      	b.n	8001774 <services_register_handlers+0x48>
		return;
 8001772:	bf00      	nop
}
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	08001639 	.word	0x08001639
 8001784:	08001655 	.word	0x08001655
 8001788:	08001671 	.word	0x08001671
 800178c:	0800168d 	.word	0x0800168d
 8001790:	080016a9 	.word	0x080016a9
 8001794:	080016c5 	.word	0x080016c5
 8001798:	080016e1 	.word	0x080016e1
 800179c:	080016fd 	.word	0x080016fd
 80017a0:	08001715 	.word	0x08001715

080017a4 <is_fill42>:
static volatile app_spi_state_t g_state         = APP_SPI_READY;

// ----------------- Helpers mínimos -----------------

// Verifica se todo o buffer é preenchido por "val" (ex.: 42×0x3C)
static int is_fill42(const uint8_t *buf, uint8_t val) {
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e00b      	b.n	80017ce <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <is_fill42+0x24>
 80017c4:	2300      	movs	r3, #0
 80017c6:	e006      	b.n	80017d6 <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b29      	cmp	r3, #41	@ 0x29
 80017d2:	d9f0      	bls.n	80017b6 <is_fill42+0x12>
    return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <find_frame>:

// Localiza um quadro [0xAA ... 0x55] dentro do buffer
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len) {
 80017e2:	b480      	push	{r7}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 80017f2:	e002      	b.n	80017fa <find_frame+0x18>
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	3301      	adds	r3, #1
 80017f8:	82fb      	strh	r3, [r7, #22]
 80017fa:	8afb      	ldrh	r3, [r7, #22]
 80017fc:	2b29      	cmp	r3, #41	@ 0x29
 80017fe:	d805      	bhi.n	800180c <find_frame+0x2a>
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2baa      	cmp	r3, #170	@ 0xaa
 800180a:	d1f3      	bne.n	80017f4 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	2b29      	cmp	r3, #41	@ 0x29
 8001810:	d901      	bls.n	8001816 <find_frame+0x34>
 8001812:	2300      	movs	r3, #0
 8001814:	e01d      	b.n	8001852 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8001816:	8afb      	ldrh	r3, [r7, #22]
 8001818:	3301      	adds	r3, #1
 800181a:	82bb      	strh	r3, [r7, #20]
 800181c:	e015      	b.n	800184a <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 800181e:	8abb      	ldrh	r3, [r7, #20]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b55      	cmp	r3, #85	@ 0x55
 8001828:	d10c      	bne.n	8001844 <find_frame+0x62>
            *off = i;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	8afa      	ldrh	r2, [r7, #22]
 800182e:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8001830:	8aba      	ldrh	r2, [r7, #20]
 8001832:	8afb      	ldrh	r3, [r7, #22]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	801a      	strh	r2, [r3, #0]
            return 1;
 8001840:	2301      	movs	r3, #1
 8001842:	e006      	b.n	8001852 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8001844:	8abb      	ldrh	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	82bb      	strh	r3, [r7, #20]
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	2b29      	cmp	r3, #41	@ 0x29
 800184e:	d9e6      	bls.n	800181e <find_frame+0x3c>
        }
    }
    return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <prepare_next_tx>:

// Prepara TX para o próximo round: copia resposta (se houver) ou 42×A5
// Prepara TX para o próximo round:
// - Se houver resposta (n > 0): zera o quadro e alinha a resposta à direita.
// - Se não houver: 42×A5 (filler/poll sem payload).
static void prepare_next_tx(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (!g_resp_fifo) {
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <prepare_next_tx+0x7c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <prepare_next_tx+0x24>
        // Sem fila -> filler A5
        memset(g_spi_tx_dma_buf, SPI_FILL_BYTE, APP_SPI_DMA_BUF_LEN);
 8001872:	222a      	movs	r2, #42	@ 0x2a
 8001874:	21a5      	movs	r1, #165	@ 0xa5
 8001876:	481a      	ldr	r0, [pc, #104]	@ (80018e0 <prepare_next_tx+0x80>)
 8001878:	f009 fa24 	bl	800acc4 <memset>
        g_state = APP_SPI_READY;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <prepare_next_tx+0x84>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e028      	b.n	80018d6 <prepare_next_tx+0x76>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <prepare_next_tx+0x7c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4639      	mov	r1, r7
 800188a:	222a      	movs	r2, #42	@ 0x2a
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f829 	bl	80008e4 <resp_fifo_pop>
 8001892:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (n > 0) {
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	dd15      	ble.n	80018c6 <prepare_next_tx+0x66>
        // >>> comportamento desejado <<<
        // zeros à esquerda + payload encodado (com 0xAB no começo) à direita
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 800189a:	222a      	movs	r2, #42	@ 0x2a
 800189c:	2100      	movs	r1, #0
 800189e:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <prepare_next_tx+0x80>)
 80018a0:	f009 fa10 	bl	800acc4 <memset>
        uint16_t off = (uint16_t)(APP_SPI_DMA_BUF_LEN - (uint16_t)n);
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80018ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
        memcpy(&g_spi_tx_dma_buf[off], tmp, (size_t)n);
 80018ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018b0:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <prepare_next_tx+0x80>)
 80018b2:	4413      	add	r3, r2
 80018b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b6:	4639      	mov	r1, r7
 80018b8:	4618      	mov	r0, r3
 80018ba:	f009 fa8e 	bl	800adda <memcpy>
        g_state = APP_SPI_PENDING;
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <prepare_next_tx+0x84>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <prepare_next_tx+0x76>
    } else {
        // sem resposta -> 42 × A5
        memset(g_spi_tx_dma_buf, SPI_FILL_BYTE, APP_SPI_DMA_BUF_LEN);
 80018c6:	222a      	movs	r2, #42	@ 0x2a
 80018c8:	21a5      	movs	r1, #165	@ 0xa5
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <prepare_next_tx+0x80>)
 80018cc:	f009 f9fa 	bl	800acc4 <memset>
        g_state = APP_SPI_READY;
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <prepare_next_tx+0x84>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    }
}
 80018d6:	3730      	adds	r7, #48	@ 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000130 	.word	0x20000130
 80018e0:	20000160 	.word	0x20000160
 80018e4:	2000018c 	.word	0x2000018c

080018e8 <restart_spi_dma>:


// Reinicia uma transação DMA (não bloqueante)
static void restart_spi_dma(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    // >>> NOVO: garanta FIFO RX limpo antes da nova rodada (anti-deslocamento)
    spi_post_dma_rx_fifo_sanity(&hspi1);
 80018ec:	480e      	ldr	r0, [pc, #56]	@ (8001928 <restart_spi_dma+0x40>)
 80018ee:	f000 f902 	bl	8001af6 <spi_post_dma_rx_fifo_sanity>

    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 80018f2:	480d      	ldr	r0, [pc, #52]	@ (8001928 <restart_spi_dma+0x40>)
 80018f4:	f004 ffb8 	bl	8006868 <HAL_SPI_GetState>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d003      	beq.n	8001906 <restart_spi_dma+0x1e>
        g_spi_error_flag = 1u;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <restart_spi_dma+0x44>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
        return;
 8001904:	e00f      	b.n	8001926 <restart_spi_dma+0x3e>
    }
    if (HAL_SPI_TransmitReceive_DMA(&hspi1,
 8001906:	232a      	movs	r3, #42	@ 0x2a
 8001908:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <restart_spi_dma+0x48>)
 800190a:	490a      	ldr	r1, [pc, #40]	@ (8001934 <restart_spi_dma+0x4c>)
 800190c:	4806      	ldr	r0, [pc, #24]	@ (8001928 <restart_spi_dma+0x40>)
 800190e:	f004 fcdf 	bl	80062d0 <HAL_SPI_TransmitReceive_DMA>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <restart_spi_dma+0x38>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <restart_spi_dma+0x44>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
        return;
 800191e:	e002      	b.n	8001926 <restart_spi_dma+0x3e>
    }
    g_state = APP_SPI_BUSY;
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <restart_spi_dma+0x50>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
}
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000190 	.word	0x20000190
 800192c:	2000018b 	.word	0x2000018b
 8001930:	20000134 	.word	0x20000134
 8001934:	20000160 	.word	0x20000160
 8001938:	2000018c 	.word	0x2000018c

0800193c <app_init>:

// ----------------- API -----------------

void app_init(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    // Registra serviços no router (seu projeto já deve prover isso)
    memset(&g_handlers, 0, sizeof g_handlers);
 8001940:	2224      	movs	r2, #36	@ 0x24
 8001942:	2100      	movs	r1, #0
 8001944:	480e      	ldr	r0, [pc, #56]	@ (8001980 <app_init+0x44>)
 8001946:	f009 f9bd 	bl	800acc4 <memset>
    // Se você usa adapters de serviços, registre aqui:
    services_register_handlers(&g_handlers);
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <app_init+0x44>)
 800194c:	f7ff feee 	bl	800172c <services_register_handlers>

    g_resp_fifo = resp_fifo_create();
 8001950:	f7fe ff6b 	bl	800082a <resp_fifo_create>
 8001954:	4603      	mov	r3, r0
 8001956:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <app_init+0x48>)
 8001958:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <app_init+0x48>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <app_init+0x44>)
 8001960:	4619      	mov	r1, r3
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <app_init+0x4c>)
 8001964:	f7ff f804 	bl	8000970 <router_init>

    // Primeiro frame: apenas filler
    memset(g_spi_tx_dma_buf, SPI_FILL_BYTE, APP_SPI_DMA_BUF_LEN);
 8001968:	222a      	movs	r2, #42	@ 0x2a
 800196a:	21a5      	movs	r1, #165	@ 0xa5
 800196c:	4807      	ldr	r0, [pc, #28]	@ (800198c <app_init+0x50>)
 800196e:	f009 f9a9 	bl	800acc4 <memset>
    restart_spi_dma();
 8001972:	f7ff ffb9 	bl	80018e8 <restart_spi_dma>
    g_state = APP_SPI_READY;
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <app_init+0x54>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000010c 	.word	0x2000010c
 8001984:	20000130 	.word	0x20000130
 8001988:	200000c4 	.word	0x200000c4
 800198c:	20000160 	.word	0x20000160
 8001990:	2000018c 	.word	0x2000018c

08001994 <app_poll>:

void app_poll(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
    // Só processa quando um round DMA foi concluído pelo HAL
    if (!g_spi_round_done) return;
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <app_poll+0x6c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d028      	beq.n	80019f6 <app_poll+0x62>
    g_spi_round_done = 0u;
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <app_poll+0x6c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

    // 1) Interpretar o RX atual
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 80019aa:	213c      	movs	r1, #60	@ 0x3c
 80019ac:	4815      	ldr	r0, [pc, #84]	@ (8001a04 <app_poll+0x70>)
 80019ae:	f7ff fef9 	bl	80017a4 <is_fill42>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d119      	bne.n	80019ec <app_poll+0x58>
        // 42×0x3C => cliente apenas leu respostas; não alimenta router
    } else {
        // Tenta extrair [0xAA ... 0x55] e empurrar para o router
        uint16_t off = 0, len = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	2300      	movs	r3, #0
 80019be:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 80019c0:	1d3a      	adds	r2, r7, #4
 80019c2:	1dbb      	adds	r3, r7, #6
 80019c4:	4619      	mov	r1, r3
 80019c6:	480f      	ldr	r0, [pc, #60]	@ (8001a04 <app_poll+0x70>)
 80019c8:	f7ff ff0b 	bl	80017e2 <find_frame>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <app_poll+0x70>)
 80019d8:	4413      	add	r3, r2
 80019da:	88ba      	ldrh	r2, [r7, #4]
 80019dc:	4619      	mov	r1, r3
 80019de:	480a      	ldr	r0, [pc, #40]	@ (8001a08 <app_poll+0x74>)
 80019e0:	f7ff f8d4 	bl	8000b8c <router_feed_bytes>
 80019e4:	e002      	b.n	80019ec <app_poll+0x58>
        } else {
            // quadro inválido/parcial ou outro padrão -> marca erro
            g_spi_error_flag = 1u;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <app_poll+0x78>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
        }
    }

    // 2) Preparar TX (resposta ou 42×A5)
    prepare_next_tx();
 80019ec:	f7ff ff38 	bl	8001860 <prepare_next_tx>

    // 3) Reiniciar o DMA para o próximo round
    restart_spi_dma();
 80019f0:	f7ff ff7a 	bl	80018e8 <restart_spi_dma>
 80019f4:	e000      	b.n	80019f8 <app_poll+0x64>
    if (!g_spi_round_done) return;
 80019f6:	bf00      	nop
}
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000018a 	.word	0x2000018a
 8001a04:	20000134 	.word	0x20000134
 8001a08:	200000c4 	.word	0x200000c4
 8001a0c:	2000018b 	.word	0x2000018b

08001a10 <app_spi_isr_txrx_done>:
app_spi_state_t app_spi_get_state(void) { return g_state; }
uint8_t         app_spi_get_error(void) { return g_spi_error_flag; }

// ----------------- Chamadas a partir dos callbacks do HAL -----------------

void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a08      	ldr	r2, [pc, #32]	@ (8001a44 <app_spi_isr_txrx_done+0x34>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d108      	bne.n	8001a3a <app_spi_isr_txrx_done+0x2a>

    // >>> NOVO: saneamento pós-DMA (limpa RX FIFO se sobrou algo)
    spi_post_dma_rx_fifo_sanity(hspi);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f864 	bl	8001af6 <spi_post_dma_rx_fifo_sanity>

    // Sinaliza para o loop principal processar RX->router e TX->DMA
    g_spi_round_done = 1u;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <app_spi_isr_txrx_done+0x38>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e002      	b.n	8001a3c <app_spi_isr_txrx_done+0x2c>
    if (!hspi) return;
 8001a36:	bf00      	nop
 8001a38:	e000      	b.n	8001a3c <app_spi_isr_txrx_done+0x2c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8001a3a:	bf00      	nop
}
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40013000 	.word	0x40013000
 8001a48:	2000018a 	.word	0x2000018a

08001a4c <app_resp_push>:

int app_resp_push(const uint8_t *frame, uint32_t len) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <app_resp_push+0x48>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <app_resp_push+0x1e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <app_resp_push+0x1e>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e00d      	b.n	8001a8c <app_resp_push+0x40>
    }
    // opcional: proteger contra resposta maior que o quadro DMA
    if (len > APP_SPI_DMA_BUF_LEN) {
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a74:	d902      	bls.n	8001a7c <app_resp_push+0x30>
        return PROTO_ERR_RANGE;
 8001a76:	f06f 0303 	mvn.w	r3, #3
 8001a7a:	e007      	b.n	8001a8c <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <app_resp_push+0x48>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fed9 	bl	800083c <resp_fifo_push>
 8001a8a:	4603      	mov	r3, r0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000130 	.word	0x20000130

08001a98 <spi_rx_fifo_drain>:
   Observações:
   - Este código assume DataSize = 8 bits (buffers uint8_t). Se usar 16 bits,
     faça leitura em 16 bits do DR.
   ============================================================================ */

static void spi_rx_fifo_drain(SPI_HandleTypeDef *hspi) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
    // Drena enquanto houver dados visíveis (RXNE = 1); limite de segurança evita loop infinito
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) && guard++ < 64u) {
 8001aa4:	e003      	b.n	8001aae <spi_rx_fifo_drain+0x16>
        (void)*(__IO uint8_t *)&hspi->Instance->DR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	330c      	adds	r3, #12
 8001aac:	781b      	ldrb	r3, [r3, #0]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) && guard++ < 64u) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d104      	bne.n	8001ac6 <spi_rx_fifo_drain+0x2e>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60fa      	str	r2, [r7, #12]
 8001ac2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ac4:	d9ef      	bls.n	8001aa6 <spi_rx_fifo_drain+0xe>
    }
    // Se houve overrun, limpe a flag adequadamente
#ifdef SPI_SR_OVR
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR)) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ad0:	2b40      	cmp	r3, #64	@ 0x40
 8001ad2:	d10a      	bne.n	8001aea <spi_rx_fifo_drain+0x52>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    }
#endif
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <spi_post_dma_rx_fifo_sanity>:

static inline void spi_post_dma_rx_fifo_sanity(SPI_HandleTypeDef *hspi) {
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <spi_post_dma_rx_fifo_sanity+0x1c>
        spi_rx_fifo_drain(hspi);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffc3 	bl	8001a98 <spi_rx_fifo_drain>
    }
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b08e      	sub	sp, #56	@ 0x38
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2224      	movs	r2, #36	@ 0x24
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f009 f8ca 	bl	800acc4 <memset>
    TIM_MasterConfigTypeDef master = {0};
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f005 fe38 	bl	80077dc <HAL_TIM_Encoder_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8001b72:	f000 fa8f 	bl	8002094 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f007 fc59 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8001b90:	f000 fa80 	bl	8002094 <Error_Handler>
    }
}
 8001b94:	bf00      	nop
 8001b96:	3738      	adds	r7, #56	@ 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f001 fdcc 	bl	800376c <HAL_GPIO_Init>
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	@ 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	2113      	movs	r1, #19
 8001bf4:	4824      	ldr	r0, [pc, #144]	@ (8001c88 <board_config_apply_motion_gpio+0xac>)
 8001bf6:	f7ff ffd1 	bl	8001b9c <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4822      	ldr	r0, [pc, #136]	@ (8001c88 <board_config_apply_motion_gpio+0xac>)
 8001c00:	f7ff ffcc 	bl	8001b9c <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001c04:	2203      	movs	r2, #3
 8001c06:	210c      	movs	r1, #12
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f7ff ffc6 	bl	8001b9c <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2130      	movs	r1, #48	@ 0x30
 8001c14:	481d      	ldr	r0, [pc, #116]	@ (8001c8c <board_config_apply_motion_gpio+0xb0>)
 8001c16:	f7ff ffc1 	bl	8001b9c <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f7ff ffba 	bl	8001b9c <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2117      	movs	r1, #23
 8001c2c:	4816      	ldr	r0, [pc, #88]	@ (8001c88 <board_config_apply_motion_gpio+0xac>)
 8001c2e:	f002 f953 	bl	8003ed8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	210c      	movs	r1, #12
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3a:	f002 f94d 	bl	8003ed8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2130      	movs	r1, #48	@ 0x30
 8001c42:	4812      	ldr	r0, [pc, #72]	@ (8001c8c <board_config_apply_motion_gpio+0xb0>)
 8001c44:	f002 f948 	bl	8003ed8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c52:	f002 f941 	bl	8003ed8 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c5a:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001c60:	2307      	movs	r3, #7
 8001c62:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4808      	ldr	r0, [pc, #32]	@ (8001c8c <board_config_apply_motion_gpio+0xb0>)
 8001c6a:	f001 fd7f 	bl	800376c <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 8001c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c72:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4804      	ldr	r0, [pc, #16]	@ (8001c8c <board_config_apply_motion_gpio+0xb0>)
 8001c7a:	f001 fd77 	bl	800376c <HAL_GPIO_Init>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	48000800 	.word	0x48000800

08001c90 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <board_config_force_encoder_quadrature+0x1c>)
 8001c96:	f7ff ff40 	bl	8001b1a <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <board_config_force_encoder_quadrature+0x20>)
 8001c9c:	f7ff ff3d 	bl	8001b1a <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <board_config_force_encoder_quadrature+0x24>)
 8001ca2:	f7ff ff3a 	bl	8001b1a <configure_encoder_timer>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000288 	.word	0x20000288
 8001cb0:	200002d4 	.word	0x200002d4
 8001cb4:	20000320 	.word	0x20000320

08001cb8 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8001ccc:	2118      	movs	r1, #24
 8001cce:	4811      	ldr	r0, [pc, #68]	@ (8001d14 <board_config_remap_tim3_encoder_pins+0x5c>)
 8001cd0:	f001 ffd8 	bl	8003c84 <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <board_config_remap_tim3_encoder_pins+0x60>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <board_config_remap_tim3_encoder_pins+0x60>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <board_config_remap_tim3_encoder_pins+0x60>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001cec:	23c0      	movs	r3, #192	@ 0xc0
 8001cee:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <board_config_remap_tim3_encoder_pins+0x64>)
 8001d06:	f001 fd31 	bl	800376c <HAL_GPIO_Init>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	48001000 	.word	0x48001000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000800 	.word	0x48000800

08001d20 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2006      	movs	r0, #6
 8001d2a:	f001 f989 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d2e:	2006      	movs	r0, #6
 8001d30:	f001 f9b2 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2007      	movs	r0, #7
 8001d3a:	f001 f981 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d3e:	2007      	movs	r0, #7
 8001d40:	f001 f9aa 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2008      	movs	r0, #8
 8001d4a:	f001 f979 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d4e:	2008      	movs	r0, #8
 8001d50:	f001 f9a2 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2028      	movs	r0, #40	@ 0x28
 8001d5a:	f001 f971 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d5e:	2028      	movs	r0, #40	@ 0x28
 8001d60:	f001 f99a 	bl	8003098 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2101      	movs	r1, #1
 8001d68:	2036      	movs	r0, #54	@ 0x36
 8001d6a:	f001 f969 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d6e:	2036      	movs	r0, #54	@ 0x36
 8001d70:	f001 f992 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2102      	movs	r1, #2
 8001d78:	200c      	movs	r0, #12
 8001d7a:	f001 f961 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d7e:	200c      	movs	r0, #12
 8001d80:	f001 f98a 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	200d      	movs	r0, #13
 8001d8a:	f001 f959 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d8e:	200d      	movs	r0, #13
 8001d90:	f001 f982 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2103      	movs	r1, #3
 8001d98:	2037      	movs	r0, #55	@ 0x37
 8001d9a:	f001 f951 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d9e:	2037      	movs	r0, #55	@ 0x37
 8001da0:	f001 f97a 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2104      	movs	r1, #4
 8001da8:	2025      	movs	r0, #37	@ 0x25
 8001daa:	f001 f949 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dae:	2025      	movs	r0, #37	@ 0x25
 8001db0:	f001 f972 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2105      	movs	r1, #5
 8001db8:	2023      	movs	r0, #35	@ 0x23
 8001dba:	f001 f941 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001dbe:	2023      	movs	r0, #35	@ 0x23
 8001dc0:	f001 f96a 	bl	8003098 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2106      	movs	r1, #6
 8001dc8:	2018      	movs	r0, #24
 8001dca:	f001 f939 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dce:	2018      	movs	r0, #24
 8001dd0:	f001 f962 	bl	8003098 <HAL_NVIC_EnableIRQ>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <MX_DMA_Init+0x48>)
 8001de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e20 <MX_DMA_Init+0x48>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <MX_DMA_Init+0x48>)
 8001dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	200c      	movs	r0, #12
 8001dfc:	f001 f920 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e00:	200c      	movs	r0, #12
 8001e02:	f001 f949 	bl	8003098 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	200d      	movs	r0, #13
 8001e0c:	f001 f918 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e10:	200d      	movs	r0, #13
 8001e12:	f001 f941 	bl	8003098 <HAL_NVIC_EnableIRQ>

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	@ 0x30
 8001e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4a46      	ldr	r2, [pc, #280]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5e:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4a3a      	ldr	r2, [pc, #232]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4b38      	ldr	r3, [pc, #224]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4b35      	ldr	r3, [pc, #212]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4a34      	ldr	r2, [pc, #208]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4b32      	ldr	r3, [pc, #200]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <MX_GPIO_Init+0x14c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001eca:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 8001ece:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4825      	ldr	r0, [pc, #148]	@ (8001f74 <MX_GPIO_Init+0x150>)
 8001ee0:	f001 fc44 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ee8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eea:	2303      	movs	r3, #3
 8001eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481f      	ldr	r0, [pc, #124]	@ (8001f78 <MX_GPIO_Init+0x154>)
 8001efa:	f001 fc37 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efe:	2303      	movs	r3, #3
 8001f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481a      	ldr	r0, [pc, #104]	@ (8001f7c <MX_GPIO_Init+0x158>)
 8001f12:	f001 fc2b 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f16:	f641 7308 	movw	r3, #7944	@ 0x1f08
 8001f1a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2e:	f001 fc1d 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001f32:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 8001f36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <MX_GPIO_Init+0x15c>)
 8001f48:	f001 fc10 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f52:	2303      	movs	r3, #3
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4808      	ldr	r0, [pc, #32]	@ (8001f84 <MX_GPIO_Init+0x160>)
 8001f62:	f001 fc03 	bl	800376c <HAL_GPIO_Init>

}
 8001f66:	bf00      	nop
 8001f68:	3730      	adds	r7, #48	@ 0x30
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48001000 	.word	0x48001000
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	48001c00 	.word	0x48001c00
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48000c00 	.word	0x48000c00

08001f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8c:	f000 fef3 	bl	8002d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f90:	f000 f821 	bl	8001fd6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f94:	f7ff ff46 	bl	8001e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f98:	f7ff ff1e 	bl	8001dd8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001f9c:	f000 f89e 	bl	80020dc <MX_SPI1_Init>
  MX_TIM6_Init();
 8001fa0:	f000 fbb6 	bl	8002710 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001fa4:	f000 fab4 	bl	8002510 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001fa8:	f000 fb5c 	bl	8002664 <MX_TIM5_Init>
  MX_TIM7_Init();
 8001fac:	f000 fbe6 	bl	800277c <MX_TIM7_Init>
  MX_TIM3_Init();
 8001fb0:	f000 fb02 	bl	80025b8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001fb4:	f000 fe28 	bl	8002c08 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8001fb8:	f000 fc16 	bl	80027e8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8001fbc:	f7ff fe0e 	bl	8001bdc <board_config_apply_motion_gpio>
    board_config_remap_tim3_encoder_pins();
 8001fc0:	f7ff fe7a 	bl	8001cb8 <board_config_remap_tim3_encoder_pins>
    board_config_force_encoder_quadrature();
 8001fc4:	f7ff fe64 	bl	8001c90 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8001fc8:	f7ff feaa 	bl	8001d20 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 8001fcc:	f7ff fcb6 	bl	800193c <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8001fd0:	f7ff fce0 	bl	8001994 <app_poll>
 8001fd4:	e7fc      	b.n	8001fd0 <main+0x48>

08001fd6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b096      	sub	sp, #88	@ 0x58
 8001fda:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2244      	movs	r2, #68	@ 0x44
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f008 fe6d 	bl	800acc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ff8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ffc:	f001 ffca 	bl	8003f94 <HAL_PWREx_ControlVoltageScaling>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002006:	f000 f845 	bl	8002094 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800200a:	2310      	movs	r3, #16
 800200c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800200e:	2301      	movs	r3, #1
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002016:	2360      	movs	r3, #96	@ 0x60
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201a:	2302      	movs	r3, #2
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800201e:	2301      	movs	r3, #1
 8002020:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002026:	2328      	movs	r3, #40	@ 0x28
 8002028:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800202a:	2307      	movs	r3, #7
 800202c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800202e:	2302      	movs	r3, #2
 8002030:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002032:	2302      	movs	r3, #2
 8002034:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4618      	mov	r0, r3
 800203c:	f002 f80c 	bl	8004058 <HAL_RCC_OscConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002046:	f000 f825 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	230f      	movs	r3, #15
 800204c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204e:	2303      	movs	r3, #3
 8002050:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	2104      	movs	r1, #4
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fcf9 	bl	8004a5c <HAL_RCC_ClockConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002070:	f000 f810 	bl	8002094 <Error_Handler>
  }
}
 8002074:	bf00      	nop
 8002076:	3758      	adds	r7, #88	@ 0x58
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fcc3 	bl	8001a10 <app_spi_isr_txrx_done>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	2164      	movs	r1, #100	@ 0x64
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff f95c 	bl	800135c <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <Error_Handler+0x24>)
 80020a6:	4905      	ldr	r1, [pc, #20]	@ (80020bc <Error_Handler+0x28>)
 80020a8:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <Error_Handler+0x2c>)
 80020aa:	f7ff f96b 	bl	8001384 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 80020ae:	b672      	cpsid	i
}
 80020b0:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <Error_Handler+0x1e>
 80020b6:	bf00      	nop
 80020b8:	0800bddc 	.word	0x0800bddc
 80020bc:	0800bdec 	.word	0x0800bdec
 80020c0:	0800bdf4 	.word	0x0800bdf4

080020c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <MX_SPI1_Init+0x68>)
 80020e2:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <MX_SPI1_Init+0x6c>)
 80020e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <MX_SPI1_Init+0x68>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <MX_SPI1_Init+0x68>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f2:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <MX_SPI1_Init+0x68>)
 80020f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <MX_SPI1_Init+0x68>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_SPI1_Init+0x68>)
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <MX_SPI1_Init+0x68>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <MX_SPI1_Init+0x68>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_SPI1_Init+0x68>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <MX_SPI1_Init+0x68>)
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_SPI1_Init+0x68>)
 8002120:	2207      	movs	r2, #7
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <MX_SPI1_Init+0x68>)
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_SPI1_Init+0x68>)
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	@ (8002144 <MX_SPI1_Init+0x68>)
 8002132:	f003 fedf 	bl	8005ef4 <HAL_SPI_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800213c:	f7ff ffaa 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000190 	.word	0x20000190
 8002148:	40013000 	.word	0x40013000

0800214c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a45      	ldr	r2, [pc, #276]	@ (8002280 <HAL_SPI_MspInit+0x134>)
 800216a:	4293      	cmp	r3, r2
 800216c:	f040 8083 	bne.w	8002276 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002170:	4b44      	ldr	r3, [pc, #272]	@ (8002284 <HAL_SPI_MspInit+0x138>)
 8002172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002174:	4a43      	ldr	r2, [pc, #268]	@ (8002284 <HAL_SPI_MspInit+0x138>)
 8002176:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800217a:	6613      	str	r3, [r2, #96]	@ 0x60
 800217c:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_SPI_MspInit+0x138>)
 800217e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b3e      	ldr	r3, [pc, #248]	@ (8002284 <HAL_SPI_MspInit+0x138>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218c:	4a3d      	ldr	r2, [pc, #244]	@ (8002284 <HAL_SPI_MspInit+0x138>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_SPI_MspInit+0x138>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021a0:	23f0      	movs	r3, #240	@ 0xf0
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b0:	2305      	movs	r3, #5
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021be:	f001 fad5 	bl	800376c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021c4:	4a31      	ldr	r2, [pc, #196]	@ (800228c <HAL_SPI_MspInit+0x140>)
 80021c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80021c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e0:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e6:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80021ec:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021ee:	2220      	movs	r2, #32
 80021f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021f2:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80021f8:	4823      	ldr	r0, [pc, #140]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 80021fa:	f000 ff71 	bl	80030e0 <HAL_DMA_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002204:	f7ff ff46 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 800220c:	659a      	str	r2, [r3, #88]	@ 0x58
 800220e:	4a1e      	ldr	r2, [pc, #120]	@ (8002288 <HAL_SPI_MspInit+0x13c>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002216:	4a1f      	ldr	r2, [pc, #124]	@ (8002294 <HAL_SPI_MspInit+0x148>)
 8002218:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800221a:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 800221c:	2201      	movs	r2, #1
 800221e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002220:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002222:	2210      	movs	r2, #16
 8002224:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002226:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800222c:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002232:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002240:	2220      	movs	r2, #32
 8002242:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800224a:	4811      	ldr	r0, [pc, #68]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 800224c:	f000 ff48 	bl	80030e0 <HAL_DMA_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8002256:	f7ff ff1d 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002260:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_SPI_MspInit+0x144>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2023      	movs	r0, #35	@ 0x23
 800226c:	f000 fee8 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002270:	2023      	movs	r0, #35	@ 0x23
 8002272:	f000 ff11 	bl	8003098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	@ 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40013000 	.word	0x40013000
 8002284:	40021000 	.word	0x40021000
 8002288:	200001f4 	.word	0x200001f4
 800228c:	4002001c 	.word	0x4002001c
 8002290:	2000023c 	.word	0x2000023c
 8002294:	40020030 	.word	0x40020030

08002298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <HAL_MspInit+0x44>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <HAL_MspInit+0x44>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_MspInit+0x44>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_MspInit+0x44>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_MspInit+0x44>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_MspInit+0x44>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <NMI_Handler+0x4>

080022e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <MemManage_Handler+0x4>

080022f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <UsageFault_Handler+0x4>

08002308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002336:	f000 fd73 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <DMA1_Channel2_IRQHandler+0x10>)
 8002346:	f001 f932 	bl	80035ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200001f4 	.word	0x200001f4

08002354 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <DMA1_Channel3_IRQHandler+0x10>)
 800235a:	f001 f928 	bl	80035ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000023c 	.word	0x2000023c

08002368 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <SPI1_IRQHandler+0x10>)
 800236e:	f004 f953 	bl	8006618 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000190 	.word	0x20000190

0800237c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <TIM6_DAC_IRQHandler+0x10>)
 8002382:	f005 fbed 	bl	8007b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000036c 	.word	0x2000036c

08002390 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <TIM7_IRQHandler+0x10>)
 8002396:	f005 fbe3 	bl	8007b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200003b8 	.word	0x200003b8

080023a4 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f001 fdc1 	bl	8003f30 <HAL_GPIO_EXTI_IRQHandler>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023b6:	2002      	movs	r0, #2
 80023b8:	f001 fdba 	bl	8003f30 <HAL_GPIO_EXTI_IRQHandler>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023c4:	2004      	movs	r0, #4
 80023c6:	f001 fdb3 	bl	8003f30 <HAL_GPIO_EXTI_IRQHandler>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80023d6:	f001 fdab 	bl	8003f30 <HAL_GPIO_EXTI_IRQHandler>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e00a      	b.n	8002406 <_read+0x28>
		*ptr++ = __io_getchar();
 80023f0:	f3af 8000 	nop.w
 80023f4:	4601      	mov	r1, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	b2ca      	uxtb	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	dbf0      	blt.n	80023f0 <_read+0x12>
	}

	return len;
 800240e:	687b      	ldr	r3, [r7, #4]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002440:	605a      	str	r2, [r3, #4]
	return 0;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_isatty>:

int _isatty(int file) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002458:	2301      	movs	r3, #1
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002488:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <_sbrk+0x64>)
 800249e:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <_sbrk+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <_sbrk+0x40>
		errno = ENOMEM;
 80024b0:	f008 fc66 	bl	800ad80 <__errno>
 80024b4:	4603      	mov	r3, r0
 80024b6:	220c      	movs	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e009      	b.n	80024d4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <_sbrk+0x64>)
 80024d0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20018000 	.word	0x20018000
 80024e0:	00000400 	.word	0x00000400
 80024e4:	20000284 	.word	0x20000284
 80024e8:	20000628 	.word	0x20000628

080024ec <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <SystemInit+0x20>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	4a05      	ldr	r2, [pc, #20]	@ (800250c <SystemInit+0x20>)
 80024f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	2224      	movs	r2, #36	@ 0x24
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f008 fbd0 	bl	800acc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	463b      	mov	r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 8002530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002536:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002542:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002556:	2301      	movs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800255e:	2301      	movs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800256e:	2301      	movs	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 8002582:	f005 f92b 	bl	80077dc <HAL_TIM_Encoder_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800258c:	f7ff fd82 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_TIM2_Init+0xa4>)
 800259e:	f006 ff4d 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80025a8:	f7ff fd74 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	@ 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000288 	.word	0x20000288

080025b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	@ 0x30
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2224      	movs	r2, #36	@ 0x24
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f008 fb7c 	bl	800acc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025cc:	463b      	mov	r3, r7
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <MX_TIM3_Init+0xa4>)
 80025d8:	4a21      	ldr	r2, [pc, #132]	@ (8002660 <MX_TIM3_Init+0xa8>)
 80025da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025dc:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <MX_TIM3_Init+0xa4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <MX_TIM3_Init+0xa4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <MX_TIM3_Init+0xa4>)
 80025ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_TIM3_Init+0xa4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <MX_TIM3_Init+0xa4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002604:	2301      	movs	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002614:	2301      	movs	r3, #1
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	@ (800265c <MX_TIM3_Init+0xa4>)
 8002628:	f005 f8d8 	bl	80077dc <HAL_TIM_Encoder_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002632:	f7ff fd2f 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263e:	463b      	mov	r3, r7
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	@ (800265c <MX_TIM3_Init+0xa4>)
 8002644:	f006 fefa 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800264e:	f7ff fd21 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	3730      	adds	r7, #48	@ 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200002d4 	.word	0x200002d4
 8002660:	40000400 	.word	0x40000400

08002664 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	@ 0x30
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	2224      	movs	r2, #36	@ 0x24
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f008 fb26 	bl	800acc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <MX_TIM5_Init+0xa4>)
 8002684:	4a21      	ldr	r2, [pc, #132]	@ (800270c <MX_TIM5_Init+0xa8>)
 8002686:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <MX_TIM5_Init+0xa4>)
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <MX_TIM5_Init+0xa4>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002694:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <MX_TIM5_Init+0xa4>)
 8002696:	f04f 32ff 	mov.w	r2, #4294967295
 800269a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <MX_TIM5_Init+0xa4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a2:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <MX_TIM5_Init+0xa4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026b0:	2301      	movs	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	4619      	mov	r1, r3
 80026d2:	480d      	ldr	r0, [pc, #52]	@ (8002708 <MX_TIM5_Init+0xa4>)
 80026d4:	f005 f882 	bl	80077dc <HAL_TIM_Encoder_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80026de:	f7ff fcd9 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026ea:	463b      	mov	r3, r7
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	@ (8002708 <MX_TIM5_Init+0xa4>)
 80026f0:	f006 fea4 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80026fa:	f7ff fccb 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	3730      	adds	r7, #48	@ 0x30
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000320 	.word	0x20000320
 800270c:	40000c00 	.word	0x40000c00

08002710 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_TIM6_Init+0x64>)
 8002722:	4a15      	ldr	r2, [pc, #84]	@ (8002778 <MX_TIM6_Init+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <MX_TIM6_Init+0x64>)
 8002728:	224f      	movs	r2, #79	@ 0x4f
 800272a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <MX_TIM6_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <MX_TIM6_Init+0x64>)
 8002734:	2213      	movs	r2, #19
 8002736:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002738:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <MX_TIM6_Init+0x64>)
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800273e:	480d      	ldr	r0, [pc, #52]	@ (8002774 <MX_TIM6_Init+0x64>)
 8002740:	f004 fb4a 	bl	8006dd8 <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800274a:	f7ff fca3 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800274e:	2320      	movs	r3, #32
 8002750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	@ (8002774 <MX_TIM6_Init+0x64>)
 800275c:	f006 fe6e 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002766:	f7ff fc95 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000036c 	.word	0x2000036c
 8002778:	40001000 	.word	0x40001000

0800277c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <MX_TIM7_Init+0x64>)
 800278e:	4a15      	ldr	r2, [pc, #84]	@ (80027e4 <MX_TIM7_Init+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002792:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <MX_TIM7_Init+0x64>)
 8002794:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002798:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <MX_TIM7_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <MX_TIM7_Init+0x64>)
 80027a2:	2209      	movs	r2, #9
 80027a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <MX_TIM7_Init+0x64>)
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80027ac:	480c      	ldr	r0, [pc, #48]	@ (80027e0 <MX_TIM7_Init+0x64>)
 80027ae:	f004 fb13 	bl	8006dd8 <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80027b8:	f7ff fc6c 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <MX_TIM7_Init+0x64>)
 80027ca:	f006 fe37 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027d4:	f7ff fc5e 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200003b8 	.word	0x200003b8
 80027e4:	40001400 	.word	0x40001400

080027e8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09a      	sub	sp, #104	@ 0x68
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002808:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	615a      	str	r2, [r3, #20]
 800281a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	222c      	movs	r2, #44	@ 0x2c
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f008 fa4e 	bl	800acc4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002828:	4b3e      	ldr	r3, [pc, #248]	@ (8002924 <MX_TIM15_Init+0x13c>)
 800282a:	4a3f      	ldr	r2, [pc, #252]	@ (8002928 <MX_TIM15_Init+0x140>)
 800282c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 800282e:	4b3d      	ldr	r3, [pc, #244]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002830:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8002834:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800283c:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <MX_TIM15_Init+0x13c>)
 800283e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002842:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800284a:	4b36      	ldr	r3, [pc, #216]	@ (8002924 <MX_TIM15_Init+0x13c>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b34      	ldr	r3, [pc, #208]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002856:	4833      	ldr	r0, [pc, #204]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002858:	f004 fabe 	bl	8006dd8 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002862:	f7ff fc17 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800286c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002870:	4619      	mov	r1, r3
 8002872:	482c      	ldr	r0, [pc, #176]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002874:	f005 fd4e 	bl	8008314 <HAL_TIM_ConfigClockSource>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 800287e:	f7ff fc09 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002882:	4828      	ldr	r0, [pc, #160]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002884:	f004 fbb2 	bl	8006fec <HAL_TIM_PWM_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 800288e:	f7ff fc01 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800289a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800289e:	4619      	mov	r1, r3
 80028a0:	4820      	ldr	r0, [pc, #128]	@ (8002924 <MX_TIM15_Init+0x13c>)
 80028a2:	f006 fdcb 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80028ac:	f7ff fbf2 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b0:	2360      	movs	r3, #96	@ 0x60
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028c8:	2300      	movs	r3, #0
 80028ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4813      	ldr	r0, [pc, #76]	@ (8002924 <MX_TIM15_Init+0x13c>)
 80028d6:	f005 fa4b 	bl	8007d70 <HAL_TIM_PWM_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80028e0:	f7ff fbd8 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4807      	ldr	r0, [pc, #28]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002908:	f006 feee 	bl	80096e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 8002912:	f7ff fbbf 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002916:	4803      	ldr	r0, [pc, #12]	@ (8002924 <MX_TIM15_Init+0x13c>)
 8002918:	f000 f920 	bl	8002b5c <HAL_TIM_MspPostInit>

}
 800291c:	bf00      	nop
 800291e:	3768      	adds	r7, #104	@ 0x68
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000404 	.word	0x20000404
 8002928:	40014000 	.word	0x40014000

0800292c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08e      	sub	sp, #56	@ 0x38
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294c:	d146      	bne.n	80029dc <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800294e:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002952:	4a52      	ldr	r2, [pc, #328]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6593      	str	r3, [r2, #88]	@ 0x58
 800295a:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b4d      	ldr	r3, [pc, #308]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002972:	4b4a      	ldr	r3, [pc, #296]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	4a46      	ldr	r2, [pc, #280]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800298a:	4b44      	ldr	r3, [pc, #272]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a8:	2301      	movs	r3, #1
 80029aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029b6:	f000 fed9 	bl	800376c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029ba:	2308      	movs	r3, #8
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ca:	2301      	movs	r3, #1
 80029cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d2:	4619      	mov	r1, r3
 80029d4:	4832      	ldr	r0, [pc, #200]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x174>)
 80029d6:	f000 fec9 	bl	800376c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80029da:	e05b      	b.n	8002a94 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a30      	ldr	r2, [pc, #192]	@ (8002aa4 <HAL_TIM_Encoder_MspInit+0x178>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d128      	bne.n	8002a38 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a04:	f043 0310 	orr.w	r3, r3, #16
 8002a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a16:	2318      	movs	r3, #24
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2e:	4619      	mov	r1, r3
 8002a30:	481d      	ldr	r0, [pc, #116]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x17c>)
 8002a32:	f000 fe9b 	bl	800376c <HAL_GPIO_Init>
}
 8002a36:	e02d      	b.n	8002a94 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_TIM_Encoder_MspInit+0x180>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d128      	bne.n	8002a94 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a42:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	4a15      	ldr	r2, [pc, #84]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4e:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a66:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x170>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a72:	2303      	movs	r3, #3
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a82:	2302      	movs	r3, #2
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a90:	f000 fe6c 	bl	800376c <HAL_GPIO_Init>
}
 8002a94:	bf00      	nop
 8002a96:	3738      	adds	r7, #56	@ 0x38
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	48000400 	.word	0x48000400
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	48001000 	.word	0x48001000
 8002aac:	40000c00 	.word	0x40000c00

08002ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a23      	ldr	r2, [pc, #140]	@ (8002b4c <HAL_TIM_Base_MspInit+0x9c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d114      	bne.n	8002aec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ac2:	4b23      	ldr	r3, [pc, #140]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ace:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2036      	movs	r0, #54	@ 0x36
 8002ae0:	f000 faae 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ae4:	2036      	movs	r0, #54	@ 0x36
 8002ae6:	f000 fad7 	bl	8003098 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002aea:	e02a      	b.n	8002b42 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_TIM_Base_MspInit+0xa4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d114      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002afc:	f043 0320 	orr.w	r3, r3, #32
 8002b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2037      	movs	r0, #55	@ 0x37
 8002b14:	f000 fa94 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b18:	2037      	movs	r0, #55	@ 0x37
 8002b1a:	f000 fabd 	bl	8003098 <HAL_NVIC_EnableIRQ>
}
 8002b1e:	e010      	b.n	8002b42 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_TIM_Base_MspInit+0xa8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10b      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_TIM_Base_MspInit+0xa0>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40001000 	.word	0x40001000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40001400 	.word	0x40001400
 8002b58:	40014000 	.word	0x40014000

08002b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a20      	ldr	r2, [pc, #128]	@ (8002bfc <HAL_TIM_MspPostInit+0xa0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d139      	bne.n	8002bf2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <HAL_TIM_MspPostInit+0xa4>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	4a1f      	ldr	r2, [pc, #124]	@ (8002c00 <HAL_TIM_MspPostInit+0xa4>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_TIM_MspPostInit+0xa4>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_TIM_MspPostInit+0xa4>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <HAL_TIM_MspPostInit+0xa4>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba2:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <HAL_TIM_MspPostInit+0xa4>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bae:	2304      	movs	r3, #4
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002bbe:	230e      	movs	r3, #14
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bcc:	f000 fdce 	bl	800376c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002be2:	230e      	movs	r3, #14
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <HAL_TIM_MspPostInit+0xa8>)
 8002bee:	f000 fdbd 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	@ 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40014000 	.word	0x40014000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	48000400 	.word	0x48000400

08002c08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c0e:	4a15      	ldr	r2, [pc, #84]	@ (8002c64 <MX_USART1_UART_Init+0x5c>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_USART1_UART_Init+0x58>)
 8002c4c:	f006 fea2 	bl	8009994 <HAL_UART_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c56:	f7ff fa1d 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000450 	.word	0x20000450
 8002c64:	40013800 	.word	0x40013800

08002c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0ac      	sub	sp, #176	@ 0xb0
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2288      	movs	r2, #136	@ 0x88
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f008 f81b 	bl	800acc4 <memset>
  if(uartHandle->Instance==USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <HAL_UART_MspInit+0xb0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d13a      	bne.n	8002d0e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 f99d 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cb0:	f7ff f9f0 	bl	8002094 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_UART_MspInit+0xb4>)
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <HAL_UART_MspInit+0xb4>)
 8002cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cc0:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_UART_MspInit+0xb4>)
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ccc:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <HAL_UART_MspInit+0xb4>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd0:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <HAL_UART_MspInit+0xb4>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd8:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <HAL_UART_MspInit+0xb4>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ce4:	23c0      	movs	r3, #192	@ 0xc0
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <HAL_UART_MspInit+0xb8>)
 8002d0a:	f000 fd2f 	bl	800376c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d0e:	bf00      	nop
 8002d10:	37b0      	adds	r7, #176	@ 0xb0
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	48000400 	.word	0x48000400

08002d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d28:	f7ff fbe0 	bl	80024ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d2c:	480c      	ldr	r0, [pc, #48]	@ (8002d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d2e:	490d      	ldr	r1, [pc, #52]	@ (8002d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d30:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <LoopForever+0xe>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d42:	4a0a      	ldr	r2, [pc, #40]	@ (8002d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d44:	4c0a      	ldr	r4, [pc, #40]	@ (8002d70 <LoopForever+0x16>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d52:	f008 f81b 	bl	800ad8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d56:	f7ff f917 	bl	8001f88 <main>

08002d5a <LoopForever>:

LoopForever:
    b LoopForever
 8002d5a:	e7fe      	b.n	8002d5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002d68:	0800c0cc 	.word	0x0800c0cc
  ldr r2, =_sbss
 8002d6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002d70:	20000628 	.word	0x20000628

08002d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC1_2_IRQHandler>

08002d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f93d 	bl	8003000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d86:	200f      	movs	r0, #15
 8002d88:	f000 f80e 	bl	8002da8 <HAL_InitTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	71fb      	strb	r3, [r7, #7]
 8002d96:	e001      	b.n	8002d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d98:	f7ff fa7e 	bl	8002298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002db4:	4b17      	ldr	r3, [pc, #92]	@ (8002e14 <HAL_InitTick+0x6c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <HAL_InitTick+0x70>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_InitTick+0x6c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f978 	bl	80030c8 <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d809      	bhi.n	8002df8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f000 f928 	bl	8003040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <HAL_InitTick+0x74>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e007      	b.n	8002e08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e004      	b.n	8002e08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e001      	b.n	8002e08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000018 	.word	0x20000018
 8002e18:	20000010 	.word	0x20000010
 8002e1c:	20000014 	.word	0x20000014

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000018 	.word	0x20000018
 8002e44:	200004d8 	.word	0x200004d8

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200004d8 	.word	0x200004d8

08002e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	@ (8002efc <__NVIC_EnableIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	@ (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	@ 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fcc:	d301      	bcc.n	8002fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00f      	b.n	8002ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <SysTick_Config+0x40>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fda:	210f      	movs	r1, #15
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	f7ff ff8e 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <SysTick_Config+0x40>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <SysTick_Config+0x40>)
 8002fec:	2207      	movs	r2, #7
 8002fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	e000e010 	.word	0xe000e010

08003000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d00f      	beq.n	800302e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b06      	cmp	r3, #6
 8003012:	d00c      	beq.n	800302e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d009      	beq.n	800302e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d006      	beq.n	800302e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d003      	beq.n	800302e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003026:	21a6      	movs	r1, #166	@ 0xa6
 8003028:	4804      	ldr	r0, [pc, #16]	@ (800303c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800302a:	f7ff f84b 	bl	80020c4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff16 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	0800bdf8 	.word	0x0800bdf8

08003040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d903      	bls.n	8003060 <HAL_NVIC_SetPriority+0x20>
 8003058:	21be      	movs	r1, #190	@ 0xbe
 800305a:	480e      	ldr	r0, [pc, #56]	@ (8003094 <HAL_NVIC_SetPriority+0x54>)
 800305c:	f7ff f832 	bl	80020c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b0f      	cmp	r3, #15
 8003064:	d903      	bls.n	800306e <HAL_NVIC_SetPriority+0x2e>
 8003066:	21bf      	movs	r1, #191	@ 0xbf
 8003068:	480a      	ldr	r0, [pc, #40]	@ (8003094 <HAL_NVIC_SetPriority+0x54>)
 800306a:	f7ff f82b 	bl	80020c4 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800306e:	f7ff ff1b 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 8003072:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	6978      	ldr	r0, [r7, #20]
 800307a:	f7ff ff6b 	bl	8002f54 <NVIC_EncodePriority>
 800307e:	4602      	mov	r2, r0
 8003080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff3a 	bl	8002f00 <__NVIC_SetPriority>
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800bdf8 	.word	0x0800bdf8

08003098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da03      	bge.n	80030b2 <HAL_NVIC_EnableIRQ+0x1a>
 80030aa:	21d2      	movs	r1, #210	@ 0xd2
 80030ac:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <HAL_NVIC_EnableIRQ+0x2c>)
 80030ae:	f7ff f809 	bl	80020c4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff04 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	0800bdf8 	.word	0x0800bdf8

080030c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff73 	bl	8002fbc <SysTick_Config>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e19d      	b.n	800342e <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a79      	ldr	r2, [pc, #484]	@ (80032dc <HAL_DMA_Init+0x1fc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d044      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a77      	ldr	r2, [pc, #476]	@ (80032e0 <HAL_DMA_Init+0x200>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03f      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a76      	ldr	r2, [pc, #472]	@ (80032e4 <HAL_DMA_Init+0x204>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03a      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a74      	ldr	r2, [pc, #464]	@ (80032e8 <HAL_DMA_Init+0x208>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d035      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a73      	ldr	r2, [pc, #460]	@ (80032ec <HAL_DMA_Init+0x20c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d030      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a71      	ldr	r2, [pc, #452]	@ (80032f0 <HAL_DMA_Init+0x210>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a70      	ldr	r2, [pc, #448]	@ (80032f4 <HAL_DMA_Init+0x214>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d026      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6e      	ldr	r2, [pc, #440]	@ (80032f8 <HAL_DMA_Init+0x218>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d021      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6d      	ldr	r2, [pc, #436]	@ (80032fc <HAL_DMA_Init+0x21c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01c      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6b      	ldr	r2, [pc, #428]	@ (8003300 <HAL_DMA_Init+0x220>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d017      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6a      	ldr	r2, [pc, #424]	@ (8003304 <HAL_DMA_Init+0x224>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d012      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a68      	ldr	r2, [pc, #416]	@ (8003308 <HAL_DMA_Init+0x228>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a67      	ldr	r2, [pc, #412]	@ (800330c <HAL_DMA_Init+0x22c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d008      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a65      	ldr	r2, [pc, #404]	@ (8003310 <HAL_DMA_Init+0x230>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <HAL_DMA_Init+0xa6>
 800317e:	21a5      	movs	r1, #165	@ 0xa5
 8003180:	4864      	ldr	r0, [pc, #400]	@ (8003314 <HAL_DMA_Init+0x234>)
 8003182:	f7fe ff9f 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_DMA_Init+0xc8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d008      	beq.n	80031a8 <HAL_DMA_Init+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_Init+0xc8>
 80031a0:	21a6      	movs	r1, #166	@ 0xa6
 80031a2:	485c      	ldr	r0, [pc, #368]	@ (8003314 <HAL_DMA_Init+0x234>)
 80031a4:	f7fe ff8e 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d007      	beq.n	80031c0 <HAL_DMA_Init+0xe0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_Init+0xe0>
 80031b8:	21a7      	movs	r1, #167	@ 0xa7
 80031ba:	4856      	ldr	r0, [pc, #344]	@ (8003314 <HAL_DMA_Init+0x234>)
 80031bc:	f7fe ff82 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b80      	cmp	r3, #128	@ 0x80
 80031c6:	d007      	beq.n	80031d8 <HAL_DMA_Init+0xf8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_DMA_Init+0xf8>
 80031d0:	21a8      	movs	r1, #168	@ 0xa8
 80031d2:	4850      	ldr	r0, [pc, #320]	@ (8003314 <HAL_DMA_Init+0x234>)
 80031d4:	f7fe ff76 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <HAL_DMA_Init+0x11c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e8:	d008      	beq.n	80031fc <HAL_DMA_Init+0x11c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_Init+0x11c>
 80031f4:	21a9      	movs	r1, #169	@ 0xa9
 80031f6:	4847      	ldr	r0, [pc, #284]	@ (8003314 <HAL_DMA_Init+0x234>)
 80031f8:	f7fe ff64 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <HAL_DMA_Init+0x140>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320c:	d008      	beq.n	8003220 <HAL_DMA_Init+0x140>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003216:	d003      	beq.n	8003220 <HAL_DMA_Init+0x140>
 8003218:	21aa      	movs	r1, #170	@ 0xaa
 800321a:	483e      	ldr	r0, [pc, #248]	@ (8003314 <HAL_DMA_Init+0x234>)
 800321c:	f7fe ff52 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_DMA_Init+0x158>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b20      	cmp	r3, #32
 800322e:	d003      	beq.n	8003238 <HAL_DMA_Init+0x158>
 8003230:	21ab      	movs	r1, #171	@ 0xab
 8003232:	4838      	ldr	r0, [pc, #224]	@ (8003314 <HAL_DMA_Init+0x234>)
 8003234:	f7fe ff46 	bl	80020c4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_DMA_Init+0x186>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003248:	d00d      	beq.n	8003266 <HAL_DMA_Init+0x186>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Init+0x186>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800325c:	d003      	beq.n	8003266 <HAL_DMA_Init+0x186>
 800325e:	21ac      	movs	r1, #172	@ 0xac
 8003260:	482c      	ldr	r0, [pc, #176]	@ (8003314 <HAL_DMA_Init+0x234>)
 8003262:	f7fe ff2f 	bl	80020c4 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01f      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d01b      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d017      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d013      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b04      	cmp	r3, #4
 800328c:	d00f      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d007      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	d003      	beq.n	80032ae <HAL_DMA_Init+0x1ce>
 80032a6:	21ae      	movs	r1, #174	@ 0xae
 80032a8:	481a      	ldr	r0, [pc, #104]	@ (8003314 <HAL_DMA_Init+0x234>)
 80032aa:	f7fe ff0b 	bl	80020c4 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_DMA_Init+0x238>)
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d836      	bhi.n	8003328 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_DMA_Init+0x23c>)
 80032c2:	4413      	add	r3, r2
 80032c4:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <HAL_DMA_Init+0x240>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	009a      	lsls	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <HAL_DMA_Init+0x244>)
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80032d8:	e035      	b.n	8003346 <HAL_DMA_Init+0x266>
 80032da:	bf00      	nop
 80032dc:	40020008 	.word	0x40020008
 80032e0:	4002001c 	.word	0x4002001c
 80032e4:	40020030 	.word	0x40020030
 80032e8:	40020044 	.word	0x40020044
 80032ec:	40020058 	.word	0x40020058
 80032f0:	4002006c 	.word	0x4002006c
 80032f4:	40020080 	.word	0x40020080
 80032f8:	40020408 	.word	0x40020408
 80032fc:	4002041c 	.word	0x4002041c
 8003300:	40020430 	.word	0x40020430
 8003304:	40020444 	.word	0x40020444
 8003308:	40020458 	.word	0x40020458
 800330c:	4002046c 	.word	0x4002046c
 8003310:	40020480 	.word	0x40020480
 8003314:	0800be34 	.word	0x0800be34
 8003318:	40020407 	.word	0x40020407
 800331c:	bffdfff8 	.word	0xbffdfff8
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	4b42      	ldr	r3, [pc, #264]	@ (8003438 <HAL_DMA_Init+0x358>)
 8003330:	4413      	add	r3, r2
 8003332:	4a42      	ldr	r2, [pc, #264]	@ (800343c <HAL_DMA_Init+0x35c>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	009a      	lsls	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3f      	ldr	r2, [pc, #252]	@ (8003440 <HAL_DMA_Init+0x360>)
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800335c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003360:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a0:	d039      	beq.n	8003416 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <HAL_DMA_Init+0x364>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d11a      	bne.n	80033e2 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ac:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <HAL_DMA_Init+0x368>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b4:	f003 031c 	and.w	r3, r3, #28
 80033b8:	210f      	movs	r1, #15
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	4921      	ldr	r1, [pc, #132]	@ (8003448 <HAL_DMA_Init+0x368>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033c6:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <HAL_DMA_Init+0x368>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	f003 031c 	and.w	r3, r3, #28
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	491b      	ldr	r1, [pc, #108]	@ (8003448 <HAL_DMA_Init+0x368>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
 80033e0:	e019      	b.n	8003416 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033e2:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <HAL_DMA_Init+0x36c>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f003 031c 	and.w	r3, r3, #28
 80033ee:	210f      	movs	r1, #15
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	4915      	ldr	r1, [pc, #84]	@ (800344c <HAL_DMA_Init+0x36c>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033fc:	4b13      	ldr	r3, [pc, #76]	@ (800344c <HAL_DMA_Init+0x36c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	f003 031c 	and.w	r3, r3, #28
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	490e      	ldr	r1, [pc, #56]	@ (800344c <HAL_DMA_Init+0x36c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	bffdfbf8 	.word	0xbffdfbf8
 800343c:	cccccccd 	.word	0xcccccccd
 8003440:	40020400 	.word	0x40020400
 8003444:	40020000 	.word	0x40020000
 8003448:	400200a8 	.word	0x400200a8
 800344c:	400204a8 	.word	0x400204a8

08003450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_DMA_Start_IT+0x20>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d304      	bcc.n	800347a <HAL_DMA_Start_IT+0x2a>
 8003470:	f240 11df 	movw	r1, #479	@ 0x1df
 8003474:	482c      	ldr	r0, [pc, #176]	@ (8003528 <HAL_DMA_Start_IT+0xd8>)
 8003476:	f7fe fe25 	bl	80020c4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Start_IT+0x38>
 8003484:	2302      	movs	r3, #2
 8003486:	e04b      	b.n	8003520 <HAL_DMA_Start_IT+0xd0>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d13a      	bne.n	8003512 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f923 	bl	800370c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 020e 	orr.w	r2, r2, #14
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0204 	bic.w	r2, r2, #4
 80034ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 020a 	orr.w	r2, r2, #10
 80034fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e005      	b.n	800351e <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	0800be34 	.word	0x0800be34

0800352c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d005      	beq.n	8003550 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2204      	movs	r2, #4
 8003548:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e029      	b.n	80035a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 020e 	bic.w	r2, r2, #14
 800355e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	f003 021c 	and.w	r2, r3, #28
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
    }
  }
  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f003 031c 	and.w	r3, r3, #28
 80035ce:	2204      	movs	r2, #4
 80035d0:	409a      	lsls	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d026      	beq.n	8003628 <HAL_DMA_IRQHandler+0x7a>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d021      	beq.n	8003628 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d107      	bne.n	8003602 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0204 	bic.w	r2, r2, #4
 8003600:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f003 021c 	and.w	r2, r3, #28
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	2104      	movs	r1, #4
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	2b00      	cmp	r3, #0
 800361c:	d071      	beq.n	8003702 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003626:	e06c      	b.n	8003702 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	f003 031c 	and.w	r3, r3, #28
 8003630:	2202      	movs	r2, #2
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02e      	beq.n	800369a <HAL_DMA_IRQHandler+0xec>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d029      	beq.n	800369a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 020a 	bic.w	r2, r2, #10
 8003662:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	f003 021c 	and.w	r2, r3, #28
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2102      	movs	r1, #2
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d038      	beq.n	8003702 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003698:	e033      	b.n	8003702 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f003 031c 	and.w	r3, r3, #28
 80036a2:	2208      	movs	r2, #8
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d02a      	beq.n	8003704 <HAL_DMA_IRQHandler+0x156>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d025      	beq.n	8003704 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 020e 	bic.w	r2, r2, #14
 80036c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036cc:	f003 021c 	and.w	r2, r3, #28
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003702:	bf00      	nop
 8003704:	bf00      	nop
}
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f003 021c 	and.w	r2, r3, #28
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b10      	cmp	r3, #16
 800373c:	d108      	bne.n	8003750 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800374e:	e007      	b.n	8003760 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003780:	d01f      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <HAL_GPIO_Init+0x10c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01b      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a3b      	ldr	r2, [pc, #236]	@ (800387c <HAL_GPIO_Init+0x110>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d017      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a3a      	ldr	r2, [pc, #232]	@ (8003880 <HAL_GPIO_Init+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a39      	ldr	r2, [pc, #228]	@ (8003884 <HAL_GPIO_Init+0x118>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00f      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a38      	ldr	r2, [pc, #224]	@ (8003888 <HAL_GPIO_Init+0x11c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a37      	ldr	r2, [pc, #220]	@ (800388c <HAL_GPIO_Init+0x120>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a36      	ldr	r2, [pc, #216]	@ (8003890 <HAL_GPIO_Init+0x124>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x56>
 80037ba:	21aa      	movs	r1, #170	@ 0xaa
 80037bc:	4835      	ldr	r0, [pc, #212]	@ (8003894 <HAL_GPIO_Init+0x128>)
 80037be:	f7fe fc81 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <HAL_GPIO_Init+0x6a>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d303      	bcc.n	80037de <HAL_GPIO_Init+0x72>
 80037d6:	21ab      	movs	r1, #171	@ 0xab
 80037d8:	482e      	ldr	r0, [pc, #184]	@ (8003894 <HAL_GPIO_Init+0x128>)
 80037da:	f7fe fc73 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 823d 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	f000 8238 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b11      	cmp	r3, #17
 80037f8:	f000 8233 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b02      	cmp	r3, #2
 8003802:	f000 822e 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b12      	cmp	r3, #18
 800380c:	f000 8229 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003818:	f000 8223 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003824:	f000 821d 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003830:	f000 8217 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800383c:	f000 8211 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003848:	f000 820b 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003854:	f000 8205 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b03      	cmp	r3, #3
 800385e:	f000 8200 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b0b      	cmp	r3, #11
 8003868:	f000 81fb 	beq.w	8003c62 <HAL_GPIO_Init+0x4f6>
 800386c:	21ac      	movs	r1, #172	@ 0xac
 800386e:	4809      	ldr	r0, [pc, #36]	@ (8003894 <HAL_GPIO_Init+0x128>)
 8003870:	f7fe fc28 	bl	80020c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003874:	e1f5      	b.n	8003c62 <HAL_GPIO_Init+0x4f6>
 8003876:	bf00      	nop
 8003878:	48000400 	.word	0x48000400
 800387c:	48000800 	.word	0x48000800
 8003880:	48000c00 	.word	0x48000c00
 8003884:	48001000 	.word	0x48001000
 8003888:	48001400 	.word	0x48001400
 800388c:	48001800 	.word	0x48001800
 8003890:	48001c00 	.word	0x48001c00
 8003894:	0800be6c 	.word	0x0800be6c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 81d6 	beq.w	8003c5c <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d005      	beq.n	80038c8 <HAL_GPIO_Init+0x15c>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d144      	bne.n	8003952 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00f      	beq.n	80038f0 <HAL_GPIO_Init+0x184>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d00b      	beq.n	80038f0 <HAL_GPIO_Init+0x184>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d007      	beq.n	80038f0 <HAL_GPIO_Init+0x184>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x184>
 80038e8:	21bb      	movs	r1, #187	@ 0xbb
 80038ea:	489c      	ldr	r0, [pc, #624]	@ (8003b5c <HAL_GPIO_Init+0x3f0>)
 80038ec:	f7fe fbea 	bl	80020c4 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003926:	2201      	movs	r2, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 0201 	and.w	r2, r3, #1
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b03      	cmp	r3, #3
 800395c:	d118      	bne.n	8003990 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003964:	2201      	movs	r2, #1
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	08db      	lsrs	r3, r3, #3
 800397a:	f003 0201 	and.w	r2, r3, #1
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d027      	beq.n	80039ec <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_GPIO_Init+0x250>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x250>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x250>
 80039b4:	21dc      	movs	r1, #220	@ 0xdc
 80039b6:	4869      	ldr	r0, [pc, #420]	@ (8003b5c <HAL_GPIO_Init+0x3f0>)
 80039b8:	f7fe fb84 	bl	80020c4 <assert_failed>

        temp = GPIOx->PUPDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d14f      	bne.n	8003a98 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039fe:	d01f      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a57      	ldr	r2, [pc, #348]	@ (8003b60 <HAL_GPIO_Init+0x3f4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01b      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a56      	ldr	r2, [pc, #344]	@ (8003b64 <HAL_GPIO_Init+0x3f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a55      	ldr	r2, [pc, #340]	@ (8003b68 <HAL_GPIO_Init+0x3fc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a54      	ldr	r2, [pc, #336]	@ (8003b6c <HAL_GPIO_Init+0x400>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00f      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a53      	ldr	r2, [pc, #332]	@ (8003b70 <HAL_GPIO_Init+0x404>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a52      	ldr	r2, [pc, #328]	@ (8003b74 <HAL_GPIO_Init+0x408>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a51      	ldr	r2, [pc, #324]	@ (8003b78 <HAL_GPIO_Init+0x40c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x2d4>
 8003a38:	21e8      	movs	r1, #232	@ 0xe8
 8003a3a:	4848      	ldr	r0, [pc, #288]	@ (8003b5c <HAL_GPIO_Init+0x3f0>)
 8003a3c:	f7fe fb42 	bl	80020c4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b0f      	cmp	r3, #15
 8003a46:	d903      	bls.n	8003a50 <HAL_GPIO_Init+0x2e4>
 8003a48:	21e9      	movs	r1, #233	@ 0xe9
 8003a4a:	4844      	ldr	r0, [pc, #272]	@ (8003b5c <HAL_GPIO_Init+0x3f0>)
 8003a4c:	f7fe fb3a 	bl	80020c4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	08da      	lsrs	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3208      	adds	r2, #8
 8003a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	08da      	lsrs	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3208      	adds	r2, #8
 8003a92:	6939      	ldr	r1, [r7, #16]
 8003a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0203 	and.w	r2, r3, #3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80c1 	beq.w	8003c5c <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ada:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <HAL_GPIO_Init+0x410>)
 8003adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ade:	4a27      	ldr	r2, [pc, #156]	@ (8003b7c <HAL_GPIO_Init+0x410>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ae6:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <HAL_GPIO_Init+0x410>)
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003af2:	4a23      	ldr	r2, [pc, #140]	@ (8003b80 <HAL_GPIO_Init+0x414>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b1c:	d03a      	beq.n	8003b94 <HAL_GPIO_Init+0x428>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a0f      	ldr	r2, [pc, #60]	@ (8003b60 <HAL_GPIO_Init+0x3f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d034      	beq.n	8003b90 <HAL_GPIO_Init+0x424>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <HAL_GPIO_Init+0x3f8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02e      	beq.n	8003b8c <HAL_GPIO_Init+0x420>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <HAL_GPIO_Init+0x3fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d028      	beq.n	8003b88 <HAL_GPIO_Init+0x41c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_GPIO_Init+0x400>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_GPIO_Init+0x418>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <HAL_GPIO_Init+0x404>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <HAL_GPIO_Init+0x3ea>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <HAL_GPIO_Init+0x408>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_GPIO_Init+0x3e6>
 8003b4e:	2306      	movs	r3, #6
 8003b50:	e021      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b52:	2307      	movs	r3, #7
 8003b54:	e01f      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b56:	2305      	movs	r3, #5
 8003b58:	e01d      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b5a:	bf00      	nop
 8003b5c:	0800be6c 	.word	0x0800be6c
 8003b60:	48000400 	.word	0x48000400
 8003b64:	48000800 	.word	0x48000800
 8003b68:	48000c00 	.word	0x48000c00
 8003b6c:	48001000 	.word	0x48001000
 8003b70:	48001400 	.word	0x48001400
 8003b74:	48001800 	.word	0x48001800
 8003b78:	48001c00 	.word	0x48001c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40010000 	.word	0x40010000
 8003b84:	2304      	movs	r3, #4
 8003b86:	e006      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e004      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e002      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <HAL_GPIO_Init+0x42a>
 8003b94:	2300      	movs	r3, #0
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	f002 0203 	and.w	r2, r2, #3
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	4093      	lsls	r3, r2
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ba6:	4935      	ldr	r1, [pc, #212]	@ (8003c7c <HAL_GPIO_Init+0x510>)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb4:	4b32      	ldr	r3, [pc, #200]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bd8:	4a29      	ldr	r2, [pc, #164]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bde:	4b28      	ldr	r3, [pc, #160]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c2c:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c32:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c56:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <HAL_GPIO_Init+0x514>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f ae13 	bne.w	8003898 <HAL_GPIO_Init+0x12c>
  }
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c98:	d020      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a84      	ldr	r2, [pc, #528]	@ (8003eb0 <HAL_GPIO_DeInit+0x22c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01c      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a83      	ldr	r2, [pc, #524]	@ (8003eb4 <HAL_GPIO_DeInit+0x230>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a82      	ldr	r2, [pc, #520]	@ (8003eb8 <HAL_GPIO_DeInit+0x234>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d014      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a81      	ldr	r2, [pc, #516]	@ (8003ebc <HAL_GPIO_DeInit+0x238>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d010      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a80      	ldr	r2, [pc, #512]	@ (8003ec0 <HAL_GPIO_DeInit+0x23c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00c      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec4 <HAL_GPIO_DeInit+0x240>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d008      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a7e      	ldr	r2, [pc, #504]	@ (8003ec8 <HAL_GPIO_DeInit+0x244>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_GPIO_DeInit+0x58>
 8003cd2:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8003cd6:	487d      	ldr	r0, [pc, #500]	@ (8003ecc <HAL_GPIO_DeInit+0x248>)
 8003cd8:	f7fe f9f4 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <HAL_GPIO_DeInit+0x6a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cea:	f0c0 80d4 	bcc.w	8003e96 <HAL_GPIO_DeInit+0x212>
 8003cee:	f240 113b 	movw	r1, #315	@ 0x13b
 8003cf2:	4876      	ldr	r0, [pc, #472]	@ (8003ecc <HAL_GPIO_DeInit+0x248>)
 8003cf4:	f7fe f9e6 	bl	80020c4 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003cf8:	e0cd      	b.n	8003e96 <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80c0 	beq.w	8003e90 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003d10:	4a6f      	ldr	r2, [pc, #444]	@ (8003ed0 <HAL_GPIO_DeInit+0x24c>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	3302      	adds	r3, #2
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d38:	d025      	beq.n	8003d86 <HAL_GPIO_DeInit+0x102>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_GPIO_DeInit+0x22c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01f      	beq.n	8003d82 <HAL_GPIO_DeInit+0xfe>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb4 <HAL_GPIO_DeInit+0x230>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d019      	beq.n	8003d7e <HAL_GPIO_DeInit+0xfa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb8 <HAL_GPIO_DeInit+0x234>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_GPIO_DeInit+0xf6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a59      	ldr	r2, [pc, #356]	@ (8003ebc <HAL_GPIO_DeInit+0x238>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00d      	beq.n	8003d76 <HAL_GPIO_DeInit+0xf2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	@ (8003ec0 <HAL_GPIO_DeInit+0x23c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_DeInit+0xee>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a57      	ldr	r2, [pc, #348]	@ (8003ec4 <HAL_GPIO_DeInit+0x240>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_GPIO_DeInit+0xea>
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	e00c      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d6e:	2307      	movs	r3, #7
 8003d70:	e00a      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d72:	2305      	movs	r3, #5
 8003d74:	e008      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d76:	2304      	movs	r3, #4
 8003d78:	e006      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e004      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e002      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_GPIO_DeInit+0x104>
 8003d86:	2300      	movs	r3, #0
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	f002 0203 	and.w	r2, r2, #3
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	4093      	lsls	r3, r2
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d132      	bne.n	8003dfe <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d98:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	494c      	ldr	r1, [pc, #304]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003da6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	4949      	ldr	r1, [pc, #292]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003db4:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	4945      	ldr	r1, [pc, #276]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003dc2:	4b44      	ldr	r3, [pc, #272]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	4942      	ldr	r1, [pc, #264]	@ (8003ed4 <HAL_GPIO_DeInit+0x250>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	220f      	movs	r2, #15
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003de0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed0 <HAL_GPIO_DeInit+0x24c>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43da      	mvns	r2, r3
 8003df0:	4837      	ldr	r0, [pc, #220]	@ (8003ed0 <HAL_GPIO_DeInit+0x24c>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	400a      	ands	r2, r1
 8003df8:	3302      	adds	r3, #2
 8003dfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2103      	movs	r1, #3
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	08d2      	lsrs	r2, r2, #3
 8003e32:	4019      	ands	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3208      	adds	r2, #8
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2103      	movs	r1, #3
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	2101      	movs	r1, #1
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	401a      	ands	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2103      	movs	r1, #3
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	401a      	ands	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e80:	2101      	movs	r1, #1
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	3301      	adds	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f47f af2b 	bne.w	8003cfa <HAL_GPIO_DeInit+0x76>
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	48000400 	.word	0x48000400
 8003eb4:	48000800 	.word	0x48000800
 8003eb8:	48000c00 	.word	0x48000c00
 8003ebc:	48001000 	.word	0x48001000
 8003ec0:	48001400 	.word	0x48001400
 8003ec4:	48001800 	.word	0x48001800
 8003ec8:	48001c00 	.word	0x48001c00
 8003ecc:	0800be6c 	.word	0x0800be6c
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_GPIO_WritePin+0x20>
 8003eee:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8003ef2:	480e      	ldr	r0, [pc, #56]	@ (8003f2c <HAL_GPIO_WritePin+0x54>)
 8003ef4:	f7fe f8e6 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_WritePin+0x36>
 8003efe:	787b      	ldrb	r3, [r7, #1]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d004      	beq.n	8003f0e <HAL_GPIO_WritePin+0x36>
 8003f04:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f08:	4808      	ldr	r0, [pc, #32]	@ (8003f2c <HAL_GPIO_WritePin+0x54>)
 8003f0a:	f7fe f8db 	bl	80020c4 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003f0e:	787b      	ldrb	r3, [r7, #1]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f14:	887a      	ldrh	r2, [r7, #2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f1a:	e002      	b.n	8003f22 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f1c:	887a      	ldrh	r2, [r7, #2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0800be6c 	.word	0x0800be6c

08003f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f3a:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f46:	4a05      	ldr	r2, [pc, #20]	@ (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f806 	bl	8003f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f7c:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40007000 	.word	0x40007000

08003f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa2:	d007      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d003      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003fac:	21a7      	movs	r1, #167	@ 0xa7
 8003fae:	4826      	ldr	r0, [pc, #152]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003fb0:	f7fe f888 	bl	80020c4 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fba:	d130      	bne.n	800401e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fbc:	4b23      	ldr	r3, [pc, #140]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc8:	d038      	beq.n	800403c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fca:	4b20      	ldr	r3, [pc, #128]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003fd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2232      	movs	r2, #50	@ 0x32
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	0c9b      	lsrs	r3, r3, #18
 8003fec:	3301      	adds	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff0:	e002      	b.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff8:	4b14      	ldr	r3, [pc, #80]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004004:	d102      	bne.n	800400c <HAL_PWREx_ControlVoltageScaling+0x78>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f2      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800400c:	4b0f      	ldr	r3, [pc, #60]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004018:	d110      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e00f      	b.n	800403e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402a:	d007      	beq.n	800403c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800402c:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004034:	4a05      	ldr	r2, [pc, #20]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800403a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	0800bea8 	.word	0x0800bea8
 800404c:	40007000 	.word	0x40007000
 8004050:	20000010 	.word	0x20000010
 8004054:	431bde83 	.word	0x431bde83

08004058 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f000 bcef 	b.w	8004a4a <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCC_OscConfig+0x2e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b1f      	cmp	r3, #31
 800407a:	d904      	bls.n	8004086 <HAL_RCC_OscConfig+0x2e>
 800407c:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8004080:	489a      	ldr	r0, [pc, #616]	@ (80042ec <HAL_RCC_OscConfig+0x294>)
 8004082:	f7fe f81f 	bl	80020c4 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	4b9a      	ldr	r3, [pc, #616]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004090:	4b97      	ldr	r3, [pc, #604]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 813d 	beq.w	8004322 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_OscConfig+0x6a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d004      	beq.n	80040c2 <HAL_RCC_OscConfig+0x6a>
 80040b8:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80040bc:	488b      	ldr	r0, [pc, #556]	@ (80042ec <HAL_RCC_OscConfig+0x294>)
 80040be:	f7fe f801 	bl	80020c4 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2bff      	cmp	r3, #255	@ 0xff
 80040c8:	d904      	bls.n	80040d4 <HAL_RCC_OscConfig+0x7c>
 80040ca:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80040ce:	4887      	ldr	r0, [pc, #540]	@ (80042ec <HAL_RCC_OscConfig+0x294>)
 80040d0:	f7fd fff8 	bl	80020c4 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d030      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d02c      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d028      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	2b30      	cmp	r3, #48	@ 0x30
 80040f2:	d024      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d020      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	2b50      	cmp	r3, #80	@ 0x50
 8004102:	d01c      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	2b60      	cmp	r3, #96	@ 0x60
 800410a:	d018      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	2b70      	cmp	r3, #112	@ 0x70
 8004112:	d014      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2b80      	cmp	r3, #128	@ 0x80
 800411a:	d010      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	2b90      	cmp	r3, #144	@ 0x90
 8004122:	d00c      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	2ba0      	cmp	r3, #160	@ 0xa0
 800412a:	d008      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	2bb0      	cmp	r3, #176	@ 0xb0
 8004132:	d004      	beq.n	800413e <HAL_RCC_OscConfig+0xe6>
 8004134:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8004138:	486c      	ldr	r0, [pc, #432]	@ (80042ec <HAL_RCC_OscConfig+0x294>)
 800413a:	f7fd ffc3 	bl	80020c4 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_RCC_OscConfig+0xfc>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	f040 808e 	bne.w	8004268 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b01      	cmp	r3, #1
 8004150:	f040 808a 	bne.w	8004268 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004154:	4b66      	ldr	r3, [pc, #408]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_RCC_OscConfig+0x116>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f000 bc6e 	b.w	8004a4a <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	4b5f      	ldr	r3, [pc, #380]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <HAL_RCC_OscConfig+0x130>
 800417e:	4b5c      	ldr	r3, [pc, #368]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004186:	e005      	b.n	8004194 <HAL_RCC_OscConfig+0x13c>
 8004188:	4b59      	ldr	r3, [pc, #356]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004194:	4293      	cmp	r3, r2
 8004196:	d224      	bcs.n	80041e2 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fec1 	bl	8004f24 <RCC_SetFlashLatencyFromMSIRange>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f000 bc4e 	b.w	8004a4a <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ae:	4b50      	ldr	r3, [pc, #320]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a4f      	ldr	r2, [pc, #316]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b4d      	ldr	r3, [pc, #308]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	494a      	ldr	r1, [pc, #296]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041cc:	4b48      	ldr	r3, [pc, #288]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	4945      	ldr	r1, [pc, #276]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	e026      	b.n	8004230 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e2:	4b43      	ldr	r3, [pc, #268]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a42      	ldr	r2, [pc, #264]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b40      	ldr	r3, [pc, #256]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	493d      	ldr	r1, [pc, #244]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004200:	4b3b      	ldr	r3, [pc, #236]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	4938      	ldr	r1, [pc, #224]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fe80 	bl	8004f24 <RCC_SetFlashLatencyFromMSIRange>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f000 bc0d 	b.w	8004a4a <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004230:	f000 fdb4 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	492c      	ldr	r1, [pc, #176]	@ (80042f4 <HAL_RCC_OscConfig+0x29c>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
 800424c:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <HAL_RCC_OscConfig+0x2a0>)
 800424e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004250:	4b2a      	ldr	r3, [pc, #168]	@ (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fda7 	bl	8002da8 <HAL_InitTick>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05d      	beq.n	8004320 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	e3f0      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d032      	beq.n	80042d6 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004270:	4b1f      	ldr	r3, [pc, #124]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800427c:	f7fe fde4 	bl	8002e48 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004284:	f7fe fde0 	bl	8002e48 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e3d9      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004296:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a2:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a12      	ldr	r2, [pc, #72]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042a8:	f043 0308 	orr.w	r3, r3, #8
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	490d      	ldr	r1, [pc, #52]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	4908      	ldr	r1, [pc, #32]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
 80042d4:	e025      	b.n	8004322 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <HAL_RCC_OscConfig+0x298>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e2:	f7fe fdb1 	bl	8002e48 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042e8:	e013      	b.n	8004312 <HAL_RCC_OscConfig+0x2ba>
 80042ea:	bf00      	nop
 80042ec:	0800bee4 	.word	0x0800bee4
 80042f0:	40021000 	.word	0x40021000
 80042f4:	0800c040 	.word	0x0800c040
 80042f8:	20000010 	.word	0x20000010
 80042fc:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004300:	f7fe fda2 	bl	8002e48 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e39b      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004312:	4b97      	ldr	r3, [pc, #604]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x2a8>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d07e      	beq.n	800442c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <HAL_RCC_OscConfig+0x2fc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433e:	d009      	beq.n	8004354 <HAL_RCC_OscConfig+0x2fc>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004348:	d004      	beq.n	8004354 <HAL_RCC_OscConfig+0x2fc>
 800434a:	f240 2119 	movw	r1, #537	@ 0x219
 800434e:	4889      	ldr	r0, [pc, #548]	@ (8004574 <HAL_RCC_OscConfig+0x51c>)
 8004350:	f7fd feb8 	bl	80020c4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d005      	beq.n	8004366 <HAL_RCC_OscConfig+0x30e>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d10e      	bne.n	800437e <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d10b      	bne.n	800437e <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004366:	4b82      	ldr	r3, [pc, #520]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d05b      	beq.n	800442a <HAL_RCC_OscConfig+0x3d2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d157      	bne.n	800442a <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e365      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x33e>
 8004388:	4b79      	ldr	r3, [pc, #484]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a78      	ldr	r2, [pc, #480]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e01d      	b.n	80043d2 <HAL_RCC_OscConfig+0x37a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x362>
 80043a0:	4b73      	ldr	r3, [pc, #460]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a72      	ldr	r2, [pc, #456]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b70      	ldr	r3, [pc, #448]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6f      	ldr	r2, [pc, #444]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x37a>
 80043ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6c      	ldr	r2, [pc, #432]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a69      	ldr	r2, [pc, #420]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d013      	beq.n	8004402 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fd35 	bl	8002e48 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e2:	f7fe fd31 	bl	8002e48 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b64      	cmp	r3, #100	@ 0x64
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e32a      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x38a>
 8004400:	e014      	b.n	800442c <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe fd21 	bl	8002e48 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440a:	f7fe fd1d 	bl	8002e48 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b64      	cmp	r3, #100	@ 0x64
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e316      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800441c:	4b54      	ldr	r3, [pc, #336]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x3b2>
 8004428:	e000      	b.n	800442c <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d077      	beq.n	8004528 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_RCC_OscConfig+0x3fc>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004448:	d004      	beq.n	8004454 <HAL_RCC_OscConfig+0x3fc>
 800444a:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800444e:	4849      	ldr	r0, [pc, #292]	@ (8004574 <HAL_RCC_OscConfig+0x51c>)
 8004450:	f7fd fe38 	bl	80020c4 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b1f      	cmp	r3, #31
 800445a:	d904      	bls.n	8004466 <HAL_RCC_OscConfig+0x40e>
 800445c:	f240 214d 	movw	r1, #589	@ 0x24d
 8004460:	4844      	ldr	r0, [pc, #272]	@ (8004574 <HAL_RCC_OscConfig+0x51c>)
 8004462:	f7fd fe2f 	bl	80020c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d005      	beq.n	8004478 <HAL_RCC_OscConfig+0x420>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d119      	bne.n	80044a6 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d116      	bne.n	80044a6 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004478:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_OscConfig+0x438>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e2dc      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b37      	ldr	r3, [pc, #220]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	4934      	ldr	r1, [pc, #208]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a4:	e040      	b.n	8004528 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d023      	beq.n	80044f6 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ae:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fe fcc5 	bl	8002e48 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fe fcc1 	bl	8002e48 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e2ba      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d4:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b23      	ldr	r3, [pc, #140]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	4920      	ldr	r1, [pc, #128]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
 80044f4:	e018      	b.n	8004528 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 80044fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fe fca1 	bl	8002e48 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450a:	f7fe fc9d 	bl	8002e48 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e296      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800451c:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d04e      	beq.n	80045d2 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCC_OscConfig+0x4f6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d004      	beq.n	800454e <HAL_RCC_OscConfig+0x4f6>
 8004544:	f240 218d 	movw	r1, #653	@ 0x28d
 8004548:	480a      	ldr	r0, [pc, #40]	@ (8004574 <HAL_RCC_OscConfig+0x51c>)
 800454a:	f7fd fdbb 	bl	80020c4 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d021      	beq.n	800459a <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 8004558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455c:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <HAL_RCC_OscConfig+0x518>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fe fc6f 	bl	8002e48 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800456c:	e00d      	b.n	800458a <HAL_RCC_OscConfig+0x532>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	0800bee4 	.word	0x0800bee4
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004578:	f7fe fc66 	bl	8002e48 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e25f      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800458a:	4b66      	ldr	r3, [pc, #408]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ef      	beq.n	8004578 <HAL_RCC_OscConfig+0x520>
 8004598:	e01b      	b.n	80045d2 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459a:	4b62      	ldr	r3, [pc, #392]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 800459c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a0:	4a60      	ldr	r2, [pc, #384]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fe fc4d 	bl	8002e48 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fe fc49 	bl	8002e48 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e242      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c4:	4b57      	ldr	r3, [pc, #348]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ef      	bne.n	80045b2 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80b8 	beq.w	8004750 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e0:	2300      	movs	r3, #0
 80045e2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00c      	beq.n	8004606 <HAL_RCC_OscConfig+0x5ae>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_OscConfig+0x5ae>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	d004      	beq.n	8004606 <HAL_RCC_OscConfig+0x5ae>
 80045fc:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004600:	4849      	ldr	r0, [pc, #292]	@ (8004728 <HAL_RCC_OscConfig+0x6d0>)
 8004602:	f7fd fd5f 	bl	80020c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	4b44      	ldr	r3, [pc, #272]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	4a43      	ldr	r2, [pc, #268]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461c:	6593      	str	r3, [r2, #88]	@ 0x58
 800461e:	4b41      	ldr	r3, [pc, #260]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462e:	4b3f      	ldr	r3, [pc, #252]	@ (800472c <HAL_RCC_OscConfig+0x6d4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800463a:	4b3c      	ldr	r3, [pc, #240]	@ (800472c <HAL_RCC_OscConfig+0x6d4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3b      	ldr	r2, [pc, #236]	@ (800472c <HAL_RCC_OscConfig+0x6d4>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fe fbff 	bl	8002e48 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fe fbfb 	bl	8002e48 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1f4      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004660:	4b32      	ldr	r3, [pc, #200]	@ (800472c <HAL_RCC_OscConfig+0x6d4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d108      	bne.n	8004686 <HAL_RCC_OscConfig+0x62e>
 8004674:	4b2b      	ldr	r3, [pc, #172]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	4a2a      	ldr	r2, [pc, #168]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004684:	e024      	b.n	80046d0 <HAL_RCC_OscConfig+0x678>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d110      	bne.n	80046b0 <HAL_RCC_OscConfig+0x658>
 800468e:	4b25      	ldr	r3, [pc, #148]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004694:	4a23      	ldr	r2, [pc, #140]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 8004696:	f043 0304 	orr.w	r3, r3, #4
 800469a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800469e:	4b21      	ldr	r3, [pc, #132]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046ae:	e00f      	b.n	80046d0 <HAL_RCC_OscConfig+0x678>
 80046b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046c0:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fe fbb6 	bl	8002e48 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fe fbb2 	bl	8002e48 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e1a9      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_OscConfig+0x6cc>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ed      	beq.n	80046e0 <HAL_RCC_OscConfig+0x688>
 8004704:	e01b      	b.n	800473e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fe fb9f 	bl	8002e48 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800470c:	e010      	b.n	8004730 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fe fb9b 	bl	8002e48 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d907      	bls.n	8004730 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e192      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
 8004724:	40021000 	.word	0x40021000
 8004728:	0800bee4 	.word	0x0800bee4
 800472c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004730:	4b98      	ldr	r3, [pc, #608]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e7      	bne.n	800470e <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004744:	4b93      	ldr	r3, [pc, #588]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	4a92      	ldr	r2, [pc, #584]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_RCC_OscConfig+0x71a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	2b01      	cmp	r3, #1
 800475e:	d008      	beq.n	8004772 <HAL_RCC_OscConfig+0x71a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	2b02      	cmp	r3, #2
 8004766:	d004      	beq.n	8004772 <HAL_RCC_OscConfig+0x71a>
 8004768:	f240 316e 	movw	r1, #878	@ 0x36e
 800476c:	488a      	ldr	r0, [pc, #552]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 800476e:	f7fd fca9 	bl	80020c4 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8166 	beq.w	8004a48 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	2b02      	cmp	r3, #2
 8004782:	f040 813c 	bne.w	80049fe <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_RCC_OscConfig+0x758>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d00c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x758>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	2b02      	cmp	r3, #2
 800479c:	d008      	beq.n	80047b0 <HAL_RCC_OscConfig+0x758>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d004      	beq.n	80047b0 <HAL_RCC_OscConfig+0x758>
 80047a6:	f240 3176 	movw	r1, #886	@ 0x376
 80047aa:	487b      	ldr	r0, [pc, #492]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 80047ac:	f7fd fc8a 	bl	80020c4 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_RCC_OscConfig+0x768>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d904      	bls.n	80047ca <HAL_RCC_OscConfig+0x772>
 80047c0:	f240 3177 	movw	r1, #887	@ 0x377
 80047c4:	4874      	ldr	r0, [pc, #464]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 80047c6:	f7fd fc7d 	bl	80020c4 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ce:	2b07      	cmp	r3, #7
 80047d0:	d903      	bls.n	80047da <HAL_RCC_OscConfig+0x782>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	2b56      	cmp	r3, #86	@ 0x56
 80047d8:	d904      	bls.n	80047e4 <HAL_RCC_OscConfig+0x78c>
 80047da:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80047de:	486e      	ldr	r0, [pc, #440]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 80047e0:	f7fd fc70 	bl	80020c4 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_OscConfig+0x7a6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	2b11      	cmp	r3, #17
 80047f2:	d004      	beq.n	80047fe <HAL_RCC_OscConfig+0x7a6>
 80047f4:	f240 317a 	movw	r1, #890	@ 0x37a
 80047f8:	4867      	ldr	r0, [pc, #412]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 80047fa:	f7fd fc63 	bl	80020c4 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004802:	2b02      	cmp	r3, #2
 8004804:	d010      	beq.n	8004828 <HAL_RCC_OscConfig+0x7d0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	2b04      	cmp	r3, #4
 800480c:	d00c      	beq.n	8004828 <HAL_RCC_OscConfig+0x7d0>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b06      	cmp	r3, #6
 8004814:	d008      	beq.n	8004828 <HAL_RCC_OscConfig+0x7d0>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	2b08      	cmp	r3, #8
 800481c:	d004      	beq.n	8004828 <HAL_RCC_OscConfig+0x7d0>
 800481e:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8004822:	485d      	ldr	r0, [pc, #372]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 8004824:	f7fd fc4e 	bl	80020c4 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2b02      	cmp	r3, #2
 800482e:	d010      	beq.n	8004852 <HAL_RCC_OscConfig+0x7fa>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	2b04      	cmp	r3, #4
 8004836:	d00c      	beq.n	8004852 <HAL_RCC_OscConfig+0x7fa>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	2b06      	cmp	r3, #6
 800483e:	d008      	beq.n	8004852 <HAL_RCC_OscConfig+0x7fa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	2b08      	cmp	r3, #8
 8004846:	d004      	beq.n	8004852 <HAL_RCC_OscConfig+0x7fa>
 8004848:	f240 317d 	movw	r1, #893	@ 0x37d
 800484c:	4852      	ldr	r0, [pc, #328]	@ (8004998 <HAL_RCC_OscConfig+0x940>)
 800484e:	f7fd fc39 	bl	80020c4 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004852:	4b50      	ldr	r3, [pc, #320]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 0203 	and.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d130      	bne.n	80048c8 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004870:	3b01      	subs	r3, #1
 8004872:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d127      	bne.n	80048c8 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004882:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d11f      	bne.n	80048c8 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004892:	2a07      	cmp	r2, #7
 8004894:	bf14      	ite	ne
 8004896:	2201      	movne	r2, #1
 8004898:	2200      	moveq	r2, #0
 800489a:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d113      	bne.n	80048c8 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d109      	bne.n	80048c8 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d074      	beq.n	80049b2 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d06f      	beq.n	80049ae <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048ce:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048da:	4b2e      	ldr	r3, [pc, #184]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0af      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a29      	ldr	r2, [pc, #164]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 80048f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048f6:	f7fe faa7 	bl	8002e48 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fe faa3 	bl	8002e48 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e09c      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004910:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <HAL_RCC_OscConfig+0x944>)
 8004922:	4013      	ands	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800492c:	3a01      	subs	r2, #1
 800492e:	0112      	lsls	r2, r2, #4
 8004930:	4311      	orrs	r1, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004936:	0212      	lsls	r2, r2, #8
 8004938:	4311      	orrs	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	3a01      	subs	r2, #1
 8004942:	0552      	lsls	r2, r2, #21
 8004944:	4311      	orrs	r1, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800494a:	0852      	lsrs	r2, r2, #1
 800494c:	3a01      	subs	r2, #1
 800494e:	0652      	lsls	r2, r2, #25
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004956:	0912      	lsrs	r2, r2, #4
 8004958:	0452      	lsls	r2, r2, #17
 800495a:	430a      	orrs	r2, r1
 800495c:	490d      	ldr	r1, [pc, #52]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004962:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0b      	ldr	r2, [pc, #44]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800496e:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	4a08      	ldr	r2, [pc, #32]	@ (8004994 <HAL_RCC_OscConfig+0x93c>)
 8004974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004978:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800497a:	f7fe fa65 	bl	8002e48 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004980:	e00e      	b.n	80049a0 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fe fa61 	bl	8002e48 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d907      	bls.n	80049a0 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e05a      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
 8004994:	40021000 	.word	0x40021000
 8004998:	0800bee4 	.word	0x0800bee4
 800499c:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ea      	beq.n	8004982 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ac:	e04c      	b.n	8004a48 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e04b      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d144      	bne.n	8004a48 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049be:	4b25      	ldr	r3, [pc, #148]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a24      	ldr	r2, [pc, #144]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049c8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ca:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4a21      	ldr	r2, [pc, #132]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049d6:	f7fe fa37 	bl	8002e48 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049de:	f7fe fa33 	bl	8002e48 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e02c      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f0:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x986>
 80049fc:	e024      	b.n	8004a48 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d01f      	beq.n	8004a44 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a12      	ldr	r2, [pc, #72]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 8004a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe fa1a 	bl	8002e48 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fe fa16 	bl	8002e48 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e00f      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a36:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	4906      	ldr	r1, [pc, #24]	@ (8004a54 <HAL_RCC_OscConfig+0x9fc>)
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCC_OscConfig+0xa00>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60cb      	str	r3, [r1, #12]
 8004a42:	e001      	b.n	8004a48 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	feeefffc 	.word	0xfeeefffc

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e186      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x24>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d904      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x2e>
 8004a80:	f240 4159 	movw	r1, #1113	@ 0x459
 8004a84:	4882      	ldr	r0, [pc, #520]	@ (8004c90 <HAL_RCC_ClockConfig+0x234>)
 8004a86:	f7fd fb1d 	bl	80020c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d010      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x56>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d00d      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x56>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x56>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d007      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x56>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x56>
 8004aa8:	f240 415a 	movw	r1, #1114	@ 0x45a
 8004aac:	4878      	ldr	r0, [pc, #480]	@ (8004c90 <HAL_RCC_ClockConfig+0x234>)
 8004aae:	f7fd fb09 	bl	80020c4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab2:	4b78      	ldr	r3, [pc, #480]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d910      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac0:	4b74      	ldr	r3, [pc, #464]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 0207 	bic.w	r2, r3, #7
 8004ac8:	4972      	ldr	r1, [pc, #456]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad0:	4b70      	ldr	r3, [pc, #448]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e14d      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d039      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d024      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d020      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b90      	cmp	r3, #144	@ 0x90
 8004b04:	d01c      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b0c:	d018      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2bb0      	cmp	r3, #176	@ 0xb0
 8004b14:	d014      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2bd0      	cmp	r3, #208	@ 0xd0
 8004b24:	d00c      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2be0      	cmp	r3, #224	@ 0xe0
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2bf0      	cmp	r3, #240	@ 0xf0
 8004b34:	d004      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xe4>
 8004b36:	f240 4172 	movw	r1, #1138	@ 0x472
 8004b3a:	4855      	ldr	r0, [pc, #340]	@ (8004c90 <HAL_RCC_ClockConfig+0x234>)
 8004b3c:	f7fd fac2 	bl	80020c4 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	4b54      	ldr	r3, [pc, #336]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d908      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	4b51      	ldr	r3, [pc, #324]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	494e      	ldr	r1, [pc, #312]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d061      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x13c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d00c      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x13c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d008      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x13c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d004      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x13c>
 8004b8e:	f240 417d 	movw	r1, #1149	@ 0x47d
 8004b92:	483f      	ldr	r0, [pc, #252]	@ (8004c90 <HAL_RCC_ClockConfig+0x234>)
 8004b94:	f7fd fa96 	bl	80020c4 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d121      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0e6      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb8:	4b37      	ldr	r3, [pc, #220]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d115      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0da      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bd0:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0ce      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004be0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0c6      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bf0:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f023 0203 	bic.w	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4926      	ldr	r1, [pc, #152]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c02:	f7fe f921 	bl	8002e48 <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0a:	f7fe f91d 	bl	8002e48 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0ae      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c20:	4b1d      	ldr	r3, [pc, #116]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 020c 	and.w	r2, r3, #12
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d1eb      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d208      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4e:	4b12      	ldr	r3, [pc, #72]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	490f      	ldr	r1, [pc, #60]	@ (8004c98 <HAL_RCC_ClockConfig+0x23c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d216      	bcs.n	8004c9c <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b09      	ldr	r3, [pc, #36]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 0207 	bic.w	r2, r3, #7
 8004c76:	4907      	ldr	r1, [pc, #28]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_RCC_ClockConfig+0x238>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d007      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e076      	b.n	8004d7e <HAL_RCC_ClockConfig+0x322>
 8004c90:	0800bee4 	.word	0x0800bee4
 8004c94:	40022000 	.word	0x40022000
 8004c98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d025      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d018      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x286>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb8:	d013      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x286>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x286>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x286>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cd6:	d004      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x286>
 8004cd8:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8004cdc:	482a      	ldr	r0, [pc, #168]	@ (8004d88 <HAL_RCC_ClockConfig+0x32c>)
 8004cde:	f7fd f9f1 	bl	80020c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d8c <HAL_RCC_ClockConfig+0x330>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4927      	ldr	r1, [pc, #156]	@ (8004d8c <HAL_RCC_ClockConfig+0x330>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d026      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d018      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x2de>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d10:	d013      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x2de>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d1a:	d00e      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x2de>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x2de>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x2de>
 8004d30:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8004d34:	4814      	ldr	r0, [pc, #80]	@ (8004d88 <HAL_RCC_ClockConfig+0x32c>)
 8004d36:	f7fd f9c5 	bl	80020c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <HAL_RCC_ClockConfig+0x330>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4910      	ldr	r1, [pc, #64]	@ (8004d8c <HAL_RCC_ClockConfig+0x330>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4e:	f000 f825 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <HAL_RCC_ClockConfig+0x330>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	490c      	ldr	r1, [pc, #48]	@ (8004d90 <HAL_RCC_ClockConfig+0x334>)
 8004d60:	5ccb      	ldrb	r3, [r1, r3]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <HAL_RCC_ClockConfig+0x338>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <HAL_RCC_ClockConfig+0x33c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe f818 	bl	8002da8 <HAL_InitTick>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	0800bee4 	.word	0x0800bee4
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800c040 	.word	0x0800c040
 8004d94:	20000010 	.word	0x20000010
 8004d98:	20000014 	.word	0x20000014

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	@ 0x24
 8004da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004daa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d121      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d11e      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dd0:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ddc:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e005      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004df8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10d      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d102      	bne.n	8004e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e14:	4b25      	ldr	r3, [pc, #148]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x110>)
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e004      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e20:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d134      	bne.n	8004e94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d003      	beq.n	8004e42 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0xac>
 8004e40:	e005      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e42:	4b1a      	ldr	r3, [pc, #104]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x110>)
 8004e44:	617b      	str	r3, [r7, #20]
      break;
 8004e46:	e005      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e48:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e4a:	617b      	str	r3, [r7, #20]
      break;
 8004e4c:	e002      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	617b      	str	r3, [r7, #20]
      break;
 8004e52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e54:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	3301      	adds	r3, #1
 8004e60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e62:	4b10      	ldr	r3, [pc, #64]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	fb03 f202 	mul.w	r2, r3, r2
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	0e5b      	lsrs	r3, r3, #25
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	3301      	adds	r3, #1
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e94:	69bb      	ldr	r3, [r7, #24]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800c058 	.word	0x0800c058
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	007a1200 	.word	0x007a1200

08004eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000010 	.word	0x20000010

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4904      	ldr	r1, [pc, #16]	@ (8004ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	0800c050 	.word	0x0800c050

08004ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004efc:	f7ff ffda 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	0adb      	lsrs	r3, r3, #11
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4904      	ldr	r1, [pc, #16]	@ (8004f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	0800c050 	.word	0x0800c050

08004f24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f30:	4b2a      	ldr	r3, [pc, #168]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f3c:	f7ff f81c 	bl	8003f78 <HAL_PWREx_GetVoltageRange>
 8004f40:	6178      	str	r0, [r7, #20]
 8004f42:	e014      	b.n	8004f6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f44:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f48:	4a24      	ldr	r2, [pc, #144]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f50:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f5c:	f7ff f80c 	bl	8003f78 <HAL_PWREx_GetVoltageRange>
 8004f60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f62:	4b1e      	ldr	r3, [pc, #120]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f74:	d10b      	bne.n	8004f8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d919      	bls.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f80:	d902      	bls.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f82:	2302      	movs	r3, #2
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	e013      	b.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f88:	2301      	movs	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e010      	b.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b80      	cmp	r3, #128	@ 0x80
 8004f92:	d902      	bls.n	8004f9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f94:	2303      	movs	r3, #3
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e00a      	b.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b80      	cmp	r3, #128	@ 0x80
 8004f9e:	d102      	bne.n	8004fa6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e004      	b.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b70      	cmp	r3, #112	@ 0x70
 8004faa:	d101      	bne.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fac:	2301      	movs	r3, #1
 8004fae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 0207 	bic.w	r2, r3, #7
 8004fb8:	4909      	ldr	r1, [pc, #36]	@ (8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fc0:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d001      	beq.n	8004fd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40022000 	.word	0x40022000

08004fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fec:	2300      	movs	r3, #0
 8004fee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005008:	d303      	bcc.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800500a:	21c9      	movs	r1, #201	@ 0xc9
 800500c:	4889      	ldr	r0, [pc, #548]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800500e:	f7fd f859 	bl	80020c4 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800501a:	2b00      	cmp	r3, #0
 800501c:	d058      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005022:	2b00      	cmp	r3, #0
 8005024:	d012      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800502a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800502e:	d00d      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005038:	d008      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800503e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005042:	d003      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005044:	21d1      	movs	r1, #209	@ 0xd1
 8005046:	487b      	ldr	r0, [pc, #492]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005048:	f7fd f83c 	bl	80020c4 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005050:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005054:	d02a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8005056:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800505a:	d824      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800505c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005060:	d008      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005062:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005066:	d81e      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800506c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005070:	d010      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8005072:	e018      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005074:	4b70      	ldr	r3, [pc, #448]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4a6f      	ldr	r2, [pc, #444]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800507a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005080:	e015      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fc69 	bl	8005960 <RCCEx_PLLSAI1_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005092:	e00c      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3320      	adds	r3, #32
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fde0 	bl	8005c60 <RCCEx_PLLSAI2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	74fb      	strb	r3, [r7, #19]
      break;
 80050aa:	e000      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 80050ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b4:	4b60      	ldr	r3, [pc, #384]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050c2:	495d      	ldr	r1, [pc, #372]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d059      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x128>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050ec:	d00e      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x128>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050f6:	d009      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x128>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005100:	d004      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005102:	f240 110f 	movw	r1, #271	@ 0x10f
 8005106:	484b      	ldr	r0, [pc, #300]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005108:	f7fc ffdc 	bl	80020c4 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005110:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005114:	d02a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005116:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800511a:	d824      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800511c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005120:	d008      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005126:	d81e      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800512c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005130:	d010      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005132:	e018      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005134:	4b40      	ldr	r3, [pc, #256]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a3f      	ldr	r2, [pc, #252]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005140:	e015      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fc09 	bl	8005960 <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005152:	e00c      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3320      	adds	r3, #32
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fd80 	bl	8005c60 <RCCEx_PLLSAI2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	74fb      	strb	r3, [r7, #19]
      break;
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005174:	4b30      	ldr	r3, [pc, #192]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005182:	492d      	ldr	r1, [pc, #180]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80c2 	beq.w	8005322 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d016      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b6:	d010      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ce:	d004      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80051d0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80051d4:	4817      	ldr	r0, [pc, #92]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80051d6:	f7fc ff75 	bl	80020c4 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051da:	4b17      	ldr	r3, [pc, #92]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x208>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00d      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f0:	4b11      	ldr	r3, [pc, #68]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f4:	4a10      	ldr	r2, [pc, #64]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80051fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005208:	2301      	movs	r3, #1
 800520a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005216:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005218:	f7fd fe16 	bl	8002e48 <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800521e:	e00f      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005220:	f7fd fe12 	bl	8002e48 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d908      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	74fb      	strb	r3, [r7, #19]
        break;
 8005232:	e00b      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8005234:	0800bf1c 	.word	0x0800bf1c
 8005238:	40021000 	.word	0x40021000
 800523c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005240:	4b30      	ldr	r3, [pc, #192]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0e9      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d15c      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005252:	4b2d      	ldr	r3, [pc, #180]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01f      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d019      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005270:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800527a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800527c:	4b22      	ldr	r3, [pc, #136]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	4a21      	ldr	r2, [pc, #132]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528c:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800529c:	4a1a      	ldr	r2, [pc, #104]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fd fdcb 	bl	8002e48 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b4:	e00b      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fd fdc7 	bl	8002e48 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d902      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	74fb      	strb	r3, [r7, #19]
            break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ec      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e2:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f2:	4905      	ldr	r1, [pc, #20]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052fa:	e009      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8005302:	bf00      	nop
 8005304:	40007000 	.word	0x40007000
 8005308:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005310:	7c7b      	ldrb	r3, [r7, #17]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005316:	4b8d      	ldr	r3, [pc, #564]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531a:	4a8c      	ldr	r2, [pc, #560]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800531c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005320:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01f      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	2b00      	cmp	r3, #0
 8005334:	d010      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	2b01      	cmp	r3, #1
 800533c:	d00c      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	2b03      	cmp	r3, #3
 8005344:	d008      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534a:	2b02      	cmp	r3, #2
 800534c:	d004      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800534e:	f240 1199 	movw	r1, #409	@ 0x199
 8005352:	487f      	ldr	r0, [pc, #508]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005354:	f7fc feb6 	bl	80020c4 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005358:	4b7c      	ldr	r3, [pc, #496]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	4979      	ldr	r1, [pc, #484]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01f      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d010      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	2b04      	cmp	r3, #4
 8005388:	d00c      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	2b0c      	cmp	r3, #12
 8005390:	d008      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005396:	2b08      	cmp	r3, #8
 8005398:	d004      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800539a:	f240 11a3 	movw	r1, #419	@ 0x1a3
 800539e:	486c      	ldr	r0, [pc, #432]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80053a0:	f7fc fe90 	bl	80020c4 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a4:	4b69      	ldr	r3, [pc, #420]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f023 020c 	bic.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b2:	4966      	ldr	r1, [pc, #408]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01f      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d010      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d00c      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b30      	cmp	r3, #48	@ 0x30
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d004      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80053e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80053ea:	4859      	ldr	r0, [pc, #356]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80053ec:	f7fc fe6a 	bl	80020c4 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f0:	4b56      	ldr	r3, [pc, #344]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	4953      	ldr	r1, [pc, #332]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01f      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	2b00      	cmp	r3, #0
 8005418:	d010      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	2b40      	cmp	r3, #64	@ 0x40
 8005420:	d00c      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	2bc0      	cmp	r3, #192	@ 0xc0
 8005428:	d008      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	2b80      	cmp	r3, #128	@ 0x80
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005432:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005436:	4846      	ldr	r0, [pc, #280]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005438:	f7fc fe44 	bl	80020c4 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800543c:	4b43      	ldr	r3, [pc, #268]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	4940      	ldr	r1, [pc, #256]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	d013      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546e:	d00e      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005478:	d009      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005482:	d004      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005484:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8005488:	4831      	ldr	r0, [pc, #196]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800548a:	f7fc fe1b 	bl	80020c4 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800548e:	4b2f      	ldr	r3, [pc, #188]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549c:	492b      	ldr	r1, [pc, #172]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d022      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d013      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c0:	d00e      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ca:	d009      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d4:	d004      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80054d6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80054da:	481d      	ldr	r0, [pc, #116]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80054dc:	f7fc fdf2 	bl	80020c4 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054e0:	4b1a      	ldr	r3, [pc, #104]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ee:	4917      	ldr	r1, [pc, #92]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d028      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005512:	d00e      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005518:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800551c:	d009      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005522:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005526:	d004      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005528:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800552c:	4808      	ldr	r0, [pc, #32]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800552e:	f7fc fdc9 	bl	80020c4 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005532:	4b06      	ldr	r3, [pc, #24]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005538:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005540:	4902      	ldr	r1, [pc, #8]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005548:	e004      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	0800bf1c 	.word	0x0800bf1c
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555c:	2b00      	cmp	r3, #0
 800555e:	d022      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005564:	2b00      	cmp	r3, #0
 8005566:	d013      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005570:	d00e      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005576:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800557a:	d009      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005586:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800558a:	489e      	ldr	r0, [pc, #632]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800558c:	f7fc fd9a 	bl	80020c4 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005590:	4b9d      	ldr	r3, [pc, #628]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559e:	499a      	ldr	r1, [pc, #616]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01d      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00e      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c2:	d009      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055cc:	d004      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80055ce:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80055d2:	488c      	ldr	r0, [pc, #560]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80055d4:	f7fc fd76 	bl	80020c4 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d8:	4b8b      	ldr	r3, [pc, #556]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e6:	4988      	ldr	r1, [pc, #544]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01d      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800560a:	d009      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005614:	d004      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005616:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800561a:	487a      	ldr	r0, [pc, #488]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800561c:	f7fc fd52 	bl	80020c4 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005620:	4b79      	ldr	r3, [pc, #484]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	4976      	ldr	r1, [pc, #472]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01d      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005652:	d009      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800565c:	d004      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800565e:	f240 2107 	movw	r1, #519	@ 0x207
 8005662:	4868      	ldr	r0, [pc, #416]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005664:	f7fc fd2e 	bl	80020c4 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005668:	4b67      	ldr	r3, [pc, #412]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005676:	4964      	ldr	r1, [pc, #400]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d040      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d013      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005696:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800569a:	d00e      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056a4:	d009      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80056b0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80056b4:	4853      	ldr	r0, [pc, #332]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80056b6:	f7fc fd05 	bl	80020c4 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ba:	4b53      	ldr	r3, [pc, #332]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c8:	494f      	ldr	r1, [pc, #316]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056d8:	d106      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056da:	4b4b      	ldr	r3, [pc, #300]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4a4a      	ldr	r2, [pc, #296]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e4:	60d3      	str	r3, [r2, #12]
 80056e6:	e011      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f0:	d10c      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2101      	movs	r1, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f931 	bl	8005960 <RCCEx_PLLSAI1_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d040      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571c:	2b00      	cmp	r3, #0
 800571e:	d013      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005728:	d00e      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005732:	d009      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005738:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800573c:	d004      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800573e:	f240 2141 	movw	r1, #577	@ 0x241
 8005742:	4830      	ldr	r0, [pc, #192]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005744:	f7fc fcbe 	bl	80020c4 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005748:	4b2f      	ldr	r3, [pc, #188]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005756:	492c      	ldr	r1, [pc, #176]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005766:	d106      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005768:	4b27      	ldr	r3, [pc, #156]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a26      	ldr	r2, [pc, #152]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005772:	60d3      	str	r3, [r2, #12]
 8005774:	e011      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800577e:	d10c      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	2101      	movs	r1, #1
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f8ea 	bl	8005960 <RCCEx_PLLSAI1_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8005796:	7cfb      	ldrb	r3, [r7, #19]
 8005798:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d044      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d013      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b6:	d00e      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c0:	d009      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80057ca:	d004      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80057cc:	f240 2166 	movw	r1, #614	@ 0x266
 80057d0:	480c      	ldr	r0, [pc, #48]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80057d2:	f7fc fc77 	bl	80020c4 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e4:	4908      	ldr	r1, [pc, #32]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f4:	d10a      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f6:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4a03      	ldr	r2, [pc, #12]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005800:	60d3      	str	r3, [r2, #12]
 8005802:	e015      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005804:	0800bf1c 	.word	0x0800bf1c
 8005808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005814:	d10c      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f000 f89f 	bl	8005960 <RCCEx_PLLSAI1_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d047      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800584c:	d00e      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005856:	d009      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800585c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005860:	d004      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005862:	f240 2186 	movw	r1, #646	@ 0x286
 8005866:	483c      	ldr	r0, [pc, #240]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005868:	f7fc fc2c 	bl	80020c4 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800586c:	4b3b      	ldr	r3, [pc, #236]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800587a:	4938      	ldr	r1, [pc, #224]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800588a:	d10d      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	2102      	movs	r1, #2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f864 	bl	8005960 <RCCEx_PLLSAI1_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d014      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	74bb      	strb	r3, [r7, #18]
 80058a6:	e011      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3320      	adds	r3, #32
 80058b6:	2102      	movs	r1, #2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f9d1 	bl	8005c60 <RCCEx_PLLSAI2_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c2:	7cfb      	ldrb	r3, [r7, #19]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d018      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e8:	d004      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80058ea:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80058ee:	481a      	ldr	r0, [pc, #104]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80058f0:	f7fc fbe8 	bl	80020c4 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058f4:	4b19      	ldr	r3, [pc, #100]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005902:	4916      	ldr	r1, [pc, #88]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01b      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800592a:	d004      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800592c:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8005930:	4809      	ldr	r0, [pc, #36]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005932:	f7fc fbc7 	bl	80020c4 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005936:	4b09      	ldr	r3, [pc, #36]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005946:	4905      	ldr	r1, [pc, #20]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800594e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	0800bf1c 	.word	0x0800bf1c
 800595c:	40021000 	.word	0x40021000

08005960 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <RCCEx_PLLSAI1_Config+0x38>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00c      	beq.n	8005998 <RCCEx_PLLSAI1_Config+0x38>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d008      	beq.n	8005998 <RCCEx_PLLSAI1_Config+0x38>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d004      	beq.n	8005998 <RCCEx_PLLSAI1_Config+0x38>
 800598e:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005992:	4887      	ldr	r0, [pc, #540]	@ (8005bb0 <RCCEx_PLLSAI1_Config+0x250>)
 8005994:	f7fc fb96 	bl	80020c4 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <RCCEx_PLLSAI1_Config+0x48>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d904      	bls.n	80059b2 <RCCEx_PLLSAI1_Config+0x52>
 80059a8:	f640 3163 	movw	r1, #2915	@ 0xb63
 80059ac:	4880      	ldr	r0, [pc, #512]	@ (8005bb0 <RCCEx_PLLSAI1_Config+0x250>)
 80059ae:	f7fc fb89 	bl	80020c4 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b07      	cmp	r3, #7
 80059b8:	d903      	bls.n	80059c2 <RCCEx_PLLSAI1_Config+0x62>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b56      	cmp	r3, #86	@ 0x56
 80059c0:	d904      	bls.n	80059cc <RCCEx_PLLSAI1_Config+0x6c>
 80059c2:	f640 3164 	movw	r1, #2916	@ 0xb64
 80059c6:	487a      	ldr	r0, [pc, #488]	@ (8005bb0 <RCCEx_PLLSAI1_Config+0x250>)
 80059c8:	f7fc fb7c 	bl	80020c4 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <RCCEx_PLLSAI1_Config+0x90>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <RCCEx_PLLSAI1_Config+0x90>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <RCCEx_PLLSAI1_Config+0xa0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80059f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <RCCEx_PLLSAI1_Config+0xaa>
 8005a00:	f640 3165 	movw	r1, #2917	@ 0xb65
 8005a04:	486a      	ldr	r0, [pc, #424]	@ (8005bb0 <RCCEx_PLLSAI1_Config+0x250>)
 8005a06:	f7fc fb5d 	bl	80020c4 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d018      	beq.n	8005a48 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a16:	4b67      	ldr	r3, [pc, #412]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0203 	and.w	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d10d      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
       ||
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a2e:	4b61      	ldr	r3, [pc, #388]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d047      	beq.n	8005ad2 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	e044      	b.n	8005ad2 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d018      	beq.n	8005a82 <RCCEx_PLLSAI1_Config+0x122>
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d825      	bhi.n	8005aa0 <RCCEx_PLLSAI1_Config+0x140>
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d002      	beq.n	8005a5e <RCCEx_PLLSAI1_Config+0xfe>
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d009      	beq.n	8005a70 <RCCEx_PLLSAI1_Config+0x110>
 8005a5c:	e020      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a5e:	4b55      	ldr	r3, [pc, #340]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11d      	bne.n	8005aa6 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a6e:	e01a      	b.n	8005aa6 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a70:	4b50      	ldr	r3, [pc, #320]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e013      	b.n	8005aaa <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a82:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10f      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a8e:	4b49      	ldr	r3, [pc, #292]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a9e:	e006      	b.n	8005aae <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	e004      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005aa6:	bf00      	nop
 8005aa8:	e002      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10d      	bne.n	8005ad2 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	430b      	orrs	r3, r1
 8005acc:	4939      	ldr	r1, [pc, #228]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 80ba 	bne.w	8005c4e <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ada:	4b36      	ldr	r3, [pc, #216]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a35      	ldr	r2, [pc, #212]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005ae0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fd f9af 	bl	8002e48 <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aec:	e009      	b.n	8005b02 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aee:	f7fd f9ab 	bl	8002e48 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d902      	bls.n	8005b02 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	73fb      	strb	r3, [r7, #15]
        break;
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b02:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ef      	bne.n	8005aee <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 809c 	bne.w	8005c4e <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d11e      	bne.n	8005b5a <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b07      	cmp	r3, #7
 8005b22:	d008      	beq.n	8005b36 <RCCEx_PLLSAI1_Config+0x1d6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b11      	cmp	r3, #17
 8005b2a:	d004      	beq.n	8005b36 <RCCEx_PLLSAI1_Config+0x1d6>
 8005b2c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005b30:	481f      	ldr	r0, [pc, #124]	@ (8005bb0 <RCCEx_PLLSAI1_Config+0x250>)
 8005b32:	f7fc fac7 	bl	80020c4 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b36:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6892      	ldr	r2, [r2, #8]
 8005b46:	0211      	lsls	r1, r2, #8
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	0912      	lsrs	r2, r2, #4
 8005b4e:	0452      	lsls	r2, r2, #17
 8005b50:	430a      	orrs	r2, r1
 8005b52:	4918      	ldr	r1, [pc, #96]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
 8005b58:	e055      	b.n	8005c06 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d12b      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d010      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x22a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d00c      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x22a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b06      	cmp	r3, #6
 8005b76:	d008      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x22a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d004      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x22a>
 8005b80:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8005b84:	480a      	ldr	r0, [pc, #40]	@ (8005bb0 <RCCEx_PLLSAI1_Config+0x250>)
 8005b86:	f7fc fa9d 	bl	80020c4 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6892      	ldr	r2, [r2, #8]
 8005b9a:	0211      	lsls	r1, r2, #8
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6912      	ldr	r2, [r2, #16]
 8005ba0:	0852      	lsrs	r2, r2, #1
 8005ba2:	3a01      	subs	r2, #1
 8005ba4:	0552      	lsls	r2, r2, #21
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	4902      	ldr	r1, [pc, #8]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x254>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	610b      	str	r3, [r1, #16]
 8005bae:	e02a      	b.n	8005c06 <RCCEx_PLLSAI1_Config+0x2a6>
 8005bb0:	0800bf1c 	.word	0x0800bf1c
 8005bb4:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d010      	beq.n	8005be2 <RCCEx_PLLSAI1_Config+0x282>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d00c      	beq.n	8005be2 <RCCEx_PLLSAI1_Config+0x282>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d008      	beq.n	8005be2 <RCCEx_PLLSAI1_Config+0x282>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d004      	beq.n	8005be2 <RCCEx_PLLSAI1_Config+0x282>
 8005bd8:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8005bdc:	481e      	ldr	r0, [pc, #120]	@ (8005c58 <RCCEx_PLLSAI1_Config+0x2f8>)
 8005bde:	f7fc fa71 	bl	80020c4 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005bea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6892      	ldr	r2, [r2, #8]
 8005bf2:	0211      	lsls	r1, r2, #8
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6952      	ldr	r2, [r2, #20]
 8005bf8:	0852      	lsrs	r2, r2, #1
 8005bfa:	3a01      	subs	r2, #1
 8005bfc:	0652      	lsls	r2, r2, #25
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	4916      	ldr	r1, [pc, #88]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c06:	4b15      	ldr	r3, [pc, #84]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a14      	ldr	r2, [pc, #80]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005c0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c12:	f7fd f919 	bl	8002e48 <HAL_GetTick>
 8005c16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c18:	e009      	b.n	8005c2e <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c1a:	f7fd f915 	bl	8002e48 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d902      	bls.n	8005c2e <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	73fb      	strb	r3, [r7, #15]
          break;
 8005c2c:	e005      	b.n	8005c3a <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ef      	beq.n	8005c1a <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c40:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	4904      	ldr	r1, [pc, #16]	@ (8005c5c <RCCEx_PLLSAI1_Config+0x2fc>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	0800bf1c 	.word	0x0800bf1c
 8005c5c:	40021000 	.word	0x40021000

08005c60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d010      	beq.n	8005c98 <RCCEx_PLLSAI2_Config+0x38>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d00c      	beq.n	8005c98 <RCCEx_PLLSAI2_Config+0x38>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d008      	beq.n	8005c98 <RCCEx_PLLSAI2_Config+0x38>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d004      	beq.n	8005c98 <RCCEx_PLLSAI2_Config+0x38>
 8005c8e:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8005c92:	4896      	ldr	r0, [pc, #600]	@ (8005eec <RCCEx_PLLSAI2_Config+0x28c>)
 8005c94:	f7fc fa16 	bl	80020c4 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <RCCEx_PLLSAI2_Config+0x48>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d904      	bls.n	8005cb2 <RCCEx_PLLSAI2_Config+0x52>
 8005ca8:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8005cac:	488f      	ldr	r0, [pc, #572]	@ (8005eec <RCCEx_PLLSAI2_Config+0x28c>)
 8005cae:	f7fc fa09 	bl	80020c4 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	d903      	bls.n	8005cc2 <RCCEx_PLLSAI2_Config+0x62>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b56      	cmp	r3, #86	@ 0x56
 8005cc0:	d904      	bls.n	8005ccc <RCCEx_PLLSAI2_Config+0x6c>
 8005cc2:	f640 4131 	movw	r1, #3121	@ 0xc31
 8005cc6:	4889      	ldr	r0, [pc, #548]	@ (8005eec <RCCEx_PLLSAI2_Config+0x28c>)
 8005cc8:	f7fc f9fc 	bl	80020c4 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <RCCEx_PLLSAI2_Config+0x84>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <RCCEx_PLLSAI2_Config+0x94>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <RCCEx_PLLSAI2_Config+0x9e>
 8005cf4:	f640 4132 	movw	r1, #3122	@ 0xc32
 8005cf8:	487c      	ldr	r0, [pc, #496]	@ (8005eec <RCCEx_PLLSAI2_Config+0x28c>)
 8005cfa:	f7fc f9e3 	bl	80020c4 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d0a:	4b79      	ldr	r3, [pc, #484]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0203 	and.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d10d      	bne.n	8005d36 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d22:	4b73      	ldr	r3, [pc, #460]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
       ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d047      	beq.n	8005dc6 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e044      	b.n	8005dc6 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d018      	beq.n	8005d76 <RCCEx_PLLSAI2_Config+0x116>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d825      	bhi.n	8005d94 <RCCEx_PLLSAI2_Config+0x134>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <RCCEx_PLLSAI2_Config+0xf2>
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d009      	beq.n	8005d64 <RCCEx_PLLSAI2_Config+0x104>
 8005d50:	e020      	b.n	8005d94 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d52:	4b67      	ldr	r3, [pc, #412]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d62:	e01a      	b.n	8005d9a <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b62      	ldr	r3, [pc, #392]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d74:	e013      	b.n	8005d9e <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d76:	4b5e      	ldr	r3, [pc, #376]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d82:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d92:	e006      	b.n	8005da2 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e004      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005daa:	4b51      	ldr	r3, [pc, #324]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	494b      	ldr	r1, [pc, #300]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 808a 	bne.w	8005ee2 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dce:	4b48      	ldr	r3, [pc, #288]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a47      	ldr	r2, [pc, #284]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dda:	f7fd f835 	bl	8002e48 <HAL_GetTick>
 8005dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005de0:	e009      	b.n	8005df6 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005de2:	f7fd f831 	bl	8002e48 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d902      	bls.n	8005df6 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	73fb      	strb	r3, [r7, #15]
        break;
 8005df4:	e005      	b.n	8005e02 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005df6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1ef      	bne.n	8005de2 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d16c      	bne.n	8005ee2 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d11e      	bne.n	8005e4c <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	d008      	beq.n	8005e28 <RCCEx_PLLSAI2_Config+0x1c8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b11      	cmp	r3, #17
 8005e1c:	d004      	beq.n	8005e28 <RCCEx_PLLSAI2_Config+0x1c8>
 8005e1e:	f640 4185 	movw	r1, #3205	@ 0xc85
 8005e22:	4832      	ldr	r0, [pc, #200]	@ (8005eec <RCCEx_PLLSAI2_Config+0x28c>)
 8005e24:	f7fc f94e 	bl	80020c4 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e28:	4b31      	ldr	r3, [pc, #196]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6892      	ldr	r2, [r2, #8]
 8005e38:	0211      	lsls	r1, r2, #8
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68d2      	ldr	r2, [r2, #12]
 8005e3e:	0912      	lsrs	r2, r2, #4
 8005e40:	0452      	lsls	r2, r2, #17
 8005e42:	430a      	orrs	r2, r1
 8005e44:	492a      	ldr	r1, [pc, #168]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	614b      	str	r3, [r1, #20]
 8005e4a:	e026      	b.n	8005e9a <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d010      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x216>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d00c      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x216>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b06      	cmp	r3, #6
 8005e62:	d008      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x216>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d004      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x216>
 8005e6c:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8005e70:	481e      	ldr	r0, [pc, #120]	@ (8005eec <RCCEx_PLLSAI2_Config+0x28c>)
 8005e72:	f7fc f927 	bl	80020c4 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e76:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
 8005e86:	0211      	lsls	r1, r2, #8
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6912      	ldr	r2, [r2, #16]
 8005e8c:	0852      	lsrs	r2, r2, #1
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	0652      	lsls	r2, r2, #25
 8005e92:	430a      	orrs	r2, r1
 8005e94:	4916      	ldr	r1, [pc, #88]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a14      	ldr	r2, [pc, #80]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea6:	f7fc ffcf 	bl	8002e48 <HAL_GetTick>
 8005eaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eac:	e009      	b.n	8005ec2 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005eae:	f7fc ffcb 	bl	8002e48 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d902      	bls.n	8005ec2 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8005ec0:	e005      	b.n	8005ece <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ef      	beq.n	8005eae <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ed4:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005ed6:	695a      	ldr	r2, [r3, #20]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	4904      	ldr	r1, [pc, #16]	@ (8005ef0 <RCCEx_PLLSAI2_Config+0x290>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	0800bf1c 	.word	0x0800bf1c
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1dd      	b.n	80062c2 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a7b      	ldr	r2, [pc, #492]	@ (80060f8 <HAL_SPI_Init+0x204>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <HAL_SPI_Init+0x3a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a79      	ldr	r2, [pc, #484]	@ (80060fc <HAL_SPI_Init+0x208>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_SPI_Init+0x3a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a78      	ldr	r2, [pc, #480]	@ (8006100 <HAL_SPI_Init+0x20c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_SPI_Init+0x3a>
 8005f24:	f240 1147 	movw	r1, #327	@ 0x147
 8005f28:	4876      	ldr	r0, [pc, #472]	@ (8006104 <HAL_SPI_Init+0x210>)
 8005f2a:	f7fc f8cb 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_SPI_Init+0x56>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3e:	d004      	beq.n	8005f4a <HAL_SPI_Init+0x56>
 8005f40:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8005f44:	486f      	ldr	r0, [pc, #444]	@ (8006104 <HAL_SPI_Init+0x210>)
 8005f46:	f7fc f8bd 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00e      	beq.n	8005f70 <HAL_SPI_Init+0x7c>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5a:	d009      	beq.n	8005f70 <HAL_SPI_Init+0x7c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f64:	d004      	beq.n	8005f70 <HAL_SPI_Init+0x7c>
 8005f66:	f240 1149 	movw	r1, #329	@ 0x149
 8005f6a:	4866      	ldr	r0, [pc, #408]	@ (8006104 <HAL_SPI_Init+0x210>)
 8005f6c:	f7fc f8aa 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f78:	d040      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005f82:	d03b      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8005f8c:	d036      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f96:	d031      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8005fa0:	d02c      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005faa:	d027      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8005fb4:	d022      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fbe:	d01d      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fc8:	d018      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fd2:	d013      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005fdc:	d00e      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe6:	d009      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ff0:	d004      	beq.n	8005ffc <HAL_SPI_Init+0x108>
 8005ff2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8005ff6:	4843      	ldr	r0, [pc, #268]	@ (8006104 <HAL_SPI_Init+0x210>)
 8005ff8:	f7fc f864 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006004:	d00d      	beq.n	8006022 <HAL_SPI_Init+0x12e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_SPI_Init+0x12e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006016:	d004      	beq.n	8006022 <HAL_SPI_Init+0x12e>
 8006018:	f240 114b 	movw	r1, #331	@ 0x14b
 800601c:	4839      	ldr	r0, [pc, #228]	@ (8006104 <HAL_SPI_Init+0x210>)
 800601e:	f7fc f851 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006026:	2b08      	cmp	r3, #8
 8006028:	d008      	beq.n	800603c <HAL_SPI_Init+0x148>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <HAL_SPI_Init+0x148>
 8006032:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006036:	4833      	ldr	r0, [pc, #204]	@ (8006104 <HAL_SPI_Init+0x210>)
 8006038:	f7fc f844 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_SPI_Init+0x192>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d01c      	beq.n	8006086 <HAL_SPI_Init+0x192>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b10      	cmp	r3, #16
 8006052:	d018      	beq.n	8006086 <HAL_SPI_Init+0x192>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	2b18      	cmp	r3, #24
 800605a:	d014      	beq.n	8006086 <HAL_SPI_Init+0x192>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	2b20      	cmp	r3, #32
 8006062:	d010      	beq.n	8006086 <HAL_SPI_Init+0x192>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	2b28      	cmp	r3, #40	@ 0x28
 800606a:	d00c      	beq.n	8006086 <HAL_SPI_Init+0x192>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	2b30      	cmp	r3, #48	@ 0x30
 8006072:	d008      	beq.n	8006086 <HAL_SPI_Init+0x192>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	2b38      	cmp	r3, #56	@ 0x38
 800607a:	d004      	beq.n	8006086 <HAL_SPI_Init+0x192>
 800607c:	f240 114d 	movw	r1, #333	@ 0x14d
 8006080:	4820      	ldr	r0, [pc, #128]	@ (8006104 <HAL_SPI_Init+0x210>)
 8006082:	f7fc f81f 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_SPI_Init+0x1ac>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	2b80      	cmp	r3, #128	@ 0x80
 8006094:	d004      	beq.n	80060a0 <HAL_SPI_Init+0x1ac>
 8006096:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800609a:	481a      	ldr	r0, [pc, #104]	@ (8006104 <HAL_SPI_Init+0x210>)
 800609c:	f7fc f812 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_SPI_Init+0x1c6>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	2b10      	cmp	r3, #16
 80060ae:	d004      	beq.n	80060ba <HAL_SPI_Init+0x1c6>
 80060b0:	f240 114f 	movw	r1, #335	@ 0x14f
 80060b4:	4813      	ldr	r0, [pc, #76]	@ (8006104 <HAL_SPI_Init+0x210>)
 80060b6:	f7fc f805 	bl	80020c4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d151      	bne.n	8006166 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_SPI_Init+0x1e8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d004      	beq.n	80060dc <HAL_SPI_Init+0x1e8>
 80060d2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80060d6:	480b      	ldr	r0, [pc, #44]	@ (8006104 <HAL_SPI_Init+0x210>)
 80060d8:	f7fb fff4 	bl	80020c4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d011      	beq.n	8006108 <HAL_SPI_Init+0x214>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d00d      	beq.n	8006108 <HAL_SPI_Init+0x214>
 80060ec:	f240 1153 	movw	r1, #339	@ 0x153
 80060f0:	4804      	ldr	r0, [pc, #16]	@ (8006104 <HAL_SPI_Init+0x210>)
 80060f2:	f7fb ffe7 	bl	80020c4 <assert_failed>
 80060f6:	e007      	b.n	8006108 <HAL_SPI_Init+0x214>
 80060f8:	40013000 	.word	0x40013000
 80060fc:	40003800 	.word	0x40003800
 8006100:	40003c00 	.word	0x40003c00
 8006104:	0800bf58 	.word	0x0800bf58

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006110:	d125      	bne.n	800615e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d050      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	2b08      	cmp	r3, #8
 8006120:	d04c      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	2b10      	cmp	r3, #16
 8006128:	d048      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	2b18      	cmp	r3, #24
 8006130:	d044      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	2b20      	cmp	r3, #32
 8006138:	d040      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	2b28      	cmp	r3, #40	@ 0x28
 8006140:	d03c      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	2b30      	cmp	r3, #48	@ 0x30
 8006148:	d038      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	2b38      	cmp	r3, #56	@ 0x38
 8006150:	d034      	beq.n	80061bc <HAL_SPI_Init+0x2c8>
 8006152:	f240 1157 	movw	r1, #343	@ 0x157
 8006156:	485d      	ldr	r0, [pc, #372]	@ (80062cc <HAL_SPI_Init+0x3d8>)
 8006158:	f7fb ffb4 	bl	80020c4 <assert_failed>
 800615c:	e02e      	b.n	80061bc <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	61da      	str	r2, [r3, #28]
 8006164:	e02a      	b.n	80061bc <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d01c      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	2b10      	cmp	r3, #16
 800617c:	d018      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b18      	cmp	r3, #24
 8006184:	d014      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	2b20      	cmp	r3, #32
 800618c:	d010      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	2b28      	cmp	r3, #40	@ 0x28
 8006194:	d00c      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b30      	cmp	r3, #48	@ 0x30
 800619c:	d008      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	2b38      	cmp	r3, #56	@ 0x38
 80061a4:	d004      	beq.n	80061b0 <HAL_SPI_Init+0x2bc>
 80061a6:	f240 1161 	movw	r1, #353	@ 0x161
 80061aa:	4848      	ldr	r0, [pc, #288]	@ (80062cc <HAL_SPI_Init+0x3d8>)
 80061ac:	f7fb ff8a 	bl	80020c4 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fb ffb8 	bl	800214c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061fc:	d902      	bls.n	8006204 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e002      	b.n	800620a <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006208:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006212:	d007      	beq.n	8006224 <HAL_SPI_Init+0x330>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006266:	ea42 0103 	orr.w	r1, r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	f003 0204 	and.w	r2, r3, #4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062a0:	ea42 0103 	orr.w	r1, r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	0800bf58 	.word	0x0800bf58

080062d0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80062e6:	f640 0172 	movw	r1, #2162	@ 0x872
 80062ea:	487f      	ldr	r0, [pc, #508]	@ (80064e8 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80062ec:	f7fb feea 	bl	80020c4 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <HAL_SPI_TransmitReceive_DMA+0x32>
 80062f8:	f640 0173 	movw	r1, #2163	@ 0x873
 80062fc:	487a      	ldr	r0, [pc, #488]	@ (80064e8 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80062fe:	f7fb fee1 	bl	80020c4 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <HAL_SPI_TransmitReceive_DMA+0x44>
 800630a:	f640 0176 	movw	r1, #2166	@ 0x876
 800630e:	4876      	ldr	r0, [pc, #472]	@ (80064e8 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006310:	f7fb fed8 	bl	80020c4 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800631a:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d00c      	beq.n	8006342 <HAL_SPI_TransmitReceive_DMA+0x72>
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800632e:	d106      	bne.n	800633e <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <HAL_SPI_TransmitReceive_DMA+0x6e>
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	2b04      	cmp	r3, #4
 800633c:	d001      	beq.n	8006342 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800633e:	2302      	movs	r3, #2
 8006340:	e15f      	b.n	8006602 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_SPI_TransmitReceive_DMA+0x84>
 800634e:	887b      	ldrh	r3, [r7, #2]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e154      	b.n	8006602 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_SPI_TransmitReceive_DMA+0x96>
 8006362:	2302      	movs	r3, #2
 8006364:	e14d      	b.n	8006602 <HAL_SPI_TransmitReceive_DMA+0x332>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b04      	cmp	r3, #4
 8006378:	d003      	beq.n	8006382 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2205      	movs	r2, #5
 800637e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	887a      	ldrh	r2, [r7, #2]
 8006392:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	887a      	ldrh	r2, [r7, #2]
 8006398:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80063ca:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063d4:	d908      	bls.n	80063e8 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063e4:	605a      	str	r2, [r3, #4]
 80063e6:	e06f      	b.n	80064c8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063f6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006402:	d126      	bne.n	8006452 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10f      	bne.n	8006430 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800641e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	085b      	lsrs	r3, r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800642e:	e010      	b.n	8006452 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800643e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006444:	b29b      	uxth	r3, r3
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	3301      	adds	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645c:	d134      	bne.n	80064c8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800646c:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006474:	b29b      	uxth	r3, r3
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d111      	bne.n	80064a2 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800648c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006494:	b29b      	uxth	r3, r3
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80064a0:	e012      	b.n	80064c8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064b0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3301      	adds	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d10f      	bne.n	80064f4 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d8:	4a04      	ldr	r2, [pc, #16]	@ (80064ec <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	4a03      	ldr	r2, [pc, #12]	@ (80064f0 <HAL_SPI_TransmitReceive_DMA+0x220>)
 80064e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064e4:	e00e      	b.n	8006504 <HAL_SPI_TransmitReceive_DMA+0x234>
 80064e6:	bf00      	nop
 80064e8:	0800bf58 	.word	0x0800bf58
 80064ec:	080069bd 	.word	0x080069bd
 80064f0:	08006885 	.word	0x08006885
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f8:	4a44      	ldr	r2, [pc, #272]	@ (800660c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006500:	4a43      	ldr	r2, [pc, #268]	@ (8006610 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8006502:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006508:	4a42      	ldr	r2, [pc, #264]	@ (8006614 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800650a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006510:	2200      	movs	r2, #0
 8006512:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	330c      	adds	r3, #12
 800651e:	4619      	mov	r1, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800652c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800652e:	f7fc ff8f 	bl	8003450 <HAL_DMA_Start_IT>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800653c:	f043 0210 	orr.w	r2, r3, #16
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e058      	b.n	8006602 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	2200      	movs	r2, #0
 800656e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006574:	2200      	movs	r2, #0
 8006576:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657c:	2200      	movs	r2, #0
 800657e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	4619      	mov	r1, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006596:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006598:	f7fc ff5a 	bl	8003450 <HAL_DMA_Start_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a6:	f043 0210 	orr.w	r2, r3, #16
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e023      	b.n	8006602 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c4:	2b40      	cmp	r3, #64	@ 0x40
 80065c6:	d007      	beq.n	80065d8 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0220 	orr.w	r2, r2, #32
 80065ee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0202 	orr.w	r2, r2, #2
 80065fe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	080069d9 	.word	0x080069d9
 8006610:	0800692d 	.word	0x0800692d
 8006614:	080069f5 	.word	0x080069f5

08006618 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	099b      	lsrs	r3, r3, #6
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10f      	bne.n	800665c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	099b      	lsrs	r3, r3, #6
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d004      	beq.n	800665c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
    return;
 800665a:	e0d7      	b.n	800680c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00a      	beq.n	800667e <HAL_SPI_IRQHandler+0x66>
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	09db      	lsrs	r3, r3, #7
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
    return;
 800667c:	e0c6      	b.n	800680c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10c      	bne.n	80066a4 <HAL_SPI_IRQHandler+0x8c>
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	099b      	lsrs	r3, r3, #6
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	0a1b      	lsrs	r3, r3, #8
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80b4 	beq.w	800680c <HAL_SPI_IRQHandler+0x1f4>
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80ad 	beq.w	800680c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	099b      	lsrs	r3, r3, #6
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d023      	beq.n	8006706 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d011      	beq.n	80066ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ce:	f043 0204 	orr.w	r2, r3, #4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	e00b      	b.n	8006706 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	693b      	ldr	r3, [r7, #16]
        return;
 8006704:	e082      	b.n	800680c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006716:	f043 0201 	orr.w	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800674c:	f043 0208 	orr.w	r2, r3, #8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006754:	2300      	movs	r3, #0
 8006756:	60bb      	str	r3, [r7, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006766:	2b00      	cmp	r3, #0
 8006768:	d04f      	beq.n	800680a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006778:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <HAL_SPI_IRQHandler+0x17e>
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d034      	beq.n	8006800 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0203 	bic.w	r2, r2, #3
 80067a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d011      	beq.n	80067d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b2:	4a18      	ldr	r2, [pc, #96]	@ (8006814 <HAL_SPI_IRQHandler+0x1fc>)
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fc feb6 	bl	800352c <HAL_DMA_Abort_IT>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d016      	beq.n	8006808 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	4a0d      	ldr	r2, [pc, #52]	@ (8006814 <HAL_SPI_IRQHandler+0x1fc>)
 80067e0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fc fea0 	bl	800352c <HAL_DMA_Abort_IT>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80067fe:	e003      	b.n	8006808 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f827 	bl	8006854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006806:	e000      	b.n	800680a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006808:	bf00      	nop
    return;
 800680a:	bf00      	nop
  }
}
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	08006a35 	.word	0x08006a35

08006818 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006876:	b2db      	uxtb	r3, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006892:	f7fc fad9 	bl	8002e48 <HAL_GetTick>
 8006896:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d03c      	beq.n	8006920 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0220 	bic.w	r2, r2, #32
 80068b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10d      	bne.n	80068da <SPI_DMAReceiveCplt+0x56>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068c6:	d108      	bne.n	80068da <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0203 	bic.w	r2, r2, #3
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	e007      	b.n	80068ea <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0201 	bic.w	r2, r2, #1
 80068e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	2164      	movs	r1, #100	@ 0x64
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f9d4 	bl	8006c9c <SPI_EndRxTransaction>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff9b 	bl	8006854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800691e:	e002      	b.n	8006926 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ff79 	bl	8006818 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006938:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800693a:	f7fc fa85 	bl	8002e48 <HAL_GetTick>
 800693e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d030      	beq.n	80069b0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0220 	bic.w	r2, r2, #32
 800695c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	2164      	movs	r1, #100	@ 0x64
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f9f2 	bl	8006d4c <SPI_EndRxTxTransaction>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0203 	bic.w	r2, r2, #3
 8006988:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff ff53 	bl	8006854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069ae:	e002      	b.n	80069b6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7fb fb63 	bl	800207c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7ff ff2e 	bl	800682c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069d0:	bf00      	nop
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff ff2a 	bl	8006840 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0203 	bic.w	r2, r2, #3
 8006a10:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a16:	f043 0210 	orr.w	r2, r3, #16
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff ff14 	bl	8006854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff feff 	bl	8006854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a70:	f7fc f9ea 	bl	8002e48 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	1a9b      	subs	r3, r3, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a80:	f7fc f9e2 	bl	8002e48 <HAL_GetTick>
 8006a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a86:	4b39      	ldr	r3, [pc, #228]	@ (8006b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	015b      	lsls	r3, r3, #5
 8006a8c:	0d1b      	lsrs	r3, r3, #20
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a96:	e054      	b.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d050      	beq.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aa0:	f7fc f9d2 	bl	8002e48 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d902      	bls.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d13d      	bne.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ace:	d111      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ad8:	d004      	beq.n	8006ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae2:	d107      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006afc:	d10f      	bne.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e017      	b.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d19b      	bne.n	8006a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000010 	.word	0x20000010

08006b70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	@ 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b82:	f7fc f961 	bl	8002e48 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006b92:	f7fc f959 	bl	8002e48 <HAL_GetTick>
 8006b96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8006c98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	00da      	lsls	r2, r3, #3
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	0d1b      	lsrs	r3, r3, #20
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bb2:	fb02 f303 	mul.w	r3, r2, r3
 8006bb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006bb8:	e060      	b.n	8006c7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bc0:	d107      	bne.n	8006bd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d050      	beq.n	8006c7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bda:	f7fc f935 	bl	8002e48 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d902      	bls.n	8006bf0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d13d      	bne.n	8006c6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c08:	d111      	bne.n	8006c2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c12:	d004      	beq.n	8006c1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1c:	d107      	bne.n	8006c2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c36:	d10f      	bne.n	8006c58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e010      	b.n	8006c8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d196      	bne.n	8006bba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3728      	adds	r7, #40	@ 0x28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000010 	.word	0x20000010

08006c9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cb0:	d111      	bne.n	8006cd6 <SPI_EndRxTransaction+0x3a>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cba:	d004      	beq.n	8006cc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc4:	d107      	bne.n	8006cd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	@ 0x80
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff febd 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e023      	b.n	8006d44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d04:	d11d      	bne.n	8006d42 <SPI_EndRxTransaction+0xa6>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d0e:	d004      	beq.n	8006d1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d18:	d113      	bne.n	8006d42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff ff22 	bl	8006b70 <SPI_WaitFifoStateUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d36:	f043 0220 	orr.w	r2, r3, #32
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e000      	b.n	8006d44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ff03 	bl	8006b70 <SPI_WaitFifoStateUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d74:	f043 0220 	orr.w	r2, r3, #32
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e027      	b.n	8006dd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2200      	movs	r2, #0
 8006d88:	2180      	movs	r1, #128	@ 0x80
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fe68 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9a:	f043 0220 	orr.w	r2, r3, #32
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e014      	b.n	8006dd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fedc 	bl	8006b70 <SPI_WaitFifoStateUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e000      	b.n	8006dd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e0e6      	b.n	8006fb8 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a74      	ldr	r2, [pc, #464]	@ (8006fc0 <HAL_TIM_Base_Init+0x1e8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d036      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfc:	d031      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a70      	ldr	r2, [pc, #448]	@ (8006fc4 <HAL_TIM_Base_Init+0x1ec>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d02c      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006fc8 <HAL_TIM_Base_Init+0x1f0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d027      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a6d      	ldr	r2, [pc, #436]	@ (8006fcc <HAL_TIM_Base_Init+0x1f4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d022      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a6b      	ldr	r2, [pc, #428]	@ (8006fd0 <HAL_TIM_Base_Init+0x1f8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01d      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a6a      	ldr	r2, [pc, #424]	@ (8006fd4 <HAL_TIM_Base_Init+0x1fc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d018      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a68      	ldr	r2, [pc, #416]	@ (8006fd8 <HAL_TIM_Base_Init+0x200>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a67      	ldr	r2, [pc, #412]	@ (8006fdc <HAL_TIM_Base_Init+0x204>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a65      	ldr	r2, [pc, #404]	@ (8006fe0 <HAL_TIM_Base_Init+0x208>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a64      	ldr	r2, [pc, #400]	@ (8006fe4 <HAL_TIM_Base_Init+0x20c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_TIM_Base_Init+0x8a>
 8006e58:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006e5c:	4862      	ldr	r0, [pc, #392]	@ (8006fe8 <HAL_TIM_Base_Init+0x210>)
 8006e5e:	f7fb f931 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d014      	beq.n	8006e94 <HAL_TIM_Base_Init+0xbc>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d010      	beq.n	8006e94 <HAL_TIM_Base_Init+0xbc>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d00c      	beq.n	8006e94 <HAL_TIM_Base_Init+0xbc>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d008      	beq.n	8006e94 <HAL_TIM_Base_Init+0xbc>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2b60      	cmp	r3, #96	@ 0x60
 8006e88:	d004      	beq.n	8006e94 <HAL_TIM_Base_Init+0xbc>
 8006e8a:	f240 1117 	movw	r1, #279	@ 0x117
 8006e8e:	4856      	ldr	r0, [pc, #344]	@ (8006fe8 <HAL_TIM_Base_Init+0x210>)
 8006e90:	f7fb f918 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIM_Base_Init+0xe2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea4:	d009      	beq.n	8006eba <HAL_TIM_Base_Init+0xe2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eae:	d004      	beq.n	8006eba <HAL_TIM_Base_Init+0xe2>
 8006eb0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006eb4:	484c      	ldr	r0, [pc, #304]	@ (8006fe8 <HAL_TIM_Base_Init+0x210>)
 8006eb6:	f7fb f905 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec2:	d004      	beq.n	8006ece <HAL_TIM_Base_Init+0xf6>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a40      	ldr	r2, [pc, #256]	@ (8006fcc <HAL_TIM_Base_Init+0x1f4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d107      	bne.n	8006ede <HAL_TIM_Base_Init+0x106>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e00e      	b.n	8006efc <HAL_TIM_Base_Init+0x124>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d006      	beq.n	8006ef4 <HAL_TIM_Base_Init+0x11c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eee:	d201      	bcs.n	8006ef4 <HAL_TIM_Base_Init+0x11c>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <HAL_TIM_Base_Init+0x11e>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_Base_Init+0x132>
 8006f00:	f240 1119 	movw	r1, #281	@ 0x119
 8006f04:	4838      	ldr	r0, [pc, #224]	@ (8006fe8 <HAL_TIM_Base_Init+0x210>)
 8006f06:	f7fb f8dd 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d008      	beq.n	8006f24 <HAL_TIM_Base_Init+0x14c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b80      	cmp	r3, #128	@ 0x80
 8006f18:	d004      	beq.n	8006f24 <HAL_TIM_Base_Init+0x14c>
 8006f1a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006f1e:	4832      	ldr	r0, [pc, #200]	@ (8006fe8 <HAL_TIM_Base_Init+0x210>)
 8006f20:	f7fb f8d0 	bl	80020c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7fb fdb9 	bl	8002ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4610      	mov	r0, r2
 8006f52:	f001 fd5b 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40001000 	.word	0x40001000
 8006fd4:	40001400 	.word	0x40001400
 8006fd8:	40013400 	.word	0x40013400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800
 8006fe8:	0800bf90 	.word	0x0800bf90

08006fec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e0e6      	b.n	80071cc <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a74      	ldr	r2, [pc, #464]	@ (80071d4 <HAL_TIM_PWM_Init+0x1e8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007010:	d031      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a70      	ldr	r2, [pc, #448]	@ (80071d8 <HAL_TIM_PWM_Init+0x1ec>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a6e      	ldr	r2, [pc, #440]	@ (80071dc <HAL_TIM_PWM_Init+0x1f0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a6d      	ldr	r2, [pc, #436]	@ (80071e0 <HAL_TIM_PWM_Init+0x1f4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a6b      	ldr	r2, [pc, #428]	@ (80071e4 <HAL_TIM_PWM_Init+0x1f8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a6a      	ldr	r2, [pc, #424]	@ (80071e8 <HAL_TIM_PWM_Init+0x1fc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a68      	ldr	r2, [pc, #416]	@ (80071ec <HAL_TIM_PWM_Init+0x200>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a67      	ldr	r2, [pc, #412]	@ (80071f0 <HAL_TIM_PWM_Init+0x204>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a65      	ldr	r2, [pc, #404]	@ (80071f4 <HAL_TIM_PWM_Init+0x208>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a64      	ldr	r2, [pc, #400]	@ (80071f8 <HAL_TIM_PWM_Init+0x20c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIM_PWM_Init+0x8a>
 800706c:	f240 5133 	movw	r1, #1331	@ 0x533
 8007070:	4862      	ldr	r0, [pc, #392]	@ (80071fc <HAL_TIM_PWM_Init+0x210>)
 8007072:	f7fb f827 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d014      	beq.n	80070a8 <HAL_TIM_PWM_Init+0xbc>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b10      	cmp	r3, #16
 8007084:	d010      	beq.n	80070a8 <HAL_TIM_PWM_Init+0xbc>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b20      	cmp	r3, #32
 800708c:	d00c      	beq.n	80070a8 <HAL_TIM_PWM_Init+0xbc>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b40      	cmp	r3, #64	@ 0x40
 8007094:	d008      	beq.n	80070a8 <HAL_TIM_PWM_Init+0xbc>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2b60      	cmp	r3, #96	@ 0x60
 800709c:	d004      	beq.n	80070a8 <HAL_TIM_PWM_Init+0xbc>
 800709e:	f240 5134 	movw	r1, #1332	@ 0x534
 80070a2:	4856      	ldr	r0, [pc, #344]	@ (80071fc <HAL_TIM_PWM_Init+0x210>)
 80070a4:	f7fb f80e 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <HAL_TIM_PWM_Init+0xe2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b8:	d009      	beq.n	80070ce <HAL_TIM_PWM_Init+0xe2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c2:	d004      	beq.n	80070ce <HAL_TIM_PWM_Init+0xe2>
 80070c4:	f240 5135 	movw	r1, #1333	@ 0x535
 80070c8:	484c      	ldr	r0, [pc, #304]	@ (80071fc <HAL_TIM_PWM_Init+0x210>)
 80070ca:	f7fa fffb 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d6:	d004      	beq.n	80070e2 <HAL_TIM_PWM_Init+0xf6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a40      	ldr	r2, [pc, #256]	@ (80071e0 <HAL_TIM_PWM_Init+0x1f4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d107      	bne.n	80070f2 <HAL_TIM_PWM_Init+0x106>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bf14      	ite	ne
 80070ea:	2301      	movne	r3, #1
 80070ec:	2300      	moveq	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	e00e      	b.n	8007110 <HAL_TIM_PWM_Init+0x124>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <HAL_TIM_PWM_Init+0x11c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007102:	d201      	bcs.n	8007108 <HAL_TIM_PWM_Init+0x11c>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <HAL_TIM_PWM_Init+0x11e>
 8007108:	2300      	movs	r3, #0
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_TIM_PWM_Init+0x132>
 8007114:	f240 5136 	movw	r1, #1334	@ 0x536
 8007118:	4838      	ldr	r0, [pc, #224]	@ (80071fc <HAL_TIM_PWM_Init+0x210>)
 800711a:	f7fa ffd3 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <HAL_TIM_PWM_Init+0x14c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b80      	cmp	r3, #128	@ 0x80
 800712c:	d004      	beq.n	8007138 <HAL_TIM_PWM_Init+0x14c>
 800712e:	f240 5137 	movw	r1, #1335	@ 0x537
 8007132:	4832      	ldr	r0, [pc, #200]	@ (80071fc <HAL_TIM_PWM_Init+0x210>)
 8007134:	f7fa ffc6 	bl	80020c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f857 	bl	8007200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f001 fc51 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40001000 	.word	0x40001000
 80071e8:	40001400 	.word	0x40001400
 80071ec:	40013400 	.word	0x40013400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800
 80071fc:	0800bf90 	.word	0x0800bf90

08007200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a85      	ldr	r2, [pc, #532]	@ (8007438 <HAL_TIM_PWM_Start+0x224>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d115      	bne.n	8007254 <HAL_TIM_PWM_Start+0x40>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 808d 	beq.w	800734a <HAL_TIM_PWM_Start+0x136>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b04      	cmp	r3, #4
 8007234:	f000 8089 	beq.w	800734a <HAL_TIM_PWM_Start+0x136>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b08      	cmp	r3, #8
 800723c:	f000 8085 	beq.w	800734a <HAL_TIM_PWM_Start+0x136>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b0c      	cmp	r3, #12
 8007244:	f000 8081 	beq.w	800734a <HAL_TIM_PWM_Start+0x136>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b10      	cmp	r3, #16
 800724c:	d07d      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b14      	cmp	r3, #20
 8007252:	d07a      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800725c:	d10b      	bne.n	8007276 <HAL_TIM_PWM_Start+0x62>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d072      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d06f      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b08      	cmp	r3, #8
 800726e:	d06c      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d069      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a70      	ldr	r2, [pc, #448]	@ (800743c <HAL_TIM_PWM_Start+0x228>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10b      	bne.n	8007298 <HAL_TIM_PWM_Start+0x84>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d061      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d05e      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b08      	cmp	r3, #8
 8007290:	d05b      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b0c      	cmp	r3, #12
 8007296:	d058      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a68      	ldr	r2, [pc, #416]	@ (8007440 <HAL_TIM_PWM_Start+0x22c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10b      	bne.n	80072ba <HAL_TIM_PWM_Start+0xa6>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d050      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d04d      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d04a      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b0c      	cmp	r3, #12
 80072b8:	d047      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a61      	ldr	r2, [pc, #388]	@ (8007444 <HAL_TIM_PWM_Start+0x230>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d10b      	bne.n	80072dc <HAL_TIM_PWM_Start+0xc8>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d03f      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d03c      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d039      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b0c      	cmp	r3, #12
 80072da:	d036      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a59      	ldr	r2, [pc, #356]	@ (8007448 <HAL_TIM_PWM_Start+0x234>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d111      	bne.n	800730a <HAL_TIM_PWM_Start+0xf6>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d02e      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d02b      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d028      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b0c      	cmp	r3, #12
 80072fc:	d025      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b10      	cmp	r3, #16
 8007302:	d022      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b14      	cmp	r3, #20
 8007308:	d01f      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a4f      	ldr	r2, [pc, #316]	@ (800744c <HAL_TIM_PWM_Start+0x238>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d105      	bne.n	8007320 <HAL_TIM_PWM_Start+0x10c>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d017      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b04      	cmp	r3, #4
 800731e:	d014      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a4a      	ldr	r2, [pc, #296]	@ (8007450 <HAL_TIM_PWM_Start+0x23c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d102      	bne.n	8007330 <HAL_TIM_PWM_Start+0x11c>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a47      	ldr	r2, [pc, #284]	@ (8007454 <HAL_TIM_PWM_Start+0x240>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d102      	bne.n	8007340 <HAL_TIM_PWM_Start+0x12c>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <HAL_TIM_PWM_Start+0x136>
 8007340:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8007344:	4844      	ldr	r0, [pc, #272]	@ (8007458 <HAL_TIM_PWM_Start+0x244>)
 8007346:	f7fa febd 	bl	80020c4 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <HAL_TIM_PWM_Start+0x150>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	bf14      	ite	ne
 800735c:	2301      	movne	r3, #1
 800735e:	2300      	moveq	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	e03c      	b.n	80073de <HAL_TIM_PWM_Start+0x1ca>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d109      	bne.n	800737e <HAL_TIM_PWM_Start+0x16a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	e02f      	b.n	80073de <HAL_TIM_PWM_Start+0x1ca>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d109      	bne.n	8007398 <HAL_TIM_PWM_Start+0x184>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	bf14      	ite	ne
 8007390:	2301      	movne	r3, #1
 8007392:	2300      	moveq	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	e022      	b.n	80073de <HAL_TIM_PWM_Start+0x1ca>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b0c      	cmp	r3, #12
 800739c:	d109      	bne.n	80073b2 <HAL_TIM_PWM_Start+0x19e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	bf14      	ite	ne
 80073aa:	2301      	movne	r3, #1
 80073ac:	2300      	moveq	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	e015      	b.n	80073de <HAL_TIM_PWM_Start+0x1ca>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d109      	bne.n	80073cc <HAL_TIM_PWM_Start+0x1b8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	bf14      	ite	ne
 80073c4:	2301      	movne	r3, #1
 80073c6:	2300      	moveq	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	e008      	b.n	80073de <HAL_TIM_PWM_Start+0x1ca>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e0af      	b.n	8007546 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <HAL_TIM_PWM_Start+0x1e2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073f4:	e036      	b.n	8007464 <HAL_TIM_PWM_Start+0x250>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_PWM_Start+0x1f2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007404:	e02e      	b.n	8007464 <HAL_TIM_PWM_Start+0x250>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b08      	cmp	r3, #8
 800740a:	d104      	bne.n	8007416 <HAL_TIM_PWM_Start+0x202>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007414:	e026      	b.n	8007464 <HAL_TIM_PWM_Start+0x250>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b0c      	cmp	r3, #12
 800741a:	d104      	bne.n	8007426 <HAL_TIM_PWM_Start+0x212>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007424:	e01e      	b.n	8007464 <HAL_TIM_PWM_Start+0x250>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b10      	cmp	r3, #16
 800742a:	d117      	bne.n	800745c <HAL_TIM_PWM_Start+0x248>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007434:	e016      	b.n	8007464 <HAL_TIM_PWM_Start+0x250>
 8007436:	bf00      	nop
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40000400 	.word	0x40000400
 8007440:	40000800 	.word	0x40000800
 8007444:	40000c00 	.word	0x40000c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400
 8007454:	40014800 	.word	0x40014800
 8007458:	0800bf90 	.word	0x0800bf90
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2201      	movs	r2, #1
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f001 ff6d 	bl	800934c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a36      	ldr	r2, [pc, #216]	@ (8007550 <HAL_TIM_PWM_Start+0x33c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d013      	beq.n	80074a4 <HAL_TIM_PWM_Start+0x290>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a34      	ldr	r2, [pc, #208]	@ (8007554 <HAL_TIM_PWM_Start+0x340>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d00e      	beq.n	80074a4 <HAL_TIM_PWM_Start+0x290>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a33      	ldr	r2, [pc, #204]	@ (8007558 <HAL_TIM_PWM_Start+0x344>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d009      	beq.n	80074a4 <HAL_TIM_PWM_Start+0x290>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a31      	ldr	r2, [pc, #196]	@ (800755c <HAL_TIM_PWM_Start+0x348>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d004      	beq.n	80074a4 <HAL_TIM_PWM_Start+0x290>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a30      	ldr	r2, [pc, #192]	@ (8007560 <HAL_TIM_PWM_Start+0x34c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d101      	bne.n	80074a8 <HAL_TIM_PWM_Start+0x294>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e000      	b.n	80074aa <HAL_TIM_PWM_Start+0x296>
 80074a8:	2300      	movs	r3, #0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a23      	ldr	r2, [pc, #140]	@ (8007550 <HAL_TIM_PWM_Start+0x33c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01d      	beq.n	8007504 <HAL_TIM_PWM_Start+0x2f0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d0:	d018      	beq.n	8007504 <HAL_TIM_PWM_Start+0x2f0>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a23      	ldr	r2, [pc, #140]	@ (8007564 <HAL_TIM_PWM_Start+0x350>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_TIM_PWM_Start+0x2f0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a21      	ldr	r2, [pc, #132]	@ (8007568 <HAL_TIM_PWM_Start+0x354>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_TIM_PWM_Start+0x2f0>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a20      	ldr	r2, [pc, #128]	@ (800756c <HAL_TIM_PWM_Start+0x358>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_TIM_PWM_Start+0x2f0>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a17      	ldr	r2, [pc, #92]	@ (8007554 <HAL_TIM_PWM_Start+0x340>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_TIM_PWM_Start+0x2f0>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a16      	ldr	r2, [pc, #88]	@ (8007558 <HAL_TIM_PWM_Start+0x344>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d115      	bne.n	8007530 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	4b19      	ldr	r3, [pc, #100]	@ (8007570 <HAL_TIM_PWM_Start+0x35c>)
 800750c:	4013      	ands	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b06      	cmp	r3, #6
 8007514:	d015      	beq.n	8007542 <HAL_TIM_PWM_Start+0x32e>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800751c:	d011      	beq.n	8007542 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0201 	orr.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800752e:	e008      	b.n	8007542 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	e000      	b.n	8007544 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40012c00 	.word	0x40012c00
 8007554:	40013400 	.word	0x40013400
 8007558:	40014000 	.word	0x40014000
 800755c:	40014400 	.word	0x40014400
 8007560:	40014800 	.word	0x40014800
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800
 800756c:	40000c00 	.word	0x40000c00
 8007570:	00010007 	.word	0x00010007

08007574 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a8d      	ldr	r2, [pc, #564]	@ (80077b8 <HAL_TIM_PWM_Stop+0x244>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d115      	bne.n	80075b4 <HAL_TIM_PWM_Stop+0x40>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 808d 	beq.w	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b04      	cmp	r3, #4
 8007594:	f000 8089 	beq.w	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b08      	cmp	r3, #8
 800759c:	f000 8085 	beq.w	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b0c      	cmp	r3, #12
 80075a4:	f000 8081 	beq.w	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	d07d      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b14      	cmp	r3, #20
 80075b2:	d07a      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075bc:	d10b      	bne.n	80075d6 <HAL_TIM_PWM_Stop+0x62>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d072      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d06f      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d06c      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d069      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a78      	ldr	r2, [pc, #480]	@ (80077bc <HAL_TIM_PWM_Stop+0x248>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10b      	bne.n	80075f8 <HAL_TIM_PWM_Stop+0x84>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d061      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d05e      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b08      	cmp	r3, #8
 80075f0:	d05b      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b0c      	cmp	r3, #12
 80075f6:	d058      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a70      	ldr	r2, [pc, #448]	@ (80077c0 <HAL_TIM_PWM_Stop+0x24c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10b      	bne.n	800761a <HAL_TIM_PWM_Stop+0xa6>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d050      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b04      	cmp	r3, #4
 800760c:	d04d      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b08      	cmp	r3, #8
 8007612:	d04a      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b0c      	cmp	r3, #12
 8007618:	d047      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a69      	ldr	r2, [pc, #420]	@ (80077c4 <HAL_TIM_PWM_Stop+0x250>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10b      	bne.n	800763c <HAL_TIM_PWM_Stop+0xc8>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d03f      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b04      	cmp	r3, #4
 800762e:	d03c      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b08      	cmp	r3, #8
 8007634:	d039      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b0c      	cmp	r3, #12
 800763a:	d036      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a61      	ldr	r2, [pc, #388]	@ (80077c8 <HAL_TIM_PWM_Stop+0x254>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d111      	bne.n	800766a <HAL_TIM_PWM_Stop+0xf6>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02e      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b04      	cmp	r3, #4
 8007650:	d02b      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b08      	cmp	r3, #8
 8007656:	d028      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b0c      	cmp	r3, #12
 800765c:	d025      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b10      	cmp	r3, #16
 8007662:	d022      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b14      	cmp	r3, #20
 8007668:	d01f      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a57      	ldr	r2, [pc, #348]	@ (80077cc <HAL_TIM_PWM_Stop+0x258>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d105      	bne.n	8007680 <HAL_TIM_PWM_Stop+0x10c>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d017      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b04      	cmp	r3, #4
 800767e:	d014      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a52      	ldr	r2, [pc, #328]	@ (80077d0 <HAL_TIM_PWM_Stop+0x25c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d102      	bne.n	8007690 <HAL_TIM_PWM_Stop+0x11c>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00c      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a4f      	ldr	r2, [pc, #316]	@ (80077d4 <HAL_TIM_PWM_Stop+0x260>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d102      	bne.n	80076a0 <HAL_TIM_PWM_Stop+0x12c>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <HAL_TIM_PWM_Stop+0x136>
 80076a0:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 80076a4:	484c      	ldr	r0, [pc, #304]	@ (80077d8 <HAL_TIM_PWM_Stop+0x264>)
 80076a6:	f7fa fd0d 	bl	80020c4 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 fe4a 	bl	800934c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3e      	ldr	r2, [pc, #248]	@ (80077b8 <HAL_TIM_PWM_Stop+0x244>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <HAL_TIM_PWM_Stop+0x176>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a40      	ldr	r2, [pc, #256]	@ (80077c8 <HAL_TIM_PWM_Stop+0x254>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_TIM_PWM_Stop+0x176>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a3e      	ldr	r2, [pc, #248]	@ (80077cc <HAL_TIM_PWM_Stop+0x258>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_TIM_PWM_Stop+0x176>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3d      	ldr	r2, [pc, #244]	@ (80077d0 <HAL_TIM_PWM_Stop+0x25c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_TIM_PWM_Stop+0x176>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a3b      	ldr	r2, [pc, #236]	@ (80077d4 <HAL_TIM_PWM_Stop+0x260>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d101      	bne.n	80076ee <HAL_TIM_PWM_Stop+0x17a>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <HAL_TIM_PWM_Stop+0x17c>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d017      	beq.n	8007724 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6a1a      	ldr	r2, [r3, #32]
 80076fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076fe:	4013      	ands	r3, r2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10f      	bne.n	8007724 <HAL_TIM_PWM_Stop+0x1b0>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	f240 4344 	movw	r3, #1092	@ 0x444
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d107      	bne.n	8007724 <HAL_TIM_PWM_Stop+0x1b0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007722:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <HAL_TIM_PWM_Stop+0x1e0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	f240 4344 	movw	r3, #1092	@ 0x444
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_TIM_PWM_Stop+0x1e0>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <HAL_TIM_PWM_Stop+0x1f0>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007762:	e023      	b.n	80077ac <HAL_TIM_PWM_Stop+0x238>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b04      	cmp	r3, #4
 8007768:	d104      	bne.n	8007774 <HAL_TIM_PWM_Stop+0x200>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007772:	e01b      	b.n	80077ac <HAL_TIM_PWM_Stop+0x238>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b08      	cmp	r3, #8
 8007778:	d104      	bne.n	8007784 <HAL_TIM_PWM_Stop+0x210>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007782:	e013      	b.n	80077ac <HAL_TIM_PWM_Stop+0x238>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b0c      	cmp	r3, #12
 8007788:	d104      	bne.n	8007794 <HAL_TIM_PWM_Stop+0x220>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007792:	e00b      	b.n	80077ac <HAL_TIM_PWM_Stop+0x238>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b10      	cmp	r3, #16
 8007798:	d104      	bne.n	80077a4 <HAL_TIM_PWM_Stop+0x230>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a2:	e003      	b.n	80077ac <HAL_TIM_PWM_Stop+0x238>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40000400 	.word	0x40000400
 80077c0:	40000800 	.word	0x40000800
 80077c4:	40000c00 	.word	0x40000c00
 80077c8:	40013400 	.word	0x40013400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800
 80077d8:	0800bf90 	.word	0x0800bf90

080077dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e1b0      	b.n	8007b52 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a7f      	ldr	r2, [pc, #508]	@ (80079f4 <HAL_TIM_Encoder_Init+0x218>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01d      	beq.n	8007836 <HAL_TIM_Encoder_Init+0x5a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007802:	d018      	beq.n	8007836 <HAL_TIM_Encoder_Init+0x5a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7b      	ldr	r2, [pc, #492]	@ (80079f8 <HAL_TIM_Encoder_Init+0x21c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_TIM_Encoder_Init+0x5a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a7a      	ldr	r2, [pc, #488]	@ (80079fc <HAL_TIM_Encoder_Init+0x220>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_TIM_Encoder_Init+0x5a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a78      	ldr	r2, [pc, #480]	@ (8007a00 <HAL_TIM_Encoder_Init+0x224>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_TIM_Encoder_Init+0x5a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a77      	ldr	r2, [pc, #476]	@ (8007a04 <HAL_TIM_Encoder_Init+0x228>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_TIM_Encoder_Init+0x5a>
 800782c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8007830:	4875      	ldr	r0, [pc, #468]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 8007832:	f7fa fc47 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d014      	beq.n	8007868 <HAL_TIM_Encoder_Init+0x8c>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b10      	cmp	r3, #16
 8007844:	d010      	beq.n	8007868 <HAL_TIM_Encoder_Init+0x8c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b20      	cmp	r3, #32
 800784c:	d00c      	beq.n	8007868 <HAL_TIM_Encoder_Init+0x8c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	d008      	beq.n	8007868 <HAL_TIM_Encoder_Init+0x8c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b60      	cmp	r3, #96	@ 0x60
 800785c:	d004      	beq.n	8007868 <HAL_TIM_Encoder_Init+0x8c>
 800785e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007862:	4869      	ldr	r0, [pc, #420]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 8007864:	f7fa fc2e 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00e      	beq.n	800788e <HAL_TIM_Encoder_Init+0xb2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007878:	d009      	beq.n	800788e <HAL_TIM_Encoder_Init+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007882:	d004      	beq.n	800788e <HAL_TIM_Encoder_Init+0xb2>
 8007884:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8007888:	485f      	ldr	r0, [pc, #380]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 800788a:	f7fa fc1b 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d008      	beq.n	80078a8 <HAL_TIM_Encoder_Init+0xcc>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	2b80      	cmp	r3, #128	@ 0x80
 800789c:	d004      	beq.n	80078a8 <HAL_TIM_Encoder_Init+0xcc>
 800789e:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 80078a2:	4859      	ldr	r0, [pc, #356]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 80078a4:	f7fa fc0e 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d00c      	beq.n	80078ca <HAL_TIM_Encoder_Init+0xee>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d008      	beq.n	80078ca <HAL_TIM_Encoder_Init+0xee>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d004      	beq.n	80078ca <HAL_TIM_Encoder_Init+0xee>
 80078c0:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80078c4:	4850      	ldr	r0, [pc, #320]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 80078c6:	f7fa fbfd 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d00c      	beq.n	80078ec <HAL_TIM_Encoder_Init+0x110>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d008      	beq.n	80078ec <HAL_TIM_Encoder_Init+0x110>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_Encoder_Init+0x110>
 80078e2:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 80078e6:	4848      	ldr	r0, [pc, #288]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 80078e8:	f7fa fbec 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d00c      	beq.n	800790e <HAL_TIM_Encoder_Init+0x132>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d008      	beq.n	800790e <HAL_TIM_Encoder_Init+0x132>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d004      	beq.n	800790e <HAL_TIM_Encoder_Init+0x132>
 8007904:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8007908:	483f      	ldr	r0, [pc, #252]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 800790a:	f7fa fbdb 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <HAL_TIM_Encoder_Init+0x14c>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d004      	beq.n	8007928 <HAL_TIM_Encoder_Init+0x14c>
 800791e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8007922:	4839      	ldr	r0, [pc, #228]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 8007924:	f7fa fbce 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_TIM_Encoder_Init+0x166>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d004      	beq.n	8007942 <HAL_TIM_Encoder_Init+0x166>
 8007938:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800793c:	4832      	ldr	r0, [pc, #200]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 800793e:	f7fa fbc1 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d010      	beq.n	800796c <HAL_TIM_Encoder_Init+0x190>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b04      	cmp	r3, #4
 8007950:	d00c      	beq.n	800796c <HAL_TIM_Encoder_Init+0x190>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	2b08      	cmp	r3, #8
 8007958:	d008      	beq.n	800796c <HAL_TIM_Encoder_Init+0x190>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b0c      	cmp	r3, #12
 8007960:	d004      	beq.n	800796c <HAL_TIM_Encoder_Init+0x190>
 8007962:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8007966:	4828      	ldr	r0, [pc, #160]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 8007968:	f7fa fbac 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d010      	beq.n	8007996 <HAL_TIM_Encoder_Init+0x1ba>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	2b04      	cmp	r3, #4
 800797a:	d00c      	beq.n	8007996 <HAL_TIM_Encoder_Init+0x1ba>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	2b08      	cmp	r3, #8
 8007982:	d008      	beq.n	8007996 <HAL_TIM_Encoder_Init+0x1ba>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	2b0c      	cmp	r3, #12
 800798a:	d004      	beq.n	8007996 <HAL_TIM_Encoder_Init+0x1ba>
 800798c:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007990:	481d      	ldr	r0, [pc, #116]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 8007992:	f7fa fb97 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b0f      	cmp	r3, #15
 800799c:	d904      	bls.n	80079a8 <HAL_TIM_Encoder_Init+0x1cc>
 800799e:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80079a2:	4819      	ldr	r0, [pc, #100]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 80079a4:	f7fa fb8e 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	2b0f      	cmp	r3, #15
 80079ae:	d904      	bls.n	80079ba <HAL_TIM_Encoder_Init+0x1de>
 80079b0:	f640 31ef 	movw	r1, #3055	@ 0xbef
 80079b4:	4814      	ldr	r0, [pc, #80]	@ (8007a08 <HAL_TIM_Encoder_Init+0x22c>)
 80079b6:	f7fa fb85 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c2:	d004      	beq.n	80079ce <HAL_TIM_Encoder_Init+0x1f2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007a00 <HAL_TIM_Encoder_Init+0x224>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d107      	bne.n	80079de <HAL_TIM_Encoder_Init+0x202>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bf14      	ite	ne
 80079d6:	2301      	movne	r3, #1
 80079d8:	2300      	moveq	r3, #0
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	e01a      	b.n	8007a14 <HAL_TIM_Encoder_Init+0x238>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d012      	beq.n	8007a0c <HAL_TIM_Encoder_Init+0x230>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ee:	d20d      	bcs.n	8007a0c <HAL_TIM_Encoder_Init+0x230>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e00c      	b.n	8007a0e <HAL_TIM_Encoder_Init+0x232>
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40000400 	.word	0x40000400
 80079fc:	40000800 	.word	0x40000800
 8007a00:	40000c00 	.word	0x40000c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	0800bf90 	.word	0x0800bf90
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <HAL_TIM_Encoder_Init+0x246>
 8007a18:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8007a1c:	484f      	ldr	r0, [pc, #316]	@ (8007b5c <HAL_TIM_Encoder_Init+0x380>)
 8007a1e:	f7fa fb51 	bl	80020c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa ff78 	bl	800292c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f000 ffd2 	bl	8008a0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a90:	f023 0303 	bic.w	r3, r3, #3
 8007a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007aae:	f023 030c 	bic.w	r3, r3, #12
 8007ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	4313      	orrs	r3, r2
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	011a      	lsls	r2, r3, #4
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	031b      	lsls	r3, r3, #12
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007aec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007af4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4313      	orrs	r3, r2
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0800bf90 	.word	0x0800bf90

08007b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d020      	beq.n	8007bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01b      	beq.n	8007bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0202 	mvn.w	r2, #2
 8007b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 ff10 	bl	80089d0 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 ff02 	bl	80089bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 ff13 	bl	80089e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d020      	beq.n	8007c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01b      	beq.n	8007c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0204 	mvn.w	r2, #4
 8007be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2202      	movs	r2, #2
 8007be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 feea 	bl	80089d0 <HAL_TIM_IC_CaptureCallback>
 8007bfc:	e005      	b.n	8007c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fedc 	bl	80089bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 feed 	bl	80089e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d020      	beq.n	8007c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01b      	beq.n	8007c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0208 	mvn.w	r2, #8
 8007c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2204      	movs	r2, #4
 8007c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fec4 	bl	80089d0 <HAL_TIM_IC_CaptureCallback>
 8007c48:	e005      	b.n	8007c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 feb6 	bl	80089bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fec7 	bl	80089e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d020      	beq.n	8007ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01b      	beq.n	8007ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0210 	mvn.w	r2, #16
 8007c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2208      	movs	r2, #8
 8007c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fe9e 	bl	80089d0 <HAL_TIM_IC_CaptureCallback>
 8007c94:	e005      	b.n	8007ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fe90 	bl	80089bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fea1 	bl	80089e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00c      	beq.n	8007ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0201 	mvn.w	r2, #1
 8007cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fe6e 	bl	80089a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00c      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fe39 	bl	800996c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00c      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fe31 	bl	8009980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00c      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fe5b 	bl	80089f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00c      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f06f 0220 	mvn.w	r2, #32
 8007d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fdf9 	bl	8009958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d016      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d013      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d010      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b0c      	cmp	r3, #12
 8007d96:	d00d      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d00a      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b14      	cmp	r3, #20
 8007da2:	d007      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b3c      	cmp	r3, #60	@ 0x3c
 8007da8:	d004      	beq.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007daa:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8007dae:	488b      	ldr	r0, [pc, #556]	@ (8007fdc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007db0:	f7fa f988 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b60      	cmp	r3, #96	@ 0x60
 8007dba:	d01c      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b70      	cmp	r3, #112	@ 0x70
 8007dc2:	d018      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a85      	ldr	r2, [pc, #532]	@ (8007fe0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a84      	ldr	r2, [pc, #528]	@ (8007fe4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a82      	ldr	r2, [pc, #520]	@ (8007fe8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d009      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a81      	ldr	r2, [pc, #516]	@ (8007fec <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dec:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8007df0:	487a      	ldr	r0, [pc, #488]	@ (8007fdc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007df2:	f7fa f967 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d004      	beq.n	8007e10 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007e06:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8007e0a:	4874      	ldr	r0, [pc, #464]	@ (8007fdc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007e0c:	f7fa f95a 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007e20:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8007e24:	486d      	ldr	r0, [pc, #436]	@ (8007fdc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007e26:	f7fa f94d 	bl	80020c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e1d9      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x47c>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b14      	cmp	r3, #20
 8007e44:	f200 81ca 	bhi.w	80081dc <HAL_TIM_PWM_ConfigChannel+0x46c>
 8007e48:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	080081dd 	.word	0x080081dd
 8007e58:	080081dd 	.word	0x080081dd
 8007e5c:	080081dd 	.word	0x080081dd
 8007e60:	08007f49 	.word	0x08007f49
 8007e64:	080081dd 	.word	0x080081dd
 8007e68:	080081dd 	.word	0x080081dd
 8007e6c:	080081dd 	.word	0x080081dd
 8007e70:	08008011 	.word	0x08008011
 8007e74:	080081dd 	.word	0x080081dd
 8007e78:	080081dd 	.word	0x080081dd
 8007e7c:	080081dd 	.word	0x080081dd
 8007e80:	08008097 	.word	0x08008097
 8007e84:	080081dd 	.word	0x080081dd
 8007e88:	080081dd 	.word	0x080081dd
 8007e8c:	080081dd 	.word	0x080081dd
 8007e90:	0800811f 	.word	0x0800811f
 8007e94:	080081dd 	.word	0x080081dd
 8007e98:	080081dd 	.word	0x080081dd
 8007e9c:	080081dd 	.word	0x080081dd
 8007ea0:	0800817d 	.word	0x0800817d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a51      	ldr	r2, [pc, #324]	@ (8007ff0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d02c      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb6:	d027      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8007ff4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d022      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a4c      	ldr	r2, [pc, #304]	@ (8007ff8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d01d      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8007ffc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d018      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a49      	ldr	r2, [pc, #292]	@ (8008000 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d013      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a47      	ldr	r2, [pc, #284]	@ (8008004 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a46      	ldr	r2, [pc, #280]	@ (8008008 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d009      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a44      	ldr	r2, [pc, #272]	@ (800800c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007efe:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8007f02:	4836      	ldr	r0, [pc, #216]	@ (8007fdc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007f04:	f7fa f8de 	bl	80020c4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fe22 	bl	8008b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0208 	orr.w	r2, r2, #8
 8007f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0204 	bic.w	r2, r2, #4
 8007f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6999      	ldr	r1, [r3, #24]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	619a      	str	r2, [r3, #24]
      break;
 8007f46:	e14c      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a28      	ldr	r2, [pc, #160]	@ (8007ff0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d022      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5a:	d01d      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a24      	ldr	r2, [pc, #144]	@ (8007ff4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d018      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a23      	ldr	r2, [pc, #140]	@ (8007ff8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a21      	ldr	r2, [pc, #132]	@ (8007ffc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00e      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a20      	ldr	r2, [pc, #128]	@ (8008000 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1e      	ldr	r2, [pc, #120]	@ (8008004 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f8e:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8007f92:	4812      	ldr	r0, [pc, #72]	@ (8007fdc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007f94:	f7fa f896 	bl	80020c4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fe94 	bl	8008ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6999      	ldr	r1, [r3, #24]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	021a      	lsls	r2, r3, #8
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	619a      	str	r2, [r3, #24]
      break;
 8007fd8:	e103      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x472>
 8007fda:	bf00      	nop
 8007fdc:	0800bf90 	.word	0x0800bf90
 8007fe0:	00010040 	.word	0x00010040
 8007fe4:	00010050 	.word	0x00010050
 8007fe8:	00010060 	.word	0x00010060
 8007fec:	00010070 	.word	0x00010070
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40013400 	.word	0x40013400
 8008004:	40014000 	.word	0x40014000
 8008008:	40014400 	.word	0x40014400
 800800c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a77      	ldr	r2, [pc, #476]	@ (80081f4 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d01d      	beq.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008022:	d018      	beq.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a73      	ldr	r2, [pc, #460]	@ (80081f8 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a72      	ldr	r2, [pc, #456]	@ (80081fc <HAL_TIM_PWM_ConfigChannel+0x48c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00e      	beq.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a70      	ldr	r2, [pc, #448]	@ (8008200 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d009      	beq.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a6f      	ldr	r2, [pc, #444]	@ (8008204 <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d004      	beq.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800804c:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8008050:	486d      	ldr	r0, [pc, #436]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008052:	f7fa f837 	bl	80020c4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fee7 	bl	8008e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69da      	ldr	r2, [r3, #28]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0208 	orr.w	r2, r2, #8
 8008070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0204 	bic.w	r2, r2, #4
 8008080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69d9      	ldr	r1, [r3, #28]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	61da      	str	r2, [r3, #28]
      break;
 8008094:	e0a5      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a56      	ldr	r2, [pc, #344]	@ (80081f4 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d01d      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a8:	d018      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a52      	ldr	r2, [pc, #328]	@ (80081f8 <HAL_TIM_PWM_ConfigChannel+0x488>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d013      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a50      	ldr	r2, [pc, #320]	@ (80081fc <HAL_TIM_PWM_ConfigChannel+0x48c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a4f      	ldr	r2, [pc, #316]	@ (8008200 <HAL_TIM_PWM_ConfigChannel+0x490>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a4d      	ldr	r2, [pc, #308]	@ (8008204 <HAL_TIM_PWM_ConfigChannel+0x494>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80080d2:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 80080d6:	484c      	ldr	r0, [pc, #304]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x498>)
 80080d8:	f7f9 fff4 	bl	80020c4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 ff56 	bl	8008f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69da      	ldr	r2, [r3, #28]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69da      	ldr	r2, [r3, #28]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008106:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	69d9      	ldr	r1, [r3, #28]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	021a      	lsls	r2, r3, #8
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	61da      	str	r2, [r3, #28]
      break;
 800811c:	e061      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a34      	ldr	r2, [pc, #208]	@ (80081f4 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d009      	beq.n	800813c <HAL_TIM_PWM_ConfigChannel+0x3cc>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a35      	ldr	r2, [pc, #212]	@ (8008204 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d004      	beq.n	800813c <HAL_TIM_PWM_ConfigChannel+0x3cc>
 8008132:	f241 1104 	movw	r1, #4356	@ 0x1104
 8008136:	4834      	ldr	r0, [pc, #208]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008138:	f7f9 ffc4 	bl	80020c4 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ff9e 	bl	8009084 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0208 	orr.w	r2, r2, #8
 8008156:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0204 	bic.w	r2, r2, #4
 8008166:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	691a      	ldr	r2, [r3, #16]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800817a:	e032      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1c      	ldr	r2, [pc, #112]	@ (80081f4 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d009      	beq.n	800819a <HAL_TIM_PWM_ConfigChannel+0x42a>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1e      	ldr	r2, [pc, #120]	@ (8008204 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_TIM_PWM_ConfigChannel+0x42a>
 8008190:	f241 1115 	movw	r1, #4373	@ 0x1115
 8008194:	481c      	ldr	r0, [pc, #112]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008196:	f7f9 ff95 	bl	80020c4 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 ffd3 	bl	800914c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081c4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	021a      	lsls	r2, r3, #8
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80081da:	e002      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
      break;
 80081e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40012c00 	.word	0x40012c00
 80081f8:	40000400 	.word	0x40000400
 80081fc:	40000800 	.word	0x40000800
 8008200:	40000c00 	.word	0x40000c00
 8008204:	40013400 	.word	0x40013400
 8008208:	0800bf90 	.word	0x0800bf90

0800820c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a33      	ldr	r2, [pc, #204]	@ (80082e8 <HAL_TIM_GenerateEvent+0xdc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d036      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008228:	d031      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a2f      	ldr	r2, [pc, #188]	@ (80082ec <HAL_TIM_GenerateEvent+0xe0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d02c      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a2d      	ldr	r2, [pc, #180]	@ (80082f0 <HAL_TIM_GenerateEvent+0xe4>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d027      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a2c      	ldr	r2, [pc, #176]	@ (80082f4 <HAL_TIM_GenerateEvent+0xe8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d022      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2a      	ldr	r2, [pc, #168]	@ (80082f8 <HAL_TIM_GenerateEvent+0xec>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d01d      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a29      	ldr	r2, [pc, #164]	@ (80082fc <HAL_TIM_GenerateEvent+0xf0>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d018      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a27      	ldr	r2, [pc, #156]	@ (8008300 <HAL_TIM_GenerateEvent+0xf4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a26      	ldr	r2, [pc, #152]	@ (8008304 <HAL_TIM_GenerateEvent+0xf8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00e      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a24      	ldr	r2, [pc, #144]	@ (8008308 <HAL_TIM_GenerateEvent+0xfc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d009      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a23      	ldr	r2, [pc, #140]	@ (800830c <HAL_TIM_GenerateEvent+0x100>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d004      	beq.n	800828e <HAL_TIM_GenerateEvent+0x82>
 8008284:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8008288:	4821      	ldr	r0, [pc, #132]	@ (8008310 <HAL_TIM_GenerateEvent+0x104>)
 800828a:	f7f9 ff1b 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008294:	d202      	bcs.n	800829c <HAL_TIM_GenerateEvent+0x90>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_GenerateEvent+0x9a>
 800829c:	f241 4181 	movw	r1, #5249	@ 0x1481
 80082a0:	481b      	ldr	r0, [pc, #108]	@ (8008310 <HAL_TIM_GenerateEvent+0x104>)
 80082a2:	f7f9 ff0f 	bl	80020c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_TIM_GenerateEvent+0xa8>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e014      	b.n	80082de <HAL_TIM_GenerateEvent+0xd2>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800
 80082f4:	40000c00 	.word	0x40000c00
 80082f8:	40001000 	.word	0x40001000
 80082fc:	40001400 	.word	0x40001400
 8008300:	40013400 	.word	0x40013400
 8008304:	40014000 	.word	0x40014000
 8008308:	40014400 	.word	0x40014400
 800830c:	40014800 	.word	0x40014800
 8008310:	0800bf90 	.word	0x0800bf90

08008314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_TIM_ConfigClockSource+0x1c>
 800832c:	2302      	movs	r3, #2
 800832e:	e329      	b.n	8008984 <HAL_TIM_ConfigClockSource+0x670>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008348:	d029      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b70      	cmp	r3, #112	@ 0x70
 8008350:	d025      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800835a:	d020      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b40      	cmp	r3, #64	@ 0x40
 8008362:	d01c      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b50      	cmp	r3, #80	@ 0x50
 800836a:	d018      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b60      	cmp	r3, #96	@ 0x60
 8008372:	d014      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d010      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b10      	cmp	r3, #16
 8008382:	d00c      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b20      	cmp	r3, #32
 800838a:	d008      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b30      	cmp	r3, #48	@ 0x30
 8008392:	d004      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x8a>
 8008394:	f241 5156 	movw	r1, #5462	@ 0x1556
 8008398:	4888      	ldr	r0, [pc, #544]	@ (80085bc <HAL_TIM_ConfigClockSource+0x2a8>)
 800839a:	f7f9 fe93 	bl	80020c4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ca:	f000 810d 	beq.w	80085e8 <HAL_TIM_ConfigClockSource+0x2d4>
 80083ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083d2:	f200 82ca 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083da:	d02d      	beq.n	8008438 <HAL_TIM_ConfigClockSource+0x124>
 80083dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083e0:	f200 82c3 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 80083e4:	2b70      	cmp	r3, #112	@ 0x70
 80083e6:	d06f      	beq.n	80084c8 <HAL_TIM_ConfigClockSource+0x1b4>
 80083e8:	2b70      	cmp	r3, #112	@ 0x70
 80083ea:	f200 82be 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 80083ee:	2b60      	cmp	r3, #96	@ 0x60
 80083f0:	f000 81d4 	beq.w	800879c <HAL_TIM_ConfigClockSource+0x488>
 80083f4:	2b60      	cmp	r3, #96	@ 0x60
 80083f6:	f200 82b8 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 80083fa:	2b50      	cmp	r3, #80	@ 0x50
 80083fc:	f000 8165 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x3b6>
 8008400:	2b50      	cmp	r3, #80	@ 0x50
 8008402:	f200 82b2 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 8008406:	2b40      	cmp	r3, #64	@ 0x40
 8008408:	f000 8223 	beq.w	8008852 <HAL_TIM_ConfigClockSource+0x53e>
 800840c:	2b40      	cmp	r3, #64	@ 0x40
 800840e:	f200 82ac 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 8008412:	2b30      	cmp	r3, #48	@ 0x30
 8008414:	f000 8278 	beq.w	8008908 <HAL_TIM_ConfigClockSource+0x5f4>
 8008418:	2b30      	cmp	r3, #48	@ 0x30
 800841a:	f200 82a6 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 800841e:	2b20      	cmp	r3, #32
 8008420:	f000 8272 	beq.w	8008908 <HAL_TIM_ConfigClockSource+0x5f4>
 8008424:	2b20      	cmp	r3, #32
 8008426:	f200 82a0 	bhi.w	800896a <HAL_TIM_ConfigClockSource+0x656>
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 826c 	beq.w	8008908 <HAL_TIM_ConfigClockSource+0x5f4>
 8008430:	2b10      	cmp	r3, #16
 8008432:	f000 8269 	beq.w	8008908 <HAL_TIM_ConfigClockSource+0x5f4>
 8008436:	e298      	b.n	800896a <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a60      	ldr	r2, [pc, #384]	@ (80085c0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800843e:	4293      	cmp	r3, r2
 8008440:	f000 8296 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800844c:	f000 8290 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a5b      	ldr	r2, [pc, #364]	@ (80085c4 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	f000 828a 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a59      	ldr	r2, [pc, #356]	@ (80085c8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	f000 8284 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a57      	ldr	r2, [pc, #348]	@ (80085cc <HAL_TIM_ConfigClockSource+0x2b8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	f000 827e 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a55      	ldr	r2, [pc, #340]	@ (80085d0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	f000 8278 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a53      	ldr	r2, [pc, #332]	@ (80085d4 <HAL_TIM_ConfigClockSource+0x2c0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	f000 8272 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a51      	ldr	r2, [pc, #324]	@ (80085d8 <HAL_TIM_ConfigClockSource+0x2c4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	f000 826c 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a4f      	ldr	r2, [pc, #316]	@ (80085dc <HAL_TIM_ConfigClockSource+0x2c8>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	f000 8266 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a4d      	ldr	r2, [pc, #308]	@ (80085e0 <HAL_TIM_ConfigClockSource+0x2cc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	f000 8260 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a4b      	ldr	r2, [pc, #300]	@ (80085e4 <HAL_TIM_ConfigClockSource+0x2d0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	f000 825a 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x65c>
 80084bc:	f241 5162 	movw	r1, #5474	@ 0x1562
 80084c0:	483e      	ldr	r0, [pc, #248]	@ (80085bc <HAL_TIM_ConfigClockSource+0x2a8>)
 80084c2:	f7f9 fdff 	bl	80020c4 <assert_failed>
      break;
 80084c6:	e253      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a3c      	ldr	r2, [pc, #240]	@ (80085c0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d022      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084da:	d01d      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a38      	ldr	r2, [pc, #224]	@ (80085c4 <HAL_TIM_ConfigClockSource+0x2b0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d018      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a37      	ldr	r2, [pc, #220]	@ (80085c8 <HAL_TIM_ConfigClockSource+0x2b4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d013      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a35      	ldr	r2, [pc, #212]	@ (80085cc <HAL_TIM_ConfigClockSource+0x2b8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00e      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a36      	ldr	r2, [pc, #216]	@ (80085d8 <HAL_TIM_ConfigClockSource+0x2c4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d009      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a34      	ldr	r2, [pc, #208]	@ (80085dc <HAL_TIM_ConfigClockSource+0x2c8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d004      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0x204>
 800850e:	f241 5169 	movw	r1, #5481	@ 0x1569
 8008512:	482a      	ldr	r0, [pc, #168]	@ (80085bc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008514:	f7f9 fdd6 	bl	80020c4 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d013      	beq.n	8008548 <HAL_TIM_ConfigClockSource+0x234>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008528:	d00e      	beq.n	8008548 <HAL_TIM_ConfigClockSource+0x234>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008532:	d009      	beq.n	8008548 <HAL_TIM_ConfigClockSource+0x234>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800853c:	d004      	beq.n	8008548 <HAL_TIM_ConfigClockSource+0x234>
 800853e:	f241 516c 	movw	r1, #5484	@ 0x156c
 8008542:	481e      	ldr	r0, [pc, #120]	@ (80085bc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008544:	f7f9 fdbe 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008550:	d014      	beq.n	800857c <HAL_TIM_ConfigClockSource+0x268>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d010      	beq.n	800857c <HAL_TIM_ConfigClockSource+0x268>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_TIM_ConfigClockSource+0x268>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d008      	beq.n	800857c <HAL_TIM_ConfigClockSource+0x268>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b0a      	cmp	r3, #10
 8008570:	d004      	beq.n	800857c <HAL_TIM_ConfigClockSource+0x268>
 8008572:	f241 516d 	movw	r1, #5485	@ 0x156d
 8008576:	4811      	ldr	r0, [pc, #68]	@ (80085bc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008578:	f7f9 fda4 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b0f      	cmp	r3, #15
 8008582:	d904      	bls.n	800858e <HAL_TIM_ConfigClockSource+0x27a>
 8008584:	f241 516e 	movw	r1, #5486	@ 0x156e
 8008588:	480c      	ldr	r0, [pc, #48]	@ (80085bc <HAL_TIM_ConfigClockSource+0x2a8>)
 800858a:	f7f9 fd9b 	bl	80020c4 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800859e:	f000 feb5 	bl	800930c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	609a      	str	r2, [r3, #8]
      break;
 80085ba:	e1da      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
 80085bc:	0800bf90 	.word	0x0800bf90
 80085c0:	40012c00 	.word	0x40012c00
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000800 	.word	0x40000800
 80085cc:	40000c00 	.word	0x40000c00
 80085d0:	40001000 	.word	0x40001000
 80085d4:	40001400 	.word	0x40001400
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a64      	ldr	r2, [pc, #400]	@ (8008780 <HAL_TIM_ConfigClockSource+0x46c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d01d      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x31a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085fa:	d018      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x31a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a60      	ldr	r2, [pc, #384]	@ (8008784 <HAL_TIM_ConfigClockSource+0x470>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d013      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x31a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a5f      	ldr	r2, [pc, #380]	@ (8008788 <HAL_TIM_ConfigClockSource+0x474>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00e      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x31a>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a5d      	ldr	r2, [pc, #372]	@ (800878c <HAL_TIM_ConfigClockSource+0x478>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d009      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x31a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a5c      	ldr	r2, [pc, #368]	@ (8008790 <HAL_TIM_ConfigClockSource+0x47c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x31a>
 8008624:	f241 5181 	movw	r1, #5505	@ 0x1581
 8008628:	485a      	ldr	r0, [pc, #360]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 800862a:	f7f9 fd4b 	bl	80020c4 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d013      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x34a>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863e:	d00e      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x34a>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008648:	d009      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x34a>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008652:	d004      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x34a>
 8008654:	f241 5184 	movw	r1, #5508	@ 0x1584
 8008658:	484e      	ldr	r0, [pc, #312]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 800865a:	f7f9 fd33 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008666:	d014      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x37e>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d010      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x37e>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00c      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x37e>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d008      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x37e>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b0a      	cmp	r3, #10
 8008686:	d004      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x37e>
 8008688:	f241 5185 	movw	r1, #5509	@ 0x1585
 800868c:	4841      	ldr	r0, [pc, #260]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 800868e:	f7f9 fd19 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b0f      	cmp	r3, #15
 8008698:	d904      	bls.n	80086a4 <HAL_TIM_ConfigClockSource+0x390>
 800869a:	f241 5186 	movw	r1, #5510	@ 0x1586
 800869e:	483d      	ldr	r0, [pc, #244]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 80086a0:	f7f9 fd10 	bl	80020c4 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086b4:	f000 fe2a 	bl	800930c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086c6:	609a      	str	r2, [r3, #8]
      break;
 80086c8:	e153      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008780 <HAL_TIM_ConfigClockSource+0x46c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d022      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086dc:	d01d      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a28      	ldr	r2, [pc, #160]	@ (8008784 <HAL_TIM_ConfigClockSource+0x470>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d018      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a26      	ldr	r2, [pc, #152]	@ (8008788 <HAL_TIM_ConfigClockSource+0x474>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a25      	ldr	r2, [pc, #148]	@ (800878c <HAL_TIM_ConfigClockSource+0x478>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00e      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a23      	ldr	r2, [pc, #140]	@ (8008790 <HAL_TIM_ConfigClockSource+0x47c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d009      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a23      	ldr	r2, [pc, #140]	@ (8008798 <HAL_TIM_ConfigClockSource+0x484>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d004      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x406>
 8008710:	f241 5195 	movw	r1, #5525	@ 0x1595
 8008714:	481f      	ldr	r0, [pc, #124]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 8008716:	f7f9 fcd5 	bl	80020c4 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008722:	d014      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x43a>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x43a>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00c      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x43a>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d008      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x43a>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b0a      	cmp	r3, #10
 8008742:	d004      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x43a>
 8008744:	f241 5198 	movw	r1, #5528	@ 0x1598
 8008748:	4812      	ldr	r0, [pc, #72]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 800874a:	f7f9 fcbb 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b0f      	cmp	r3, #15
 8008754:	d904      	bls.n	8008760 <HAL_TIM_ConfigClockSource+0x44c>
 8008756:	f241 5199 	movw	r1, #5529	@ 0x1599
 800875a:	480e      	ldr	r0, [pc, #56]	@ (8008794 <HAL_TIM_ConfigClockSource+0x480>)
 800875c:	f7f9 fcb2 	bl	80020c4 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800876c:	461a      	mov	r2, r3
 800876e:	f000 fd53 	bl	8009218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2150      	movs	r1, #80	@ 0x50
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fdac 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 800877e:	e0f8      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
 8008780:	40012c00 	.word	0x40012c00
 8008784:	40000400 	.word	0x40000400
 8008788:	40000800 	.word	0x40000800
 800878c:	40000c00 	.word	0x40000c00
 8008790:	40013400 	.word	0x40013400
 8008794:	0800bf90 	.word	0x0800bf90
 8008798:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a7a      	ldr	r2, [pc, #488]	@ (800898c <HAL_TIM_ConfigClockSource+0x678>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d022      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ae:	d01d      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a76      	ldr	r2, [pc, #472]	@ (8008990 <HAL_TIM_ConfigClockSource+0x67c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d018      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a75      	ldr	r2, [pc, #468]	@ (8008994 <HAL_TIM_ConfigClockSource+0x680>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d013      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a73      	ldr	r2, [pc, #460]	@ (8008998 <HAL_TIM_ConfigClockSource+0x684>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d00e      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a72      	ldr	r2, [pc, #456]	@ (800899c <HAL_TIM_ConfigClockSource+0x688>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d009      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a70      	ldr	r2, [pc, #448]	@ (80089a0 <HAL_TIM_ConfigClockSource+0x68c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d004      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0x4d8>
 80087e2:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80087e6:	486f      	ldr	r0, [pc, #444]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 80087e8:	f7f9 fc6c 	bl	80020c4 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f4:	d014      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x50c>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d010      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x50c>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x50c>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d008      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x50c>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b0a      	cmp	r3, #10
 8008814:	d004      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x50c>
 8008816:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800881a:	4862      	ldr	r0, [pc, #392]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 800881c:	f7f9 fc52 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b0f      	cmp	r3, #15
 8008826:	d904      	bls.n	8008832 <HAL_TIM_ConfigClockSource+0x51e>
 8008828:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800882c:	485d      	ldr	r0, [pc, #372]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 800882e:	f7f9 fc49 	bl	80020c4 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800883e:	461a      	mov	r2, r3
 8008840:	f000 fd19 	bl	8009276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2160      	movs	r1, #96	@ 0x60
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fd43 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008850:	e08f      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a4d      	ldr	r2, [pc, #308]	@ (800898c <HAL_TIM_ConfigClockSource+0x678>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d022      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008864:	d01d      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a49      	ldr	r2, [pc, #292]	@ (8008990 <HAL_TIM_ConfigClockSource+0x67c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d018      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a47      	ldr	r2, [pc, #284]	@ (8008994 <HAL_TIM_ConfigClockSource+0x680>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a46      	ldr	r2, [pc, #280]	@ (8008998 <HAL_TIM_ConfigClockSource+0x684>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00e      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a44      	ldr	r2, [pc, #272]	@ (800899c <HAL_TIM_ConfigClockSource+0x688>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d009      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a43      	ldr	r2, [pc, #268]	@ (80089a0 <HAL_TIM_ConfigClockSource+0x68c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d004      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x58e>
 8008898:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800889c:	4841      	ldr	r0, [pc, #260]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 800889e:	f7f9 fc11 	bl	80020c4 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088aa:	d014      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x5c2>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d010      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x5c2>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00c      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x5c2>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d008      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x5c2>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b0a      	cmp	r3, #10
 80088ca:	d004      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x5c2>
 80088cc:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 80088d0:	4834      	ldr	r0, [pc, #208]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 80088d2:	f7f9 fbf7 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b0f      	cmp	r3, #15
 80088dc:	d904      	bls.n	80088e8 <HAL_TIM_ConfigClockSource+0x5d4>
 80088de:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 80088e2:	4830      	ldr	r0, [pc, #192]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 80088e4:	f7f9 fbee 	bl	80020c4 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f4:	461a      	mov	r2, r3
 80088f6:	f000 fc8f 	bl	8009218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2140      	movs	r1, #64	@ 0x40
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fce8 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008906:	e034      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a1f      	ldr	r2, [pc, #124]	@ (800898c <HAL_TIM_ConfigClockSource+0x678>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d022      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891a:	d01d      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1b      	ldr	r2, [pc, #108]	@ (8008990 <HAL_TIM_ConfigClockSource+0x67c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d018      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1a      	ldr	r2, [pc, #104]	@ (8008994 <HAL_TIM_ConfigClockSource+0x680>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d013      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a18      	ldr	r2, [pc, #96]	@ (8008998 <HAL_TIM_ConfigClockSource+0x684>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00e      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a17      	ldr	r2, [pc, #92]	@ (800899c <HAL_TIM_ConfigClockSource+0x688>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d009      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a15      	ldr	r2, [pc, #84]	@ (80089a0 <HAL_TIM_ConfigClockSource+0x68c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d004      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x644>
 800894e:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8008952:	4814      	ldr	r0, [pc, #80]	@ (80089a4 <HAL_TIM_ConfigClockSource+0x690>)
 8008954:	f7f9 fbb6 	bl	80020c4 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	4610      	mov	r0, r2
 8008964:	f000 fcb7 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008968:	e003      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
      break;
 800896e:	e000      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x65e>
      break;
 8008970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40012c00 	.word	0x40012c00
 8008990:	40000400 	.word	0x40000400
 8008994:	40000800 	.word	0x40000800
 8008998:	40000c00 	.word	0x40000c00
 800899c:	40013400 	.word	0x40013400
 80089a0:	40014000 	.word	0x40014000
 80089a4:	0800bf90 	.word	0x0800bf90

080089a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a46      	ldr	r2, [pc, #280]	@ (8008b38 <TIM_Base_SetConfig+0x12c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d013      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2a:	d00f      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a43      	ldr	r2, [pc, #268]	@ (8008b3c <TIM_Base_SetConfig+0x130>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d00b      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a42      	ldr	r2, [pc, #264]	@ (8008b40 <TIM_Base_SetConfig+0x134>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d007      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a41      	ldr	r2, [pc, #260]	@ (8008b44 <TIM_Base_SetConfig+0x138>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a40      	ldr	r2, [pc, #256]	@ (8008b48 <TIM_Base_SetConfig+0x13c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d108      	bne.n	8008a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a35      	ldr	r2, [pc, #212]	@ (8008b38 <TIM_Base_SetConfig+0x12c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d01f      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6c:	d01b      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a32      	ldr	r2, [pc, #200]	@ (8008b3c <TIM_Base_SetConfig+0x130>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d017      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a31      	ldr	r2, [pc, #196]	@ (8008b40 <TIM_Base_SetConfig+0x134>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d013      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a30      	ldr	r2, [pc, #192]	@ (8008b44 <TIM_Base_SetConfig+0x138>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00f      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a2f      	ldr	r2, [pc, #188]	@ (8008b48 <TIM_Base_SetConfig+0x13c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00b      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a2e      	ldr	r2, [pc, #184]	@ (8008b4c <TIM_Base_SetConfig+0x140>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d007      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a2d      	ldr	r2, [pc, #180]	@ (8008b50 <TIM_Base_SetConfig+0x144>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d003      	beq.n	8008aa6 <TIM_Base_SetConfig+0x9a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8008b54 <TIM_Base_SetConfig+0x148>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d108      	bne.n	8008ab8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a16      	ldr	r2, [pc, #88]	@ (8008b38 <TIM_Base_SetConfig+0x12c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00f      	beq.n	8008b04 <TIM_Base_SetConfig+0xf8>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a18      	ldr	r2, [pc, #96]	@ (8008b48 <TIM_Base_SetConfig+0x13c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00b      	beq.n	8008b04 <TIM_Base_SetConfig+0xf8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a17      	ldr	r2, [pc, #92]	@ (8008b4c <TIM_Base_SetConfig+0x140>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d007      	beq.n	8008b04 <TIM_Base_SetConfig+0xf8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a16      	ldr	r2, [pc, #88]	@ (8008b50 <TIM_Base_SetConfig+0x144>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d003      	beq.n	8008b04 <TIM_Base_SetConfig+0xf8>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a15      	ldr	r2, [pc, #84]	@ (8008b54 <TIM_Base_SetConfig+0x148>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d103      	bne.n	8008b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691a      	ldr	r2, [r3, #16]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d105      	bne.n	8008b2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f023 0201 	bic.w	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	611a      	str	r2, [r3, #16]
  }
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40000400 	.word	0x40000400
 8008b40:	40000800 	.word	0x40000800
 8008b44:	40000c00 	.word	0x40000c00
 8008b48:	40013400 	.word	0x40013400
 8008b4c:	40014000 	.word	0x40014000
 8008b50:	40014400 	.word	0x40014400
 8008b54:	40014800 	.word	0x40014800

08008b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	f023 0201 	bic.w	r2, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0303 	bic.w	r3, r3, #3
 8008b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 0302 	bic.w	r3, r3, #2
 8008ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a40      	ldr	r2, [pc, #256]	@ (8008cb4 <TIM_OC1_SetConfig+0x15c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00f      	beq.n	8008bd8 <TIM_OC1_SetConfig+0x80>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a3f      	ldr	r2, [pc, #252]	@ (8008cb8 <TIM_OC1_SetConfig+0x160>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00b      	beq.n	8008bd8 <TIM_OC1_SetConfig+0x80>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8008cbc <TIM_OC1_SetConfig+0x164>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d007      	beq.n	8008bd8 <TIM_OC1_SetConfig+0x80>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a3d      	ldr	r2, [pc, #244]	@ (8008cc0 <TIM_OC1_SetConfig+0x168>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <TIM_OC1_SetConfig+0x80>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8008cc4 <TIM_OC1_SetConfig+0x16c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d119      	bne.n	8008c0c <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <TIM_OC1_SetConfig+0x9a>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d004      	beq.n	8008bf2 <TIM_OC1_SetConfig+0x9a>
 8008be8:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 8008bec:	4836      	ldr	r0, [pc, #216]	@ (8008cc8 <TIM_OC1_SetConfig+0x170>)
 8008bee:	f7f9 fa69 	bl	80020c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f023 0308 	bic.w	r3, r3, #8
 8008bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f023 0304 	bic.w	r3, r3, #4
 8008c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a29      	ldr	r2, [pc, #164]	@ (8008cb4 <TIM_OC1_SetConfig+0x15c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00f      	beq.n	8008c34 <TIM_OC1_SetConfig+0xdc>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a28      	ldr	r2, [pc, #160]	@ (8008cb8 <TIM_OC1_SetConfig+0x160>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00b      	beq.n	8008c34 <TIM_OC1_SetConfig+0xdc>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a27      	ldr	r2, [pc, #156]	@ (8008cbc <TIM_OC1_SetConfig+0x164>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d007      	beq.n	8008c34 <TIM_OC1_SetConfig+0xdc>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a26      	ldr	r2, [pc, #152]	@ (8008cc0 <TIM_OC1_SetConfig+0x168>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d003      	beq.n	8008c34 <TIM_OC1_SetConfig+0xdc>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a25      	ldr	r2, [pc, #148]	@ (8008cc4 <TIM_OC1_SetConfig+0x16c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d12d      	bne.n	8008c90 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c3c:	d008      	beq.n	8008c50 <TIM_OC1_SetConfig+0xf8>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <TIM_OC1_SetConfig+0xf8>
 8008c46:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 8008c4a:	481f      	ldr	r0, [pc, #124]	@ (8008cc8 <TIM_OC1_SetConfig+0x170>)
 8008c4c:	f7f9 fa3a 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c58:	d008      	beq.n	8008c6c <TIM_OC1_SetConfig+0x114>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <TIM_OC1_SetConfig+0x114>
 8008c62:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 8008c66:	4818      	ldr	r0, [pc, #96]	@ (8008cc8 <TIM_OC1_SetConfig+0x170>)
 8008c68:	f7f9 fa2c 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40013400 	.word	0x40013400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400
 8008cc4:	40014800 	.word	0x40014800
 8008cc8:	0800bf90 	.word	0x0800bf90

08008ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	f023 0210 	bic.w	r2, r3, #16
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 0320 	bic.w	r3, r3, #32
 8008d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a3b      	ldr	r2, [pc, #236]	@ (8008e18 <TIM_OC2_SetConfig+0x14c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_OC2_SetConfig+0x6c>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a3a      	ldr	r2, [pc, #232]	@ (8008e1c <TIM_OC2_SetConfig+0x150>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d11a      	bne.n	8008d6e <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d008      	beq.n	8008d52 <TIM_OC2_SetConfig+0x86>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d004      	beq.n	8008d52 <TIM_OC2_SetConfig+0x86>
 8008d48:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 8008d4c:	4834      	ldr	r0, [pc, #208]	@ (8008e20 <TIM_OC2_SetConfig+0x154>)
 8008d4e:	f7f9 f9b9 	bl	80020c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a29      	ldr	r2, [pc, #164]	@ (8008e18 <TIM_OC2_SetConfig+0x14c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00f      	beq.n	8008d96 <TIM_OC2_SetConfig+0xca>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a28      	ldr	r2, [pc, #160]	@ (8008e1c <TIM_OC2_SetConfig+0x150>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00b      	beq.n	8008d96 <TIM_OC2_SetConfig+0xca>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a28      	ldr	r2, [pc, #160]	@ (8008e24 <TIM_OC2_SetConfig+0x158>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d007      	beq.n	8008d96 <TIM_OC2_SetConfig+0xca>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a27      	ldr	r2, [pc, #156]	@ (8008e28 <TIM_OC2_SetConfig+0x15c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d003      	beq.n	8008d96 <TIM_OC2_SetConfig+0xca>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a26      	ldr	r2, [pc, #152]	@ (8008e2c <TIM_OC2_SetConfig+0x160>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d12f      	bne.n	8008df6 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d9e:	d008      	beq.n	8008db2 <TIM_OC2_SetConfig+0xe6>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <TIM_OC2_SetConfig+0xe6>
 8008da8:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 8008dac:	481c      	ldr	r0, [pc, #112]	@ (8008e20 <TIM_OC2_SetConfig+0x154>)
 8008dae:	f7f9 f989 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dba:	d008      	beq.n	8008dce <TIM_OC2_SetConfig+0x102>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <TIM_OC2_SetConfig+0x102>
 8008dc4:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 8008dc8:	4815      	ldr	r0, [pc, #84]	@ (8008e20 <TIM_OC2_SetConfig+0x154>)
 8008dca:	f7f9 f97b 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	621a      	str	r2, [r3, #32]
}
 8008e10:	bf00      	nop
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40013400 	.word	0x40013400
 8008e20:	0800bf90 	.word	0x0800bf90
 8008e24:	40014000 	.word	0x40014000
 8008e28:	40014400 	.word	0x40014400
 8008e2c:	40014800 	.word	0x40014800

08008e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0303 	bic.w	r3, r3, #3
 8008e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a3b      	ldr	r2, [pc, #236]	@ (8008f7c <TIM_OC3_SetConfig+0x14c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC3_SetConfig+0x6a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a3a      	ldr	r2, [pc, #232]	@ (8008f80 <TIM_OC3_SetConfig+0x150>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d11a      	bne.n	8008ed0 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <TIM_OC3_SetConfig+0x84>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d004      	beq.n	8008eb4 <TIM_OC3_SetConfig+0x84>
 8008eaa:	f641 4105 	movw	r1, #7173	@ 0x1c05
 8008eae:	4835      	ldr	r0, [pc, #212]	@ (8008f84 <TIM_OC3_SetConfig+0x154>)
 8008eb0:	f7f9 f908 	bl	80020c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	021b      	lsls	r3, r3, #8
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f7c <TIM_OC3_SetConfig+0x14c>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00f      	beq.n	8008ef8 <TIM_OC3_SetConfig+0xc8>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a29      	ldr	r2, [pc, #164]	@ (8008f80 <TIM_OC3_SetConfig+0x150>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00b      	beq.n	8008ef8 <TIM_OC3_SetConfig+0xc8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a29      	ldr	r2, [pc, #164]	@ (8008f88 <TIM_OC3_SetConfig+0x158>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d007      	beq.n	8008ef8 <TIM_OC3_SetConfig+0xc8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a28      	ldr	r2, [pc, #160]	@ (8008f8c <TIM_OC3_SetConfig+0x15c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_OC3_SetConfig+0xc8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a27      	ldr	r2, [pc, #156]	@ (8008f90 <TIM_OC3_SetConfig+0x160>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d12f      	bne.n	8008f58 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f00:	d008      	beq.n	8008f14 <TIM_OC3_SetConfig+0xe4>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <TIM_OC3_SetConfig+0xe4>
 8008f0a:	f641 4112 	movw	r1, #7186	@ 0x1c12
 8008f0e:	481d      	ldr	r0, [pc, #116]	@ (8008f84 <TIM_OC3_SetConfig+0x154>)
 8008f10:	f7f9 f8d8 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1c:	d008      	beq.n	8008f30 <TIM_OC3_SetConfig+0x100>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d004      	beq.n	8008f30 <TIM_OC3_SetConfig+0x100>
 8008f26:	f641 4113 	movw	r1, #7187	@ 0x1c13
 8008f2a:	4816      	ldr	r0, [pc, #88]	@ (8008f84 <TIM_OC3_SetConfig+0x154>)
 8008f2c:	f7f9 f8ca 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	40013400 	.word	0x40013400
 8008f84:	0800bf90 	.word	0x0800bf90
 8008f88:	40014000 	.word	0x40014000
 8008f8c:	40014400 	.word	0x40014400
 8008f90:	40014800 	.word	0x40014800

08008f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	031b      	lsls	r3, r3, #12
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <TIM_OC4_SetConfig+0xd8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00f      	beq.n	8009018 <TIM_OC4_SetConfig+0x84>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8009070 <TIM_OC4_SetConfig+0xdc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00b      	beq.n	8009018 <TIM_OC4_SetConfig+0x84>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a1c      	ldr	r2, [pc, #112]	@ (8009074 <TIM_OC4_SetConfig+0xe0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <TIM_OC4_SetConfig+0x84>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a1b      	ldr	r2, [pc, #108]	@ (8009078 <TIM_OC4_SetConfig+0xe4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_OC4_SetConfig+0x84>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a1a      	ldr	r2, [pc, #104]	@ (800907c <TIM_OC4_SetConfig+0xe8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d117      	bne.n	8009048 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009020:	d008      	beq.n	8009034 <TIM_OC4_SetConfig+0xa0>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d004      	beq.n	8009034 <TIM_OC4_SetConfig+0xa0>
 800902a:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800902e:	4814      	ldr	r0, [pc, #80]	@ (8009080 <TIM_OC4_SetConfig+0xec>)
 8009030:	f7f9 f848 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800903a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	019b      	lsls	r3, r3, #6
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	621a      	str	r2, [r3, #32]
}
 8009062:	bf00      	nop
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	40012c00 	.word	0x40012c00
 8009070:	40013400 	.word	0x40013400
 8009074:	40014000 	.word	0x40014000
 8009078:	40014400 	.word	0x40014400
 800907c:	40014800 	.word	0x40014800
 8009080:	0800bf90 	.word	0x0800bf90

08009084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a17      	ldr	r2, [pc, #92]	@ (8009138 <TIM_OC5_SetConfig+0xb4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d00f      	beq.n	80090fe <TIM_OC5_SetConfig+0x7a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a16      	ldr	r2, [pc, #88]	@ (800913c <TIM_OC5_SetConfig+0xb8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00b      	beq.n	80090fe <TIM_OC5_SetConfig+0x7a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a15      	ldr	r2, [pc, #84]	@ (8009140 <TIM_OC5_SetConfig+0xbc>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d007      	beq.n	80090fe <TIM_OC5_SetConfig+0x7a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a14      	ldr	r2, [pc, #80]	@ (8009144 <TIM_OC5_SetConfig+0xc0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d003      	beq.n	80090fe <TIM_OC5_SetConfig+0x7a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a13      	ldr	r2, [pc, #76]	@ (8009148 <TIM_OC5_SetConfig+0xc4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d109      	bne.n	8009112 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009104:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	621a      	str	r2, [r3, #32]
}
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	40012c00 	.word	0x40012c00
 800913c:	40013400 	.word	0x40013400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800917a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800917e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	021b      	lsls	r3, r3, #8
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	051b      	lsls	r3, r3, #20
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	4313      	orrs	r3, r2
 800919e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a18      	ldr	r2, [pc, #96]	@ (8009204 <TIM_OC6_SetConfig+0xb8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d00f      	beq.n	80091c8 <TIM_OC6_SetConfig+0x7c>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a17      	ldr	r2, [pc, #92]	@ (8009208 <TIM_OC6_SetConfig+0xbc>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00b      	beq.n	80091c8 <TIM_OC6_SetConfig+0x7c>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a16      	ldr	r2, [pc, #88]	@ (800920c <TIM_OC6_SetConfig+0xc0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d007      	beq.n	80091c8 <TIM_OC6_SetConfig+0x7c>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a15      	ldr	r2, [pc, #84]	@ (8009210 <TIM_OC6_SetConfig+0xc4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d003      	beq.n	80091c8 <TIM_OC6_SetConfig+0x7c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a14      	ldr	r2, [pc, #80]	@ (8009214 <TIM_OC6_SetConfig+0xc8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d109      	bne.n	80091dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	029b      	lsls	r3, r3, #10
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40012c00 	.word	0x40012c00
 8009208:	40013400 	.word	0x40013400
 800920c:	40014000 	.word	0x40014000
 8009210:	40014400 	.word	0x40014400
 8009214:	40014800 	.word	0x40014800

08009218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f023 0201 	bic.w	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 030a 	bic.w	r3, r3, #10
 8009254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009276:	b480      	push	{r7}
 8009278:	b087      	sub	sp, #28
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	f023 0210 	bic.w	r2, r3, #16
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	031b      	lsls	r3, r3, #12
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	621a      	str	r2, [r3, #32]
}
 80092ca:	bf00      	nop
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b085      	sub	sp, #20
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f043 0307 	orr.w	r3, r3, #7
 80092f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	609a      	str	r2, [r3, #8]
}
 8009300:	bf00      	nop
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	021a      	lsls	r2, r3, #8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	431a      	orrs	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4313      	orrs	r3, r2
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	4313      	orrs	r3, r2
 8009338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	609a      	str	r2, [r3, #8]
}
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a2f      	ldr	r2, [pc, #188]	@ (8009418 <TIM_CCxChannelCmd+0xcc>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d024      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009366:	d020      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a2c      	ldr	r2, [pc, #176]	@ (800941c <TIM_CCxChannelCmd+0xd0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d01c      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a2b      	ldr	r2, [pc, #172]	@ (8009420 <TIM_CCxChannelCmd+0xd4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d018      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4a2a      	ldr	r2, [pc, #168]	@ (8009424 <TIM_CCxChannelCmd+0xd8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d014      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4a29      	ldr	r2, [pc, #164]	@ (8009428 <TIM_CCxChannelCmd+0xdc>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d010      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a28      	ldr	r2, [pc, #160]	@ (800942c <TIM_CCxChannelCmd+0xe0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00c      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a27      	ldr	r2, [pc, #156]	@ (8009430 <TIM_CCxChannelCmd+0xe4>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d008      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4a26      	ldr	r2, [pc, #152]	@ (8009434 <TIM_CCxChannelCmd+0xe8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <TIM_CCxChannelCmd+0x5e>
 80093a0:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 80093a4:	4824      	ldr	r0, [pc, #144]	@ (8009438 <TIM_CCxChannelCmd+0xec>)
 80093a6:	f7f8 fe8d 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d016      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d013      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d010      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b0c      	cmp	r3, #12
 80093c0:	d00d      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d00a      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b14      	cmp	r3, #20
 80093cc:	d007      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b3c      	cmp	r3, #60	@ 0x3c
 80093d2:	d004      	beq.n	80093de <TIM_CCxChannelCmd+0x92>
 80093d4:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 80093d8:	4817      	ldr	r0, [pc, #92]	@ (8009438 <TIM_CCxChannelCmd+0xec>)
 80093da:	f7f8 fe73 	bl	80020c4 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	2201      	movs	r2, #1
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a1a      	ldr	r2, [r3, #32]
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	43db      	mvns	r3, r3
 80093f4:	401a      	ands	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a1a      	ldr	r2, [r3, #32]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f003 031f 	and.w	r3, r3, #31
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	fa01 f303 	lsl.w	r3, r1, r3
 800940a:	431a      	orrs	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	621a      	str	r2, [r3, #32]
}
 8009410:	bf00      	nop
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	40012c00 	.word	0x40012c00
 800941c:	40000400 	.word	0x40000400
 8009420:	40000800 	.word	0x40000800
 8009424:	40000c00 	.word	0x40000c00
 8009428:	40013400 	.word	0x40013400
 800942c:	40014000 	.word	0x40014000
 8009430:	40014400 	.word	0x40014400
 8009434:	40014800 	.word	0x40014800
 8009438:	0800bf90 	.word	0x0800bf90

0800943c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a34      	ldr	r2, [pc, #208]	@ (800951c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d02c      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009458:	d027      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a30      	ldr	r2, [pc, #192]	@ (8009520 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d022      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a2e      	ldr	r2, [pc, #184]	@ (8009524 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01d      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a2d      	ldr	r2, [pc, #180]	@ (8009528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d018      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a2b      	ldr	r2, [pc, #172]	@ (800952c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a2a      	ldr	r2, [pc, #168]	@ (8009530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a28      	ldr	r2, [pc, #160]	@ (8009534 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a27      	ldr	r2, [pc, #156]	@ (8009538 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80094a0:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80094a4:	4825      	ldr	r0, [pc, #148]	@ (800953c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094a6:	f7f8 fe0d 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d020      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d01c      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d018      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b30      	cmp	r3, #48	@ 0x30
 80094c8:	d014      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b40      	cmp	r3, #64	@ 0x40
 80094d0:	d010      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b50      	cmp	r3, #80	@ 0x50
 80094d8:	d00c      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b60      	cmp	r3, #96	@ 0x60
 80094e0:	d008      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b70      	cmp	r3, #112	@ 0x70
 80094e8:	d004      	beq.n	80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094ea:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 80094ee:	4813      	ldr	r0, [pc, #76]	@ (800953c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094f0:	f7f8 fde8 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	2b80      	cmp	r3, #128	@ 0x80
 80094fa:	d008      	beq.n	800950e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009504:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8009508:	480c      	ldr	r0, [pc, #48]	@ (800953c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800950a:	f7f8 fddb 	bl	80020c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009514:	2b01      	cmp	r3, #1
 8009516:	d113      	bne.n	8009540 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8009518:	2302      	movs	r3, #2
 800951a:	e0d3      	b.n	80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800951c:	40012c00 	.word	0x40012c00
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40001000 	.word	0x40001000
 8009530:	40001400 	.word	0x40001400
 8009534:	40013400 	.word	0x40013400
 8009538:	40014000 	.word	0x40014000
 800953c:	0800bfc8 	.word	0x0800bfc8
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a59      	ldr	r2, [pc, #356]	@ (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d004      	beq.n	8009574 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a58      	ldr	r2, [pc, #352]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d161      	bne.n	8009638 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d054      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009584:	d04f      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800958e:	d04a      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009598:	d045      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095a2:	d040      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80095ac:	d03b      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80095b6:	d036      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80095c0:	d031      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80095ca:	d02c      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095d4:	d027      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 80095de:	d022      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80095e8:	d01d      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 80095f2:	d018      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80095fc:	d013      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8009606:	d00e      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009610:	d009      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800961a:	d004      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800961c:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8009620:	482c      	ldr	r0, [pc, #176]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009622:	f7f8 fd4f 	bl	80020c4 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800962c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800963e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a1d      	ldr	r2, [pc, #116]	@ (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d01d      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009664:	d018      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a1b      	ldr	r2, [pc, #108]	@ (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d013      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a19      	ldr	r2, [pc, #100]	@ (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00e      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a18      	ldr	r2, [pc, #96]	@ (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d009      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a11      	ldr	r2, [pc, #68]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d004      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a14      	ldr	r2, [pc, #80]	@ (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d10c      	bne.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800969e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	0800bfc8 	.word	0x0800bfc8
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40014000 	.word	0x40014000

080096e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a91      	ldr	r2, [pc, #580]	@ (8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d018      	beq.n	8009732 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a8f      	ldr	r2, [pc, #572]	@ (8009944 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a8e      	ldr	r2, [pc, #568]	@ (8009948 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00e      	beq.n	8009732 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a8c      	ldr	r2, [pc, #560]	@ (800994c <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d009      	beq.n	8009732 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a8b      	ldr	r2, [pc, #556]	@ (8009950 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009728:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800972c:	4889      	ldr	r0, [pc, #548]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800972e:	f7f8 fcc9 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800973a:	d008      	beq.n	800974e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009744:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8009748:	4882      	ldr	r0, [pc, #520]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800974a:	f7f8 fcbb 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009756:	d008      	beq.n	800976a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009760:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8009764:	487b      	ldr	r0, [pc, #492]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009766:	f7f8 fcad 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d013      	beq.n	800979a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800977a:	d00e      	beq.n	800979a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009784:	d009      	beq.n	800979a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800978e:	d004      	beq.n	800979a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009790:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8009794:	486f      	ldr	r0, [pc, #444]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009796:	f7f8 fc95 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	2bff      	cmp	r3, #255	@ 0xff
 80097a0:	d904      	bls.n	80097ac <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 80097a2:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 80097a6:	486b      	ldr	r0, [pc, #428]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80097a8:	f7f8 fc8c 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b4:	d008      	beq.n	80097c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d004      	beq.n	80097c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80097be:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 80097c2:	4864      	ldr	r0, [pc, #400]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80097c4:	f7f8 fc7e 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097d8:	d004      	beq.n	80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80097da:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 80097de:	485d      	ldr	r0, [pc, #372]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80097e0:	f7f8 fc70 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	2b0f      	cmp	r3, #15
 80097ea:	d904      	bls.n	80097f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80097ec:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 80097f0:	4858      	ldr	r0, [pc, #352]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80097f2:	f7f8 fc67 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097fe:	d008      	beq.n	8009812 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	d004      	beq.n	8009812 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009808:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800980c:	4851      	ldr	r0, [pc, #324]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800980e:	f7f8 fc59 	bl	80020c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800981c:	2302      	movs	r3, #2
 800981e:	e08a      	b.n	8009936 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4313      	orrs	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	041b      	lsls	r3, r3, #16
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a28      	ldr	r2, [pc, #160]	@ (8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d004      	beq.n	80098ae <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a26      	ldr	r2, [pc, #152]	@ (8009944 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d13a      	bne.n	8009924 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098b6:	d008      	beq.n	80098ca <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 80098c0:	f640 0112 	movw	r1, #2066	@ 0x812
 80098c4:	4823      	ldr	r0, [pc, #140]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80098c6:	f7f8 fbfd 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098da:	d004      	beq.n	80098e6 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 80098dc:	f640 0113 	movw	r1, #2067	@ 0x813
 80098e0:	481c      	ldr	r0, [pc, #112]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80098e2:	f7f8 fbef 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ea:	2b0f      	cmp	r3, #15
 80098ec:	d904      	bls.n	80098f8 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 80098ee:	f640 0114 	movw	r1, #2068	@ 0x814
 80098f2:	4818      	ldr	r0, [pc, #96]	@ (8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80098f4:	f7f8 fbe6 	bl	80020c4 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009902:	051b      	lsls	r3, r3, #20
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6a1b      	ldr	r3, [r3, #32]
 8009920:	4313      	orrs	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	40012c00 	.word	0x40012c00
 8009944:	40013400 	.word	0x40013400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800
 8009954:	0800bfc8 	.word	0x0800bfc8

08009958 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e08b      	b.n	8009abe <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d023      	beq.n	80099f6 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a45      	ldr	r2, [pc, #276]	@ (8009ac8 <HAL_UART_Init+0x134>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d041      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a43      	ldr	r2, [pc, #268]	@ (8009acc <HAL_UART_Init+0x138>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d03c      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a42      	ldr	r2, [pc, #264]	@ (8009ad0 <HAL_UART_Init+0x13c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d037      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a40      	ldr	r2, [pc, #256]	@ (8009ad4 <HAL_UART_Init+0x140>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d032      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	@ (8009ad8 <HAL_UART_Init+0x144>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d02d      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a3d      	ldr	r2, [pc, #244]	@ (8009adc <HAL_UART_Init+0x148>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d028      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 80099ea:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80099ee:	483c      	ldr	r0, [pc, #240]	@ (8009ae0 <HAL_UART_Init+0x14c>)
 80099f0:	f7f8 fb68 	bl	80020c4 <assert_failed>
 80099f4:	e022      	b.n	8009a3c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a33      	ldr	r2, [pc, #204]	@ (8009ac8 <HAL_UART_Init+0x134>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d01d      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a31      	ldr	r2, [pc, #196]	@ (8009acc <HAL_UART_Init+0x138>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d018      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a30      	ldr	r2, [pc, #192]	@ (8009ad0 <HAL_UART_Init+0x13c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d013      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a2e      	ldr	r2, [pc, #184]	@ (8009ad4 <HAL_UART_Init+0x140>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d00e      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a2d      	ldr	r2, [pc, #180]	@ (8009ad8 <HAL_UART_Init+0x144>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d009      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009adc <HAL_UART_Init+0x148>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d004      	beq.n	8009a3c <HAL_UART_Init+0xa8>
 8009a32:	f240 1157 	movw	r1, #343	@ 0x157
 8009a36:	482a      	ldr	r0, [pc, #168]	@ (8009ae0 <HAL_UART_Init+0x14c>)
 8009a38:	f7f8 fb44 	bl	80020c4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d106      	bne.n	8009a52 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7f9 f90b 	bl	8002c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2224      	movs	r2, #36	@ 0x24
 8009a56:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0201 	bic.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fc1f 	bl	800a2b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f8be 	bl	8009bf8 <UART_SetConfig>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e01b      	b.n	8009abe <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009aa4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fd5c 	bl	800a574 <UART_CheckIdleState>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	40013800 	.word	0x40013800
 8009acc:	40004400 	.word	0x40004400
 8009ad0:	40004800 	.word	0x40004800
 8009ad4:	40004c00 	.word	0x40004c00
 8009ad8:	40005000 	.word	0x40005000
 8009adc:	40008000 	.word	0x40008000
 8009ae0:	0800c004 	.word	0x0800c004

08009ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	@ 0x28
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d177      	bne.n	8009bec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <HAL_UART_Transmit+0x24>
 8009b02:	88fb      	ldrh	r3, [r7, #6]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e070      	b.n	8009bee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2221      	movs	r2, #33	@ 0x21
 8009b18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b1a:	f7f9 f995 	bl	8002e48 <HAL_GetTick>
 8009b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	88fa      	ldrh	r2, [r7, #6]
 8009b24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	88fa      	ldrh	r2, [r7, #6]
 8009b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b38:	d108      	bne.n	8009b4c <HAL_UART_Transmit+0x68>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d104      	bne.n	8009b4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	e003      	b.n	8009b54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b54:	e02f      	b.n	8009bb6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2180      	movs	r1, #128	@ 0x80
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fdaf 	bl	800a6c4 <UART_WaitOnFlagUntilTimeout>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d004      	beq.n	8009b76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e03b      	b.n	8009bee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10b      	bne.n	8009b94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	881a      	ldrh	r2, [r3, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b88:	b292      	uxth	r2, r2
 8009b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	3302      	adds	r3, #2
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	e007      	b.n	8009ba4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1c9      	bne.n	8009b56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2140      	movs	r1, #64	@ 0x40
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 fd79 	bl	800a6c4 <UART_WaitOnFlagUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d004      	beq.n	8009be2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e005      	b.n	8009bee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	e000      	b.n	8009bee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009bec:	2302      	movs	r3, #2
  }
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3720      	adds	r7, #32
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bfc:	b08a      	sub	sp, #40	@ 0x28
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	4a9e      	ldr	r2, [pc, #632]	@ (8009e88 <UART_SetConfig+0x290>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d904      	bls.n	8009c1c <UART_SetConfig+0x24>
 8009c12:	f640 4158 	movw	r1, #3160	@ 0xc58
 8009c16:	489d      	ldr	r0, [pc, #628]	@ (8009e8c <UART_SetConfig+0x294>)
 8009c18:	f7f8 fa54 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c24:	d00d      	beq.n	8009c42 <UART_SetConfig+0x4a>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d009      	beq.n	8009c42 <UART_SetConfig+0x4a>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c36:	d004      	beq.n	8009c42 <UART_SetConfig+0x4a>
 8009c38:	f640 4159 	movw	r1, #3161	@ 0xc59
 8009c3c:	4893      	ldr	r0, [pc, #588]	@ (8009e8c <UART_SetConfig+0x294>)
 8009c3e:	f7f8 fa41 	bl	80020c4 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a92      	ldr	r2, [pc, #584]	@ (8009e90 <UART_SetConfig+0x298>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d10e      	bne.n	8009c6a <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d030      	beq.n	8009cb6 <UART_SetConfig+0xbe>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c5c:	d02b      	beq.n	8009cb6 <UART_SetConfig+0xbe>
 8009c5e:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8009c62:	488a      	ldr	r0, [pc, #552]	@ (8009e8c <UART_SetConfig+0x294>)
 8009c64:	f7f8 fa2e 	bl	80020c4 <assert_failed>
 8009c68:	e025      	b.n	8009cb6 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c72:	d012      	beq.n	8009c9a <UART_SetConfig+0xa2>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00e      	beq.n	8009c9a <UART_SetConfig+0xa2>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c84:	d009      	beq.n	8009c9a <UART_SetConfig+0xa2>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c8e:	d004      	beq.n	8009c9a <UART_SetConfig+0xa2>
 8009c90:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8009c94:	487d      	ldr	r0, [pc, #500]	@ (8009e8c <UART_SetConfig+0x294>)
 8009c96:	f7f8 fa15 	bl	80020c4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d009      	beq.n	8009cb6 <UART_SetConfig+0xbe>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009caa:	d004      	beq.n	8009cb6 <UART_SetConfig+0xbe>
 8009cac:	f640 4161 	movw	r1, #3169	@ 0xc61
 8009cb0:	4876      	ldr	r0, [pc, #472]	@ (8009e8c <UART_SetConfig+0x294>)
 8009cb2:	f7f8 fa07 	bl	80020c4 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00e      	beq.n	8009cdc <UART_SetConfig+0xe4>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc6:	d009      	beq.n	8009cdc <UART_SetConfig+0xe4>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009cd0:	d004      	beq.n	8009cdc <UART_SetConfig+0xe4>
 8009cd2:	f640 4164 	movw	r1, #3172	@ 0xc64
 8009cd6:	486d      	ldr	r0, [pc, #436]	@ (8009e8c <UART_SetConfig+0x294>)
 8009cd8:	f7f8 f9f4 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	f023 030c 	bic.w	r3, r3, #12
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <UART_SetConfig+0xf8>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <UART_SetConfig+0x102>
 8009cf0:	f640 4165 	movw	r1, #3173	@ 0xc65
 8009cf4:	4865      	ldr	r0, [pc, #404]	@ (8009e8c <UART_SetConfig+0x294>)
 8009cf6:	f7f8 f9e5 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d013      	beq.n	8009d2a <UART_SetConfig+0x132>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0a:	d00e      	beq.n	8009d2a <UART_SetConfig+0x132>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d14:	d009      	beq.n	8009d2a <UART_SetConfig+0x132>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d1e:	d004      	beq.n	8009d2a <UART_SetConfig+0x132>
 8009d20:	f640 4166 	movw	r1, #3174	@ 0xc66
 8009d24:	4859      	ldr	r0, [pc, #356]	@ (8009e8c <UART_SetConfig+0x294>)
 8009d26:	f7f8 f9cd 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <UART_SetConfig+0x14e>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d3a:	d004      	beq.n	8009d46 <UART_SetConfig+0x14e>
 8009d3c:	f640 4167 	movw	r1, #3175	@ 0xc67
 8009d40:	4852      	ldr	r0, [pc, #328]	@ (8009e8c <UART_SetConfig+0x294>)
 8009d42:	f7f8 f9bf 	bl	80020c4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b4b      	ldr	r3, [pc, #300]	@ (8009e94 <UART_SetConfig+0x29c>)
 8009d66:	4013      	ands	r3, r2
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	6812      	ldr	r2, [r2, #0]
 8009d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d6e:	430b      	orrs	r3, r1
 8009d70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a3f      	ldr	r2, [pc, #252]	@ (8009e90 <UART_SetConfig+0x298>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009db2:	430a      	orrs	r2, r1
 8009db4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a37      	ldr	r2, [pc, #220]	@ (8009e98 <UART_SetConfig+0x2a0>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d125      	bne.n	8009e0c <UART_SetConfig+0x214>
 8009dc0:	4b36      	ldr	r3, [pc, #216]	@ (8009e9c <UART_SetConfig+0x2a4>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d81a      	bhi.n	8009e04 <UART_SetConfig+0x20c>
 8009dce:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <UART_SetConfig+0x1dc>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009df5 	.word	0x08009df5
 8009ddc:	08009ded 	.word	0x08009ded
 8009de0:	08009dfd 	.word	0x08009dfd
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dea:	e114      	b.n	800a016 <UART_SetConfig+0x41e>
 8009dec:	2302      	movs	r3, #2
 8009dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009df2:	e110      	b.n	800a016 <UART_SetConfig+0x41e>
 8009df4:	2304      	movs	r3, #4
 8009df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dfa:	e10c      	b.n	800a016 <UART_SetConfig+0x41e>
 8009dfc:	2308      	movs	r3, #8
 8009dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e02:	e108      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e04:	2310      	movs	r3, #16
 8009e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e0a:	e104      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a23      	ldr	r2, [pc, #140]	@ (8009ea0 <UART_SetConfig+0x2a8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d146      	bne.n	8009ea4 <UART_SetConfig+0x2ac>
 8009e16:	4b21      	ldr	r3, [pc, #132]	@ (8009e9c <UART_SetConfig+0x2a4>)
 8009e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1c:	f003 030c 	and.w	r3, r3, #12
 8009e20:	2b0c      	cmp	r3, #12
 8009e22:	d82d      	bhi.n	8009e80 <UART_SetConfig+0x288>
 8009e24:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <UART_SetConfig+0x234>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e61 	.word	0x08009e61
 8009e30:	08009e81 	.word	0x08009e81
 8009e34:	08009e81 	.word	0x08009e81
 8009e38:	08009e81 	.word	0x08009e81
 8009e3c:	08009e71 	.word	0x08009e71
 8009e40:	08009e81 	.word	0x08009e81
 8009e44:	08009e81 	.word	0x08009e81
 8009e48:	08009e81 	.word	0x08009e81
 8009e4c:	08009e69 	.word	0x08009e69
 8009e50:	08009e81 	.word	0x08009e81
 8009e54:	08009e81 	.word	0x08009e81
 8009e58:	08009e81 	.word	0x08009e81
 8009e5c:	08009e79 	.word	0x08009e79
 8009e60:	2300      	movs	r3, #0
 8009e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e66:	e0d6      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e6e:	e0d2      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e70:	2304      	movs	r3, #4
 8009e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e76:	e0ce      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e78:	2308      	movs	r3, #8
 8009e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e7e:	e0ca      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e80:	2310      	movs	r3, #16
 8009e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e86:	e0c6      	b.n	800a016 <UART_SetConfig+0x41e>
 8009e88:	00989680 	.word	0x00989680
 8009e8c:	0800c004 	.word	0x0800c004
 8009e90:	40008000 	.word	0x40008000
 8009e94:	efff69f3 	.word	0xefff69f3
 8009e98:	40013800 	.word	0x40013800
 8009e9c:	40021000 	.word	0x40021000
 8009ea0:	40004400 	.word	0x40004400
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4aae      	ldr	r2, [pc, #696]	@ (800a164 <UART_SetConfig+0x56c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d125      	bne.n	8009efa <UART_SetConfig+0x302>
 8009eae:	4bae      	ldr	r3, [pc, #696]	@ (800a168 <UART_SetConfig+0x570>)
 8009eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009eb8:	2b30      	cmp	r3, #48	@ 0x30
 8009eba:	d016      	beq.n	8009eea <UART_SetConfig+0x2f2>
 8009ebc:	2b30      	cmp	r3, #48	@ 0x30
 8009ebe:	d818      	bhi.n	8009ef2 <UART_SetConfig+0x2fa>
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d00a      	beq.n	8009eda <UART_SetConfig+0x2e2>
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d814      	bhi.n	8009ef2 <UART_SetConfig+0x2fa>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <UART_SetConfig+0x2da>
 8009ecc:	2b10      	cmp	r3, #16
 8009ece:	d008      	beq.n	8009ee2 <UART_SetConfig+0x2ea>
 8009ed0:	e00f      	b.n	8009ef2 <UART_SetConfig+0x2fa>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ed8:	e09d      	b.n	800a016 <UART_SetConfig+0x41e>
 8009eda:	2302      	movs	r3, #2
 8009edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ee0:	e099      	b.n	800a016 <UART_SetConfig+0x41e>
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ee8:	e095      	b.n	800a016 <UART_SetConfig+0x41e>
 8009eea:	2308      	movs	r3, #8
 8009eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ef0:	e091      	b.n	800a016 <UART_SetConfig+0x41e>
 8009ef2:	2310      	movs	r3, #16
 8009ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ef8:	e08d      	b.n	800a016 <UART_SetConfig+0x41e>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a9b      	ldr	r2, [pc, #620]	@ (800a16c <UART_SetConfig+0x574>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d125      	bne.n	8009f50 <UART_SetConfig+0x358>
 8009f04:	4b98      	ldr	r3, [pc, #608]	@ (800a168 <UART_SetConfig+0x570>)
 8009f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f10:	d016      	beq.n	8009f40 <UART_SetConfig+0x348>
 8009f12:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f14:	d818      	bhi.n	8009f48 <UART_SetConfig+0x350>
 8009f16:	2b80      	cmp	r3, #128	@ 0x80
 8009f18:	d00a      	beq.n	8009f30 <UART_SetConfig+0x338>
 8009f1a:	2b80      	cmp	r3, #128	@ 0x80
 8009f1c:	d814      	bhi.n	8009f48 <UART_SetConfig+0x350>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <UART_SetConfig+0x330>
 8009f22:	2b40      	cmp	r3, #64	@ 0x40
 8009f24:	d008      	beq.n	8009f38 <UART_SetConfig+0x340>
 8009f26:	e00f      	b.n	8009f48 <UART_SetConfig+0x350>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f2e:	e072      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f30:	2302      	movs	r3, #2
 8009f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f36:	e06e      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f38:	2304      	movs	r3, #4
 8009f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f3e:	e06a      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f40:	2308      	movs	r3, #8
 8009f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f46:	e066      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f48:	2310      	movs	r3, #16
 8009f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f4e:	e062      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a86      	ldr	r2, [pc, #536]	@ (800a170 <UART_SetConfig+0x578>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d12a      	bne.n	8009fb0 <UART_SetConfig+0x3b8>
 8009f5a:	4b83      	ldr	r3, [pc, #524]	@ (800a168 <UART_SetConfig+0x570>)
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f68:	d01a      	beq.n	8009fa0 <UART_SetConfig+0x3a8>
 8009f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f6e:	d81b      	bhi.n	8009fa8 <UART_SetConfig+0x3b0>
 8009f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f74:	d00c      	beq.n	8009f90 <UART_SetConfig+0x398>
 8009f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7a:	d815      	bhi.n	8009fa8 <UART_SetConfig+0x3b0>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <UART_SetConfig+0x390>
 8009f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f84:	d008      	beq.n	8009f98 <UART_SetConfig+0x3a0>
 8009f86:	e00f      	b.n	8009fa8 <UART_SetConfig+0x3b0>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f8e:	e042      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f90:	2302      	movs	r3, #2
 8009f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f96:	e03e      	b.n	800a016 <UART_SetConfig+0x41e>
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f9e:	e03a      	b.n	800a016 <UART_SetConfig+0x41e>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fa6:	e036      	b.n	800a016 <UART_SetConfig+0x41e>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fae:	e032      	b.n	800a016 <UART_SetConfig+0x41e>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a6f      	ldr	r2, [pc, #444]	@ (800a174 <UART_SetConfig+0x57c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d12a      	bne.n	800a010 <UART_SetConfig+0x418>
 8009fba:	4b6b      	ldr	r3, [pc, #428]	@ (800a168 <UART_SetConfig+0x570>)
 8009fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009fc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fc8:	d01a      	beq.n	800a000 <UART_SetConfig+0x408>
 8009fca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fce:	d81b      	bhi.n	800a008 <UART_SetConfig+0x410>
 8009fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fd4:	d00c      	beq.n	8009ff0 <UART_SetConfig+0x3f8>
 8009fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fda:	d815      	bhi.n	800a008 <UART_SetConfig+0x410>
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <UART_SetConfig+0x3f0>
 8009fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fe4:	d008      	beq.n	8009ff8 <UART_SetConfig+0x400>
 8009fe6:	e00f      	b.n	800a008 <UART_SetConfig+0x410>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fee:	e012      	b.n	800a016 <UART_SetConfig+0x41e>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ff6:	e00e      	b.n	800a016 <UART_SetConfig+0x41e>
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ffe:	e00a      	b.n	800a016 <UART_SetConfig+0x41e>
 800a000:	2308      	movs	r3, #8
 800a002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a006:	e006      	b.n	800a016 <UART_SetConfig+0x41e>
 800a008:	2310      	movs	r3, #16
 800a00a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a00e:	e002      	b.n	800a016 <UART_SetConfig+0x41e>
 800a010:	2310      	movs	r3, #16
 800a012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a56      	ldr	r2, [pc, #344]	@ (800a174 <UART_SetConfig+0x57c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d17a      	bne.n	800a116 <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a020:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a024:	2b08      	cmp	r3, #8
 800a026:	d824      	bhi.n	800a072 <UART_SetConfig+0x47a>
 800a028:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <UART_SetConfig+0x438>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a055 	.word	0x0800a055
 800a034:	0800a073 	.word	0x0800a073
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a073 	.word	0x0800a073
 800a040:	0800a063 	.word	0x0800a063
 800a044:	0800a073 	.word	0x0800a073
 800a048:	0800a073 	.word	0x0800a073
 800a04c:	0800a073 	.word	0x0800a073
 800a050:	0800a06b 	.word	0x0800a06b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a054:	f7fa ff3a 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800a058:	61f8      	str	r0, [r7, #28]
        break;
 800a05a:	e010      	b.n	800a07e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a05c:	4b46      	ldr	r3, [pc, #280]	@ (800a178 <UART_SetConfig+0x580>)
 800a05e:	61fb      	str	r3, [r7, #28]
        break;
 800a060:	e00d      	b.n	800a07e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a062:	f7fa fe9b 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 800a066:	61f8      	str	r0, [r7, #28]
        break;
 800a068:	e009      	b.n	800a07e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a06a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a06e:	61fb      	str	r3, [r7, #28]
        break;
 800a070:	e005      	b.n	800a07e <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a07c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 8107 	beq.w	800a294 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4413      	add	r3, r2
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	429a      	cmp	r2, r3
 800a094:	d305      	bcc.n	800a0a2 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d903      	bls.n	800a0aa <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a0a8:	e0f4      	b.n	800a294 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	461c      	mov	r4, r3
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	f04f 0300 	mov.w	r3, #0
 800a0ba:	022b      	lsls	r3, r5, #8
 800a0bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a0c0:	0222      	lsls	r2, r4, #8
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	6849      	ldr	r1, [r1, #4]
 800a0c6:	0849      	lsrs	r1, r1, #1
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	4688      	mov	r8, r1
 800a0cc:	4681      	mov	r9, r0
 800a0ce:	eb12 0a08 	adds.w	sl, r2, r8
 800a0d2:	eb43 0b09 	adc.w	fp, r3, r9
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	603b      	str	r3, [r7, #0]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e4:	4650      	mov	r0, sl
 800a0e6:	4659      	mov	r1, fp
 800a0e8:	f7f6 f8c2 	bl	8000270 <__aeabi_uldivmod>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0fa:	d308      	bcc.n	800a10e <UART_SetConfig+0x516>
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a102:	d204      	bcs.n	800a10e <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	60da      	str	r2, [r3, #12]
 800a10c:	e0c2      	b.n	800a294 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a114:	e0be      	b.n	800a294 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	69db      	ldr	r3, [r3, #28]
 800a11a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a11e:	d16a      	bne.n	800a1f6 <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800a120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a124:	2b08      	cmp	r3, #8
 800a126:	d834      	bhi.n	800a192 <UART_SetConfig+0x59a>
 800a128:	a201      	add	r2, pc, #4	@ (adr r2, 800a130 <UART_SetConfig+0x538>)
 800a12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12e:	bf00      	nop
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a17d 	.word	0x0800a17d
 800a13c:	0800a193 	.word	0x0800a193
 800a140:	0800a183 	.word	0x0800a183
 800a144:	0800a193 	.word	0x0800a193
 800a148:	0800a193 	.word	0x0800a193
 800a14c:	0800a193 	.word	0x0800a193
 800a150:	0800a18b 	.word	0x0800a18b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a154:	f7fa feba 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800a158:	61f8      	str	r0, [r7, #28]
        break;
 800a15a:	e020      	b.n	800a19e <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a15c:	f7fa fecc 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 800a160:	61f8      	str	r0, [r7, #28]
        break;
 800a162:	e01c      	b.n	800a19e <UART_SetConfig+0x5a6>
 800a164:	40004800 	.word	0x40004800
 800a168:	40021000 	.word	0x40021000
 800a16c:	40004c00 	.word	0x40004c00
 800a170:	40005000 	.word	0x40005000
 800a174:	40008000 	.word	0x40008000
 800a178:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a17c:	4b4c      	ldr	r3, [pc, #304]	@ (800a2b0 <UART_SetConfig+0x6b8>)
 800a17e:	61fb      	str	r3, [r7, #28]
        break;
 800a180:	e00d      	b.n	800a19e <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a182:	f7fa fe0b 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 800a186:	61f8      	str	r0, [r7, #28]
        break;
 800a188:	e009      	b.n	800a19e <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a18e:	61fb      	str	r3, [r7, #28]
        break;
 800a190:	e005      	b.n	800a19e <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a19c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d077      	beq.n	800a294 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	005a      	lsls	r2, r3, #1
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	085b      	lsrs	r3, r3, #1
 800a1ae:	441a      	add	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b0f      	cmp	r3, #15
 800a1be:	d916      	bls.n	800a1ee <UART_SetConfig+0x5f6>
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c6:	d212      	bcs.n	800a1ee <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	f023 030f 	bic.w	r3, r3, #15
 800a1d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	085b      	lsrs	r3, r3, #1
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	8afb      	ldrh	r3, [r7, #22]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	8afa      	ldrh	r2, [r7, #22]
 800a1ea:	60da      	str	r2, [r3, #12]
 800a1ec:	e052      	b.n	800a294 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a1f4:	e04e      	b.n	800a294 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1fa:	2b08      	cmp	r3, #8
 800a1fc:	d827      	bhi.n	800a24e <UART_SetConfig+0x656>
 800a1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <UART_SetConfig+0x60c>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a231 	.word	0x0800a231
 800a20c:	0800a239 	.word	0x0800a239
 800a210:	0800a24f 	.word	0x0800a24f
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a24f 	.word	0x0800a24f
 800a21c:	0800a24f 	.word	0x0800a24f
 800a220:	0800a24f 	.word	0x0800a24f
 800a224:	0800a247 	.word	0x0800a247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a228:	f7fa fe50 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800a22c:	61f8      	str	r0, [r7, #28]
        break;
 800a22e:	e014      	b.n	800a25a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a230:	f7fa fe62 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 800a234:	61f8      	str	r0, [r7, #28]
        break;
 800a236:	e010      	b.n	800a25a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a238:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b0 <UART_SetConfig+0x6b8>)
 800a23a:	61fb      	str	r3, [r7, #28]
        break;
 800a23c:	e00d      	b.n	800a25a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a23e:	f7fa fdad 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 800a242:	61f8      	str	r0, [r7, #28]
        break;
 800a244:	e009      	b.n	800a25a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a24a:	61fb      	str	r3, [r7, #28]
        break;
 800a24c:	e005      	b.n	800a25a <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a258:	bf00      	nop
    }

    if (pclk != 0U)
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d019      	beq.n	800a294 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	085a      	lsrs	r2, r3, #1
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	441a      	add	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b0f      	cmp	r3, #15
 800a278:	d909      	bls.n	800a28e <UART_SetConfig+0x696>
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a280:	d205      	bcs.n	800a28e <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	b29a      	uxth	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	60da      	str	r2, [r3, #12]
 800a28c:	e002      	b.n	800a294 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a2a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3728      	adds	r7, #40	@ 0x28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ae:	bf00      	nop
 800a2b0:	00f42400 	.word	0x00f42400

0800a2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c0:	2bff      	cmp	r3, #255	@ 0xff
 800a2c2:	d904      	bls.n	800a2ce <UART_AdvFeatureConfig+0x1a>
 800a2c4:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800a2c8:	4891      	ldr	r0, [pc, #580]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a2ca:	f7f7 fefb 	bl	80020c4 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d018      	beq.n	800a30c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <UART_AdvFeatureConfig+0x42>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ea:	d004      	beq.n	800a2f6 <UART_AdvFeatureConfig+0x42>
 800a2ec:	f640 5152 	movw	r1, #3410	@ 0xd52
 800a2f0:	4887      	ldr	r0, [pc, #540]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a2f2:	f7f7 fee7 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d018      	beq.n	800a34a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d009      	beq.n	800a334 <UART_AdvFeatureConfig+0x80>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a328:	d004      	beq.n	800a334 <UART_AdvFeatureConfig+0x80>
 800a32a:	f640 5159 	movw	r1, #3417	@ 0xd59
 800a32e:	4878      	ldr	r0, [pc, #480]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a330:	f7f7 fec8 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d018      	beq.n	800a388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d009      	beq.n	800a372 <UART_AdvFeatureConfig+0xbe>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a366:	d004      	beq.n	800a372 <UART_AdvFeatureConfig+0xbe>
 800a368:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a36c:	4868      	ldr	r0, [pc, #416]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a36e:	f7f7 fea9 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b00      	cmp	r3, #0
 800a392:	d018      	beq.n	800a3c6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d009      	beq.n	800a3b0 <UART_AdvFeatureConfig+0xfc>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3a4:	d004      	beq.n	800a3b0 <UART_AdvFeatureConfig+0xfc>
 800a3a6:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a3aa:	4859      	ldr	r0, [pc, #356]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a3ac:	f7f7 fe8a 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d018      	beq.n	800a404 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d009      	beq.n	800a3ee <UART_AdvFeatureConfig+0x13a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3e2:	d004      	beq.n	800a3ee <UART_AdvFeatureConfig+0x13a>
 800a3e4:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a3e8:	4849      	ldr	r0, [pc, #292]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a3ea:	f7f7 fe6b 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a408:	f003 0320 	and.w	r3, r3, #32
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d018      	beq.n	800a442 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a414:	2b00      	cmp	r3, #0
 800a416:	d009      	beq.n	800a42c <UART_AdvFeatureConfig+0x178>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a420:	d004      	beq.n	800a42c <UART_AdvFeatureConfig+0x178>
 800a422:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a426:	483a      	ldr	r0, [pc, #232]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a428:	f7f7 fe4c 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d06c      	beq.n	800a528 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a30      	ldr	r2, [pc, #192]	@ (800a514 <UART_AdvFeatureConfig+0x260>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d018      	beq.n	800a48a <UART_AdvFeatureConfig+0x1d6>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a2e      	ldr	r2, [pc, #184]	@ (800a518 <UART_AdvFeatureConfig+0x264>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <UART_AdvFeatureConfig+0x1d6>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a2d      	ldr	r2, [pc, #180]	@ (800a51c <UART_AdvFeatureConfig+0x268>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d00e      	beq.n	800a48a <UART_AdvFeatureConfig+0x1d6>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a2b      	ldr	r2, [pc, #172]	@ (800a520 <UART_AdvFeatureConfig+0x26c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d009      	beq.n	800a48a <UART_AdvFeatureConfig+0x1d6>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a2a      	ldr	r2, [pc, #168]	@ (800a524 <UART_AdvFeatureConfig+0x270>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d004      	beq.n	800a48a <UART_AdvFeatureConfig+0x1d6>
 800a480:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a484:	4822      	ldr	r0, [pc, #136]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a486:	f7f7 fe1d 	bl	80020c4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d009      	beq.n	800a4a6 <UART_AdvFeatureConfig+0x1f2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a49a:	d004      	beq.n	800a4a6 <UART_AdvFeatureConfig+0x1f2>
 800a49c:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a4a0:	481b      	ldr	r0, [pc, #108]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a4a2:	f7f7 fe0f 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4c4:	d130      	bne.n	800a528 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d013      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x242>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4d6:	d00e      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x242>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4e0:	d009      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x242>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a4ea:	d004      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x242>
 800a4ec:	f640 5182 	movw	r1, #3458	@ 0xd82
 800a4f0:	4807      	ldr	r0, [pc, #28]	@ (800a510 <UART_AdvFeatureConfig+0x25c>)
 800a4f2:	f7f7 fde7 	bl	80020c4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	605a      	str	r2, [r3, #4]
 800a50c:	e00c      	b.n	800a528 <UART_AdvFeatureConfig+0x274>
 800a50e:	bf00      	nop
 800a510:	0800c004 	.word	0x0800c004
 800a514:	40013800 	.word	0x40013800
 800a518:	40004400 	.word	0x40004400
 800a51c:	40004800 	.word	0x40004800
 800a520:	40004c00 	.word	0x40004c00
 800a524:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a530:	2b00      	cmp	r3, #0
 800a532:	d018      	beq.n	800a566 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d009      	beq.n	800a550 <UART_AdvFeatureConfig+0x29c>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a540:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a544:	d004      	beq.n	800a550 <UART_AdvFeatureConfig+0x29c>
 800a546:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800a54a:	4809      	ldr	r0, [pc, #36]	@ (800a570 <UART_AdvFeatureConfig+0x2bc>)
 800a54c:	f7f7 fdba 	bl	80020c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	605a      	str	r2, [r3, #4]
  }
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	0800c004 	.word	0x0800c004

0800a574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b098      	sub	sp, #96	@ 0x60
 800a578:	af02      	add	r7, sp, #8
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a584:	f7f8 fc60 	bl	8002e48 <HAL_GetTick>
 800a588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0308 	and.w	r3, r3, #8
 800a594:	2b08      	cmp	r3, #8
 800a596:	d12e      	bne.n	800a5f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f88c 	bl	800a6c4 <UART_WaitOnFlagUntilTimeout>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d021      	beq.n	800a5f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5d8:	e841 2300 	strex	r3, r2, [r1]
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e6      	bne.n	800a5b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e062      	b.n	800a6bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b04      	cmp	r3, #4
 800a602:	d149      	bne.n	800a698 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a60c:	2200      	movs	r2, #0
 800a60e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f856 	bl	800a6c4 <UART_WaitOnFlagUntilTimeout>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d03c      	beq.n	800a698 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	623b      	str	r3, [r7, #32]
   return(result);
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	461a      	mov	r2, r3
 800a63a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a63c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a63e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e6      	bne.n	800a61e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a670:	61fa      	str	r2, [r7, #28]
 800a672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69b9      	ldr	r1, [r7, #24]
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	617b      	str	r3, [r7, #20]
   return(result);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e5      	bne.n	800a650 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e011      	b.n	800a6bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3758      	adds	r7, #88	@ 0x58
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d4:	e04f      	b.n	800a776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6dc:	d04b      	beq.n	800a776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6de:	f7f8 fbb3 	bl	8002e48 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e04e      	b.n	800a796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0304 	and.w	r3, r3, #4
 800a702:	2b00      	cmp	r3, #0
 800a704:	d037      	beq.n	800a776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b80      	cmp	r3, #128	@ 0x80
 800a70a:	d034      	beq.n	800a776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2b40      	cmp	r3, #64	@ 0x40
 800a710:	d031      	beq.n	800a776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	f003 0308 	and.w	r3, r3, #8
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d110      	bne.n	800a742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2208      	movs	r2, #8
 800a726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 f838 	bl	800a79e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2208      	movs	r2, #8
 800a732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e029      	b.n	800a796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a74c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a750:	d111      	bne.n	800a776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a75a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f81e 	bl	800a79e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2220      	movs	r2, #32
 800a766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e00f      	b.n	800a796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	69da      	ldr	r2, [r3, #28]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4013      	ands	r3, r2
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	429a      	cmp	r2, r3
 800a784:	bf0c      	ite	eq
 800a786:	2301      	moveq	r3, #1
 800a788:	2300      	movne	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	429a      	cmp	r2, r3
 800a792:	d0a0      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b095      	sub	sp, #84	@ 0x54
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ae:	e853 3f00 	ldrex	r3, [r3]
 800a7b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7cc:	e841 2300 	strex	r3, r2, [r1]
 800a7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1e6      	bne.n	800a7a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3308      	adds	r3, #8
 800a7de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	f023 0301 	bic.w	r3, r3, #1
 800a7ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3308      	adds	r3, #8
 800a7f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e5      	bne.n	800a7d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a810:	2b01      	cmp	r3, #1
 800a812:	d118      	bne.n	800a846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	60bb      	str	r3, [r7, #8]
   return(result);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f023 0310 	bic.w	r3, r3, #16
 800a828:	647b      	str	r3, [r7, #68]	@ 0x44
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	6979      	ldr	r1, [r7, #20]
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	613b      	str	r3, [r7, #16]
   return(result);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e6      	bne.n	800a814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a85a:	bf00      	nop
 800a85c:	3754      	adds	r7, #84	@ 0x54
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <calloc>:
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <calloc+0xc>)
 800a86a:	460a      	mov	r2, r1
 800a86c:	4601      	mov	r1, r0
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	f000 b802 	b.w	800a878 <_calloc_r>
 800a874:	20000028 	.word	0x20000028

0800a878 <_calloc_r>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	fba1 5402 	umull	r5, r4, r1, r2
 800a87e:	b934      	cbnz	r4, 800a88e <_calloc_r+0x16>
 800a880:	4629      	mov	r1, r5
 800a882:	f000 f83f 	bl	800a904 <_malloc_r>
 800a886:	4606      	mov	r6, r0
 800a888:	b928      	cbnz	r0, 800a896 <_calloc_r+0x1e>
 800a88a:	4630      	mov	r0, r6
 800a88c:	bd70      	pop	{r4, r5, r6, pc}
 800a88e:	220c      	movs	r2, #12
 800a890:	6002      	str	r2, [r0, #0]
 800a892:	2600      	movs	r6, #0
 800a894:	e7f9      	b.n	800a88a <_calloc_r+0x12>
 800a896:	462a      	mov	r2, r5
 800a898:	4621      	mov	r1, r4
 800a89a:	f000 fa13 	bl	800acc4 <memset>
 800a89e:	e7f4      	b.n	800a88a <_calloc_r+0x12>

0800a8a0 <malloc>:
 800a8a0:	4b02      	ldr	r3, [pc, #8]	@ (800a8ac <malloc+0xc>)
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	f000 b82d 	b.w	800a904 <_malloc_r>
 800a8aa:	bf00      	nop
 800a8ac:	20000028 	.word	0x20000028

0800a8b0 <free>:
 800a8b0:	4b02      	ldr	r3, [pc, #8]	@ (800a8bc <free+0xc>)
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	f000 ba9f 	b.w	800adf8 <_free_r>
 800a8ba:	bf00      	nop
 800a8bc:	20000028 	.word	0x20000028

0800a8c0 <sbrk_aligned>:
 800a8c0:	b570      	push	{r4, r5, r6, lr}
 800a8c2:	4e0f      	ldr	r6, [pc, #60]	@ (800a900 <sbrk_aligned+0x40>)
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	6831      	ldr	r1, [r6, #0]
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	b911      	cbnz	r1, 800a8d2 <sbrk_aligned+0x12>
 800a8cc:	f000 fa36 	bl	800ad3c <_sbrk_r>
 800a8d0:	6030      	str	r0, [r6, #0]
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f000 fa31 	bl	800ad3c <_sbrk_r>
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	d103      	bne.n	800a8e6 <sbrk_aligned+0x26>
 800a8de:	f04f 34ff 	mov.w	r4, #4294967295
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	bd70      	pop	{r4, r5, r6, pc}
 800a8e6:	1cc4      	adds	r4, r0, #3
 800a8e8:	f024 0403 	bic.w	r4, r4, #3
 800a8ec:	42a0      	cmp	r0, r4
 800a8ee:	d0f8      	beq.n	800a8e2 <sbrk_aligned+0x22>
 800a8f0:	1a21      	subs	r1, r4, r0
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 fa22 	bl	800ad3c <_sbrk_r>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d1f2      	bne.n	800a8e2 <sbrk_aligned+0x22>
 800a8fc:	e7ef      	b.n	800a8de <sbrk_aligned+0x1e>
 800a8fe:	bf00      	nop
 800a900:	200004dc 	.word	0x200004dc

0800a904 <_malloc_r>:
 800a904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a908:	1ccd      	adds	r5, r1, #3
 800a90a:	f025 0503 	bic.w	r5, r5, #3
 800a90e:	3508      	adds	r5, #8
 800a910:	2d0c      	cmp	r5, #12
 800a912:	bf38      	it	cc
 800a914:	250c      	movcc	r5, #12
 800a916:	2d00      	cmp	r5, #0
 800a918:	4606      	mov	r6, r0
 800a91a:	db01      	blt.n	800a920 <_malloc_r+0x1c>
 800a91c:	42a9      	cmp	r1, r5
 800a91e:	d904      	bls.n	800a92a <_malloc_r+0x26>
 800a920:	230c      	movs	r3, #12
 800a922:	6033      	str	r3, [r6, #0]
 800a924:	2000      	movs	r0, #0
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa00 <_malloc_r+0xfc>
 800a92e:	f000 f869 	bl	800aa04 <__malloc_lock>
 800a932:	f8d8 3000 	ldr.w	r3, [r8]
 800a936:	461c      	mov	r4, r3
 800a938:	bb44      	cbnz	r4, 800a98c <_malloc_r+0x88>
 800a93a:	4629      	mov	r1, r5
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff ffbf 	bl	800a8c0 <sbrk_aligned>
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	4604      	mov	r4, r0
 800a946:	d158      	bne.n	800a9fa <_malloc_r+0xf6>
 800a948:	f8d8 4000 	ldr.w	r4, [r8]
 800a94c:	4627      	mov	r7, r4
 800a94e:	2f00      	cmp	r7, #0
 800a950:	d143      	bne.n	800a9da <_malloc_r+0xd6>
 800a952:	2c00      	cmp	r4, #0
 800a954:	d04b      	beq.n	800a9ee <_malloc_r+0xea>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	4639      	mov	r1, r7
 800a95a:	4630      	mov	r0, r6
 800a95c:	eb04 0903 	add.w	r9, r4, r3
 800a960:	f000 f9ec 	bl	800ad3c <_sbrk_r>
 800a964:	4581      	cmp	r9, r0
 800a966:	d142      	bne.n	800a9ee <_malloc_r+0xea>
 800a968:	6821      	ldr	r1, [r4, #0]
 800a96a:	1a6d      	subs	r5, r5, r1
 800a96c:	4629      	mov	r1, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ffa6 	bl	800a8c0 <sbrk_aligned>
 800a974:	3001      	adds	r0, #1
 800a976:	d03a      	beq.n	800a9ee <_malloc_r+0xea>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	442b      	add	r3, r5
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	f8d8 3000 	ldr.w	r3, [r8]
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	bb62      	cbnz	r2, 800a9e0 <_malloc_r+0xdc>
 800a986:	f8c8 7000 	str.w	r7, [r8]
 800a98a:	e00f      	b.n	800a9ac <_malloc_r+0xa8>
 800a98c:	6822      	ldr	r2, [r4, #0]
 800a98e:	1b52      	subs	r2, r2, r5
 800a990:	d420      	bmi.n	800a9d4 <_malloc_r+0xd0>
 800a992:	2a0b      	cmp	r2, #11
 800a994:	d917      	bls.n	800a9c6 <_malloc_r+0xc2>
 800a996:	1961      	adds	r1, r4, r5
 800a998:	42a3      	cmp	r3, r4
 800a99a:	6025      	str	r5, [r4, #0]
 800a99c:	bf18      	it	ne
 800a99e:	6059      	strne	r1, [r3, #4]
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	bf08      	it	eq
 800a9a4:	f8c8 1000 	streq.w	r1, [r8]
 800a9a8:	5162      	str	r2, [r4, r5]
 800a9aa:	604b      	str	r3, [r1, #4]
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 f82f 	bl	800aa10 <__malloc_unlock>
 800a9b2:	f104 000b 	add.w	r0, r4, #11
 800a9b6:	1d23      	adds	r3, r4, #4
 800a9b8:	f020 0007 	bic.w	r0, r0, #7
 800a9bc:	1ac2      	subs	r2, r0, r3
 800a9be:	bf1c      	itt	ne
 800a9c0:	1a1b      	subne	r3, r3, r0
 800a9c2:	50a3      	strne	r3, [r4, r2]
 800a9c4:	e7af      	b.n	800a926 <_malloc_r+0x22>
 800a9c6:	6862      	ldr	r2, [r4, #4]
 800a9c8:	42a3      	cmp	r3, r4
 800a9ca:	bf0c      	ite	eq
 800a9cc:	f8c8 2000 	streq.w	r2, [r8]
 800a9d0:	605a      	strne	r2, [r3, #4]
 800a9d2:	e7eb      	b.n	800a9ac <_malloc_r+0xa8>
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	6864      	ldr	r4, [r4, #4]
 800a9d8:	e7ae      	b.n	800a938 <_malloc_r+0x34>
 800a9da:	463c      	mov	r4, r7
 800a9dc:	687f      	ldr	r7, [r7, #4]
 800a9de:	e7b6      	b.n	800a94e <_malloc_r+0x4a>
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	d1fb      	bne.n	800a9e0 <_malloc_r+0xdc>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	6053      	str	r3, [r2, #4]
 800a9ec:	e7de      	b.n	800a9ac <_malloc_r+0xa8>
 800a9ee:	230c      	movs	r3, #12
 800a9f0:	6033      	str	r3, [r6, #0]
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f80c 	bl	800aa10 <__malloc_unlock>
 800a9f8:	e794      	b.n	800a924 <_malloc_r+0x20>
 800a9fa:	6005      	str	r5, [r0, #0]
 800a9fc:	e7d6      	b.n	800a9ac <_malloc_r+0xa8>
 800a9fe:	bf00      	nop
 800aa00:	200004e0 	.word	0x200004e0

0800aa04 <__malloc_lock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	@ (800aa0c <__malloc_lock+0x8>)
 800aa06:	f000 b9e6 	b.w	800add6 <__retarget_lock_acquire_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20000624 	.word	0x20000624

0800aa10 <__malloc_unlock>:
 800aa10:	4801      	ldr	r0, [pc, #4]	@ (800aa18 <__malloc_unlock+0x8>)
 800aa12:	f000 b9e1 	b.w	800add8 <__retarget_lock_release_recursive>
 800aa16:	bf00      	nop
 800aa18:	20000624 	.word	0x20000624

0800aa1c <std>:
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	4604      	mov	r4, r0
 800aa22:	e9c0 3300 	strd	r3, r3, [r0]
 800aa26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa2a:	6083      	str	r3, [r0, #8]
 800aa2c:	8181      	strh	r1, [r0, #12]
 800aa2e:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa30:	81c2      	strh	r2, [r0, #14]
 800aa32:	6183      	str	r3, [r0, #24]
 800aa34:	4619      	mov	r1, r3
 800aa36:	2208      	movs	r2, #8
 800aa38:	305c      	adds	r0, #92	@ 0x5c
 800aa3a:	f000 f943 	bl	800acc4 <memset>
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <std+0x58>)
 800aa40:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <std+0x5c>)
 800aa44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa46:	4b0d      	ldr	r3, [pc, #52]	@ (800aa7c <std+0x60>)
 800aa48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa80 <std+0x64>)
 800aa4c:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <std+0x68>)
 800aa50:	6224      	str	r4, [r4, #32]
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d006      	beq.n	800aa64 <std+0x48>
 800aa56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa5a:	4294      	cmp	r4, r2
 800aa5c:	d002      	beq.n	800aa64 <std+0x48>
 800aa5e:	33d0      	adds	r3, #208	@ 0xd0
 800aa60:	429c      	cmp	r4, r3
 800aa62:	d105      	bne.n	800aa70 <std+0x54>
 800aa64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa6c:	f000 b9b2 	b.w	800add4 <__retarget_lock_init_recursive>
 800aa70:	bd10      	pop	{r4, pc}
 800aa72:	bf00      	nop
 800aa74:	0800abc5 	.word	0x0800abc5
 800aa78:	0800abe7 	.word	0x0800abe7
 800aa7c:	0800ac1f 	.word	0x0800ac1f
 800aa80:	0800ac43 	.word	0x0800ac43
 800aa84:	200004e4 	.word	0x200004e4

0800aa88 <stdio_exit_handler>:
 800aa88:	4a02      	ldr	r2, [pc, #8]	@ (800aa94 <stdio_exit_handler+0xc>)
 800aa8a:	4903      	ldr	r1, [pc, #12]	@ (800aa98 <stdio_exit_handler+0x10>)
 800aa8c:	4803      	ldr	r0, [pc, #12]	@ (800aa9c <stdio_exit_handler+0x14>)
 800aa8e:	f000 b869 	b.w	800ab64 <_fwalk_sglue>
 800aa92:	bf00      	nop
 800aa94:	2000001c 	.word	0x2000001c
 800aa98:	0800b7e1 	.word	0x0800b7e1
 800aa9c:	2000002c 	.word	0x2000002c

0800aaa0 <cleanup_stdio>:
 800aaa0:	6841      	ldr	r1, [r0, #4]
 800aaa2:	4b0c      	ldr	r3, [pc, #48]	@ (800aad4 <cleanup_stdio+0x34>)
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	d001      	beq.n	800aab0 <cleanup_stdio+0x10>
 800aaac:	f000 fe98 	bl	800b7e0 <_fflush_r>
 800aab0:	68a1      	ldr	r1, [r4, #8]
 800aab2:	4b09      	ldr	r3, [pc, #36]	@ (800aad8 <cleanup_stdio+0x38>)
 800aab4:	4299      	cmp	r1, r3
 800aab6:	d002      	beq.n	800aabe <cleanup_stdio+0x1e>
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fe91 	bl	800b7e0 <_fflush_r>
 800aabe:	68e1      	ldr	r1, [r4, #12]
 800aac0:	4b06      	ldr	r3, [pc, #24]	@ (800aadc <cleanup_stdio+0x3c>)
 800aac2:	4299      	cmp	r1, r3
 800aac4:	d004      	beq.n	800aad0 <cleanup_stdio+0x30>
 800aac6:	4620      	mov	r0, r4
 800aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aacc:	f000 be88 	b.w	800b7e0 <_fflush_r>
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	bf00      	nop
 800aad4:	200004e4 	.word	0x200004e4
 800aad8:	2000054c 	.word	0x2000054c
 800aadc:	200005b4 	.word	0x200005b4

0800aae0 <global_stdio_init.part.0>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab10 <global_stdio_init.part.0+0x30>)
 800aae4:	4c0b      	ldr	r4, [pc, #44]	@ (800ab14 <global_stdio_init.part.0+0x34>)
 800aae6:	4a0c      	ldr	r2, [pc, #48]	@ (800ab18 <global_stdio_init.part.0+0x38>)
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	4620      	mov	r0, r4
 800aaec:	2200      	movs	r2, #0
 800aaee:	2104      	movs	r1, #4
 800aaf0:	f7ff ff94 	bl	800aa1c <std>
 800aaf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aaf8:	2201      	movs	r2, #1
 800aafa:	2109      	movs	r1, #9
 800aafc:	f7ff ff8e 	bl	800aa1c <std>
 800ab00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab04:	2202      	movs	r2, #2
 800ab06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab0a:	2112      	movs	r1, #18
 800ab0c:	f7ff bf86 	b.w	800aa1c <std>
 800ab10:	2000061c 	.word	0x2000061c
 800ab14:	200004e4 	.word	0x200004e4
 800ab18:	0800aa89 	.word	0x0800aa89

0800ab1c <__sfp_lock_acquire>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	@ (800ab24 <__sfp_lock_acquire+0x8>)
 800ab1e:	f000 b95a 	b.w	800add6 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000625 	.word	0x20000625

0800ab28 <__sfp_lock_release>:
 800ab28:	4801      	ldr	r0, [pc, #4]	@ (800ab30 <__sfp_lock_release+0x8>)
 800ab2a:	f000 b955 	b.w	800add8 <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000625 	.word	0x20000625

0800ab34 <__sinit>:
 800ab34:	b510      	push	{r4, lr}
 800ab36:	4604      	mov	r4, r0
 800ab38:	f7ff fff0 	bl	800ab1c <__sfp_lock_acquire>
 800ab3c:	6a23      	ldr	r3, [r4, #32]
 800ab3e:	b11b      	cbz	r3, 800ab48 <__sinit+0x14>
 800ab40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab44:	f7ff bff0 	b.w	800ab28 <__sfp_lock_release>
 800ab48:	4b04      	ldr	r3, [pc, #16]	@ (800ab5c <__sinit+0x28>)
 800ab4a:	6223      	str	r3, [r4, #32]
 800ab4c:	4b04      	ldr	r3, [pc, #16]	@ (800ab60 <__sinit+0x2c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f5      	bne.n	800ab40 <__sinit+0xc>
 800ab54:	f7ff ffc4 	bl	800aae0 <global_stdio_init.part.0>
 800ab58:	e7f2      	b.n	800ab40 <__sinit+0xc>
 800ab5a:	bf00      	nop
 800ab5c:	0800aaa1 	.word	0x0800aaa1
 800ab60:	2000061c 	.word	0x2000061c

0800ab64 <_fwalk_sglue>:
 800ab64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab68:	4607      	mov	r7, r0
 800ab6a:	4688      	mov	r8, r1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	2600      	movs	r6, #0
 800ab70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab74:	f1b9 0901 	subs.w	r9, r9, #1
 800ab78:	d505      	bpl.n	800ab86 <_fwalk_sglue+0x22>
 800ab7a:	6824      	ldr	r4, [r4, #0]
 800ab7c:	2c00      	cmp	r4, #0
 800ab7e:	d1f7      	bne.n	800ab70 <_fwalk_sglue+0xc>
 800ab80:	4630      	mov	r0, r6
 800ab82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d907      	bls.n	800ab9c <_fwalk_sglue+0x38>
 800ab8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab90:	3301      	adds	r3, #1
 800ab92:	d003      	beq.n	800ab9c <_fwalk_sglue+0x38>
 800ab94:	4629      	mov	r1, r5
 800ab96:	4638      	mov	r0, r7
 800ab98:	47c0      	blx	r8
 800ab9a:	4306      	orrs	r6, r0
 800ab9c:	3568      	adds	r5, #104	@ 0x68
 800ab9e:	e7e9      	b.n	800ab74 <_fwalk_sglue+0x10>

0800aba0 <iprintf>:
 800aba0:	b40f      	push	{r0, r1, r2, r3}
 800aba2:	b507      	push	{r0, r1, r2, lr}
 800aba4:	4906      	ldr	r1, [pc, #24]	@ (800abc0 <iprintf+0x20>)
 800aba6:	ab04      	add	r3, sp, #16
 800aba8:	6808      	ldr	r0, [r1, #0]
 800abaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800abae:	6881      	ldr	r1, [r0, #8]
 800abb0:	9301      	str	r3, [sp, #4]
 800abb2:	f000 faed 	bl	800b190 <_vfiprintf_r>
 800abb6:	b003      	add	sp, #12
 800abb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abbc:	b004      	add	sp, #16
 800abbe:	4770      	bx	lr
 800abc0:	20000028 	.word	0x20000028

0800abc4 <__sread>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	460c      	mov	r4, r1
 800abc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abcc:	f000 f8a4 	bl	800ad18 <_read_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	bfab      	itete	ge
 800abd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abd6:	89a3      	ldrhlt	r3, [r4, #12]
 800abd8:	181b      	addge	r3, r3, r0
 800abda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abde:	bfac      	ite	ge
 800abe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abe2:	81a3      	strhlt	r3, [r4, #12]
 800abe4:	bd10      	pop	{r4, pc}

0800abe6 <__swrite>:
 800abe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abea:	461f      	mov	r7, r3
 800abec:	898b      	ldrh	r3, [r1, #12]
 800abee:	05db      	lsls	r3, r3, #23
 800abf0:	4605      	mov	r5, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	4616      	mov	r6, r2
 800abf6:	d505      	bpl.n	800ac04 <__swrite+0x1e>
 800abf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abfc:	2302      	movs	r3, #2
 800abfe:	2200      	movs	r2, #0
 800ac00:	f000 f878 	bl	800acf4 <_lseek_r>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	4632      	mov	r2, r6
 800ac12:	463b      	mov	r3, r7
 800ac14:	4628      	mov	r0, r5
 800ac16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1a:	f000 b89f 	b.w	800ad5c <_write_r>

0800ac1e <__sseek>:
 800ac1e:	b510      	push	{r4, lr}
 800ac20:	460c      	mov	r4, r1
 800ac22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac26:	f000 f865 	bl	800acf4 <_lseek_r>
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	bf15      	itete	ne
 800ac30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac3a:	81a3      	strheq	r3, [r4, #12]
 800ac3c:	bf18      	it	ne
 800ac3e:	81a3      	strhne	r3, [r4, #12]
 800ac40:	bd10      	pop	{r4, pc}

0800ac42 <__sclose>:
 800ac42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac46:	f000 b845 	b.w	800acd4 <_close_r>

0800ac4a <_vsniprintf_r>:
 800ac4a:	b530      	push	{r4, r5, lr}
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	2c00      	cmp	r4, #0
 800ac50:	b09b      	sub	sp, #108	@ 0x6c
 800ac52:	4605      	mov	r5, r0
 800ac54:	461a      	mov	r2, r3
 800ac56:	da05      	bge.n	800ac64 <_vsniprintf_r+0x1a>
 800ac58:	238b      	movs	r3, #139	@ 0x8b
 800ac5a:	6003      	str	r3, [r0, #0]
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	b01b      	add	sp, #108	@ 0x6c
 800ac62:	bd30      	pop	{r4, r5, pc}
 800ac64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ac68:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac72:	bf14      	ite	ne
 800ac74:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac78:	4623      	moveq	r3, r4
 800ac7a:	9302      	str	r3, [sp, #8]
 800ac7c:	9305      	str	r3, [sp, #20]
 800ac7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac82:	9100      	str	r1, [sp, #0]
 800ac84:	9104      	str	r1, [sp, #16]
 800ac86:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac8a:	4669      	mov	r1, sp
 800ac8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ac8e:	f000 f959 	bl	800af44 <_svfiprintf_r>
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	bfbc      	itt	lt
 800ac96:	238b      	movlt	r3, #139	@ 0x8b
 800ac98:	602b      	strlt	r3, [r5, #0]
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	d0e0      	beq.n	800ac60 <_vsniprintf_r+0x16>
 800ac9e:	9b00      	ldr	r3, [sp, #0]
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e7dc      	b.n	800ac60 <_vsniprintf_r+0x16>
	...

0800aca8 <vsniprintf>:
 800aca8:	b507      	push	{r0, r1, r2, lr}
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	4613      	mov	r3, r2
 800acae:	460a      	mov	r2, r1
 800acb0:	4601      	mov	r1, r0
 800acb2:	4803      	ldr	r0, [pc, #12]	@ (800acc0 <vsniprintf+0x18>)
 800acb4:	6800      	ldr	r0, [r0, #0]
 800acb6:	f7ff ffc8 	bl	800ac4a <_vsniprintf_r>
 800acba:	b003      	add	sp, #12
 800acbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800acc0:	20000028 	.word	0x20000028

0800acc4 <memset>:
 800acc4:	4402      	add	r2, r0
 800acc6:	4603      	mov	r3, r0
 800acc8:	4293      	cmp	r3, r2
 800acca:	d100      	bne.n	800acce <memset+0xa>
 800accc:	4770      	bx	lr
 800acce:	f803 1b01 	strb.w	r1, [r3], #1
 800acd2:	e7f9      	b.n	800acc8 <memset+0x4>

0800acd4 <_close_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d06      	ldr	r5, [pc, #24]	@ (800acf0 <_close_r+0x1c>)
 800acd8:	2300      	movs	r3, #0
 800acda:	4604      	mov	r4, r0
 800acdc:	4608      	mov	r0, r1
 800acde:	602b      	str	r3, [r5, #0]
 800ace0:	f7f7 fb9a 	bl	8002418 <_close>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d102      	bne.n	800acee <_close_r+0x1a>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	b103      	cbz	r3, 800acee <_close_r+0x1a>
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	20000620 	.word	0x20000620

0800acf4 <_lseek_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d07      	ldr	r5, [pc, #28]	@ (800ad14 <_lseek_r+0x20>)
 800acf8:	4604      	mov	r4, r0
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	2200      	movs	r2, #0
 800ad00:	602a      	str	r2, [r5, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f7f7 fbaf 	bl	8002466 <_lseek>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_lseek_r+0x1e>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_lseek_r+0x1e>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20000620 	.word	0x20000620

0800ad18 <_read_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_read_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f7 fb59 	bl	80023de <_read>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_read_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_read_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000620 	.word	0x20000620

0800ad3c <_sbrk_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	@ (800ad58 <_sbrk_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f7f7 fb9a 	bl	8002480 <_sbrk>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_sbrk_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_sbrk_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20000620 	.word	0x20000620

0800ad5c <_write_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d07      	ldr	r5, [pc, #28]	@ (800ad7c <_write_r+0x20>)
 800ad60:	4604      	mov	r4, r0
 800ad62:	4608      	mov	r0, r1
 800ad64:	4611      	mov	r1, r2
 800ad66:	2200      	movs	r2, #0
 800ad68:	602a      	str	r2, [r5, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f7f6 fb2e 	bl	80013cc <_write>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_write_r+0x1e>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_write_r+0x1e>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20000620 	.word	0x20000620

0800ad80 <__errno>:
 800ad80:	4b01      	ldr	r3, [pc, #4]	@ (800ad88 <__errno+0x8>)
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	20000028 	.word	0x20000028

0800ad8c <__libc_init_array>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	4d0d      	ldr	r5, [pc, #52]	@ (800adc4 <__libc_init_array+0x38>)
 800ad90:	4c0d      	ldr	r4, [pc, #52]	@ (800adc8 <__libc_init_array+0x3c>)
 800ad92:	1b64      	subs	r4, r4, r5
 800ad94:	10a4      	asrs	r4, r4, #2
 800ad96:	2600      	movs	r6, #0
 800ad98:	42a6      	cmp	r6, r4
 800ad9a:	d109      	bne.n	800adb0 <__libc_init_array+0x24>
 800ad9c:	4d0b      	ldr	r5, [pc, #44]	@ (800adcc <__libc_init_array+0x40>)
 800ad9e:	4c0c      	ldr	r4, [pc, #48]	@ (800add0 <__libc_init_array+0x44>)
 800ada0:	f000 feae 	bl	800bb00 <_init>
 800ada4:	1b64      	subs	r4, r4, r5
 800ada6:	10a4      	asrs	r4, r4, #2
 800ada8:	2600      	movs	r6, #0
 800adaa:	42a6      	cmp	r6, r4
 800adac:	d105      	bne.n	800adba <__libc_init_array+0x2e>
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb4:	4798      	blx	r3
 800adb6:	3601      	adds	r6, #1
 800adb8:	e7ee      	b.n	800ad98 <__libc_init_array+0xc>
 800adba:	f855 3b04 	ldr.w	r3, [r5], #4
 800adbe:	4798      	blx	r3
 800adc0:	3601      	adds	r6, #1
 800adc2:	e7f2      	b.n	800adaa <__libc_init_array+0x1e>
 800adc4:	0800c0c4 	.word	0x0800c0c4
 800adc8:	0800c0c4 	.word	0x0800c0c4
 800adcc:	0800c0c4 	.word	0x0800c0c4
 800add0:	0800c0c8 	.word	0x0800c0c8

0800add4 <__retarget_lock_init_recursive>:
 800add4:	4770      	bx	lr

0800add6 <__retarget_lock_acquire_recursive>:
 800add6:	4770      	bx	lr

0800add8 <__retarget_lock_release_recursive>:
 800add8:	4770      	bx	lr

0800adda <memcpy>:
 800adda:	440a      	add	r2, r1
 800addc:	4291      	cmp	r1, r2
 800adde:	f100 33ff 	add.w	r3, r0, #4294967295
 800ade2:	d100      	bne.n	800ade6 <memcpy+0xc>
 800ade4:	4770      	bx	lr
 800ade6:	b510      	push	{r4, lr}
 800ade8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adf0:	4291      	cmp	r1, r2
 800adf2:	d1f9      	bne.n	800ade8 <memcpy+0xe>
 800adf4:	bd10      	pop	{r4, pc}
	...

0800adf8 <_free_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4605      	mov	r5, r0
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d041      	beq.n	800ae84 <_free_r+0x8c>
 800ae00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae04:	1f0c      	subs	r4, r1, #4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	bfb8      	it	lt
 800ae0a:	18e4      	addlt	r4, r4, r3
 800ae0c:	f7ff fdfa 	bl	800aa04 <__malloc_lock>
 800ae10:	4a1d      	ldr	r2, [pc, #116]	@ (800ae88 <_free_r+0x90>)
 800ae12:	6813      	ldr	r3, [r2, #0]
 800ae14:	b933      	cbnz	r3, 800ae24 <_free_r+0x2c>
 800ae16:	6063      	str	r3, [r4, #4]
 800ae18:	6014      	str	r4, [r2, #0]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae20:	f7ff bdf6 	b.w	800aa10 <__malloc_unlock>
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	d908      	bls.n	800ae3a <_free_r+0x42>
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	1821      	adds	r1, r4, r0
 800ae2c:	428b      	cmp	r3, r1
 800ae2e:	bf01      	itttt	eq
 800ae30:	6819      	ldreq	r1, [r3, #0]
 800ae32:	685b      	ldreq	r3, [r3, #4]
 800ae34:	1809      	addeq	r1, r1, r0
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	e7ed      	b.n	800ae16 <_free_r+0x1e>
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	b10b      	cbz	r3, 800ae44 <_free_r+0x4c>
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	d9fa      	bls.n	800ae3a <_free_r+0x42>
 800ae44:	6811      	ldr	r1, [r2, #0]
 800ae46:	1850      	adds	r0, r2, r1
 800ae48:	42a0      	cmp	r0, r4
 800ae4a:	d10b      	bne.n	800ae64 <_free_r+0x6c>
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	4401      	add	r1, r0
 800ae50:	1850      	adds	r0, r2, r1
 800ae52:	4283      	cmp	r3, r0
 800ae54:	6011      	str	r1, [r2, #0]
 800ae56:	d1e0      	bne.n	800ae1a <_free_r+0x22>
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	6053      	str	r3, [r2, #4]
 800ae5e:	4408      	add	r0, r1
 800ae60:	6010      	str	r0, [r2, #0]
 800ae62:	e7da      	b.n	800ae1a <_free_r+0x22>
 800ae64:	d902      	bls.n	800ae6c <_free_r+0x74>
 800ae66:	230c      	movs	r3, #12
 800ae68:	602b      	str	r3, [r5, #0]
 800ae6a:	e7d6      	b.n	800ae1a <_free_r+0x22>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	1821      	adds	r1, r4, r0
 800ae70:	428b      	cmp	r3, r1
 800ae72:	bf04      	itt	eq
 800ae74:	6819      	ldreq	r1, [r3, #0]
 800ae76:	685b      	ldreq	r3, [r3, #4]
 800ae78:	6063      	str	r3, [r4, #4]
 800ae7a:	bf04      	itt	eq
 800ae7c:	1809      	addeq	r1, r1, r0
 800ae7e:	6021      	streq	r1, [r4, #0]
 800ae80:	6054      	str	r4, [r2, #4]
 800ae82:	e7ca      	b.n	800ae1a <_free_r+0x22>
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop
 800ae88:	200004e0 	.word	0x200004e0

0800ae8c <__ssputs_r>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	688e      	ldr	r6, [r1, #8]
 800ae92:	461f      	mov	r7, r3
 800ae94:	42be      	cmp	r6, r7
 800ae96:	680b      	ldr	r3, [r1, #0]
 800ae98:	4682      	mov	sl, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	4690      	mov	r8, r2
 800ae9e:	d82d      	bhi.n	800aefc <__ssputs_r+0x70>
 800aea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aea8:	d026      	beq.n	800aef8 <__ssputs_r+0x6c>
 800aeaa:	6965      	ldr	r5, [r4, #20]
 800aeac:	6909      	ldr	r1, [r1, #16]
 800aeae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb2:	eba3 0901 	sub.w	r9, r3, r1
 800aeb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeba:	1c7b      	adds	r3, r7, #1
 800aebc:	444b      	add	r3, r9
 800aebe:	106d      	asrs	r5, r5, #1
 800aec0:	429d      	cmp	r5, r3
 800aec2:	bf38      	it	cc
 800aec4:	461d      	movcc	r5, r3
 800aec6:	0553      	lsls	r3, r2, #21
 800aec8:	d527      	bpl.n	800af1a <__ssputs_r+0x8e>
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7ff fd1a 	bl	800a904 <_malloc_r>
 800aed0:	4606      	mov	r6, r0
 800aed2:	b360      	cbz	r0, 800af2e <__ssputs_r+0xa2>
 800aed4:	6921      	ldr	r1, [r4, #16]
 800aed6:	464a      	mov	r2, r9
 800aed8:	f7ff ff7f 	bl	800adda <memcpy>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	6126      	str	r6, [r4, #16]
 800aeea:	6165      	str	r5, [r4, #20]
 800aeec:	444e      	add	r6, r9
 800aeee:	eba5 0509 	sub.w	r5, r5, r9
 800aef2:	6026      	str	r6, [r4, #0]
 800aef4:	60a5      	str	r5, [r4, #8]
 800aef6:	463e      	mov	r6, r7
 800aef8:	42be      	cmp	r6, r7
 800aefa:	d900      	bls.n	800aefe <__ssputs_r+0x72>
 800aefc:	463e      	mov	r6, r7
 800aefe:	6820      	ldr	r0, [r4, #0]
 800af00:	4632      	mov	r2, r6
 800af02:	4641      	mov	r1, r8
 800af04:	f000 fd8a 	bl	800ba1c <memmove>
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	1b9b      	subs	r3, r3, r6
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	4433      	add	r3, r6
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	2000      	movs	r0, #0
 800af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1a:	462a      	mov	r2, r5
 800af1c:	f000 fdba 	bl	800ba94 <_realloc_r>
 800af20:	4606      	mov	r6, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	d1e0      	bne.n	800aee8 <__ssputs_r+0x5c>
 800af26:	6921      	ldr	r1, [r4, #16]
 800af28:	4650      	mov	r0, sl
 800af2a:	f7ff ff65 	bl	800adf8 <_free_r>
 800af2e:	230c      	movs	r3, #12
 800af30:	f8ca 3000 	str.w	r3, [sl]
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	e7e9      	b.n	800af16 <__ssputs_r+0x8a>
	...

0800af44 <_svfiprintf_r>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4698      	mov	r8, r3
 800af4a:	898b      	ldrh	r3, [r1, #12]
 800af4c:	061b      	lsls	r3, r3, #24
 800af4e:	b09d      	sub	sp, #116	@ 0x74
 800af50:	4607      	mov	r7, r0
 800af52:	460d      	mov	r5, r1
 800af54:	4614      	mov	r4, r2
 800af56:	d510      	bpl.n	800af7a <_svfiprintf_r+0x36>
 800af58:	690b      	ldr	r3, [r1, #16]
 800af5a:	b973      	cbnz	r3, 800af7a <_svfiprintf_r+0x36>
 800af5c:	2140      	movs	r1, #64	@ 0x40
 800af5e:	f7ff fcd1 	bl	800a904 <_malloc_r>
 800af62:	6028      	str	r0, [r5, #0]
 800af64:	6128      	str	r0, [r5, #16]
 800af66:	b930      	cbnz	r0, 800af76 <_svfiprintf_r+0x32>
 800af68:	230c      	movs	r3, #12
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	b01d      	add	sp, #116	@ 0x74
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	2340      	movs	r3, #64	@ 0x40
 800af78:	616b      	str	r3, [r5, #20]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7e:	2320      	movs	r3, #32
 800af80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af84:	f8cd 800c 	str.w	r8, [sp, #12]
 800af88:	2330      	movs	r3, #48	@ 0x30
 800af8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b128 <_svfiprintf_r+0x1e4>
 800af8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af92:	f04f 0901 	mov.w	r9, #1
 800af96:	4623      	mov	r3, r4
 800af98:	469a      	mov	sl, r3
 800af9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af9e:	b10a      	cbz	r2, 800afa4 <_svfiprintf_r+0x60>
 800afa0:	2a25      	cmp	r2, #37	@ 0x25
 800afa2:	d1f9      	bne.n	800af98 <_svfiprintf_r+0x54>
 800afa4:	ebba 0b04 	subs.w	fp, sl, r4
 800afa8:	d00b      	beq.n	800afc2 <_svfiprintf_r+0x7e>
 800afaa:	465b      	mov	r3, fp
 800afac:	4622      	mov	r2, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff ff6b 	bl	800ae8c <__ssputs_r>
 800afb6:	3001      	adds	r0, #1
 800afb8:	f000 80a7 	beq.w	800b10a <_svfiprintf_r+0x1c6>
 800afbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afbe:	445a      	add	r2, fp
 800afc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afc2:	f89a 3000 	ldrb.w	r3, [sl]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 809f 	beq.w	800b10a <_svfiprintf_r+0x1c6>
 800afcc:	2300      	movs	r3, #0
 800afce:	f04f 32ff 	mov.w	r2, #4294967295
 800afd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afd6:	f10a 0a01 	add.w	sl, sl, #1
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	9307      	str	r3, [sp, #28]
 800afde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afe2:	931a      	str	r3, [sp, #104]	@ 0x68
 800afe4:	4654      	mov	r4, sl
 800afe6:	2205      	movs	r2, #5
 800afe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afec:	484e      	ldr	r0, [pc, #312]	@ (800b128 <_svfiprintf_r+0x1e4>)
 800afee:	f7f5 f8ef 	bl	80001d0 <memchr>
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	b9d8      	cbnz	r0, 800b02e <_svfiprintf_r+0xea>
 800aff6:	06d0      	lsls	r0, r2, #27
 800aff8:	bf44      	itt	mi
 800affa:	2320      	movmi	r3, #32
 800affc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b000:	0711      	lsls	r1, r2, #28
 800b002:	bf44      	itt	mi
 800b004:	232b      	movmi	r3, #43	@ 0x2b
 800b006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b00a:	f89a 3000 	ldrb.w	r3, [sl]
 800b00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b010:	d015      	beq.n	800b03e <_svfiprintf_r+0xfa>
 800b012:	9a07      	ldr	r2, [sp, #28]
 800b014:	4654      	mov	r4, sl
 800b016:	2000      	movs	r0, #0
 800b018:	f04f 0c0a 	mov.w	ip, #10
 800b01c:	4621      	mov	r1, r4
 800b01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b022:	3b30      	subs	r3, #48	@ 0x30
 800b024:	2b09      	cmp	r3, #9
 800b026:	d94b      	bls.n	800b0c0 <_svfiprintf_r+0x17c>
 800b028:	b1b0      	cbz	r0, 800b058 <_svfiprintf_r+0x114>
 800b02a:	9207      	str	r2, [sp, #28]
 800b02c:	e014      	b.n	800b058 <_svfiprintf_r+0x114>
 800b02e:	eba0 0308 	sub.w	r3, r0, r8
 800b032:	fa09 f303 	lsl.w	r3, r9, r3
 800b036:	4313      	orrs	r3, r2
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	46a2      	mov	sl, r4
 800b03c:	e7d2      	b.n	800afe4 <_svfiprintf_r+0xa0>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	1d19      	adds	r1, r3, #4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	9103      	str	r1, [sp, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	bfbb      	ittet	lt
 800b04a:	425b      	neglt	r3, r3
 800b04c:	f042 0202 	orrlt.w	r2, r2, #2
 800b050:	9307      	strge	r3, [sp, #28]
 800b052:	9307      	strlt	r3, [sp, #28]
 800b054:	bfb8      	it	lt
 800b056:	9204      	strlt	r2, [sp, #16]
 800b058:	7823      	ldrb	r3, [r4, #0]
 800b05a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b05c:	d10a      	bne.n	800b074 <_svfiprintf_r+0x130>
 800b05e:	7863      	ldrb	r3, [r4, #1]
 800b060:	2b2a      	cmp	r3, #42	@ 0x2a
 800b062:	d132      	bne.n	800b0ca <_svfiprintf_r+0x186>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	1d1a      	adds	r2, r3, #4
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	9203      	str	r2, [sp, #12]
 800b06c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b070:	3402      	adds	r4, #2
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b138 <_svfiprintf_r+0x1f4>
 800b078:	7821      	ldrb	r1, [r4, #0]
 800b07a:	2203      	movs	r2, #3
 800b07c:	4650      	mov	r0, sl
 800b07e:	f7f5 f8a7 	bl	80001d0 <memchr>
 800b082:	b138      	cbz	r0, 800b094 <_svfiprintf_r+0x150>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	eba0 000a 	sub.w	r0, r0, sl
 800b08a:	2240      	movs	r2, #64	@ 0x40
 800b08c:	4082      	lsls	r2, r0
 800b08e:	4313      	orrs	r3, r2
 800b090:	3401      	adds	r4, #1
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b098:	4824      	ldr	r0, [pc, #144]	@ (800b12c <_svfiprintf_r+0x1e8>)
 800b09a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b09e:	2206      	movs	r2, #6
 800b0a0:	f7f5 f896 	bl	80001d0 <memchr>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d036      	beq.n	800b116 <_svfiprintf_r+0x1d2>
 800b0a8:	4b21      	ldr	r3, [pc, #132]	@ (800b130 <_svfiprintf_r+0x1ec>)
 800b0aa:	bb1b      	cbnz	r3, 800b0f4 <_svfiprintf_r+0x1b0>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	3307      	adds	r3, #7
 800b0b0:	f023 0307 	bic.w	r3, r3, #7
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ba:	4433      	add	r3, r6
 800b0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0be:	e76a      	b.n	800af96 <_svfiprintf_r+0x52>
 800b0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e7a8      	b.n	800b01c <_svfiprintf_r+0xd8>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	9305      	str	r3, [sp, #20]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f04f 0c0a 	mov.w	ip, #10
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0dc:	3a30      	subs	r2, #48	@ 0x30
 800b0de:	2a09      	cmp	r2, #9
 800b0e0:	d903      	bls.n	800b0ea <_svfiprintf_r+0x1a6>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0c6      	beq.n	800b074 <_svfiprintf_r+0x130>
 800b0e6:	9105      	str	r1, [sp, #20]
 800b0e8:	e7c4      	b.n	800b074 <_svfiprintf_r+0x130>
 800b0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7f0      	b.n	800b0d6 <_svfiprintf_r+0x192>
 800b0f4:	ab03      	add	r3, sp, #12
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	462a      	mov	r2, r5
 800b0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b134 <_svfiprintf_r+0x1f0>)
 800b0fc:	a904      	add	r1, sp, #16
 800b0fe:	4638      	mov	r0, r7
 800b100:	f3af 8000 	nop.w
 800b104:	1c42      	adds	r2, r0, #1
 800b106:	4606      	mov	r6, r0
 800b108:	d1d6      	bne.n	800b0b8 <_svfiprintf_r+0x174>
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	065b      	lsls	r3, r3, #25
 800b10e:	f53f af2d 	bmi.w	800af6c <_svfiprintf_r+0x28>
 800b112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b114:	e72c      	b.n	800af70 <_svfiprintf_r+0x2c>
 800b116:	ab03      	add	r3, sp, #12
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	462a      	mov	r2, r5
 800b11c:	4b05      	ldr	r3, [pc, #20]	@ (800b134 <_svfiprintf_r+0x1f0>)
 800b11e:	a904      	add	r1, sp, #16
 800b120:	4638      	mov	r0, r7
 800b122:	f000 f9bb 	bl	800b49c <_printf_i>
 800b126:	e7ed      	b.n	800b104 <_svfiprintf_r+0x1c0>
 800b128:	0800c088 	.word	0x0800c088
 800b12c:	0800c092 	.word	0x0800c092
 800b130:	00000000 	.word	0x00000000
 800b134:	0800ae8d 	.word	0x0800ae8d
 800b138:	0800c08e 	.word	0x0800c08e

0800b13c <__sfputc_r>:
 800b13c:	6893      	ldr	r3, [r2, #8]
 800b13e:	3b01      	subs	r3, #1
 800b140:	2b00      	cmp	r3, #0
 800b142:	b410      	push	{r4}
 800b144:	6093      	str	r3, [r2, #8]
 800b146:	da08      	bge.n	800b15a <__sfputc_r+0x1e>
 800b148:	6994      	ldr	r4, [r2, #24]
 800b14a:	42a3      	cmp	r3, r4
 800b14c:	db01      	blt.n	800b152 <__sfputc_r+0x16>
 800b14e:	290a      	cmp	r1, #10
 800b150:	d103      	bne.n	800b15a <__sfputc_r+0x1e>
 800b152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b156:	f000 bbcd 	b.w	800b8f4 <__swbuf_r>
 800b15a:	6813      	ldr	r3, [r2, #0]
 800b15c:	1c58      	adds	r0, r3, #1
 800b15e:	6010      	str	r0, [r2, #0]
 800b160:	7019      	strb	r1, [r3, #0]
 800b162:	4608      	mov	r0, r1
 800b164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <__sfputs_r>:
 800b16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16c:	4606      	mov	r6, r0
 800b16e:	460f      	mov	r7, r1
 800b170:	4614      	mov	r4, r2
 800b172:	18d5      	adds	r5, r2, r3
 800b174:	42ac      	cmp	r4, r5
 800b176:	d101      	bne.n	800b17c <__sfputs_r+0x12>
 800b178:	2000      	movs	r0, #0
 800b17a:	e007      	b.n	800b18c <__sfputs_r+0x22>
 800b17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b180:	463a      	mov	r2, r7
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ffda 	bl	800b13c <__sfputc_r>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d1f3      	bne.n	800b174 <__sfputs_r+0xa>
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b190 <_vfiprintf_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	460d      	mov	r5, r1
 800b196:	b09d      	sub	sp, #116	@ 0x74
 800b198:	4614      	mov	r4, r2
 800b19a:	4698      	mov	r8, r3
 800b19c:	4606      	mov	r6, r0
 800b19e:	b118      	cbz	r0, 800b1a8 <_vfiprintf_r+0x18>
 800b1a0:	6a03      	ldr	r3, [r0, #32]
 800b1a2:	b90b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x18>
 800b1a4:	f7ff fcc6 	bl	800ab34 <__sinit>
 800b1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1aa:	07d9      	lsls	r1, r3, #31
 800b1ac:	d405      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	059a      	lsls	r2, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b6:	f7ff fe0e 	bl	800add6 <__retarget_lock_acquire_recursive>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	071b      	lsls	r3, r3, #28
 800b1be:	d501      	bpl.n	800b1c4 <_vfiprintf_r+0x34>
 800b1c0:	692b      	ldr	r3, [r5, #16]
 800b1c2:	b99b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x5c>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f000 fbd2 	bl	800b970 <__swsetup_r>
 800b1cc:	b170      	cbz	r0, 800b1ec <_vfiprintf_r+0x5c>
 800b1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1d0:	07dc      	lsls	r4, r3, #31
 800b1d2:	d504      	bpl.n	800b1de <_vfiprintf_r+0x4e>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b01d      	add	sp, #116	@ 0x74
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	0598      	lsls	r0, r3, #22
 800b1e2:	d4f7      	bmi.n	800b1d4 <_vfiprintf_r+0x44>
 800b1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1e6:	f7ff fdf7 	bl	800add8 <__retarget_lock_release_recursive>
 800b1ea:	e7f3      	b.n	800b1d4 <_vfiprintf_r+0x44>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fa:	2330      	movs	r3, #48	@ 0x30
 800b1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3ac <_vfiprintf_r+0x21c>
 800b200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b204:	f04f 0901 	mov.w	r9, #1
 800b208:	4623      	mov	r3, r4
 800b20a:	469a      	mov	sl, r3
 800b20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b210:	b10a      	cbz	r2, 800b216 <_vfiprintf_r+0x86>
 800b212:	2a25      	cmp	r2, #37	@ 0x25
 800b214:	d1f9      	bne.n	800b20a <_vfiprintf_r+0x7a>
 800b216:	ebba 0b04 	subs.w	fp, sl, r4
 800b21a:	d00b      	beq.n	800b234 <_vfiprintf_r+0xa4>
 800b21c:	465b      	mov	r3, fp
 800b21e:	4622      	mov	r2, r4
 800b220:	4629      	mov	r1, r5
 800b222:	4630      	mov	r0, r6
 800b224:	f7ff ffa1 	bl	800b16a <__sfputs_r>
 800b228:	3001      	adds	r0, #1
 800b22a:	f000 80a7 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b230:	445a      	add	r2, fp
 800b232:	9209      	str	r2, [sp, #36]	@ 0x24
 800b234:	f89a 3000 	ldrb.w	r3, [sl]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 809f 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b23e:	2300      	movs	r3, #0
 800b240:	f04f 32ff 	mov.w	r2, #4294967295
 800b244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b248:	f10a 0a01 	add.w	sl, sl, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b254:	931a      	str	r3, [sp, #104]	@ 0x68
 800b256:	4654      	mov	r4, sl
 800b258:	2205      	movs	r2, #5
 800b25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25e:	4853      	ldr	r0, [pc, #332]	@ (800b3ac <_vfiprintf_r+0x21c>)
 800b260:	f7f4 ffb6 	bl	80001d0 <memchr>
 800b264:	9a04      	ldr	r2, [sp, #16]
 800b266:	b9d8      	cbnz	r0, 800b2a0 <_vfiprintf_r+0x110>
 800b268:	06d1      	lsls	r1, r2, #27
 800b26a:	bf44      	itt	mi
 800b26c:	2320      	movmi	r3, #32
 800b26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b272:	0713      	lsls	r3, r2, #28
 800b274:	bf44      	itt	mi
 800b276:	232b      	movmi	r3, #43	@ 0x2b
 800b278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b27c:	f89a 3000 	ldrb.w	r3, [sl]
 800b280:	2b2a      	cmp	r3, #42	@ 0x2a
 800b282:	d015      	beq.n	800b2b0 <_vfiprintf_r+0x120>
 800b284:	9a07      	ldr	r2, [sp, #28]
 800b286:	4654      	mov	r4, sl
 800b288:	2000      	movs	r0, #0
 800b28a:	f04f 0c0a 	mov.w	ip, #10
 800b28e:	4621      	mov	r1, r4
 800b290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b294:	3b30      	subs	r3, #48	@ 0x30
 800b296:	2b09      	cmp	r3, #9
 800b298:	d94b      	bls.n	800b332 <_vfiprintf_r+0x1a2>
 800b29a:	b1b0      	cbz	r0, 800b2ca <_vfiprintf_r+0x13a>
 800b29c:	9207      	str	r2, [sp, #28]
 800b29e:	e014      	b.n	800b2ca <_vfiprintf_r+0x13a>
 800b2a0:	eba0 0308 	sub.w	r3, r0, r8
 800b2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	46a2      	mov	sl, r4
 800b2ae:	e7d2      	b.n	800b256 <_vfiprintf_r+0xc6>
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	1d19      	adds	r1, r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	9103      	str	r1, [sp, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfbb      	ittet	lt
 800b2bc:	425b      	neglt	r3, r3
 800b2be:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c2:	9307      	strge	r3, [sp, #28]
 800b2c4:	9307      	strlt	r3, [sp, #28]
 800b2c6:	bfb8      	it	lt
 800b2c8:	9204      	strlt	r2, [sp, #16]
 800b2ca:	7823      	ldrb	r3, [r4, #0]
 800b2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ce:	d10a      	bne.n	800b2e6 <_vfiprintf_r+0x156>
 800b2d0:	7863      	ldrb	r3, [r4, #1]
 800b2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d4:	d132      	bne.n	800b33c <_vfiprintf_r+0x1ac>
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	9203      	str	r2, [sp, #12]
 800b2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2e2:	3402      	adds	r4, #2
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3bc <_vfiprintf_r+0x22c>
 800b2ea:	7821      	ldrb	r1, [r4, #0]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	f7f4 ff6e 	bl	80001d0 <memchr>
 800b2f4:	b138      	cbz	r0, 800b306 <_vfiprintf_r+0x176>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	eba0 000a 	sub.w	r0, r0, sl
 800b2fc:	2240      	movs	r2, #64	@ 0x40
 800b2fe:	4082      	lsls	r2, r0
 800b300:	4313      	orrs	r3, r2
 800b302:	3401      	adds	r4, #1
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4829      	ldr	r0, [pc, #164]	@ (800b3b0 <_vfiprintf_r+0x220>)
 800b30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b310:	2206      	movs	r2, #6
 800b312:	f7f4 ff5d 	bl	80001d0 <memchr>
 800b316:	2800      	cmp	r0, #0
 800b318:	d03f      	beq.n	800b39a <_vfiprintf_r+0x20a>
 800b31a:	4b26      	ldr	r3, [pc, #152]	@ (800b3b4 <_vfiprintf_r+0x224>)
 800b31c:	bb1b      	cbnz	r3, 800b366 <_vfiprintf_r+0x1d6>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	3307      	adds	r3, #7
 800b322:	f023 0307 	bic.w	r3, r3, #7
 800b326:	3308      	adds	r3, #8
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b32c:	443b      	add	r3, r7
 800b32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b330:	e76a      	b.n	800b208 <_vfiprintf_r+0x78>
 800b332:	fb0c 3202 	mla	r2, ip, r2, r3
 800b336:	460c      	mov	r4, r1
 800b338:	2001      	movs	r0, #1
 800b33a:	e7a8      	b.n	800b28e <_vfiprintf_r+0xfe>
 800b33c:	2300      	movs	r3, #0
 800b33e:	3401      	adds	r4, #1
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	4619      	mov	r1, r3
 800b344:	f04f 0c0a 	mov.w	ip, #10
 800b348:	4620      	mov	r0, r4
 800b34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34e:	3a30      	subs	r2, #48	@ 0x30
 800b350:	2a09      	cmp	r2, #9
 800b352:	d903      	bls.n	800b35c <_vfiprintf_r+0x1cc>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0c6      	beq.n	800b2e6 <_vfiprintf_r+0x156>
 800b358:	9105      	str	r1, [sp, #20]
 800b35a:	e7c4      	b.n	800b2e6 <_vfiprintf_r+0x156>
 800b35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b360:	4604      	mov	r4, r0
 800b362:	2301      	movs	r3, #1
 800b364:	e7f0      	b.n	800b348 <_vfiprintf_r+0x1b8>
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	462a      	mov	r2, r5
 800b36c:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b36e:	a904      	add	r1, sp, #16
 800b370:	4630      	mov	r0, r6
 800b372:	f3af 8000 	nop.w
 800b376:	4607      	mov	r7, r0
 800b378:	1c78      	adds	r0, r7, #1
 800b37a:	d1d6      	bne.n	800b32a <_vfiprintf_r+0x19a>
 800b37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d405      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	059a      	lsls	r2, r3, #22
 800b386:	d402      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b38a:	f7ff fd25 	bl	800add8 <__retarget_lock_release_recursive>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	065b      	lsls	r3, r3, #25
 800b392:	f53f af1f 	bmi.w	800b1d4 <_vfiprintf_r+0x44>
 800b396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b398:	e71e      	b.n	800b1d8 <_vfiprintf_r+0x48>
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	462a      	mov	r2, r5
 800b3a0:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b3a2:	a904      	add	r1, sp, #16
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f000 f879 	bl	800b49c <_printf_i>
 800b3aa:	e7e4      	b.n	800b376 <_vfiprintf_r+0x1e6>
 800b3ac:	0800c088 	.word	0x0800c088
 800b3b0:	0800c092 	.word	0x0800c092
 800b3b4:	00000000 	.word	0x00000000
 800b3b8:	0800b16b 	.word	0x0800b16b
 800b3bc:	0800c08e 	.word	0x0800c08e

0800b3c0 <_printf_common>:
 800b3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	4698      	mov	r8, r3
 800b3c8:	688a      	ldr	r2, [r1, #8]
 800b3ca:	690b      	ldr	r3, [r1, #16]
 800b3cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	bfb8      	it	lt
 800b3d4:	4613      	movlt	r3, r2
 800b3d6:	6033      	str	r3, [r6, #0]
 800b3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3dc:	4607      	mov	r7, r0
 800b3de:	460c      	mov	r4, r1
 800b3e0:	b10a      	cbz	r2, 800b3e6 <_printf_common+0x26>
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	6033      	str	r3, [r6, #0]
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	0699      	lsls	r1, r3, #26
 800b3ea:	bf42      	ittt	mi
 800b3ec:	6833      	ldrmi	r3, [r6, #0]
 800b3ee:	3302      	addmi	r3, #2
 800b3f0:	6033      	strmi	r3, [r6, #0]
 800b3f2:	6825      	ldr	r5, [r4, #0]
 800b3f4:	f015 0506 	ands.w	r5, r5, #6
 800b3f8:	d106      	bne.n	800b408 <_printf_common+0x48>
 800b3fa:	f104 0a19 	add.w	sl, r4, #25
 800b3fe:	68e3      	ldr	r3, [r4, #12]
 800b400:	6832      	ldr	r2, [r6, #0]
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	42ab      	cmp	r3, r5
 800b406:	dc26      	bgt.n	800b456 <_printf_common+0x96>
 800b408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b40c:	6822      	ldr	r2, [r4, #0]
 800b40e:	3b00      	subs	r3, #0
 800b410:	bf18      	it	ne
 800b412:	2301      	movne	r3, #1
 800b414:	0692      	lsls	r2, r2, #26
 800b416:	d42b      	bmi.n	800b470 <_printf_common+0xb0>
 800b418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b41c:	4641      	mov	r1, r8
 800b41e:	4638      	mov	r0, r7
 800b420:	47c8      	blx	r9
 800b422:	3001      	adds	r0, #1
 800b424:	d01e      	beq.n	800b464 <_printf_common+0xa4>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	6922      	ldr	r2, [r4, #16]
 800b42a:	f003 0306 	and.w	r3, r3, #6
 800b42e:	2b04      	cmp	r3, #4
 800b430:	bf02      	ittt	eq
 800b432:	68e5      	ldreq	r5, [r4, #12]
 800b434:	6833      	ldreq	r3, [r6, #0]
 800b436:	1aed      	subeq	r5, r5, r3
 800b438:	68a3      	ldr	r3, [r4, #8]
 800b43a:	bf0c      	ite	eq
 800b43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b440:	2500      	movne	r5, #0
 800b442:	4293      	cmp	r3, r2
 800b444:	bfc4      	itt	gt
 800b446:	1a9b      	subgt	r3, r3, r2
 800b448:	18ed      	addgt	r5, r5, r3
 800b44a:	2600      	movs	r6, #0
 800b44c:	341a      	adds	r4, #26
 800b44e:	42b5      	cmp	r5, r6
 800b450:	d11a      	bne.n	800b488 <_printf_common+0xc8>
 800b452:	2000      	movs	r0, #0
 800b454:	e008      	b.n	800b468 <_printf_common+0xa8>
 800b456:	2301      	movs	r3, #1
 800b458:	4652      	mov	r2, sl
 800b45a:	4641      	mov	r1, r8
 800b45c:	4638      	mov	r0, r7
 800b45e:	47c8      	blx	r9
 800b460:	3001      	adds	r0, #1
 800b462:	d103      	bne.n	800b46c <_printf_common+0xac>
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46c:	3501      	adds	r5, #1
 800b46e:	e7c6      	b.n	800b3fe <_printf_common+0x3e>
 800b470:	18e1      	adds	r1, r4, r3
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	2030      	movs	r0, #48	@ 0x30
 800b476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b47a:	4422      	add	r2, r4
 800b47c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b484:	3302      	adds	r3, #2
 800b486:	e7c7      	b.n	800b418 <_printf_common+0x58>
 800b488:	2301      	movs	r3, #1
 800b48a:	4622      	mov	r2, r4
 800b48c:	4641      	mov	r1, r8
 800b48e:	4638      	mov	r0, r7
 800b490:	47c8      	blx	r9
 800b492:	3001      	adds	r0, #1
 800b494:	d0e6      	beq.n	800b464 <_printf_common+0xa4>
 800b496:	3601      	adds	r6, #1
 800b498:	e7d9      	b.n	800b44e <_printf_common+0x8e>
	...

0800b49c <_printf_i>:
 800b49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	7e0f      	ldrb	r7, [r1, #24]
 800b4a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4a4:	2f78      	cmp	r7, #120	@ 0x78
 800b4a6:	4691      	mov	r9, r2
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	469a      	mov	sl, r3
 800b4ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4b2:	d807      	bhi.n	800b4c4 <_printf_i+0x28>
 800b4b4:	2f62      	cmp	r7, #98	@ 0x62
 800b4b6:	d80a      	bhi.n	800b4ce <_printf_i+0x32>
 800b4b8:	2f00      	cmp	r7, #0
 800b4ba:	f000 80d1 	beq.w	800b660 <_printf_i+0x1c4>
 800b4be:	2f58      	cmp	r7, #88	@ 0x58
 800b4c0:	f000 80b8 	beq.w	800b634 <_printf_i+0x198>
 800b4c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4cc:	e03a      	b.n	800b544 <_printf_i+0xa8>
 800b4ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4d2:	2b15      	cmp	r3, #21
 800b4d4:	d8f6      	bhi.n	800b4c4 <_printf_i+0x28>
 800b4d6:	a101      	add	r1, pc, #4	@ (adr r1, 800b4dc <_printf_i+0x40>)
 800b4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4dc:	0800b535 	.word	0x0800b535
 800b4e0:	0800b549 	.word	0x0800b549
 800b4e4:	0800b4c5 	.word	0x0800b4c5
 800b4e8:	0800b4c5 	.word	0x0800b4c5
 800b4ec:	0800b4c5 	.word	0x0800b4c5
 800b4f0:	0800b4c5 	.word	0x0800b4c5
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b4c5 	.word	0x0800b4c5
 800b4fc:	0800b4c5 	.word	0x0800b4c5
 800b500:	0800b4c5 	.word	0x0800b4c5
 800b504:	0800b4c5 	.word	0x0800b4c5
 800b508:	0800b647 	.word	0x0800b647
 800b50c:	0800b573 	.word	0x0800b573
 800b510:	0800b601 	.word	0x0800b601
 800b514:	0800b4c5 	.word	0x0800b4c5
 800b518:	0800b4c5 	.word	0x0800b4c5
 800b51c:	0800b669 	.word	0x0800b669
 800b520:	0800b4c5 	.word	0x0800b4c5
 800b524:	0800b573 	.word	0x0800b573
 800b528:	0800b4c5 	.word	0x0800b4c5
 800b52c:	0800b4c5 	.word	0x0800b4c5
 800b530:	0800b609 	.word	0x0800b609
 800b534:	6833      	ldr	r3, [r6, #0]
 800b536:	1d1a      	adds	r2, r3, #4
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6032      	str	r2, [r6, #0]
 800b53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b544:	2301      	movs	r3, #1
 800b546:	e09c      	b.n	800b682 <_printf_i+0x1e6>
 800b548:	6833      	ldr	r3, [r6, #0]
 800b54a:	6820      	ldr	r0, [r4, #0]
 800b54c:	1d19      	adds	r1, r3, #4
 800b54e:	6031      	str	r1, [r6, #0]
 800b550:	0606      	lsls	r6, r0, #24
 800b552:	d501      	bpl.n	800b558 <_printf_i+0xbc>
 800b554:	681d      	ldr	r5, [r3, #0]
 800b556:	e003      	b.n	800b560 <_printf_i+0xc4>
 800b558:	0645      	lsls	r5, r0, #25
 800b55a:	d5fb      	bpl.n	800b554 <_printf_i+0xb8>
 800b55c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b560:	2d00      	cmp	r5, #0
 800b562:	da03      	bge.n	800b56c <_printf_i+0xd0>
 800b564:	232d      	movs	r3, #45	@ 0x2d
 800b566:	426d      	negs	r5, r5
 800b568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b56c:	4858      	ldr	r0, [pc, #352]	@ (800b6d0 <_printf_i+0x234>)
 800b56e:	230a      	movs	r3, #10
 800b570:	e011      	b.n	800b596 <_printf_i+0xfa>
 800b572:	6821      	ldr	r1, [r4, #0]
 800b574:	6833      	ldr	r3, [r6, #0]
 800b576:	0608      	lsls	r0, r1, #24
 800b578:	f853 5b04 	ldr.w	r5, [r3], #4
 800b57c:	d402      	bmi.n	800b584 <_printf_i+0xe8>
 800b57e:	0649      	lsls	r1, r1, #25
 800b580:	bf48      	it	mi
 800b582:	b2ad      	uxthmi	r5, r5
 800b584:	2f6f      	cmp	r7, #111	@ 0x6f
 800b586:	4852      	ldr	r0, [pc, #328]	@ (800b6d0 <_printf_i+0x234>)
 800b588:	6033      	str	r3, [r6, #0]
 800b58a:	bf14      	ite	ne
 800b58c:	230a      	movne	r3, #10
 800b58e:	2308      	moveq	r3, #8
 800b590:	2100      	movs	r1, #0
 800b592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b596:	6866      	ldr	r6, [r4, #4]
 800b598:	60a6      	str	r6, [r4, #8]
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	db05      	blt.n	800b5aa <_printf_i+0x10e>
 800b59e:	6821      	ldr	r1, [r4, #0]
 800b5a0:	432e      	orrs	r6, r5
 800b5a2:	f021 0104 	bic.w	r1, r1, #4
 800b5a6:	6021      	str	r1, [r4, #0]
 800b5a8:	d04b      	beq.n	800b642 <_printf_i+0x1a6>
 800b5aa:	4616      	mov	r6, r2
 800b5ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5b0:	fb03 5711 	mls	r7, r3, r1, r5
 800b5b4:	5dc7      	ldrb	r7, [r0, r7]
 800b5b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5ba:	462f      	mov	r7, r5
 800b5bc:	42bb      	cmp	r3, r7
 800b5be:	460d      	mov	r5, r1
 800b5c0:	d9f4      	bls.n	800b5ac <_printf_i+0x110>
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	d10b      	bne.n	800b5de <_printf_i+0x142>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	07df      	lsls	r7, r3, #31
 800b5ca:	d508      	bpl.n	800b5de <_printf_i+0x142>
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	6861      	ldr	r1, [r4, #4]
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	bfde      	ittt	le
 800b5d4:	2330      	movle	r3, #48	@ 0x30
 800b5d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5de:	1b92      	subs	r2, r2, r6
 800b5e0:	6122      	str	r2, [r4, #16]
 800b5e2:	f8cd a000 	str.w	sl, [sp]
 800b5e6:	464b      	mov	r3, r9
 800b5e8:	aa03      	add	r2, sp, #12
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	f7ff fee7 	bl	800b3c0 <_printf_common>
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	d14a      	bne.n	800b68c <_printf_i+0x1f0>
 800b5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fa:	b004      	add	sp, #16
 800b5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	f043 0320 	orr.w	r3, r3, #32
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	4832      	ldr	r0, [pc, #200]	@ (800b6d4 <_printf_i+0x238>)
 800b60a:	2778      	movs	r7, #120	@ 0x78
 800b60c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	6831      	ldr	r1, [r6, #0]
 800b614:	061f      	lsls	r7, r3, #24
 800b616:	f851 5b04 	ldr.w	r5, [r1], #4
 800b61a:	d402      	bmi.n	800b622 <_printf_i+0x186>
 800b61c:	065f      	lsls	r7, r3, #25
 800b61e:	bf48      	it	mi
 800b620:	b2ad      	uxthmi	r5, r5
 800b622:	6031      	str	r1, [r6, #0]
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	bf44      	itt	mi
 800b628:	f043 0320 	orrmi.w	r3, r3, #32
 800b62c:	6023      	strmi	r3, [r4, #0]
 800b62e:	b11d      	cbz	r5, 800b638 <_printf_i+0x19c>
 800b630:	2310      	movs	r3, #16
 800b632:	e7ad      	b.n	800b590 <_printf_i+0xf4>
 800b634:	4826      	ldr	r0, [pc, #152]	@ (800b6d0 <_printf_i+0x234>)
 800b636:	e7e9      	b.n	800b60c <_printf_i+0x170>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	f023 0320 	bic.w	r3, r3, #32
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	e7f6      	b.n	800b630 <_printf_i+0x194>
 800b642:	4616      	mov	r6, r2
 800b644:	e7bd      	b.n	800b5c2 <_printf_i+0x126>
 800b646:	6833      	ldr	r3, [r6, #0]
 800b648:	6825      	ldr	r5, [r4, #0]
 800b64a:	6961      	ldr	r1, [r4, #20]
 800b64c:	1d18      	adds	r0, r3, #4
 800b64e:	6030      	str	r0, [r6, #0]
 800b650:	062e      	lsls	r6, r5, #24
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	d501      	bpl.n	800b65a <_printf_i+0x1be>
 800b656:	6019      	str	r1, [r3, #0]
 800b658:	e002      	b.n	800b660 <_printf_i+0x1c4>
 800b65a:	0668      	lsls	r0, r5, #25
 800b65c:	d5fb      	bpl.n	800b656 <_printf_i+0x1ba>
 800b65e:	8019      	strh	r1, [r3, #0]
 800b660:	2300      	movs	r3, #0
 800b662:	6123      	str	r3, [r4, #16]
 800b664:	4616      	mov	r6, r2
 800b666:	e7bc      	b.n	800b5e2 <_printf_i+0x146>
 800b668:	6833      	ldr	r3, [r6, #0]
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	6032      	str	r2, [r6, #0]
 800b66e:	681e      	ldr	r6, [r3, #0]
 800b670:	6862      	ldr	r2, [r4, #4]
 800b672:	2100      	movs	r1, #0
 800b674:	4630      	mov	r0, r6
 800b676:	f7f4 fdab 	bl	80001d0 <memchr>
 800b67a:	b108      	cbz	r0, 800b680 <_printf_i+0x1e4>
 800b67c:	1b80      	subs	r0, r0, r6
 800b67e:	6060      	str	r0, [r4, #4]
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	2300      	movs	r3, #0
 800b686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b68a:	e7aa      	b.n	800b5e2 <_printf_i+0x146>
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	4632      	mov	r2, r6
 800b690:	4649      	mov	r1, r9
 800b692:	4640      	mov	r0, r8
 800b694:	47d0      	blx	sl
 800b696:	3001      	adds	r0, #1
 800b698:	d0ad      	beq.n	800b5f6 <_printf_i+0x15a>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	079b      	lsls	r3, r3, #30
 800b69e:	d413      	bmi.n	800b6c8 <_printf_i+0x22c>
 800b6a0:	68e0      	ldr	r0, [r4, #12]
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	4298      	cmp	r0, r3
 800b6a6:	bfb8      	it	lt
 800b6a8:	4618      	movlt	r0, r3
 800b6aa:	e7a6      	b.n	800b5fa <_printf_i+0x15e>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4632      	mov	r2, r6
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	47d0      	blx	sl
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	d09d      	beq.n	800b5f6 <_printf_i+0x15a>
 800b6ba:	3501      	adds	r5, #1
 800b6bc:	68e3      	ldr	r3, [r4, #12]
 800b6be:	9903      	ldr	r1, [sp, #12]
 800b6c0:	1a5b      	subs	r3, r3, r1
 800b6c2:	42ab      	cmp	r3, r5
 800b6c4:	dcf2      	bgt.n	800b6ac <_printf_i+0x210>
 800b6c6:	e7eb      	b.n	800b6a0 <_printf_i+0x204>
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	f104 0619 	add.w	r6, r4, #25
 800b6ce:	e7f5      	b.n	800b6bc <_printf_i+0x220>
 800b6d0:	0800c099 	.word	0x0800c099
 800b6d4:	0800c0aa 	.word	0x0800c0aa

0800b6d8 <__sflush_r>:
 800b6d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e0:	0716      	lsls	r6, r2, #28
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	d454      	bmi.n	800b792 <__sflush_r+0xba>
 800b6e8:	684b      	ldr	r3, [r1, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dc02      	bgt.n	800b6f4 <__sflush_r+0x1c>
 800b6ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dd48      	ble.n	800b786 <__sflush_r+0xae>
 800b6f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	d045      	beq.n	800b786 <__sflush_r+0xae>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b700:	682f      	ldr	r7, [r5, #0]
 800b702:	6a21      	ldr	r1, [r4, #32]
 800b704:	602b      	str	r3, [r5, #0]
 800b706:	d030      	beq.n	800b76a <__sflush_r+0x92>
 800b708:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	0759      	lsls	r1, r3, #29
 800b70e:	d505      	bpl.n	800b71c <__sflush_r+0x44>
 800b710:	6863      	ldr	r3, [r4, #4]
 800b712:	1ad2      	subs	r2, r2, r3
 800b714:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b716:	b10b      	cbz	r3, 800b71c <__sflush_r+0x44>
 800b718:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b71a:	1ad2      	subs	r2, r2, r3
 800b71c:	2300      	movs	r3, #0
 800b71e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	4628      	mov	r0, r5
 800b724:	47b0      	blx	r6
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	d106      	bne.n	800b73a <__sflush_r+0x62>
 800b72c:	6829      	ldr	r1, [r5, #0]
 800b72e:	291d      	cmp	r1, #29
 800b730:	d82b      	bhi.n	800b78a <__sflush_r+0xb2>
 800b732:	4a2a      	ldr	r2, [pc, #168]	@ (800b7dc <__sflush_r+0x104>)
 800b734:	40ca      	lsrs	r2, r1
 800b736:	07d6      	lsls	r6, r2, #31
 800b738:	d527      	bpl.n	800b78a <__sflush_r+0xb2>
 800b73a:	2200      	movs	r2, #0
 800b73c:	6062      	str	r2, [r4, #4]
 800b73e:	04d9      	lsls	r1, r3, #19
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	d504      	bpl.n	800b750 <__sflush_r+0x78>
 800b746:	1c42      	adds	r2, r0, #1
 800b748:	d101      	bne.n	800b74e <__sflush_r+0x76>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	b903      	cbnz	r3, 800b750 <__sflush_r+0x78>
 800b74e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b750:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b752:	602f      	str	r7, [r5, #0]
 800b754:	b1b9      	cbz	r1, 800b786 <__sflush_r+0xae>
 800b756:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b75a:	4299      	cmp	r1, r3
 800b75c:	d002      	beq.n	800b764 <__sflush_r+0x8c>
 800b75e:	4628      	mov	r0, r5
 800b760:	f7ff fb4a 	bl	800adf8 <_free_r>
 800b764:	2300      	movs	r3, #0
 800b766:	6363      	str	r3, [r4, #52]	@ 0x34
 800b768:	e00d      	b.n	800b786 <__sflush_r+0xae>
 800b76a:	2301      	movs	r3, #1
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b0      	blx	r6
 800b770:	4602      	mov	r2, r0
 800b772:	1c50      	adds	r0, r2, #1
 800b774:	d1c9      	bne.n	800b70a <__sflush_r+0x32>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d0c6      	beq.n	800b70a <__sflush_r+0x32>
 800b77c:	2b1d      	cmp	r3, #29
 800b77e:	d001      	beq.n	800b784 <__sflush_r+0xac>
 800b780:	2b16      	cmp	r3, #22
 800b782:	d11e      	bne.n	800b7c2 <__sflush_r+0xea>
 800b784:	602f      	str	r7, [r5, #0]
 800b786:	2000      	movs	r0, #0
 800b788:	e022      	b.n	800b7d0 <__sflush_r+0xf8>
 800b78a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b78e:	b21b      	sxth	r3, r3
 800b790:	e01b      	b.n	800b7ca <__sflush_r+0xf2>
 800b792:	690f      	ldr	r7, [r1, #16]
 800b794:	2f00      	cmp	r7, #0
 800b796:	d0f6      	beq.n	800b786 <__sflush_r+0xae>
 800b798:	0793      	lsls	r3, r2, #30
 800b79a:	680e      	ldr	r6, [r1, #0]
 800b79c:	bf08      	it	eq
 800b79e:	694b      	ldreq	r3, [r1, #20]
 800b7a0:	600f      	str	r7, [r1, #0]
 800b7a2:	bf18      	it	ne
 800b7a4:	2300      	movne	r3, #0
 800b7a6:	eba6 0807 	sub.w	r8, r6, r7
 800b7aa:	608b      	str	r3, [r1, #8]
 800b7ac:	f1b8 0f00 	cmp.w	r8, #0
 800b7b0:	dde9      	ble.n	800b786 <__sflush_r+0xae>
 800b7b2:	6a21      	ldr	r1, [r4, #32]
 800b7b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7b6:	4643      	mov	r3, r8
 800b7b8:	463a      	mov	r2, r7
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	47b0      	blx	r6
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	dc08      	bgt.n	800b7d4 <__sflush_r+0xfc>
 800b7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d4:	4407      	add	r7, r0
 800b7d6:	eba8 0800 	sub.w	r8, r8, r0
 800b7da:	e7e7      	b.n	800b7ac <__sflush_r+0xd4>
 800b7dc:	20400001 	.word	0x20400001

0800b7e0 <_fflush_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	690b      	ldr	r3, [r1, #16]
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b913      	cbnz	r3, 800b7f0 <_fflush_r+0x10>
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	b118      	cbz	r0, 800b7fa <_fflush_r+0x1a>
 800b7f2:	6a03      	ldr	r3, [r0, #32]
 800b7f4:	b90b      	cbnz	r3, 800b7fa <_fflush_r+0x1a>
 800b7f6:	f7ff f99d 	bl	800ab34 <__sinit>
 800b7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0f3      	beq.n	800b7ea <_fflush_r+0xa>
 800b802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b804:	07d0      	lsls	r0, r2, #31
 800b806:	d404      	bmi.n	800b812 <_fflush_r+0x32>
 800b808:	0599      	lsls	r1, r3, #22
 800b80a:	d402      	bmi.n	800b812 <_fflush_r+0x32>
 800b80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b80e:	f7ff fae2 	bl	800add6 <__retarget_lock_acquire_recursive>
 800b812:	4628      	mov	r0, r5
 800b814:	4621      	mov	r1, r4
 800b816:	f7ff ff5f 	bl	800b6d8 <__sflush_r>
 800b81a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b81c:	07da      	lsls	r2, r3, #31
 800b81e:	4605      	mov	r5, r0
 800b820:	d4e4      	bmi.n	800b7ec <_fflush_r+0xc>
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	059b      	lsls	r3, r3, #22
 800b826:	d4e1      	bmi.n	800b7ec <_fflush_r+0xc>
 800b828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b82a:	f7ff fad5 	bl	800add8 <__retarget_lock_release_recursive>
 800b82e:	e7dd      	b.n	800b7ec <_fflush_r+0xc>

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	2900      	cmp	r1, #0
 800b83a:	b096      	sub	sp, #88	@ 0x58
 800b83c:	4615      	mov	r5, r2
 800b83e:	461e      	mov	r6, r3
 800b840:	da0d      	bge.n	800b85e <__swhatbuf_r+0x2e>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	bf14      	ite	ne
 800b84e:	2340      	movne	r3, #64	@ 0x40
 800b850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b854:	2000      	movs	r0, #0
 800b856:	6031      	str	r1, [r6, #0]
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	b016      	add	sp, #88	@ 0x58
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	466a      	mov	r2, sp
 800b860:	f000 f8f6 	bl	800ba50 <_fstat_r>
 800b864:	2800      	cmp	r0, #0
 800b866:	dbec      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b868:	9901      	ldr	r1, [sp, #4]
 800b86a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b86e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b872:	4259      	negs	r1, r3
 800b874:	4159      	adcs	r1, r3
 800b876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b87a:	e7eb      	b.n	800b854 <__swhatbuf_r+0x24>

0800b87c <__smakebuf_r>:
 800b87c:	898b      	ldrh	r3, [r1, #12]
 800b87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b880:	079d      	lsls	r5, r3, #30
 800b882:	4606      	mov	r6, r0
 800b884:	460c      	mov	r4, r1
 800b886:	d507      	bpl.n	800b898 <__smakebuf_r+0x1c>
 800b888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	2301      	movs	r3, #1
 800b892:	6163      	str	r3, [r4, #20]
 800b894:	b003      	add	sp, #12
 800b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b898:	ab01      	add	r3, sp, #4
 800b89a:	466a      	mov	r2, sp
 800b89c:	f7ff ffc8 	bl	800b830 <__swhatbuf_r>
 800b8a0:	9f00      	ldr	r7, [sp, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff f82c 	bl	800a904 <_malloc_r>
 800b8ac:	b948      	cbnz	r0, 800b8c2 <__smakebuf_r+0x46>
 800b8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b2:	059a      	lsls	r2, r3, #22
 800b8b4:	d4ee      	bmi.n	800b894 <__smakebuf_r+0x18>
 800b8b6:	f023 0303 	bic.w	r3, r3, #3
 800b8ba:	f043 0302 	orr.w	r3, r3, #2
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	e7e2      	b.n	800b888 <__smakebuf_r+0xc>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	6020      	str	r0, [r4, #0]
 800b8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8d2:	b15b      	cbz	r3, 800b8ec <__smakebuf_r+0x70>
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f8cb 	bl	800ba74 <_isatty_r>
 800b8de:	b128      	cbz	r0, 800b8ec <__smakebuf_r+0x70>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	431d      	orrs	r5, r3
 800b8f0:	81a5      	strh	r5, [r4, #12]
 800b8f2:	e7cf      	b.n	800b894 <__smakebuf_r+0x18>

0800b8f4 <__swbuf_r>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	460e      	mov	r6, r1
 800b8f8:	4614      	mov	r4, r2
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	b118      	cbz	r0, 800b906 <__swbuf_r+0x12>
 800b8fe:	6a03      	ldr	r3, [r0, #32]
 800b900:	b90b      	cbnz	r3, 800b906 <__swbuf_r+0x12>
 800b902:	f7ff f917 	bl	800ab34 <__sinit>
 800b906:	69a3      	ldr	r3, [r4, #24]
 800b908:	60a3      	str	r3, [r4, #8]
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	071a      	lsls	r2, r3, #28
 800b90e:	d501      	bpl.n	800b914 <__swbuf_r+0x20>
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	b943      	cbnz	r3, 800b926 <__swbuf_r+0x32>
 800b914:	4621      	mov	r1, r4
 800b916:	4628      	mov	r0, r5
 800b918:	f000 f82a 	bl	800b970 <__swsetup_r>
 800b91c:	b118      	cbz	r0, 800b926 <__swbuf_r+0x32>
 800b91e:	f04f 37ff 	mov.w	r7, #4294967295
 800b922:	4638      	mov	r0, r7
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	6922      	ldr	r2, [r4, #16]
 800b92a:	1a98      	subs	r0, r3, r2
 800b92c:	6963      	ldr	r3, [r4, #20]
 800b92e:	b2f6      	uxtb	r6, r6
 800b930:	4283      	cmp	r3, r0
 800b932:	4637      	mov	r7, r6
 800b934:	dc05      	bgt.n	800b942 <__swbuf_r+0x4e>
 800b936:	4621      	mov	r1, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	f7ff ff51 	bl	800b7e0 <_fflush_r>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d1ed      	bne.n	800b91e <__swbuf_r+0x2a>
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	3b01      	subs	r3, #1
 800b946:	60a3      	str	r3, [r4, #8]
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	6022      	str	r2, [r4, #0]
 800b94e:	701e      	strb	r6, [r3, #0]
 800b950:	6962      	ldr	r2, [r4, #20]
 800b952:	1c43      	adds	r3, r0, #1
 800b954:	429a      	cmp	r2, r3
 800b956:	d004      	beq.n	800b962 <__swbuf_r+0x6e>
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	07db      	lsls	r3, r3, #31
 800b95c:	d5e1      	bpl.n	800b922 <__swbuf_r+0x2e>
 800b95e:	2e0a      	cmp	r6, #10
 800b960:	d1df      	bne.n	800b922 <__swbuf_r+0x2e>
 800b962:	4621      	mov	r1, r4
 800b964:	4628      	mov	r0, r5
 800b966:	f7ff ff3b 	bl	800b7e0 <_fflush_r>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d0d9      	beq.n	800b922 <__swbuf_r+0x2e>
 800b96e:	e7d6      	b.n	800b91e <__swbuf_r+0x2a>

0800b970 <__swsetup_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4b29      	ldr	r3, [pc, #164]	@ (800ba18 <__swsetup_r+0xa8>)
 800b974:	4605      	mov	r5, r0
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	460c      	mov	r4, r1
 800b97a:	b118      	cbz	r0, 800b984 <__swsetup_r+0x14>
 800b97c:	6a03      	ldr	r3, [r0, #32]
 800b97e:	b90b      	cbnz	r3, 800b984 <__swsetup_r+0x14>
 800b980:	f7ff f8d8 	bl	800ab34 <__sinit>
 800b984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b988:	0719      	lsls	r1, r3, #28
 800b98a:	d422      	bmi.n	800b9d2 <__swsetup_r+0x62>
 800b98c:	06da      	lsls	r2, r3, #27
 800b98e:	d407      	bmi.n	800b9a0 <__swsetup_r+0x30>
 800b990:	2209      	movs	r2, #9
 800b992:	602a      	str	r2, [r5, #0]
 800b994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b998:	81a3      	strh	r3, [r4, #12]
 800b99a:	f04f 30ff 	mov.w	r0, #4294967295
 800b99e:	e033      	b.n	800ba08 <__swsetup_r+0x98>
 800b9a0:	0758      	lsls	r0, r3, #29
 800b9a2:	d512      	bpl.n	800b9ca <__swsetup_r+0x5a>
 800b9a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9a6:	b141      	cbz	r1, 800b9ba <__swsetup_r+0x4a>
 800b9a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9ac:	4299      	cmp	r1, r3
 800b9ae:	d002      	beq.n	800b9b6 <__swsetup_r+0x46>
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f7ff fa21 	bl	800adf8 <_free_r>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6063      	str	r3, [r4, #4]
 800b9c6:	6923      	ldr	r3, [r4, #16]
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	f043 0308 	orr.w	r3, r3, #8
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	b94b      	cbnz	r3, 800b9ea <__swsetup_r+0x7a>
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9e0:	d003      	beq.n	800b9ea <__swsetup_r+0x7a>
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f7ff ff49 	bl	800b87c <__smakebuf_r>
 800b9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ee:	f013 0201 	ands.w	r2, r3, #1
 800b9f2:	d00a      	beq.n	800ba0a <__swsetup_r+0x9a>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	60a2      	str	r2, [r4, #8]
 800b9f8:	6962      	ldr	r2, [r4, #20]
 800b9fa:	4252      	negs	r2, r2
 800b9fc:	61a2      	str	r2, [r4, #24]
 800b9fe:	6922      	ldr	r2, [r4, #16]
 800ba00:	b942      	cbnz	r2, 800ba14 <__swsetup_r+0xa4>
 800ba02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba06:	d1c5      	bne.n	800b994 <__swsetup_r+0x24>
 800ba08:	bd38      	pop	{r3, r4, r5, pc}
 800ba0a:	0799      	lsls	r1, r3, #30
 800ba0c:	bf58      	it	pl
 800ba0e:	6962      	ldrpl	r2, [r4, #20]
 800ba10:	60a2      	str	r2, [r4, #8]
 800ba12:	e7f4      	b.n	800b9fe <__swsetup_r+0x8e>
 800ba14:	2000      	movs	r0, #0
 800ba16:	e7f7      	b.n	800ba08 <__swsetup_r+0x98>
 800ba18:	20000028 	.word	0x20000028

0800ba1c <memmove>:
 800ba1c:	4288      	cmp	r0, r1
 800ba1e:	b510      	push	{r4, lr}
 800ba20:	eb01 0402 	add.w	r4, r1, r2
 800ba24:	d902      	bls.n	800ba2c <memmove+0x10>
 800ba26:	4284      	cmp	r4, r0
 800ba28:	4623      	mov	r3, r4
 800ba2a:	d807      	bhi.n	800ba3c <memmove+0x20>
 800ba2c:	1e43      	subs	r3, r0, #1
 800ba2e:	42a1      	cmp	r1, r4
 800ba30:	d008      	beq.n	800ba44 <memmove+0x28>
 800ba32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba3a:	e7f8      	b.n	800ba2e <memmove+0x12>
 800ba3c:	4402      	add	r2, r0
 800ba3e:	4601      	mov	r1, r0
 800ba40:	428a      	cmp	r2, r1
 800ba42:	d100      	bne.n	800ba46 <memmove+0x2a>
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba4e:	e7f7      	b.n	800ba40 <memmove+0x24>

0800ba50 <_fstat_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	@ (800ba70 <_fstat_r+0x20>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f7f6 fce7 	bl	8002430 <_fstat>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d102      	bne.n	800ba6c <_fstat_r+0x1c>
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b103      	cbz	r3, 800ba6c <_fstat_r+0x1c>
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	20000620 	.word	0x20000620

0800ba74 <_isatty_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4d06      	ldr	r5, [pc, #24]	@ (800ba90 <_isatty_r+0x1c>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	602b      	str	r3, [r5, #0]
 800ba80:	f7f6 fce6 	bl	8002450 <_isatty>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_isatty_r+0x1a>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_isatty_r+0x1a>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20000620 	.word	0x20000620

0800ba94 <_realloc_r>:
 800ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba98:	4607      	mov	r7, r0
 800ba9a:	4614      	mov	r4, r2
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	b921      	cbnz	r1, 800baaa <_realloc_r+0x16>
 800baa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa4:	4611      	mov	r1, r2
 800baa6:	f7fe bf2d 	b.w	800a904 <_malloc_r>
 800baaa:	b92a      	cbnz	r2, 800bab8 <_realloc_r+0x24>
 800baac:	f7ff f9a4 	bl	800adf8 <_free_r>
 800bab0:	4625      	mov	r5, r4
 800bab2:	4628      	mov	r0, r5
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	f000 f81a 	bl	800baf0 <_malloc_usable_size_r>
 800babc:	4284      	cmp	r4, r0
 800babe:	4606      	mov	r6, r0
 800bac0:	d802      	bhi.n	800bac8 <_realloc_r+0x34>
 800bac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bac6:	d8f4      	bhi.n	800bab2 <_realloc_r+0x1e>
 800bac8:	4621      	mov	r1, r4
 800baca:	4638      	mov	r0, r7
 800bacc:	f7fe ff1a 	bl	800a904 <_malloc_r>
 800bad0:	4680      	mov	r8, r0
 800bad2:	b908      	cbnz	r0, 800bad8 <_realloc_r+0x44>
 800bad4:	4645      	mov	r5, r8
 800bad6:	e7ec      	b.n	800bab2 <_realloc_r+0x1e>
 800bad8:	42b4      	cmp	r4, r6
 800bada:	4622      	mov	r2, r4
 800badc:	4629      	mov	r1, r5
 800bade:	bf28      	it	cs
 800bae0:	4632      	movcs	r2, r6
 800bae2:	f7ff f97a 	bl	800adda <memcpy>
 800bae6:	4629      	mov	r1, r5
 800bae8:	4638      	mov	r0, r7
 800baea:	f7ff f985 	bl	800adf8 <_free_r>
 800baee:	e7f1      	b.n	800bad4 <_realloc_r+0x40>

0800baf0 <_malloc_usable_size_r>:
 800baf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf4:	1f18      	subs	r0, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bfbc      	itt	lt
 800bafa:	580b      	ldrlt	r3, [r1, r0]
 800bafc:	18c0      	addlt	r0, r0, r3
 800bafe:	4770      	bx	lr

0800bb00 <_init>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	bf00      	nop
 800bb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb06:	bc08      	pop	{r3}
 800bb08:	469e      	mov	lr, r3
 800bb0a:	4770      	bx	lr

0800bb0c <_fini>:
 800bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0e:	bf00      	nop
 800bb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb12:	bc08      	pop	{r3}
 800bb14:	469e      	mov	lr, r3
 800bb16:	4770      	bx	lr
